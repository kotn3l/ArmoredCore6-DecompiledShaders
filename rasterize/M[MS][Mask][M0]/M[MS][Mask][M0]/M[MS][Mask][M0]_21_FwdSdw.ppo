#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1130;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].z) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3720 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _393 = (_386 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _394 = (_386 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _395 = (_386 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _434 = _430.z;
    float _443 = ((_413.z - _434) * _386) + _434;
    float _446 = ((((_413.x - _432) * _386) + _432) * 2.0) + (-1.0);
    float _448 = ((((_413.y - _433) * _386) + _433) * 2.0) + (-1.0);
    float _449 = dot(vec2(_446, _448), vec2(_446, _448));
    float _3731 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _454 = sqrt(1.0 - (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _482 = (((_470.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _446;
    float _483 = (((_470.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _448;
    float _486 = fma(_454, _220, fma(_483, _227, _482 * _213));
    float _489 = fma(_454, _221, fma(_483, _228, _482 * _214));
    float _492 = fma(_454, _222, fma(_483, _229, _482 * _215));
    float _496 = inversesqrt(dot(vec3(_486, _489, _492), vec3(_486, _489, _492)));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _525 = _523.x;
    float _526 = 1.0 - _525;
    float _532 = (cbMtdParam._m0[19u].x + dot(vec4(_496 * _486, _496 * _489, _496 * _492, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_525 - _526) * cbMtdParam._m0[24u].w) + _526) * cbMtdParam._m0[21u].z);
    float _3742 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _540 = (_533 * (cbMtdParam._m0[17u].x - _393)) + _393;
    float _541 = (_533 * (cbMtdParam._m0[17u].y - _394)) + _394;
    float _542 = (_533 * (cbMtdParam._m0[17u].z - _395)) + _395;
    float _546 = (cbMtdParam._m0[19u].w * (_470.z - _443)) + _443;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _566 = (_559.x * 2.0) + (-1.0);
    float _567 = (_559.y * 2.0) + (-1.0);
    float _568 = dot(vec2(_566, _567), vec2(_566, _567));
    float _3753 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _576 = ((_559.z - _546) * _533) + _546;
    float _586 = ((sqrt(1.0 - (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) - _454) * _533) + _454;
    float _589 = (((_566 - _482) * _533) + _482) + (cbMtdParam._m0[21u].x * _482);
    float _590 = (((_567 - _483) * _533) + _483) + (cbMtdParam._m0[21u].x * _483);
    float _594 = cbMtdParam._m0[22u].x + _470.w;
    float _597 = fma(_586, _220, fma(_590, _227, _589 * _213));
    float _600 = fma(_586, _221, fma(_590, _228, _589 * _214));
    float _603 = fma(_586, _222, fma(_590, _229, _589 * _215));
    float _607 = inversesqrt(dot(vec3(_597, _600, _603), vec3(_597, _600, _603)));
    float _608 = _607 * _597;
    float _609 = _607 * _600;
    float _610 = _607 * _603;
    float _3764 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _611 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3786 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3797 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3808 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _629 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _681 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _671);
    float _682 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _671);
    float _683 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _671);
    float _687 = inversesqrt(dot(vec3(_681, _682, _683), vec3(_681, _682, _683)));
    float _688 = _681 * _687;
    float _689 = _682 * _687;
    float _690 = _683 * _687;
    float _696 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _697 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _715 = fma(_610, cbSceneParam._m0[5u].z, fma(_609, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _608));
    float _718 = fma(_610, cbSceneParam._m0[6u].z, fma(_609, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _608));
    float _721 = fma(_610, cbSceneParam._m0[7u].z, fma(_609, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _608));
    uint _735 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _741 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * cbInstanceData._m0[_735].x;
    float _742 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * cbInstanceData._m0[_735].y;
    float _743 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * cbInstanceData._m0[_735].z;
    float _3819 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    vec4 _755 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _696, cbSceneParam._m0[86u].y * _697));
    float _759 = ((isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * TEXCOORD_5.w) * _755.x;
    float _760 = dot(vec3(_608, _609, _610), vec3(_688, _689, _690));
    float _763 = _760 * 2.0;
    float _767 = (_763 * _608) - _688;
    float _768 = (_763 * _609) - _689;
    float _769 = (_763 * _610) - _690;
    float _773 = abs(dot(vec3(_688, _689, _690), vec3(_608, _609, _610)));
    float _3852 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _775 = sqrt(_611);
    float _788 = exp2((_775 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_775 * 3.0));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1129;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _854 = fma(_828, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820));
        float _858 = fma(_828, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820));
        float _862 = fma(_828, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820));
        float _887 = _820 + _608;
        float _888 = _824 + _609;
        float _889 = _828 + _610;
        float _899 = fma(_889, cbModelParam._m0[26u].z, fma(_888, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887)) - _854;
        float _900 = fma(_889, cbModelParam._m0[27u].z, fma(_888, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887)) - _858;
        float _901 = fma(_889, cbModelParam._m0[28u].z, fma(_888, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887)) - _862;
        float _905 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
        float _918 = ((_905 * _899) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_854 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_905 * _900) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_858 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_905 * _901) / cbModelParam._m0[34u].z) + ((((((_862 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        float _957 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_923.x + (-0.5));
        float _959 = _957 * (_923.y + (-0.5));
        float _960 = _957 * (_923.z + (-0.5));
        float _967 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_930.x + (-0.5));
        float _969 = _967 * (_930.y + (-0.5));
        float _970 = _967 * (_930.z + (-0.5));
        float _977 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_937.x + (-0.5));
        float _979 = _977 * (_937.y + (-0.5));
        float _980 = _977 * (_937.z + (-0.5));
        float _987 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_944.x + (-0.5));
        float _989 = _987 * (_944.y + (-0.5));
        float _990 = _987 * (_944.z + (-0.5));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = _958 * 0.5;
        float _995 = _968 * 0.5;
        float _996 = _978 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1011 = (dot(vec3(_608, _609, _610), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1021 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3900 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1023 + 1.0))) + _1028) * _991;
        float _1038 = _959 * 0.5;
        float _1039 = _969 * 0.5;
        float _1040 = _979 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_608, _609, _610), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3933 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1065 + 1.0))) + _1070) * _992;
        float _1080 = _960 * 0.5;
        float _1081 = _970 * 0.5;
        float _1082 = _980 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_608, _609, _610), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3966 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1107 + 1.0))) + _1112) * _993;
        _1129 = _960;
        _1131 = _959;
        _1132 = _958;
        _1133 = _970;
        _1134 = _969;
        _1135 = _968;
        _1136 = _980;
        _1137 = _979;
        _1138 = _978;
        _1139 = _993;
        _1140 = _992;
        _1141 = _991;
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
    }
    else
    {
        _1129 = _1130;
        _1131 = _1130;
        _1132 = _1130;
        _1133 = _1130;
        _1134 = _1130;
        _1135 = _1130;
        _1136 = _1130;
        _1137 = _1130;
        _1138 = _1130;
        _1139 = _1130;
        _1140 = _1130;
        _1141 = _1130;
        _1142 = 0.0;
        _1143 = 0.0;
        _1144 = 0.0;
    }
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1169 = fma(_828, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _820));
        float _1173 = fma(_828, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _820));
        float _1177 = fma(_828, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _820));
        float _1200 = _820 + _608;
        float _1201 = _824 + _609;
        float _1202 = _828 + _610;
        float _1212 = fma(_1202, cbModelParam._m0[30u].z, fma(_1201, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1200)) - _1169;
        float _1213 = fma(_1202, cbModelParam._m0[31u].z, fma(_1201, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1200)) - _1173;
        float _1214 = fma(_1202, cbModelParam._m0[32u].z, fma(_1201, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1200)) - _1177;
        float _1218 = inversesqrt(dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214)));
        float _1231 = ((_1218 * _1212) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1169 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1218 * _1213) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1173 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1218 * _1214) / cbModelParam._m0[35u].z) + ((((((_1177 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        float _1268 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1235.x + (-0.5));
        float _1270 = _1268 * (_1235.y + (-0.5));
        float _1271 = _1268 * (_1235.z + (-0.5));
        float _1278 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1242.x + (-0.5));
        float _1280 = _1278 * (_1242.y + (-0.5));
        float _1281 = _1278 * (_1242.z + (-0.5));
        float _1288 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1249.x + (-0.5));
        float _1290 = _1288 * (_1249.y + (-0.5));
        float _1291 = _1288 * (_1249.z + (-0.5));
        float _1298 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1256.x + (-0.5));
        float _1300 = _1298 * (_1256.y + (-0.5));
        float _1301 = _1298 * (_1256.z + (-0.5));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = _1269 * 0.5;
        float _1306 = _1279 * 0.5;
        float _1307 = _1289 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_608, _609, _610), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4029 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1332 + 1.0))) + _1337) * _1302;
        float _1347 = _1270 * 0.5;
        float _1348 = _1280 * 0.5;
        float _1349 = _1290 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_608, _609, _610), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4062 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1374 + 1.0))) + _1379) * _1303;
        float _1389 = _1271 * 0.5;
        float _1390 = _1281 * 0.5;
        float _1391 = _1291 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_608, _609, _610), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4095 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1416 + 1.0))) + _1421) * _1304;
        _1438 = _1271;
        _1439 = _1270;
        _1440 = _1269;
        _1441 = _1281;
        _1442 = _1280;
        _1443 = _1279;
        _1444 = _1291;
        _1445 = _1290;
        _1446 = _1289;
        _1447 = _1304;
        _1448 = _1303;
        _1449 = _1302;
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
    }
    else
    {
        _1438 = _1130;
        _1439 = _1130;
        _1440 = _1130;
        _1441 = _1130;
        _1442 = _1130;
        _1443 = _1130;
        _1444 = _1130;
        _1445 = _1130;
        _1446 = _1130;
        _1447 = _1130;
        _1448 = _1130;
        _1449 = _1130;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1142)) + _1142;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1143)) + _1143;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1144)) + _1144;
    float _1485 = fma(_1464, cbSceneParam._m0[89u].z, fma(_1463, cbSceneParam._m0[89u].y, _1462 * cbSceneParam._m0[89u].x));
    float _1488 = fma(_1464, cbSceneParam._m0[90u].z, fma(_1463, cbSceneParam._m0[90u].y, _1462 * cbSceneParam._m0[90u].x));
    float _1491 = fma(_1464, cbSceneParam._m0[91u].z, fma(_1463, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1462));
    float _1506 = _767 * 0.5;
    float _1507 = _768 * 0.5;
    float _1508 = _769 * 0.5;
    float _1509 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1512 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1515 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1549;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1522 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1129, _1133, _1136, _1139));
        float _1526 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1530 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1537 = dot(vec4(cbModelParam._m0[39u]), vec4(_1506, _1507, _1508, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1560;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1551 = dot(vec4(cbModelParam._m0[40u]), vec4(_1506, _1507, _1508, 1.0));
        _1560 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1551) ? 0.0 : (isnan(0.0) ? _1551 : max(0.0, _1551))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1560 = 1.0;
    }
    float _1564 = (_1560 * cbModelParam._m0[1u].x) + (_1549 * (1.0 - cbModelParam._m0[1u].x));
    float _1574 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _611);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1574 : min(cbModelParam._m0[25u].z, _1574));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1623 = fma(_828, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820)) + cbModelParam._m0[13u].w;
        float _1627 = fma(_828, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820)) + cbModelParam._m0[14u].w;
        float _1631 = fma(_828, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820)) + cbModelParam._m0[15u].w;
        float _1634 = fma(_769, cbModelParam._m0[13u].z, fma(_768, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _767));
        float _1637 = fma(_769, cbModelParam._m0[14u].z, fma(_768, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _767));
        float _1640 = fma(_769, cbModelParam._m0[15u].z, fma(_768, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _767));
        float _1668;
        if (_1634 > 0.0)
        {
            _1668 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1668 = frontier_phi_14_12_ladder;
        }
        float _1838;
        if (_1637 > 0.0)
        {
            _1838 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1838 = frontier_phi_23_19_ladder;
        }
        float _2133;
        if (_1640 > 0.0)
        {
            _2133 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2133 = frontier_phi_35_30_ladder;
        }
        float _2135 = isnan(_1838) ? _1668 : (isnan(_1668) ? _1838 : min(_1668, _1838));
        float _2136 = isnan(_2133) ? _2135 : (isnan(_2135) ? _2133 : min(_2135, _2133));
        float _2140 = (_2136 * _1634) + _1623;
        float _2141 = (_2136 * _1637) + _1627;
        float _2142 = (_2136 * _1640) + _1631;
        float _2143 = _2136 * 9.9999997473787516355514526367188e-05;
        float _2145 = (-1.0) - _2143;
        float _2147 = _2143 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2142 > _2147) || ((_2142 < _2145) || ((_2141 > _2147) || ((_2141 < _2145) || ((_2140 < _2145) || (_2140 > _2147))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2287 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2142, cbModelParam._m0[9u].z, fma(_2141, cbModelParam._m0[9u].y, _2140 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2142, cbModelParam._m0[10u].z, fma(_2141, cbModelParam._m0[10u].y, _2140 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2142, cbModelParam._m0[11u].z, fma(_2141, cbModelParam._m0[11u].y, _2140 * cbModelParam._m0[11u].x))), _1575);
            frontier_phi_13_35_ladder = _2287.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2287.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2287.x * cbModelParam._m0[1u].y;
        }
        _1656 = frontier_phi_13_35_ladder_2;
        _1658 = frontier_phi_13_35_ladder_1;
        _1660 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_767, _768, _769), _1575);
        _1656 = _1644.x * cbModelParam._m0[1u].y;
        _1658 = _1644.y * cbModelParam._m0[1u].y;
        _1660 = _1644.z * cbModelParam._m0[1u].y;
    }
    float _1664 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _611);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1664 : min(cbModelParam._m0[25u].w, _1664));
    float _1755;
    float _1757;
    float _1759;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1719 = fma(_828, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820)) + cbModelParam._m0[21u].w;
        float _1723 = fma(_828, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820)) + cbModelParam._m0[22u].w;
        float _1727 = fma(_828, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820)) + cbModelParam._m0[23u].w;
        float _1730 = fma(_769, cbModelParam._m0[21u].z, fma(_768, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _767));
        float _1733 = fma(_769, cbModelParam._m0[22u].z, fma(_768, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _767));
        float _1736 = fma(_769, cbModelParam._m0[23u].z, fma(_768, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _767));
        float _1843;
        if (_1730 > 0.0)
        {
            _1843 = abs((1.0 - _1719) / _1730);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1719 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1843 = frontier_phi_25_21_ladder;
        }
        float _2160;
        if (_1733 > 0.0)
        {
            _2160 = abs((1.0 - _1723) / _1733);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1723 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2160 = frontier_phi_37_32_ladder;
        }
        float _2487;
        if (_1736 > 0.0)
        {
            _2487 = abs((1.0 - _1727) / _1736);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1727 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2487 = frontier_phi_47_44_ladder;
        }
        float _2489 = isnan(_2160) ? _1843 : (isnan(_1843) ? _2160 : min(_1843, _2160));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1730) + _1719;
        float _2495 = (_2490 * _1733) + _1723;
        float _2496 = (_2490 * _1736) + _1727;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2498 = (-1.0) - _2497;
        float _2500 = _2497 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2496 > _2500) || ((_2496 < _2498) || ((_2495 > _2500) || ((_2495 < _2498) || ((_2494 < _2498) || (_2494 > _2500))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2496, cbModelParam._m0[17u].z, fma(_2495, cbModelParam._m0[17u].y, _2494 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2496, cbModelParam._m0[18u].z, fma(_2495, cbModelParam._m0[18u].y, _2494 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2496, cbModelParam._m0[19u].z, fma(_2495, cbModelParam._m0[19u].y, _2494 * cbModelParam._m0[19u].x))), _1665);
            frontier_phi_22_47_ladder = _2614.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2614.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2614.x * cbModelParam._m0[1u].z;
        }
        _1755 = frontier_phi_22_47_ladder_2;
        _1757 = frontier_phi_22_47_ladder_1;
        _1759 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_767, _768, _769), _1665);
        _1755 = _1739.x * cbModelParam._m0[1u].z;
        _1757 = _1739.y * cbModelParam._m0[1u].z;
        _1759 = _1739.z * cbModelParam._m0[1u].z;
    }
    float _1771 = ((((1.0 - _788) * ((_775 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_788 * _775)) * _759;
    float _1772 = _1771 * ((cbModelParam._m0[1u].w * (_1755 - _1656)) + _1656);
    float _1773 = _1771 * ((cbModelParam._m0[1u].w * (_1757 - _1658)) + _1658);
    float _1774 = _1771 * ((cbModelParam._m0[1u].w * (_1759 - _1660)) + _1660);
    float _1777 = fma(_1774, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1772 * cbSceneParam._m0[89u].x));
    float _1780 = fma(_1774, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1772 * cbSceneParam._m0[90u].x));
    float _1783 = fma(_1774, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, _1772 * cbSceneParam._m0[91u].x));
    float _1817 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1821 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1825 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1829 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1830 = _1817 / _1829;
    float _1831 = _1821 / _1829;
    float _1832 = _1825 / _1829;
    float _1979;
    float _1980;
    float _1981;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1859 = ((uint(_1832 > cbSceneParam._m0[59u].y) + uint(_1832 > cbSceneParam._m0[59u].x)) + uint(_1832 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1860 = _1859 + 43u;
        uint _1868 = _1859 + 44u;
        uint _1876 = _1859 + 45u;
        uint _1884 = _1859 + 46u;
        float _1895 = fma(_1829, cbSceneParam._m0[_1860].w, fma(_1825, cbSceneParam._m0[_1860].z, fma(_1821, cbSceneParam._m0[_1860].y, _1817 * cbSceneParam._m0[_1860].x)));
        float _1899 = fma(_1829, cbSceneParam._m0[_1868].w, fma(_1825, cbSceneParam._m0[_1868].z, fma(_1821, cbSceneParam._m0[_1868].y, _1817 * cbSceneParam._m0[_1868].x)));
        float _1907 = fma(_1829, cbSceneParam._m0[_1884].w, fma(_1825, cbSceneParam._m0[_1884].z, fma(_1821, cbSceneParam._m0[_1884].y, _1817 * cbSceneParam._m0[_1884].x)));
        float _1912 = cbSceneParam._m0[33u].z * _1907;
        float _1914 = cbSceneParam._m0[33u].w * _1907;
        float _1917 = fma(_1829, cbSceneParam._m0[_1876].w, fma(_1825, cbSceneParam._m0[_1876].z, fma(_1821, cbSceneParam._m0[_1876].y, _1817 * cbSceneParam._m0[_1876].x))) / _1907;
        float _1965 = (cbSceneParam._m0[33u].x - sqrt(((_1831 * _1831) + (_1830 * _1830)) + (_1832 * _1832))) * cbSceneParam._m0[33u].y;
        float _4221 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1972 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1912 + _1895) / _1907, (_1914 + _1899) / _1907), _1917), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1914 + _1895) / _1907, (_1899 - _1912) / _1907), _1917), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1895 - _1912) / _1907, (_1899 - _1914) / _1907), _1917), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1895 - _1914) / _1907, (_1912 + _1899) / _1907), _1917), 0.0)).x), vec4(0.25)));
        _1979 = 1.0 - (_1972 * cbSceneParam._m0[34u].x);
        _1980 = 1.0 - (_1972 * cbSceneParam._m0[34u].y);
        _1981 = 1.0 - (_1972 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1979 = 1.0;
        _1980 = 1.0;
        _1981 = 1.0;
    }
    float _2045;
    float _2047;
    float _2049;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2033 = fma(_1829, cbSceneParam._m0[63u].w, fma(_1825, cbSceneParam._m0[63u].z, fma(_1821, cbSceneParam._m0[63u].y, _1817 * cbSceneParam._m0[63u].x)));
        float _2034 = fma(_1829, cbSceneParam._m0[60u].w, fma(_1825, cbSceneParam._m0[60u].z, fma(_1821, cbSceneParam._m0[60u].y, _1817 * cbSceneParam._m0[60u].x))) / _2033;
        float _2035 = fma(_1829, cbSceneParam._m0[61u].w, fma(_1825, cbSceneParam._m0[61u].z, fma(_1821, cbSceneParam._m0[61u].y, _1817 * cbSceneParam._m0[61u].x))) / _2033;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2034 >= cbSceneParam._m0[64u].x) && (_2035 >= cbSceneParam._m0[64u].y)) && (_2034 <= cbSceneParam._m0[64u].z)) && (_2035 <= cbSceneParam._m0[64u].w))
        {
            float _2173 = fma(_1829, cbSceneParam._m0[62u].w, fma(_1825, cbSceneParam._m0[62u].z, fma(_1821, cbSceneParam._m0[62u].y, _1817 * cbSceneParam._m0[62u].x))) / _2033;
            float _2177 = isnan(cbSceneParam._m0[41u].w) ? _2173 : (isnan(_2173) ? cbSceneParam._m0[41u].w : max(_2173, cbSceneParam._m0[41u].w));
            float _2220 = (cbSceneParam._m0[33u].x - sqrt(((_1831 * _1831) + (_1830 * _1830)) + (_1832 * _1832))) * cbSceneParam._m0[33u].y;
            float _4237 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
            float _2227 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2034, cbSceneParam._m0[33u].w + _2035), _2177), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2034, _2035 - cbSceneParam._m0[33u].z), _2177), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2034 - cbSceneParam._m0[33u].z, _2035 - cbSceneParam._m0[33u].w), _2177), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2034 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2035), _2177), 0.0)).x), vec4(0.25)));
            float _2231 = 1.0 - (_2227 * cbSceneParam._m0[34u].x);
            float _2232 = 1.0 - (_2227 * cbSceneParam._m0[34u].y);
            float _2233 = 1.0 - (_2227 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2233) ? _1981 : (isnan(_1981) ? _2233 : min(_1981, _2233));
            frontier_phi_34_33_ladder_1 = isnan(_2232) ? _1980 : (isnan(_1980) ? _2232 : min(_1980, _2232));
            frontier_phi_34_33_ladder_2 = isnan(_2231) ? _1979 : (isnan(_1979) ? _2231 : min(_1979, _2231));
        }
        else
        {
            frontier_phi_34_33_ladder = _1981;
            frontier_phi_34_33_ladder_1 = _1980;
            frontier_phi_34_33_ladder_2 = _1979;
        }
        _2045 = frontier_phi_34_33_ladder_2;
        _2047 = frontier_phi_34_33_ladder_1;
        _2049 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2045 = _1979;
        _2047 = _1980;
        _2049 = _1981;
    }
    uvec4 _2054 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _2056 = _2054.x * 14u;
    uint _2057 = _2056 + 13u;
    float _2064 = _759 + (-1.0);
    float _2069 = (cbLight._m0[_2057].x * _2064) + 1.0;
    float _2070 = (cbLight._m0[_2057].y * _2064) + 1.0;
    float _2071 = (cbLight._m0[_2057].z * _2064) + 1.0;
    float _2072 = (cbLight._m0[_2057].w * _2064) + 1.0;
    uint _2073 = _2056 + 5u;
    float _2079 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2083 = _2056 + 4u;
    float _2092 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
    uint _2096 = _2056 | 1u;
    float _2107 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_608, _609, _610));
    float _2110 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_608, _609, _610));
    float _4273 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _4284 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2115 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 0.3183098733425140380859375;
    float _2117 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * 0.3183098733425140380859375;
    float _2124 = ((cbLight._m0[_2073].x * _2079) * _2117) + (((cbLight._m0[_2083].x * _2045) * _2092) * _2115);
    float _2125 = ((_2079 * cbLight._m0[_2073].y) * _2117) + (((cbLight._m0[_2083].y * _2047) * _2092) * _2115);
    float _2126 = ((_2079 * cbLight._m0[_2073].z) * _2117) + (((cbLight._m0[_2083].z * _2049) * _2092) * _2115);
    uvec4 _2130 = floatBitsToUint(cbLight._m0[_2056 + 12u]);
    bool _2132 = _2130.x == 0u;
    float _2234;
    float _2236;
    float _2238;
    if (_2132)
    {
        _2234 = _2124;
        _2236 = _2125;
        _2238 = _2126;
    }
    else
    {
        uint _2242 = _2056 + 6u;
        float _2258 = (dot(vec3(cbLight._m0[_2056 + 2u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _2259 = _2258 * _2258;
        float _4295 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2260 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2261 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2234 = (((cbLight._m0[_2242].x * 0.3183098733425140380859375) * _2260) * _2261) + _2124;
        _2236 = (((cbLight._m0[_2242].y * 0.3183098733425140380859375) * _2260) * _2261) + _2125;
        _2238 = (((cbLight._m0[_2242].z * 0.3183098733425140380859375) * _2260) * _2261) + _2126;
    }
    bool _2241 = _2130.y == 0u;
    float _2296;
    float _2298;
    float _2300;
    if (_2241)
    {
        _2296 = _2234;
        _2298 = _2236;
        _2300 = _2238;
    }
    else
    {
        uint _2458 = _2056 + 7u;
        float _2474 = (dot(vec3(cbLight._m0[_2056 + 3u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4311 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2477 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2296 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2234;
        _2298 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2236;
        _2300 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2238;
    }
    uint _2303 = _2056 + 8u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _611) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2056].x + _688;
    float _2319 = cbLight._m0[_2056].y + _689;
    float _2320 = cbLight._m0[_2056].z + _690;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2056].xyz));
    float _4327 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _4338 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _2332 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2333 = dot(vec3(_608, _609, _610), vec3(_2325, _2326, _2327));
    float _4349 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2325, _2326, _2327));
    float _4360 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2317 * _2317;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2356 = (exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2357 = 1.0 - _2317;
    float _2368 = (0.5 / (((_2332 * ((_2331 * _2357) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2357) + _2317) * _2331))) * _2331;
    float _4371 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    uint _2384 = _2056 + 9u;
    float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _611) * 0.949999988079071044921875);
    float _2396 = _2395 * _2395;
    float _2397 = cbLight._m0[_2096].x + _688;
    float _2398 = cbLight._m0[_2096].y + _689;
    float _2399 = cbLight._m0[_2096].z + _690;
    float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
    float _2404 = _2403 * _2397;
    float _2405 = _2403 * _2398;
    float _2406 = _2403 * _2399;
    float _2407 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2096].xyz));
    float _4382 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2411 = dot(vec3(_608, _609, _610), vec3(_2404, _2405, _2406));
    float _4393 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2404, _2405, _2406));
    float _4404 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2396 * _2396;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2432 = (exp2(log2(1.0 - (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2433 = 1.0 - _2396;
    float _2443 = (0.5 / (((_2332 * ((_2410 * _2433) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2433) + _2396) * _2410))) * _2410;
    float _4415 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2445 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    float _2455 = (((_2432 * cbLight._m0[_2384].x) * _2445) * _2079) + ((((cbLight._m0[_2303].x * _2045) * _2356) * _2370) * _2092);
    float _2456 = (((_2432 * cbLight._m0[_2384].y) * _2445) * _2079) + ((((cbLight._m0[_2303].y * _2047) * _2356) * _2370) * _2092);
    float _2457 = (((_2432 * cbLight._m0[_2384].z) * _2445) * _2079) + ((((cbLight._m0[_2303].z * _2049) * _2356) * _2370) * _2092);
    float _2513;
    float _2515;
    float _2517;
    if (_2132)
    {
        _2513 = _2455;
        _2515 = _2456;
        _2517 = _2457;
    }
    else
    {
        uint _2519 = _2056 + 2u;
        uint _2523 = _2056 + 10u;
        float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2519].w)) * _611) * 0.949999988079071044921875);
        float _2538 = _2537 * _2537;
        float _2539 = cbLight._m0[_2519].x + _688;
        float _2540 = cbLight._m0[_2519].y + _689;
        float _2541 = cbLight._m0[_2519].z + _690;
        float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
        float _2546 = _2545 * _2539;
        float _2547 = _2545 * _2540;
        float _2548 = _2545 * _2541;
        float _2549 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2519].xyz));
        float _4426 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2553 = dot(vec3(_608, _609, _610), vec3(_2546, _2547, _2548));
        float _4437 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2557 = dot(vec3(cbLight._m0[_2519].xyz), vec3(_2546, _2547, _2548));
        float _4448 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2561 = _2538 * _2538;
        float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
        float _2574 = (exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2575 = 1.0 - _2538;
        float _2585 = (0.5 / (((_2332 * ((_2552 * _2575) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2575) + _2538) * _2552))) * _2552;
        float _4459 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2587 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
        float _2588 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2513 = (((_2574 * cbLight._m0[_2523].x) * _2587) * _2588) + _2455;
        _2515 = (((_2574 * cbLight._m0[_2523].y) * _2587) * _2588) + _2456;
        _2517 = (((_2574 * cbLight._m0[_2523].z) * _2587) * _2588) + _2457;
    }
    float _2619;
    float _2621;
    float _2623;
    if (_2241)
    {
        _2619 = _2513;
        _2621 = _2515;
        _2623 = _2517;
    }
    else
    {
        uint _2630 = _2056 + 3u;
        uint _2634 = _2056 + 11u;
        float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2630].w)) * _611) * 0.949999988079071044921875);
        float _2649 = _2648 * _2648;
        float _2650 = cbLight._m0[_2630].x + _688;
        float _2651 = cbLight._m0[_2630].y + _689;
        float _2652 = cbLight._m0[_2630].z + _690;
        float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
        float _2657 = _2656 * _2650;
        float _2658 = _2656 * _2651;
        float _2659 = _2656 * _2652;
        float _2660 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2630].xyz));
        float _4475 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2664 = dot(vec3(_608, _609, _610), vec3(_2657, _2658, _2659));
        float _4486 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2668 = dot(vec3(cbLight._m0[_2630].xyz), vec3(_2657, _2658, _2659));
        float _4497 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2672 = _2649 * _2649;
        float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
        float _2685 = (exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2686 = 1.0 - _2649;
        float _2696 = (0.5 / (((_2332 * ((_2663 * _2686) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2686) + _2649) * _2663))) * _2663;
        float _4508 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2619 = (((_2685 * cbLight._m0[_2634].x) * _2698) * _2699) + _2513;
        _2621 = (((_2685 * cbLight._m0[_2634].y) * _2698) * _2699) + _2515;
        _2623 = (((_2685 * cbLight._m0[_2634].z) * _2698) * _2699) + _2517;
    }
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_2054.y == 0u)
    {
        uvec4 _2720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2721 = _2720.x;
        uint _2732 = uint((float(_2720.y) * floor(float(uint(cbSceneParam._m0[85u].y * _697) / _2721))) + floor(float(uint(cbSceneParam._m0[85u].x * _696) / _2721)));
        float _2742 = (log2(_1832 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2743 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        uint _2746 = uint(isnan(14.0) ? _2743 : (isnan(_2743) ? 14.0 : min(_2743, 14.0)));
        uvec4 _2751 = texelFetch(g_lightClusterGridBuffer, int(((_2746 << 2u) + (_2732 << 6u)) >> 2u));
        uint _2752 = _2751.x;
        uint _2753 = _2720.z;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((((1u << ((_2753 >> 4u) & 15u)) + 4294967295u) & _2752) == 0u) || ((_2753 & 240u) == 0u))
        {
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
        }
        else
        {
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            uint _2983 = 0u;
            uint _2992;
            bool _2993;
            for (;;)
            {
                _2992 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_2983 << 2u)) >> 2u)).x;
                _2993 = _2992 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2993)
                {
                    frontier_phi_66_pred = _2982;
                    frontier_phi_66_pred_1 = _2981;
                    frontier_phi_66_pred_2 = _2980;
                    frontier_phi_66_pred_3 = _2979;
                    frontier_phi_66_pred_4 = _2978;
                    frontier_phi_66_pred_5 = _2977;
                }
                else
                {
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    uint _3107;
                    _3101 = _2977;
                    _3102 = _2978;
                    _3103 = _2979;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2992;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    for (;;)
                    {
                        uint _3111 = uint(findLSB(_3107)) + (_2983 << 5u);
                        uint _3108 = (_3107 + 4294967295u) & _3107;
                        uint _3113 = _3111 * 48u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        uint _3133 = (_3111 * 48u) + 4u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 3u)).x));
                        uint _3152 = (_3111 * 48u) + 8u;
                        vec3 _3163 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x));
                        float _3167 = _3127.x - _1830;
                        float _3168 = _3127.y - _1831;
                        float _3169 = _3127.z - _1832;
                        float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                        float _3173 = inversesqrt(_3170);
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3177 = dot(vec3(_715, _718, _721), vec3(_3174, _3175, _3176));
                        float _3182 = 1.0 - (_3170 * _3127.w);
                        float _4534 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3184 = sqrt(_3170) * _3146.w;
                        float _3187 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3177) + _3188;
                        float _3194 = _3184 * _3184;
                        float _3198 = ((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3183) / ((_3194 * 0.699999988079071044921875) + 1.0);
                        float _3202 = (-0.0) - _1830;
                        float _3203 = (-0.0) - _1831;
                        float _3204 = (-0.0) - _1832;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3218 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                        float _3219 = 1.0 - _775;
                        float _3226 = sqrt(1.0 - ((1.0 - (_3219 * _3219)) * (1.0 - (_3218 * _3218))));
                        float _3227 = _3226 * _3226;
                        float _3228 = _3227 * _3227;
                        float _3229 = _3209 + _3174;
                        float _3230 = _3210 + _3175;
                        float _3231 = _3211 + _3176;
                        float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                        float _3239 = dot(vec3(_715, _718, _721), vec3(_3209, _3210, _3211));
                        float _4550 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3242 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3243 = dot(vec3(_715, _718, _721), vec3(_3235 * _3229, _3235 * _3230, _3235 * _3231));
                        float _4561 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3246 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3250 = ((_3246 * _3246) * (_3228 + (-1.0))) + 1.0;
                        float _3251 = _3187 * _3227;
                        float _3252 = _3251 * _3251;
                        float _3255 = ((1.0 - _3252) * _3177) + _3252;
                        float _4572 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3256 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                        float _3257 = 1.0 - _3227;
                        float _3267 = (0.5 / (((_3256 * ((_3242 * _3257) + _3227)) + 9.9999999392252902907785028219223e-09) + (((_3256 * _3257) + _3227) * _3242))) * _3256;
                        float _4583 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3278 = (((_3228 * 3.1415927410125732421875) * (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) / ((_3250 * _3250) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125))) * _3183;
                        _3036 = (_3198 * _3146.x) + _3104;
                        _3037 = (_3198 * _3146.y) + _3105;
                        _3038 = (_3198 * _3146.z) + _3106;
                        _3033 = (_3278 * _3163.x) + _3101;
                        _3034 = (_3278 * _3163.y) + _3102;
                        _3035 = (_3278 * _3163.z) + _3103;
                        if (_3108 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3101 = _3033;
                            _3102 = _3034;
                            _3103 = _3035;
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3108;
                        }
                    }
                    frontier_phi_66_pred = _3038;
                    frontier_phi_66_pred_1 = _3037;
                    frontier_phi_66_pred_2 = _3036;
                    frontier_phi_66_pred_3 = _3035;
                    frontier_phi_66_pred_4 = _3034;
                    frontier_phi_66_pred_5 = _3033;
                }
                _2843 = frontier_phi_66_pred;
                _2841 = frontier_phi_66_pred_1;
                _2839 = frontier_phi_66_pred_2;
                _2837 = frontier_phi_66_pred_3;
                _2835 = frontier_phi_66_pred_4;
                _2833 = frontier_phi_66_pred_5;
                uint _2984 = _2983 + 1u;
                if (_2984 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2977 = _2833;
                    _2978 = _2835;
                    _2979 = _2837;
                    _2980 = _2839;
                    _2981 = _2841;
                    _2982 = _2843;
                    _2983 = _2984;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
        }
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.z;
        uint _2849 = (_2847 >> 8u) & 15u;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        if (((4294967295u << _2849) & _2752) == 0u)
        {
            _2945 = _2832;
            _2947 = _2834;
            _2949 = _2836;
            _2951 = _2838;
            _2953 = _2840;
            _2955 = _2842;
        }
        else
        {
            float _2970 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
            float _2971 = _2970 * _1830;
            float _2972 = _2970 * _1831;
            float _2973 = _2970 * _1832;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2849 < ((_2847 >> 12u) & 15u))
            {
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _3084 = _2832;
                float _3085 = _2834;
                float _3086 = _2836;
                float _3087 = _2838;
                float _3088 = _2840;
                float _3089 = _2842;
                uint _3090 = _2849;
                uint _3099;
                bool _3100;
                for (;;)
                {
                    _3099 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                    _3100 = _3099 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3100)
                    {
                        frontier_phi_72_pred = _3089;
                        frontier_phi_72_pred_1 = _3088;
                        frontier_phi_72_pred_2 = _3087;
                        frontier_phi_72_pred_3 = _3086;
                        frontier_phi_72_pred_4 = _3085;
                        frontier_phi_72_pred_5 = _3084;
                    }
                    else
                    {
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3296 = _3084;
                        float _3297 = _3085;
                        float _3298 = _3086;
                        float _3299 = _3087;
                        float _3300 = _3088;
                        float _3301 = _3089;
                        uint _3302 = _3099;
                        uint _3303;
                        vec4 _3328;
                        float _3329;
                        vec4 _3344;
                        vec3 _3356;
                        vec4 _3371;
                        vec4 _3387;
                        float _3433;
                        bool _3434;
                        for (;;)
                        {
                            uint _3313 = ((_3090 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3302));
                            _3303 = (_3302 + 4294967295u) & _3302;
                            uint _3315 = _3313 * 40u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            _3329 = _3328.w;
                            uint _3331 = (_3313 * 40u) + 4u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3313 * 40u) + 8u;
                            _3356 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x));
                            uint _3358 = (_3313 * 40u) + 16u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3374 = (_3313 * 40u) + 20u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3313 * 40u) + 24u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3408 = (_3313 * 40u) + 28u;
                            vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            _3433 = fma(_1832, _3421.z, fma(_1831, _3421.y, _3421.x * _1830)) + _3421.w;
                            _3434 = !((fma(_1832, _3402.z, fma(_1831, _3402.y, _3402.x * _1830)) + _3402.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3434)
                            {
                                float _3461 = _3328.x - _1830;
                                float _3462 = _3328.y - _1831;
                                float _3463 = _3328.z - _1832;
                                float _3464 = dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463));
                                float _3467 = inversesqrt(_3464);
                                float _3468 = _3467 * _3461;
                                float _3469 = _3467 * _3462;
                                float _3470 = _3467 * _3463;
                                float _3474 = 1.0 - (_3464 / (_3329 * _3329));
                                float _4594 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3479 = sqrt(_3464) * _3344.w;
                                float _3481 = 1.39999997615814208984375 / (_3479 + 1.39999997615814208984375);
                                float _3482 = _3481 * _3481;
                                float _3485 = ((1.0 - _3482) * dot(vec3(_3468, _3469, _3470), vec3(_715, _718, _721))) + _3482;
                                float _3488 = _3479 * _3479;
                                float _3492 = (fma(_1832, _3371.z, fma(_1831, _3371.y, _3371.x * _1830)) + _3371.w) / _3433;
                                float _3493 = (fma(_1832, _3387.z, fma(_1831, _3387.y, _3387.x * _1830)) + _3387.w) / _3433;
                                float _3497 = 1.0 - dot(vec2(_3492, _3493), vec2(_3492, _3493));
                                float _4610 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3499 = _3498 * (((isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0))) * _3475) / ((_3488 * 0.699999988079071044921875) + 1.0));
                                float _3511 = exp2(log2(1.0 / ((_3488 * 3.5) + 5.0)) * 0.25);
                                float _3512 = 1.0 - _775;
                                float _3519 = sqrt(1.0 - ((1.0 - (_3512 * _3512)) * (1.0 - (_3511 * _3511))));
                                float _3520 = _3519 * _3519;
                                float _3521 = _3520 * _3520;
                                float _3522 = _3468 - _2971;
                                float _3523 = _3469 - _2972;
                                float _3524 = _3470 - _2973;
                                float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                                float _3532 = dot(vec3(_715, _718, _721), vec3((-0.0) - _2971, (-0.0) - _2972, (-0.0) - _2973));
                                float _4621 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3535 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3536 = dot(vec3(_715, _718, _721), vec3(_3528 * _3522, _3528 * _3523, _3528 * _3524));
                                float _4632 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3543 = ((_3539 * _3539) * (_3521 + (-1.0))) + 1.0;
                                float _3544 = _3481 * _3520;
                                float _3545 = _3544 * _3544;
                                float _3551 = ((1.0 - _3545) * dot(vec3(_715, _718, _721), vec3(_3468, _3469, _3470))) + _3545;
                                float _4643 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3553 = 1.0 - _3520;
                                float _3563 = (0.5 / (((_3552 * ((_3535 * _3553) + _3520)) + 9.9999999392252902907785028219223e-09) + (((_3552 * _3553) + _3520) * _3535))) * _3552;
                                float _4654 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3573 = (_3498 * _3475) * (((_3521 * 3.1415927410125732421875) * (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) / ((_3543 * _3543) * ((_3488 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3499 * _3344.y;
                                frontier_phi_78_pred_1 = _3499 * _3344.x;
                                frontier_phi_78_pred_2 = _3573 * _3356.z;
                                frontier_phi_78_pred_3 = _3573 * _3356.y;
                                frontier_phi_78_pred_4 = _3573 * _3356.x;
                                frontier_phi_78_pred_5 = _3499 * _3344.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3581 = frontier_phi_78_pred;
                            _3580 = frontier_phi_78_pred_1;
                            _3579 = frontier_phi_78_pred_2;
                            _3578 = frontier_phi_78_pred_3;
                            _3577 = frontier_phi_78_pred_4;
                            _3582 = frontier_phi_78_pred_5;
                            _3286 = _3580 + _3299;
                            _3287 = _3581 + _3300;
                            _3288 = _3582 + _3301;
                            _3283 = _3577 + _3296;
                            _3284 = _3578 + _3297;
                            _3285 = _3579 + _3298;
                            if (_3303 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3303;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3288;
                        frontier_phi_72_pred_1 = _3287;
                        frontier_phi_72_pred_2 = _3286;
                        frontier_phi_72_pred_3 = _3285;
                        frontier_phi_72_pred_4 = _3284;
                        frontier_phi_72_pred_5 = _3283;
                    }
                    _2956 = frontier_phi_72_pred;
                    _2954 = frontier_phi_72_pred_1;
                    _2952 = frontier_phi_72_pred_2;
                    _2950 = frontier_phi_72_pred_3;
                    _2948 = frontier_phi_72_pred_4;
                    _2946 = frontier_phi_72_pred_5;
                    uint _3091 = _3090 + 1u;
                    if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3084 = _2946;
                        _3085 = _2948;
                        _3086 = _2950;
                        _3087 = _2952;
                        _3088 = _2954;
                        _3089 = _2956;
                        _3090 = _3091;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2956;
                frontier_phi_60_61_ladder_1 = _2954;
                frontier_phi_60_61_ladder_2 = _2950;
                frontier_phi_60_61_ladder_3 = _2948;
                frontier_phi_60_61_ladder_4 = _2946;
                frontier_phi_60_61_ladder_5 = _2952;
            }
            else
            {
                frontier_phi_60_61_ladder = _2842;
                frontier_phi_60_61_ladder_1 = _2840;
                frontier_phi_60_61_ladder_2 = _2836;
                frontier_phi_60_61_ladder_3 = _2834;
                frontier_phi_60_61_ladder_4 = _2832;
                frontier_phi_60_61_ladder_5 = _2838;
            }
            _2945 = frontier_phi_60_61_ladder_4;
            _2947 = frontier_phi_60_61_ladder_3;
            _2949 = frontier_phi_60_61_ladder_2;
            _2951 = frontier_phi_60_61_ladder_5;
            _2953 = frontier_phi_60_61_ladder_1;
            _2955 = frontier_phi_60_61_ladder;
        }
        float _2960 = isnan(1.0) ? _759 : (isnan(_759) ? 1.0 : min(_759, 1.0));
        _2765 = (_2960 * _2951) + _2296;
        _2767 = (_2960 * _2953) + _2298;
        _2769 = (_2960 * _2955) + _2300;
        _2771 = ((_2945 * 0.039999999105930328369140625) * _2960) + _2619;
        _2773 = ((_2947 * 0.039999999105930328369140625) * _2960) + _2621;
        _2775 = ((_2949 * 0.039999999105930328369140625) * _2960) + _2623;
    }
    else
    {
        _2765 = _2296;
        _2767 = _2298;
        _2769 = _2300;
        _2771 = _2619;
        _2773 = _2621;
        _2775 = _2623;
    }
    float _4670 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4681 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4692 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    uint _2795 = _232 + 6u;
    float _2803 = _696 / cbSceneParam._m0[86u].x;
    float _2804 = _697 / cbSceneParam._m0[86u].y;
    vec4 _2818 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, (log2((isnan(cbSceneParam._m0[77u].w) ? _629 : (isnan(_629) ? cbSceneParam._m0[77u].w : min(_629, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2820 = _2818.x;
    float _2821 = _2818.y;
    float _2822 = _2818.z;
    float _2823 = _2818.w;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_629 > cbSceneParam._m0[78u].w)
    {
        float _2857 = isnan(_629) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _629 : min(cbSceneParam._m0[80u].w, _629));
        float _2858 = _2857 / _629;
        float _2869 = _2858 * _681;
        float _2870 = _682 * _2858;
        float _2871 = (-0.0) - _2870;
        float _2873 = _2858 * _683;
        float _2875 = (cbSceneParam._m0[77u].w * _2871) / _2857;
        float _2876 = _2875 + cbSceneParam._m0[79u].w;
        float _2877 = cbSceneParam._m0[79u].w - _2870;
        float _2883 = sqrt(((_2869 * _2869) + (_2870 * _2870)) + (_2873 * _2873));
        float _2886 = (1.0 - (cbSceneParam._m0[77u].w / _2857)) * _2883;
        float _2891 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2893 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3046;
        if (abs((_2871 - _2875) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3046 = ((((_2876 > 0.0) ? exp2(_2891 * _2876) : (2.0 - exp2(_2893 * _2876))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2886;
        }
        else
        {
            float _3006 = 1.0 / cbSceneParam._m0[80u].x;
            float _3007 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : max(_2876, _2877));
            float _3008 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : min(_2876, _2877));
            float _3017 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : min(_3007, 0.0));
            float _3018 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : min(_3008, 0.0));
            _3046 = ((abs(_2883 / _2871) * cbSceneParam._m0[80u].y) * ((((_3017 - _3018) * 2.0) - ((exp2(_2891 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0)))) - exp2(_2891 * (isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))))) * _3006)) - ((exp2(_2893 * _3017) - exp2(_2893 * _3018)) * _3006))) + (_2886 * cbSceneParam._m0[80u].z);
        }
        vec4 _3048 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, 1.0), 0.0);
        float _3057 = exp2((_3046 * (-1.44269502162933349609375)) * (1.0 - _3048.w));
        float _3058 = log2(_3057);
        float _3074 = log2(_2823);
        _2895 = (exp2(_3074 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].x)) * _3048.x) / cbSceneParam._m0[78u].x)) + _2820;
        _2897 = (exp2(_3074 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].y)) * _3048.y) / cbSceneParam._m0[78u].y)) + _2821;
        _2899 = (exp2(_3074 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].z)) * _3048.z) / cbSceneParam._m0[78u].z)) + _2822;
        _2901 = _3057 * _2823;
    }
    else
    {
        _2895 = _2820;
        _2897 = _2821;
        _2899 = _2822;
        _2901 = _2823;
    }
    float _2913 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2914 = _2913 == 3.0;
    float _2915 = log2(_2901);
    float _2922 = exp2(_2915 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2765 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _759))) + ((_2771 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1564)) * cbPerFrame._m0[3u].x));
    float _2923 = exp2(_2915 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2767 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _759))) + ((_2773 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1564)) * cbPerFrame._m0[3u].x));
    float _2924 = exp2(_2915 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2769 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _759))) + ((_2775 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1564)) * cbPerFrame._m0[3u].x));
    float _2933 = (_2913 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2933 * (_2914 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2895)));
    SV_Target.y = _2933 * (_2914 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2897)));
    SV_Target.z = _2933 * (_2914 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2899)));
    SV_Target.w = cbInstanceData._m0[_2795].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2795].w;
}


