#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1497;
float _3855;
float _3856;
float _3857;
float _3858;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3867 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3878 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3889 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _385.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[24u].z) + _434) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3900 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _459 = (_452 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _460 = (_452 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _461 = (_452 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _385.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[24u].z) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3911 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    float _538 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _532;
    float _541 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _533;
    float _544 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _534;
    float _551 = ((_532 - _538) * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) + _538;
    float _552 = ((_533 - _541) * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) + _541;
    float _553 = ((_534 - _544) * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) + _544;
    vec4 _570 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _614 = _612.x;
    float _615 = _612.y;
    float _616 = _612.z;
    float _623 = ((_595.x - _614) * _452) + _614;
    float _624 = ((_595.y - _615) * _452) + _615;
    float _625 = ((_595.z - _616) * _452) + _616;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _650 = ((_637.z - _625) * _525) + _625;
    float _653 = ((((_637.x - _623) * _525) + _623) * 2.0) + (-1.0);
    float _654 = ((((_637.y - _624) * _525) + _624) * 2.0) + (-1.0);
    float _655 = dot(vec2(_653, _654), vec2(_653, _654));
    float _3922 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _660 = sqrt(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _690 = (_653 + ((((_570.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_678.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _691 = (_654 + ((((_570.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_678.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _694 = fma(_660, _252, fma(_691, _259, _690 * _245));
    float _697 = fma(_660, _253, fma(_691, _260, _690 * _246));
    float _700 = fma(_660, _254, fma(_691, _261, _690 * _247));
    float _704 = inversesqrt(dot(vec3(_694, _697, _700), vec3(_694, _697, _700)));
    vec4 _731 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _733 = _731.x;
    float _734 = 1.0 - _733;
    float _740 = (cbMtdParam._m0[19u].x + dot(vec4(_704 * _694, _704 * _697, _704 * _700, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_733 - _734) * cbMtdParam._m0[24u].w) + _734) * cbMtdParam._m0[21u].z);
    float _3933 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _741 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _743 = (-0.0) - cbMtdParam._m0[24u].x;
    float _745 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _745 : (isnan(_745) ? 1.0 : min(_745, 1.0));
    float _753 = _741 - ((_741 * TEXCOORD_8.x) * _746);
    float _754 = _741 - ((_741 * TEXCOORD_8.y) * _746);
    float _755 = _741 - ((_741 * TEXCOORD_8.z) * _746);
    float _762 = (_753 * (cbMtdParam._m0[17u].x - _551)) + _551;
    float _763 = (_754 * (cbMtdParam._m0[17u].y - _552)) + _552;
    float _764 = (_755 * (cbMtdParam._m0[17u].z - _553)) + _553;
    vec4 _776 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _778 = _776.x;
    float _779 = 1.0 - _778;
    float _805 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_778 - _779) * cbMtdParam._m0[24u].y) + _779) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3954 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _806 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _814 = ((((cbMtdParam._m0[10u].x - _762) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _806) + _762;
    float _815 = ((((cbMtdParam._m0[10u].y - _763) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _806) + _763;
    float _816 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _764)) * _806) + _764;
    float _821 = (((_570.z - _650) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _650;
    float _825 = ((_678.z - _821) * cbMtdParam._m0[19u].w) + _821;
    vec4 _839 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _846 = (_839.x * 2.0) + (-1.0);
    float _847 = (_839.y * 2.0) + (-1.0);
    float _848 = dot(vec2(_846, _847), vec2(_846, _847));
    float _3965 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _856 = ((_839.z - _825) * _753) + _825;
    float _859 = ((cbMtdParam._m0[23u].y - _856) * _806) + _856;
    vec4 _880 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _886 = (_880.x * 2.0) + (-1.0);
    float _887 = (_880.y * 2.0) + (-1.0);
    float _888 = dot(vec2(_886, _887), vec2(_886, _887));
    float _3976 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _903 = ((sqrt(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) - _660) * _755) + _660;
    float _906 = (((_846 - _690) * _753) + _690) + (cbMtdParam._m0[21u].x * _690);
    float _907 = (((_847 - _691) * _754) + _691) + (cbMtdParam._m0[21u].x * _691);
    float _918 = (((_886 - _906) + (_906 * cbMtdParam._m0[22u].z)) * _806) + _906;
    float _919 = (((_887 - _907) + (_907 * cbMtdParam._m0[22u].z)) * _806) + _907;
    float _920 = (_806 * (sqrt(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) - _903)) + _903;
    float _922 = cbMtdParam._m0[22u].x + _678.w;
    float _925 = fma(_920, _252, fma(_919, _259, _918 * _245));
    float _928 = fma(_920, _253, fma(_919, _260, _918 * _246));
    float _931 = fma(_920, _254, fma(_919, _261, _918 * _247));
    float _935 = inversesqrt(dot(vec3(_925, _928, _931), vec3(_925, _928, _931)));
    float _936 = _935 * _925;
    float _937 = _935 * _928;
    float _938 = _935 * _931;
    float _3987 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _939 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _4009 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4020 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4031 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _957 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1008 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _998);
    float _1009 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _998);
    float _1010 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _998);
    float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
    float _1015 = _1008 * _1014;
    float _1016 = _1009 * _1014;
    float _1017 = _1010 * _1014;
    vec4 _1022 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1024 = _1022.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1178 = sqrt(((_1008 * _1008) + (_1009 * _1009)) + (_1010 * _1010));
        float _1184 = (cbMatDynParam._m0[5u].x * _1178) + cbMatDynParam._m0[5u].y;
        float _4042 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1189 = (cbMatDynParam._m0[5u].z * _1178) + cbMatDynParam._m0[5u].w;
        float _4053 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) - _1185)) + _1185) < ((_1024 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1035 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1036 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1054 = fma(_938, cbSceneParam._m0[5u].z, fma(_937, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _936));
    float _1057 = fma(_938, cbSceneParam._m0[6u].z, fma(_937, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _936));
    float _1060 = fma(_938, cbSceneParam._m0[7u].z, fma(_937, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _936));
    uint _1073 = _283 + 9u;
    uint _1074 = _1073 + uint(cbMatDynParam._m0[0u].w);
    float _1080 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * cbInstanceData._m0[_1074].x;
    float _1081 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * cbInstanceData._m0[_1074].y;
    float _1082 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * cbInstanceData._m0[_1074].z;
    float _4064 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1085 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    vec4 _1094 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1035, cbSceneParam._m0[86u].y * _1036));
    float _1098 = ((isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * TEXCOORD_5.w) * _1094.x;
    float _1099 = dot(vec3(_936, _937, _938), vec3(_1015, _1016, _1017));
    float _1102 = _1099 * 2.0;
    float _1106 = (_1102 * _936) - _1015;
    float _1107 = (_1102 * _937) - _1016;
    float _1108 = (_1102 * _938) - _1017;
    float _1112 = abs(dot(vec3(_1015, _1016, _1017), vec3(_936, _937, _938)));
    float _4097 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1114 = sqrt(_939);
    float _1127 = exp2((_1114 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1114 * 3.0));
    float _1159 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1496;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1221 = fma(_1167, cbModelParam._m0[26u].z, fma(_1163, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1159));
        float _1225 = fma(_1167, cbModelParam._m0[27u].z, fma(_1163, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1159));
        float _1229 = fma(_1167, cbModelParam._m0[28u].z, fma(_1163, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1159));
        float _1254 = _1159 + _936;
        float _1255 = _1163 + _937;
        float _1256 = _1167 + _938;
        float _1266 = fma(_1256, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1254)) - _1221;
        float _1267 = fma(_1256, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1254)) - _1225;
        float _1268 = fma(_1256, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1254)) - _1229;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1221 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1225 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[34u].z) + ((((((_1229 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1324 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1290.x + (-0.5));
        float _1326 = _1324 * (_1290.y + (-0.5));
        float _1327 = _1324 * (_1290.z + (-0.5));
        float _1334 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1297.x + (-0.5));
        float _1336 = _1334 * (_1297.y + (-0.5));
        float _1337 = _1334 * (_1297.z + (-0.5));
        float _1344 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1304.x + (-0.5));
        float _1346 = _1344 * (_1304.y + (-0.5));
        float _1347 = _1344 * (_1304.z + (-0.5));
        float _1354 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1311.x + (-0.5));
        float _1356 = _1354 * (_1311.y + (-0.5));
        float _1357 = _1354 * (_1311.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1378 = (dot(vec3(_936, _937, _938), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1388 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4145 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1390 + 1.0))) + _1395) * _1358;
        float _1405 = _1326 * 0.5;
        float _1406 = _1336 * 0.5;
        float _1407 = _1346 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_936, _937, _938), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4178 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1432 + 1.0))) + _1437) * _1359;
        float _1447 = _1327 * 0.5;
        float _1448 = _1337 * 0.5;
        float _1449 = _1347 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_936, _937, _938), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4211 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1474 + 1.0))) + _1479) * _1360;
        _1496 = _1327;
        _1498 = _1326;
        _1499 = _1325;
        _1500 = _1337;
        _1501 = _1336;
        _1502 = _1335;
        _1503 = _1347;
        _1504 = _1346;
        _1505 = _1345;
        _1506 = _1360;
        _1507 = _1359;
        _1508 = _1358;
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1497;
        _1498 = _1497;
        _1499 = _1497;
        _1500 = _1497;
        _1501 = _1497;
        _1502 = _1497;
        _1503 = _1497;
        _1504 = _1497;
        _1505 = _1497;
        _1506 = _1497;
        _1507 = _1497;
        _1508 = _1497;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1538 = fma(_1167, cbModelParam._m0[30u].z, fma(_1163, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1159));
        float _1542 = fma(_1167, cbModelParam._m0[31u].z, fma(_1163, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1159));
        float _1546 = fma(_1167, cbModelParam._m0[32u].z, fma(_1163, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1159));
        float _1569 = _1159 + _936;
        float _1570 = _1163 + _937;
        float _1571 = _1167 + _938;
        float _1581 = fma(_1571, cbModelParam._m0[30u].z, fma(_1570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1569)) - _1538;
        float _1582 = fma(_1571, cbModelParam._m0[31u].z, fma(_1570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1569)) - _1542;
        float _1583 = fma(_1571, cbModelParam._m0[32u].z, fma(_1570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1569)) - _1546;
        float _1587 = inversesqrt(dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583)));
        float _1600 = ((_1587 * _1581) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1538 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1601 = ((_1587 * _1582) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1542 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1602 = ((_1587 * _1583) / cbModelParam._m0[35u].z) + ((((((_1546 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        float _1637 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1604.x + (-0.5));
        float _1639 = _1637 * (_1604.y + (-0.5));
        float _1640 = _1637 * (_1604.z + (-0.5));
        float _1647 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1611.x + (-0.5));
        float _1649 = _1647 * (_1611.y + (-0.5));
        float _1650 = _1647 * (_1611.z + (-0.5));
        float _1657 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1618.x + (-0.5));
        float _1659 = _1657 * (_1618.y + (-0.5));
        float _1660 = _1657 * (_1618.z + (-0.5));
        float _1667 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1625.x + (-0.5));
        float _1669 = _1667 * (_1625.y + (-0.5));
        float _1670 = _1667 * (_1625.z + (-0.5));
        float _1671 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1672 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = _1638 * 0.5;
        float _1675 = _1648 * 0.5;
        float _1676 = _1658 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_936, _937, _938), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1671 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4274 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1701 + 1.0))) + _1706) * _1671;
        float _1716 = _1639 * 0.5;
        float _1717 = _1649 * 0.5;
        float _1718 = _1659 * 0.5;
        float _1719 = dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718));
        float _1724 = (_1719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1719);
        float _1732 = (dot(vec3(_936, _937, _938), vec3(_1724 * _1716, _1724 * _1717, _1724 * _1718)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718)) / (_1672 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1743 = _1742 * 2.0;
        float _1747 = (1.0 - _1742) / (_1742 + 1.0);
        float _4307 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1757 = ((((1.0 - _1748) * (_1743 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1743 + 1.0))) + _1748) * _1672;
        float _1758 = _1640 * 0.5;
        float _1759 = _1650 * 0.5;
        float _1760 = _1660 * 0.5;
        float _1761 = dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760));
        float _1766 = (_1761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1761);
        float _1774 = (dot(vec3(_936, _937, _938), vec3(_1766 * _1758, _1766 * _1759, _1766 * _1760)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1785 = _1784 * 2.0;
        float _1789 = (1.0 - _1784) / (_1784 + 1.0);
        float _4340 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1799 = ((((1.0 - _1790) * (_1785 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1785 + 1.0))) + _1790) * _1673;
        _1807 = _1640;
        _1808 = _1639;
        _1809 = _1638;
        _1810 = _1650;
        _1811 = _1649;
        _1812 = _1648;
        _1813 = _1660;
        _1814 = _1659;
        _1815 = _1658;
        _1816 = _1673;
        _1817 = _1672;
        _1818 = _1671;
        _1819 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
        _1820 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)));
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)));
    }
    else
    {
        _1807 = _1497;
        _1808 = _1497;
        _1809 = _1497;
        _1810 = _1497;
        _1811 = _1497;
        _1812 = _1497;
        _1813 = _1497;
        _1814 = _1497;
        _1815 = _1497;
        _1816 = _1497;
        _1817 = _1497;
        _1818 = _1497;
        _1819 = 0.0;
        _1820 = 0.0;
        _1821 = 0.0;
    }
    float _1831 = (cbModelParam._m0[1u].x * (_1819 - _1509)) + _1509;
    float _1832 = (cbModelParam._m0[1u].x * (_1820 - _1510)) + _1510;
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1511)) + _1511;
    float _1854 = fma(_1833, cbSceneParam._m0[89u].z, fma(_1832, cbSceneParam._m0[89u].y, _1831 * cbSceneParam._m0[89u].x));
    float _1857 = fma(_1833, cbSceneParam._m0[90u].z, fma(_1832, cbSceneParam._m0[90u].y, _1831 * cbSceneParam._m0[90u].x));
    float _1860 = fma(_1833, cbSceneParam._m0[91u].z, fma(_1832, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1831));
    float _1875 = _1106 * 0.5;
    float _1876 = _1107 * 0.5;
    float _1877 = _1108 * 0.5;
    float _1878 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1881 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1808, _1811, _1814, _1817));
    float _1884 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1807, _1810, _1813, _1816));
    float _1918;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1891 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1496, _1500, _1503, _1506));
        float _1895 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1498, _1501, _1504, _1507));
        float _1899 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1499, _1502, _1505, _1508));
        float _1906 = dot(vec4(cbModelParam._m0[39u]), vec4(_1875, _1876, _1877, 1.0));
        _1918 = dot(vec3(isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1918 = 1.0;
    }
    float _1929;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1920 = dot(vec4(cbModelParam._m0[40u]), vec4(_1875, _1876, _1877, 1.0));
        _1929 = dot(vec3(isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1920) ? 0.0 : (isnan(0.0) ? _1920 : max(0.0, _1920))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1929 = 1.0;
    }
    float _1933 = (_1929 * cbModelParam._m0[1u].x) + (_1918 * (1.0 - cbModelParam._m0[1u].x));
    float _1943 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _939);
    float _1944 = isnan(_1943) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1943 : min(cbModelParam._m0[25u].z, _1943));
    float _2025;
    float _2027;
    float _2029;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1992 = fma(_1167, cbModelParam._m0[13u].z, fma(_1163, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1159)) + cbModelParam._m0[13u].w;
        float _1996 = fma(_1167, cbModelParam._m0[14u].z, fma(_1163, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1159)) + cbModelParam._m0[14u].w;
        float _2000 = fma(_1167, cbModelParam._m0[15u].z, fma(_1163, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1159)) + cbModelParam._m0[15u].w;
        float _2003 = fma(_1108, cbModelParam._m0[13u].z, fma(_1107, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1106));
        float _2006 = fma(_1108, cbModelParam._m0[14u].z, fma(_1107, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1106));
        float _2009 = fma(_1108, cbModelParam._m0[15u].z, fma(_1107, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1106));
        float _2037;
        if (_2003 > 0.0)
        {
            _2037 = abs((1.0 - _1992) / _2003);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1992 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2037 = frontier_phi_17_15_ladder;
        }
        float _2238;
        if (_2006 > 0.0)
        {
            _2238 = abs((1.0 - _1996) / _2006);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1996 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2238 = frontier_phi_26_22_ladder;
        }
        float _2481;
        if (_2009 > 0.0)
        {
            _2481 = abs((1.0 - _2000) / _2009);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2000 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2481 = frontier_phi_38_33_ladder;
        }
        float _2483 = isnan(_2238) ? _2037 : (isnan(_2037) ? _2238 : min(_2037, _2238));
        float _2484 = isnan(_2481) ? _2483 : (isnan(_2483) ? _2481 : min(_2483, _2481));
        float _2488 = (_2484 * _2003) + _1992;
        float _2489 = (_2484 * _2006) + _1996;
        float _2490 = (_2484 * _2009) + _2000;
        float _2491 = _2484 * 9.9999997473787516355514526367188e-05;
        float _2493 = (-1.0) - _2491;
        float _2495 = _2491 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2490 > _2495) || ((_2490 < _2493) || ((_2489 > _2495) || ((_2489 < _2493) || ((_2488 < _2493) || (_2488 > _2495))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2490, cbModelParam._m0[9u].z, fma(_2489, cbModelParam._m0[9u].y, _2488 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2490, cbModelParam._m0[10u].z, fma(_2489, cbModelParam._m0[10u].y, _2488 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2490, cbModelParam._m0[11u].z, fma(_2489, cbModelParam._m0[11u].y, _2488 * cbModelParam._m0[11u].x))), _1944);
            frontier_phi_16_38_ladder = _2614.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2614.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2614.x * cbModelParam._m0[1u].y;
        }
        _2025 = frontier_phi_16_38_ladder_2;
        _2027 = frontier_phi_16_38_ladder_1;
        _2029 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2013 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1106, _1107, _1108), _1944);
        _2025 = _2013.x * cbModelParam._m0[1u].y;
        _2027 = _2013.y * cbModelParam._m0[1u].y;
        _2029 = _2013.z * cbModelParam._m0[1u].y;
    }
    float _2033 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _939);
    float _2034 = isnan(_2033) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2033 : min(cbModelParam._m0[25u].w, _2033));
    float _2124;
    float _2126;
    float _2128;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2088 = fma(_1167, cbModelParam._m0[21u].z, fma(_1163, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1159)) + cbModelParam._m0[21u].w;
        float _2092 = fma(_1167, cbModelParam._m0[22u].z, fma(_1163, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1159)) + cbModelParam._m0[22u].w;
        float _2096 = fma(_1167, cbModelParam._m0[23u].z, fma(_1163, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1159)) + cbModelParam._m0[23u].w;
        float _2099 = fma(_1108, cbModelParam._m0[21u].z, fma(_1107, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1106));
        float _2102 = fma(_1108, cbModelParam._m0[22u].z, fma(_1107, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1106));
        float _2105 = fma(_1108, cbModelParam._m0[23u].z, fma(_1107, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1106));
        float _2243;
        if (_2099 > 0.0)
        {
            _2243 = abs((1.0 - _2088) / _2099);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2088 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2243 = frontier_phi_28_24_ladder;
        }
        float _2508;
        if (_2102 > 0.0)
        {
            _2508 = abs((1.0 - _2092) / _2102);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2092 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2508 = frontier_phi_40_35_ladder;
        }
        float _2713;
        if (_2105 > 0.0)
        {
            _2713 = abs((1.0 - _2096) / _2105);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2096 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2713 = frontier_phi_49_46_ladder;
        }
        float _2715 = isnan(_2508) ? _2243 : (isnan(_2243) ? _2508 : min(_2243, _2508));
        float _2716 = isnan(_2713) ? _2715 : (isnan(_2715) ? _2713 : min(_2715, _2713));
        float _2720 = (_2716 * _2099) + _2088;
        float _2721 = (_2716 * _2102) + _2092;
        float _2722 = (_2716 * _2105) + _2096;
        float _2723 = _2716 * 9.9999997473787516355514526367188e-05;
        float _2724 = (-1.0) - _2723;
        float _2726 = _2723 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2722 > _2726) || ((_2722 < _2724) || ((_2721 > _2726) || ((_2721 < _2724) || ((_2720 < _2724) || (_2720 > _2726))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2921 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2722, cbModelParam._m0[17u].z, fma(_2721, cbModelParam._m0[17u].y, _2720 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2722, cbModelParam._m0[18u].z, fma(_2721, cbModelParam._m0[18u].y, _2720 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2722, cbModelParam._m0[19u].z, fma(_2721, cbModelParam._m0[19u].y, _2720 * cbModelParam._m0[19u].x))), _2034);
            frontier_phi_25_49_ladder = _2921.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2921.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2921.x * cbModelParam._m0[1u].z;
        }
        _2124 = frontier_phi_25_49_ladder_2;
        _2126 = frontier_phi_25_49_ladder_1;
        _2128 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2108 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1106, _1107, _1108), _2034);
        _2124 = _2108.x * cbModelParam._m0[1u].z;
        _2126 = _2108.y * cbModelParam._m0[1u].z;
        _2128 = _2108.z * cbModelParam._m0[1u].z;
    }
    float _2140 = ((((1.0 - _1127) * ((_1114 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1127 * _1114)) * _1098;
    float _2141 = _2140 * ((cbModelParam._m0[1u].w * (_2124 - _2025)) + _2025);
    float _2142 = _2140 * ((cbModelParam._m0[1u].w * (_2126 - _2027)) + _2027);
    float _2143 = _2140 * ((cbModelParam._m0[1u].w * (_2128 - _2029)) + _2029);
    float _2146 = fma(_2143, cbSceneParam._m0[89u].z, fma(_2142, cbSceneParam._m0[89u].y, _2141 * cbSceneParam._m0[89u].x));
    float _2149 = fma(_2143, cbSceneParam._m0[90u].z, fma(_2142, cbSceneParam._m0[90u].y, _2141 * cbSceneParam._m0[90u].x));
    float _2152 = fma(_2143, cbSceneParam._m0[91u].z, fma(_2142, cbSceneParam._m0[91u].y, _2141 * cbSceneParam._m0[91u].x));
    uvec4 _2162 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2164 = _2162.x * 14u;
    uint _2165 = _2164 + 13u;
    float _2172 = _1098 + (-1.0);
    float _2177 = (cbLight._m0[_2165].x * _2172) + 1.0;
    float _2178 = (cbLight._m0[_2165].y * _2172) + 1.0;
    float _2179 = (cbLight._m0[_2165].z * _2172) + 1.0;
    float _2180 = (cbLight._m0[_2165].w * _2172) + 1.0;
    uint _2181 = _2164 + 5u;
    float _2187 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2191 = _2164 + 4u;
    float _2197 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
    uint _2201 = _2164 | 1u;
    float _2212 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_936, _937, _938));
    float _2215 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_936, _937, _938));
    float _4476 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _4487 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2220 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * 0.3183098733425140380859375;
    float _2222 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * 0.3183098733425140380859375;
    float _2229 = ((cbLight._m0[_2181].x * _2187) * _2222) + ((cbLight._m0[_2191].x * _2197) * _2220);
    float _2230 = ((_2187 * cbLight._m0[_2181].y) * _2222) + ((_2197 * cbLight._m0[_2191].y) * _2220);
    float _2231 = ((_2187 * cbLight._m0[_2181].z) * _2222) + ((_2197 * cbLight._m0[_2191].z) * _2220);
    uvec4 _2235 = floatBitsToUint(cbLight._m0[_2164 + 12u]);
    bool _2237 = _2235.x == 0u;
    float _2248;
    float _2250;
    float _2252;
    if (_2237)
    {
        _2248 = _2229;
        _2250 = _2230;
        _2252 = _2231;
    }
    else
    {
        uint _2256 = _2164 + 6u;
        float _2272 = (dot(vec3(cbLight._m0[_2164 + 2u].xyz), vec3(_936, _937, _938)) * 0.5) + 0.5;
        float _2273 = _2272 * _2272;
        float _4498 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2274 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2275 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2248 = (((cbLight._m0[_2256].x * 0.3183098733425140380859375) * _2274) * _2275) + _2229;
        _2250 = (((cbLight._m0[_2256].y * 0.3183098733425140380859375) * _2274) * _2275) + _2230;
        _2252 = (((cbLight._m0[_2256].z * 0.3183098733425140380859375) * _2274) * _2275) + _2231;
    }
    bool _2255 = _2235.y == 0u;
    float _2293;
    float _2295;
    float _2297;
    if (_2255)
    {
        _2293 = _2248;
        _2295 = _2250;
        _2297 = _2252;
    }
    else
    {
        uint _2452 = _2164 + 7u;
        float _2468 = (dot(vec3(cbLight._m0[_2164 + 3u].xyz), vec3(_936, _937, _938)) * 0.5) + 0.5;
        float _2469 = _2468 * _2468;
        float _4514 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2470 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2471 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2293 = (((cbLight._m0[_2452].x * 0.3183098733425140380859375) * _2470) * _2471) + _2248;
        _2295 = (((cbLight._m0[_2452].y * 0.3183098733425140380859375) * _2470) * _2471) + _2250;
        _2297 = (((cbLight._m0[_2452].z * 0.3183098733425140380859375) * _2470) * _2471) + _2252;
    }
    uint _2300 = _2164 + 8u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _939) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2164].x + _1015;
    float _2316 = cbLight._m0[_2164].y + _1016;
    float _2317 = cbLight._m0[_2164].z + _1017;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_936, _937, _938), vec3(cbLight._m0[_2164].xyz));
    float _4530 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _4541 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _2329 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2330 = dot(vec3(_936, _937, _938), vec3(_2322, _2323, _2324));
    float _4552 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2322, _2323, _2324));
    float _4563 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2314 * _2314;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2354 = 1.0 - _2314;
    float _2365 = (0.5 / (((_2329 * ((_2328 * _2354) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2354) + _2314) * _2328))) * _2328;
    float _4574 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    uint _2378 = _2164 + 9u;
    float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _939) * 0.949999988079071044921875);
    float _2390 = _2389 * _2389;
    float _2391 = cbLight._m0[_2201].x + _1015;
    float _2392 = cbLight._m0[_2201].y + _1016;
    float _2393 = cbLight._m0[_2201].z + _1017;
    float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
    float _2398 = _2397 * _2391;
    float _2399 = _2397 * _2392;
    float _2400 = _2397 * _2393;
    float _2401 = dot(vec3(_936, _937, _938), vec3(cbLight._m0[_2201].xyz));
    float _4585 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2405 = dot(vec3(_936, _937, _938), vec3(_2398, _2399, _2400));
    float _4596 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2398, _2399, _2400));
    float _4607 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2390 * _2390;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2427 = 1.0 - _2390;
    float _2437 = (0.5 / (((_2329 * ((_2404 * _2427) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2427) + _2390) * _2404))) * _2404;
    float _4618 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2439 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    float _2449 = (((_2426 * cbLight._m0[_2378].x) * _2439) * _2187) + (((_2353 * cbLight._m0[_2300].x) * _2367) * _2197);
    float _2450 = (((_2426 * cbLight._m0[_2378].y) * _2439) * _2187) + (((_2353 * cbLight._m0[_2300].y) * _2367) * _2197);
    float _2451 = (((_2426 * cbLight._m0[_2378].z) * _2439) * _2187) + (((_2353 * cbLight._m0[_2300].z) * _2367) * _2197);
    float _2513;
    float _2515;
    float _2517;
    if (_2237)
    {
        _2513 = _2449;
        _2515 = _2450;
        _2517 = _2451;
    }
    else
    {
        uint _2519 = _2164 + 2u;
        uint _2523 = _2164 + 10u;
        float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2519].w)) * _939) * 0.949999988079071044921875);
        float _2538 = _2537 * _2537;
        float _2539 = cbLight._m0[_2519].x + _1015;
        float _2540 = cbLight._m0[_2519].y + _1016;
        float _2541 = cbLight._m0[_2519].z + _1017;
        float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
        float _2546 = _2545 * _2539;
        float _2547 = _2545 * _2540;
        float _2548 = _2545 * _2541;
        float _2549 = dot(vec3(_936, _937, _938), vec3(cbLight._m0[_2519].xyz));
        float _4629 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2553 = dot(vec3(_936, _937, _938), vec3(_2546, _2547, _2548));
        float _4640 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2557 = dot(vec3(cbLight._m0[_2519].xyz), vec3(_2546, _2547, _2548));
        float _4651 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2561 = _2538 * _2538;
        float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
        float _2574 = (exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2575 = 1.0 - _2538;
        float _2585 = (0.5 / (((_2329 * ((_2552 * _2575) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2575) + _2538) * _2552))) * _2552;
        float _4662 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2587 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
        float _2588 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2513 = (((_2574 * cbLight._m0[_2523].x) * _2587) * _2588) + _2449;
        _2515 = (((_2574 * cbLight._m0[_2523].y) * _2587) * _2588) + _2450;
        _2517 = (((_2574 * cbLight._m0[_2523].z) * _2587) * _2588) + _2451;
    }
    float _2623;
    float _2625;
    float _2627;
    if (_2255)
    {
        _2623 = _2513;
        _2625 = _2515;
        _2627 = _2517;
    }
    else
    {
        uint _2634 = _2164 + 3u;
        uint _2638 = _2164 + 11u;
        float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2634].w)) * _939) * 0.949999988079071044921875);
        float _2653 = _2652 * _2652;
        float _2654 = cbLight._m0[_2634].x + _1015;
        float _2655 = cbLight._m0[_2634].y + _1016;
        float _2656 = cbLight._m0[_2634].z + _1017;
        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
        float _2661 = _2660 * _2654;
        float _2662 = _2660 * _2655;
        float _2663 = _2660 * _2656;
        float _2664 = dot(vec3(_936, _937, _938), vec3(cbLight._m0[_2634].xyz));
        float _4678 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2668 = dot(vec3(_936, _937, _938), vec3(_2661, _2662, _2663));
        float _4689 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2672 = dot(vec3(cbLight._m0[_2634].xyz), vec3(_2661, _2662, _2663));
        float _4700 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2676 = _2653 * _2653;
        float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
        float _2689 = (exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2690 = 1.0 - _2653;
        float _2700 = (0.5 / (((_2329 * ((_2667 * _2690) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2690) + _2653) * _2667))) * _2667;
        float _4711 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2702 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
        float _2703 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2623 = (((_2689 * cbLight._m0[_2638].x) * _2702) * _2703) + _2513;
        _2625 = (((_2689 * cbLight._m0[_2638].y) * _2702) * _2703) + _2515;
        _2627 = (((_2689 * cbLight._m0[_2638].z) * _2702) * _2703) + _2517;
    }
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_2162.y == 0u)
    {
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2778;
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2778;
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2778;
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.x;
        uint _2805 = uint((float(_2793.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1036) / _2794))) + floor(float(uint(cbSceneParam._m0[85u].x * _1035) / _2794)));
        float _2815 = (log2(_2781 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2816 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        uint _2819 = uint(isnan(14.0) ? _2816 : (isnan(_2816) ? 14.0 : min(_2816, 14.0)));
        uvec4 _2824 = texelFetch(g_lightClusterGridBuffer, int(((_2819 << 2u) + (_2805 << 6u)) >> 2u));
        uint _2825 = _2824.x;
        uint _2826 = _2793.z;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((((1u << ((_2826 >> 4u) & 15u)) + 4294967295u) & _2825) == 0u) || ((_2826 & 240u) == 0u))
        {
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
        }
        else
        {
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            uint _3084 = 0u;
            uint _3093;
            bool _3094;
            for (;;)
            {
                _3093 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                _3094 = _3093 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3094)
                {
                    frontier_phi_66_pred = _3078;
                    frontier_phi_66_pred_1 = _3083;
                    frontier_phi_66_pred_2 = _3082;
                    frontier_phi_66_pred_3 = _3081;
                    frontier_phi_66_pred_4 = _3080;
                    frontier_phi_66_pred_5 = _3079;
                }
                else
                {
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    uint _3229;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3093;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    for (;;)
                    {
                        uint _3233 = uint(findLSB(_3229)) + (_3084 << 5u);
                        uint _3230 = (_3229 + 4294967295u) & _3229;
                        uint _3235 = _3233 * 48u;
                        vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3255 = (_3233 * 48u) + 4u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 3u)).x));
                        uint _3274 = (_3233 * 48u) + 8u;
                        vec3 _3285 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x));
                        float _3289 = _3249.x - _2779;
                        float _3290 = _3249.y - _2780;
                        float _3291 = _3249.z - _2781;
                        float _3292 = dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291));
                        float _3295 = inversesqrt(_3292);
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3299 = dot(vec3(_1054, _1057, _1060), vec3(_3296, _3297, _3298));
                        float _3304 = 1.0 - (_3292 * _3249.w);
                        float _4737 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                        float _3306 = sqrt(_3292) * _3268.w;
                        float _3309 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3299) + _3310;
                        float _3316 = _3306 * _3306;
                        float _3320 = ((isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))) * _3305) / ((_3316 * 0.699999988079071044921875) + 1.0);
                        float _3324 = (-0.0) - _2779;
                        float _3325 = (-0.0) - _2780;
                        float _3326 = (-0.0) - _2781;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3331 = _3330 * _3324;
                        float _3332 = _3330 * _3325;
                        float _3333 = _3330 * _3326;
                        float _3341 = exp2(log2(1.0 / ((_3316 * 3.5) + 5.0)) * 0.25);
                        float _3342 = 1.0 - _1114;
                        float _3349 = sqrt(1.0 - ((1.0 - (_3342 * _3342)) * (1.0 - (_3341 * _3341))));
                        float _3350 = _3349 * _3349;
                        float _3351 = _3350 * _3350;
                        float _3352 = _3331 + _3296;
                        float _3353 = _3332 + _3297;
                        float _3354 = _3333 + _3298;
                        float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                        float _3362 = dot(vec3(_1054, _1057, _1060), vec3(_3331, _3332, _3333));
                        float _4753 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3366 = dot(vec3(_1054, _1057, _1060), vec3(_3358 * _3352, _3358 * _3353, _3358 * _3354));
                        float _4764 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3373 = ((_3369 * _3369) * (_3351 + (-1.0))) + 1.0;
                        float _3374 = _3309 * _3350;
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3299) + _3375;
                        float _4775 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3379 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3380 = 1.0 - _3350;
                        float _3390 = (0.5 / (((_3379 * ((_3365 * _3380) + _3350)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3350) * _3365))) * _3379;
                        float _4786 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3401 = (((_3351 * 3.1415927410125732421875) * (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) / ((_3373 * _3373) * ((_3316 * 2.1991131305694580078125) + 3.141590118408203125))) * _3305;
                        _3153 = (_3320 * _3268.x) + _3226;
                        _3154 = (_3320 * _3268.y) + _3227;
                        _3155 = (_3320 * _3268.z) + _3228;
                        _3150 = (_3401 * _3285.x) + _3223;
                        _3151 = (_3401 * _3285.y) + _3224;
                        _3152 = (_3401 * _3285.z) + _3225;
                        if (_3230 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3230;
                        }
                    }
                    frontier_phi_66_pred = _3150;
                    frontier_phi_66_pred_1 = _3155;
                    frontier_phi_66_pred_2 = _3154;
                    frontier_phi_66_pred_3 = _3153;
                    frontier_phi_66_pred_4 = _3152;
                    frontier_phi_66_pred_5 = _3151;
                }
                _2927 = frontier_phi_66_pred;
                _2937 = frontier_phi_66_pred_1;
                _2935 = frontier_phi_66_pred_2;
                _2933 = frontier_phi_66_pred_3;
                _2931 = frontier_phi_66_pred_4;
                _2929 = frontier_phi_66_pred_5;
                uint _3085 = _3084 + 1u;
                if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3078 = _2927;
                    _3079 = _2929;
                    _3080 = _2931;
                    _3081 = _2933;
                    _3082 = _2935;
                    _3083 = _2937;
                    _3084 = _3085;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
        }
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.z;
        uint _2943 = (_2941 >> 8u) & 15u;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((4294967295u << _2943) & _2825) == 0u)
        {
            _3046 = _2926;
            _3048 = _2928;
            _3050 = _2930;
            _3052 = _2932;
            _3054 = _2934;
            _3056 = _2936;
        }
        else
        {
            float _3071 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
            float _3072 = _3071 * _2779;
            float _3073 = _3071 * _2780;
            float _3074 = _3071 * _2781;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2943 < ((_2941 >> 12u) & 15u))
            {
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3206 = _2926;
                float _3207 = _2928;
                float _3208 = _2930;
                float _3209 = _2932;
                float _3210 = _2934;
                float _3211 = _2936;
                uint _3212 = _2943;
                uint _3221;
                bool _3222;
                for (;;)
                {
                    _3221 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3212 << 2u)) >> 2u)).x;
                    _3222 = _3221 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3222)
                    {
                        frontier_phi_77_pred = _3211;
                        frontier_phi_77_pred_1 = _3210;
                        frontier_phi_77_pred_2 = _3209;
                        frontier_phi_77_pred_3 = _3208;
                        frontier_phi_77_pred_4 = _3207;
                        frontier_phi_77_pred_5 = _3206;
                    }
                    else
                    {
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3428 = _3206;
                        float _3429 = _3207;
                        float _3430 = _3208;
                        float _3431 = _3209;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        uint _3434 = _3221;
                        uint _3435;
                        vec4 _3460;
                        float _3461;
                        vec4 _3476;
                        vec3 _3488;
                        vec4 _3503;
                        vec4 _3518;
                        float _3564;
                        bool _3565;
                        for (;;)
                        {
                            uint _3445 = ((_3212 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3434));
                            _3435 = (_3434 + 4294967295u) & _3434;
                            uint _3447 = _3445 * 40u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            _3461 = _3460.w;
                            uint _3463 = (_3445 * 40u) + 4u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3445 * 40u) + 8u;
                            _3488 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x));
                            uint _3490 = (_3445 * 40u) + 16u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3445 * 40u) + 20u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3445 * 40u) + 24u;
                            vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3539 = (_3445 * 40u) + 28u;
                            vec4 _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            _3564 = fma(_2781, _3552.z, fma(_2780, _3552.y, _3552.x * _2779)) + _3552.w;
                            _3565 = !((fma(_2781, _3533.z, fma(_2780, _3533.y, _3533.x * _2779)) + _3533.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3565)
                            {
                                float _3592 = _3460.x - _2779;
                                float _3593 = _3460.y - _2780;
                                float _3594 = _3460.z - _2781;
                                float _3595 = dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594));
                                float _3598 = inversesqrt(_3595);
                                float _3599 = _3598 * _3592;
                                float _3600 = _3598 * _3593;
                                float _3601 = _3598 * _3594;
                                float _3605 = 1.0 - (_3595 / (_3461 * _3461));
                                float _4797 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3610 = sqrt(_3595) * _3476.w;
                                float _3612 = 1.39999997615814208984375 / (_3610 + 1.39999997615814208984375);
                                float _3613 = _3612 * _3612;
                                float _3616 = ((1.0 - _3613) * dot(vec3(_3599, _3600, _3601), vec3(_1054, _1057, _1060))) + _3613;
                                float _3619 = _3610 * _3610;
                                float _3623 = (fma(_2781, _3503.z, fma(_2780, _3503.y, _3503.x * _2779)) + _3503.w) / _3564;
                                float _3624 = (fma(_2781, _3518.z, fma(_2780, _3518.y, _3518.x * _2779)) + _3518.w) / _3564;
                                float _3628 = 1.0 - dot(vec2(_3623, _3624), vec2(_3623, _3624));
                                float _4813 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3630 = _3629 * (((isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0))) * _3606) / ((_3619 * 0.699999988079071044921875) + 1.0));
                                float _3642 = exp2(log2(1.0 / ((_3619 * 3.5) + 5.0)) * 0.25);
                                float _3643 = 1.0 - _1114;
                                float _3650 = sqrt(1.0 - ((1.0 - (_3643 * _3643)) * (1.0 - (_3642 * _3642))));
                                float _3651 = _3650 * _3650;
                                float _3652 = _3651 * _3651;
                                float _3653 = _3599 - _3072;
                                float _3654 = _3600 - _3073;
                                float _3655 = _3601 - _3074;
                                float _3659 = inversesqrt(dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655)));
                                float _3663 = dot(vec3(_1054, _1057, _1060), vec3((-0.0) - _3072, (-0.0) - _3073, (-0.0) - _3074));
                                float _4824 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3666 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3667 = dot(vec3(_1054, _1057, _1060), vec3(_3659 * _3653, _3659 * _3654, _3659 * _3655));
                                float _4835 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3674 = ((_3670 * _3670) * (_3652 + (-1.0))) + 1.0;
                                float _3675 = _3612 * _3651;
                                float _3676 = _3675 * _3675;
                                float _3682 = ((1.0 - _3676) * dot(vec3(_1054, _1057, _1060), vec3(_3599, _3600, _3601))) + _3676;
                                float _4846 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3684 = 1.0 - _3651;
                                float _3694 = (0.5 / (((_3683 * ((_3666 * _3684) + _3651)) + 9.9999999392252902907785028219223e-09) + (((_3683 * _3684) + _3651) * _3666))) * _3683;
                                float _4857 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3704 = (_3629 * _3606) * (((_3652 * 3.1415927410125732421875) * (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) / ((_3674 * _3674) * ((_3619 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3630 * _3476.y;
                                frontier_phi_83_pred_1 = _3630 * _3476.x;
                                frontier_phi_83_pred_2 = _3704 * _3488.z;
                                frontier_phi_83_pred_3 = _3704 * _3488.y;
                                frontier_phi_83_pred_4 = _3704 * _3488.x;
                                frontier_phi_83_pred_5 = _3630 * _3476.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3712 = frontier_phi_83_pred;
                            _3711 = frontier_phi_83_pred_1;
                            _3710 = frontier_phi_83_pred_2;
                            _3709 = frontier_phi_83_pred_3;
                            _3708 = frontier_phi_83_pred_4;
                            _3713 = frontier_phi_83_pred_5;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            _3417 = _3710 + _3430;
                            if (_3435 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3435;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3420;
                        frontier_phi_77_pred_1 = _3419;
                        frontier_phi_77_pred_2 = _3418;
                        frontier_phi_77_pred_3 = _3417;
                        frontier_phi_77_pred_4 = _3416;
                        frontier_phi_77_pred_5 = _3415;
                    }
                    _3057 = frontier_phi_77_pred;
                    _3055 = frontier_phi_77_pred_1;
                    _3053 = frontier_phi_77_pred_2;
                    _3051 = frontier_phi_77_pred_3;
                    _3049 = frontier_phi_77_pred_4;
                    _3047 = frontier_phi_77_pred_5;
                    uint _3213 = _3212 + 1u;
                    if (_3213 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3206 = _3047;
                        _3207 = _3049;
                        _3208 = _3051;
                        _3209 = _3053;
                        _3210 = _3055;
                        _3211 = _3057;
                        _3212 = _3213;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3051;
                frontier_phi_58_59_ladder_1 = _3057;
                frontier_phi_58_59_ladder_2 = _3055;
                frontier_phi_58_59_ladder_3 = _3053;
                frontier_phi_58_59_ladder_4 = _3049;
                frontier_phi_58_59_ladder_5 = _3047;
            }
            else
            {
                frontier_phi_58_59_ladder = _2930;
                frontier_phi_58_59_ladder_1 = _2936;
                frontier_phi_58_59_ladder_2 = _2934;
                frontier_phi_58_59_ladder_3 = _2932;
                frontier_phi_58_59_ladder_4 = _2928;
                frontier_phi_58_59_ladder_5 = _2926;
            }
            _3046 = frontier_phi_58_59_ladder_5;
            _3048 = frontier_phi_58_59_ladder_4;
            _3050 = frontier_phi_58_59_ladder;
            _3052 = frontier_phi_58_59_ladder_3;
            _3054 = frontier_phi_58_59_ladder_2;
            _3056 = frontier_phi_58_59_ladder_1;
        }
        float _3061 = isnan(1.0) ? _1098 : (isnan(_1098) ? 1.0 : min(_1098, 1.0));
        _2838 = (_3061 * _3052) + _2293;
        _2840 = (_3061 * _3054) + _2295;
        _2842 = (_3061 * _3056) + _2297;
        _2844 = ((_3046 * 0.039999999105930328369140625) * _3061) + _2623;
        _2846 = ((_3048 * 0.039999999105930328369140625) * _3061) + _2625;
        _2848 = ((_3050 * 0.039999999105930328369140625) * _3061) + _2627;
    }
    else
    {
        _2838 = _2293;
        _2840 = _2295;
        _2842 = _2297;
        _2844 = _2623;
        _2846 = _2625;
        _2848 = _2627;
    }
    float _4873 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _4884 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _4895 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _2865 = ((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2838 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1098))) + ((_2844 + ((isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0))) * _1933)) * cbPerFrame._m0[3u].x);
    float _2866 = ((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2840 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1098))) + ((_2846 + ((isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))) * _1933)) * cbPerFrame._m0[3u].x);
    float _2867 = ((isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2842 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1098))) + ((_2848 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1933)) * cbPerFrame._m0[3u].x);
    uint _2868 = _283 + 6u;
    float _2876 = _1035 / cbSceneParam._m0[86u].x;
    float _2877 = _1036 / cbSceneParam._m0[86u].y;
    vec4 _2891 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, (log2((isnan(cbSceneParam._m0[77u].w) ? _957 : (isnan(_957) ? cbSceneParam._m0[77u].w : min(_957, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2893 = _2891.x;
    float _2894 = _2891.y;
    float _2895 = _2891.z;
    float _2896 = _2891.w;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_957 > cbSceneParam._m0[78u].w)
    {
        float _2951 = isnan(_957) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _957 : min(cbSceneParam._m0[80u].w, _957));
        float _2952 = _2951 / _957;
        float _2963 = _2952 * _1008;
        float _2964 = _1009 * _2952;
        float _2965 = (-0.0) - _2964;
        float _2966 = _2952 * _1010;
        float _2968 = (cbSceneParam._m0[77u].w * _2965) / _2951;
        float _2969 = _2968 + cbSceneParam._m0[79u].w;
        float _2970 = cbSceneParam._m0[79u].w - _2964;
        float _2976 = sqrt(((_2963 * _2963) + (_2964 * _2964)) + (_2966 * _2966));
        float _2979 = (1.0 - (cbSceneParam._m0[77u].w / _2951)) * _2976;
        float _2984 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2986 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3163;
        if (abs((_2965 - _2968) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3163 = ((((_2969 > 0.0) ? exp2(_2984 * _2969) : (2.0 - exp2(_2986 * _2969))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2979;
        }
        else
        {
            float _3107 = 1.0 / cbSceneParam._m0[80u].x;
            float _3108 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : max(_2969, _2970));
            float _3109 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : min(_2969, _2970));
            float _3118 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : min(_3108, 0.0));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            _3163 = ((abs(_2976 / _2965) * cbSceneParam._m0[80u].y) * ((((_3118 - _3119) * 2.0) - ((exp2(_2984 * (isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0)))) - exp2(_2984 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))))) * _3107)) - ((exp2(_2986 * _3118) - exp2(_2986 * _3119)) * _3107))) + (_2979 * cbSceneParam._m0[80u].z);
        }
        vec4 _3165 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, 1.0), 0.0);
        float _3174 = exp2((_3163 * (-1.44269502162933349609375)) * (1.0 - _3165.w));
        float _3175 = log2(_3174);
        float _3191 = log2(_2896);
        _2988 = (exp2(_3191 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].x)) * _3165.x) / cbSceneParam._m0[78u].x)) + _2893;
        _2990 = (exp2(_3191 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].y)) * _3165.y) / cbSceneParam._m0[78u].y)) + _2894;
        _2992 = (exp2(_3191 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].z)) * _3165.z) / cbSceneParam._m0[78u].z)) + _2895;
        _2994 = _3174 * _2896;
    }
    else
    {
        _2988 = _2893;
        _2990 = _2894;
        _2992 = _2895;
        _2994 = _2896;
    }
    bool _3201;
    vec4 _3004;
    vec4 _3026;
    float _3028;
    float _3032;
    float _3033;
    float _3034;
    float _3035;
    bool _3045;
    for (;;)
    {
        _3004 = cbMatDynParam._m0[0u];
        float _3006 = roundEven(_3004.y);
        bool _3007 = _3006 == 3.0;
        float _3008 = log2(_2994);
        float _3015 = exp2(_3008 * cbSceneParam._m0[78u].x) * _2865;
        float _3016 = exp2(_3008 * cbSceneParam._m0[78u].y) * _2866;
        float _3017 = exp2(_3008 * cbSceneParam._m0[78u].z) * _2867;
        float _3024 = _1024 + (-0.5);
        _3026 = cbMtdParam._m0[1u];
        _3028 = _3026.y * _3024;
        float _3031 = (_3006 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3032 = _3031 * (_3007 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2988)));
        _3033 = _3031 * (_3007 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2990)));
        _3034 = _3031 * (_3007 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2992)));
        _3035 = _3024 * 0.999000012874603271484375;
        _3045 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3045)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3035) < 0.5)
            {
                _3201 = true;
                break;
            }
        }
        uint _3142 = _1073 + uint(_3004.w);
        if ((cbInstanceData._m0[_3142].w < 1.0) && ((cbInstanceData._m0[_3142].w + _3035) < 0.5))
        {
            _3201 = true;
            break;
        }
        if ((_3028 + 1.0) < _3026.x)
        {
            _3201 = true;
            break;
        }
        _3201 = false;
        break;
    }
    float _3406;
    if (_3201)
    {
        discard_state = true;
        _3406 = 0.0;
    }
    else
    {
        _3406 = cbInstanceData._m0[_2868].w;
    }
    SV_Target.x = _3032;
    SV_Target.y = _3033;
    SV_Target.z = _3034;
    SV_Target.w = _3406;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2868].w;
    discard_exit();
}


