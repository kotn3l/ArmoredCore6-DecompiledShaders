#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1474;
float _3857;
float _3858;
float _3859;
float _3860;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3869 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3880 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3891 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _426 = _424.x;
    float _438 = dot(vec4(_426, _424.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _455 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _389.x) * 2.0) - ((((_426 - _438) * cbMtdParam._m0[24u].z) + _438) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3902 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _463 = (_456 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _464 = (_456 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _465 = (_456 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _482 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _504 = _502.x;
    float _514 = dot(vec4(_504, _502.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _528 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _389.y) * 2.0) - ((((_504 - _514) * cbMtdParam._m0[24u].z) + _514) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3913 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _536 = (_529 * ((_482.x * cbMtdParam._m0[13u].x) - _463)) + _463;
    float _537 = (_529 * ((_482.y * cbMtdParam._m0[13u].y) - _464)) + _464;
    float _538 = (_529 * ((_482.z * cbMtdParam._m0[13u].z) - _465)) + _465;
    float _542 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _536;
    float _545 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _537;
    float _548 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _538;
    float _555 = ((_536 - _542) * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) + _542;
    float _556 = ((_537 - _545) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) + _545;
    float _557 = ((_538 - _548) * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) + _548;
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _616 = _614.x;
    float _617 = _614.y;
    float _618 = _614.z;
    float _625 = ((_597.x - _616) * _456) + _616;
    float _626 = ((_597.y - _617) * _456) + _617;
    float _627 = ((_597.z - _618) * _456) + _618;
    vec4 _639 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _652 = ((_639.z - _627) * _529) + _627;
    float _655 = ((((_639.x - _625) * _529) + _625) * 2.0) + (-1.0);
    float _656 = ((((_639.y - _626) * _529) + _626) * 2.0) + (-1.0);
    float _657 = dot(vec2(_655, _656), vec2(_655, _656));
    float _3924 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _662 = sqrt(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))));
    vec4 _676 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _703 = _701.x;
    float _704 = 1.0 - _703;
    float _710 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _713 = ((isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : min(_710, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _722 = (_713 - ((((((_703 - _704) * cbMtdParam._m0[24u].w) + _704) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _713))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3945 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _723 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _730 = (_723 * (cbMtdParam._m0[17u].x - _555)) + _555;
    float _731 = (_723 * (cbMtdParam._m0[17u].y - _556)) + _556;
    float _732 = (_723 * (cbMtdParam._m0[17u].z - _557)) + _557;
    vec4 _744 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _746 = _744.x;
    float _747 = 1.0 - _746;
    float _772 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_746 - _747) * cbMtdParam._m0[24u].y) + _747) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3956 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _773 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _781 = ((((cbMtdParam._m0[10u].x - _730) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _773) + _730;
    float _782 = ((((cbMtdParam._m0[10u].y - _731) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _773) + _731;
    float _783 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _732)) * _773) + _732;
    float _788 = (((_574.z - _652) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _652;
    float _792 = ((_676.z - _788) * cbMtdParam._m0[19u].w) + _788;
    vec4 _806 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _813 = (_806.x * 2.0) + (-1.0);
    float _814 = (_806.y * 2.0) + (-1.0);
    float _815 = dot(vec2(_813, _814), vec2(_813, _814));
    float _3967 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _823 = (_723 * (_806.z - _792)) + _792;
    float _826 = ((cbMtdParam._m0[23u].y - _823) * _773) + _823;
    vec4 _845 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _851 = (_845.x * 2.0) + (-1.0);
    float _852 = (_845.y * 2.0) + (-1.0);
    float _853 = dot(vec2(_851, _852), vec2(_851, _852));
    float _3978 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _867 = (_655 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_574.x * 2.0) + (-1.0)))) + (((_676.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _868 = (_656 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_574.y * 2.0) + (-1.0)))) + (((_676.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _880 = (((_813 - _867) + (cbMtdParam._m0[21u].x * _867)) * _723) + _867;
    float _881 = (((_814 - _868) + (cbMtdParam._m0[21u].x * _868)) * _723) + _868;
    float _882 = (_723 * (sqrt(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) - _662)) + _662;
    float _893 = (((_851 - _880) + (_880 * cbMtdParam._m0[22u].z)) * _773) + _880;
    float _894 = (((_852 - _881) + (_881 * cbMtdParam._m0[22u].z)) * _773) + _881;
    float _895 = ((sqrt(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) - _882) * _773) + _882;
    float _899 = cbMtdParam._m0[22u].x + _676.w;
    float _902 = fma(_895, _255 * NORMAL.x, fma(_894, _262 * TANGENT.x, (_248 * _240) * _893));
    float _905 = fma(_895, _255 * NORMAL.y, fma(_894, _262 * TANGENT.y, (_248 * _241) * _893));
    float _908 = fma(_895, _255 * NORMAL.z, fma(_894, _262 * TANGENT.z, (_248 * _242) * _893));
    float _912 = inversesqrt(dot(vec3(_902, _905, _908), vec3(_902, _905, _908)));
    float _913 = _912 * _902;
    float _914 = _912 * _905;
    float _915 = _912 * _908;
    float _3989 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _916 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4011 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4022 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4033 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _934 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _985 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _975);
    float _986 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _975);
    float _987 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _975);
    float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
    float _992 = _985 * _991;
    float _993 = _986 * _991;
    float _994 = _987 * _991;
    vec4 _999 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1001 = _999.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1155 = sqrt(((_985 * _985) + (_986 * _986)) + (_987 * _987));
        float _1161 = (cbMatDynParam._m0[5u].x * _1155) + cbMatDynParam._m0[5u].y;
        float _4044 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1166 = (cbMatDynParam._m0[5u].z * _1155) + cbMatDynParam._m0[5u].w;
        float _4055 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) - _1162)) + _1162) < ((_1001 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1012 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1013 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1031 = fma(_915, cbSceneParam._m0[5u].z, fma(_914, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _913));
    float _1034 = fma(_915, cbSceneParam._m0[6u].z, fma(_914, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _913));
    float _1037 = fma(_915, cbSceneParam._m0[7u].z, fma(_914, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _913));
    uint _1050 = _287 + 9u;
    uint _1051 = _1050 + uint(cbMatDynParam._m0[0u].w);
    float _1057 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_1051].x;
    float _1058 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_1051].y;
    float _1059 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_1051].z;
    float _4066 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    vec4 _1071 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1012, cbSceneParam._m0[86u].y * _1013));
    float _1075 = ((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * TEXCOORD_5.w) * _1071.x;
    float _1076 = dot(vec3(_913, _914, _915), vec3(_992, _993, _994));
    float _1079 = _1076 * 2.0;
    float _1083 = (_1079 * _913) - _992;
    float _1084 = (_1079 * _914) - _993;
    float _1085 = (_1079 * _915) - _994;
    float _1089 = abs(dot(vec3(_992, _993, _994), vec3(_913, _914, _915)));
    float _4099 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1091 = sqrt(_916);
    float _1104 = exp2((_1091 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1091 * 3.0));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1473;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1198 = fma(_1144, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1136));
        float _1202 = fma(_1144, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1136));
        float _1206 = fma(_1144, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1136));
        float _1231 = _1136 + _913;
        float _1232 = _1140 + _914;
        float _1233 = _1144 + _915;
        float _1243 = fma(_1233, cbModelParam._m0[26u].z, fma(_1232, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1231)) - _1198;
        float _1244 = fma(_1233, cbModelParam._m0[27u].z, fma(_1232, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1231)) - _1202;
        float _1245 = fma(_1233, cbModelParam._m0[28u].z, fma(_1232, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1231)) - _1206;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1262 = ((_1249 * _1243) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1198 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1244) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1202 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1249 * _1245) / cbModelParam._m0[34u].z) + ((((((_1206 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        float _1301 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1267.x + (-0.5));
        float _1303 = _1301 * (_1267.y + (-0.5));
        float _1304 = _1301 * (_1267.z + (-0.5));
        float _1311 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1274.x + (-0.5));
        float _1313 = _1311 * (_1274.y + (-0.5));
        float _1314 = _1311 * (_1274.z + (-0.5));
        float _1321 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1281.x + (-0.5));
        float _1323 = _1321 * (_1281.y + (-0.5));
        float _1324 = _1321 * (_1281.z + (-0.5));
        float _1331 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1288.x + (-0.5));
        float _1333 = _1331 * (_1288.y + (-0.5));
        float _1334 = _1331 * (_1288.z + (-0.5));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = _1302 * 0.5;
        float _1339 = _1312 * 0.5;
        float _1340 = _1322 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1355 = (dot(vec3(_913, _914, _915), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1365 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4147 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1367 + 1.0))) + _1372) * _1335;
        float _1382 = _1303 * 0.5;
        float _1383 = _1313 * 0.5;
        float _1384 = _1323 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_913, _914, _915), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4180 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1409 + 1.0))) + _1414) * _1336;
        float _1424 = _1304 * 0.5;
        float _1425 = _1314 * 0.5;
        float _1426 = _1324 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_913, _914, _915), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _4213 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1451 + 1.0))) + _1456) * _1337;
        _1473 = _1304;
        _1475 = _1303;
        _1476 = _1302;
        _1477 = _1314;
        _1478 = _1313;
        _1479 = _1312;
        _1480 = _1324;
        _1481 = _1323;
        _1482 = _1322;
        _1483 = _1337;
        _1484 = _1336;
        _1485 = _1335;
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
    }
    else
    {
        _1473 = _1474;
        _1475 = _1474;
        _1476 = _1474;
        _1477 = _1474;
        _1478 = _1474;
        _1479 = _1474;
        _1480 = _1474;
        _1481 = _1474;
        _1482 = _1474;
        _1483 = _1474;
        _1484 = _1474;
        _1485 = _1474;
        _1486 = 0.0;
        _1487 = 0.0;
        _1488 = 0.0;
    }
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1515 = fma(_1144, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1136));
        float _1519 = fma(_1144, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1136));
        float _1523 = fma(_1144, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1136));
        float _1546 = _1136 + _913;
        float _1547 = _1140 + _914;
        float _1548 = _1144 + _915;
        float _1558 = fma(_1548, cbModelParam._m0[30u].z, fma(_1547, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1546)) - _1515;
        float _1559 = fma(_1548, cbModelParam._m0[31u].z, fma(_1547, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1546)) - _1519;
        float _1560 = fma(_1548, cbModelParam._m0[32u].z, fma(_1547, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1546)) - _1523;
        float _1564 = inversesqrt(dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560)));
        float _1577 = ((_1564 * _1558) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1515 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1578 = ((_1564 * _1559) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1519 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1579 = ((_1564 * _1560) / cbModelParam._m0[35u].z) + ((((((_1523 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        float _1614 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1581.x + (-0.5));
        float _1616 = _1614 * (_1581.y + (-0.5));
        float _1617 = _1614 * (_1581.z + (-0.5));
        float _1624 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1588.x + (-0.5));
        float _1626 = _1624 * (_1588.y + (-0.5));
        float _1627 = _1624 * (_1588.z + (-0.5));
        float _1634 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1595.x + (-0.5));
        float _1636 = _1634 * (_1595.y + (-0.5));
        float _1637 = _1634 * (_1595.z + (-0.5));
        float _1644 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1602.x + (-0.5));
        float _1646 = _1644 * (_1602.y + (-0.5));
        float _1647 = _1644 * (_1602.z + (-0.5));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = _1615 * 0.5;
        float _1652 = _1625 * 0.5;
        float _1653 = _1635 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_913, _914, _915), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4276 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1678 + 1.0))) + _1683) * _1648;
        float _1693 = _1616 * 0.5;
        float _1694 = _1626 * 0.5;
        float _1695 = _1636 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_913, _914, _915), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4309 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1720 + 1.0))) + _1725) * _1649;
        float _1735 = _1617 * 0.5;
        float _1736 = _1627 * 0.5;
        float _1737 = _1637 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_913, _914, _915), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4342 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1762 + 1.0))) + _1767) * _1650;
        _1784 = _1617;
        _1785 = _1616;
        _1786 = _1615;
        _1787 = _1627;
        _1788 = _1626;
        _1789 = _1625;
        _1790 = _1637;
        _1791 = _1636;
        _1792 = _1635;
        _1793 = _1650;
        _1794 = _1649;
        _1795 = _1648;
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
    }
    else
    {
        _1784 = _1474;
        _1785 = _1474;
        _1786 = _1474;
        _1787 = _1474;
        _1788 = _1474;
        _1789 = _1474;
        _1790 = _1474;
        _1791 = _1474;
        _1792 = _1474;
        _1793 = _1474;
        _1794 = _1474;
        _1795 = _1474;
        _1796 = 0.0;
        _1797 = 0.0;
        _1798 = 0.0;
    }
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1486)) + _1486;
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1487)) + _1487;
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1488)) + _1488;
    float _1831 = fma(_1810, cbSceneParam._m0[89u].z, fma(_1809, cbSceneParam._m0[89u].y, _1808 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1810, cbSceneParam._m0[90u].z, fma(_1809, cbSceneParam._m0[90u].y, _1808 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1810, cbSceneParam._m0[91u].z, fma(_1809, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1808));
    float _1852 = _1083 * 0.5;
    float _1853 = _1084 * 0.5;
    float _1854 = _1085 * 0.5;
    float _1855 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1858 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1861 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1895;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1868 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1473, _1477, _1480, _1483));
        float _1872 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1475, _1478, _1481, _1484));
        float _1876 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1476, _1479, _1482, _1485));
        float _1883 = dot(vec4(cbModelParam._m0[39u]), vec4(_1852, _1853, _1854, 1.0));
        _1895 = dot(vec3(isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1883) ? 0.0 : (isnan(0.0) ? _1883 : max(0.0, _1883))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1895 = 1.0;
    }
    float _1906;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1897 = dot(vec4(cbModelParam._m0[40u]), vec4(_1852, _1853, _1854, 1.0));
        _1906 = dot(vec3(isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1897) ? 0.0 : (isnan(0.0) ? _1897 : max(0.0, _1897))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1906 = 1.0;
    }
    float _1910 = (_1906 * cbModelParam._m0[1u].x) + (_1895 * (1.0 - cbModelParam._m0[1u].x));
    float _1920 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _916);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1920 : min(cbModelParam._m0[25u].z, _1920));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1969 = fma(_1144, cbModelParam._m0[13u].z, fma(_1140, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1136)) + cbModelParam._m0[13u].w;
        float _1973 = fma(_1144, cbModelParam._m0[14u].z, fma(_1140, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1136)) + cbModelParam._m0[14u].w;
        float _1977 = fma(_1144, cbModelParam._m0[15u].z, fma(_1140, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1136)) + cbModelParam._m0[15u].w;
        float _1980 = fma(_1085, cbModelParam._m0[13u].z, fma(_1084, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083));
        float _1983 = fma(_1085, cbModelParam._m0[14u].z, fma(_1084, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083));
        float _1986 = fma(_1085, cbModelParam._m0[15u].z, fma(_1084, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083));
        float _2014;
        if (_1980 > 0.0)
        {
            _2014 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2014 = frontier_phi_17_15_ladder;
        }
        float _2236;
        if (_1983 > 0.0)
        {
            _2236 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2236 = frontier_phi_26_22_ladder;
        }
        float _2482;
        if (_1986 > 0.0)
        {
            _2482 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2482 = frontier_phi_38_33_ladder;
        }
        float _2484 = isnan(_2236) ? _2014 : (isnan(_2014) ? _2236 : min(_2014, _2236));
        float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
        float _2489 = (_2485 * _1980) + _1969;
        float _2490 = (_2485 * _1983) + _1973;
        float _2491 = (_2485 * _1986) + _1977;
        float _2492 = _2485 * 9.9999997473787516355514526367188e-05;
        float _2494 = (-1.0) - _2492;
        float _2496 = _2492 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2491 > _2496) || ((_2491 < _2494) || ((_2490 > _2496) || ((_2490 < _2494) || ((_2489 < _2494) || (_2489 > _2496))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2491, cbModelParam._m0[9u].z, fma(_2490, cbModelParam._m0[9u].y, _2489 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2491, cbModelParam._m0[10u].z, fma(_2490, cbModelParam._m0[10u].y, _2489 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2491, cbModelParam._m0[11u].z, fma(_2490, cbModelParam._m0[11u].y, _2489 * cbModelParam._m0[11u].x))), _1921);
            frontier_phi_16_38_ladder = _2615.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2615.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2615.x * cbModelParam._m0[1u].y;
        }
        _2002 = frontier_phi_16_38_ladder_2;
        _2004 = frontier_phi_16_38_ladder_1;
        _2006 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1990 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1083, _1084, _1085), _1921);
        _2002 = _1990.x * cbModelParam._m0[1u].y;
        _2004 = _1990.y * cbModelParam._m0[1u].y;
        _2006 = _1990.z * cbModelParam._m0[1u].y;
    }
    float _2010 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _916);
    float _2011 = isnan(_2010) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2010 : min(cbModelParam._m0[25u].w, _2010));
    float _2101;
    float _2103;
    float _2105;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2065 = fma(_1144, cbModelParam._m0[21u].z, fma(_1140, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1136)) + cbModelParam._m0[21u].w;
        float _2069 = fma(_1144, cbModelParam._m0[22u].z, fma(_1140, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1136)) + cbModelParam._m0[22u].w;
        float _2073 = fma(_1144, cbModelParam._m0[23u].z, fma(_1140, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1136)) + cbModelParam._m0[23u].w;
        float _2076 = fma(_1085, cbModelParam._m0[21u].z, fma(_1084, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083));
        float _2079 = fma(_1085, cbModelParam._m0[22u].z, fma(_1084, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083));
        float _2082 = fma(_1085, cbModelParam._m0[23u].z, fma(_1084, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083));
        float _2241;
        if (_2076 > 0.0)
        {
            _2241 = abs((1.0 - _2065) / _2076);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2065 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2241 = frontier_phi_28_24_ladder;
        }
        float _2509;
        if (_2079 > 0.0)
        {
            _2509 = abs((1.0 - _2069) / _2079);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2069 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2509 = frontier_phi_40_35_ladder;
        }
        float _2714;
        if (_2082 > 0.0)
        {
            _2714 = abs((1.0 - _2073) / _2082);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2073 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2714 = frontier_phi_49_46_ladder;
        }
        float _2716 = isnan(_2509) ? _2241 : (isnan(_2241) ? _2509 : min(_2241, _2509));
        float _2717 = isnan(_2714) ? _2716 : (isnan(_2716) ? _2714 : min(_2716, _2714));
        float _2721 = (_2717 * _2076) + _2065;
        float _2722 = (_2717 * _2079) + _2069;
        float _2723 = (_2717 * _2082) + _2073;
        float _2724 = _2717 * 9.9999997473787516355514526367188e-05;
        float _2725 = (-1.0) - _2724;
        float _2727 = _2724 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2723 > _2727) || ((_2723 < _2725) || ((_2722 > _2727) || ((_2722 < _2725) || ((_2721 < _2725) || (_2721 > _2727))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2922 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2723, cbModelParam._m0[17u].z, fma(_2722, cbModelParam._m0[17u].y, _2721 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2723, cbModelParam._m0[18u].z, fma(_2722, cbModelParam._m0[18u].y, _2721 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2723, cbModelParam._m0[19u].z, fma(_2722, cbModelParam._m0[19u].y, _2721 * cbModelParam._m0[19u].x))), _2011);
            frontier_phi_25_49_ladder = _2922.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2922.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2922.x * cbModelParam._m0[1u].z;
        }
        _2101 = frontier_phi_25_49_ladder_2;
        _2103 = frontier_phi_25_49_ladder_1;
        _2105 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2085 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1083, _1084, _1085), _2011);
        _2101 = _2085.x * cbModelParam._m0[1u].z;
        _2103 = _2085.y * cbModelParam._m0[1u].z;
        _2105 = _2085.z * cbModelParam._m0[1u].z;
    }
    float _2117 = ((((1.0 - _1104) * ((_1091 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1104 * _1091)) * _1075;
    float _2118 = _2117 * ((cbModelParam._m0[1u].w * (_2101 - _2002)) + _2002);
    float _2119 = _2117 * ((cbModelParam._m0[1u].w * (_2103 - _2004)) + _2004);
    float _2120 = _2117 * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2123 = fma(_2120, cbSceneParam._m0[89u].z, fma(_2119, cbSceneParam._m0[89u].y, _2118 * cbSceneParam._m0[89u].x));
    float _2126 = fma(_2120, cbSceneParam._m0[90u].z, fma(_2119, cbSceneParam._m0[90u].y, _2118 * cbSceneParam._m0[90u].x));
    float _2129 = fma(_2120, cbSceneParam._m0[91u].z, fma(_2119, cbSceneParam._m0[91u].y, _2118 * cbSceneParam._m0[91u].x));
    vec4 _2137 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1012, _1013));
    float _2139 = _2137.w;
    float _2151 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2139);
    float _2152 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2139);
    float _2153 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2139);
    uvec4 _2157 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2159 = _2157.x * 14u;
    uint _2160 = _2159 + 13u;
    float _2167 = _1075 + (-1.0);
    float _2172 = (cbLight._m0[_2160].x * _2167) + 1.0;
    float _2173 = (cbLight._m0[_2160].y * _2167) + 1.0;
    float _2174 = (cbLight._m0[_2160].z * _2167) + 1.0;
    float _2175 = (cbLight._m0[_2160].w * _2167) + 1.0;
    uint _2176 = _2159 + 5u;
    float _2182 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
    uint _2186 = _2159 + 4u;
    float _2195 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
    uint _2199 = _2159 | 1u;
    float _2210 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_913, _914, _915));
    float _2213 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_913, _914, _915));
    float _4478 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _4489 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2218 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * 0.3183098733425140380859375;
    float _2220 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * 0.3183098733425140380859375;
    float _2227 = ((cbLight._m0[_2176].x * _2182) * _2220) + (((cbLight._m0[_2186].x * _2151) * _2195) * _2218);
    float _2228 = ((_2182 * cbLight._m0[_2176].y) * _2220) + (((cbLight._m0[_2186].y * _2152) * _2195) * _2218);
    float _2229 = ((_2182 * cbLight._m0[_2176].z) * _2220) + (((cbLight._m0[_2186].z * _2153) * _2195) * _2218);
    uvec4 _2233 = floatBitsToUint(cbLight._m0[_2159 + 12u]);
    bool _2235 = _2233.x == 0u;
    float _2246;
    float _2248;
    float _2250;
    if (_2235)
    {
        _2246 = _2227;
        _2248 = _2228;
        _2250 = _2229;
    }
    else
    {
        uint _2254 = _2159 + 6u;
        float _2270 = (dot(vec3(cbLight._m0[_2159 + 2u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2271 = _2270 * _2270;
        float _4500 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2272 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2273 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2246 = (((cbLight._m0[_2254].x * 0.3183098733425140380859375) * _2272) * _2273) + _2227;
        _2248 = (((cbLight._m0[_2254].y * 0.3183098733425140380859375) * _2272) * _2273) + _2228;
        _2250 = (((cbLight._m0[_2254].z * 0.3183098733425140380859375) * _2272) * _2273) + _2229;
    }
    bool _2253 = _2233.y == 0u;
    float _2291;
    float _2293;
    float _2295;
    if (_2253)
    {
        _2291 = _2246;
        _2293 = _2248;
        _2295 = _2250;
    }
    else
    {
        uint _2453 = _2159 + 7u;
        float _2469 = (dot(vec3(cbLight._m0[_2159 + 3u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2470 = _2469 * _2469;
        float _4516 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2471 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2472 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2291 = (((cbLight._m0[_2453].x * 0.3183098733425140380859375) * _2471) * _2472) + _2246;
        _2293 = (((cbLight._m0[_2453].y * 0.3183098733425140380859375) * _2471) * _2472) + _2248;
        _2295 = (((cbLight._m0[_2453].z * 0.3183098733425140380859375) * _2471) * _2472) + _2250;
    }
    uint _2298 = _2159 + 8u;
    float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _916) * 0.949999988079071044921875);
    float _2312 = _2311 * _2311;
    float _2313 = cbLight._m0[_2159].x + _992;
    float _2314 = cbLight._m0[_2159].y + _993;
    float _2315 = cbLight._m0[_2159].z + _994;
    float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
    float _2320 = _2319 * _2313;
    float _2321 = _2319 * _2314;
    float _2322 = _2319 * _2315;
    float _2323 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2159].xyz));
    float _4532 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2326 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _4543 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _2327 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2328 = dot(vec3(_913, _914, _915), vec3(_2320, _2321, _2322));
    float _4554 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2332 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2320, _2321, _2322));
    float _4565 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2336 = _2312 * _2312;
    float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
    float _2351 = (exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2352 = 1.0 - _2312;
    float _2363 = (0.5 / (((_2327 * ((_2326 * _2352) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2352) + _2312) * _2326))) * _2326;
    float _4576 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2365 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
    uint _2379 = _2159 + 9u;
    float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _916) * 0.949999988079071044921875);
    float _2391 = _2390 * _2390;
    float _2392 = cbLight._m0[_2199].x + _992;
    float _2393 = cbLight._m0[_2199].y + _993;
    float _2394 = cbLight._m0[_2199].z + _994;
    float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
    float _2399 = _2398 * _2392;
    float _2400 = _2398 * _2393;
    float _2401 = _2398 * _2394;
    float _2402 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2199].xyz));
    float _4587 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2406 = dot(vec3(_913, _914, _915), vec3(_2399, _2400, _2401));
    float _4598 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2410 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2399, _2400, _2401));
    float _4609 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2414 = _2391 * _2391;
    float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
    float _2427 = (exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2428 = 1.0 - _2391;
    float _2438 = (0.5 / (((_2327 * ((_2405 * _2428) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2428) + _2391) * _2405))) * _2405;
    float _4620 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
    float _2450 = (((_2427 * cbLight._m0[_2379].x) * _2440) * _2182) + ((((cbLight._m0[_2298].x * _2151) * _2351) * _2365) * _2195);
    float _2451 = (((_2427 * cbLight._m0[_2379].y) * _2440) * _2182) + ((((cbLight._m0[_2298].y * _2152) * _2351) * _2365) * _2195);
    float _2452 = (((_2427 * cbLight._m0[_2379].z) * _2440) * _2182) + ((((cbLight._m0[_2298].z * _2153) * _2351) * _2365) * _2195);
    float _2514;
    float _2516;
    float _2518;
    if (_2235)
    {
        _2514 = _2450;
        _2516 = _2451;
        _2518 = _2452;
    }
    else
    {
        uint _2520 = _2159 + 2u;
        uint _2524 = _2159 + 10u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _916) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _992;
        float _2541 = cbLight._m0[_2520].y + _993;
        float _2542 = cbLight._m0[_2520].z + _994;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2520].xyz));
        float _4631 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2554 = dot(vec3(_913, _914, _915), vec3(_2547, _2548, _2549));
        float _4642 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4653 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2575 = (exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2576 = 1.0 - _2539;
        float _2586 = (0.5 / (((_2327 * ((_2553 * _2576) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2576) + _2539) * _2553))) * _2553;
        float _4664 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2588 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2589 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2514 = (((_2575 * cbLight._m0[_2524].x) * _2588) * _2589) + _2450;
        _2516 = (((_2575 * cbLight._m0[_2524].y) * _2588) * _2589) + _2451;
        _2518 = (((_2575 * cbLight._m0[_2524].z) * _2588) * _2589) + _2452;
    }
    float _2624;
    float _2626;
    float _2628;
    if (_2253)
    {
        _2624 = _2514;
        _2626 = _2516;
        _2628 = _2518;
    }
    else
    {
        uint _2635 = _2159 + 3u;
        uint _2639 = _2159 + 11u;
        float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2635].w)) * _916) * 0.949999988079071044921875);
        float _2654 = _2653 * _2653;
        float _2655 = cbLight._m0[_2635].x + _992;
        float _2656 = cbLight._m0[_2635].y + _993;
        float _2657 = cbLight._m0[_2635].z + _994;
        float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
        float _2662 = _2661 * _2655;
        float _2663 = _2661 * _2656;
        float _2664 = _2661 * _2657;
        float _2665 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2635].xyz));
        float _4680 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2669 = dot(vec3(_913, _914, _915), vec3(_2662, _2663, _2664));
        float _4691 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2673 = dot(vec3(cbLight._m0[_2635].xyz), vec3(_2662, _2663, _2664));
        float _4702 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2677 = _2654 * _2654;
        float _2681 = ((_2672 * _2672) * (_2677 + (-1.0))) + 1.0;
        float _2690 = (exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2691 = 1.0 - _2654;
        float _2701 = (0.5 / (((_2327 * ((_2668 * _2691) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2691) + _2654) * _2668))) * _2668;
        float _4713 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2703 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2677 / ((_2681 * _2681) * 3.141590118408203125));
        float _2704 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2624 = (((_2690 * cbLight._m0[_2639].x) * _2703) * _2704) + _2514;
        _2626 = (((_2690 * cbLight._m0[_2639].y) * _2703) * _2704) + _2516;
        _2628 = (((_2690 * cbLight._m0[_2639].z) * _2703) * _2704) + _2518;
    }
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    if (_2157.y == 0u)
    {
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2779;
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2779;
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2779;
        uvec4 _2794 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2795 = _2794.x;
        uint _2806 = uint((float(_2794.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1013) / _2795))) + floor(float(uint(cbSceneParam._m0[85u].x * _1012) / _2795)));
        float _2816 = (log2(_2782 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2817 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        uint _2820 = uint(isnan(14.0) ? _2817 : (isnan(_2817) ? 14.0 : min(_2817, 14.0)));
        uvec4 _2825 = texelFetch(g_lightClusterGridBuffer, int(((_2820 << 2u) + (_2806 << 6u)) >> 2u));
        uint _2826 = _2825.x;
        uint _2827 = _2794.z;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        if (((((1u << ((_2827 >> 4u) & 15u)) + 4294967295u) & _2826) == 0u) || ((_2827 & 240u) == 0u))
        {
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
        }
        else
        {
            float _2928;
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            uint _3086 = 0u;
            uint _3095;
            bool _3096;
            for (;;)
            {
                _3095 = texelFetch(g_lightClassification, int((((_2820 << 5u) + (_2806 << 9u)) + (_3086 << 2u)) >> 2u)).x;
                _3096 = _3095 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3096)
                {
                    frontier_phi_66_pred = _3080;
                    frontier_phi_66_pred_1 = _3085;
                    frontier_phi_66_pred_2 = _3084;
                    frontier_phi_66_pred_3 = _3083;
                    frontier_phi_66_pred_4 = _3082;
                    frontier_phi_66_pred_5 = _3081;
                }
                else
                {
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    uint _3231;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3095;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    for (;;)
                    {
                        uint _3235 = uint(findLSB(_3231)) + (_3086 << 5u);
                        uint _3232 = (_3231 + 4294967295u) & _3231;
                        uint _3237 = _3235 * 48u;
                        vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3257 = (_3235 * 48u) + 4u;
                        vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 3u)).x));
                        uint _3276 = (_3235 * 48u) + 8u;
                        vec3 _3287 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x));
                        float _3291 = _3251.x - _2780;
                        float _3292 = _3251.y - _2781;
                        float _3293 = _3251.z - _2782;
                        float _3294 = dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293));
                        float _3297 = inversesqrt(_3294);
                        float _3298 = _3297 * _3291;
                        float _3299 = _3297 * _3292;
                        float _3300 = _3297 * _3293;
                        float _3301 = dot(vec3(_1031, _1034, _1037), vec3(_3298, _3299, _3300));
                        float _3306 = 1.0 - (_3294 * _3251.w);
                        float _4739 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3308 = sqrt(_3294) * _3270.w;
                        float _3311 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                        float _3312 = _3311 * _3311;
                        float _3315 = ((1.0 - _3312) * _3301) + _3312;
                        float _3318 = _3308 * _3308;
                        float _3322 = ((isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))) * _3307) / ((_3318 * 0.699999988079071044921875) + 1.0);
                        float _3326 = (-0.0) - _2780;
                        float _3327 = (-0.0) - _2781;
                        float _3328 = (-0.0) - _2782;
                        float _3332 = inversesqrt(dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328)));
                        float _3333 = _3332 * _3326;
                        float _3334 = _3332 * _3327;
                        float _3335 = _3332 * _3328;
                        float _3343 = exp2(log2(1.0 / ((_3318 * 3.5) + 5.0)) * 0.25);
                        float _3344 = 1.0 - _1091;
                        float _3351 = sqrt(1.0 - ((1.0 - (_3344 * _3344)) * (1.0 - (_3343 * _3343))));
                        float _3352 = _3351 * _3351;
                        float _3353 = _3352 * _3352;
                        float _3354 = _3333 + _3298;
                        float _3355 = _3334 + _3299;
                        float _3356 = _3335 + _3300;
                        float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                        float _3364 = dot(vec3(_1031, _1034, _1037), vec3(_3333, _3334, _3335));
                        float _4755 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3367 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3368 = dot(vec3(_1031, _1034, _1037), vec3(_3360 * _3354, _3360 * _3355, _3360 * _3356));
                        float _4766 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3371 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3375 = ((_3371 * _3371) * (_3353 + (-1.0))) + 1.0;
                        float _3376 = _3311 * _3352;
                        float _3377 = _3376 * _3376;
                        float _3380 = ((1.0 - _3377) * _3301) + _3377;
                        float _4777 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3381 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3382 = 1.0 - _3352;
                        float _3392 = (0.5 / (((_3381 * ((_3367 * _3382) + _3352)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3352) * _3367))) * _3381;
                        float _4788 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3403 = (((_3353 * 3.1415927410125732421875) * (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) / ((_3375 * _3375) * ((_3318 * 2.1991131305694580078125) + 3.141590118408203125))) * _3307;
                        _3155 = (_3322 * _3270.x) + _3228;
                        _3156 = (_3322 * _3270.y) + _3229;
                        _3157 = (_3322 * _3270.z) + _3230;
                        _3152 = (_3403 * _3287.x) + _3225;
                        _3153 = (_3403 * _3287.y) + _3226;
                        _3154 = (_3403 * _3287.z) + _3227;
                        if (_3232 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3232;
                        }
                    }
                    frontier_phi_66_pred = _3152;
                    frontier_phi_66_pred_1 = _3157;
                    frontier_phi_66_pred_2 = _3156;
                    frontier_phi_66_pred_3 = _3155;
                    frontier_phi_66_pred_4 = _3154;
                    frontier_phi_66_pred_5 = _3153;
                }
                _2928 = frontier_phi_66_pred;
                _2938 = frontier_phi_66_pred_1;
                _2936 = frontier_phi_66_pred_2;
                _2934 = frontier_phi_66_pred_3;
                _2932 = frontier_phi_66_pred_4;
                _2930 = frontier_phi_66_pred_5;
                uint _3087 = _3086 + 1u;
                if (_3087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3080 = _2928;
                    _3081 = _2930;
                    _3082 = _2932;
                    _3083 = _2934;
                    _3084 = _2936;
                    _3085 = _2938;
                    _3086 = _3087;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
        }
        uvec4 _2941 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2942 = _2941.z;
        uint _2944 = (_2942 >> 8u) & 15u;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        if (((4294967295u << _2944) & _2826) == 0u)
        {
            _3048 = _2927;
            _3050 = _2929;
            _3052 = _2931;
            _3054 = _2933;
            _3056 = _2935;
            _3058 = _2937;
        }
        else
        {
            float _3073 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
            float _3074 = _3073 * _2780;
            float _3075 = _3073 * _2781;
            float _3076 = _3073 * _2782;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2944 < ((_2942 >> 12u) & 15u))
            {
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3208 = _2927;
                float _3209 = _2929;
                float _3210 = _2931;
                float _3211 = _2933;
                float _3212 = _2935;
                float _3213 = _2937;
                uint _3214 = _2944;
                uint _3223;
                bool _3224;
                for (;;)
                {
                    _3223 = texelFetch(g_lightClassification, int((((_2820 << 5u) + (_2806 << 9u)) + (_3214 << 2u)) >> 2u)).x;
                    _3224 = _3223 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3224)
                    {
                        frontier_phi_77_pred = _3213;
                        frontier_phi_77_pred_1 = _3212;
                        frontier_phi_77_pred_2 = _3211;
                        frontier_phi_77_pred_3 = _3210;
                        frontier_phi_77_pred_4 = _3209;
                        frontier_phi_77_pred_5 = _3208;
                    }
                    else
                    {
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3430 = _3208;
                        float _3431 = _3209;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        float _3434 = _3212;
                        float _3435 = _3213;
                        uint _3436 = _3223;
                        uint _3437;
                        vec4 _3462;
                        float _3463;
                        vec4 _3478;
                        vec3 _3490;
                        vec4 _3505;
                        vec4 _3520;
                        float _3566;
                        bool _3567;
                        for (;;)
                        {
                            uint _3447 = ((_3214 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3436));
                            _3437 = (_3436 + 4294967295u) & _3436;
                            uint _3449 = _3447 * 40u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            _3463 = _3462.w;
                            uint _3465 = (_3447 * 40u) + 4u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3480 = (_3447 * 40u) + 8u;
                            _3490 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x));
                            uint _3492 = (_3447 * 40u) + 16u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3447 * 40u) + 20u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3447 * 40u) + 24u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3541 = (_3447 * 40u) + 28u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3566 = fma(_2782, _3554.z, fma(_2781, _3554.y, _3554.x * _2780)) + _3554.w;
                            _3567 = !((fma(_2782, _3535.z, fma(_2781, _3535.y, _3535.x * _2780)) + _3535.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3567)
                            {
                                float _3594 = _3462.x - _2780;
                                float _3595 = _3462.y - _2781;
                                float _3596 = _3462.z - _2782;
                                float _3597 = dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596));
                                float _3600 = inversesqrt(_3597);
                                float _3601 = _3600 * _3594;
                                float _3602 = _3600 * _3595;
                                float _3603 = _3600 * _3596;
                                float _3607 = 1.0 - (_3597 / (_3463 * _3463));
                                float _4799 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3612 = sqrt(_3597) * _3478.w;
                                float _3614 = 1.39999997615814208984375 / (_3612 + 1.39999997615814208984375);
                                float _3615 = _3614 * _3614;
                                float _3618 = ((1.0 - _3615) * dot(vec3(_3601, _3602, _3603), vec3(_1031, _1034, _1037))) + _3615;
                                float _3621 = _3612 * _3612;
                                float _3625 = (fma(_2782, _3505.z, fma(_2781, _3505.y, _3505.x * _2780)) + _3505.w) / _3566;
                                float _3626 = (fma(_2782, _3520.z, fma(_2781, _3520.y, _3520.x * _2780)) + _3520.w) / _3566;
                                float _3630 = 1.0 - dot(vec2(_3625, _3626), vec2(_3625, _3626));
                                float _4815 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3632 = _3631 * (((isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0))) * _3608) / ((_3621 * 0.699999988079071044921875) + 1.0));
                                float _3644 = exp2(log2(1.0 / ((_3621 * 3.5) + 5.0)) * 0.25);
                                float _3645 = 1.0 - _1091;
                                float _3652 = sqrt(1.0 - ((1.0 - (_3645 * _3645)) * (1.0 - (_3644 * _3644))));
                                float _3653 = _3652 * _3652;
                                float _3654 = _3653 * _3653;
                                float _3655 = _3601 - _3074;
                                float _3656 = _3602 - _3075;
                                float _3657 = _3603 - _3076;
                                float _3661 = inversesqrt(dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657)));
                                float _3665 = dot(vec3(_1031, _1034, _1037), vec3((-0.0) - _3074, (-0.0) - _3075, (-0.0) - _3076));
                                float _4826 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3668 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3669 = dot(vec3(_1031, _1034, _1037), vec3(_3661 * _3655, _3661 * _3656, _3661 * _3657));
                                float _4837 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3676 = ((_3672 * _3672) * (_3654 + (-1.0))) + 1.0;
                                float _3677 = _3614 * _3653;
                                float _3678 = _3677 * _3677;
                                float _3684 = ((1.0 - _3678) * dot(vec3(_1031, _1034, _1037), vec3(_3601, _3602, _3603))) + _3678;
                                float _4848 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3686 = 1.0 - _3653;
                                float _3696 = (0.5 / (((_3685 * ((_3668 * _3686) + _3653)) + 9.9999999392252902907785028219223e-09) + (((_3685 * _3686) + _3653) * _3668))) * _3685;
                                float _4859 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3706 = (_3631 * _3608) * (((_3654 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3676 * _3676) * ((_3621 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3632 * _3478.y;
                                frontier_phi_83_pred_1 = _3632 * _3478.x;
                                frontier_phi_83_pred_2 = _3706 * _3490.z;
                                frontier_phi_83_pred_3 = _3706 * _3490.y;
                                frontier_phi_83_pred_4 = _3706 * _3490.x;
                                frontier_phi_83_pred_5 = _3632 * _3478.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3714 = frontier_phi_83_pred;
                            _3713 = frontier_phi_83_pred_1;
                            _3712 = frontier_phi_83_pred_2;
                            _3711 = frontier_phi_83_pred_3;
                            _3710 = frontier_phi_83_pred_4;
                            _3715 = frontier_phi_83_pred_5;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            _3417 = _3710 + _3430;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            if (_3437 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3437;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3422;
                        frontier_phi_77_pred_1 = _3421;
                        frontier_phi_77_pred_2 = _3420;
                        frontier_phi_77_pred_3 = _3419;
                        frontier_phi_77_pred_4 = _3418;
                        frontier_phi_77_pred_5 = _3417;
                    }
                    _3059 = frontier_phi_77_pred;
                    _3057 = frontier_phi_77_pred_1;
                    _3055 = frontier_phi_77_pred_2;
                    _3053 = frontier_phi_77_pred_3;
                    _3051 = frontier_phi_77_pred_4;
                    _3049 = frontier_phi_77_pred_5;
                    uint _3215 = _3214 + 1u;
                    if (_3215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3208 = _3049;
                        _3209 = _3051;
                        _3210 = _3053;
                        _3211 = _3055;
                        _3212 = _3057;
                        _3213 = _3059;
                        _3214 = _3215;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3053;
                frontier_phi_58_59_ladder_1 = _3059;
                frontier_phi_58_59_ladder_2 = _3057;
                frontier_phi_58_59_ladder_3 = _3055;
                frontier_phi_58_59_ladder_4 = _3051;
                frontier_phi_58_59_ladder_5 = _3049;
            }
            else
            {
                frontier_phi_58_59_ladder = _2931;
                frontier_phi_58_59_ladder_1 = _2937;
                frontier_phi_58_59_ladder_2 = _2935;
                frontier_phi_58_59_ladder_3 = _2933;
                frontier_phi_58_59_ladder_4 = _2929;
                frontier_phi_58_59_ladder_5 = _2927;
            }
            _3048 = frontier_phi_58_59_ladder_5;
            _3050 = frontier_phi_58_59_ladder_4;
            _3052 = frontier_phi_58_59_ladder;
            _3054 = frontier_phi_58_59_ladder_3;
            _3056 = frontier_phi_58_59_ladder_2;
            _3058 = frontier_phi_58_59_ladder_1;
        }
        float _3063 = isnan(1.0) ? _1075 : (isnan(_1075) ? 1.0 : min(_1075, 1.0));
        _2839 = (_3063 * _3054) + _2291;
        _2841 = (_3063 * _3056) + _2293;
        _2843 = (_3063 * _3058) + _2295;
        _2845 = ((_3048 * 0.039999999105930328369140625) * _3063) + _2624;
        _2847 = ((_3050 * 0.039999999105930328369140625) * _3063) + _2626;
        _2849 = ((_3052 * 0.039999999105930328369140625) * _3063) + _2628;
    }
    else
    {
        _2839 = _2291;
        _2841 = _2293;
        _2843 = _2295;
        _2845 = _2624;
        _2847 = _2626;
        _2849 = _2628;
    }
    float _4875 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _4886 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _4897 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _2866 = ((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2839 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1075))) + ((_2845 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1910)) * cbPerFrame._m0[3u].x);
    float _2867 = ((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2841 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1075))) + ((_2847 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1910)) * cbPerFrame._m0[3u].x);
    float _2868 = ((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2843 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1075))) + ((_2849 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1910)) * cbPerFrame._m0[3u].x);
    uint _2869 = _287 + 6u;
    float _2877 = _1012 / cbSceneParam._m0[86u].x;
    float _2878 = _1013 / cbSceneParam._m0[86u].y;
    vec4 _2892 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2877, _2878, (log2((isnan(cbSceneParam._m0[77u].w) ? _934 : (isnan(_934) ? cbSceneParam._m0[77u].w : min(_934, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2894 = _2892.x;
    float _2895 = _2892.y;
    float _2896 = _2892.z;
    float _2897 = _2892.w;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    if (_934 > cbSceneParam._m0[78u].w)
    {
        float _2952 = isnan(_934) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _934 : min(cbSceneParam._m0[80u].w, _934));
        float _2953 = _2952 / _934;
        float _2964 = _2953 * _985;
        float _2965 = _986 * _2953;
        float _2966 = (-0.0) - _2965;
        float _2968 = _2953 * _987;
        float _2970 = (cbSceneParam._m0[77u].w * _2966) / _2952;
        float _2971 = _2970 + cbSceneParam._m0[79u].w;
        float _2972 = cbSceneParam._m0[79u].w - _2965;
        float _2978 = sqrt(((_2964 * _2964) + (_2965 * _2965)) + (_2968 * _2968));
        float _2981 = (1.0 - (cbSceneParam._m0[77u].w / _2952)) * _2978;
        float _2986 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2988 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3165;
        if (abs((_2966 - _2970) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3165 = ((((_2971 > 0.0) ? exp2(_2986 * _2971) : (2.0 - exp2(_2988 * _2971))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2981;
        }
        else
        {
            float _3109 = 1.0 / cbSceneParam._m0[80u].x;
            float _3110 = isnan(_2972) ? _2971 : (isnan(_2971) ? _2972 : max(_2971, _2972));
            float _3111 = isnan(_2972) ? _2971 : (isnan(_2971) ? _2972 : min(_2971, _2972));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            _3165 = ((abs(_2978 / _2966) * cbSceneParam._m0[80u].y) * ((((_3120 - _3121) * 2.0) - ((exp2(_2986 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0)))) - exp2(_2986 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0))))) * _3109)) - ((exp2(_2988 * _3120) - exp2(_2988 * _3121)) * _3109))) + (_2981 * cbSceneParam._m0[80u].z);
        }
        vec4 _3167 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2877, _2878, 1.0), 0.0);
        float _3176 = exp2((_3165 * (-1.44269502162933349609375)) * (1.0 - _3167.w));
        float _3177 = log2(_3176);
        float _3193 = log2(_2897);
        _2990 = (exp2(_3193 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].x)) * _3167.x) / cbSceneParam._m0[78u].x)) + _2894;
        _2992 = (exp2(_3193 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].y)) * _3167.y) / cbSceneParam._m0[78u].y)) + _2895;
        _2994 = (exp2(_3193 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].z)) * _3167.z) / cbSceneParam._m0[78u].z)) + _2896;
        _2996 = _3176 * _2897;
    }
    else
    {
        _2990 = _2894;
        _2992 = _2895;
        _2994 = _2896;
        _2996 = _2897;
    }
    bool _3203;
    vec4 _3006;
    vec4 _3028;
    float _3030;
    float _3034;
    float _3035;
    float _3036;
    float _3037;
    bool _3047;
    for (;;)
    {
        _3006 = cbMatDynParam._m0[0u];
        float _3008 = roundEven(_3006.y);
        bool _3009 = _3008 == 3.0;
        float _3010 = log2(_2996);
        float _3017 = exp2(_3010 * cbSceneParam._m0[78u].x) * _2866;
        float _3018 = exp2(_3010 * cbSceneParam._m0[78u].y) * _2867;
        float _3019 = exp2(_3010 * cbSceneParam._m0[78u].z) * _2868;
        float _3026 = _1001 + (-0.5);
        _3028 = cbMtdParam._m0[1u];
        _3030 = _3028.y * _3026;
        float _3033 = (_3008 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3034 = _3033 * (_3009 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2990)));
        _3035 = _3033 * (_3009 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2992)));
        _3036 = _3033 * (_3009 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2994)));
        _3037 = _3026 * 0.999000012874603271484375;
        _3047 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3047)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3037) < 0.5)
            {
                _3203 = true;
                break;
            }
        }
        uint _3144 = _1050 + uint(_3006.w);
        if ((cbInstanceData._m0[_3144].w < 1.0) && ((cbInstanceData._m0[_3144].w + _3037) < 0.5))
        {
            _3203 = true;
            break;
        }
        if ((_3030 + 1.0) < _3028.x)
        {
            _3203 = true;
            break;
        }
        _3203 = false;
        break;
    }
    float _3408;
    if (_3203)
    {
        discard_state = true;
        _3408 = 0.0;
    }
    else
    {
        _3408 = cbInstanceData._m0[_2869].w;
    }
    SV_Target.x = _3034;
    SV_Target.y = _3035;
    SV_Target.z = _3036;
    SV_Target.w = _3408;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2869].w;
    discard_exit();
}


