#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1533;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3860 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3871 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3882 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _391.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[24u].z) + _443) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3893 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _468 = (_461 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _469 = (_461 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _470 = (_461 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _391.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[24u].z) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3904 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _308) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _309) + cbTextureTilingScale._m0[24u].w));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _580 = _578.x;
    float _590 = dot(vec4(_580, _578.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _602 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _391.z) * 2.0) - ((((_580 - _590) * cbMtdParam._m0[24u].z) + _590) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3915 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _610 = (_603 * ((_561.x * cbMtdParam._m0[14u].x) - _541)) + _541;
    float _611 = (_603 * ((_561.y * cbMtdParam._m0[14u].y) - _542)) + _542;
    float _612 = (_603 * ((_561.z * cbMtdParam._m0[14u].z) - _543)) + _543;
    float _616 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _610;
    float _619 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _611;
    float _622 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _612;
    float _629 = ((_610 - _616) * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) + _616;
    float _630 = ((_611 - _619) * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) + _619;
    float _631 = ((_612 - _622) * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) + _622;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _690 = _688.x;
    float _691 = _688.y;
    float _692 = _688.z;
    float _699 = ((_671.x - _690) * _461) + _690;
    float _700 = ((_671.y - _691) * _461) + _691;
    float _701 = ((_671.z - _692) * _461) + _692;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _724 = ((_713.x - _699) * _534) + _699;
    float _725 = ((_713.y - _700) * _534) + _700;
    float _726 = ((_713.z - _701) * _534) + _701;
    vec4 _738 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _308) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _309) + cbTextureTilingScale._m0[23u].w));
    float _751 = ((_738.z - _726) * _603) + _726;
    float _754 = ((((_738.x - _724) * _603) + _724) * 2.0) + (-1.0);
    float _755 = ((((_738.y - _725) * _603) + _725) * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _3926 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _761 = sqrt(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))));
    vec4 _775 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _800 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _802 = _800.x;
    float _803 = 1.0 - _802;
    float _809 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _812 = ((isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : min(_809, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _821 = (_812 - ((((((_802 - _803) * cbMtdParam._m0[24u].w) + _803) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _812))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3947 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _822 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _829 = (_822 * (cbMtdParam._m0[17u].x - _629)) + _629;
    float _830 = (_822 * (cbMtdParam._m0[17u].y - _630)) + _630;
    float _831 = (_822 * (cbMtdParam._m0[17u].z - _631)) + _631;
    vec4 _843 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _845 = _843.x;
    float _846 = 1.0 - _845;
    float _873 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_845 - _846) * cbMtdParam._m0[24u].y) + _846) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3958 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _874 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _882 = ((((cbMtdParam._m0[10u].x - _829) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _874) + _829;
    float _883 = ((((cbMtdParam._m0[10u].y - _830) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _874) + _830;
    float _884 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _831)) * _874) + _831;
    float _889 = (((_648.z - _751) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _751;
    float _893 = ((_775.z - _889) * cbMtdParam._m0[19u].w) + _889;
    vec4 _907 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _914 = (_907.x * 2.0) + (-1.0);
    float _915 = (_907.y * 2.0) + (-1.0);
    float _916 = dot(vec2(_914, _915), vec2(_914, _915));
    float _3969 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _924 = (_822 * (_907.z - _893)) + _893;
    float _927 = ((cbMtdParam._m0[23u].y - _924) * _874) + _924;
    vec4 _946 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _952 = (_946.x * 2.0) + (-1.0);
    float _953 = (_946.y * 2.0) + (-1.0);
    float _954 = dot(vec2(_952, _953), vec2(_952, _953));
    float _3980 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _968 = (_754 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_648.x * 2.0) + (-1.0)))) + (((_775.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _969 = (_755 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_648.y * 2.0) + (-1.0)))) + (((_775.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _981 = (((_914 - _968) + (cbMtdParam._m0[21u].x * _968)) * _822) + _968;
    float _982 = (((_915 - _969) + (cbMtdParam._m0[21u].x * _969)) * _822) + _969;
    float _983 = (_822 * (sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) - _761)) + _761;
    float _994 = (((_952 - _981) + (_981 * cbMtdParam._m0[22u].z)) * _874) + _981;
    float _995 = (((_953 - _982) + (_982 * cbMtdParam._m0[22u].z)) * _874) + _982;
    float _996 = ((sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) - _983) * _874) + _983;
    float _998 = cbMtdParam._m0[22u].x + _775.w;
    float _1001 = fma(_996, _257 * NORMAL.x, fma(_995, _264 * TANGENT.x, (_250 * _242) * _994));
    float _1004 = fma(_996, _257 * NORMAL.y, fma(_995, _264 * TANGENT.y, (_250 * _243) * _994));
    float _1007 = fma(_996, _257 * NORMAL.z, fma(_995, _264 * TANGENT.z, (_250 * _244) * _994));
    float _1011 = inversesqrt(dot(vec3(_1001, _1004, _1007), vec3(_1001, _1004, _1007)));
    float _1012 = _1011 * _1001;
    float _1013 = _1011 * _1004;
    float _1014 = _1011 * _1007;
    float _3991 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _1015 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _4002 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _4013 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4024 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4035 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _1033 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1084 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1074);
    float _1085 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1074);
    float _1086 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1074);
    float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
    float _1091 = _1084 * _1090;
    float _1092 = _1085 * _1090;
    float _1093 = _1086 * _1090;
    float _1099 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1100 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1118 = fma(_1014, cbSceneParam._m0[5u].z, fma(_1013, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1012));
    float _1121 = fma(_1014, cbSceneParam._m0[6u].z, fma(_1013, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1012));
    float _1124 = fma(_1014, cbSceneParam._m0[7u].z, fma(_1013, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1012));
    uint _1138 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1144 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_1138].x;
    float _1145 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_1138].y;
    float _1146 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_1138].z;
    float _4046 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1147 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1149 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    vec4 _1158 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1099, cbSceneParam._m0[86u].y * _1100));
    float _1162 = ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * TEXCOORD_5.w) * _1158.x;
    float _1163 = dot(vec3(_1012, _1013, _1014), vec3(_1091, _1092, _1093));
    float _1166 = _1163 * 2.0;
    float _1170 = (_1166 * _1012) - _1091;
    float _1171 = (_1166 * _1013) - _1092;
    float _1172 = (_1166 * _1014) - _1093;
    float _1176 = abs(dot(vec3(_1091, _1092, _1093), vec3(_1012, _1013, _1014)));
    float _4079 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _1178 = sqrt(_1015);
    float _1191 = exp2((_1178 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1178 * 3.0));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1227 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1231 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1532;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1257 = fma(_1231, cbModelParam._m0[26u].z, fma(_1227, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1223));
        float _1261 = fma(_1231, cbModelParam._m0[27u].z, fma(_1227, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1223));
        float _1265 = fma(_1231, cbModelParam._m0[28u].z, fma(_1227, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1223));
        float _1290 = _1223 + _1012;
        float _1291 = _1227 + _1013;
        float _1292 = _1231 + _1014;
        float _1302 = fma(_1292, cbModelParam._m0[26u].z, fma(_1291, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1290)) - _1257;
        float _1303 = fma(_1292, cbModelParam._m0[27u].z, fma(_1291, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1290)) - _1261;
        float _1304 = fma(_1292, cbModelParam._m0[28u].z, fma(_1291, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1290)) - _1265;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1321 = ((_1308 * _1302) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1257 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1303) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1261 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1308 * _1304) / cbModelParam._m0[34u].z) + ((((((_1265 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        float _1360 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1326.x + (-0.5));
        float _1362 = _1360 * (_1326.y + (-0.5));
        float _1363 = _1360 * (_1326.z + (-0.5));
        float _1370 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1333.x + (-0.5));
        float _1372 = _1370 * (_1333.y + (-0.5));
        float _1373 = _1370 * (_1333.z + (-0.5));
        float _1380 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1340.x + (-0.5));
        float _1382 = _1380 * (_1340.y + (-0.5));
        float _1383 = _1380 * (_1340.z + (-0.5));
        float _1390 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1347.x + (-0.5));
        float _1392 = _1390 * (_1347.y + (-0.5));
        float _1393 = _1390 * (_1347.z + (-0.5));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = _1361 * 0.5;
        float _1398 = _1371 * 0.5;
        float _1399 = _1381 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1414 = (dot(vec3(_1012, _1013, _1014), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1424 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4127 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1426 + 1.0))) + _1431) * _1394;
        float _1441 = _1362 * 0.5;
        float _1442 = _1372 * 0.5;
        float _1443 = _1382 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_1012, _1013, _1014), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4160 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1468 + 1.0))) + _1473) * _1395;
        float _1483 = _1363 * 0.5;
        float _1484 = _1373 * 0.5;
        float _1485 = _1383 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_1012, _1013, _1014), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4193 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1510 + 1.0))) + _1515) * _1396;
        _1532 = _1363;
        _1534 = _1362;
        _1535 = _1361;
        _1536 = _1373;
        _1537 = _1372;
        _1538 = _1371;
        _1539 = _1383;
        _1540 = _1382;
        _1541 = _1381;
        _1542 = _1396;
        _1543 = _1395;
        _1544 = _1394;
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
    }
    else
    {
        _1532 = _1533;
        _1534 = _1533;
        _1535 = _1533;
        _1536 = _1533;
        _1537 = _1533;
        _1538 = _1533;
        _1539 = _1533;
        _1540 = _1533;
        _1541 = _1533;
        _1542 = _1533;
        _1543 = _1533;
        _1544 = _1533;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1570 = fma(_1231, cbModelParam._m0[30u].z, fma(_1227, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1223));
        float _1574 = fma(_1231, cbModelParam._m0[31u].z, fma(_1227, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1223));
        float _1578 = fma(_1231, cbModelParam._m0[32u].z, fma(_1227, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1223));
        float _1601 = _1223 + _1012;
        float _1602 = _1227 + _1013;
        float _1603 = _1231 + _1014;
        float _1613 = fma(_1603, cbModelParam._m0[30u].z, fma(_1602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1601)) - _1570;
        float _1614 = fma(_1603, cbModelParam._m0[31u].z, fma(_1602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1601)) - _1574;
        float _1615 = fma(_1603, cbModelParam._m0[32u].z, fma(_1602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1601)) - _1578;
        float _1619 = inversesqrt(dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615)));
        float _1632 = ((_1619 * _1613) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1570 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1619 * _1614) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1574 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1619 * _1615) / cbModelParam._m0[35u].z) + ((((((_1578 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        float _1669 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1636.x + (-0.5));
        float _1671 = _1669 * (_1636.y + (-0.5));
        float _1672 = _1669 * (_1636.z + (-0.5));
        float _1679 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1643.x + (-0.5));
        float _1681 = _1679 * (_1643.y + (-0.5));
        float _1682 = _1679 * (_1643.z + (-0.5));
        float _1689 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1650.x + (-0.5));
        float _1691 = _1689 * (_1650.y + (-0.5));
        float _1692 = _1689 * (_1650.z + (-0.5));
        float _1699 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1657.x + (-0.5));
        float _1701 = _1699 * (_1657.y + (-0.5));
        float _1702 = _1699 * (_1657.z + (-0.5));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = _1670 * 0.5;
        float _1707 = _1680 * 0.5;
        float _1708 = _1690 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_1012, _1013, _1014), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4256 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1733 + 1.0))) + _1738) * _1703;
        float _1748 = _1671 * 0.5;
        float _1749 = _1681 * 0.5;
        float _1750 = _1691 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_1012, _1013, _1014), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4289 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1775 + 1.0))) + _1780) * _1704;
        float _1790 = _1672 * 0.5;
        float _1791 = _1682 * 0.5;
        float _1792 = _1692 * 0.5;
        float _1793 = dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792));
        float _1798 = (_1793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1793);
        float _1806 = (dot(vec3(_1012, _1013, _1014), vec3(_1798 * _1790, _1798 * _1791, _1798 * _1792)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1817 = _1816 * 2.0;
        float _1821 = (1.0 - _1816) / (_1816 + 1.0);
        float _4322 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1831 = ((((1.0 - _1822) * (_1817 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1817 + 1.0))) + _1822) * _1705;
        _1839 = _1672;
        _1840 = _1671;
        _1841 = _1670;
        _1842 = _1682;
        _1843 = _1681;
        _1844 = _1680;
        _1845 = _1692;
        _1846 = _1691;
        _1847 = _1690;
        _1848 = _1705;
        _1849 = _1704;
        _1850 = _1703;
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)));
    }
    else
    {
        _1839 = _1533;
        _1840 = _1533;
        _1841 = _1533;
        _1842 = _1533;
        _1843 = _1533;
        _1844 = _1533;
        _1845 = _1533;
        _1846 = _1533;
        _1847 = _1533;
        _1848 = _1533;
        _1849 = _1533;
        _1850 = _1533;
        _1851 = 0.0;
        _1852 = 0.0;
        _1853 = 0.0;
    }
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1545)) + _1545;
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1546)) + _1546;
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1547)) + _1547;
    float _1886 = fma(_1865, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1863 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1865, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1863 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1865, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1863));
    float _1907 = _1170 * 0.5;
    float _1908 = _1171 * 0.5;
    float _1909 = _1172 * 0.5;
    float _1910 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1913 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1916 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1950;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1923 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1532, _1536, _1539, _1542));
        float _1927 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1534, _1537, _1540, _1543));
        float _1931 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1535, _1538, _1541, _1544));
        float _1938 = dot(vec4(cbModelParam._m0[39u]), vec4(_1907, _1908, _1909, 1.0));
        _1950 = dot(vec3(isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1938) ? 0.0 : (isnan(0.0) ? _1938 : max(0.0, _1938))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1950 = 1.0;
    }
    float _1961;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1952 = dot(vec4(cbModelParam._m0[40u]), vec4(_1907, _1908, _1909, 1.0));
        _1961 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1952) ? 0.0 : (isnan(0.0) ? _1952 : max(0.0, _1952))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1961 = 1.0;
    }
    float _1965 = (_1961 * cbModelParam._m0[1u].x) + (_1950 * (1.0 - cbModelParam._m0[1u].x));
    float _1975 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1015);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1975 : min(cbModelParam._m0[25u].z, _1975));
    float _2056;
    float _2058;
    float _2060;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2023 = fma(_1231, cbModelParam._m0[13u].z, fma(_1227, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1223)) + cbModelParam._m0[13u].w;
        float _2027 = fma(_1231, cbModelParam._m0[14u].z, fma(_1227, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1223)) + cbModelParam._m0[14u].w;
        float _2031 = fma(_1231, cbModelParam._m0[15u].z, fma(_1227, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1223)) + cbModelParam._m0[15u].w;
        float _2034 = fma(_1172, cbModelParam._m0[13u].z, fma(_1171, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1170));
        float _2037 = fma(_1172, cbModelParam._m0[14u].z, fma(_1171, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1170));
        float _2040 = fma(_1172, cbModelParam._m0[15u].z, fma(_1171, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1170));
        float _2068;
        if (_2034 > 0.0)
        {
            _2068 = abs((1.0 - _2023) / _2034);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2023 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2068 = frontier_phi_14_12_ladder;
        }
        float _2290;
        if (_2037 > 0.0)
        {
            _2290 = abs((1.0 - _2027) / _2037);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2027 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2290 = frontier_phi_23_19_ladder;
        }
        float _2536;
        if (_2040 > 0.0)
        {
            _2536 = abs((1.0 - _2031) / _2040);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2031 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2536 = frontier_phi_35_30_ladder;
        }
        float _2538 = isnan(_2290) ? _2068 : (isnan(_2068) ? _2290 : min(_2068, _2290));
        float _2539 = isnan(_2536) ? _2538 : (isnan(_2538) ? _2536 : min(_2538, _2536));
        float _2543 = (_2539 * _2034) + _2023;
        float _2544 = (_2539 * _2037) + _2027;
        float _2545 = (_2539 * _2040) + _2031;
        float _2546 = _2539 * 9.9999997473787516355514526367188e-05;
        float _2548 = (-1.0) - _2546;
        float _2550 = _2546 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2545 > _2550) || ((_2545 < _2548) || ((_2544 > _2550) || ((_2544 < _2548) || ((_2543 < _2548) || (_2543 > _2550))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2669 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2545, cbModelParam._m0[9u].z, fma(_2544, cbModelParam._m0[9u].y, _2543 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2545, cbModelParam._m0[10u].z, fma(_2544, cbModelParam._m0[10u].y, _2543 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2545, cbModelParam._m0[11u].z, fma(_2544, cbModelParam._m0[11u].y, _2543 * cbModelParam._m0[11u].x))), _1976);
            frontier_phi_13_35_ladder = _2669.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2669.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2669.x * cbModelParam._m0[1u].y;
        }
        _2056 = frontier_phi_13_35_ladder_2;
        _2058 = frontier_phi_13_35_ladder_1;
        _2060 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1170, _1171, _1172), _1976);
        _2056 = _2044.x * cbModelParam._m0[1u].y;
        _2058 = _2044.y * cbModelParam._m0[1u].y;
        _2060 = _2044.z * cbModelParam._m0[1u].y;
    }
    float _2064 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1015);
    float _2065 = isnan(_2064) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2064 : min(cbModelParam._m0[25u].w, _2064));
    float _2155;
    float _2157;
    float _2159;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2119 = fma(_1231, cbModelParam._m0[21u].z, fma(_1227, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1223)) + cbModelParam._m0[21u].w;
        float _2123 = fma(_1231, cbModelParam._m0[22u].z, fma(_1227, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1223)) + cbModelParam._m0[22u].w;
        float _2127 = fma(_1231, cbModelParam._m0[23u].z, fma(_1227, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1223)) + cbModelParam._m0[23u].w;
        float _2130 = fma(_1172, cbModelParam._m0[21u].z, fma(_1171, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1170));
        float _2133 = fma(_1172, cbModelParam._m0[22u].z, fma(_1171, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1170));
        float _2136 = fma(_1172, cbModelParam._m0[23u].z, fma(_1171, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1170));
        float _2295;
        if (_2130 > 0.0)
        {
            _2295 = abs((1.0 - _2119) / _2130);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2119 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2295 = frontier_phi_25_21_ladder;
        }
        float _2563;
        if (_2133 > 0.0)
        {
            _2563 = abs((1.0 - _2123) / _2133);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2123 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2563 = frontier_phi_37_32_ladder;
        }
        float _2768;
        if (_2136 > 0.0)
        {
            _2768 = abs((1.0 - _2127) / _2136);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2127 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2768 = frontier_phi_46_43_ladder;
        }
        float _2770 = isnan(_2563) ? _2295 : (isnan(_2295) ? _2563 : min(_2295, _2563));
        float _2771 = isnan(_2768) ? _2770 : (isnan(_2770) ? _2768 : min(_2770, _2768));
        float _2775 = (_2771 * _2130) + _2119;
        float _2776 = (_2771 * _2133) + _2123;
        float _2777 = (_2771 * _2136) + _2127;
        float _2778 = _2771 * 9.9999997473787516355514526367188e-05;
        float _2779 = (-1.0) - _2778;
        float _2781 = _2778 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2777 > _2781) || ((_2777 < _2779) || ((_2776 > _2781) || ((_2776 < _2779) || ((_2775 < _2779) || (_2775 > _2781))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2777, cbModelParam._m0[17u].z, fma(_2776, cbModelParam._m0[17u].y, _2775 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2777, cbModelParam._m0[18u].z, fma(_2776, cbModelParam._m0[18u].y, _2775 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2777, cbModelParam._m0[19u].z, fma(_2776, cbModelParam._m0[19u].y, _2775 * cbModelParam._m0[19u].x))), _2065);
            frontier_phi_22_46_ladder = _2976.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2976.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2976.x * cbModelParam._m0[1u].z;
        }
        _2155 = frontier_phi_22_46_ladder_2;
        _2157 = frontier_phi_22_46_ladder_1;
        _2159 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2139 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1170, _1171, _1172), _2065);
        _2155 = _2139.x * cbModelParam._m0[1u].z;
        _2157 = _2139.y * cbModelParam._m0[1u].z;
        _2159 = _2139.z * cbModelParam._m0[1u].z;
    }
    float _2171 = ((((1.0 - _1191) * ((_1178 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1191 * _1178)) * _1162;
    float _2172 = _2171 * ((cbModelParam._m0[1u].w * (_2155 - _2056)) + _2056);
    float _2173 = _2171 * ((cbModelParam._m0[1u].w * (_2157 - _2058)) + _2058);
    float _2174 = _2171 * ((cbModelParam._m0[1u].w * (_2159 - _2060)) + _2060);
    float _2177 = fma(_2174, cbSceneParam._m0[89u].z, fma(_2173, cbSceneParam._m0[89u].y, _2172 * cbSceneParam._m0[89u].x));
    float _2180 = fma(_2174, cbSceneParam._m0[90u].z, fma(_2173, cbSceneParam._m0[90u].y, _2172 * cbSceneParam._m0[90u].x));
    float _2183 = fma(_2174, cbSceneParam._m0[91u].z, fma(_2173, cbSceneParam._m0[91u].y, _2172 * cbSceneParam._m0[91u].x));
    vec4 _2191 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1099, _1100));
    float _2193 = _2191.w;
    float _2205 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2193);
    float _2206 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2193);
    float _2207 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2193);
    uvec4 _2211 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2213 = _2211.x * 14u;
    uint _2214 = _2213 + 13u;
    float _2221 = _1162 + (-1.0);
    float _2226 = (cbLight._m0[_2214].x * _2221) + 1.0;
    float _2227 = (cbLight._m0[_2214].y * _2221) + 1.0;
    float _2228 = (cbLight._m0[_2214].z * _2221) + 1.0;
    float _2229 = (cbLight._m0[_2214].w * _2221) + 1.0;
    uint _2230 = _2213 + 5u;
    float _2236 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2240 = _2213 + 4u;
    float _2249 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2253 = _2213 | 1u;
    float _2264 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_1012, _1013, _1014));
    float _2267 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_1012, _1013, _1014));
    float _4458 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _4469 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2272 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * 0.3183098733425140380859375;
    float _2274 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * 0.3183098733425140380859375;
    float _2281 = ((cbLight._m0[_2230].x * _2236) * _2274) + (((cbLight._m0[_2240].x * _2205) * _2249) * _2272);
    float _2282 = ((_2236 * cbLight._m0[_2230].y) * _2274) + (((cbLight._m0[_2240].y * _2206) * _2249) * _2272);
    float _2283 = ((_2236 * cbLight._m0[_2230].z) * _2274) + (((cbLight._m0[_2240].z * _2207) * _2249) * _2272);
    uvec4 _2287 = floatBitsToUint(cbLight._m0[_2213 + 12u]);
    bool _2289 = _2287.x == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2289)
    {
        _2300 = _2281;
        _2302 = _2282;
        _2304 = _2283;
    }
    else
    {
        uint _2308 = _2213 + 6u;
        float _2324 = (dot(vec3(cbLight._m0[_2213 + 2u].xyz), vec3(_1012, _1013, _1014)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4480 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2327 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2300 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2281;
        _2302 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2282;
        _2304 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2283;
    }
    bool _2307 = _2287.y == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2307)
    {
        _2345 = _2300;
        _2347 = _2302;
        _2349 = _2304;
    }
    else
    {
        uint _2507 = _2213 + 7u;
        float _2523 = (dot(vec3(cbLight._m0[_2213 + 3u].xyz), vec3(_1012, _1013, _1014)) * 0.5) + 0.5;
        float _2524 = _2523 * _2523;
        float _4496 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2525 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2526 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2345 = (((cbLight._m0[_2507].x * 0.3183098733425140380859375) * _2525) * _2526) + _2300;
        _2347 = (((cbLight._m0[_2507].y * 0.3183098733425140380859375) * _2525) * _2526) + _2302;
        _2349 = (((cbLight._m0[_2507].z * 0.3183098733425140380859375) * _2525) * _2526) + _2304;
    }
    uint _2352 = _2213 + 8u;
    float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _1015) * 0.949999988079071044921875);
    float _2366 = _2365 * _2365;
    float _2367 = cbLight._m0[_2213].x + _1091;
    float _2368 = cbLight._m0[_2213].y + _1092;
    float _2369 = cbLight._m0[_2213].z + _1093;
    float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
    float _2374 = _2373 * _2367;
    float _2375 = _2373 * _2368;
    float _2376 = _2373 * _2369;
    float _2377 = dot(vec3(_1012, _1013, _1014), vec3(cbLight._m0[_2213].xyz));
    float _4512 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _4523 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _2381 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2382 = dot(vec3(_1012, _1013, _1014), vec3(_2374, _2375, _2376));
    float _4534 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2374, _2375, _2376));
    float _4545 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2366 * _2366;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2405 = (exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2406 = 1.0 - _2366;
    float _2417 = (0.5 / (((_2381 * ((_2380 * _2406) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2406) + _2366) * _2380))) * _2380;
    float _4556 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2419 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    uint _2433 = _2213 + 9u;
    float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _1015) * 0.949999988079071044921875);
    float _2445 = _2444 * _2444;
    float _2446 = cbLight._m0[_2253].x + _1091;
    float _2447 = cbLight._m0[_2253].y + _1092;
    float _2448 = cbLight._m0[_2253].z + _1093;
    float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
    float _2453 = _2452 * _2446;
    float _2454 = _2452 * _2447;
    float _2455 = _2452 * _2448;
    float _2456 = dot(vec3(_1012, _1013, _1014), vec3(cbLight._m0[_2253].xyz));
    float _4567 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2460 = dot(vec3(_1012, _1013, _1014), vec3(_2453, _2454, _2455));
    float _4578 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2453, _2454, _2455));
    float _4589 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2445 * _2445;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2481 = (exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2482 = 1.0 - _2445;
    float _2492 = (0.5 / (((_2381 * ((_2459 * _2482) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2482) + _2445) * _2459))) * _2459;
    float _4600 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2494 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    float _2504 = (((_2481 * cbLight._m0[_2433].x) * _2494) * _2236) + ((((cbLight._m0[_2352].x * _2205) * _2405) * _2419) * _2249);
    float _2505 = (((_2481 * cbLight._m0[_2433].y) * _2494) * _2236) + ((((cbLight._m0[_2352].y * _2206) * _2405) * _2419) * _2249);
    float _2506 = (((_2481 * cbLight._m0[_2433].z) * _2494) * _2236) + ((((cbLight._m0[_2352].z * _2207) * _2405) * _2419) * _2249);
    float _2568;
    float _2570;
    float _2572;
    if (_2289)
    {
        _2568 = _2504;
        _2570 = _2505;
        _2572 = _2506;
    }
    else
    {
        uint _2574 = _2213 + 2u;
        uint _2578 = _2213 + 10u;
        float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2574].w)) * _1015) * 0.949999988079071044921875);
        float _2593 = _2592 * _2592;
        float _2594 = cbLight._m0[_2574].x + _1091;
        float _2595 = cbLight._m0[_2574].y + _1092;
        float _2596 = cbLight._m0[_2574].z + _1093;
        float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
        float _2601 = _2600 * _2594;
        float _2602 = _2600 * _2595;
        float _2603 = _2600 * _2596;
        float _2604 = dot(vec3(_1012, _1013, _1014), vec3(cbLight._m0[_2574].xyz));
        float _4611 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2608 = dot(vec3(_1012, _1013, _1014), vec3(_2601, _2602, _2603));
        float _4622 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2612 = dot(vec3(cbLight._m0[_2574].xyz), vec3(_2601, _2602, _2603));
        float _4633 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2616 = _2593 * _2593;
        float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
        float _2629 = (exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2630 = 1.0 - _2593;
        float _2640 = (0.5 / (((_2381 * ((_2607 * _2630) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2630) + _2593) * _2607))) * _2607;
        float _4644 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2642 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
        float _2643 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2568 = (((_2629 * cbLight._m0[_2578].x) * _2642) * _2643) + _2504;
        _2570 = (((_2629 * cbLight._m0[_2578].y) * _2642) * _2643) + _2505;
        _2572 = (((_2629 * cbLight._m0[_2578].z) * _2642) * _2643) + _2506;
    }
    float _2678;
    float _2680;
    float _2682;
    if (_2307)
    {
        _2678 = _2568;
        _2680 = _2570;
        _2682 = _2572;
    }
    else
    {
        uint _2689 = _2213 + 3u;
        uint _2693 = _2213 + 11u;
        float _2707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2689].w)) * _1015) * 0.949999988079071044921875);
        float _2708 = _2707 * _2707;
        float _2709 = cbLight._m0[_2689].x + _1091;
        float _2710 = cbLight._m0[_2689].y + _1092;
        float _2711 = cbLight._m0[_2689].z + _1093;
        float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
        float _2716 = _2715 * _2709;
        float _2717 = _2715 * _2710;
        float _2718 = _2715 * _2711;
        float _2719 = dot(vec3(_1012, _1013, _1014), vec3(cbLight._m0[_2689].xyz));
        float _4660 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2722 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2723 = dot(vec3(_1012, _1013, _1014), vec3(_2716, _2717, _2718));
        float _4671 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2727 = dot(vec3(cbLight._m0[_2689].xyz), vec3(_2716, _2717, _2718));
        float _4682 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2731 = _2708 * _2708;
        float _2735 = ((_2726 * _2726) * (_2731 + (-1.0))) + 1.0;
        float _2744 = (exp2(log2(1.0 - (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2745 = 1.0 - _2708;
        float _2755 = (0.5 / (((_2381 * ((_2722 * _2745) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2745) + _2708) * _2722))) * _2722;
        float _4693 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2757 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2731 / ((_2735 * _2735) * 3.141590118408203125));
        float _2758 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2678 = (((_2744 * cbLight._m0[_2693].x) * _2757) * _2758) + _2568;
        _2680 = (((_2744 * cbLight._m0[_2693].y) * _2757) * _2758) + _2570;
        _2682 = (((_2744 * cbLight._m0[_2693].z) * _2757) * _2758) + _2572;
    }
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    if (_2211.y == 0u)
    {
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2833;
        float _2835 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2833;
        float _2836 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2833;
        uvec4 _2848 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2849 = _2848.x;
        uint _2860 = uint((float(_2848.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1100) / _2849))) + floor(float(uint(cbSceneParam._m0[85u].x * _1099) / _2849)));
        float _2870 = (log2(_2836 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2871 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        uint _2874 = uint(isnan(14.0) ? _2871 : (isnan(_2871) ? 14.0 : min(_2871, 14.0)));
        uvec4 _2879 = texelFetch(g_lightClusterGridBuffer, int(((_2874 << 2u) + (_2860 << 6u)) >> 2u));
        uint _2880 = _2879.x;
        uint _2881 = _2848.z;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        if (((((1u << ((_2881 >> 4u) & 15u)) + 4294967295u) & _2880) == 0u) || ((_2881 & 240u) == 0u))
        {
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
        }
        else
        {
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            uint _3132 = 0u;
            uint _3141;
            bool _3142;
            for (;;)
            {
                _3141 = texelFetch(g_lightClassification, int((((_2874 << 5u) + (_2860 << 9u)) + (_3132 << 2u)) >> 2u)).x;
                _3142 = _3141 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3142)
                {
                    frontier_phi_61_pred = _3126;
                    frontier_phi_61_pred_1 = _3131;
                    frontier_phi_61_pred_2 = _3130;
                    frontier_phi_61_pred_3 = _3129;
                    frontier_phi_61_pred_4 = _3128;
                    frontier_phi_61_pred_5 = _3127;
                }
                else
                {
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    uint _3256;
                    _3250 = _3126;
                    _3251 = _3127;
                    _3252 = _3128;
                    _3253 = _3129;
                    _3254 = _3130;
                    _3255 = _3131;
                    _3256 = _3141;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    for (;;)
                    {
                        uint _3260 = uint(findLSB(_3256)) + (_3132 << 5u);
                        uint _3257 = (_3256 + 4294967295u) & _3256;
                        uint _3262 = _3260 * 48u;
                        vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 3u)).x));
                        uint _3282 = (_3260 * 48u) + 4u;
                        vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 3u)).x));
                        uint _3301 = (_3260 * 48u) + 8u;
                        vec3 _3312 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3301)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 2u)).x));
                        float _3316 = _3276.x - _2834;
                        float _3317 = _3276.y - _2835;
                        float _3318 = _3276.z - _2836;
                        float _3319 = dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318));
                        float _3322 = inversesqrt(_3319);
                        float _3323 = _3322 * _3316;
                        float _3324 = _3322 * _3317;
                        float _3325 = _3322 * _3318;
                        float _3326 = dot(vec3(_1118, _1121, _1124), vec3(_3323, _3324, _3325));
                        float _3331 = 1.0 - (_3319 * _3276.w);
                        float _4719 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3332 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3333 = sqrt(_3319) * _3295.w;
                        float _3336 = 1.39999997615814208984375 / (_3333 + 1.39999997615814208984375);
                        float _3337 = _3336 * _3336;
                        float _3340 = ((1.0 - _3337) * _3326) + _3337;
                        float _3343 = _3333 * _3333;
                        float _3347 = ((isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0))) * _3332) / ((_3343 * 0.699999988079071044921875) + 1.0);
                        float _3351 = (-0.0) - _2834;
                        float _3352 = (-0.0) - _2835;
                        float _3353 = (-0.0) - _2836;
                        float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                        float _3358 = _3357 * _3351;
                        float _3359 = _3357 * _3352;
                        float _3360 = _3357 * _3353;
                        float _3368 = exp2(log2(1.0 / ((_3343 * 3.5) + 5.0)) * 0.25);
                        float _3369 = 1.0 - _1178;
                        float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                        float _3377 = _3376 * _3376;
                        float _3378 = _3377 * _3377;
                        float _3379 = _3358 + _3323;
                        float _3380 = _3359 + _3324;
                        float _3381 = _3360 + _3325;
                        float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                        float _3389 = dot(vec3(_1118, _1121, _1124), vec3(_3358, _3359, _3360));
                        float _4735 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3392 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3393 = dot(vec3(_1118, _1121, _1124), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                        float _4746 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3396 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                        float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                        float _3401 = _3336 * _3377;
                        float _3402 = _3401 * _3401;
                        float _3405 = ((1.0 - _3402) * _3326) + _3402;
                        float _4757 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3407 = 1.0 - _3377;
                        float _3417 = (0.5 / (((_3406 * ((_3392 * _3407) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3406 * _3407) + _3377) * _3392))) * _3406;
                        float _4768 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3428 = (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) / ((_3400 * _3400) * ((_3343 * 2.1991131305694580078125) + 3.141590118408203125))) * _3332;
                        _3185 = (_3347 * _3295.x) + _3253;
                        _3186 = (_3347 * _3295.y) + _3254;
                        _3187 = (_3347 * _3295.z) + _3255;
                        _3182 = (_3428 * _3312.x) + _3250;
                        _3183 = (_3428 * _3312.y) + _3251;
                        _3184 = (_3428 * _3312.z) + _3252;
                        if (_3257 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3250 = _3182;
                            _3251 = _3183;
                            _3252 = _3184;
                            _3253 = _3185;
                            _3254 = _3186;
                            _3255 = _3187;
                            _3256 = _3257;
                        }
                    }
                    frontier_phi_61_pred = _3182;
                    frontier_phi_61_pred_1 = _3187;
                    frontier_phi_61_pred_2 = _3186;
                    frontier_phi_61_pred_3 = _3185;
                    frontier_phi_61_pred_4 = _3184;
                    frontier_phi_61_pred_5 = _3183;
                }
                _2982 = frontier_phi_61_pred;
                _2992 = frontier_phi_61_pred_1;
                _2990 = frontier_phi_61_pred_2;
                _2988 = frontier_phi_61_pred_3;
                _2986 = frontier_phi_61_pred_4;
                _2984 = frontier_phi_61_pred_5;
                uint _3133 = _3132 + 1u;
                if (_3133 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3126 = _2982;
                    _3127 = _2984;
                    _3128 = _2986;
                    _3129 = _2988;
                    _3130 = _2990;
                    _3131 = _2992;
                    _3132 = _3133;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
        }
        uvec4 _2995 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2996 = _2995.z;
        uint _2998 = (_2996 >> 8u) & 15u;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        if (((4294967295u << _2998) & _2880) == 0u)
        {
            _3094 = _2981;
            _3096 = _2983;
            _3098 = _2985;
            _3100 = _2987;
            _3102 = _2989;
            _3104 = _2991;
        }
        else
        {
            float _3119 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
            float _3120 = _3119 * _2834;
            float _3121 = _3119 * _2835;
            float _3122 = _3119 * _2836;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2998 < ((_2996 >> 12u) & 15u))
            {
                float _3095;
                float _3097;
                float _3099;
                float _3101;
                float _3103;
                float _3105;
                float _3233 = _2981;
                float _3234 = _2983;
                float _3235 = _2985;
                float _3236 = _2987;
                float _3237 = _2989;
                float _3238 = _2991;
                uint _3239 = _2998;
                uint _3248;
                bool _3249;
                for (;;)
                {
                    _3248 = texelFetch(g_lightClassification, int((((_2874 << 5u) + (_2860 << 9u)) + (_3239 << 2u)) >> 2u)).x;
                    _3249 = _3248 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3249)
                    {
                        frontier_phi_67_pred = _3236;
                        frontier_phi_67_pred_1 = _3237;
                        frontier_phi_67_pred_2 = _3238;
                        frontier_phi_67_pred_3 = _3235;
                        frontier_phi_67_pred_4 = _3234;
                        frontier_phi_67_pred_5 = _3233;
                    }
                    else
                    {
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3446 = _3233;
                        float _3447 = _3234;
                        float _3448 = _3235;
                        float _3449 = _3236;
                        float _3450 = _3237;
                        float _3451 = _3238;
                        uint _3452 = _3248;
                        uint _3453;
                        vec4 _3478;
                        float _3479;
                        vec4 _3494;
                        vec3 _3506;
                        vec4 _3521;
                        vec4 _3536;
                        float _3582;
                        bool _3583;
                        for (;;)
                        {
                            uint _3463 = ((_3239 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3452));
                            _3453 = (_3452 + 4294967295u) & _3452;
                            uint _3465 = _3463 * 40u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            _3479 = _3478.w;
                            uint _3481 = (_3463 * 40u) + 4u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3463 * 40u) + 8u;
                            _3506 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x));
                            uint _3508 = (_3463 * 40u) + 16u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3523 = (_3463 * 40u) + 20u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3463 * 40u) + 24u;
                            vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3557 = (_3463 * 40u) + 28u;
                            vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            _3582 = fma(_2836, _3570.z, fma(_2835, _3570.y, _3570.x * _2834)) + _3570.w;
                            _3583 = !((fma(_2836, _3551.z, fma(_2835, _3551.y, _3551.x * _2834)) + _3551.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3583)
                            {
                                float _3610 = _3478.x - _2834;
                                float _3611 = _3478.y - _2835;
                                float _3612 = _3478.z - _2836;
                                float _3613 = dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612));
                                float _3616 = inversesqrt(_3613);
                                float _3617 = _3616 * _3610;
                                float _3618 = _3616 * _3611;
                                float _3619 = _3616 * _3612;
                                float _3623 = 1.0 - (_3613 / (_3479 * _3479));
                                float _4779 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3628 = sqrt(_3613) * _3494.w;
                                float _3630 = 1.39999997615814208984375 / (_3628 + 1.39999997615814208984375);
                                float _3631 = _3630 * _3630;
                                float _3634 = ((1.0 - _3631) * dot(vec3(_3617, _3618, _3619), vec3(_1118, _1121, _1124))) + _3631;
                                float _3637 = _3628 * _3628;
                                float _3641 = (fma(_2836, _3521.z, fma(_2835, _3521.y, _3521.x * _2834)) + _3521.w) / _3582;
                                float _3642 = (fma(_2836, _3536.z, fma(_2835, _3536.y, _3536.x * _2834)) + _3536.w) / _3582;
                                float _3646 = 1.0 - dot(vec2(_3641, _3642), vec2(_3641, _3642));
                                float _4795 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3648 = _3647 * (((isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0))) * _3624) / ((_3637 * 0.699999988079071044921875) + 1.0));
                                float _3660 = exp2(log2(1.0 / ((_3637 * 3.5) + 5.0)) * 0.25);
                                float _3661 = 1.0 - _1178;
                                float _3668 = sqrt(1.0 - ((1.0 - (_3661 * _3661)) * (1.0 - (_3660 * _3660))));
                                float _3669 = _3668 * _3668;
                                float _3670 = _3669 * _3669;
                                float _3671 = _3617 - _3120;
                                float _3672 = _3618 - _3121;
                                float _3673 = _3619 - _3122;
                                float _3677 = inversesqrt(dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673)));
                                float _3681 = dot(vec3(_1118, _1121, _1124), vec3((-0.0) - _3120, (-0.0) - _3121, (-0.0) - _3122));
                                float _4806 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3684 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3685 = dot(vec3(_1118, _1121, _1124), vec3(_3677 * _3671, _3677 * _3672, _3677 * _3673));
                                float _4817 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3688 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3692 = ((_3688 * _3688) * (_3670 + (-1.0))) + 1.0;
                                float _3693 = _3630 * _3669;
                                float _3694 = _3693 * _3693;
                                float _3700 = ((1.0 - _3694) * dot(vec3(_1118, _1121, _1124), vec3(_3617, _3618, _3619))) + _3694;
                                float _4828 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3702 = 1.0 - _3669;
                                float _3712 = (0.5 / (((_3701 * ((_3684 * _3702) + _3669)) + 9.9999999392252902907785028219223e-09) + (((_3701 * _3702) + _3669) * _3684))) * _3701;
                                float _4839 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3722 = (_3647 * _3624) * (((_3670 * 3.1415927410125732421875) * (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) / ((_3692 * _3692) * ((_3637 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3722 * _3506.x;
                                frontier_phi_73_pred_1 = _3722 * _3506.y;
                                frontier_phi_73_pred_2 = _3648 * _3494.z;
                                frontier_phi_73_pred_3 = _3648 * _3494.y;
                                frontier_phi_73_pred_4 = _3648 * _3494.x;
                                frontier_phi_73_pred_5 = _3722 * _3506.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3726 = frontier_phi_73_pred;
                            _3727 = frontier_phi_73_pred_1;
                            _3731 = frontier_phi_73_pred_2;
                            _3730 = frontier_phi_73_pred_3;
                            _3729 = frontier_phi_73_pred_4;
                            _3728 = frontier_phi_73_pred_5;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3438 = _3731 + _3451;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            if (_3453 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3453;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3436;
                        frontier_phi_67_pred_1 = _3437;
                        frontier_phi_67_pred_2 = _3438;
                        frontier_phi_67_pred_3 = _3435;
                        frontier_phi_67_pred_4 = _3434;
                        frontier_phi_67_pred_5 = _3433;
                    }
                    _3101 = frontier_phi_67_pred;
                    _3103 = frontier_phi_67_pred_1;
                    _3105 = frontier_phi_67_pred_2;
                    _3099 = frontier_phi_67_pred_3;
                    _3097 = frontier_phi_67_pred_4;
                    _3095 = frontier_phi_67_pred_5;
                    uint _3240 = _3239 + 1u;
                    if (_3240 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3233 = _3095;
                        _3234 = _3097;
                        _3235 = _3099;
                        _3236 = _3101;
                        _3237 = _3103;
                        _3238 = _3105;
                        _3239 = _3240;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3103;
                frontier_phi_55_56_ladder_1 = _3105;
                frontier_phi_55_56_ladder_2 = _3101;
                frontier_phi_55_56_ladder_3 = _3099;
                frontier_phi_55_56_ladder_4 = _3097;
                frontier_phi_55_56_ladder_5 = _3095;
            }
            else
            {
                frontier_phi_55_56_ladder = _2989;
                frontier_phi_55_56_ladder_1 = _2991;
                frontier_phi_55_56_ladder_2 = _2987;
                frontier_phi_55_56_ladder_3 = _2985;
                frontier_phi_55_56_ladder_4 = _2983;
                frontier_phi_55_56_ladder_5 = _2981;
            }
            _3094 = frontier_phi_55_56_ladder_5;
            _3096 = frontier_phi_55_56_ladder_4;
            _3098 = frontier_phi_55_56_ladder_3;
            _3100 = frontier_phi_55_56_ladder_2;
            _3102 = frontier_phi_55_56_ladder;
            _3104 = frontier_phi_55_56_ladder_1;
        }
        float _3109 = isnan(1.0) ? _1162 : (isnan(_1162) ? 1.0 : min(_1162, 1.0));
        _2893 = (_3109 * _3100) + _2345;
        _2895 = (_3109 * _3102) + _2347;
        _2897 = (_3109 * _3104) + _2349;
        _2899 = ((_3094 * 0.039999999105930328369140625) * _3109) + _2678;
        _2901 = ((_3096 * 0.039999999105930328369140625) * _3109) + _2680;
        _2903 = ((_3098 * 0.039999999105930328369140625) * _3109) + _2682;
    }
    else
    {
        _2893 = _2345;
        _2895 = _2347;
        _2897 = _2349;
        _2899 = _2678;
        _2901 = _2680;
        _2903 = _2682;
    }
    float _4855 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _4866 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _4877 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    uint _2923 = _289 + 6u;
    float _2931 = _1099 / cbSceneParam._m0[86u].x;
    float _2932 = _1100 / cbSceneParam._m0[86u].y;
    vec4 _2946 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2931, _2932, (log2((isnan(cbSceneParam._m0[77u].w) ? _1033 : (isnan(_1033) ? cbSceneParam._m0[77u].w : min(_1033, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2948 = _2946.x;
    float _2949 = _2946.y;
    float _2950 = _2946.z;
    float _2951 = _2946.w;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    if (_1033 > cbSceneParam._m0[78u].w)
    {
        float _3006 = isnan(_1033) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1033 : min(cbSceneParam._m0[80u].w, _1033));
        float _3007 = _3006 / _1033;
        float _3018 = _3007 * _1084;
        float _3019 = _1085 * _3007;
        float _3020 = (-0.0) - _3019;
        float _3022 = _3007 * _1086;
        float _3024 = (cbSceneParam._m0[77u].w * _3020) / _3006;
        float _3025 = _3024 + cbSceneParam._m0[79u].w;
        float _3026 = cbSceneParam._m0[79u].w - _3019;
        float _3032 = sqrt(((_3018 * _3018) + (_3019 * _3019)) + (_3022 * _3022));
        float _3035 = (1.0 - (cbSceneParam._m0[77u].w / _3006)) * _3032;
        float _3040 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3042 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3195;
        if (abs((_3020 - _3024) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3195 = ((((_3025 > 0.0) ? exp2(_3040 * _3025) : (2.0 - exp2(_3042 * _3025))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3035;
        }
        else
        {
            float _3155 = 1.0 / cbSceneParam._m0[80u].x;
            float _3156 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : max(_3025, _3026));
            float _3157 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : min(_3025, _3026));
            float _3166 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : min(_3156, 0.0));
            float _3167 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : min(_3157, 0.0));
            _3195 = ((abs(_3032 / _3020) * cbSceneParam._m0[80u].y) * ((((_3166 - _3167) * 2.0) - ((exp2(_3040 * (isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0)))) - exp2(_3040 * (isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0))))) * _3155)) - ((exp2(_3042 * _3166) - exp2(_3042 * _3167)) * _3155))) + (_3035 * cbSceneParam._m0[80u].z);
        }
        vec4 _3197 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2931, _2932, 1.0), 0.0);
        float _3206 = exp2((_3195 * (-1.44269502162933349609375)) * (1.0 - _3197.w));
        float _3207 = log2(_3206);
        float _3223 = log2(_2951);
        _3044 = (exp2(_3223 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].x)) * _3197.x) / cbSceneParam._m0[78u].x)) + _2948;
        _3046 = (exp2(_3223 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].y)) * _3197.y) / cbSceneParam._m0[78u].y)) + _2949;
        _3048 = (exp2(_3223 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].z)) * _3197.z) / cbSceneParam._m0[78u].z)) + _2950;
        _3050 = _3206 * _2951;
    }
    else
    {
        _3044 = _2948;
        _3046 = _2949;
        _3048 = _2950;
        _3050 = _2951;
    }
    float _3062 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3063 = _3062 == 3.0;
    float _3064 = log2(_3050);
    float _3071 = exp2(_3064 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2893 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1162))) + ((_2899 + ((isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0))) * _1965)) * cbPerFrame._m0[3u].x));
    float _3072 = exp2(_3064 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2895 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1162))) + ((_2901 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1965)) * cbPerFrame._m0[3u].x));
    float _3073 = exp2(_3064 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2897 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1162))) + ((_2903 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1965)) * cbPerFrame._m0[3u].x));
    float _3082 = (_3062 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3082 * (_3063 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3044)));
    SV_Target.y = _3082 * (_3063 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3046)));
    SV_Target.z = _3082 * (_3063 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3048)));
    SV_Target.w = cbInstanceData._m0[_2923].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2923].w;
}


