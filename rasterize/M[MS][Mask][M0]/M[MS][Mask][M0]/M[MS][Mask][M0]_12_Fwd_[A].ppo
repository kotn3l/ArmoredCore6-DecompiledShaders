#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1188;
float _3549;
float _3550;
float _3551;
float _3552;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _300.x * cbMtdParam._m0[11u].x;
    float _306 = _300.y * cbMtdParam._m0[11u].y;
    float _307 = _300.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _382 = _380.x;
    float _394 = dot(vec4(_382, _380.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _411 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_382 - _394) * cbMtdParam._m0[24u].z) + _394) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3561 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _425 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _276.x) * ((_412 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305);
    float _428 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _276.y) * ((_412 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306);
    float _431 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _276.z) * ((_412 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307);
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _466 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _468 = _466.x;
    float _469 = _466.y;
    float _470 = _466.z;
    float _479 = ((_449.z - _470) * _412) + _470;
    float _482 = ((((_449.x - _468) * _412) + _468) * 2.0) + (-1.0);
    float _484 = ((((_449.y - _469) * _412) + _469) * 2.0) + (-1.0);
    float _485 = dot(vec2(_482, _484), vec2(_482, _484));
    float _3572 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _490 = sqrt(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))));
    vec4 _506 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _533 = _531.x;
    float _534 = 1.0 - _533;
    float _547 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_533 - _534) * cbMtdParam._m0[24u].w) + _534) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3583 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _555 = (_548 * (cbMtdParam._m0[17u].x - _425)) + _425;
    float _556 = (_548 * (cbMtdParam._m0[17u].y - _428)) + _428;
    float _557 = (_548 * (cbMtdParam._m0[17u].z - _431)) + _431;
    float _561 = (cbMtdParam._m0[19u].w * (_506.z - _479)) + _479;
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _581 = (_574.x * 2.0) + (-1.0);
    float _582 = (_574.y * 2.0) + (-1.0);
    float _583 = dot(vec2(_581, _582), vec2(_581, _582));
    float _3594 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _591 = (_548 * (_574.z - _561)) + _561;
    float _594 = (((_506.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _482;
    float _595 = (((_506.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _484;
    float _607 = (((_581 - _594) + (cbMtdParam._m0[21u].x * _594)) * _548) + _594;
    float _608 = (((_582 - _595) + (cbMtdParam._m0[21u].x * _595)) * _548) + _595;
    float _609 = (_548 * (sqrt(1.0 - (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) - _490)) + _490;
    float _613 = cbMtdParam._m0[22u].x + _506.w;
    float _616 = fma(_609, _223 * NORMAL.x, fma(_608, _230 * TANGENT.x, (_216 * _208) * _607));
    float _619 = fma(_609, _223 * NORMAL.y, fma(_608, _230 * TANGENT.y, (_216 * _209) * _607));
    float _622 = fma(_609, _223 * NORMAL.z, fma(_608, _230 * TANGENT.z, (_216 * _210) * _607));
    float _626 = inversesqrt(dot(vec3(_616, _619, _622), vec3(_616, _619, _622)));
    float _627 = _626 * _616;
    float _628 = _626 * _619;
    float _629 = _626 * _622;
    float _3605 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _630 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3627 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3638 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3649 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _699 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _689);
    float _700 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _689);
    float _701 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _689);
    float _705 = inversesqrt(dot(vec3(_699, _700, _701), vec3(_699, _700, _701)));
    float _706 = _699 * _705;
    float _707 = _700 * _705;
    float _708 = _701 * _705;
    vec4 _713 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _715 = _713.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _869 = sqrt(((_699 * _699) + (_700 * _700)) + (_701 * _701));
        float _875 = (cbMatDynParam._m0[5u].x * _869) + cbMatDynParam._m0[5u].y;
        float _3660 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _880 = (cbMatDynParam._m0[5u].z * _869) + cbMatDynParam._m0[5u].w;
        float _3671 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) - _876)) + _876) < ((_715 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _726 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _727 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _745 = fma(_629, cbSceneParam._m0[5u].z, fma(_628, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _627));
    float _748 = fma(_629, cbSceneParam._m0[6u].z, fma(_628, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _627));
    float _751 = fma(_629, cbSceneParam._m0[7u].z, fma(_628, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _627));
    uint _764 = _236 + 9u;
    uint _765 = _764 + uint(cbMatDynParam._m0[0u].w);
    float _771 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_765].x;
    float _772 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * cbInstanceData._m0[_765].y;
    float _773 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * cbInstanceData._m0[_765].z;
    float _3682 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    vec4 _785 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _726, cbSceneParam._m0[86u].y * _727));
    float _789 = ((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * TEXCOORD_5.w) * _785.x;
    float _790 = dot(vec3(_627, _628, _629), vec3(_706, _707, _708));
    float _793 = _790 * 2.0;
    float _797 = (_793 * _627) - _706;
    float _798 = (_793 * _628) - _707;
    float _799 = (_793 * _629) - _708;
    float _803 = abs(dot(vec3(_706, _707, _708), vec3(_627, _628, _629)));
    float _3715 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _805 = sqrt(_630);
    float _818 = exp2((_805 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_805 * 3.0));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1187;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _912 = fma(_858, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _850));
        float _916 = fma(_858, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _850));
        float _920 = fma(_858, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _850));
        float _945 = _850 + _627;
        float _946 = _854 + _628;
        float _947 = _858 + _629;
        float _957 = fma(_947, cbModelParam._m0[26u].z, fma(_946, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945)) - _912;
        float _958 = fma(_947, cbModelParam._m0[27u].z, fma(_946, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945)) - _916;
        float _959 = fma(_947, cbModelParam._m0[28u].z, fma(_946, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945)) - _920;
        float _963 = inversesqrt(dot(vec3(_957, _958, _959), vec3(_957, _958, _959)));
        float _976 = ((_963 * _957) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_912 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_963 * _958) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_916 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_963 * _959) / cbModelParam._m0[34u].z) + ((((((_920 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        float _1015 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_981.x + (-0.5));
        float _1017 = _1015 * (_981.y + (-0.5));
        float _1018 = _1015 * (_981.z + (-0.5));
        float _1025 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_988.x + (-0.5));
        float _1027 = _1025 * (_988.y + (-0.5));
        float _1028 = _1025 * (_988.z + (-0.5));
        float _1035 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_995.x + (-0.5));
        float _1037 = _1035 * (_995.y + (-0.5));
        float _1038 = _1035 * (_995.z + (-0.5));
        float _1045 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1002.x + (-0.5));
        float _1047 = _1045 * (_1002.y + (-0.5));
        float _1048 = _1045 * (_1002.z + (-0.5));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = _1016 * 0.5;
        float _1053 = _1026 * 0.5;
        float _1054 = _1036 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1069 = (dot(vec3(_627, _628, _629), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1079 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3763 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1081 + 1.0))) + _1086) * _1049;
        float _1096 = _1017 * 0.5;
        float _1097 = _1027 * 0.5;
        float _1098 = _1037 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_627, _628, _629), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3796 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1123 + 1.0))) + _1128) * _1050;
        float _1138 = _1018 * 0.5;
        float _1139 = _1028 * 0.5;
        float _1140 = _1038 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_627, _628, _629), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3829 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1165 + 1.0))) + _1170) * _1051;
        _1187 = _1018;
        _1189 = _1017;
        _1190 = _1016;
        _1191 = _1028;
        _1192 = _1027;
        _1193 = _1026;
        _1194 = _1038;
        _1195 = _1037;
        _1196 = _1036;
        _1197 = _1051;
        _1198 = _1050;
        _1199 = _1049;
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1202 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
    }
    else
    {
        _1187 = _1188;
        _1189 = _1188;
        _1190 = _1188;
        _1191 = _1188;
        _1192 = _1188;
        _1193 = _1188;
        _1194 = _1188;
        _1195 = _1188;
        _1196 = _1188;
        _1197 = _1188;
        _1198 = _1188;
        _1199 = _1188;
        _1200 = 0.0;
        _1201 = 0.0;
        _1202 = 0.0;
    }
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1230 = fma(_858, cbModelParam._m0[30u].z, fma(_854, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _850));
        float _1234 = fma(_858, cbModelParam._m0[31u].z, fma(_854, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _850));
        float _1238 = fma(_858, cbModelParam._m0[32u].z, fma(_854, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _850));
        float _1261 = _850 + _627;
        float _1262 = _854 + _628;
        float _1263 = _858 + _629;
        float _1273 = fma(_1263, cbModelParam._m0[30u].z, fma(_1262, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1261)) - _1230;
        float _1274 = fma(_1263, cbModelParam._m0[31u].z, fma(_1262, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1261)) - _1234;
        float _1275 = fma(_1263, cbModelParam._m0[32u].z, fma(_1262, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1261)) - _1238;
        float _1279 = inversesqrt(dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275)));
        float _1292 = ((_1279 * _1273) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1230 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1279 * _1274) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1234 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1279 * _1275) / cbModelParam._m0[35u].z) + ((((((_1238 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        float _1329 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1296.x + (-0.5));
        float _1331 = _1329 * (_1296.y + (-0.5));
        float _1332 = _1329 * (_1296.z + (-0.5));
        float _1339 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1303.x + (-0.5));
        float _1341 = _1339 * (_1303.y + (-0.5));
        float _1342 = _1339 * (_1303.z + (-0.5));
        float _1349 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1310.x + (-0.5));
        float _1351 = _1349 * (_1310.y + (-0.5));
        float _1352 = _1349 * (_1310.z + (-0.5));
        float _1359 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1317.x + (-0.5));
        float _1361 = _1359 * (_1317.y + (-0.5));
        float _1362 = _1359 * (_1317.z + (-0.5));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = _1330 * 0.5;
        float _1367 = _1340 * 0.5;
        float _1368 = _1350 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_627, _628, _629), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _3892 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1393 + 1.0))) + _1398) * _1363;
        float _1408 = _1331 * 0.5;
        float _1409 = _1341 * 0.5;
        float _1410 = _1351 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_627, _628, _629), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _3925 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1435 + 1.0))) + _1440) * _1364;
        float _1450 = _1332 * 0.5;
        float _1451 = _1342 * 0.5;
        float _1452 = _1352 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_627, _628, _629), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _3958 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1477 + 1.0))) + _1482) * _1365;
        _1499 = _1332;
        _1500 = _1331;
        _1501 = _1330;
        _1502 = _1342;
        _1503 = _1341;
        _1504 = _1340;
        _1505 = _1352;
        _1506 = _1351;
        _1507 = _1350;
        _1508 = _1365;
        _1509 = _1364;
        _1510 = _1363;
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
    }
    else
    {
        _1499 = _1188;
        _1500 = _1188;
        _1501 = _1188;
        _1502 = _1188;
        _1503 = _1188;
        _1504 = _1188;
        _1505 = _1188;
        _1506 = _1188;
        _1507 = _1188;
        _1508 = _1188;
        _1509 = _1188;
        _1510 = _1188;
        _1511 = 0.0;
        _1512 = 0.0;
        _1513 = 0.0;
    }
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1200)) + _1200;
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1201)) + _1201;
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1202)) + _1202;
    float _1546 = fma(_1525, cbSceneParam._m0[89u].z, fma(_1524, cbSceneParam._m0[89u].y, _1523 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1525, cbSceneParam._m0[90u].z, fma(_1524, cbSceneParam._m0[90u].y, _1523 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1525, cbSceneParam._m0[91u].z, fma(_1524, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1523));
    float _1567 = _797 * 0.5;
    float _1568 = _798 * 0.5;
    float _1569 = _799 * 0.5;
    float _1570 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1573 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1576 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1610;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1583 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1187, _1191, _1194, _1197));
        float _1587 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1189, _1192, _1195, _1198));
        float _1591 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1190, _1193, _1196, _1199));
        float _1598 = dot(vec4(cbModelParam._m0[39u]), vec4(_1567, _1568, _1569, 1.0));
        _1610 = dot(vec3(isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1598) ? 0.0 : (isnan(0.0) ? _1598 : max(0.0, _1598))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1610 = 1.0;
    }
    float _1621;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1612 = dot(vec4(cbModelParam._m0[40u]), vec4(_1567, _1568, _1569, 1.0));
        _1621 = dot(vec3(isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1612) ? 0.0 : (isnan(0.0) ? _1612 : max(0.0, _1612))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1621 = 1.0;
    }
    float _1625 = (_1621 * cbModelParam._m0[1u].x) + (_1610 * (1.0 - cbModelParam._m0[1u].x));
    float _1635 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _630);
    float _1636 = isnan(_1635) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1635 : min(cbModelParam._m0[25u].z, _1635));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1684 = fma(_858, cbModelParam._m0[13u].z, fma(_854, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _850)) + cbModelParam._m0[13u].w;
        float _1688 = fma(_858, cbModelParam._m0[14u].z, fma(_854, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _850)) + cbModelParam._m0[14u].w;
        float _1692 = fma(_858, cbModelParam._m0[15u].z, fma(_854, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _850)) + cbModelParam._m0[15u].w;
        float _1695 = fma(_799, cbModelParam._m0[13u].z, fma(_798, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _797));
        float _1698 = fma(_799, cbModelParam._m0[14u].z, fma(_798, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _797));
        float _1701 = fma(_799, cbModelParam._m0[15u].z, fma(_798, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _797));
        float _1729;
        if (_1695 > 0.0)
        {
            _1729 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1729 = frontier_phi_17_15_ladder;
        }
        float _1930;
        if (_1698 > 0.0)
        {
            _1930 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1930 = frontier_phi_26_22_ladder;
        }
        float _2173;
        if (_1701 > 0.0)
        {
            _2173 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2173 = frontier_phi_38_33_ladder;
        }
        float _2175 = isnan(_1930) ? _1729 : (isnan(_1729) ? _1930 : min(_1729, _1930));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1695) + _1684;
        float _2181 = (_2176 * _1698) + _1688;
        float _2182 = (_2176 * _1701) + _1692;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2183;
        float _2187 = _2183 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 > _2187) || ((_2181 < _2185) || ((_2180 < _2185) || (_2180 > _2187))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2182, cbModelParam._m0[9u].z, fma(_2181, cbModelParam._m0[9u].y, _2180 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2182, cbModelParam._m0[10u].z, fma(_2181, cbModelParam._m0[10u].y, _2180 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2182, cbModelParam._m0[11u].z, fma(_2181, cbModelParam._m0[11u].y, _2180 * cbModelParam._m0[11u].x))), _1636);
            frontier_phi_16_38_ladder = _2306.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2306.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2306.x * cbModelParam._m0[1u].y;
        }
        _1717 = frontier_phi_16_38_ladder_2;
        _1719 = frontier_phi_16_38_ladder_1;
        _1721 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_797, _798, _799), _1636);
        _1717 = _1705.x * cbModelParam._m0[1u].y;
        _1719 = _1705.y * cbModelParam._m0[1u].y;
        _1721 = _1705.z * cbModelParam._m0[1u].y;
    }
    float _1725 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _630);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1725 : min(cbModelParam._m0[25u].w, _1725));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1780 = fma(_858, cbModelParam._m0[21u].z, fma(_854, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _850)) + cbModelParam._m0[21u].w;
        float _1784 = fma(_858, cbModelParam._m0[22u].z, fma(_854, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _850)) + cbModelParam._m0[22u].w;
        float _1788 = fma(_858, cbModelParam._m0[23u].z, fma(_854, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _850)) + cbModelParam._m0[23u].w;
        float _1791 = fma(_799, cbModelParam._m0[21u].z, fma(_798, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _797));
        float _1794 = fma(_799, cbModelParam._m0[22u].z, fma(_798, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _797));
        float _1797 = fma(_799, cbModelParam._m0[23u].z, fma(_798, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _797));
        float _1935;
        if (_1791 > 0.0)
        {
            _1935 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1935 = frontier_phi_28_24_ladder;
        }
        float _2200;
        if (_1794 > 0.0)
        {
            _2200 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2200 = frontier_phi_40_35_ladder;
        }
        float _2405;
        if (_1797 > 0.0)
        {
            _2405 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2405 = frontier_phi_49_46_ladder;
        }
        float _2407 = isnan(_2200) ? _1935 : (isnan(_1935) ? _2200 : min(_1935, _2200));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1791) + _1780;
        float _2413 = (_2408 * _1794) + _1784;
        float _2414 = (_2408 * _1797) + _1788;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2415;
        float _2418 = _2415 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2414 > _2418) || ((_2414 < _2416) || ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 < _2416) || (_2412 > _2418))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2613 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2414, cbModelParam._m0[17u].z, fma(_2413, cbModelParam._m0[17u].y, _2412 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2414, cbModelParam._m0[18u].z, fma(_2413, cbModelParam._m0[18u].y, _2412 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2414, cbModelParam._m0[19u].z, fma(_2413, cbModelParam._m0[19u].y, _2412 * cbModelParam._m0[19u].x))), _1726);
            frontier_phi_25_49_ladder = _2613.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2613.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2613.x * cbModelParam._m0[1u].z;
        }
        _1816 = frontier_phi_25_49_ladder_2;
        _1818 = frontier_phi_25_49_ladder_1;
        _1820 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_797, _798, _799), _1726);
        _1816 = _1800.x * cbModelParam._m0[1u].z;
        _1818 = _1800.y * cbModelParam._m0[1u].z;
        _1820 = _1800.z * cbModelParam._m0[1u].z;
    }
    float _1832 = ((((1.0 - _818) * ((_805 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_818 * _805)) * _789;
    float _1833 = _1832 * ((cbModelParam._m0[1u].w * (_1816 - _1717)) + _1717);
    float _1834 = _1832 * ((cbModelParam._m0[1u].w * (_1818 - _1719)) + _1719);
    float _1835 = _1832 * ((cbModelParam._m0[1u].w * (_1820 - _1721)) + _1721);
    float _1838 = fma(_1835, cbSceneParam._m0[89u].z, fma(_1834, cbSceneParam._m0[89u].y, _1833 * cbSceneParam._m0[89u].x));
    float _1841 = fma(_1835, cbSceneParam._m0[90u].z, fma(_1834, cbSceneParam._m0[90u].y, _1833 * cbSceneParam._m0[90u].x));
    float _1844 = fma(_1835, cbSceneParam._m0[91u].z, fma(_1834, cbSceneParam._m0[91u].y, _1833 * cbSceneParam._m0[91u].x));
    uvec4 _1854 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1856 = _1854.x * 14u;
    uint _1857 = _1856 + 13u;
    float _1864 = _789 + (-1.0);
    float _1869 = (cbLight._m0[_1857].x * _1864) + 1.0;
    float _1870 = (cbLight._m0[_1857].y * _1864) + 1.0;
    float _1871 = (cbLight._m0[_1857].z * _1864) + 1.0;
    float _1872 = (cbLight._m0[_1857].w * _1864) + 1.0;
    uint _1873 = _1856 + 5u;
    float _1879 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1883 = _1856 + 4u;
    float _1889 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1893 = _1856 | 1u;
    float _1904 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_627, _628, _629));
    float _1907 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_627, _628, _629));
    float _4094 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _4105 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1912 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.3183098733425140380859375;
    float _1914 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.3183098733425140380859375;
    float _1921 = ((cbLight._m0[_1873].x * _1879) * _1914) + ((cbLight._m0[_1883].x * _1889) * _1912);
    float _1922 = ((_1879 * cbLight._m0[_1873].y) * _1914) + ((_1889 * cbLight._m0[_1883].y) * _1912);
    float _1923 = ((_1879 * cbLight._m0[_1873].z) * _1914) + ((_1889 * cbLight._m0[_1883].z) * _1912);
    uvec4 _1927 = floatBitsToUint(cbLight._m0[_1856 + 12u]);
    bool _1929 = _1927.x == 0u;
    float _1940;
    float _1942;
    float _1944;
    if (_1929)
    {
        _1940 = _1921;
        _1942 = _1922;
        _1944 = _1923;
    }
    else
    {
        uint _1948 = _1856 + 6u;
        float _1964 = (dot(vec3(cbLight._m0[_1856 + 2u].xyz), vec3(_627, _628, _629)) * 0.5) + 0.5;
        float _1965 = _1964 * _1964;
        float _4116 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1966 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1967 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _1940 = (((cbLight._m0[_1948].x * 0.3183098733425140380859375) * _1966) * _1967) + _1921;
        _1942 = (((cbLight._m0[_1948].y * 0.3183098733425140380859375) * _1966) * _1967) + _1922;
        _1944 = (((cbLight._m0[_1948].z * 0.3183098733425140380859375) * _1966) * _1967) + _1923;
    }
    bool _1947 = _1927.y == 0u;
    float _1985;
    float _1987;
    float _1989;
    if (_1947)
    {
        _1985 = _1940;
        _1987 = _1942;
        _1989 = _1944;
    }
    else
    {
        uint _2144 = _1856 + 7u;
        float _2160 = (dot(vec3(cbLight._m0[_1856 + 3u].xyz), vec3(_627, _628, _629)) * 0.5) + 0.5;
        float _2161 = _2160 * _2160;
        float _4132 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2162 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2163 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _1985 = (((cbLight._m0[_2144].x * 0.3183098733425140380859375) * _2162) * _2163) + _1940;
        _1987 = (((cbLight._m0[_2144].y * 0.3183098733425140380859375) * _2162) * _2163) + _1942;
        _1989 = (((cbLight._m0[_2144].z * 0.3183098733425140380859375) * _2162) * _2163) + _1944;
    }
    uint _1992 = _1856 + 8u;
    float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _630) * 0.949999988079071044921875);
    float _2006 = _2005 * _2005;
    float _2007 = cbLight._m0[_1856].x + _706;
    float _2008 = cbLight._m0[_1856].y + _707;
    float _2009 = cbLight._m0[_1856].z + _708;
    float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
    float _2014 = _2013 * _2007;
    float _2015 = _2013 * _2008;
    float _2016 = _2013 * _2009;
    float _2017 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_1856].xyz));
    float _4148 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _4159 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _2021 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2022 = dot(vec3(_627, _628, _629), vec3(_2014, _2015, _2016));
    float _4170 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2026 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2014, _2015, _2016));
    float _4181 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2030 = _2006 * _2006;
    float _2034 = ((_2025 * _2025) * (_2030 + (-1.0))) + 1.0;
    float _2045 = (exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2046 = 1.0 - _2006;
    float _2057 = (0.5 / (((_2021 * ((_2020 * _2046) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2046) + _2006) * _2020))) * _2020;
    float _4192 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2059 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2030 / ((_2034 * _2034) * 3.141590118408203125));
    uint _2070 = _1856 + 9u;
    float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _630) * 0.949999988079071044921875);
    float _2082 = _2081 * _2081;
    float _2083 = cbLight._m0[_1893].x + _706;
    float _2084 = cbLight._m0[_1893].y + _707;
    float _2085 = cbLight._m0[_1893].z + _708;
    float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
    float _2090 = _2089 * _2083;
    float _2091 = _2089 * _2084;
    float _2092 = _2089 * _2085;
    float _2093 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_1893].xyz));
    float _4203 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2097 = dot(vec3(_627, _628, _629), vec3(_2090, _2091, _2092));
    float _4214 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2101 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2090, _2091, _2092));
    float _4225 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2105 = _2082 * _2082;
    float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
    float _2118 = (exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2119 = 1.0 - _2082;
    float _2129 = (0.5 / (((_2021 * ((_2096 * _2119) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2119) + _2082) * _2096))) * _2096;
    float _4236 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
    float _2141 = (((_2118 * cbLight._m0[_2070].x) * _2131) * _1879) + (((_2045 * cbLight._m0[_1992].x) * _2059) * _1889);
    float _2142 = (((_2118 * cbLight._m0[_2070].y) * _2131) * _1879) + (((_2045 * cbLight._m0[_1992].y) * _2059) * _1889);
    float _2143 = (((_2118 * cbLight._m0[_2070].z) * _2131) * _1879) + (((_2045 * cbLight._m0[_1992].z) * _2059) * _1889);
    float _2205;
    float _2207;
    float _2209;
    if (_1929)
    {
        _2205 = _2141;
        _2207 = _2142;
        _2209 = _2143;
    }
    else
    {
        uint _2211 = _1856 + 2u;
        uint _2215 = _1856 + 10u;
        float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _630) * 0.949999988079071044921875);
        float _2230 = _2229 * _2229;
        float _2231 = cbLight._m0[_2211].x + _706;
        float _2232 = cbLight._m0[_2211].y + _707;
        float _2233 = cbLight._m0[_2211].z + _708;
        float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
        float _2238 = _2237 * _2231;
        float _2239 = _2237 * _2232;
        float _2240 = _2237 * _2233;
        float _2241 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2211].xyz));
        float _4247 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2245 = dot(vec3(_627, _628, _629), vec3(_2238, _2239, _2240));
        float _4258 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2249 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2238, _2239, _2240));
        float _4269 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2253 = _2230 * _2230;
        float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
        float _2266 = (exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2267 = 1.0 - _2230;
        float _2277 = (0.5 / (((_2021 * ((_2244 * _2267) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2267) + _2230) * _2244))) * _2244;
        float _4280 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2279 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
        float _2280 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2205 = (((_2266 * cbLight._m0[_2215].x) * _2279) * _2280) + _2141;
        _2207 = (((_2266 * cbLight._m0[_2215].y) * _2279) * _2280) + _2142;
        _2209 = (((_2266 * cbLight._m0[_2215].z) * _2279) * _2280) + _2143;
    }
    float _2315;
    float _2317;
    float _2319;
    if (_1947)
    {
        _2315 = _2205;
        _2317 = _2207;
        _2319 = _2209;
    }
    else
    {
        uint _2326 = _1856 + 3u;
        uint _2330 = _1856 + 11u;
        float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _630) * 0.949999988079071044921875);
        float _2345 = _2344 * _2344;
        float _2346 = cbLight._m0[_2326].x + _706;
        float _2347 = cbLight._m0[_2326].y + _707;
        float _2348 = cbLight._m0[_2326].z + _708;
        float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
        float _2353 = _2352 * _2346;
        float _2354 = _2352 * _2347;
        float _2355 = _2352 * _2348;
        float _2356 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2326].xyz));
        float _4296 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2360 = dot(vec3(_627, _628, _629), vec3(_2353, _2354, _2355));
        float _4307 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2364 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2353, _2354, _2355));
        float _4318 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2368 = _2345 * _2345;
        float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
        float _2381 = (exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2382 = 1.0 - _2345;
        float _2392 = (0.5 / (((_2021 * ((_2359 * _2382) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2382) + _2345) * _2359))) * _2359;
        float _4329 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2315 = (((_2381 * cbLight._m0[_2330].x) * _2394) * _2395) + _2205;
        _2317 = (((_2381 * cbLight._m0[_2330].y) * _2394) * _2395) + _2207;
        _2319 = (((_2381 * cbLight._m0[_2330].z) * _2394) * _2395) + _2209;
    }
    float _2530;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_1854.y == 0u)
    {
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2470;
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2470;
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2470;
        uvec4 _2485 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2486 = _2485.x;
        uint _2497 = uint((float(_2485.y) * floor(float(uint(cbSceneParam._m0[85u].y * _727) / _2486))) + floor(float(uint(cbSceneParam._m0[85u].x * _726) / _2486)));
        float _2507 = (log2(_2473 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2508 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        uint _2511 = uint(isnan(14.0) ? _2508 : (isnan(_2508) ? 14.0 : min(_2508, 14.0)));
        uvec4 _2516 = texelFetch(g_lightClusterGridBuffer, int(((_2511 << 2u) + (_2497 << 6u)) >> 2u));
        uint _2517 = _2516.x;
        uint _2518 = _2485.z;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        if (((((1u << ((_2518 >> 4u) & 15u)) + 4294967295u) & _2517) == 0u) || ((_2518 & 240u) == 0u))
        {
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
        }
        else
        {
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            uint _2777 = 0u;
            uint _2786;
            bool _2787;
            for (;;)
            {
                _2786 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                _2787 = _2786 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2787)
                {
                    frontier_phi_66_pred = _2771;
                    frontier_phi_66_pred_1 = _2776;
                    frontier_phi_66_pred_2 = _2775;
                    frontier_phi_66_pred_3 = _2774;
                    frontier_phi_66_pred_4 = _2773;
                    frontier_phi_66_pred_5 = _2772;
                }
                else
                {
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    uint _2922;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2775;
                    _2921 = _2776;
                    _2922 = _2786;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    for (;;)
                    {
                        uint _2926 = uint(findLSB(_2922)) + (_2777 << 5u);
                        uint _2923 = (_2922 + 4294967295u) & _2922;
                        uint _2928 = _2926 * 48u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2948 = (_2926 * 48u) + 4u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2967 = (_2926 * 48u) + 8u;
                        vec3 _2978 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x));
                        float _2982 = _2942.x - _2471;
                        float _2983 = _2942.y - _2472;
                        float _2984 = _2942.z - _2473;
                        float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                        float _2988 = inversesqrt(_2985);
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2992 = dot(vec3(_745, _748, _751), vec3(_2989, _2990, _2991));
                        float _2997 = 1.0 - (_2985 * _2942.w);
                        float _4355 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _2998 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _2999 = sqrt(_2985) * _2961.w;
                        float _3002 = 1.39999997615814208984375 / (_2999 + 1.39999997615814208984375);
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2992) + _3003;
                        float _3009 = _2999 * _2999;
                        float _3013 = ((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2998) / ((_3009 * 0.699999988079071044921875) + 1.0);
                        float _3017 = (-0.0) - _2471;
                        float _3018 = (-0.0) - _2472;
                        float _3019 = (-0.0) - _2473;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3024 = _3023 * _3017;
                        float _3025 = _3023 * _3018;
                        float _3026 = _3023 * _3019;
                        float _3034 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                        float _3035 = 1.0 - _805;
                        float _3042 = sqrt(1.0 - ((1.0 - (_3035 * _3035)) * (1.0 - (_3034 * _3034))));
                        float _3043 = _3042 * _3042;
                        float _3044 = _3043 * _3043;
                        float _3045 = _3024 + _2989;
                        float _3046 = _3025 + _2990;
                        float _3047 = _3026 + _2991;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3055 = dot(vec3(_745, _748, _751), vec3(_3024, _3025, _3026));
                        float _4371 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3058 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3059 = dot(vec3(_745, _748, _751), vec3(_3051 * _3045, _3051 * _3046, _3051 * _3047));
                        float _4382 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                        float _3066 = ((_3062 * _3062) * (_3044 + (-1.0))) + 1.0;
                        float _3067 = _3002 * _3043;
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _2992) + _3068;
                        float _4393 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3073 = 1.0 - _3043;
                        float _3083 = (0.5 / (((_3072 * ((_3058 * _3073) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_3072 * _3073) + _3043) * _3058))) * _3072;
                        float _4404 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3094 = (((_3044 * 3.1415927410125732421875) * (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) / ((_3066 * _3066) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125))) * _2998;
                        _2846 = (_3013 * _2961.x) + _2919;
                        _2847 = (_3013 * _2961.y) + _2920;
                        _2848 = (_3013 * _2961.z) + _2921;
                        _2843 = (_3094 * _2978.x) + _2916;
                        _2844 = (_3094 * _2978.y) + _2917;
                        _2845 = (_3094 * _2978.z) + _2918;
                        if (_2923 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2847;
                            _2921 = _2848;
                            _2922 = _2923;
                        }
                    }
                    frontier_phi_66_pred = _2843;
                    frontier_phi_66_pred_1 = _2848;
                    frontier_phi_66_pred_2 = _2847;
                    frontier_phi_66_pred_3 = _2846;
                    frontier_phi_66_pred_4 = _2845;
                    frontier_phi_66_pred_5 = _2844;
                }
                _2619 = frontier_phi_66_pred;
                _2629 = frontier_phi_66_pred_1;
                _2627 = frontier_phi_66_pred_2;
                _2625 = frontier_phi_66_pred_3;
                _2623 = frontier_phi_66_pred_4;
                _2621 = frontier_phi_66_pred_5;
                uint _2778 = _2777 + 1u;
                if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2771 = _2619;
                    _2772 = _2621;
                    _2773 = _2623;
                    _2774 = _2625;
                    _2775 = _2627;
                    _2776 = _2629;
                    _2777 = _2778;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
        }
        uvec4 _2632 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2633 = _2632.z;
        uint _2635 = (_2633 >> 8u) & 15u;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((4294967295u << _2635) & _2517) == 0u)
        {
            _2739 = _2618;
            _2741 = _2620;
            _2743 = _2622;
            _2745 = _2624;
            _2747 = _2626;
            _2749 = _2628;
        }
        else
        {
            float _2764 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
            float _2765 = _2764 * _2471;
            float _2766 = _2764 * _2472;
            float _2767 = _2764 * _2473;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2635 < ((_2633 >> 12u) & 15u))
            {
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2899 = _2618;
                float _2900 = _2620;
                float _2901 = _2622;
                float _2902 = _2624;
                float _2903 = _2626;
                float _2904 = _2628;
                uint _2905 = _2635;
                uint _2914;
                bool _2915;
                for (;;)
                {
                    _2914 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                    _2915 = _2914 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2915)
                    {
                        frontier_phi_77_pred = _2904;
                        frontier_phi_77_pred_1 = _2903;
                        frontier_phi_77_pred_2 = _2902;
                        frontier_phi_77_pred_3 = _2901;
                        frontier_phi_77_pred_4 = _2900;
                        frontier_phi_77_pred_5 = _2899;
                    }
                    else
                    {
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3121 = _2899;
                        float _3122 = _2900;
                        float _3123 = _2901;
                        float _3124 = _2902;
                        float _3125 = _2903;
                        float _3126 = _2904;
                        uint _3127 = _2914;
                        uint _3128;
                        vec4 _3153;
                        float _3154;
                        vec4 _3169;
                        vec3 _3181;
                        vec4 _3196;
                        vec4 _3212;
                        float _3258;
                        bool _3259;
                        for (;;)
                        {
                            uint _3138 = ((_2905 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3127));
                            _3128 = (_3127 + 4294967295u) & _3127;
                            uint _3140 = _3138 * 40u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3154 = _3153.w;
                            uint _3156 = (_3138 * 40u) + 4u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3138 * 40u) + 8u;
                            _3181 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x));
                            uint _3183 = (_3138 * 40u) + 16u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3199 = (_3138 * 40u) + 20u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3214 = (_3138 * 40u) + 24u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3233 = (_3138 * 40u) + 28u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3258 = fma(_2473, _3246.z, fma(_2472, _3246.y, _3246.x * _2471)) + _3246.w;
                            _3259 = !((fma(_2473, _3227.z, fma(_2472, _3227.y, _3227.x * _2471)) + _3227.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3259)
                            {
                                float _3286 = _3153.x - _2471;
                                float _3287 = _3153.y - _2472;
                                float _3288 = _3153.z - _2473;
                                float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                                float _3292 = inversesqrt(_3289);
                                float _3293 = _3292 * _3286;
                                float _3294 = _3292 * _3287;
                                float _3295 = _3292 * _3288;
                                float _3299 = 1.0 - (_3289 / (_3154 * _3154));
                                float _4415 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3304 = sqrt(_3289) * _3169.w;
                                float _3306 = 1.39999997615814208984375 / (_3304 + 1.39999997615814208984375);
                                float _3307 = _3306 * _3306;
                                float _3310 = ((1.0 - _3307) * dot(vec3(_3293, _3294, _3295), vec3(_745, _748, _751))) + _3307;
                                float _3313 = _3304 * _3304;
                                float _3317 = (fma(_2473, _3196.z, fma(_2472, _3196.y, _3196.x * _2471)) + _3196.w) / _3258;
                                float _3318 = (fma(_2473, _3212.z, fma(_2472, _3212.y, _3212.x * _2471)) + _3212.w) / _3258;
                                float _3322 = 1.0 - dot(vec2(_3317, _3318), vec2(_3317, _3318));
                                float _4431 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3324 = _3323 * (((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3300) / ((_3313 * 0.699999988079071044921875) + 1.0));
                                float _3336 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                                float _3337 = 1.0 - _805;
                                float _3344 = sqrt(1.0 - ((1.0 - (_3337 * _3337)) * (1.0 - (_3336 * _3336))));
                                float _3345 = _3344 * _3344;
                                float _3346 = _3345 * _3345;
                                float _3347 = _3293 - _2765;
                                float _3348 = _3294 - _2766;
                                float _3349 = _3295 - _2767;
                                float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                                float _3357 = dot(vec3(_745, _748, _751), vec3((-0.0) - _2765, (-0.0) - _2766, (-0.0) - _2767));
                                float _4442 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                                float _3361 = dot(vec3(_745, _748, _751), vec3(_3353 * _3347, _3353 * _3348, _3353 * _3349));
                                float _4453 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3368 = ((_3364 * _3364) * (_3346 + (-1.0))) + 1.0;
                                float _3369 = _3306 * _3345;
                                float _3370 = _3369 * _3369;
                                float _3376 = ((1.0 - _3370) * dot(vec3(_745, _748, _751), vec3(_3293, _3294, _3295))) + _3370;
                                float _4464 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3378 = 1.0 - _3345;
                                float _3388 = (0.5 / (((_3377 * ((_3360 * _3378) + _3345)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3345) * _3360))) * _3377;
                                float _4475 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3398 = (_3323 * _3300) * (((_3346 * 3.1415927410125732421875) * (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) / ((_3368 * _3368) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3324 * _3169.y;
                                frontier_phi_83_pred_1 = _3324 * _3169.x;
                                frontier_phi_83_pred_2 = _3398 * _3181.z;
                                frontier_phi_83_pred_3 = _3398 * _3181.y;
                                frontier_phi_83_pred_4 = _3398 * _3181.x;
                                frontier_phi_83_pred_5 = _3324 * _3169.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3406 = frontier_phi_83_pred;
                            _3405 = frontier_phi_83_pred_1;
                            _3404 = frontier_phi_83_pred_2;
                            _3403 = frontier_phi_83_pred_3;
                            _3402 = frontier_phi_83_pred_4;
                            _3407 = frontier_phi_83_pred_5;
                            _3111 = _3405 + _3124;
                            _3112 = _3406 + _3125;
                            _3113 = _3407 + _3126;
                            _3108 = _3402 + _3121;
                            _3109 = _3403 + _3122;
                            _3110 = _3404 + _3123;
                            if (_3128 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3128;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3113;
                        frontier_phi_77_pred_1 = _3112;
                        frontier_phi_77_pred_2 = _3111;
                        frontier_phi_77_pred_3 = _3110;
                        frontier_phi_77_pred_4 = _3109;
                        frontier_phi_77_pred_5 = _3108;
                    }
                    _2750 = frontier_phi_77_pred;
                    _2748 = frontier_phi_77_pred_1;
                    _2746 = frontier_phi_77_pred_2;
                    _2744 = frontier_phi_77_pred_3;
                    _2742 = frontier_phi_77_pred_4;
                    _2740 = frontier_phi_77_pred_5;
                    uint _2906 = _2905 + 1u;
                    if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2899 = _2740;
                        _2900 = _2742;
                        _2901 = _2744;
                        _2902 = _2746;
                        _2903 = _2748;
                        _2904 = _2750;
                        _2905 = _2906;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2744;
                frontier_phi_58_59_ladder_1 = _2750;
                frontier_phi_58_59_ladder_2 = _2748;
                frontier_phi_58_59_ladder_3 = _2746;
                frontier_phi_58_59_ladder_4 = _2742;
                frontier_phi_58_59_ladder_5 = _2740;
            }
            else
            {
                frontier_phi_58_59_ladder = _2622;
                frontier_phi_58_59_ladder_1 = _2628;
                frontier_phi_58_59_ladder_2 = _2626;
                frontier_phi_58_59_ladder_3 = _2624;
                frontier_phi_58_59_ladder_4 = _2620;
                frontier_phi_58_59_ladder_5 = _2618;
            }
            _2739 = frontier_phi_58_59_ladder_5;
            _2741 = frontier_phi_58_59_ladder_4;
            _2743 = frontier_phi_58_59_ladder;
            _2745 = frontier_phi_58_59_ladder_3;
            _2747 = frontier_phi_58_59_ladder_2;
            _2749 = frontier_phi_58_59_ladder_1;
        }
        float _2754 = isnan(1.0) ? _789 : (isnan(_789) ? 1.0 : min(_789, 1.0));
        _2530 = (_2754 * _2745) + _1985;
        _2532 = (_2754 * _2747) + _1987;
        _2534 = (_2754 * _2749) + _1989;
        _2536 = ((_2739 * 0.039999999105930328369140625) * _2754) + _2315;
        _2538 = ((_2741 * 0.039999999105930328369140625) * _2754) + _2317;
        _2540 = ((_2743 * 0.039999999105930328369140625) * _2754) + _2319;
    }
    else
    {
        _2530 = _1985;
        _2532 = _1987;
        _2534 = _1989;
        _2536 = _2315;
        _2538 = _2317;
        _2540 = _2319;
    }
    float _4491 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4502 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4513 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _2557 = ((isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2530 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _789))) + ((_2536 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1625)) * cbPerFrame._m0[3u].x);
    float _2558 = ((isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2532 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _789))) + ((_2538 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1625)) * cbPerFrame._m0[3u].x);
    float _2559 = ((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2534 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _789))) + ((_2540 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1625)) * cbPerFrame._m0[3u].x);
    uint _2560 = _236 + 6u;
    float _2568 = _726 / cbSceneParam._m0[86u].x;
    float _2569 = _727 / cbSceneParam._m0[86u].y;
    vec4 _2583 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2568, _2569, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2585 = _2583.x;
    float _2586 = _2583.y;
    float _2587 = _2583.z;
    float _2588 = _2583.w;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _2643 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _2644 = _2643 / _648;
        float _2655 = _2644 * _699;
        float _2656 = _700 * _2644;
        float _2657 = (-0.0) - _2656;
        float _2659 = _2644 * _701;
        float _2661 = (cbSceneParam._m0[77u].w * _2657) / _2643;
        float _2662 = _2661 + cbSceneParam._m0[79u].w;
        float _2663 = cbSceneParam._m0[79u].w - _2656;
        float _2669 = sqrt(((_2655 * _2655) + (_2656 * _2656)) + (_2659 * _2659));
        float _2672 = (1.0 - (cbSceneParam._m0[77u].w / _2643)) * _2669;
        float _2677 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2679 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2856;
        if (abs((_2657 - _2661) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2856 = ((((_2662 > 0.0) ? exp2(_2677 * _2662) : (2.0 - exp2(_2679 * _2662))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2672;
        }
        else
        {
            float _2800 = 1.0 / cbSceneParam._m0[80u].x;
            float _2801 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : max(_2662, _2663));
            float _2802 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : min(_2662, _2663));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            _2856 = ((abs(_2669 / _2657) * cbSceneParam._m0[80u].y) * ((((_2811 - _2812) * 2.0) - ((exp2(_2677 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0)))) - exp2(_2677 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))))) * _2800)) - ((exp2(_2679 * _2811) - exp2(_2679 * _2812)) * _2800))) + (_2672 * cbSceneParam._m0[80u].z);
        }
        vec4 _2858 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2568, _2569, 1.0), 0.0);
        float _2867 = exp2((_2856 * (-1.44269502162933349609375)) * (1.0 - _2858.w));
        float _2868 = log2(_2867);
        float _2884 = log2(_2588);
        _2681 = (exp2(_2884 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].x)) * _2858.x) / cbSceneParam._m0[78u].x)) + _2585;
        _2683 = (exp2(_2884 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].y)) * _2858.y) / cbSceneParam._m0[78u].y)) + _2586;
        _2685 = (exp2(_2884 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].z)) * _2858.z) / cbSceneParam._m0[78u].z)) + _2587;
        _2687 = _2867 * _2588;
    }
    else
    {
        _2681 = _2585;
        _2683 = _2586;
        _2685 = _2587;
        _2687 = _2588;
    }
    bool _2894;
    vec4 _2697;
    vec4 _2719;
    float _2721;
    float _2725;
    float _2726;
    float _2727;
    float _2728;
    bool _2738;
    for (;;)
    {
        _2697 = cbMatDynParam._m0[0u];
        float _2699 = roundEven(_2697.y);
        bool _2700 = _2699 == 3.0;
        float _2701 = log2(_2687);
        float _2708 = exp2(_2701 * cbSceneParam._m0[78u].x) * _2557;
        float _2709 = exp2(_2701 * cbSceneParam._m0[78u].y) * _2558;
        float _2710 = exp2(_2701 * cbSceneParam._m0[78u].z) * _2559;
        float _2717 = _715 + (-0.5);
        _2719 = cbMtdParam._m0[1u];
        _2721 = _2719.y * _2717;
        float _2724 = (_2699 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2725 = _2724 * (_2700 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2681)));
        _2726 = _2724 * (_2700 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2683)));
        _2727 = _2724 * (_2700 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2685)));
        _2728 = _2717 * 0.999000012874603271484375;
        _2738 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2738)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2728) < 0.5)
            {
                _2894 = true;
                break;
            }
        }
        uint _2835 = _764 + uint(_2697.w);
        if ((cbInstanceData._m0[_2835].w < 1.0) && ((cbInstanceData._m0[_2835].w + _2728) < 0.5))
        {
            _2894 = true;
            break;
        }
        if ((_2721 + 1.0) < _2719.x)
        {
            _2894 = true;
            break;
        }
        _2894 = false;
        break;
    }
    float _3099;
    if (_2894)
    {
        discard_state = true;
        _3099 = 0.0;
    }
    else
    {
        _3099 = cbInstanceData._m0[_2560].w;
    }
    SV_Target.x = _2725;
    SV_Target.y = _2726;
    SV_Target.z = _2727;
    SV_Target.w = _3099;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2560].w;
    discard_exit();
}


