#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1313;
float _3955;
float _3956;
float _3957;
float _3958;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _354.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].z) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3967 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _430 = (_423 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _431 = (_423 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _432 = (_423 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _471 = _469.x;
    float _481 = dot(vec4(_471, _469.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _495 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _354.y) * 2.0) - ((((_471 - _481) * cbMtdParam._m0[24u].z) + _481) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3978 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _509 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_496 * ((_449.x * cbMtdParam._m0[13u].x) - _430)) + _430);
    float _512 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_496 * ((_449.y * cbMtdParam._m0[13u].y) - _431)) + _431);
    float _515 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_496 * ((_449.z * cbMtdParam._m0[13u].z) - _432)) + _432);
    vec4 _533 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _552 = _550.x;
    float _553 = _550.y;
    float _554 = _550.z;
    float _561 = ((_533.x - _552) * _423) + _552;
    float _562 = ((_533.y - _553) * _423) + _553;
    float _563 = ((_533.z - _554) * _423) + _554;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _588 = ((_575.z - _563) * _496) + _563;
    float _591 = ((((_575.x - _561) * _496) + _561) * 2.0) + (-1.0);
    float _593 = ((((_575.y - _562) * _496) + _562) * 2.0) + (-1.0);
    float _594 = dot(vec2(_591, _593), vec2(_591, _593));
    float _3989 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _599 = sqrt(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _625 = (((_613.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _591;
    float _626 = (((_613.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _593;
    float _629 = fma(_599, _232, fma(_626, _239, _625 * _225));
    float _632 = fma(_599, _233, fma(_626, _240, _625 * _226));
    float _635 = fma(_599, _234, fma(_626, _241, _625 * _227));
    float _639 = inversesqrt(dot(vec3(_629, _632, _635), vec3(_629, _632, _635)));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _668 = _666.x;
    float _669 = 1.0 - _668;
    float _675 = (cbMtdParam._m0[19u].x + dot(vec4(_639 * _629, _639 * _632, _639 * _635, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_668 - _669) * cbMtdParam._m0[24u].w) + _669) * cbMtdParam._m0[21u].z);
    float _4000 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _683 = (_676 * (cbMtdParam._m0[17u].x - _509)) + _509;
    float _684 = (_676 * (cbMtdParam._m0[17u].y - _512)) + _512;
    float _685 = (_676 * (cbMtdParam._m0[17u].z - _515)) + _515;
    float _689 = (cbMtdParam._m0[19u].w * (_613.z - _588)) + _588;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _709 = (_702.x * 2.0) + (-1.0);
    float _710 = (_702.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _4011 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _719 = ((_702.z - _689) * _676) + _689;
    float _729 = ((sqrt(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) - _599) * _676) + _599;
    float _732 = (((_709 - _625) * _676) + _625) + (cbMtdParam._m0[21u].x * _625);
    float _733 = (((_710 - _626) * _676) + _626) + (cbMtdParam._m0[21u].x * _626);
    float _737 = cbMtdParam._m0[22u].x + _613.w;
    float _740 = fma(_729, _232, fma(_733, _239, _732 * _225));
    float _743 = fma(_729, _233, fma(_733, _240, _732 * _226));
    float _746 = fma(_729, _234, fma(_733, _241, _732 * _227));
    float _750 = inversesqrt(dot(vec3(_740, _743, _746), vec3(_740, _743, _746)));
    float _751 = _750 * _740;
    float _752 = _750 * _743;
    float _753 = _750 * _746;
    float _4022 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _754 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4044 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4055 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _4066 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _772 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _823 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _813);
    float _824 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _813);
    float _825 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _813);
    float _829 = inversesqrt(dot(vec3(_823, _824, _825), vec3(_823, _824, _825)));
    float _830 = _823 * _829;
    float _831 = _824 * _829;
    float _832 = _825 * _829;
    vec4 _837 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _839 = _837.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _993 = sqrt(((_823 * _823) + (_824 * _824)) + (_825 * _825));
        float _999 = (cbMatDynParam._m0[5u].x * _993) + cbMatDynParam._m0[5u].y;
        float _4077 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1004 = (cbMatDynParam._m0[5u].z * _993) + cbMatDynParam._m0[5u].w;
        float _4088 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) - _1000)) + _1000) < ((_839 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _850 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _851 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _869 = fma(_753, cbSceneParam._m0[5u].z, fma(_752, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _751));
    float _872 = fma(_753, cbSceneParam._m0[6u].z, fma(_752, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _751));
    float _875 = fma(_753, cbSceneParam._m0[7u].z, fma(_752, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _751));
    uint _888 = _244 + 9u;
    uint _889 = _888 + uint(cbMatDynParam._m0[0u].w);
    float _895 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * cbInstanceData._m0[_889].x;
    float _896 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * cbInstanceData._m0[_889].y;
    float _897 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * cbInstanceData._m0[_889].z;
    float _4099 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    vec4 _909 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _850, cbSceneParam._m0[86u].y * _851));
    float _913 = ((isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * TEXCOORD_5.w) * _909.x;
    float _914 = dot(vec3(_751, _752, _753), vec3(_830, _831, _832));
    float _917 = _914 * 2.0;
    float _921 = (_917 * _751) - _830;
    float _922 = (_917 * _752) - _831;
    float _923 = (_917 * _753) - _832;
    float _927 = abs(dot(vec3(_830, _831, _832), vec3(_751, _752, _753)));
    float _4132 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _929 = sqrt(_754);
    float _942 = exp2((_929 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_929 * 3.0));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1312;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1037 = fma(_982, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974));
        float _1041 = fma(_982, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974));
        float _1045 = fma(_982, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974));
        float _1070 = _974 + _751;
        float _1071 = _978 + _752;
        float _1072 = _982 + _753;
        float _1082 = fma(_1072, cbModelParam._m0[26u].z, fma(_1071, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070)) - _1037;
        float _1083 = fma(_1072, cbModelParam._m0[27u].z, fma(_1071, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070)) - _1041;
        float _1084 = fma(_1072, cbModelParam._m0[28u].z, fma(_1071, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070)) - _1045;
        float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
        float _1101 = ((_1088 * _1082) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1037 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1088 * _1083) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1041 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1088 * _1084) / cbModelParam._m0[34u].z) + ((((((_1045 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1140 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1106.x + (-0.5));
        float _1142 = _1140 * (_1106.y + (-0.5));
        float _1143 = _1140 * (_1106.z + (-0.5));
        float _1150 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1113.x + (-0.5));
        float _1152 = _1150 * (_1113.y + (-0.5));
        float _1153 = _1150 * (_1113.z + (-0.5));
        float _1160 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1120.x + (-0.5));
        float _1162 = _1160 * (_1120.y + (-0.5));
        float _1163 = _1160 * (_1120.z + (-0.5));
        float _1170 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1127.x + (-0.5));
        float _1172 = _1170 * (_1127.y + (-0.5));
        float _1173 = _1170 * (_1127.z + (-0.5));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = _1141 * 0.5;
        float _1178 = _1151 * 0.5;
        float _1179 = _1161 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1194 = (dot(vec3(_751, _752, _753), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1204 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _4180 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1206 + 1.0))) + _1211) * _1174;
        float _1221 = _1142 * 0.5;
        float _1222 = _1152 * 0.5;
        float _1223 = _1162 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_751, _752, _753), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4213 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1248 + 1.0))) + _1253) * _1175;
        float _1263 = _1143 * 0.5;
        float _1264 = _1153 * 0.5;
        float _1265 = _1163 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_751, _752, _753), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4246 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1290 + 1.0))) + _1295) * _1176;
        _1312 = _1143;
        _1314 = _1142;
        _1315 = _1141;
        _1316 = _1153;
        _1317 = _1152;
        _1318 = _1151;
        _1319 = _1163;
        _1320 = _1162;
        _1321 = _1161;
        _1322 = _1176;
        _1323 = _1175;
        _1324 = _1174;
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
    }
    else
    {
        _1312 = _1313;
        _1314 = _1313;
        _1315 = _1313;
        _1316 = _1313;
        _1317 = _1313;
        _1318 = _1313;
        _1319 = _1313;
        _1320 = _1313;
        _1321 = _1313;
        _1322 = _1313;
        _1323 = _1313;
        _1324 = _1313;
        _1325 = 0.0;
        _1326 = 0.0;
        _1327 = 0.0;
    }
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1354 = fma(_982, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974));
        float _1358 = fma(_982, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974));
        float _1362 = fma(_982, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974));
        float _1385 = _974 + _751;
        float _1386 = _978 + _752;
        float _1387 = _982 + _753;
        float _1397 = fma(_1387, cbModelParam._m0[30u].z, fma(_1386, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1385)) - _1354;
        float _1398 = fma(_1387, cbModelParam._m0[31u].z, fma(_1386, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1385)) - _1358;
        float _1399 = fma(_1387, cbModelParam._m0[32u].z, fma(_1386, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1385)) - _1362;
        float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
        float _1416 = ((_1403 * _1397) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1354 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1403 * _1398) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1358 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1403 * _1399) / cbModelParam._m0[35u].z) + ((((((_1362 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        float _1453 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1420.x + (-0.5));
        float _1455 = _1453 * (_1420.y + (-0.5));
        float _1456 = _1453 * (_1420.z + (-0.5));
        float _1463 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1427.x + (-0.5));
        float _1465 = _1463 * (_1427.y + (-0.5));
        float _1466 = _1463 * (_1427.z + (-0.5));
        float _1473 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1434.x + (-0.5));
        float _1475 = _1473 * (_1434.y + (-0.5));
        float _1476 = _1473 * (_1434.z + (-0.5));
        float _1483 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1441.x + (-0.5));
        float _1485 = _1483 * (_1441.y + (-0.5));
        float _1486 = _1483 * (_1441.z + (-0.5));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = _1454 * 0.5;
        float _1491 = _1464 * 0.5;
        float _1492 = _1474 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_751, _752, _753), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4309 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1517 + 1.0))) + _1522) * _1487;
        float _1532 = _1455 * 0.5;
        float _1533 = _1465 * 0.5;
        float _1534 = _1475 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_751, _752, _753), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4342 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1559 + 1.0))) + _1564) * _1488;
        float _1574 = _1456 * 0.5;
        float _1575 = _1466 * 0.5;
        float _1576 = _1476 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_751, _752, _753), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4375 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1601 + 1.0))) + _1606) * _1489;
        _1623 = _1456;
        _1624 = _1455;
        _1625 = _1454;
        _1626 = _1466;
        _1627 = _1465;
        _1628 = _1464;
        _1629 = _1476;
        _1630 = _1475;
        _1631 = _1474;
        _1632 = _1489;
        _1633 = _1488;
        _1634 = _1487;
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
    }
    else
    {
        _1623 = _1313;
        _1624 = _1313;
        _1625 = _1313;
        _1626 = _1313;
        _1627 = _1313;
        _1628 = _1313;
        _1629 = _1313;
        _1630 = _1313;
        _1631 = _1313;
        _1632 = _1313;
        _1633 = _1313;
        _1634 = _1313;
        _1635 = 0.0;
        _1636 = 0.0;
        _1637 = 0.0;
    }
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1325)) + _1325;
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1326)) + _1326;
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1327)) + _1327;
    float _1670 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1647));
    float _1691 = _921 * 0.5;
    float _1692 = _922 * 0.5;
    float _1693 = _923 * 0.5;
    float _1694 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1697 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1700 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1734;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1707 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1312, _1316, _1319, _1322));
        float _1711 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1314, _1317, _1320, _1323));
        float _1715 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1315, _1318, _1321, _1324));
        float _1722 = dot(vec4(cbModelParam._m0[39u]), vec4(_1691, _1692, _1693, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1722) ? 0.0 : (isnan(0.0) ? _1722 : max(0.0, _1722))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1745;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1736 = dot(vec4(cbModelParam._m0[40u]), vec4(_1691, _1692, _1693, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1749 = (_1745 * cbModelParam._m0[1u].x) + (_1734 * (1.0 - cbModelParam._m0[1u].x));
    float _1759 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _754);
    float _1760 = isnan(_1759) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1759 : min(cbModelParam._m0[25u].z, _1759));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1808 = fma(_982, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974)) + cbModelParam._m0[13u].w;
        float _1812 = fma(_982, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974)) + cbModelParam._m0[14u].w;
        float _1816 = fma(_982, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974)) + cbModelParam._m0[15u].w;
        float _1819 = fma(_923, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921));
        float _1822 = fma(_923, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921));
        float _1825 = fma(_923, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921));
        float _1853;
        if (_1819 > 0.0)
        {
            _1853 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1853 = frontier_phi_17_15_ladder;
        }
        float _2023;
        if (_1822 > 0.0)
        {
            _2023 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2023 = frontier_phi_26_22_ladder;
        }
        float _2318;
        if (_1825 > 0.0)
        {
            _2318 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2318 = frontier_phi_38_33_ladder;
        }
        float _2320 = isnan(_2023) ? _1853 : (isnan(_1853) ? _2023 : min(_1853, _2023));
        float _2321 = isnan(_2318) ? _2320 : (isnan(_2320) ? _2318 : min(_2320, _2318));
        float _2325 = (_2321 * _1819) + _1808;
        float _2326 = (_2321 * _1822) + _1812;
        float _2327 = (_2321 * _1825) + _1816;
        float _2328 = _2321 * 9.9999997473787516355514526367188e-05;
        float _2330 = (-1.0) - _2328;
        float _2332 = _2328 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2327 > _2332) || ((_2327 < _2330) || ((_2326 > _2332) || ((_2326 < _2330) || ((_2325 < _2330) || (_2325 > _2332))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2327, cbModelParam._m0[9u].z, fma(_2326, cbModelParam._m0[9u].y, _2325 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2327, cbModelParam._m0[10u].z, fma(_2326, cbModelParam._m0[10u].y, _2325 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2327, cbModelParam._m0[11u].z, fma(_2326, cbModelParam._m0[11u].y, _2325 * cbModelParam._m0[11u].x))), _1760);
            frontier_phi_16_38_ladder = _2472.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2472.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2472.x * cbModelParam._m0[1u].y;
        }
        _1841 = frontier_phi_16_38_ladder_2;
        _1843 = frontier_phi_16_38_ladder_1;
        _1845 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_921, _922, _923), _1760);
        _1841 = _1829.x * cbModelParam._m0[1u].y;
        _1843 = _1829.y * cbModelParam._m0[1u].y;
        _1845 = _1829.z * cbModelParam._m0[1u].y;
    }
    float _1849 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _754);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1849 : min(cbModelParam._m0[25u].w, _1849));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1904 = fma(_982, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974)) + cbModelParam._m0[21u].w;
        float _1908 = fma(_982, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974)) + cbModelParam._m0[22u].w;
        float _1912 = fma(_982, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974)) + cbModelParam._m0[23u].w;
        float _1915 = fma(_923, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921));
        float _1918 = fma(_923, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921));
        float _1921 = fma(_923, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921));
        float _2028;
        if (_1915 > 0.0)
        {
            _2028 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2028 = frontier_phi_28_24_ladder;
        }
        float _2345;
        if (_1918 > 0.0)
        {
            _2345 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2345 = frontier_phi_40_35_ladder;
        }
        float _2672;
        if (_1921 > 0.0)
        {
            _2672 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2672 = frontier_phi_50_47_ladder;
        }
        float _2674 = isnan(_2345) ? _2028 : (isnan(_2028) ? _2345 : min(_2028, _2345));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _1915) + _1904;
        float _2680 = (_2675 * _1918) + _1908;
        float _2681 = (_2675 * _1921) + _1912;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2682;
        float _2685 = _2682 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2681 > _2685) || ((_2681 < _2683) || ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 < _2683) || (_2679 > _2685))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2681, cbModelParam._m0[17u].z, fma(_2680, cbModelParam._m0[17u].y, _2679 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2681, cbModelParam._m0[18u].z, fma(_2680, cbModelParam._m0[18u].y, _2679 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2681, cbModelParam._m0[19u].z, fma(_2680, cbModelParam._m0[19u].y, _2679 * cbModelParam._m0[19u].x))), _1850);
            frontier_phi_25_50_ladder = _2799.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2799.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2799.x * cbModelParam._m0[1u].z;
        }
        _1940 = frontier_phi_25_50_ladder_2;
        _1942 = frontier_phi_25_50_ladder_1;
        _1944 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_921, _922, _923), _1850);
        _1940 = _1924.x * cbModelParam._m0[1u].z;
        _1942 = _1924.y * cbModelParam._m0[1u].z;
        _1944 = _1924.z * cbModelParam._m0[1u].z;
    }
    float _1956 = ((((1.0 - _942) * ((_929 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_942 * _929)) * _913;
    float _1957 = _1956 * ((cbModelParam._m0[1u].w * (_1940 - _1841)) + _1841);
    float _1958 = _1956 * ((cbModelParam._m0[1u].w * (_1942 - _1843)) + _1843);
    float _1959 = _1956 * ((cbModelParam._m0[1u].w * (_1944 - _1845)) + _1845);
    float _1962 = fma(_1959, cbSceneParam._m0[89u].z, fma(_1958, cbSceneParam._m0[89u].y, _1957 * cbSceneParam._m0[89u].x));
    float _1965 = fma(_1959, cbSceneParam._m0[90u].z, fma(_1958, cbSceneParam._m0[90u].y, _1957 * cbSceneParam._m0[90u].x));
    float _1968 = fma(_1959, cbSceneParam._m0[91u].z, fma(_1958, cbSceneParam._m0[91u].y, _1957 * cbSceneParam._m0[91u].x));
    float _2002 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2006 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2010 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2014 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2015 = _2002 / _2014;
    float _2016 = _2006 / _2014;
    float _2017 = _2010 / _2014;
    float _2164;
    float _2165;
    float _2166;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2044 = ((uint(_2017 > cbSceneParam._m0[59u].y) + uint(_2017 > cbSceneParam._m0[59u].x)) + uint(_2017 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2045 = _2044 + 43u;
        uint _2053 = _2044 + 44u;
        uint _2061 = _2044 + 45u;
        uint _2069 = _2044 + 46u;
        float _2080 = fma(_2014, cbSceneParam._m0[_2045].w, fma(_2010, cbSceneParam._m0[_2045].z, fma(_2006, cbSceneParam._m0[_2045].y, _2002 * cbSceneParam._m0[_2045].x)));
        float _2084 = fma(_2014, cbSceneParam._m0[_2053].w, fma(_2010, cbSceneParam._m0[_2053].z, fma(_2006, cbSceneParam._m0[_2053].y, _2002 * cbSceneParam._m0[_2053].x)));
        float _2092 = fma(_2014, cbSceneParam._m0[_2069].w, fma(_2010, cbSceneParam._m0[_2069].z, fma(_2006, cbSceneParam._m0[_2069].y, _2002 * cbSceneParam._m0[_2069].x)));
        float _2097 = cbSceneParam._m0[33u].z * _2092;
        float _2099 = cbSceneParam._m0[33u].w * _2092;
        float _2102 = fma(_2014, cbSceneParam._m0[_2061].w, fma(_2010, cbSceneParam._m0[_2061].z, fma(_2006, cbSceneParam._m0[_2061].y, _2002 * cbSceneParam._m0[_2061].x))) / _2092;
        float _2150 = (cbSceneParam._m0[33u].x - sqrt(((_2016 * _2016) + (_2015 * _2015)) + (_2017 * _2017))) * cbSceneParam._m0[33u].y;
        float _4501 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2157 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2097 + _2080) / _2092, (_2099 + _2084) / _2092), _2102), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2099 + _2080) / _2092, (_2084 - _2097) / _2092), _2102), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2080 - _2097) / _2092, (_2084 - _2099) / _2092), _2102), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2080 - _2099) / _2092, (_2097 + _2084) / _2092), _2102), 0.0)).x), vec4(0.25)));
        _2164 = 1.0 - (_2157 * cbSceneParam._m0[34u].x);
        _2165 = 1.0 - (_2157 * cbSceneParam._m0[34u].y);
        _2166 = 1.0 - (_2157 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2164 = 1.0;
        _2165 = 1.0;
        _2166 = 1.0;
    }
    float _2230;
    float _2232;
    float _2234;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2218 = fma(_2014, cbSceneParam._m0[63u].w, fma(_2010, cbSceneParam._m0[63u].z, fma(_2006, cbSceneParam._m0[63u].y, _2002 * cbSceneParam._m0[63u].x)));
        float _2219 = fma(_2014, cbSceneParam._m0[60u].w, fma(_2010, cbSceneParam._m0[60u].z, fma(_2006, cbSceneParam._m0[60u].y, _2002 * cbSceneParam._m0[60u].x))) / _2218;
        float _2220 = fma(_2014, cbSceneParam._m0[61u].w, fma(_2010, cbSceneParam._m0[61u].z, fma(_2006, cbSceneParam._m0[61u].y, _2002 * cbSceneParam._m0[61u].x))) / _2218;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2219 >= cbSceneParam._m0[64u].x) && (_2220 >= cbSceneParam._m0[64u].y)) && (_2219 <= cbSceneParam._m0[64u].z)) && (_2220 <= cbSceneParam._m0[64u].w))
        {
            float _2358 = fma(_2014, cbSceneParam._m0[62u].w, fma(_2010, cbSceneParam._m0[62u].z, fma(_2006, cbSceneParam._m0[62u].y, _2002 * cbSceneParam._m0[62u].x))) / _2218;
            float _2362 = isnan(cbSceneParam._m0[41u].w) ? _2358 : (isnan(_2358) ? cbSceneParam._m0[41u].w : max(_2358, cbSceneParam._m0[41u].w));
            float _2405 = (cbSceneParam._m0[33u].x - sqrt(((_2016 * _2016) + (_2015 * _2015)) + (_2017 * _2017))) * cbSceneParam._m0[33u].y;
            float _4517 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
            float _2412 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2219, cbSceneParam._m0[33u].w + _2220), _2362), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2219, _2220 - cbSceneParam._m0[33u].z), _2362), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2219 - cbSceneParam._m0[33u].z, _2220 - cbSceneParam._m0[33u].w), _2362), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2219 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2220), _2362), 0.0)).x), vec4(0.25)));
            float _2416 = 1.0 - (_2412 * cbSceneParam._m0[34u].x);
            float _2417 = 1.0 - (_2412 * cbSceneParam._m0[34u].y);
            float _2418 = 1.0 - (_2412 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2418) ? _2166 : (isnan(_2166) ? _2418 : min(_2166, _2418));
            frontier_phi_37_36_ladder_1 = isnan(_2417) ? _2165 : (isnan(_2165) ? _2417 : min(_2165, _2417));
            frontier_phi_37_36_ladder_2 = isnan(_2416) ? _2164 : (isnan(_2164) ? _2416 : min(_2164, _2416));
        }
        else
        {
            frontier_phi_37_36_ladder = _2166;
            frontier_phi_37_36_ladder_1 = _2165;
            frontier_phi_37_36_ladder_2 = _2164;
        }
        _2230 = frontier_phi_37_36_ladder_2;
        _2232 = frontier_phi_37_36_ladder_1;
        _2234 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2230 = _2164;
        _2232 = _2165;
        _2234 = _2166;
    }
    uvec4 _2239 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2241 = _2239.x * 14u;
    uint _2242 = _2241 + 13u;
    float _2249 = _913 + (-1.0);
    float _2254 = (cbLight._m0[_2242].x * _2249) + 1.0;
    float _2255 = (cbLight._m0[_2242].y * _2249) + 1.0;
    float _2256 = (cbLight._m0[_2242].z * _2249) + 1.0;
    float _2257 = (cbLight._m0[_2242].w * _2249) + 1.0;
    uint _2258 = _2241 + 5u;
    float _2264 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
    uint _2268 = _2241 + 4u;
    float _2277 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
    uint _2281 = _2241 | 1u;
    float _2292 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_751, _752, _753));
    float _2295 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_751, _752, _753));
    float _4553 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _4564 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2300 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * 0.3183098733425140380859375;
    float _2302 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * 0.3183098733425140380859375;
    float _2309 = ((cbLight._m0[_2258].x * _2264) * _2302) + (((cbLight._m0[_2268].x * _2230) * _2277) * _2300);
    float _2310 = ((_2264 * cbLight._m0[_2258].y) * _2302) + (((cbLight._m0[_2268].y * _2232) * _2277) * _2300);
    float _2311 = ((_2264 * cbLight._m0[_2258].z) * _2302) + (((cbLight._m0[_2268].z * _2234) * _2277) * _2300);
    uvec4 _2315 = floatBitsToUint(cbLight._m0[_2241 + 12u]);
    bool _2317 = _2315.x == 0u;
    float _2419;
    float _2421;
    float _2423;
    if (_2317)
    {
        _2419 = _2309;
        _2421 = _2310;
        _2423 = _2311;
    }
    else
    {
        uint _2427 = _2241 + 6u;
        float _2443 = (dot(vec3(cbLight._m0[_2241 + 2u].xyz), vec3(_751, _752, _753)) * 0.5) + 0.5;
        float _2444 = _2443 * _2443;
        float _4575 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2445 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2446 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
        _2419 = (((cbLight._m0[_2427].x * 0.3183098733425140380859375) * _2445) * _2446) + _2309;
        _2421 = (((cbLight._m0[_2427].y * 0.3183098733425140380859375) * _2445) * _2446) + _2310;
        _2423 = (((cbLight._m0[_2427].z * 0.3183098733425140380859375) * _2445) * _2446) + _2311;
    }
    bool _2426 = _2315.y == 0u;
    float _2481;
    float _2483;
    float _2485;
    if (_2426)
    {
        _2481 = _2419;
        _2483 = _2421;
        _2485 = _2423;
    }
    else
    {
        uint _2643 = _2241 + 7u;
        float _2659 = (dot(vec3(cbLight._m0[_2241 + 3u].xyz), vec3(_751, _752, _753)) * 0.5) + 0.5;
        float _2660 = _2659 * _2659;
        float _4591 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2661 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2662 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2481 = (((cbLight._m0[_2643].x * 0.3183098733425140380859375) * _2661) * _2662) + _2419;
        _2483 = (((cbLight._m0[_2643].y * 0.3183098733425140380859375) * _2661) * _2662) + _2421;
        _2485 = (((cbLight._m0[_2643].z * 0.3183098733425140380859375) * _2661) * _2662) + _2423;
    }
    uint _2488 = _2241 + 8u;
    float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _754) * 0.949999988079071044921875);
    float _2502 = _2501 * _2501;
    float _2503 = cbLight._m0[_2241].x + _830;
    float _2504 = cbLight._m0[_2241].y + _831;
    float _2505 = cbLight._m0[_2241].z + _832;
    float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
    float _2510 = _2509 * _2503;
    float _2511 = _2509 * _2504;
    float _2512 = _2509 * _2505;
    float _2513 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2241].xyz));
    float _4607 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _4618 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _2517 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2518 = dot(vec3(_751, _752, _753), vec3(_2510, _2511, _2512));
    float _4629 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2522 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2510, _2511, _2512));
    float _4640 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2526 = _2502 * _2502;
    float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
    float _2541 = (exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2542 = 1.0 - _2502;
    float _2553 = (0.5 / (((_2517 * ((_2516 * _2542) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2542) + _2502) * _2516))) * _2516;
    float _4651 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2555 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
    uint _2569 = _2241 + 9u;
    float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _754) * 0.949999988079071044921875);
    float _2581 = _2580 * _2580;
    float _2582 = cbLight._m0[_2281].x + _830;
    float _2583 = cbLight._m0[_2281].y + _831;
    float _2584 = cbLight._m0[_2281].z + _832;
    float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
    float _2589 = _2588 * _2582;
    float _2590 = _2588 * _2583;
    float _2591 = _2588 * _2584;
    float _2592 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2281].xyz));
    float _4662 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2596 = dot(vec3(_751, _752, _753), vec3(_2589, _2590, _2591));
    float _4673 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2599 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _2600 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2589, _2590, _2591));
    float _4684 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2604 = _2581 * _2581;
    float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
    float _2617 = (exp2(log2(1.0 - (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2618 = 1.0 - _2581;
    float _2628 = (0.5 / (((_2517 * ((_2595 * _2618) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2618) + _2581) * _2595))) * _2595;
    float _4695 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2630 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
    float _2640 = (((_2617 * cbLight._m0[_2569].x) * _2630) * _2264) + ((((cbLight._m0[_2488].x * _2230) * _2541) * _2555) * _2277);
    float _2641 = (((_2617 * cbLight._m0[_2569].y) * _2630) * _2264) + ((((cbLight._m0[_2488].y * _2232) * _2541) * _2555) * _2277);
    float _2642 = (((_2617 * cbLight._m0[_2569].z) * _2630) * _2264) + ((((cbLight._m0[_2488].z * _2234) * _2541) * _2555) * _2277);
    float _2698;
    float _2700;
    float _2702;
    if (_2317)
    {
        _2698 = _2640;
        _2700 = _2641;
        _2702 = _2642;
    }
    else
    {
        uint _2704 = _2241 + 2u;
        uint _2708 = _2241 + 10u;
        float _2722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2704].w)) * _754) * 0.949999988079071044921875);
        float _2723 = _2722 * _2722;
        float _2724 = cbLight._m0[_2704].x + _830;
        float _2725 = cbLight._m0[_2704].y + _831;
        float _2726 = cbLight._m0[_2704].z + _832;
        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
        float _2731 = _2730 * _2724;
        float _2732 = _2730 * _2725;
        float _2733 = _2730 * _2726;
        float _2734 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2704].xyz));
        float _4706 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2738 = dot(vec3(_751, _752, _753), vec3(_2731, _2732, _2733));
        float _4717 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2742 = dot(vec3(cbLight._m0[_2704].xyz), vec3(_2731, _2732, _2733));
        float _4728 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2746 = _2723 * _2723;
        float _2750 = ((_2741 * _2741) * (_2746 + (-1.0))) + 1.0;
        float _2759 = (exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2760 = 1.0 - _2723;
        float _2770 = (0.5 / (((_2517 * ((_2737 * _2760) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2760) + _2723) * _2737))) * _2737;
        float _4739 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2772 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2746 / ((_2750 * _2750) * 3.141590118408203125));
        float _2773 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
        _2698 = (((_2759 * cbLight._m0[_2708].x) * _2772) * _2773) + _2640;
        _2700 = (((_2759 * cbLight._m0[_2708].y) * _2772) * _2773) + _2641;
        _2702 = (((_2759 * cbLight._m0[_2708].z) * _2772) * _2773) + _2642;
    }
    float _2804;
    float _2806;
    float _2808;
    if (_2426)
    {
        _2804 = _2698;
        _2806 = _2700;
        _2808 = _2702;
    }
    else
    {
        uint _2815 = _2241 + 3u;
        uint _2819 = _2241 + 11u;
        float _2833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2815].w)) * _754) * 0.949999988079071044921875);
        float _2834 = _2833 * _2833;
        float _2835 = cbLight._m0[_2815].x + _830;
        float _2836 = cbLight._m0[_2815].y + _831;
        float _2837 = cbLight._m0[_2815].z + _832;
        float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
        float _2842 = _2841 * _2835;
        float _2843 = _2841 * _2836;
        float _2844 = _2841 * _2837;
        float _2845 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2815].xyz));
        float _4755 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2849 = dot(vec3(_751, _752, _753), vec3(_2842, _2843, _2844));
        float _4766 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2852 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2853 = dot(vec3(cbLight._m0[_2815].xyz), vec3(_2842, _2843, _2844));
        float _4777 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2857 = _2834 * _2834;
        float _2861 = ((_2852 * _2852) * (_2857 + (-1.0))) + 1.0;
        float _2870 = (exp2(log2(1.0 - (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2871 = 1.0 - _2834;
        float _2881 = (0.5 / (((_2517 * ((_2848 * _2871) + _2834)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2871) + _2834) * _2848))) * _2848;
        float _4788 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2883 = (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2857 / ((_2861 * _2861) * 3.141590118408203125));
        float _2884 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2804 = (((_2870 * cbLight._m0[_2819].x) * _2883) * _2884) + _2698;
        _2806 = (((_2870 * cbLight._m0[_2819].y) * _2883) * _2884) + _2700;
        _2808 = (((_2870 * cbLight._m0[_2819].z) * _2883) * _2884) + _2702;
    }
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    if (_2239.y == 0u)
    {
        uvec4 _2905 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2906 = _2905.x;
        uint _2917 = uint((float(_2905.y) * floor(float(uint(cbSceneParam._m0[85u].y * _851) / _2906))) + floor(float(uint(cbSceneParam._m0[85u].x * _850) / _2906)));
        float _2927 = (log2(_2017 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2928 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        uint _2931 = uint(isnan(14.0) ? _2928 : (isnan(_2928) ? 14.0 : min(_2928, 14.0)));
        uvec4 _2936 = texelFetch(g_lightClusterGridBuffer, int(((_2931 << 2u) + (_2917 << 6u)) >> 2u));
        uint _2937 = _2936.x;
        uint _2938 = _2905.z;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        if (((((1u << ((_2938 >> 4u) & 15u)) + 4294967295u) & _2937) == 0u) || ((_2938 & 240u) == 0u))
        {
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
        }
        else
        {
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            uint _3176 = 0u;
            uint _3185;
            bool _3186;
            for (;;)
            {
                _3185 = texelFetch(g_lightClassification, int((((_2931 << 5u) + (_2917 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                _3186 = _3185 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3186)
                {
                    frontier_phi_71_pred = _3175;
                    frontier_phi_71_pred_1 = _3174;
                    frontier_phi_71_pred_2 = _3173;
                    frontier_phi_71_pred_3 = _3172;
                    frontier_phi_71_pred_4 = _3171;
                    frontier_phi_71_pred_5 = _3170;
                }
                else
                {
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    uint _3321;
                    _3315 = _3170;
                    _3316 = _3171;
                    _3317 = _3172;
                    _3318 = _3173;
                    _3319 = _3174;
                    _3320 = _3175;
                    _3321 = _3185;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    for (;;)
                    {
                        uint _3325 = uint(findLSB(_3321)) + (_3176 << 5u);
                        uint _3322 = (_3321 + 4294967295u) & _3321;
                        uint _3327 = _3325 * 48u;
                        vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 3u)).x));
                        uint _3347 = (_3325 * 48u) + 4u;
                        vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 3u)).x));
                        uint _3366 = (_3325 * 48u) + 8u;
                        vec3 _3377 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3366)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 2u)).x));
                        float _3381 = _3341.x - _2015;
                        float _3382 = _3341.y - _2016;
                        float _3383 = _3341.z - _2017;
                        float _3384 = dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383));
                        float _3387 = inversesqrt(_3384);
                        float _3388 = _3387 * _3381;
                        float _3389 = _3387 * _3382;
                        float _3390 = _3387 * _3383;
                        float _3391 = dot(vec3(_869, _872, _875), vec3(_3388, _3389, _3390));
                        float _3396 = 1.0 - (_3384 * _3341.w);
                        float _4814 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3397 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3398 = sqrt(_3384) * _3360.w;
                        float _3401 = 1.39999997615814208984375 / (_3398 + 1.39999997615814208984375);
                        float _3402 = _3401 * _3401;
                        float _3405 = ((1.0 - _3402) * _3391) + _3402;
                        float _3408 = _3398 * _3398;
                        float _3412 = ((isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0))) * _3397) / ((_3408 * 0.699999988079071044921875) + 1.0);
                        float _3416 = (-0.0) - _2015;
                        float _3417 = (-0.0) - _2016;
                        float _3418 = (-0.0) - _2017;
                        float _3422 = inversesqrt(dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418)));
                        float _3423 = _3422 * _3416;
                        float _3424 = _3422 * _3417;
                        float _3425 = _3422 * _3418;
                        float _3432 = exp2(log2(1.0 / ((_3408 * 3.5) + 5.0)) * 0.25);
                        float _3433 = 1.0 - _929;
                        float _3440 = sqrt(1.0 - ((1.0 - (_3433 * _3433)) * (1.0 - (_3432 * _3432))));
                        float _3441 = _3440 * _3440;
                        float _3442 = _3441 * _3441;
                        float _3443 = _3423 + _3388;
                        float _3444 = _3424 + _3389;
                        float _3445 = _3425 + _3390;
                        float _3449 = inversesqrt(dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445)));
                        float _3453 = dot(vec3(_869, _872, _875), vec3(_3423, _3424, _3425));
                        float _4830 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3456 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3457 = dot(vec3(_869, _872, _875), vec3(_3449 * _3443, _3449 * _3444, _3449 * _3445));
                        float _4841 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3460 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                        float _3464 = ((_3460 * _3460) * (_3442 + (-1.0))) + 1.0;
                        float _3465 = _3401 * _3441;
                        float _3466 = _3465 * _3465;
                        float _3469 = ((1.0 - _3466) * _3391) + _3466;
                        float _4852 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3470 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                        float _3471 = 1.0 - _3441;
                        float _3481 = (0.5 / (((_3470 * ((_3456 * _3471) + _3441)) + 9.9999999392252902907785028219223e-09) + (((_3470 * _3471) + _3441) * _3456))) * _3470;
                        float _4863 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3492 = (((_3442 * 3.1415927410125732421875) * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) / ((_3464 * _3464) * ((_3408 * 2.1991131305694580078125) + 3.141590118408203125))) * _3397;
                        _3245 = (_3412 * _3360.x) + _3318;
                        _3246 = (_3412 * _3360.y) + _3319;
                        _3247 = (_3412 * _3360.z) + _3320;
                        _3242 = (_3492 * _3377.x) + _3315;
                        _3243 = (_3492 * _3377.y) + _3316;
                        _3244 = (_3492 * _3377.z) + _3317;
                        if (_3322 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3315 = _3242;
                            _3316 = _3243;
                            _3317 = _3244;
                            _3318 = _3245;
                            _3319 = _3246;
                            _3320 = _3247;
                            _3321 = _3322;
                        }
                    }
                    frontier_phi_71_pred = _3247;
                    frontier_phi_71_pred_1 = _3246;
                    frontier_phi_71_pred_2 = _3245;
                    frontier_phi_71_pred_3 = _3244;
                    frontier_phi_71_pred_4 = _3243;
                    frontier_phi_71_pred_5 = _3242;
                }
                _3028 = frontier_phi_71_pred;
                _3026 = frontier_phi_71_pred_1;
                _3024 = frontier_phi_71_pred_2;
                _3022 = frontier_phi_71_pred_3;
                _3020 = frontier_phi_71_pred_4;
                _3018 = frontier_phi_71_pred_5;
                uint _3177 = _3176 + 1u;
                if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3170 = _3018;
                    _3171 = _3020;
                    _3172 = _3022;
                    _3173 = _3024;
                    _3174 = _3026;
                    _3175 = _3028;
                    _3176 = _3177;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
        }
        uvec4 _3031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3032 = _3031.z;
        uint _3034 = (_3032 >> 8u) & 15u;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        if (((4294967295u << _3034) & _2937) == 0u)
        {
            _3138 = _3017;
            _3140 = _3019;
            _3142 = _3021;
            _3144 = _3023;
            _3146 = _3025;
            _3148 = _3027;
        }
        else
        {
            float _3163 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
            float _3164 = _3163 * _2015;
            float _3165 = _3163 * _2016;
            float _3166 = _3163 * _2017;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3034 < ((_3032 >> 12u) & 15u))
            {
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3298 = _3017;
                float _3299 = _3019;
                float _3300 = _3021;
                float _3301 = _3023;
                float _3302 = _3025;
                float _3303 = _3027;
                uint _3304 = _3034;
                uint _3313;
                bool _3314;
                for (;;)
                {
                    _3313 = texelFetch(g_lightClassification, int((((_2931 << 5u) + (_2917 << 9u)) + (_3304 << 2u)) >> 2u)).x;
                    _3314 = _3313 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3314)
                    {
                        frontier_phi_82_pred = _3303;
                        frontier_phi_82_pred_1 = _3302;
                        frontier_phi_82_pred_2 = _3301;
                        frontier_phi_82_pred_3 = _3300;
                        frontier_phi_82_pred_4 = _3299;
                        frontier_phi_82_pred_5 = _3298;
                    }
                    else
                    {
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3519 = _3298;
                        float _3520 = _3299;
                        float _3521 = _3300;
                        float _3522 = _3301;
                        float _3523 = _3302;
                        float _3524 = _3303;
                        uint _3525 = _3313;
                        uint _3526;
                        vec4 _3551;
                        float _3552;
                        vec4 _3567;
                        vec3 _3579;
                        vec4 _3594;
                        vec4 _3609;
                        float _3655;
                        bool _3656;
                        for (;;)
                        {
                            uint _3536 = ((_3304 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3525));
                            _3526 = (_3525 + 4294967295u) & _3525;
                            uint _3538 = _3536 * 40u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            _3552 = _3551.w;
                            uint _3554 = (_3536 * 40u) + 4u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3536 * 40u) + 8u;
                            _3579 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x));
                            uint _3581 = (_3536 * 40u) + 16u;
                            _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3596 = (_3536 * 40u) + 20u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3536 * 40u) + 24u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3630 = (_3536 * 40u) + 28u;
                            vec4 _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            _3655 = fma(_2017, _3643.z, fma(_2016, _3643.y, _3643.x * _2015)) + _3643.w;
                            _3656 = !((fma(_2017, _3624.z, fma(_2016, _3624.y, _3624.x * _2015)) + _3624.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3656)
                            {
                                float _3683 = _3551.x - _2015;
                                float _3684 = _3551.y - _2016;
                                float _3685 = _3551.z - _2017;
                                float _3686 = dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685));
                                float _3689 = inversesqrt(_3686);
                                float _3690 = _3689 * _3683;
                                float _3691 = _3689 * _3684;
                                float _3692 = _3689 * _3685;
                                float _3696 = 1.0 - (_3686 / (_3552 * _3552));
                                float _4874 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3701 = sqrt(_3686) * _3567.w;
                                float _3703 = 1.39999997615814208984375 / (_3701 + 1.39999997615814208984375);
                                float _3704 = _3703 * _3703;
                                float _3707 = ((1.0 - _3704) * dot(vec3(_3690, _3691, _3692), vec3(_869, _872, _875))) + _3704;
                                float _3710 = _3701 * _3701;
                                float _3714 = (fma(_2017, _3594.z, fma(_2016, _3594.y, _3594.x * _2015)) + _3594.w) / _3655;
                                float _3715 = (fma(_2017, _3609.z, fma(_2016, _3609.y, _3609.x * _2015)) + _3609.w) / _3655;
                                float _3719 = 1.0 - dot(vec2(_3714, _3715), vec2(_3714, _3715));
                                float _4890 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3721 = _3720 * (((isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0))) * _3697) / ((_3710 * 0.699999988079071044921875) + 1.0));
                                float _3733 = exp2(log2(1.0 / ((_3710 * 3.5) + 5.0)) * 0.25);
                                float _3734 = 1.0 - _929;
                                float _3741 = sqrt(1.0 - ((1.0 - (_3734 * _3734)) * (1.0 - (_3733 * _3733))));
                                float _3742 = _3741 * _3741;
                                float _3743 = _3742 * _3742;
                                float _3744 = _3690 - _3164;
                                float _3745 = _3691 - _3165;
                                float _3746 = _3692 - _3166;
                                float _3750 = inversesqrt(dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746)));
                                float _3754 = dot(vec3(_869, _872, _875), vec3((-0.0) - _3164, (-0.0) - _3165, (-0.0) - _3166));
                                float _4901 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3757 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3758 = dot(vec3(_869, _872, _875), vec3(_3750 * _3744, _3750 * _3745, _3750 * _3746));
                                float _4912 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3761 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3765 = ((_3761 * _3761) * (_3743 + (-1.0))) + 1.0;
                                float _3766 = _3703 * _3742;
                                float _3767 = _3766 * _3766;
                                float _3773 = ((1.0 - _3767) * dot(vec3(_869, _872, _875), vec3(_3690, _3691, _3692))) + _3767;
                                float _4923 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3775 = 1.0 - _3742;
                                float _3785 = (0.5 / (((_3774 * ((_3757 * _3775) + _3742)) + 9.9999999392252902907785028219223e-09) + (((_3774 * _3775) + _3742) * _3757))) * _3774;
                                float _4934 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3795 = (_3720 * _3697) * (((_3743 * 3.1415927410125732421875) * (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) / ((_3765 * _3765) * ((_3710 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3721 * _3567.z;
                                frontier_phi_88_pred_1 = _3721 * _3567.y;
                                frontier_phi_88_pred_2 = _3721 * _3567.x;
                                frontier_phi_88_pred_3 = _3795 * _3579.z;
                                frontier_phi_88_pred_4 = _3795 * _3579.y;
                                frontier_phi_88_pred_5 = _3795 * _3579.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3804 = frontier_phi_88_pred;
                            _3803 = frontier_phi_88_pred_1;
                            _3802 = frontier_phi_88_pred_2;
                            _3801 = frontier_phi_88_pred_3;
                            _3800 = frontier_phi_88_pred_4;
                            _3799 = frontier_phi_88_pred_5;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            _3508 = _3801 + _3521;
                            if (_3526 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3526;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3511;
                        frontier_phi_82_pred_1 = _3510;
                        frontier_phi_82_pred_2 = _3509;
                        frontier_phi_82_pred_3 = _3508;
                        frontier_phi_82_pred_4 = _3507;
                        frontier_phi_82_pred_5 = _3506;
                    }
                    _3149 = frontier_phi_82_pred;
                    _3147 = frontier_phi_82_pred_1;
                    _3145 = frontier_phi_82_pred_2;
                    _3143 = frontier_phi_82_pred_3;
                    _3141 = frontier_phi_82_pred_4;
                    _3139 = frontier_phi_82_pred_5;
                    uint _3305 = _3304 + 1u;
                    if (_3305 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3298 = _3139;
                        _3299 = _3141;
                        _3300 = _3143;
                        _3301 = _3145;
                        _3302 = _3147;
                        _3303 = _3149;
                        _3304 = _3305;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3145;
                frontier_phi_63_64_ladder_1 = _3149;
                frontier_phi_63_64_ladder_2 = _3147;
                frontier_phi_63_64_ladder_3 = _3143;
                frontier_phi_63_64_ladder_4 = _3141;
                frontier_phi_63_64_ladder_5 = _3139;
            }
            else
            {
                frontier_phi_63_64_ladder = _3023;
                frontier_phi_63_64_ladder_1 = _3027;
                frontier_phi_63_64_ladder_2 = _3025;
                frontier_phi_63_64_ladder_3 = _3021;
                frontier_phi_63_64_ladder_4 = _3019;
                frontier_phi_63_64_ladder_5 = _3017;
            }
            _3138 = frontier_phi_63_64_ladder_5;
            _3140 = frontier_phi_63_64_ladder_4;
            _3142 = frontier_phi_63_64_ladder_3;
            _3144 = frontier_phi_63_64_ladder;
            _3146 = frontier_phi_63_64_ladder_2;
            _3148 = frontier_phi_63_64_ladder_1;
        }
        float _3153 = isnan(1.0) ? _913 : (isnan(_913) ? 1.0 : min(_913, 1.0));
        _2950 = (_3153 * _3144) + _2481;
        _2952 = (_3153 * _3146) + _2483;
        _2954 = (_3153 * _3148) + _2485;
        _2956 = ((_3138 * 0.039999999105930328369140625) * _3153) + _2804;
        _2958 = ((_3140 * 0.039999999105930328369140625) * _3153) + _2806;
        _2960 = ((_3142 * 0.039999999105930328369140625) * _3153) + _2808;
    }
    else
    {
        _2950 = _2481;
        _2952 = _2483;
        _2954 = _2485;
        _2956 = _2804;
        _2958 = _2806;
        _2960 = _2808;
    }
    float _4950 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4961 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4972 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _2977 = ((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2950 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _913))) + ((_2956 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1749)) * cbPerFrame._m0[3u].x);
    float _2978 = ((isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_2952 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _913))) + ((_2958 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1749)) * cbPerFrame._m0[3u].x);
    float _2979 = ((isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_2954 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _913))) + ((_2960 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1749)) * cbPerFrame._m0[3u].x);
    uint _2980 = _244 + 6u;
    float _2988 = _850 / cbSceneParam._m0[86u].x;
    float _2989 = _851 / cbSceneParam._m0[86u].y;
    vec4 _3003 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2988, _2989, (log2((isnan(cbSceneParam._m0[77u].w) ? _772 : (isnan(_772) ? cbSceneParam._m0[77u].w : min(_772, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3005 = _3003.x;
    float _3006 = _3003.y;
    float _3007 = _3003.z;
    float _3008 = _3003.w;
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    if (_772 > cbSceneParam._m0[78u].w)
    {
        float _3042 = isnan(_772) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _772 : min(cbSceneParam._m0[80u].w, _772));
        float _3043 = _3042 / _772;
        float _3054 = _3043 * _823;
        float _3055 = _824 * _3043;
        float _3056 = (-0.0) - _3055;
        float _3058 = _3043 * _825;
        float _3060 = (cbSceneParam._m0[77u].w * _3056) / _3042;
        float _3061 = _3060 + cbSceneParam._m0[79u].w;
        float _3062 = cbSceneParam._m0[79u].w - _3055;
        float _3068 = sqrt(((_3054 * _3054) + (_3055 * _3055)) + (_3058 * _3058));
        float _3071 = (1.0 - (cbSceneParam._m0[77u].w / _3042)) * _3068;
        float _3076 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3078 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3255;
        if (abs((_3056 - _3060) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3255 = ((((_3061 > 0.0) ? exp2(_3076 * _3061) : (2.0 - exp2(_3078 * _3061))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3071;
        }
        else
        {
            float _3199 = 1.0 / cbSceneParam._m0[80u].x;
            float _3200 = isnan(_3062) ? _3061 : (isnan(_3061) ? _3062 : max(_3061, _3062));
            float _3201 = isnan(_3062) ? _3061 : (isnan(_3061) ? _3062 : min(_3061, _3062));
            float _3210 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : min(_3200, 0.0));
            float _3211 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : min(_3201, 0.0));
            _3255 = ((abs(_3068 / _3056) * cbSceneParam._m0[80u].y) * ((((_3210 - _3211) * 2.0) - ((exp2(_3076 * (isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0)))) - exp2(_3076 * (isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))))) * _3199)) - ((exp2(_3078 * _3210) - exp2(_3078 * _3211)) * _3199))) + (_3071 * cbSceneParam._m0[80u].z);
        }
        vec4 _3257 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2988, _2989, 1.0), 0.0);
        float _3266 = exp2((_3255 * (-1.44269502162933349609375)) * (1.0 - _3257.w));
        float _3267 = log2(_3266);
        float _3283 = log2(_3008);
        _3080 = (exp2(_3283 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3267 * cbSceneParam._m0[78u].x)) * _3257.x) / cbSceneParam._m0[78u].x)) + _3005;
        _3082 = (exp2(_3283 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3267 * cbSceneParam._m0[78u].y)) * _3257.y) / cbSceneParam._m0[78u].y)) + _3006;
        _3084 = (exp2(_3283 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3267 * cbSceneParam._m0[78u].z)) * _3257.z) / cbSceneParam._m0[78u].z)) + _3007;
        _3086 = _3266 * _3008;
    }
    else
    {
        _3080 = _3005;
        _3082 = _3006;
        _3084 = _3007;
        _3086 = _3008;
    }
    bool _3293;
    vec4 _3096;
    vec4 _3118;
    float _3120;
    float _3124;
    float _3125;
    float _3126;
    float _3127;
    bool _3137;
    for (;;)
    {
        _3096 = cbMatDynParam._m0[0u];
        float _3098 = roundEven(_3096.y);
        bool _3099 = _3098 == 3.0;
        float _3100 = log2(_3086);
        float _3107 = exp2(_3100 * cbSceneParam._m0[78u].x) * _2977;
        float _3108 = exp2(_3100 * cbSceneParam._m0[78u].y) * _2978;
        float _3109 = exp2(_3100 * cbSceneParam._m0[78u].z) * _2979;
        float _3116 = _839 + (-0.5);
        _3118 = cbMtdParam._m0[1u];
        _3120 = _3118.y * _3116;
        float _3123 = (_3098 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3124 = _3123 * (_3099 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3080)));
        _3125 = _3123 * (_3099 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3082)));
        _3126 = _3123 * (_3099 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3084)));
        _3127 = _3116 * 0.999000012874603271484375;
        _3137 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3137)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _3127) < 0.5)
            {
                _3293 = true;
                break;
            }
        }
        uint _3234 = _888 + uint(_3096.w);
        if ((cbInstanceData._m0[_3234].w < 1.0) && ((cbInstanceData._m0[_3234].w + _3127) < 0.5))
        {
            _3293 = true;
            break;
        }
        if ((_3120 + 1.0) < _3118.x)
        {
            _3293 = true;
            break;
        }
        _3293 = false;
        break;
    }
    float _3497;
    if (_3293)
    {
        discard_state = true;
        _3497 = 0.0;
    }
    else
    {
        _3497 = cbInstanceData._m0[_2980].w;
    }
    SV_Target.x = _3124;
    SV_Target.y = _3125;
    SV_Target.z = _3126;
    SV_Target.w = _3497;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2980].w;
    discard_exit();
}


