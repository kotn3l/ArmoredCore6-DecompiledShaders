#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1276;
float _3637;
float _3638;
float _3639;
float _3640;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _374 = _372.x;
    float _386 = dot(vec4(_374, _372.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _403 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _335.x) * 2.0) - ((((_374 - _386) * cbMtdParam._m0[24u].z) + _386) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3649 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _411 = (_404 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _412 = (_404 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _413 = (_404 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _430 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _462 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _476 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _335.y) * 2.0) - ((((_452 - _462) * cbMtdParam._m0[24u].z) + _462) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3660 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _484 = (_477 * ((_430.x * cbMtdParam._m0[13u].x) - _411)) + _411;
    float _485 = (_477 * ((_430.y * cbMtdParam._m0[13u].y) - _412)) + _412;
    float _486 = (_477 * ((_430.z * cbMtdParam._m0[13u].z) - _413)) + _413;
    vec4 _499 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _527 = ((_499.x - _518) * _404) + _518;
    float _528 = ((_499.y - _519) * _404) + _519;
    float _529 = ((_499.z - _520) * _404) + _520;
    vec4 _541 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _554 = ((_541.z - _529) * _477) + _529;
    float _557 = ((((_541.x - _527) * _477) + _527) * 2.0) + (-1.0);
    float _559 = ((((_541.y - _528) * _477) + _528) * 2.0) + (-1.0);
    float _560 = dot(vec2(_557, _559), vec2(_557, _559));
    float _3671 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = sqrt(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _591 = (((_579.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _557;
    float _592 = (((_579.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _559;
    vec4 _604 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _635 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_606 - _607) * cbMtdParam._m0[24u].y) + _607) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3682 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _644 = ((((cbMtdParam._m0[10u].x - _484) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _636) + _484;
    float _645 = ((((cbMtdParam._m0[10u].y - _485) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _636) + _485;
    float _646 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _486)) * _636) + _486;
    float _650 = (cbMtdParam._m0[19u].w * (_579.z - _554)) + _554;
    float _654 = ((cbMtdParam._m0[23u].y - _650) * _636) + _650;
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _679 = (_673.x * 2.0) + (-1.0);
    float _680 = (_673.y * 2.0) + (-1.0);
    float _681 = dot(vec2(_679, _680), vec2(_679, _680));
    float _3693 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _697 = (_636 * (((cbMtdParam._m0[22u].z * _591) - _591) + _679)) + _591;
    float _698 = (_636 * (((cbMtdParam._m0[22u].z * _592) - _592) + _680)) + _592;
    float _699 = (_636 * (sqrt(1.0 - (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) - _565)) + _565;
    float _701 = cbMtdParam._m0[22u].x + _579.w;
    float _704 = fma(_699, _236 * NORMAL.x, fma(_698, _243 * TANGENT.x, (_229 * _221) * _697));
    float _707 = fma(_699, _236 * NORMAL.y, fma(_698, _243 * TANGENT.y, (_229 * _222) * _697));
    float _710 = fma(_699, _236 * NORMAL.z, fma(_698, _243 * TANGENT.z, (_229 * _223) * _697));
    float _714 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    float _715 = _714 * _704;
    float _716 = _714 * _707;
    float _717 = _714 * _710;
    float _3704 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _718 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _3726 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _3737 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3748 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _736 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _787 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _777);
    float _788 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _777);
    float _789 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _777);
    float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
    float _794 = _787 * _793;
    float _795 = _788 * _793;
    float _796 = _789 * _793;
    vec4 _801 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _803 = _801.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _957 = sqrt(((_787 * _787) + (_788 * _788)) + (_789 * _789));
        float _963 = (cbMatDynParam._m0[5u].x * _957) + cbMatDynParam._m0[5u].y;
        float _3759 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _968 = (cbMatDynParam._m0[5u].z * _957) + cbMatDynParam._m0[5u].w;
        float _3770 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) - _964)) + _964) < ((_803 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _814 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _815 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _833 = fma(_717, cbSceneParam._m0[5u].z, fma(_716, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _715));
    float _836 = fma(_717, cbSceneParam._m0[6u].z, fma(_716, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _715));
    float _839 = fma(_717, cbSceneParam._m0[7u].z, fma(_716, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _715));
    uint _852 = _249 + 9u;
    uint _853 = _852 + uint(cbMatDynParam._m0[0u].w);
    float _859 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_853].x;
    float _860 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_853].y;
    float _861 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * cbInstanceData._m0[_853].z;
    float _3781 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _3792 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    vec4 _873 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _814, cbSceneParam._m0[86u].y * _815));
    float _877 = ((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * TEXCOORD_5.w) * _873.x;
    float _878 = dot(vec3(_715, _716, _717), vec3(_794, _795, _796));
    float _881 = _878 * 2.0;
    float _885 = (_881 * _715) - _794;
    float _886 = (_881 * _716) - _795;
    float _887 = (_881 * _717) - _796;
    float _891 = abs(dot(vec3(_794, _795, _796), vec3(_715, _716, _717)));
    float _3814 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _893 = sqrt(_718);
    float _906 = exp2((_893 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_893 * 3.0));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1275;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1000 = fma(_946, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938));
        float _1004 = fma(_946, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938));
        float _1008 = fma(_946, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938));
        float _1033 = _938 + _715;
        float _1034 = _942 + _716;
        float _1035 = _946 + _717;
        float _1045 = fma(_1035, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033)) - _1000;
        float _1046 = fma(_1035, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033)) - _1004;
        float _1047 = fma(_1035, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033)) - _1008;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1000 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1004 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[34u].z) + ((((((_1008 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1103 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1069.x + (-0.5));
        float _1105 = _1103 * (_1069.y + (-0.5));
        float _1106 = _1103 * (_1069.z + (-0.5));
        float _1113 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1076.x + (-0.5));
        float _1115 = _1113 * (_1076.y + (-0.5));
        float _1116 = _1113 * (_1076.z + (-0.5));
        float _1123 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1083.x + (-0.5));
        float _1125 = _1123 * (_1083.y + (-0.5));
        float _1126 = _1123 * (_1083.z + (-0.5));
        float _1133 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1090.x + (-0.5));
        float _1135 = _1133 * (_1090.y + (-0.5));
        float _1136 = _1133 * (_1090.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1157 = (dot(vec3(_715, _716, _717), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1167 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3862 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1169 + 1.0))) + _1174) * _1137;
        float _1184 = _1105 * 0.5;
        float _1185 = _1115 * 0.5;
        float _1186 = _1125 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_715, _716, _717), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3895 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1211 + 1.0))) + _1216) * _1138;
        float _1226 = _1106 * 0.5;
        float _1227 = _1116 * 0.5;
        float _1228 = _1126 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_715, _716, _717), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3928 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1253 + 1.0))) + _1258) * _1139;
        _1275 = _1106;
        _1277 = _1105;
        _1278 = _1104;
        _1279 = _1116;
        _1280 = _1115;
        _1281 = _1114;
        _1282 = _1126;
        _1283 = _1125;
        _1284 = _1124;
        _1285 = _1139;
        _1286 = _1138;
        _1287 = _1137;
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _1276;
        _1277 = _1276;
        _1278 = _1276;
        _1279 = _1276;
        _1280 = _1276;
        _1281 = _1276;
        _1282 = _1276;
        _1283 = _1276;
        _1284 = _1276;
        _1285 = _1276;
        _1286 = _1276;
        _1287 = _1276;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1317 = fma(_946, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938));
        float _1321 = fma(_946, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938));
        float _1325 = fma(_946, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938));
        float _1348 = _938 + _715;
        float _1349 = _942 + _716;
        float _1350 = _946 + _717;
        float _1360 = fma(_1350, cbModelParam._m0[30u].z, fma(_1349, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1348)) - _1317;
        float _1361 = fma(_1350, cbModelParam._m0[31u].z, fma(_1349, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1348)) - _1321;
        float _1362 = fma(_1350, cbModelParam._m0[32u].z, fma(_1349, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1348)) - _1325;
        float _1366 = inversesqrt(dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362)));
        float _1379 = ((_1366 * _1360) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1317 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1366 * _1361) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1321 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1366 * _1362) / cbModelParam._m0[35u].z) + ((((((_1325 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        float _1416 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1383.x + (-0.5));
        float _1418 = _1416 * (_1383.y + (-0.5));
        float _1419 = _1416 * (_1383.z + (-0.5));
        float _1426 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1390.x + (-0.5));
        float _1428 = _1426 * (_1390.y + (-0.5));
        float _1429 = _1426 * (_1390.z + (-0.5));
        float _1436 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1397.x + (-0.5));
        float _1438 = _1436 * (_1397.y + (-0.5));
        float _1439 = _1436 * (_1397.z + (-0.5));
        float _1446 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1404.x + (-0.5));
        float _1448 = _1446 * (_1404.y + (-0.5));
        float _1449 = _1446 * (_1404.z + (-0.5));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = _1417 * 0.5;
        float _1454 = _1427 * 0.5;
        float _1455 = _1437 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_715, _716, _717), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _3991 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1480 + 1.0))) + _1485) * _1450;
        float _1495 = _1418 * 0.5;
        float _1496 = _1428 * 0.5;
        float _1497 = _1438 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_715, _716, _717), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4024 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1522 + 1.0))) + _1527) * _1451;
        float _1537 = _1419 * 0.5;
        float _1538 = _1429 * 0.5;
        float _1539 = _1439 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_715, _716, _717), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4057 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1564 + 1.0))) + _1569) * _1452;
        _1586 = _1419;
        _1587 = _1418;
        _1588 = _1417;
        _1589 = _1429;
        _1590 = _1428;
        _1591 = _1427;
        _1592 = _1439;
        _1593 = _1438;
        _1594 = _1437;
        _1595 = _1452;
        _1596 = _1451;
        _1597 = _1450;
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
    }
    else
    {
        _1586 = _1276;
        _1587 = _1276;
        _1588 = _1276;
        _1589 = _1276;
        _1590 = _1276;
        _1591 = _1276;
        _1592 = _1276;
        _1593 = _1276;
        _1594 = _1276;
        _1595 = _1276;
        _1596 = _1276;
        _1597 = _1276;
        _1598 = 0.0;
        _1599 = 0.0;
        _1600 = 0.0;
    }
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1288)) + _1288;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1289)) + _1289;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1290)) + _1290;
    float _1633 = fma(_1612, cbSceneParam._m0[89u].z, fma(_1611, cbSceneParam._m0[89u].y, _1610 * cbSceneParam._m0[89u].x));
    float _1636 = fma(_1612, cbSceneParam._m0[90u].z, fma(_1611, cbSceneParam._m0[90u].y, _1610 * cbSceneParam._m0[90u].x));
    float _1639 = fma(_1612, cbSceneParam._m0[91u].z, fma(_1611, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1610));
    float _1654 = _885 * 0.5;
    float _1655 = _886 * 0.5;
    float _1656 = _887 * 0.5;
    float _1657 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1660 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1663 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1697;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1670 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1275, _1279, _1282, _1285));
        float _1674 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1678 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1685 = dot(vec4(cbModelParam._m0[39u]), vec4(_1654, _1655, _1656, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1685) ? 0.0 : (isnan(0.0) ? _1685 : max(0.0, _1685))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1708;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1699 = dot(vec4(cbModelParam._m0[40u]), vec4(_1654, _1655, _1656, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1699) ? 0.0 : (isnan(0.0) ? _1699 : max(0.0, _1699))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1712 = (_1708 * cbModelParam._m0[1u].x) + (_1697 * (1.0 - cbModelParam._m0[1u].x));
    float _1722 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _718);
    float _1723 = isnan(_1722) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1722 : min(cbModelParam._m0[25u].z, _1722));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1772 = fma(_946, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938)) + cbModelParam._m0[13u].w;
        float _1776 = fma(_946, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938)) + cbModelParam._m0[14u].w;
        float _1780 = fma(_946, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938)) + cbModelParam._m0[15u].w;
        float _1783 = fma(_887, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885));
        float _1786 = fma(_887, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885));
        float _1789 = fma(_887, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885));
        float _1817;
        if (_1783 > 0.0)
        {
            _1817 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1817 = frontier_phi_17_15_ladder;
        }
        float _2019;
        if (_1786 > 0.0)
        {
            _2019 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2019 = frontier_phi_26_22_ladder;
        }
        float _2262;
        if (_1789 > 0.0)
        {
            _2262 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2262 = frontier_phi_38_33_ladder;
        }
        float _2264 = isnan(_2019) ? _1817 : (isnan(_1817) ? _2019 : min(_1817, _2019));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1783) + _1772;
        float _2270 = (_2265 * _1786) + _1776;
        float _2271 = (_2265 * _1789) + _1780;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2272;
        float _2276 = _2272 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 > _2276) || ((_2270 < _2274) || ((_2269 < _2274) || (_2269 > _2276))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2395 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2271, cbModelParam._m0[9u].z, fma(_2270, cbModelParam._m0[9u].y, _2269 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2271, cbModelParam._m0[10u].z, fma(_2270, cbModelParam._m0[10u].y, _2269 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2271, cbModelParam._m0[11u].z, fma(_2270, cbModelParam._m0[11u].y, _2269 * cbModelParam._m0[11u].x))), _1723);
            frontier_phi_16_38_ladder = _2395.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2395.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2395.x * cbModelParam._m0[1u].y;
        }
        _1805 = frontier_phi_16_38_ladder_2;
        _1807 = frontier_phi_16_38_ladder_1;
        _1809 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_885, _886, _887), _1723);
        _1805 = _1793.x * cbModelParam._m0[1u].y;
        _1807 = _1793.y * cbModelParam._m0[1u].y;
        _1809 = _1793.z * cbModelParam._m0[1u].y;
    }
    float _1813 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _718);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1813 : min(cbModelParam._m0[25u].w, _1813));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1869 = fma(_946, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938)) + cbModelParam._m0[21u].w;
        float _1873 = fma(_946, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938)) + cbModelParam._m0[22u].w;
        float _1877 = fma(_946, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938)) + cbModelParam._m0[23u].w;
        float _1880 = fma(_887, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885));
        float _1883 = fma(_887, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885));
        float _1886 = fma(_887, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885));
        float _2024;
        if (_1880 > 0.0)
        {
            _2024 = abs((1.0 - _1869) / _1880);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1869 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2024 = frontier_phi_28_24_ladder;
        }
        float _2289;
        if (_1883 > 0.0)
        {
            _2289 = abs((1.0 - _1873) / _1883);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1873 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2289 = frontier_phi_40_35_ladder;
        }
        float _2494;
        if (_1886 > 0.0)
        {
            _2494 = abs((1.0 - _1877) / _1886);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1877 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2494 = frontier_phi_49_46_ladder;
        }
        float _2496 = isnan(_2289) ? _2024 : (isnan(_2024) ? _2289 : min(_2024, _2289));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1880) + _1869;
        float _2502 = (_2497 * _1883) + _1873;
        float _2503 = (_2497 * _1886) + _1877;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2504;
        float _2507 = _2504 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2503 > _2507) || ((_2503 < _2505) || ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 < _2505) || (_2501 > _2507))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2702 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2503, cbModelParam._m0[17u].z, fma(_2502, cbModelParam._m0[17u].y, _2501 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2503, cbModelParam._m0[18u].z, fma(_2502, cbModelParam._m0[18u].y, _2501 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2503, cbModelParam._m0[19u].z, fma(_2502, cbModelParam._m0[19u].y, _2501 * cbModelParam._m0[19u].x))), _1814);
            frontier_phi_25_49_ladder = _2702.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2702.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2702.x * cbModelParam._m0[1u].z;
        }
        _1905 = frontier_phi_25_49_ladder_2;
        _1907 = frontier_phi_25_49_ladder_1;
        _1909 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1889 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_885, _886, _887), _1814);
        _1905 = _1889.x * cbModelParam._m0[1u].z;
        _1907 = _1889.y * cbModelParam._m0[1u].z;
        _1909 = _1889.z * cbModelParam._m0[1u].z;
    }
    float _1921 = ((((1.0 - _906) * ((_893 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_906 * _893)) * _877;
    float _1922 = _1921 * ((cbModelParam._m0[1u].w * (_1905 - _1805)) + _1805);
    float _1923 = _1921 * ((cbModelParam._m0[1u].w * (_1907 - _1807)) + _1807);
    float _1924 = _1921 * ((cbModelParam._m0[1u].w * (_1909 - _1809)) + _1809);
    float _1927 = fma(_1924, cbSceneParam._m0[89u].z, fma(_1923, cbSceneParam._m0[89u].y, _1922 * cbSceneParam._m0[89u].x));
    float _1930 = fma(_1924, cbSceneParam._m0[90u].z, fma(_1923, cbSceneParam._m0[90u].y, _1922 * cbSceneParam._m0[90u].x));
    float _1933 = fma(_1924, cbSceneParam._m0[91u].z, fma(_1923, cbSceneParam._m0[91u].y, _1922 * cbSceneParam._m0[91u].x));
    uvec4 _1943 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1945 = _1943.x * 14u;
    uint _1946 = _1945 + 13u;
    float _1953 = _877 + (-1.0);
    float _1958 = (cbLight._m0[_1946].x * _1953) + 1.0;
    float _1959 = (cbLight._m0[_1946].y * _1953) + 1.0;
    float _1960 = (cbLight._m0[_1946].z * _1953) + 1.0;
    float _1961 = (cbLight._m0[_1946].w * _1953) + 1.0;
    uint _1962 = _1945 + 5u;
    float _1968 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
    uint _1972 = _1945 + 4u;
    float _1978 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
    uint _1982 = _1945 | 1u;
    float _1993 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_715, _716, _717));
    float _1996 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_715, _716, _717));
    float _4193 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _4204 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2001 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.3183098733425140380859375;
    float _2003 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * 0.3183098733425140380859375;
    float _2010 = ((cbLight._m0[_1962].x * _1968) * _2003) + ((cbLight._m0[_1972].x * _1978) * _2001);
    float _2011 = ((_1968 * cbLight._m0[_1962].y) * _2003) + ((_1978 * cbLight._m0[_1972].y) * _2001);
    float _2012 = ((_1968 * cbLight._m0[_1962].z) * _2003) + ((_1978 * cbLight._m0[_1972].z) * _2001);
    uvec4 _2016 = floatBitsToUint(cbLight._m0[_1945 + 12u]);
    bool _2018 = _2016.x == 0u;
    float _2029;
    float _2031;
    float _2033;
    if (_2018)
    {
        _2029 = _2010;
        _2031 = _2011;
        _2033 = _2012;
    }
    else
    {
        uint _2037 = _1945 + 6u;
        float _2053 = (dot(vec3(cbLight._m0[_1945 + 2u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2054 = _2053 * _2053;
        float _4215 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2055 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2056 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2029 = (((cbLight._m0[_2037].x * 0.3183098733425140380859375) * _2055) * _2056) + _2010;
        _2031 = (((cbLight._m0[_2037].y * 0.3183098733425140380859375) * _2055) * _2056) + _2011;
        _2033 = (((cbLight._m0[_2037].z * 0.3183098733425140380859375) * _2055) * _2056) + _2012;
    }
    bool _2036 = _2016.y == 0u;
    float _2074;
    float _2076;
    float _2078;
    if (_2036)
    {
        _2074 = _2029;
        _2076 = _2031;
        _2078 = _2033;
    }
    else
    {
        uint _2233 = _1945 + 7u;
        float _2249 = (dot(vec3(cbLight._m0[_1945 + 3u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4231 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2252 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2074 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _2029;
        _2076 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2031;
        _2078 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2033;
    }
    uint _2081 = _1945 + 8u;
    float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _718) * 0.949999988079071044921875);
    float _2095 = _2094 * _2094;
    float _2096 = cbLight._m0[_1945].x + _794;
    float _2097 = cbLight._m0[_1945].y + _795;
    float _2098 = cbLight._m0[_1945].z + _796;
    float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
    float _2103 = _2102 * _2096;
    float _2104 = _2102 * _2097;
    float _2105 = _2102 * _2098;
    float _2106 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_1945].xyz));
    float _4247 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2110 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2111 = dot(vec3(_715, _716, _717), vec3(_2103, _2104, _2105));
    float _4269 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_2103, _2104, _2105));
    float _4280 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2095 * _2095;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2134 = (exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2135 = 1.0 - _2095;
    float _2146 = (0.5 / (((_2110 * ((_2109 * _2135) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2135) + _2095) * _2109))) * _2109;
    float _4291 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    uint _2159 = _1945 + 9u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _718) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_1982].x + _794;
    float _2173 = cbLight._m0[_1982].y + _795;
    float _2174 = cbLight._m0[_1982].z + _796;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_1982].xyz));
    float _4302 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2186 = dot(vec3(_715, _716, _717), vec3(_2179, _2180, _2181));
    float _4313 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2179, _2180, _2181));
    float _4324 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2171 * _2171;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2207 = (exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2208 = 1.0 - _2171;
    float _2218 = (0.5 / (((_2110 * ((_2185 * _2208) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2208) + _2171) * _2185))) * _2185;
    float _4335 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    float _2230 = (((_2207 * cbLight._m0[_2159].x) * _2220) * _1968) + (((_2134 * cbLight._m0[_2081].x) * _2148) * _1978);
    float _2231 = (((_2207 * cbLight._m0[_2159].y) * _2220) * _1968) + (((_2134 * cbLight._m0[_2081].y) * _2148) * _1978);
    float _2232 = (((_2207 * cbLight._m0[_2159].z) * _2220) * _1968) + (((_2134 * cbLight._m0[_2081].z) * _2148) * _1978);
    float _2294;
    float _2296;
    float _2298;
    if (_2018)
    {
        _2294 = _2230;
        _2296 = _2231;
        _2298 = _2232;
    }
    else
    {
        uint _2300 = _1945 + 2u;
        uint _2304 = _1945 + 10u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _718) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _794;
        float _2321 = cbLight._m0[_2300].y + _795;
        float _2322 = cbLight._m0[_2300].z + _796;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2300].xyz));
        float _4346 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2334 = dot(vec3(_715, _716, _717), vec3(_2327, _2328, _2329));
        float _4357 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4368 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2355 = (exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2356 = 1.0 - _2319;
        float _2366 = (0.5 / (((_2110 * ((_2333 * _2356) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2356) + _2319) * _2333))) * _2333;
        float _4379 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2368 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2369 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2294 = (((_2355 * cbLight._m0[_2304].x) * _2368) * _2369) + _2230;
        _2296 = (((_2355 * cbLight._m0[_2304].y) * _2368) * _2369) + _2231;
        _2298 = (((_2355 * cbLight._m0[_2304].z) * _2368) * _2369) + _2232;
    }
    float _2404;
    float _2406;
    float _2408;
    if (_2036)
    {
        _2404 = _2294;
        _2406 = _2296;
        _2408 = _2298;
    }
    else
    {
        uint _2415 = _1945 + 3u;
        uint _2419 = _1945 + 11u;
        float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _718) * 0.949999988079071044921875);
        float _2434 = _2433 * _2433;
        float _2435 = cbLight._m0[_2415].x + _794;
        float _2436 = cbLight._m0[_2415].y + _795;
        float _2437 = cbLight._m0[_2415].z + _796;
        float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
        float _2442 = _2441 * _2435;
        float _2443 = _2441 * _2436;
        float _2444 = _2441 * _2437;
        float _2445 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2415].xyz));
        float _4395 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2449 = dot(vec3(_715, _716, _717), vec3(_2442, _2443, _2444));
        float _4406 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2453 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2442, _2443, _2444));
        float _4417 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2457 = _2434 * _2434;
        float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
        float _2470 = (exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2471 = 1.0 - _2434;
        float _2481 = (0.5 / (((_2110 * ((_2448 * _2471) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2471) + _2434) * _2448))) * _2448;
        float _4428 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2483 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
        float _2484 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2404 = (((_2470 * cbLight._m0[_2419].x) * _2483) * _2484) + _2294;
        _2406 = (((_2470 * cbLight._m0[_2419].y) * _2483) * _2484) + _2296;
        _2408 = (((_2470 * cbLight._m0[_2419].z) * _2483) * _2484) + _2298;
    }
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_1943.y == 0u)
    {
        float _2559 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2560 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2559;
        float _2561 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2559;
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2559;
        uvec4 _2574 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2575 = _2574.x;
        uint _2586 = uint((float(_2574.y) * floor(float(uint(cbSceneParam._m0[85u].y * _815) / _2575))) + floor(float(uint(cbSceneParam._m0[85u].x * _814) / _2575)));
        float _2596 = (log2(_2562 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2597 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        uint _2600 = uint(isnan(14.0) ? _2597 : (isnan(_2597) ? 14.0 : min(_2597, 14.0)));
        uvec4 _2605 = texelFetch(g_lightClusterGridBuffer, int(((_2600 << 2u) + (_2586 << 6u)) >> 2u));
        uint _2606 = _2605.x;
        uint _2607 = _2574.z;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((((1u << ((_2607 >> 4u) & 15u)) + 4294967295u) & _2606) == 0u) || ((_2607 & 240u) == 0u))
        {
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
        }
        else
        {
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            uint _2866 = 0u;
            uint _2875;
            bool _2876;
            for (;;)
            {
                _2875 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_2866 << 2u)) >> 2u)).x;
                _2876 = _2875 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2876)
                {
                    frontier_phi_66_pred = _2860;
                    frontier_phi_66_pred_1 = _2865;
                    frontier_phi_66_pred_2 = _2864;
                    frontier_phi_66_pred_3 = _2863;
                    frontier_phi_66_pred_4 = _2862;
                    frontier_phi_66_pred_5 = _2861;
                }
                else
                {
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    uint _3011;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2875;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    for (;;)
                    {
                        uint _3015 = uint(findLSB(_3011)) + (_2866 << 5u);
                        uint _3012 = (_3011 + 4294967295u) & _3011;
                        uint _3017 = _3015 * 48u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 3u)).x));
                        uint _3037 = (_3015 * 48u) + 4u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3056 = (_3015 * 48u) + 8u;
                        vec3 _3067 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x));
                        float _3071 = _3031.x - _2560;
                        float _3072 = _3031.y - _2561;
                        float _3073 = _3031.z - _2562;
                        float _3074 = dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073));
                        float _3077 = inversesqrt(_3074);
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3081 = dot(vec3(_833, _836, _839), vec3(_3078, _3079, _3080));
                        float _3086 = 1.0 - (_3074 * _3031.w);
                        float _4454 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3087 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                        float _3088 = sqrt(_3074) * _3050.w;
                        float _3091 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                        float _3092 = _3091 * _3091;
                        float _3095 = ((1.0 - _3092) * _3081) + _3092;
                        float _3098 = _3088 * _3088;
                        float _3102 = ((isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))) * _3087) / ((_3098 * 0.699999988079071044921875) + 1.0);
                        float _3106 = (-0.0) - _2560;
                        float _3107 = (-0.0) - _2561;
                        float _3108 = (-0.0) - _2562;
                        float _3112 = inversesqrt(dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108)));
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3123 = exp2(log2(1.0 / ((_3098 * 3.5) + 5.0)) * 0.25);
                        float _3124 = 1.0 - _893;
                        float _3131 = sqrt(1.0 - ((1.0 - (_3124 * _3124)) * (1.0 - (_3123 * _3123))));
                        float _3132 = _3131 * _3131;
                        float _3133 = _3132 * _3132;
                        float _3134 = _3113 + _3078;
                        float _3135 = _3114 + _3079;
                        float _3136 = _3115 + _3080;
                        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                        float _3144 = dot(vec3(_833, _836, _839), vec3(_3113, _3114, _3115));
                        float _4470 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3147 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3148 = dot(vec3(_833, _836, _839), vec3(_3140 * _3134, _3140 * _3135, _3140 * _3136));
                        float _4481 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3151 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3155 = ((_3151 * _3151) * (_3133 + (-1.0))) + 1.0;
                        float _3156 = _3091 * _3132;
                        float _3157 = _3156 * _3156;
                        float _3160 = ((1.0 - _3157) * _3081) + _3157;
                        float _4492 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3161 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3162 = 1.0 - _3132;
                        float _3172 = (0.5 / (((_3161 * ((_3147 * _3162) + _3132)) + 9.9999999392252902907785028219223e-09) + (((_3161 * _3162) + _3132) * _3147))) * _3161;
                        float _4503 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3183 = (((_3133 * 3.1415927410125732421875) * (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) / ((_3155 * _3155) * ((_3098 * 2.1991131305694580078125) + 3.141590118408203125))) * _3087;
                        _2935 = (_3102 * _3050.x) + _3008;
                        _2936 = (_3102 * _3050.y) + _3009;
                        _2937 = (_3102 * _3050.z) + _3010;
                        _2932 = (_3183 * _3067.x) + _3005;
                        _2933 = (_3183 * _3067.y) + _3006;
                        _2934 = (_3183 * _3067.z) + _3007;
                        if (_3012 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _3012;
                        }
                    }
                    frontier_phi_66_pred = _2932;
                    frontier_phi_66_pred_1 = _2937;
                    frontier_phi_66_pred_2 = _2936;
                    frontier_phi_66_pred_3 = _2935;
                    frontier_phi_66_pred_4 = _2934;
                    frontier_phi_66_pred_5 = _2933;
                }
                _2708 = frontier_phi_66_pred;
                _2718 = frontier_phi_66_pred_1;
                _2716 = frontier_phi_66_pred_2;
                _2714 = frontier_phi_66_pred_3;
                _2712 = frontier_phi_66_pred_4;
                _2710 = frontier_phi_66_pred_5;
                uint _2867 = _2866 + 1u;
                if (_2867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2860 = _2708;
                    _2861 = _2710;
                    _2862 = _2712;
                    _2863 = _2714;
                    _2864 = _2716;
                    _2865 = _2718;
                    _2866 = _2867;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
        }
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.z;
        uint _2724 = (_2722 >> 8u) & 15u;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        if (((4294967295u << _2724) & _2606) == 0u)
        {
            _2828 = _2707;
            _2830 = _2709;
            _2832 = _2711;
            _2834 = _2713;
            _2836 = _2715;
            _2838 = _2717;
        }
        else
        {
            float _2853 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
            float _2854 = _2853 * _2560;
            float _2855 = _2853 * _2561;
            float _2856 = _2853 * _2562;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2724 < ((_2722 >> 12u) & 15u))
            {
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2988 = _2707;
                float _2989 = _2709;
                float _2990 = _2711;
                float _2991 = _2713;
                float _2992 = _2715;
                float _2993 = _2717;
                uint _2994 = _2724;
                uint _3003;
                bool _3004;
                for (;;)
                {
                    _3003 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_2994 << 2u)) >> 2u)).x;
                    _3004 = _3003 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3004)
                    {
                        frontier_phi_77_pred = _2993;
                        frontier_phi_77_pred_1 = _2992;
                        frontier_phi_77_pred_2 = _2991;
                        frontier_phi_77_pred_3 = _2990;
                        frontier_phi_77_pred_4 = _2989;
                        frontier_phi_77_pred_5 = _2988;
                    }
                    else
                    {
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3210 = _2988;
                        float _3211 = _2989;
                        float _3212 = _2990;
                        float _3213 = _2991;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        uint _3216 = _3003;
                        uint _3217;
                        vec4 _3242;
                        float _3243;
                        vec4 _3258;
                        vec3 _3270;
                        vec4 _3285;
                        vec4 _3300;
                        float _3346;
                        bool _3347;
                        for (;;)
                        {
                            uint _3227 = ((_2994 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3216));
                            _3217 = (_3216 + 4294967295u) & _3216;
                            uint _3229 = _3227 * 40u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            _3243 = _3242.w;
                            uint _3245 = (_3227 * 40u) + 4u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3227 * 40u) + 8u;
                            _3270 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x));
                            uint _3272 = (_3227 * 40u) + 16u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3287 = (_3227 * 40u) + 20u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3227 * 40u) + 24u;
                            vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3321 = (_3227 * 40u) + 28u;
                            vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            _3346 = fma(_2562, _3334.z, fma(_2561, _3334.y, _3334.x * _2560)) + _3334.w;
                            _3347 = !((fma(_2562, _3315.z, fma(_2561, _3315.y, _3315.x * _2560)) + _3315.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3347)
                            {
                                float _3374 = _3242.x - _2560;
                                float _3375 = _3242.y - _2561;
                                float _3376 = _3242.z - _2562;
                                float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                                float _3380 = inversesqrt(_3377);
                                float _3381 = _3380 * _3374;
                                float _3382 = _3380 * _3375;
                                float _3383 = _3380 * _3376;
                                float _3387 = 1.0 - (_3377 / (_3243 * _3243));
                                float _4514 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3392 = sqrt(_3377) * _3258.w;
                                float _3394 = 1.39999997615814208984375 / (_3392 + 1.39999997615814208984375);
                                float _3395 = _3394 * _3394;
                                float _3398 = ((1.0 - _3395) * dot(vec3(_3381, _3382, _3383), vec3(_833, _836, _839))) + _3395;
                                float _3401 = _3392 * _3392;
                                float _3405 = (fma(_2562, _3285.z, fma(_2561, _3285.y, _3285.x * _2560)) + _3285.w) / _3346;
                                float _3406 = (fma(_2562, _3300.z, fma(_2561, _3300.y, _3300.x * _2560)) + _3300.w) / _3346;
                                float _3410 = 1.0 - dot(vec2(_3405, _3406), vec2(_3405, _3406));
                                float _4530 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3411 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3412 = _3411 * (((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3388) / ((_3401 * 0.699999988079071044921875) + 1.0));
                                float _3424 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                                float _3425 = 1.0 - _893;
                                float _3432 = sqrt(1.0 - ((1.0 - (_3425 * _3425)) * (1.0 - (_3424 * _3424))));
                                float _3433 = _3432 * _3432;
                                float _3434 = _3433 * _3433;
                                float _3435 = _3381 - _2854;
                                float _3436 = _3382 - _2855;
                                float _3437 = _3383 - _2856;
                                float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                                float _3445 = dot(vec3(_833, _836, _839), vec3((-0.0) - _2854, (-0.0) - _2855, (-0.0) - _2856));
                                float _4541 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3448 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3449 = dot(vec3(_833, _836, _839), vec3(_3441 * _3435, _3441 * _3436, _3441 * _3437));
                                float _4552 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3452 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3456 = ((_3452 * _3452) * (_3434 + (-1.0))) + 1.0;
                                float _3457 = _3394 * _3433;
                                float _3458 = _3457 * _3457;
                                float _3464 = ((1.0 - _3458) * dot(vec3(_833, _836, _839), vec3(_3381, _3382, _3383))) + _3458;
                                float _4563 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3466 = 1.0 - _3433;
                                float _3476 = (0.5 / (((_3465 * ((_3448 * _3466) + _3433)) + 9.9999999392252902907785028219223e-09) + (((_3465 * _3466) + _3433) * _3448))) * _3465;
                                float _4574 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3486 = (_3411 * _3388) * (((_3434 * 3.1415927410125732421875) * (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) / ((_3456 * _3456) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3412 * _3258.y;
                                frontier_phi_83_pred_1 = _3412 * _3258.x;
                                frontier_phi_83_pred_2 = _3486 * _3270.z;
                                frontier_phi_83_pred_3 = _3486 * _3270.y;
                                frontier_phi_83_pred_4 = _3486 * _3270.x;
                                frontier_phi_83_pred_5 = _3412 * _3258.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3494 = frontier_phi_83_pred;
                            _3493 = frontier_phi_83_pred_1;
                            _3492 = frontier_phi_83_pred_2;
                            _3491 = frontier_phi_83_pred_3;
                            _3490 = frontier_phi_83_pred_4;
                            _3495 = frontier_phi_83_pred_5;
                            _3200 = _3493 + _3213;
                            _3201 = _3494 + _3214;
                            _3202 = _3495 + _3215;
                            _3197 = _3490 + _3210;
                            _3198 = _3491 + _3211;
                            _3199 = _3492 + _3212;
                            if (_3217 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3217;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3202;
                        frontier_phi_77_pred_1 = _3201;
                        frontier_phi_77_pred_2 = _3200;
                        frontier_phi_77_pred_3 = _3199;
                        frontier_phi_77_pred_4 = _3198;
                        frontier_phi_77_pred_5 = _3197;
                    }
                    _2839 = frontier_phi_77_pred;
                    _2837 = frontier_phi_77_pred_1;
                    _2835 = frontier_phi_77_pred_2;
                    _2833 = frontier_phi_77_pred_3;
                    _2831 = frontier_phi_77_pred_4;
                    _2829 = frontier_phi_77_pred_5;
                    uint _2995 = _2994 + 1u;
                    if (_2995 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2988 = _2829;
                        _2989 = _2831;
                        _2990 = _2833;
                        _2991 = _2835;
                        _2992 = _2837;
                        _2993 = _2839;
                        _2994 = _2995;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2833;
                frontier_phi_58_59_ladder_1 = _2839;
                frontier_phi_58_59_ladder_2 = _2837;
                frontier_phi_58_59_ladder_3 = _2835;
                frontier_phi_58_59_ladder_4 = _2831;
                frontier_phi_58_59_ladder_5 = _2829;
            }
            else
            {
                frontier_phi_58_59_ladder = _2711;
                frontier_phi_58_59_ladder_1 = _2717;
                frontier_phi_58_59_ladder_2 = _2715;
                frontier_phi_58_59_ladder_3 = _2713;
                frontier_phi_58_59_ladder_4 = _2709;
                frontier_phi_58_59_ladder_5 = _2707;
            }
            _2828 = frontier_phi_58_59_ladder_5;
            _2830 = frontier_phi_58_59_ladder_4;
            _2832 = frontier_phi_58_59_ladder;
            _2834 = frontier_phi_58_59_ladder_3;
            _2836 = frontier_phi_58_59_ladder_2;
            _2838 = frontier_phi_58_59_ladder_1;
        }
        float _2843 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
        _2619 = (_2843 * _2834) + _2074;
        _2621 = (_2843 * _2836) + _2076;
        _2623 = (_2843 * _2838) + _2078;
        _2625 = ((_2828 * 0.039999999105930328369140625) * _2843) + _2404;
        _2627 = ((_2830 * 0.039999999105930328369140625) * _2843) + _2406;
        _2629 = ((_2832 * 0.039999999105930328369140625) * _2843) + _2408;
    }
    else
    {
        _2619 = _2074;
        _2621 = _2076;
        _2623 = _2078;
        _2625 = _2404;
        _2627 = _2406;
        _2629 = _2408;
    }
    float _4590 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4601 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4612 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _2646 = ((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2619 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _877))) + ((_2625 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1712)) * cbPerFrame._m0[3u].x);
    float _2647 = ((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2621 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _877))) + ((_2627 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1712)) * cbPerFrame._m0[3u].x);
    float _2648 = ((isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2623 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _877))) + ((_2629 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1712)) * cbPerFrame._m0[3u].x);
    uint _2649 = _249 + 6u;
    float _2657 = _814 / cbSceneParam._m0[86u].x;
    float _2658 = _815 / cbSceneParam._m0[86u].y;
    vec4 _2672 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, (log2((isnan(cbSceneParam._m0[77u].w) ? _736 : (isnan(_736) ? cbSceneParam._m0[77u].w : min(_736, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2674 = _2672.x;
    float _2675 = _2672.y;
    float _2676 = _2672.z;
    float _2677 = _2672.w;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_736 > cbSceneParam._m0[78u].w)
    {
        float _2732 = isnan(_736) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _736 : min(cbSceneParam._m0[80u].w, _736));
        float _2733 = _2732 / _736;
        float _2744 = _2733 * _787;
        float _2745 = _788 * _2733;
        float _2746 = (-0.0) - _2745;
        float _2748 = _2733 * _789;
        float _2750 = (cbSceneParam._m0[77u].w * _2746) / _2732;
        float _2751 = _2750 + cbSceneParam._m0[79u].w;
        float _2752 = cbSceneParam._m0[79u].w - _2745;
        float _2758 = sqrt(((_2744 * _2744) + (_2745 * _2745)) + (_2748 * _2748));
        float _2761 = (1.0 - (cbSceneParam._m0[77u].w / _2732)) * _2758;
        float _2766 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2768 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2945;
        if (abs((_2746 - _2750) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2945 = ((((_2751 > 0.0) ? exp2(_2766 * _2751) : (2.0 - exp2(_2768 * _2751))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2761;
        }
        else
        {
            float _2889 = 1.0 / cbSceneParam._m0[80u].x;
            float _2890 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : max(_2751, _2752));
            float _2891 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : min(_2751, _2752));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            _2945 = ((abs(_2758 / _2746) * cbSceneParam._m0[80u].y) * ((((_2900 - _2901) * 2.0) - ((exp2(_2766 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0)))) - exp2(_2766 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))))) * _2889)) - ((exp2(_2768 * _2900) - exp2(_2768 * _2901)) * _2889))) + (_2761 * cbSceneParam._m0[80u].z);
        }
        vec4 _2947 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, 1.0), 0.0);
        float _2956 = exp2((_2945 * (-1.44269502162933349609375)) * (1.0 - _2947.w));
        float _2957 = log2(_2956);
        float _2973 = log2(_2677);
        _2770 = (exp2(_2973 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].x)) * _2947.x) / cbSceneParam._m0[78u].x)) + _2674;
        _2772 = (exp2(_2973 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].y)) * _2947.y) / cbSceneParam._m0[78u].y)) + _2675;
        _2774 = (exp2(_2973 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].z)) * _2947.z) / cbSceneParam._m0[78u].z)) + _2676;
        _2776 = _2956 * _2677;
    }
    else
    {
        _2770 = _2674;
        _2772 = _2675;
        _2774 = _2676;
        _2776 = _2677;
    }
    bool _2983;
    vec4 _2786;
    vec4 _2808;
    float _2810;
    float _2814;
    float _2815;
    float _2816;
    float _2817;
    bool _2827;
    for (;;)
    {
        _2786 = cbMatDynParam._m0[0u];
        float _2788 = roundEven(_2786.y);
        bool _2789 = _2788 == 3.0;
        float _2790 = log2(_2776);
        float _2797 = exp2(_2790 * cbSceneParam._m0[78u].x) * _2646;
        float _2798 = exp2(_2790 * cbSceneParam._m0[78u].y) * _2647;
        float _2799 = exp2(_2790 * cbSceneParam._m0[78u].z) * _2648;
        float _2806 = _803 + (-0.5);
        _2808 = cbMtdParam._m0[1u];
        _2810 = _2808.y * _2806;
        float _2813 = (_2788 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2814 = _2813 * (_2789 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2770)));
        _2815 = _2813 * (_2789 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2772)));
        _2816 = _2813 * (_2789 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2774)));
        _2817 = _2806 * 0.999000012874603271484375;
        _2827 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2827)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2817) < 0.5)
            {
                _2983 = true;
                break;
            }
        }
        uint _2924 = _852 + uint(_2786.w);
        if ((cbInstanceData._m0[_2924].w < 1.0) && ((cbInstanceData._m0[_2924].w + _2817) < 0.5))
        {
            _2983 = true;
            break;
        }
        if ((_2810 + 1.0) < _2808.x)
        {
            _2983 = true;
            break;
        }
        _2983 = false;
        break;
    }
    float _3188;
    if (_2983)
    {
        discard_state = true;
        _3188 = 0.0;
    }
    else
    {
        _3188 = cbInstanceData._m0[_2649].w;
    }
    SV_Target.x = _2814;
    SV_Target.y = _2815;
    SV_Target.z = _2816;
    SV_Target.w = _3188;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2649].w;
    discard_exit();
}


