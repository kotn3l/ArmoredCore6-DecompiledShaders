#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1243;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3832 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3843 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3854 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[24u].z) + _441) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3865 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _469 = (_324.x * cbMtdParam._m0[9u].x) * ((_459 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355);
    float _470 = (_324.y * cbMtdParam._m0[9u].y) * ((_459 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356);
    float _471 = (_324.z * cbMtdParam._m0[9u].z) * ((_459 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357);
    float _475 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _469;
    float _478 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _470;
    float _481 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _471;
    float _489 = (((_469 - _475) * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) + _475) * 4.55000019073486328125;
    float _491 = (((_470 - _478) * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) + _478) * 4.55000019073486328125;
    float _493 = (((_471 - _481) * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) + _481) * 4.55000019073486328125;
    vec4 _511 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _555 = _553.x;
    float _556 = _553.y;
    float _557 = _553.z;
    float _566 = ((_536.z - _557) * _459) + _557;
    float _569 = ((((_536.x - _555) * _459) + _555) * 2.0) + (-1.0);
    float _570 = ((((_536.y - _556) * _459) + _556) * 2.0) + (-1.0);
    float _571 = dot(vec2(_569, _570), vec2(_569, _570));
    float _3876 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _576 = sqrt(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _619 = _617.x;
    float _620 = 1.0 - _619;
    float _633 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_619 - _620) * cbMtdParam._m0[24u].w) + _620) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3887 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _641 = (_634 * (cbMtdParam._m0[17u].x - _489)) + _489;
    float _642 = (_634 * (cbMtdParam._m0[17u].y - _491)) + _491;
    float _643 = (_634 * (cbMtdParam._m0[17u].z - _493)) + _493;
    float _648 = (((_511.z - _566) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _566;
    float _652 = ((_592.z - _648) * cbMtdParam._m0[19u].w) + _648;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _672 = (_665.x * 2.0) + (-1.0);
    float _673 = (_665.y * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _3898 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _682 = (_634 * (_665.z - _652)) + _652;
    float _691 = (_569 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_511.x * 2.0) + (-1.0)))) + (((_592.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _692 = (_570 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_511.y * 2.0) + (-1.0)))) + (((_592.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _704 = (((_672 - _691) + (cbMtdParam._m0[21u].x * _691)) * _634) + _691;
    float _705 = (((_673 - _692) + (cbMtdParam._m0[21u].x * _692)) * _634) + _692;
    float _706 = (_634 * (sqrt(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) - _576)) + _576;
    float _708 = cbMtdParam._m0[22u].x + _592.w;
    float _711 = fma(_706, _234 * NORMAL.x, fma(_705, _241 * TANGENT.x, (_227 * _219) * _704));
    float _714 = fma(_706, _234 * NORMAL.y, fma(_705, _241 * TANGENT.y, (_227 * _220) * _704));
    float _717 = fma(_706, _234 * NORMAL.z, fma(_705, _241 * TANGENT.z, (_227 * _221) * _704));
    float _721 = inversesqrt(dot(vec3(_711, _714, _717), vec3(_711, _714, _717)));
    float _722 = _721 * _711;
    float _723 = _721 * _714;
    float _724 = _721 * _717;
    float _3909 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _725 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _3931 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3942 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _3953 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _743 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _794 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _784);
    float _795 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _784);
    float _796 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _784);
    float _800 = inversesqrt(dot(vec3(_794, _795, _796), vec3(_794, _795, _796)));
    float _801 = _794 * _800;
    float _802 = _795 * _800;
    float _803 = _796 * _800;
    float _809 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _810 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _828 = fma(_724, cbSceneParam._m0[5u].z, fma(_723, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _722));
    float _831 = fma(_724, cbSceneParam._m0[6u].z, fma(_723, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _722));
    float _834 = fma(_724, cbSceneParam._m0[7u].z, fma(_723, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _722));
    uint _848 = (_268 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _854 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_848].x;
    float _855 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_848].y;
    float _856 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * cbInstanceData._m0[_848].z;
    float _3964 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    vec4 _868 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _809, cbSceneParam._m0[86u].y * _810));
    float _872 = ((isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * TEXCOORD_5.w) * _868.x;
    float _873 = dot(vec3(_722, _723, _724), vec3(_801, _802, _803));
    float _876 = _873 * 2.0;
    float _880 = (_876 * _722) - _801;
    float _881 = (_876 * _723) - _802;
    float _882 = (_876 * _724) - _803;
    float _886 = abs(dot(vec3(_801, _802, _803), vec3(_722, _723, _724)));
    float _3997 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _888 = sqrt(_725);
    float _901 = exp2((_888 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_888 * 3.0));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1242;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _967 = fma(_941, cbModelParam._m0[26u].z, fma(_937, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933));
        float _971 = fma(_941, cbModelParam._m0[27u].z, fma(_937, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933));
        float _975 = fma(_941, cbModelParam._m0[28u].z, fma(_937, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933));
        float _1000 = _933 + _722;
        float _1001 = _937 + _723;
        float _1002 = _941 + _724;
        float _1012 = fma(_1002, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1000)) - _967;
        float _1013 = fma(_1002, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1000)) - _971;
        float _1014 = fma(_1002, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1000)) - _975;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_967 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_971 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[34u].z) + ((((((_975 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1070 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1036.x + (-0.5));
        float _1072 = _1070 * (_1036.y + (-0.5));
        float _1073 = _1070 * (_1036.z + (-0.5));
        float _1080 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1043.x + (-0.5));
        float _1082 = _1080 * (_1043.y + (-0.5));
        float _1083 = _1080 * (_1043.z + (-0.5));
        float _1090 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1050.x + (-0.5));
        float _1092 = _1090 * (_1050.y + (-0.5));
        float _1093 = _1090 * (_1050.z + (-0.5));
        float _1100 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1057.x + (-0.5));
        float _1102 = _1100 * (_1057.y + (-0.5));
        float _1103 = _1100 * (_1057.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1124 = (dot(vec3(_722, _723, _724), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1134 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _4045 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1136 + 1.0))) + _1141) * _1104;
        float _1151 = _1072 * 0.5;
        float _1152 = _1082 * 0.5;
        float _1153 = _1092 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_722, _723, _724), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4078 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1178 + 1.0))) + _1183) * _1105;
        float _1193 = _1073 * 0.5;
        float _1194 = _1083 * 0.5;
        float _1195 = _1093 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_722, _723, _724), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4111 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1220 + 1.0))) + _1225) * _1106;
        _1242 = _1073;
        _1244 = _1072;
        _1245 = _1071;
        _1246 = _1083;
        _1247 = _1082;
        _1248 = _1081;
        _1249 = _1093;
        _1250 = _1092;
        _1251 = _1091;
        _1252 = _1106;
        _1253 = _1105;
        _1254 = _1104;
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _1243;
        _1244 = _1243;
        _1245 = _1243;
        _1246 = _1243;
        _1247 = _1243;
        _1248 = _1243;
        _1249 = _1243;
        _1250 = _1243;
        _1251 = _1243;
        _1252 = _1243;
        _1253 = _1243;
        _1254 = _1243;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1282 = fma(_941, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _933));
        float _1286 = fma(_941, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _933));
        float _1290 = fma(_941, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _933));
        float _1313 = _933 + _722;
        float _1314 = _937 + _723;
        float _1315 = _941 + _724;
        float _1325 = fma(_1315, cbModelParam._m0[30u].z, fma(_1314, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313)) - _1282;
        float _1326 = fma(_1315, cbModelParam._m0[31u].z, fma(_1314, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313)) - _1286;
        float _1327 = fma(_1315, cbModelParam._m0[32u].z, fma(_1314, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313)) - _1290;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1282 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1286 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[35u].z) + ((((((_1290 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1381 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1348.x + (-0.5));
        float _1383 = _1381 * (_1348.y + (-0.5));
        float _1384 = _1381 * (_1348.z + (-0.5));
        float _1391 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1355.x + (-0.5));
        float _1393 = _1391 * (_1355.y + (-0.5));
        float _1394 = _1391 * (_1355.z + (-0.5));
        float _1401 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1362.x + (-0.5));
        float _1403 = _1401 * (_1362.y + (-0.5));
        float _1404 = _1401 * (_1362.z + (-0.5));
        float _1411 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1369.x + (-0.5));
        float _1413 = _1411 * (_1369.y + (-0.5));
        float _1414 = _1411 * (_1369.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_722, _723, _724), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4174 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1445 + 1.0))) + _1450) * _1415;
        float _1460 = _1383 * 0.5;
        float _1461 = _1393 * 0.5;
        float _1462 = _1403 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_722, _723, _724), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4207 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1487 + 1.0))) + _1492) * _1416;
        float _1502 = _1384 * 0.5;
        float _1503 = _1394 * 0.5;
        float _1504 = _1404 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_722, _723, _724), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4240 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1529 + 1.0))) + _1534) * _1417;
        _1551 = _1384;
        _1552 = _1383;
        _1553 = _1382;
        _1554 = _1394;
        _1555 = _1393;
        _1556 = _1392;
        _1557 = _1404;
        _1558 = _1403;
        _1559 = _1402;
        _1560 = _1417;
        _1561 = _1416;
        _1562 = _1415;
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1243;
        _1552 = _1243;
        _1553 = _1243;
        _1554 = _1243;
        _1555 = _1243;
        _1556 = _1243;
        _1557 = _1243;
        _1558 = _1243;
        _1559 = _1243;
        _1560 = _1243;
        _1561 = _1243;
        _1562 = _1243;
        _1563 = 0.0;
        _1564 = 0.0;
        _1565 = 0.0;
    }
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1255)) + _1255;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1256)) + _1256;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1257)) + _1257;
    float _1598 = fma(_1577, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1575 * cbSceneParam._m0[89u].x));
    float _1601 = fma(_1577, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1575 * cbSceneParam._m0[90u].x));
    float _1604 = fma(_1577, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1575));
    float _1619 = _880 * 0.5;
    float _1620 = _881 * 0.5;
    float _1621 = _882 * 0.5;
    float _1622 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1625 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1628 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1635 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1242, _1246, _1249, _1252));
        float _1639 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1643 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1650 = dot(vec4(cbModelParam._m0[39u]), vec4(_1619, _1620, _1621, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1619, _1620, _1621, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _725);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1736 = fma(_941, cbModelParam._m0[13u].z, fma(_937, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _933)) + cbModelParam._m0[13u].w;
        float _1740 = fma(_941, cbModelParam._m0[14u].z, fma(_937, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _933)) + cbModelParam._m0[14u].w;
        float _1744 = fma(_941, cbModelParam._m0[15u].z, fma(_937, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _933)) + cbModelParam._m0[15u].w;
        float _1747 = fma(_882, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880));
        float _1750 = fma(_882, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880));
        float _1753 = fma(_882, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880));
        float _1781;
        if (_1747 > 0.0)
        {
            _1781 = abs((1.0 - _1736) / _1747);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1736 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1781 = frontier_phi_14_12_ladder;
        }
        float _1951;
        if (_1750 > 0.0)
        {
            _1951 = abs((1.0 - _1740) / _1750);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1740 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1951 = frontier_phi_23_19_ladder;
        }
        float _2246;
        if (_1753 > 0.0)
        {
            _2246 = abs((1.0 - _1744) / _1753);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1744 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2246 = frontier_phi_35_30_ladder;
        }
        float _2248 = isnan(_1951) ? _1781 : (isnan(_1781) ? _1951 : min(_1781, _1951));
        float _2249 = isnan(_2246) ? _2248 : (isnan(_2248) ? _2246 : min(_2248, _2246));
        float _2253 = (_2249 * _1747) + _1736;
        float _2254 = (_2249 * _1750) + _1740;
        float _2255 = (_2249 * _1753) + _1744;
        float _2256 = _2249 * 9.9999997473787516355514526367188e-05;
        float _2258 = (-1.0) - _2256;
        float _2260 = _2256 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2255 > _2260) || ((_2255 < _2258) || ((_2254 > _2260) || ((_2254 < _2258) || ((_2253 < _2258) || (_2253 > _2260))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2255, cbModelParam._m0[9u].z, fma(_2254, cbModelParam._m0[9u].y, _2253 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2255, cbModelParam._m0[10u].z, fma(_2254, cbModelParam._m0[10u].y, _2253 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2255, cbModelParam._m0[11u].z, fma(_2254, cbModelParam._m0[11u].y, _2253 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_13_35_ladder = _2400.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2400.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2400.x * cbModelParam._m0[1u].y;
        }
        _1769 = frontier_phi_13_35_ladder_2;
        _1771 = frontier_phi_13_35_ladder_1;
        _1773 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1757 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_880, _881, _882), _1688);
        _1769 = _1757.x * cbModelParam._m0[1u].y;
        _1771 = _1757.y * cbModelParam._m0[1u].y;
        _1773 = _1757.z * cbModelParam._m0[1u].y;
    }
    float _1777 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _725);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1777 : min(cbModelParam._m0[25u].w, _1777));
    float _1868;
    float _1870;
    float _1872;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1832 = fma(_941, cbModelParam._m0[21u].z, fma(_937, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _933)) + cbModelParam._m0[21u].w;
        float _1836 = fma(_941, cbModelParam._m0[22u].z, fma(_937, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _933)) + cbModelParam._m0[22u].w;
        float _1840 = fma(_941, cbModelParam._m0[23u].z, fma(_937, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _933)) + cbModelParam._m0[23u].w;
        float _1843 = fma(_882, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880));
        float _1846 = fma(_882, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880));
        float _1849 = fma(_882, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880));
        float _1956;
        if (_1843 > 0.0)
        {
            _1956 = abs((1.0 - _1832) / _1843);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1832 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1956 = frontier_phi_25_21_ladder;
        }
        float _2273;
        if (_1846 > 0.0)
        {
            _2273 = abs((1.0 - _1836) / _1846);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1836 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2273 = frontier_phi_37_32_ladder;
        }
        float _2600;
        if (_1849 > 0.0)
        {
            _2600 = abs((1.0 - _1840) / _1849);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1840 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2600 = frontier_phi_47_44_ladder;
        }
        float _2602 = isnan(_2273) ? _1956 : (isnan(_1956) ? _2273 : min(_1956, _2273));
        float _2603 = isnan(_2600) ? _2602 : (isnan(_2602) ? _2600 : min(_2602, _2600));
        float _2607 = (_2603 * _1843) + _1832;
        float _2608 = (_2603 * _1846) + _1836;
        float _2609 = (_2603 * _1849) + _1840;
        float _2610 = _2603 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2610;
        float _2613 = _2610 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2609 > _2613) || ((_2609 < _2611) || ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 < _2611) || (_2607 > _2613))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2609, cbModelParam._m0[17u].z, fma(_2608, cbModelParam._m0[17u].y, _2607 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2609, cbModelParam._m0[18u].z, fma(_2608, cbModelParam._m0[18u].y, _2607 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2609, cbModelParam._m0[19u].z, fma(_2608, cbModelParam._m0[19u].y, _2607 * cbModelParam._m0[19u].x))), _1778);
            frontier_phi_22_47_ladder = _2727.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2727.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2727.x * cbModelParam._m0[1u].z;
        }
        _1868 = frontier_phi_22_47_ladder_2;
        _1870 = frontier_phi_22_47_ladder_1;
        _1872 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_880, _881, _882), _1778);
        _1868 = _1852.x * cbModelParam._m0[1u].z;
        _1870 = _1852.y * cbModelParam._m0[1u].z;
        _1872 = _1852.z * cbModelParam._m0[1u].z;
    }
    float _1884 = ((((1.0 - _901) * ((_888 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_901 * _888)) * _872;
    float _1885 = _1884 * ((cbModelParam._m0[1u].w * (_1868 - _1769)) + _1769);
    float _1886 = _1884 * ((cbModelParam._m0[1u].w * (_1870 - _1771)) + _1771);
    float _1887 = _1884 * ((cbModelParam._m0[1u].w * (_1872 - _1773)) + _1773);
    float _1890 = fma(_1887, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1885 * cbSceneParam._m0[89u].x));
    float _1893 = fma(_1887, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1885 * cbSceneParam._m0[90u].x));
    float _1896 = fma(_1887, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, _1885 * cbSceneParam._m0[91u].x));
    float _1930 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1934 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1938 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1942 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1943 = _1930 / _1942;
    float _1944 = _1934 / _1942;
    float _1945 = _1938 / _1942;
    float _2092;
    float _2093;
    float _2094;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1972 = ((uint(_1945 > cbSceneParam._m0[59u].y) + uint(_1945 > cbSceneParam._m0[59u].x)) + uint(_1945 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1973 = _1972 + 43u;
        uint _1981 = _1972 + 44u;
        uint _1989 = _1972 + 45u;
        uint _1997 = _1972 + 46u;
        float _2008 = fma(_1942, cbSceneParam._m0[_1973].w, fma(_1938, cbSceneParam._m0[_1973].z, fma(_1934, cbSceneParam._m0[_1973].y, _1930 * cbSceneParam._m0[_1973].x)));
        float _2012 = fma(_1942, cbSceneParam._m0[_1981].w, fma(_1938, cbSceneParam._m0[_1981].z, fma(_1934, cbSceneParam._m0[_1981].y, _1930 * cbSceneParam._m0[_1981].x)));
        float _2020 = fma(_1942, cbSceneParam._m0[_1997].w, fma(_1938, cbSceneParam._m0[_1997].z, fma(_1934, cbSceneParam._m0[_1997].y, _1930 * cbSceneParam._m0[_1997].x)));
        float _2025 = cbSceneParam._m0[33u].z * _2020;
        float _2027 = cbSceneParam._m0[33u].w * _2020;
        float _2030 = fma(_1942, cbSceneParam._m0[_1989].w, fma(_1938, cbSceneParam._m0[_1989].z, fma(_1934, cbSceneParam._m0[_1989].y, _1930 * cbSceneParam._m0[_1989].x))) / _2020;
        float _2078 = (cbSceneParam._m0[33u].x - sqrt(((_1944 * _1944) + (_1943 * _1943)) + (_1945 * _1945))) * cbSceneParam._m0[33u].y;
        float _4366 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2085 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2025 + _2008) / _2020, (_2027 + _2012) / _2020), _2030), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2027 + _2008) / _2020, (_2012 - _2025) / _2020), _2030), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2008 - _2025) / _2020, (_2012 - _2027) / _2020), _2030), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2008 - _2027) / _2020, (_2025 + _2012) / _2020), _2030), 0.0)).x), vec4(0.25)));
        _2092 = 1.0 - (_2085 * cbSceneParam._m0[34u].x);
        _2093 = 1.0 - (_2085 * cbSceneParam._m0[34u].y);
        _2094 = 1.0 - (_2085 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2092 = 1.0;
        _2093 = 1.0;
        _2094 = 1.0;
    }
    float _2158;
    float _2160;
    float _2162;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2146 = fma(_1942, cbSceneParam._m0[63u].w, fma(_1938, cbSceneParam._m0[63u].z, fma(_1934, cbSceneParam._m0[63u].y, _1930 * cbSceneParam._m0[63u].x)));
        float _2147 = fma(_1942, cbSceneParam._m0[60u].w, fma(_1938, cbSceneParam._m0[60u].z, fma(_1934, cbSceneParam._m0[60u].y, _1930 * cbSceneParam._m0[60u].x))) / _2146;
        float _2148 = fma(_1942, cbSceneParam._m0[61u].w, fma(_1938, cbSceneParam._m0[61u].z, fma(_1934, cbSceneParam._m0[61u].y, _1930 * cbSceneParam._m0[61u].x))) / _2146;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2147 >= cbSceneParam._m0[64u].x) && (_2148 >= cbSceneParam._m0[64u].y)) && (_2147 <= cbSceneParam._m0[64u].z)) && (_2148 <= cbSceneParam._m0[64u].w))
        {
            float _2286 = fma(_1942, cbSceneParam._m0[62u].w, fma(_1938, cbSceneParam._m0[62u].z, fma(_1934, cbSceneParam._m0[62u].y, _1930 * cbSceneParam._m0[62u].x))) / _2146;
            float _2290 = isnan(cbSceneParam._m0[41u].w) ? _2286 : (isnan(_2286) ? cbSceneParam._m0[41u].w : max(_2286, cbSceneParam._m0[41u].w));
            float _2333 = (cbSceneParam._m0[33u].x - sqrt(((_1944 * _1944) + (_1943 * _1943)) + (_1945 * _1945))) * cbSceneParam._m0[33u].y;
            float _4382 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
            float _2340 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2147, cbSceneParam._m0[33u].w + _2148), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2147, _2148 - cbSceneParam._m0[33u].z), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2147 - cbSceneParam._m0[33u].z, _2148 - cbSceneParam._m0[33u].w), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2147 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2148), _2290), 0.0)).x), vec4(0.25)));
            float _2344 = 1.0 - (_2340 * cbSceneParam._m0[34u].x);
            float _2345 = 1.0 - (_2340 * cbSceneParam._m0[34u].y);
            float _2346 = 1.0 - (_2340 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2346) ? _2094 : (isnan(_2094) ? _2346 : min(_2094, _2346));
            frontier_phi_34_33_ladder_1 = isnan(_2345) ? _2093 : (isnan(_2093) ? _2345 : min(_2093, _2345));
            frontier_phi_34_33_ladder_2 = isnan(_2344) ? _2092 : (isnan(_2092) ? _2344 : min(_2092, _2344));
        }
        else
        {
            frontier_phi_34_33_ladder = _2094;
            frontier_phi_34_33_ladder_1 = _2093;
            frontier_phi_34_33_ladder_2 = _2092;
        }
        _2158 = frontier_phi_34_33_ladder_2;
        _2160 = frontier_phi_34_33_ladder_1;
        _2162 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2158 = _2092;
        _2160 = _2093;
        _2162 = _2094;
    }
    uvec4 _2167 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2169 = _2167.x * 14u;
    uint _2170 = _2169 + 13u;
    float _2177 = _872 + (-1.0);
    float _2182 = (cbLight._m0[_2170].x * _2177) + 1.0;
    float _2183 = (cbLight._m0[_2170].y * _2177) + 1.0;
    float _2184 = (cbLight._m0[_2170].z * _2177) + 1.0;
    float _2185 = (cbLight._m0[_2170].w * _2177) + 1.0;
    uint _2186 = _2169 + 5u;
    float _2192 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2196 = _2169 + 4u;
    float _2205 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
    uint _2209 = _2169 | 1u;
    float _2220 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_722, _723, _724));
    float _2223 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_722, _723, _724));
    float _4418 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _4429 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2228 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * 0.3183098733425140380859375;
    float _2230 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * 0.3183098733425140380859375;
    float _2237 = ((cbLight._m0[_2186].x * _2192) * _2230) + (((cbLight._m0[_2196].x * _2158) * _2205) * _2228);
    float _2238 = ((_2192 * cbLight._m0[_2186].y) * _2230) + (((cbLight._m0[_2196].y * _2160) * _2205) * _2228);
    float _2239 = ((_2192 * cbLight._m0[_2186].z) * _2230) + (((cbLight._m0[_2196].z * _2162) * _2205) * _2228);
    uvec4 _2243 = floatBitsToUint(cbLight._m0[_2169 + 12u]);
    bool _2245 = _2243.x == 0u;
    float _2347;
    float _2349;
    float _2351;
    if (_2245)
    {
        _2347 = _2237;
        _2349 = _2238;
        _2351 = _2239;
    }
    else
    {
        uint _2355 = _2169 + 6u;
        float _2371 = (dot(vec3(cbLight._m0[_2169 + 2u].xyz), vec3(_722, _723, _724)) * 0.5) + 0.5;
        float _2372 = _2371 * _2371;
        float _4440 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2373 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2374 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2347 = (((cbLight._m0[_2355].x * 0.3183098733425140380859375) * _2373) * _2374) + _2237;
        _2349 = (((cbLight._m0[_2355].y * 0.3183098733425140380859375) * _2373) * _2374) + _2238;
        _2351 = (((cbLight._m0[_2355].z * 0.3183098733425140380859375) * _2373) * _2374) + _2239;
    }
    bool _2354 = _2243.y == 0u;
    float _2409;
    float _2411;
    float _2413;
    if (_2354)
    {
        _2409 = _2347;
        _2411 = _2349;
        _2413 = _2351;
    }
    else
    {
        uint _2571 = _2169 + 7u;
        float _2587 = (dot(vec3(cbLight._m0[_2169 + 3u].xyz), vec3(_722, _723, _724)) * 0.5) + 0.5;
        float _2588 = _2587 * _2587;
        float _4456 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2589 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2590 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2409 = (((cbLight._m0[_2571].x * 0.3183098733425140380859375) * _2589) * _2590) + _2347;
        _2411 = (((cbLight._m0[_2571].y * 0.3183098733425140380859375) * _2589) * _2590) + _2349;
        _2413 = (((cbLight._m0[_2571].z * 0.3183098733425140380859375) * _2589) * _2590) + _2351;
    }
    uint _2416 = _2169 + 8u;
    float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _725) * 0.949999988079071044921875);
    float _2430 = _2429 * _2429;
    float _2431 = cbLight._m0[_2169].x + _801;
    float _2432 = cbLight._m0[_2169].y + _802;
    float _2433 = cbLight._m0[_2169].z + _803;
    float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
    float _2438 = _2437 * _2431;
    float _2439 = _2437 * _2432;
    float _2440 = _2437 * _2433;
    float _2441 = dot(vec3(_722, _723, _724), vec3(cbLight._m0[_2169].xyz));
    float _4472 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _4483 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _2445 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2446 = dot(vec3(_722, _723, _724), vec3(_2438, _2439, _2440));
    float _4494 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2438, _2439, _2440));
    float _4505 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2430 * _2430;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2469 = (exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2470 = 1.0 - _2430;
    float _2481 = (0.5 / (((_2445 * ((_2444 * _2470) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2470) + _2430) * _2444))) * _2444;
    float _4516 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2483 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    uint _2497 = _2169 + 9u;
    float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _725) * 0.949999988079071044921875);
    float _2509 = _2508 * _2508;
    float _2510 = cbLight._m0[_2209].x + _801;
    float _2511 = cbLight._m0[_2209].y + _802;
    float _2512 = cbLight._m0[_2209].z + _803;
    float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
    float _2517 = _2516 * _2510;
    float _2518 = _2516 * _2511;
    float _2519 = _2516 * _2512;
    float _2520 = dot(vec3(_722, _723, _724), vec3(cbLight._m0[_2209].xyz));
    float _4527 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2524 = dot(vec3(_722, _723, _724), vec3(_2517, _2518, _2519));
    float _4538 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2527 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2528 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2517, _2518, _2519));
    float _4549 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2532 = _2509 * _2509;
    float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
    float _2545 = (exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2546 = 1.0 - _2509;
    float _2556 = (0.5 / (((_2445 * ((_2523 * _2546) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2546) + _2509) * _2523))) * _2523;
    float _4560 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2558 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
    float _2568 = (((_2545 * cbLight._m0[_2497].x) * _2558) * _2192) + ((((cbLight._m0[_2416].x * _2158) * _2469) * _2483) * _2205);
    float _2569 = (((_2545 * cbLight._m0[_2497].y) * _2558) * _2192) + ((((cbLight._m0[_2416].y * _2160) * _2469) * _2483) * _2205);
    float _2570 = (((_2545 * cbLight._m0[_2497].z) * _2558) * _2192) + ((((cbLight._m0[_2416].z * _2162) * _2469) * _2483) * _2205);
    float _2626;
    float _2628;
    float _2630;
    if (_2245)
    {
        _2626 = _2568;
        _2628 = _2569;
        _2630 = _2570;
    }
    else
    {
        uint _2632 = _2169 + 2u;
        uint _2636 = _2169 + 10u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _725) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _801;
        float _2653 = cbLight._m0[_2632].y + _802;
        float _2654 = cbLight._m0[_2632].z + _803;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_722, _723, _724), vec3(cbLight._m0[_2632].xyz));
        float _4571 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2666 = dot(vec3(_722, _723, _724), vec3(_2659, _2660, _2661));
        float _4582 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4593 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2687 = (exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2688 = 1.0 - _2651;
        float _2698 = (0.5 / (((_2445 * ((_2665 * _2688) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2688) + _2651) * _2665))) * _2665;
        float _4604 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2700 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2701 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2626 = (((_2687 * cbLight._m0[_2636].x) * _2700) * _2701) + _2568;
        _2628 = (((_2687 * cbLight._m0[_2636].y) * _2700) * _2701) + _2569;
        _2630 = (((_2687 * cbLight._m0[_2636].z) * _2700) * _2701) + _2570;
    }
    float _2732;
    float _2734;
    float _2736;
    if (_2354)
    {
        _2732 = _2626;
        _2734 = _2628;
        _2736 = _2630;
    }
    else
    {
        uint _2743 = _2169 + 3u;
        uint _2747 = _2169 + 11u;
        float _2761 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2743].w)) * _725) * 0.949999988079071044921875);
        float _2762 = _2761 * _2761;
        float _2763 = cbLight._m0[_2743].x + _801;
        float _2764 = cbLight._m0[_2743].y + _802;
        float _2765 = cbLight._m0[_2743].z + _803;
        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
        float _2770 = _2769 * _2763;
        float _2771 = _2769 * _2764;
        float _2772 = _2769 * _2765;
        float _2773 = dot(vec3(_722, _723, _724), vec3(cbLight._m0[_2743].xyz));
        float _4620 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2776 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2777 = dot(vec3(_722, _723, _724), vec3(_2770, _2771, _2772));
        float _4631 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2780 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2781 = dot(vec3(cbLight._m0[_2743].xyz), vec3(_2770, _2771, _2772));
        float _4642 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2785 = _2762 * _2762;
        float _2789 = ((_2780 * _2780) * (_2785 + (-1.0))) + 1.0;
        float _2798 = (exp2(log2(1.0 - (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2799 = 1.0 - _2762;
        float _2809 = (0.5 / (((_2445 * ((_2776 * _2799) + _2762)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2799) + _2762) * _2776))) * _2776;
        float _4653 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2811 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2785 / ((_2789 * _2789) * 3.141590118408203125));
        float _2812 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2732 = (((_2798 * cbLight._m0[_2747].x) * _2811) * _2812) + _2626;
        _2734 = (((_2798 * cbLight._m0[_2747].y) * _2811) * _2812) + _2628;
        _2736 = (((_2798 * cbLight._m0[_2747].z) * _2811) * _2812) + _2630;
    }
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    if (_2167.y == 0u)
    {
        uvec4 _2833 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2834 = _2833.x;
        uint _2845 = uint((float(_2833.y) * floor(float(uint(cbSceneParam._m0[85u].y * _810) / _2834))) + floor(float(uint(cbSceneParam._m0[85u].x * _809) / _2834)));
        float _2855 = (log2(_1945 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2856 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        uint _2859 = uint(isnan(14.0) ? _2856 : (isnan(_2856) ? 14.0 : min(_2856, 14.0)));
        uvec4 _2864 = texelFetch(g_lightClusterGridBuffer, int(((_2859 << 2u) + (_2845 << 6u)) >> 2u));
        uint _2865 = _2864.x;
        uint _2866 = _2833.z;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        if (((((1u << ((_2866 >> 4u) & 15u)) + 4294967295u) & _2865) == 0u) || ((_2866 & 240u) == 0u))
        {
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
        }
        else
        {
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            uint _3096 = 0u;
            uint _3105;
            bool _3106;
            for (;;)
            {
                _3105 = texelFetch(g_lightClassification, int((((_2859 << 5u) + (_2845 << 9u)) + (_3096 << 2u)) >> 2u)).x;
                _3106 = _3105 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3106)
                {
                    frontier_phi_66_pred = _3095;
                    frontier_phi_66_pred_1 = _3094;
                    frontier_phi_66_pred_2 = _3093;
                    frontier_phi_66_pred_3 = _3092;
                    frontier_phi_66_pred_4 = _3091;
                    frontier_phi_66_pred_5 = _3090;
                }
                else
                {
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    uint _3220;
                    _3214 = _3090;
                    _3215 = _3091;
                    _3216 = _3092;
                    _3217 = _3093;
                    _3218 = _3094;
                    _3219 = _3095;
                    _3220 = _3105;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    for (;;)
                    {
                        uint _3224 = uint(findLSB(_3220)) + (_3096 << 5u);
                        uint _3221 = (_3220 + 4294967295u) & _3220;
                        uint _3226 = _3224 * 48u;
                        vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 3u)).x));
                        uint _3246 = (_3224 * 48u) + 4u;
                        vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3246)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 3u)).x));
                        uint _3265 = (_3224 * 48u) + 8u;
                        vec3 _3276 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x));
                        float _3280 = _3240.x - _1943;
                        float _3281 = _3240.y - _1944;
                        float _3282 = _3240.z - _1945;
                        float _3283 = dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282));
                        float _3286 = inversesqrt(_3283);
                        float _3287 = _3286 * _3280;
                        float _3288 = _3286 * _3281;
                        float _3289 = _3286 * _3282;
                        float _3290 = dot(vec3(_828, _831, _834), vec3(_3287, _3288, _3289));
                        float _3295 = 1.0 - (_3283 * _3240.w);
                        float _4679 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3296 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3297 = sqrt(_3283) * _3259.w;
                        float _3300 = 1.39999997615814208984375 / (_3297 + 1.39999997615814208984375);
                        float _3301 = _3300 * _3300;
                        float _3304 = ((1.0 - _3301) * _3290) + _3301;
                        float _3307 = _3297 * _3297;
                        float _3311 = ((isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))) * _3296) / ((_3307 * 0.699999988079071044921875) + 1.0);
                        float _3315 = (-0.0) - _1943;
                        float _3316 = (-0.0) - _1944;
                        float _3317 = (-0.0) - _1945;
                        float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                        float _3322 = _3321 * _3315;
                        float _3323 = _3321 * _3316;
                        float _3324 = _3321 * _3317;
                        float _3331 = exp2(log2(1.0 / ((_3307 * 3.5) + 5.0)) * 0.25);
                        float _3332 = 1.0 - _888;
                        float _3339 = sqrt(1.0 - ((1.0 - (_3332 * _3332)) * (1.0 - (_3331 * _3331))));
                        float _3340 = _3339 * _3339;
                        float _3341 = _3340 * _3340;
                        float _3342 = _3322 + _3287;
                        float _3343 = _3323 + _3288;
                        float _3344 = _3324 + _3289;
                        float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                        float _3352 = dot(vec3(_828, _831, _834), vec3(_3322, _3323, _3324));
                        float _4695 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3355 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                        float _3356 = dot(vec3(_828, _831, _834), vec3(_3348 * _3342, _3348 * _3343, _3348 * _3344));
                        float _4706 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3359 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                        float _3363 = ((_3359 * _3359) * (_3341 + (-1.0))) + 1.0;
                        float _3364 = _3300 * _3340;
                        float _3365 = _3364 * _3364;
                        float _3368 = ((1.0 - _3365) * _3290) + _3365;
                        float _4717 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3369 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3370 = 1.0 - _3340;
                        float _3380 = (0.5 / (((_3369 * ((_3355 * _3370) + _3340)) + 9.9999999392252902907785028219223e-09) + (((_3369 * _3370) + _3340) * _3355))) * _3369;
                        float _4728 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3391 = (((_3341 * 3.1415927410125732421875) * (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) / ((_3363 * _3363) * ((_3307 * 2.1991131305694580078125) + 3.141590118408203125))) * _3296;
                        _3149 = (_3311 * _3259.x) + _3217;
                        _3150 = (_3311 * _3259.y) + _3218;
                        _3151 = (_3311 * _3259.z) + _3219;
                        _3146 = (_3391 * _3276.x) + _3214;
                        _3147 = (_3391 * _3276.y) + _3215;
                        _3148 = (_3391 * _3276.z) + _3216;
                        if (_3221 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3214 = _3146;
                            _3215 = _3147;
                            _3216 = _3148;
                            _3217 = _3149;
                            _3218 = _3150;
                            _3219 = _3151;
                            _3220 = _3221;
                        }
                    }
                    frontier_phi_66_pred = _3151;
                    frontier_phi_66_pred_1 = _3150;
                    frontier_phi_66_pred_2 = _3149;
                    frontier_phi_66_pred_3 = _3148;
                    frontier_phi_66_pred_4 = _3147;
                    frontier_phi_66_pred_5 = _3146;
                }
                _2956 = frontier_phi_66_pred;
                _2954 = frontier_phi_66_pred_1;
                _2952 = frontier_phi_66_pred_2;
                _2950 = frontier_phi_66_pred_3;
                _2948 = frontier_phi_66_pred_4;
                _2946 = frontier_phi_66_pred_5;
                uint _3097 = _3096 + 1u;
                if (_3097 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3090 = _2946;
                    _3091 = _2948;
                    _3092 = _2950;
                    _3093 = _2952;
                    _3094 = _2954;
                    _3095 = _2956;
                    _3096 = _3097;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
        }
        uvec4 _2959 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2960 = _2959.z;
        uint _2962 = (_2960 >> 8u) & 15u;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        if (((4294967295u << _2962) & _2865) == 0u)
        {
            _3058 = _2945;
            _3060 = _2947;
            _3062 = _2949;
            _3064 = _2951;
            _3066 = _2953;
            _3068 = _2955;
        }
        else
        {
            float _3083 = inversesqrt(dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945)));
            float _3084 = _3083 * _1943;
            float _3085 = _3083 * _1944;
            float _3086 = _3083 * _1945;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2962 < ((_2960 >> 12u) & 15u))
            {
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3069;
                float _3197 = _2945;
                float _3198 = _2947;
                float _3199 = _2949;
                float _3200 = _2951;
                float _3201 = _2953;
                float _3202 = _2955;
                uint _3203 = _2962;
                uint _3212;
                bool _3213;
                for (;;)
                {
                    _3212 = texelFetch(g_lightClassification, int((((_2859 << 5u) + (_2845 << 9u)) + (_3203 << 2u)) >> 2u)).x;
                    _3213 = _3212 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3213)
                    {
                        frontier_phi_72_pred = _3202;
                        frontier_phi_72_pred_1 = _3201;
                        frontier_phi_72_pred_2 = _3200;
                        frontier_phi_72_pred_3 = _3199;
                        frontier_phi_72_pred_4 = _3198;
                        frontier_phi_72_pred_5 = _3197;
                    }
                    else
                    {
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3409 = _3197;
                        float _3410 = _3198;
                        float _3411 = _3199;
                        float _3412 = _3200;
                        float _3413 = _3201;
                        float _3414 = _3202;
                        uint _3415 = _3212;
                        uint _3416;
                        vec4 _3441;
                        float _3442;
                        vec4 _3457;
                        vec3 _3469;
                        vec4 _3484;
                        vec4 _3499;
                        float _3545;
                        bool _3546;
                        for (;;)
                        {
                            uint _3426 = ((_3203 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3415));
                            _3416 = (_3415 + 4294967295u) & _3415;
                            uint _3428 = _3426 * 40u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            _3442 = _3441.w;
                            uint _3444 = (_3426 * 40u) + 4u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3459 = (_3426 * 40u) + 8u;
                            _3469 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x));
                            uint _3471 = (_3426 * 40u) + 16u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3486 = (_3426 * 40u) + 20u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3501 = (_3426 * 40u) + 24u;
                            vec4 _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3520 = (_3426 * 40u) + 28u;
                            vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            _3545 = fma(_1945, _3533.z, fma(_1944, _3533.y, _3533.x * _1943)) + _3533.w;
                            _3546 = !((fma(_1945, _3514.z, fma(_1944, _3514.y, _3514.x * _1943)) + _3514.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3546)
                            {
                                float _3573 = _3441.x - _1943;
                                float _3574 = _3441.y - _1944;
                                float _3575 = _3441.z - _1945;
                                float _3576 = dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575));
                                float _3579 = inversesqrt(_3576);
                                float _3580 = _3579 * _3573;
                                float _3581 = _3579 * _3574;
                                float _3582 = _3579 * _3575;
                                float _3586 = 1.0 - (_3576 / (_3442 * _3442));
                                float _4739 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3591 = sqrt(_3576) * _3457.w;
                                float _3593 = 1.39999997615814208984375 / (_3591 + 1.39999997615814208984375);
                                float _3594 = _3593 * _3593;
                                float _3597 = ((1.0 - _3594) * dot(vec3(_3580, _3581, _3582), vec3(_828, _831, _834))) + _3594;
                                float _3600 = _3591 * _3591;
                                float _3604 = (fma(_1945, _3484.z, fma(_1944, _3484.y, _3484.x * _1943)) + _3484.w) / _3545;
                                float _3605 = (fma(_1945, _3499.z, fma(_1944, _3499.y, _3499.x * _1943)) + _3499.w) / _3545;
                                float _3609 = 1.0 - dot(vec2(_3604, _3605), vec2(_3604, _3605));
                                float _4755 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3611 = _3610 * (((isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0))) * _3587) / ((_3600 * 0.699999988079071044921875) + 1.0));
                                float _3623 = exp2(log2(1.0 / ((_3600 * 3.5) + 5.0)) * 0.25);
                                float _3624 = 1.0 - _888;
                                float _3631 = sqrt(1.0 - ((1.0 - (_3624 * _3624)) * (1.0 - (_3623 * _3623))));
                                float _3632 = _3631 * _3631;
                                float _3633 = _3632 * _3632;
                                float _3634 = _3580 - _3084;
                                float _3635 = _3581 - _3085;
                                float _3636 = _3582 - _3086;
                                float _3640 = inversesqrt(dot(vec3(_3634, _3635, _3636), vec3(_3634, _3635, _3636)));
                                float _3644 = dot(vec3(_828, _831, _834), vec3((-0.0) - _3084, (-0.0) - _3085, (-0.0) - _3086));
                                float _4766 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3647 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3648 = dot(vec3(_828, _831, _834), vec3(_3640 * _3634, _3640 * _3635, _3640 * _3636));
                                float _4777 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3651 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3655 = ((_3651 * _3651) * (_3633 + (-1.0))) + 1.0;
                                float _3656 = _3593 * _3632;
                                float _3657 = _3656 * _3656;
                                float _3663 = ((1.0 - _3657) * dot(vec3(_828, _831, _834), vec3(_3580, _3581, _3582))) + _3657;
                                float _4788 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3665 = 1.0 - _3632;
                                float _3675 = (0.5 / (((_3664 * ((_3647 * _3665) + _3632)) + 9.9999999392252902907785028219223e-09) + (((_3664 * _3665) + _3632) * _3647))) * _3664;
                                float _4799 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3685 = (_3610 * _3587) * (((_3633 * 3.1415927410125732421875) * (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) / ((_3655 * _3655) * ((_3600 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3611 * _3457.y;
                                frontier_phi_78_pred_1 = _3611 * _3457.x;
                                frontier_phi_78_pred_2 = _3685 * _3469.z;
                                frontier_phi_78_pred_3 = _3685 * _3469.y;
                                frontier_phi_78_pred_4 = _3685 * _3469.x;
                                frontier_phi_78_pred_5 = _3611 * _3457.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3693 = frontier_phi_78_pred;
                            _3692 = frontier_phi_78_pred_1;
                            _3691 = frontier_phi_78_pred_2;
                            _3690 = frontier_phi_78_pred_3;
                            _3689 = frontier_phi_78_pred_4;
                            _3694 = frontier_phi_78_pred_5;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            _3401 = _3694 + _3414;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            if (_3416 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3416;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3401;
                        frontier_phi_72_pred_1 = _3400;
                        frontier_phi_72_pred_2 = _3399;
                        frontier_phi_72_pred_3 = _3398;
                        frontier_phi_72_pred_4 = _3397;
                        frontier_phi_72_pred_5 = _3396;
                    }
                    _3069 = frontier_phi_72_pred;
                    _3067 = frontier_phi_72_pred_1;
                    _3065 = frontier_phi_72_pred_2;
                    _3063 = frontier_phi_72_pred_3;
                    _3061 = frontier_phi_72_pred_4;
                    _3059 = frontier_phi_72_pred_5;
                    uint _3204 = _3203 + 1u;
                    if (_3204 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3197 = _3059;
                        _3198 = _3061;
                        _3199 = _3063;
                        _3200 = _3065;
                        _3201 = _3067;
                        _3202 = _3069;
                        _3203 = _3204;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3069;
                frontier_phi_60_61_ladder_1 = _3067;
                frontier_phi_60_61_ladder_2 = _3063;
                frontier_phi_60_61_ladder_3 = _3061;
                frontier_phi_60_61_ladder_4 = _3059;
                frontier_phi_60_61_ladder_5 = _3065;
            }
            else
            {
                frontier_phi_60_61_ladder = _2955;
                frontier_phi_60_61_ladder_1 = _2953;
                frontier_phi_60_61_ladder_2 = _2949;
                frontier_phi_60_61_ladder_3 = _2947;
                frontier_phi_60_61_ladder_4 = _2945;
                frontier_phi_60_61_ladder_5 = _2951;
            }
            _3058 = frontier_phi_60_61_ladder_4;
            _3060 = frontier_phi_60_61_ladder_3;
            _3062 = frontier_phi_60_61_ladder_2;
            _3064 = frontier_phi_60_61_ladder_5;
            _3066 = frontier_phi_60_61_ladder_1;
            _3068 = frontier_phi_60_61_ladder;
        }
        float _3073 = isnan(1.0) ? _872 : (isnan(_872) ? 1.0 : min(_872, 1.0));
        _2878 = (_3073 * _3064) + _2409;
        _2880 = (_3073 * _3066) + _2411;
        _2882 = (_3073 * _3068) + _2413;
        _2884 = ((_3058 * 0.039999999105930328369140625) * _3073) + _2732;
        _2886 = ((_3060 * 0.039999999105930328369140625) * _3073) + _2734;
        _2888 = ((_3062 * 0.039999999105930328369140625) * _3073) + _2736;
    }
    else
    {
        _2878 = _2409;
        _2880 = _2411;
        _2882 = _2413;
        _2884 = _2732;
        _2886 = _2734;
        _2888 = _2736;
    }
    float _4815 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4826 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4837 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    uint _2908 = _268 + 6u;
    float _2916 = _809 / cbSceneParam._m0[86u].x;
    float _2917 = _810 / cbSceneParam._m0[86u].y;
    vec4 _2931 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2916, _2917, (log2((isnan(cbSceneParam._m0[77u].w) ? _743 : (isnan(_743) ? cbSceneParam._m0[77u].w : min(_743, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2933 = _2931.x;
    float _2934 = _2931.y;
    float _2935 = _2931.z;
    float _2936 = _2931.w;
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    if (_743 > cbSceneParam._m0[78u].w)
    {
        float _2970 = isnan(_743) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _743 : min(cbSceneParam._m0[80u].w, _743));
        float _2971 = _2970 / _743;
        float _2982 = _2971 * _794;
        float _2983 = _795 * _2971;
        float _2984 = (-0.0) - _2983;
        float _2986 = _2971 * _796;
        float _2988 = (cbSceneParam._m0[77u].w * _2984) / _2970;
        float _2989 = _2988 + cbSceneParam._m0[79u].w;
        float _2990 = cbSceneParam._m0[79u].w - _2983;
        float _2996 = sqrt(((_2982 * _2982) + (_2983 * _2983)) + (_2986 * _2986));
        float _2999 = (1.0 - (cbSceneParam._m0[77u].w / _2970)) * _2996;
        float _3004 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3006 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3159;
        if (abs((_2984 - _2988) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3159 = ((((_2989 > 0.0) ? exp2(_3004 * _2989) : (2.0 - exp2(_3006 * _2989))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2999;
        }
        else
        {
            float _3119 = 1.0 / cbSceneParam._m0[80u].x;
            float _3120 = isnan(_2990) ? _2989 : (isnan(_2989) ? _2990 : max(_2989, _2990));
            float _3121 = isnan(_2990) ? _2989 : (isnan(_2989) ? _2990 : min(_2989, _2990));
            float _3130 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : min(_3120, 0.0));
            float _3131 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : min(_3121, 0.0));
            _3159 = ((abs(_2996 / _2984) * cbSceneParam._m0[80u].y) * ((((_3130 - _3131) * 2.0) - ((exp2(_3004 * (isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0)))) - exp2(_3004 * (isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0))))) * _3119)) - ((exp2(_3006 * _3130) - exp2(_3006 * _3131)) * _3119))) + (_2999 * cbSceneParam._m0[80u].z);
        }
        vec4 _3161 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2916, _2917, 1.0), 0.0);
        float _3170 = exp2((_3159 * (-1.44269502162933349609375)) * (1.0 - _3161.w));
        float _3171 = log2(_3170);
        float _3187 = log2(_2936);
        _3008 = (exp2(_3187 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3171 * cbSceneParam._m0[78u].x)) * _3161.x) / cbSceneParam._m0[78u].x)) + _2933;
        _3010 = (exp2(_3187 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3171 * cbSceneParam._m0[78u].y)) * _3161.y) / cbSceneParam._m0[78u].y)) + _2934;
        _3012 = (exp2(_3187 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3171 * cbSceneParam._m0[78u].z)) * _3161.z) / cbSceneParam._m0[78u].z)) + _2935;
        _3014 = _3170 * _2936;
    }
    else
    {
        _3008 = _2933;
        _3010 = _2934;
        _3012 = _2935;
        _3014 = _2936;
    }
    float _3026 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3027 = _3026 == 3.0;
    float _3028 = log2(_3014);
    float _3035 = exp2(_3028 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2878 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _872))) + ((_2884 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1677)) * cbPerFrame._m0[3u].x));
    float _3036 = exp2(_3028 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2880 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _872))) + ((_2886 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1677)) * cbPerFrame._m0[3u].x));
    float _3037 = exp2(_3028 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2882 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _872))) + ((_2888 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1677)) * cbPerFrame._m0[3u].x));
    float _3046 = (_3026 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3046 * (_3027 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3008)));
    SV_Target.y = _3046 * (_3027 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3010)));
    SV_Target.z = _3046 * (_3027 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3012)));
    SV_Target.w = cbInstanceData._m0[_2908].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2908].w;
}


