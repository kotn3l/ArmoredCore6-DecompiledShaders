#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1432;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3761 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3772 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3783 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _385.x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[24u].z) + _437) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3794 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _462 = (_455 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _463 = (_455 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _464 = (_455 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _503 = _501.x;
    float _513 = dot(vec4(_503, _501.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _527 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _385.y) * 2.0) - ((((_503 - _513) * cbMtdParam._m0[24u].z) + _513) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3805 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _535 = (_528 * ((_481.x * cbMtdParam._m0[13u].x) - _462)) + _462;
    float _536 = (_528 * ((_481.y * cbMtdParam._m0[13u].y) - _463)) + _463;
    float _537 = (_528 * ((_481.z * cbMtdParam._m0[13u].z) - _464)) + _464;
    vec4 _555 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _302) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _303) + cbTextureTilingScale._m0[24u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _574 = _572.x;
    float _584 = dot(vec4(_574, _572.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _596 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _385.z) * 2.0) - ((((_574 - _584) * cbMtdParam._m0[24u].z) + _584) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3816 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _604 = (_597 * ((_555.x * cbMtdParam._m0[14u].x) - _535)) + _535;
    float _605 = (_597 * ((_555.y * cbMtdParam._m0[14u].y) - _536)) + _536;
    float _606 = (_597 * ((_555.z * cbMtdParam._m0[14u].z) - _537)) + _537;
    float _610 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _604;
    float _613 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _605;
    float _616 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _606;
    float _623 = ((_604 - _610) * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) + _610;
    float _624 = ((_605 - _613) * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) + _613;
    float _625 = ((_606 - _616) * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) + _616;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _679 = _677.x;
    float _680 = _677.y;
    float _681 = _677.z;
    float _688 = ((_660.x - _679) * _455) + _679;
    float _689 = ((_660.y - _680) * _455) + _680;
    float _690 = ((_660.z - _681) * _455) + _681;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _713 = ((_702.x - _688) * _528) + _688;
    float _714 = ((_702.y - _689) * _528) + _689;
    float _715 = ((_702.z - _690) * _528) + _690;
    vec4 _727 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _302) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _303) + cbTextureTilingScale._m0[23u].w));
    float _740 = ((_727.z - _715) * _597) + _715;
    float _743 = ((((_727.x - _713) * _597) + _713) * 2.0) + (-1.0);
    float _744 = ((((_727.y - _714) * _597) + _714) * 2.0) + (-1.0);
    float _745 = dot(vec2(_743, _744), vec2(_743, _744));
    float _3827 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _750 = sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))));
    vec4 _770 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _782 = (_743 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_637.x * 2.0) + (-1.0)))) + (((_770.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _783 = (_744 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_637.y * 2.0) + (-1.0)))) + (((_770.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _795 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _797 = _795.x;
    float _798 = 1.0 - _797;
    float _824 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_797 - _798) * cbMtdParam._m0[24u].y) + _798) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3838 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _825 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _833 = ((((cbMtdParam._m0[10u].x - _623) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _825) + _623;
    float _834 = ((((cbMtdParam._m0[10u].y - _624) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _825) + _624;
    float _835 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _625)) * _825) + _625;
    float _840 = (((_637.z - _740) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _740;
    float _844 = ((_770.z - _840) * cbMtdParam._m0[19u].w) + _840;
    float _848 = ((cbMtdParam._m0[23u].y - _844) * _825) + _844;
    vec4 _869 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _875 = (_869.x * 2.0) + (-1.0);
    float _876 = (_869.y * 2.0) + (-1.0);
    float _877 = dot(vec2(_875, _876), vec2(_875, _876));
    float _3849 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _893 = (_825 * (((cbMtdParam._m0[22u].z * _782) - _782) + _875)) + _782;
    float _894 = (_825 * (((cbMtdParam._m0[22u].z * _783) - _783) + _876)) + _783;
    float _895 = (_825 * (sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) - _750)) + _750;
    float _897 = cbMtdParam._m0[22u].x + _770.w;
    float _900 = fma(_895, _251 * NORMAL.x, fma(_894, _258 * TANGENT.x, (_244 * _236) * _893));
    float _903 = fma(_895, _251 * NORMAL.y, fma(_894, _258 * TANGENT.y, (_244 * _237) * _893));
    float _906 = fma(_895, _251 * NORMAL.z, fma(_894, _258 * TANGENT.z, (_244 * _238) * _893));
    float _910 = inversesqrt(dot(vec3(_900, _903, _906), vec3(_900, _903, _906)));
    float _911 = _910 * _900;
    float _912 = _910 * _903;
    float _913 = _910 * _906;
    float _3860 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _914 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _3882 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _3893 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _3904 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _932 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _983 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _973);
    float _984 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _973);
    float _985 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _973);
    float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
    float _990 = _983 * _989;
    float _991 = _984 * _989;
    float _992 = _985 * _989;
    float _998 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _999 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1017 = fma(_913, cbSceneParam._m0[5u].z, fma(_912, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _911));
    float _1020 = fma(_913, cbSceneParam._m0[6u].z, fma(_912, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _911));
    float _1023 = fma(_913, cbSceneParam._m0[7u].z, fma(_912, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _911));
    uint _1037 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1043 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_1037].x;
    float _1044 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_1037].y;
    float _1045 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_1037].z;
    float _3915 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    vec4 _1057 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _998, cbSceneParam._m0[86u].y * _999));
    float _1061 = ((isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * TEXCOORD_5.w) * _1057.x;
    float _1062 = dot(vec3(_911, _912, _913), vec3(_990, _991, _992));
    float _1065 = _1062 * 2.0;
    float _1069 = (_1065 * _911) - _990;
    float _1070 = (_1065 * _912) - _991;
    float _1071 = (_1065 * _913) - _992;
    float _1075 = abs(dot(vec3(_990, _991, _992), vec3(_911, _912, _913)));
    float _3948 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1077 = sqrt(_914);
    float _1090 = exp2((_1077 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1077 * 3.0));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1431;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1156 = fma(_1130, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1122));
        float _1160 = fma(_1130, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1122));
        float _1164 = fma(_1130, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1122));
        float _1189 = _1122 + _911;
        float _1190 = _1126 + _912;
        float _1191 = _1130 + _913;
        float _1201 = fma(_1191, cbModelParam._m0[26u].z, fma(_1190, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1189)) - _1156;
        float _1202 = fma(_1191, cbModelParam._m0[27u].z, fma(_1190, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1189)) - _1160;
        float _1203 = fma(_1191, cbModelParam._m0[28u].z, fma(_1190, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1189)) - _1164;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1156 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1160 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[34u].z) + ((((((_1164 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1259 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1225.x + (-0.5));
        float _1261 = _1259 * (_1225.y + (-0.5));
        float _1262 = _1259 * (_1225.z + (-0.5));
        float _1269 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1232.x + (-0.5));
        float _1271 = _1269 * (_1232.y + (-0.5));
        float _1272 = _1269 * (_1232.z + (-0.5));
        float _1279 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1239.x + (-0.5));
        float _1281 = _1279 * (_1239.y + (-0.5));
        float _1282 = _1279 * (_1239.z + (-0.5));
        float _1289 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1246.x + (-0.5));
        float _1291 = _1289 * (_1246.y + (-0.5));
        float _1292 = _1289 * (_1246.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1313 = (dot(vec3(_911, _912, _913), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1323 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3996 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1325 + 1.0))) + _1330) * _1293;
        float _1340 = _1261 * 0.5;
        float _1341 = _1271 * 0.5;
        float _1342 = _1281 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_911, _912, _913), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4029 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1367 + 1.0))) + _1372) * _1294;
        float _1382 = _1262 * 0.5;
        float _1383 = _1272 * 0.5;
        float _1384 = _1282 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_911, _912, _913), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4062 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1409 + 1.0))) + _1414) * _1295;
        _1431 = _1262;
        _1433 = _1261;
        _1434 = _1260;
        _1435 = _1272;
        _1436 = _1271;
        _1437 = _1270;
        _1438 = _1282;
        _1439 = _1281;
        _1440 = _1280;
        _1441 = _1295;
        _1442 = _1294;
        _1443 = _1293;
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
    }
    else
    {
        _1431 = _1432;
        _1433 = _1432;
        _1434 = _1432;
        _1435 = _1432;
        _1436 = _1432;
        _1437 = _1432;
        _1438 = _1432;
        _1439 = _1432;
        _1440 = _1432;
        _1441 = _1432;
        _1442 = _1432;
        _1443 = _1432;
        _1444 = 0.0;
        _1445 = 0.0;
        _1446 = 0.0;
    }
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1469 = fma(_1130, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1122));
        float _1473 = fma(_1130, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1122));
        float _1477 = fma(_1130, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1122));
        float _1500 = _1122 + _911;
        float _1501 = _1126 + _912;
        float _1502 = _1130 + _913;
        float _1512 = fma(_1502, cbModelParam._m0[30u].z, fma(_1501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1500)) - _1469;
        float _1513 = fma(_1502, cbModelParam._m0[31u].z, fma(_1501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1500)) - _1473;
        float _1514 = fma(_1502, cbModelParam._m0[32u].z, fma(_1501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1500)) - _1477;
        float _1518 = inversesqrt(dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514)));
        float _1531 = ((_1518 * _1512) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1469 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1518 * _1513) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1473 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1518 * _1514) / cbModelParam._m0[35u].z) + ((((((_1477 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        float _1568 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1535.x + (-0.5));
        float _1570 = _1568 * (_1535.y + (-0.5));
        float _1571 = _1568 * (_1535.z + (-0.5));
        float _1578 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1542.x + (-0.5));
        float _1580 = _1578 * (_1542.y + (-0.5));
        float _1581 = _1578 * (_1542.z + (-0.5));
        float _1588 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1549.x + (-0.5));
        float _1590 = _1588 * (_1549.y + (-0.5));
        float _1591 = _1588 * (_1549.z + (-0.5));
        float _1598 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1556.x + (-0.5));
        float _1600 = _1598 * (_1556.y + (-0.5));
        float _1601 = _1598 * (_1556.z + (-0.5));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = _1569 * 0.5;
        float _1606 = _1579 * 0.5;
        float _1607 = _1589 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_911, _912, _913), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4125 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1632 + 1.0))) + _1637) * _1602;
        float _1647 = _1570 * 0.5;
        float _1648 = _1580 * 0.5;
        float _1649 = _1590 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_911, _912, _913), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4158 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1674 + 1.0))) + _1679) * _1603;
        float _1689 = _1571 * 0.5;
        float _1690 = _1581 * 0.5;
        float _1691 = _1591 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_911, _912, _913), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4191 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1716 + 1.0))) + _1721) * _1604;
        _1738 = _1571;
        _1739 = _1570;
        _1740 = _1569;
        _1741 = _1581;
        _1742 = _1580;
        _1743 = _1579;
        _1744 = _1591;
        _1745 = _1590;
        _1746 = _1589;
        _1747 = _1604;
        _1748 = _1603;
        _1749 = _1602;
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
    }
    else
    {
        _1738 = _1432;
        _1739 = _1432;
        _1740 = _1432;
        _1741 = _1432;
        _1742 = _1432;
        _1743 = _1432;
        _1744 = _1432;
        _1745 = _1432;
        _1746 = _1432;
        _1747 = _1432;
        _1748 = _1432;
        _1749 = _1432;
        _1750 = 0.0;
        _1751 = 0.0;
        _1752 = 0.0;
    }
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1444)) + _1444;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1445)) + _1445;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1446)) + _1446;
    float _1785 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1762 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1762 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1762));
    float _1806 = _1069 * 0.5;
    float _1807 = _1070 * 0.5;
    float _1808 = _1071 * 0.5;
    float _1809 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1812 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1815 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1849;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1822 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1431, _1435, _1438, _1441));
        float _1826 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1830 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1837 = dot(vec4(cbModelParam._m0[39u]), vec4(_1806, _1807, _1808, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1837) ? 0.0 : (isnan(0.0) ? _1837 : max(0.0, _1837))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1860;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1851 = dot(vec4(cbModelParam._m0[40u]), vec4(_1806, _1807, _1808, 1.0));
        _1860 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1851) ? 0.0 : (isnan(0.0) ? _1851 : max(0.0, _1851))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1860 = 1.0;
    }
    float _1864 = (_1860 * cbModelParam._m0[1u].x) + (_1849 * (1.0 - cbModelParam._m0[1u].x));
    float _1874 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _914);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1874 : min(cbModelParam._m0[25u].z, _1874));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1923 = fma(_1130, cbModelParam._m0[13u].z, fma(_1126, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1122)) + cbModelParam._m0[13u].w;
        float _1927 = fma(_1130, cbModelParam._m0[14u].z, fma(_1126, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1122)) + cbModelParam._m0[14u].w;
        float _1931 = fma(_1130, cbModelParam._m0[15u].z, fma(_1126, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1122)) + cbModelParam._m0[15u].w;
        float _1934 = fma(_1071, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069));
        float _1937 = fma(_1071, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069));
        float _1940 = fma(_1071, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069));
        float _1968;
        if (_1934 > 0.0)
        {
            _1968 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1968 = frontier_phi_14_12_ladder;
        }
        float _2191;
        if (_1937 > 0.0)
        {
            _2191 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2191 = frontier_phi_23_19_ladder;
        }
        float _2437;
        if (_1940 > 0.0)
        {
            _2437 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2437 = frontier_phi_35_30_ladder;
        }
        float _2439 = isnan(_2191) ? _1968 : (isnan(_1968) ? _2191 : min(_1968, _2191));
        float _2440 = isnan(_2437) ? _2439 : (isnan(_2439) ? _2437 : min(_2439, _2437));
        float _2444 = (_2440 * _1934) + _1923;
        float _2445 = (_2440 * _1937) + _1927;
        float _2446 = (_2440 * _1940) + _1931;
        float _2447 = _2440 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2447;
        float _2451 = _2447 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 > _2451) || ((_2445 < _2449) || ((_2444 < _2449) || (_2444 > _2451))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2570 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2446, cbModelParam._m0[9u].z, fma(_2445, cbModelParam._m0[9u].y, _2444 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2446, cbModelParam._m0[10u].z, fma(_2445, cbModelParam._m0[10u].y, _2444 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2446, cbModelParam._m0[11u].z, fma(_2445, cbModelParam._m0[11u].y, _2444 * cbModelParam._m0[11u].x))), _1875);
            frontier_phi_13_35_ladder = _2570.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2570.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2570.x * cbModelParam._m0[1u].y;
        }
        _1956 = frontier_phi_13_35_ladder_2;
        _1958 = frontier_phi_13_35_ladder_1;
        _1960 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1069, _1070, _1071), _1875);
        _1956 = _1944.x * cbModelParam._m0[1u].y;
        _1958 = _1944.y * cbModelParam._m0[1u].y;
        _1960 = _1944.z * cbModelParam._m0[1u].y;
    }
    float _1964 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _914);
    float _1965 = isnan(_1964) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1964 : min(cbModelParam._m0[25u].w, _1964));
    float _2056;
    float _2058;
    float _2060;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2020 = fma(_1130, cbModelParam._m0[21u].z, fma(_1126, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1122)) + cbModelParam._m0[21u].w;
        float _2024 = fma(_1130, cbModelParam._m0[22u].z, fma(_1126, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1122)) + cbModelParam._m0[22u].w;
        float _2028 = fma(_1130, cbModelParam._m0[23u].z, fma(_1126, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1122)) + cbModelParam._m0[23u].w;
        float _2031 = fma(_1071, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069));
        float _2034 = fma(_1071, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069));
        float _2037 = fma(_1071, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069));
        float _2196;
        if (_2031 > 0.0)
        {
            _2196 = abs((1.0 - _2020) / _2031);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2020 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2196 = frontier_phi_25_21_ladder;
        }
        float _2464;
        if (_2034 > 0.0)
        {
            _2464 = abs((1.0 - _2024) / _2034);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2024 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2464 = frontier_phi_37_32_ladder;
        }
        float _2669;
        if (_2037 > 0.0)
        {
            _2669 = abs((1.0 - _2028) / _2037);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2028 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2669 = frontier_phi_46_43_ladder;
        }
        float _2671 = isnan(_2464) ? _2196 : (isnan(_2196) ? _2464 : min(_2196, _2464));
        float _2672 = isnan(_2669) ? _2671 : (isnan(_2671) ? _2669 : min(_2671, _2669));
        float _2676 = (_2672 * _2031) + _2020;
        float _2677 = (_2672 * _2034) + _2024;
        float _2678 = (_2672 * _2037) + _2028;
        float _2679 = _2672 * 9.9999997473787516355514526367188e-05;
        float _2680 = (-1.0) - _2679;
        float _2682 = _2679 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2678 > _2682) || ((_2678 < _2680) || ((_2677 > _2682) || ((_2677 < _2680) || ((_2676 < _2680) || (_2676 > _2682))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2678, cbModelParam._m0[17u].z, fma(_2677, cbModelParam._m0[17u].y, _2676 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2678, cbModelParam._m0[18u].z, fma(_2677, cbModelParam._m0[18u].y, _2676 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2678, cbModelParam._m0[19u].z, fma(_2677, cbModelParam._m0[19u].y, _2676 * cbModelParam._m0[19u].x))), _1965);
            frontier_phi_22_46_ladder = _2877.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2877.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2877.x * cbModelParam._m0[1u].z;
        }
        _2056 = frontier_phi_22_46_ladder_2;
        _2058 = frontier_phi_22_46_ladder_1;
        _2060 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2040 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1069, _1070, _1071), _1965);
        _2056 = _2040.x * cbModelParam._m0[1u].z;
        _2058 = _2040.y * cbModelParam._m0[1u].z;
        _2060 = _2040.z * cbModelParam._m0[1u].z;
    }
    float _2072 = ((((1.0 - _1090) * ((_1077 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1090 * _1077)) * _1061;
    float _2073 = _2072 * ((cbModelParam._m0[1u].w * (_2056 - _1956)) + _1956);
    float _2074 = _2072 * ((cbModelParam._m0[1u].w * (_2058 - _1958)) + _1958);
    float _2075 = _2072 * ((cbModelParam._m0[1u].w * (_2060 - _1960)) + _1960);
    float _2078 = fma(_2075, cbSceneParam._m0[89u].z, fma(_2074, cbSceneParam._m0[89u].y, _2073 * cbSceneParam._m0[89u].x));
    float _2081 = fma(_2075, cbSceneParam._m0[90u].z, fma(_2074, cbSceneParam._m0[90u].y, _2073 * cbSceneParam._m0[90u].x));
    float _2084 = fma(_2075, cbSceneParam._m0[91u].z, fma(_2074, cbSceneParam._m0[91u].y, _2073 * cbSceneParam._m0[91u].x));
    vec4 _2092 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_998, _999));
    float _2094 = _2092.w;
    float _2106 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2094);
    float _2107 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2094);
    float _2108 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2094);
    uvec4 _2112 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2114 = _2112.x * 14u;
    uint _2115 = _2114 + 13u;
    float _2122 = _1061 + (-1.0);
    float _2127 = (cbLight._m0[_2115].x * _2122) + 1.0;
    float _2128 = (cbLight._m0[_2115].y * _2122) + 1.0;
    float _2129 = (cbLight._m0[_2115].z * _2122) + 1.0;
    float _2130 = (cbLight._m0[_2115].w * _2122) + 1.0;
    uint _2131 = _2114 + 5u;
    float _2137 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    uint _2141 = _2114 + 4u;
    float _2150 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2154 = _2114 | 1u;
    float _2165 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_911, _912, _913));
    float _2168 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_911, _912, _913));
    float _4327 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _4338 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2173 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * 0.3183098733425140380859375;
    float _2175 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.3183098733425140380859375;
    float _2182 = ((cbLight._m0[_2131].x * _2137) * _2175) + (((cbLight._m0[_2141].x * _2106) * _2150) * _2173);
    float _2183 = ((_2137 * cbLight._m0[_2131].y) * _2175) + (((cbLight._m0[_2141].y * _2107) * _2150) * _2173);
    float _2184 = ((_2137 * cbLight._m0[_2131].z) * _2175) + (((cbLight._m0[_2141].z * _2108) * _2150) * _2173);
    uvec4 _2188 = floatBitsToUint(cbLight._m0[_2114 + 12u]);
    bool _2190 = _2188.x == 0u;
    float _2201;
    float _2203;
    float _2205;
    if (_2190)
    {
        _2201 = _2182;
        _2203 = _2183;
        _2205 = _2184;
    }
    else
    {
        uint _2209 = _2114 + 6u;
        float _2225 = (dot(vec3(cbLight._m0[_2114 + 2u].xyz), vec3(_911, _912, _913)) * 0.5) + 0.5;
        float _2226 = _2225 * _2225;
        float _4349 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2227 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2228 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2201 = (((cbLight._m0[_2209].x * 0.3183098733425140380859375) * _2227) * _2228) + _2182;
        _2203 = (((cbLight._m0[_2209].y * 0.3183098733425140380859375) * _2227) * _2228) + _2183;
        _2205 = (((cbLight._m0[_2209].z * 0.3183098733425140380859375) * _2227) * _2228) + _2184;
    }
    bool _2208 = _2188.y == 0u;
    float _2246;
    float _2248;
    float _2250;
    if (_2208)
    {
        _2246 = _2201;
        _2248 = _2203;
        _2250 = _2205;
    }
    else
    {
        uint _2408 = _2114 + 7u;
        float _2424 = (dot(vec3(cbLight._m0[_2114 + 3u].xyz), vec3(_911, _912, _913)) * 0.5) + 0.5;
        float _2425 = _2424 * _2424;
        float _4365 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2426 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2427 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2246 = (((cbLight._m0[_2408].x * 0.3183098733425140380859375) * _2426) * _2427) + _2201;
        _2248 = (((cbLight._m0[_2408].y * 0.3183098733425140380859375) * _2426) * _2427) + _2203;
        _2250 = (((cbLight._m0[_2408].z * 0.3183098733425140380859375) * _2426) * _2427) + _2205;
    }
    uint _2253 = _2114 + 8u;
    float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _914) * 0.949999988079071044921875);
    float _2267 = _2266 * _2266;
    float _2268 = cbLight._m0[_2114].x + _990;
    float _2269 = cbLight._m0[_2114].y + _991;
    float _2270 = cbLight._m0[_2114].z + _992;
    float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
    float _2275 = _2274 * _2268;
    float _2276 = _2274 * _2269;
    float _2277 = _2274 * _2270;
    float _2278 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2114].xyz));
    float _4381 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _4392 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _2282 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2283 = dot(vec3(_911, _912, _913), vec3(_2275, _2276, _2277));
    float _4403 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2287 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2275, _2276, _2277));
    float _4414 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2291 = _2267 * _2267;
    float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
    float _2306 = (exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2307 = 1.0 - _2267;
    float _2318 = (0.5 / (((_2282 * ((_2281 * _2307) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2307) + _2267) * _2281))) * _2281;
    float _4425 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2320 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
    uint _2334 = _2114 + 9u;
    float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _914) * 0.949999988079071044921875);
    float _2346 = _2345 * _2345;
    float _2347 = cbLight._m0[_2154].x + _990;
    float _2348 = cbLight._m0[_2154].y + _991;
    float _2349 = cbLight._m0[_2154].z + _992;
    float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
    float _2354 = _2353 * _2347;
    float _2355 = _2353 * _2348;
    float _2356 = _2353 * _2349;
    float _2357 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2154].xyz));
    float _4436 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2361 = dot(vec3(_911, _912, _913), vec3(_2354, _2355, _2356));
    float _4447 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2354, _2355, _2356));
    float _4458 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2346 * _2346;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2382 = (exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2383 = 1.0 - _2346;
    float _2393 = (0.5 / (((_2282 * ((_2360 * _2383) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2383) + _2346) * _2360))) * _2360;
    float _4469 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2395 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    float _2405 = (((_2382 * cbLight._m0[_2334].x) * _2395) * _2137) + ((((cbLight._m0[_2253].x * _2106) * _2306) * _2320) * _2150);
    float _2406 = (((_2382 * cbLight._m0[_2334].y) * _2395) * _2137) + ((((cbLight._m0[_2253].y * _2107) * _2306) * _2320) * _2150);
    float _2407 = (((_2382 * cbLight._m0[_2334].z) * _2395) * _2137) + ((((cbLight._m0[_2253].z * _2108) * _2306) * _2320) * _2150);
    float _2469;
    float _2471;
    float _2473;
    if (_2190)
    {
        _2469 = _2405;
        _2471 = _2406;
        _2473 = _2407;
    }
    else
    {
        uint _2475 = _2114 + 2u;
        uint _2479 = _2114 + 10u;
        float _2493 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2475].w)) * _914) * 0.949999988079071044921875);
        float _2494 = _2493 * _2493;
        float _2495 = cbLight._m0[_2475].x + _990;
        float _2496 = cbLight._m0[_2475].y + _991;
        float _2497 = cbLight._m0[_2475].z + _992;
        float _2501 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
        float _2502 = _2501 * _2495;
        float _2503 = _2501 * _2496;
        float _2504 = _2501 * _2497;
        float _2505 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2475].xyz));
        float _4480 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2509 = dot(vec3(_911, _912, _913), vec3(_2502, _2503, _2504));
        float _4491 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2513 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_2502, _2503, _2504));
        float _4502 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2517 = _2494 * _2494;
        float _2521 = ((_2512 * _2512) * (_2517 + (-1.0))) + 1.0;
        float _2530 = (exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2531 = 1.0 - _2494;
        float _2541 = (0.5 / (((_2282 * ((_2508 * _2531) + _2494)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2531) + _2494) * _2508))) * _2508;
        float _4513 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2543 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2517 / ((_2521 * _2521) * 3.141590118408203125));
        float _2544 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2469 = (((_2530 * cbLight._m0[_2479].x) * _2543) * _2544) + _2405;
        _2471 = (((_2530 * cbLight._m0[_2479].y) * _2543) * _2544) + _2406;
        _2473 = (((_2530 * cbLight._m0[_2479].z) * _2543) * _2544) + _2407;
    }
    float _2579;
    float _2581;
    float _2583;
    if (_2208)
    {
        _2579 = _2469;
        _2581 = _2471;
        _2583 = _2473;
    }
    else
    {
        uint _2590 = _2114 + 3u;
        uint _2594 = _2114 + 11u;
        float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2590].w)) * _914) * 0.949999988079071044921875);
        float _2609 = _2608 * _2608;
        float _2610 = cbLight._m0[_2590].x + _990;
        float _2611 = cbLight._m0[_2590].y + _991;
        float _2612 = cbLight._m0[_2590].z + _992;
        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
        float _2617 = _2616 * _2610;
        float _2618 = _2616 * _2611;
        float _2619 = _2616 * _2612;
        float _2620 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2590].xyz));
        float _4529 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2624 = dot(vec3(_911, _912, _913), vec3(_2617, _2618, _2619));
        float _4540 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2628 = dot(vec3(cbLight._m0[_2590].xyz), vec3(_2617, _2618, _2619));
        float _4551 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2632 = _2609 * _2609;
        float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
        float _2645 = (exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2646 = 1.0 - _2609;
        float _2656 = (0.5 / (((_2282 * ((_2623 * _2646) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2646) + _2609) * _2623))) * _2623;
        float _4562 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2658 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
        float _2659 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2579 = (((_2645 * cbLight._m0[_2594].x) * _2658) * _2659) + _2469;
        _2581 = (((_2645 * cbLight._m0[_2594].y) * _2658) * _2659) + _2471;
        _2583 = (((_2645 * cbLight._m0[_2594].z) * _2658) * _2659) + _2473;
    }
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    if (_2112.y == 0u)
    {
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2735 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2734;
        float _2736 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2734;
        float _2737 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2734;
        uvec4 _2749 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2750 = _2749.x;
        uint _2761 = uint((float(_2749.y) * floor(float(uint(cbSceneParam._m0[85u].y * _999) / _2750))) + floor(float(uint(cbSceneParam._m0[85u].x * _998) / _2750)));
        float _2771 = (log2(_2737 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2772 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        uint _2775 = uint(isnan(14.0) ? _2772 : (isnan(_2772) ? 14.0 : min(_2772, 14.0)));
        uvec4 _2780 = texelFetch(g_lightClusterGridBuffer, int(((_2775 << 2u) + (_2761 << 6u)) >> 2u));
        uint _2781 = _2780.x;
        uint _2782 = _2749.z;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        if (((((1u << ((_2782 >> 4u) & 15u)) + 4294967295u) & _2781) == 0u) || ((_2782 & 240u) == 0u))
        {
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
        }
        else
        {
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            uint _3033 = 0u;
            uint _3042;
            bool _3043;
            for (;;)
            {
                _3042 = texelFetch(g_lightClassification, int((((_2775 << 5u) + (_2761 << 9u)) + (_3033 << 2u)) >> 2u)).x;
                _3043 = _3042 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3043)
                {
                    frontier_phi_61_pred = _3027;
                    frontier_phi_61_pred_1 = _3032;
                    frontier_phi_61_pred_2 = _3031;
                    frontier_phi_61_pred_3 = _3030;
                    frontier_phi_61_pred_4 = _3029;
                    frontier_phi_61_pred_5 = _3028;
                }
                else
                {
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    uint _3157;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3042;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    for (;;)
                    {
                        uint _3161 = uint(findLSB(_3157)) + (_3033 << 5u);
                        uint _3158 = (_3157 + 4294967295u) & _3157;
                        uint _3163 = _3161 * 48u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3183 = (_3161 * 48u) + 4u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 3u)).x));
                        uint _3202 = (_3161 * 48u) + 8u;
                        vec3 _3213 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x));
                        float _3217 = _3177.x - _2735;
                        float _3218 = _3177.y - _2736;
                        float _3219 = _3177.z - _2737;
                        float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                        float _3223 = inversesqrt(_3220);
                        float _3224 = _3223 * _3217;
                        float _3225 = _3223 * _3218;
                        float _3226 = _3223 * _3219;
                        float _3227 = dot(vec3(_1017, _1020, _1023), vec3(_3224, _3225, _3226));
                        float _3232 = 1.0 - (_3220 * _3177.w);
                        float _4588 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3234 = sqrt(_3220) * _3196.w;
                        float _3237 = 1.39999997615814208984375 / (_3234 + 1.39999997615814208984375);
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3227) + _3238;
                        float _3244 = _3234 * _3234;
                        float _3248 = ((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3233) / ((_3244 * 0.699999988079071044921875) + 1.0);
                        float _3252 = (-0.0) - _2735;
                        float _3253 = (-0.0) - _2736;
                        float _3254 = (-0.0) - _2737;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3259 = _3258 * _3252;
                        float _3260 = _3258 * _3253;
                        float _3261 = _3258 * _3254;
                        float _3269 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _1077;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3259 + _3224;
                        float _3281 = _3260 + _3225;
                        float _3282 = _3261 + _3226;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_1017, _1020, _1023), vec3(_3259, _3260, _3261));
                        float _4604 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3294 = dot(vec3(_1017, _1020, _1023), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4615 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3237 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3227) + _3303;
                        float _4626 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4637 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) / ((_3301 * _3301) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125))) * _3233;
                        _3086 = (_3248 * _3196.x) + _3154;
                        _3087 = (_3248 * _3196.y) + _3155;
                        _3088 = (_3248 * _3196.z) + _3156;
                        _3083 = (_3329 * _3213.x) + _3151;
                        _3084 = (_3329 * _3213.y) + _3152;
                        _3085 = (_3329 * _3213.z) + _3153;
                        if (_3158 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3158;
                        }
                    }
                    frontier_phi_61_pred = _3083;
                    frontier_phi_61_pred_1 = _3088;
                    frontier_phi_61_pred_2 = _3087;
                    frontier_phi_61_pred_3 = _3086;
                    frontier_phi_61_pred_4 = _3085;
                    frontier_phi_61_pred_5 = _3084;
                }
                _2883 = frontier_phi_61_pred;
                _2893 = frontier_phi_61_pred_1;
                _2891 = frontier_phi_61_pred_2;
                _2889 = frontier_phi_61_pred_3;
                _2887 = frontier_phi_61_pred_4;
                _2885 = frontier_phi_61_pred_5;
                uint _3034 = _3033 + 1u;
                if (_3034 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3027 = _2883;
                    _3028 = _2885;
                    _3029 = _2887;
                    _3030 = _2889;
                    _3031 = _2891;
                    _3032 = _2893;
                    _3033 = _3034;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
        }
        uvec4 _2896 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2897 = _2896.z;
        uint _2899 = (_2897 >> 8u) & 15u;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        if (((4294967295u << _2899) & _2781) == 0u)
        {
            _2995 = _2882;
            _2997 = _2884;
            _2999 = _2886;
            _3001 = _2888;
            _3003 = _2890;
            _3005 = _2892;
        }
        else
        {
            float _3020 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
            float _3021 = _3020 * _2735;
            float _3022 = _3020 * _2736;
            float _3023 = _3020 * _2737;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2899 < ((_2897 >> 12u) & 15u))
            {
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3134 = _2882;
                float _3135 = _2884;
                float _3136 = _2886;
                float _3137 = _2888;
                float _3138 = _2890;
                float _3139 = _2892;
                uint _3140 = _2899;
                uint _3149;
                bool _3150;
                for (;;)
                {
                    _3149 = texelFetch(g_lightClassification, int((((_2775 << 5u) + (_2761 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                    _3150 = _3149 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3150)
                    {
                        frontier_phi_67_pred = _3137;
                        frontier_phi_67_pred_1 = _3138;
                        frontier_phi_67_pred_2 = _3139;
                        frontier_phi_67_pred_3 = _3136;
                        frontier_phi_67_pred_4 = _3135;
                        frontier_phi_67_pred_5 = _3134;
                    }
                    else
                    {
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3347 = _3134;
                        float _3348 = _3135;
                        float _3349 = _3136;
                        float _3350 = _3137;
                        float _3351 = _3138;
                        float _3352 = _3139;
                        uint _3353 = _3149;
                        uint _3354;
                        vec4 _3379;
                        float _3380;
                        vec4 _3395;
                        vec3 _3407;
                        vec4 _3422;
                        vec4 _3437;
                        float _3483;
                        bool _3484;
                        for (;;)
                        {
                            uint _3364 = ((_3140 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3353));
                            _3354 = (_3353 + 4294967295u) & _3353;
                            uint _3366 = _3364 * 40u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3380 = _3379.w;
                            uint _3382 = (_3364 * 40u) + 4u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3364 * 40u) + 8u;
                            _3407 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x));
                            uint _3409 = (_3364 * 40u) + 16u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3364 * 40u) + 20u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3364 * 40u) + 24u;
                            vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3458 = (_3364 * 40u) + 28u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            _3483 = fma(_2737, _3471.z, fma(_2736, _3471.y, _3471.x * _2735)) + _3471.w;
                            _3484 = !((fma(_2737, _3452.z, fma(_2736, _3452.y, _3452.x * _2735)) + _3452.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3484)
                            {
                                float _3511 = _3379.x - _2735;
                                float _3512 = _3379.y - _2736;
                                float _3513 = _3379.z - _2737;
                                float _3514 = dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513));
                                float _3517 = inversesqrt(_3514);
                                float _3518 = _3517 * _3511;
                                float _3519 = _3517 * _3512;
                                float _3520 = _3517 * _3513;
                                float _3524 = 1.0 - (_3514 / (_3380 * _3380));
                                float _4648 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3529 = sqrt(_3514) * _3395.w;
                                float _3531 = 1.39999997615814208984375 / (_3529 + 1.39999997615814208984375);
                                float _3532 = _3531 * _3531;
                                float _3535 = ((1.0 - _3532) * dot(vec3(_3518, _3519, _3520), vec3(_1017, _1020, _1023))) + _3532;
                                float _3538 = _3529 * _3529;
                                float _3542 = (fma(_2737, _3422.z, fma(_2736, _3422.y, _3422.x * _2735)) + _3422.w) / _3483;
                                float _3543 = (fma(_2737, _3437.z, fma(_2736, _3437.y, _3437.x * _2735)) + _3437.w) / _3483;
                                float _3547 = 1.0 - dot(vec2(_3542, _3543), vec2(_3542, _3543));
                                float _4664 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3549 = _3548 * (((isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0))) * _3525) / ((_3538 * 0.699999988079071044921875) + 1.0));
                                float _3561 = exp2(log2(1.0 / ((_3538 * 3.5) + 5.0)) * 0.25);
                                float _3562 = 1.0 - _1077;
                                float _3569 = sqrt(1.0 - ((1.0 - (_3562 * _3562)) * (1.0 - (_3561 * _3561))));
                                float _3570 = _3569 * _3569;
                                float _3571 = _3570 * _3570;
                                float _3572 = _3518 - _3021;
                                float _3573 = _3519 - _3022;
                                float _3574 = _3520 - _3023;
                                float _3578 = inversesqrt(dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574)));
                                float _3582 = dot(vec3(_1017, _1020, _1023), vec3((-0.0) - _3021, (-0.0) - _3022, (-0.0) - _3023));
                                float _4675 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3586 = dot(vec3(_1017, _1020, _1023), vec3(_3578 * _3572, _3578 * _3573, _3578 * _3574));
                                float _4686 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3593 = ((_3589 * _3589) * (_3571 + (-1.0))) + 1.0;
                                float _3594 = _3531 * _3570;
                                float _3595 = _3594 * _3594;
                                float _3601 = ((1.0 - _3595) * dot(vec3(_1017, _1020, _1023), vec3(_3518, _3519, _3520))) + _3595;
                                float _4697 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3603 = 1.0 - _3570;
                                float _3613 = (0.5 / (((_3602 * ((_3585 * _3603) + _3570)) + 9.9999999392252902907785028219223e-09) + (((_3602 * _3603) + _3570) * _3585))) * _3602;
                                float _4708 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3623 = (_3548 * _3525) * (((_3571 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3593 * _3593) * ((_3538 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3623 * _3407.x;
                                frontier_phi_73_pred_1 = _3623 * _3407.y;
                                frontier_phi_73_pred_2 = _3549 * _3395.z;
                                frontier_phi_73_pred_3 = _3549 * _3395.y;
                                frontier_phi_73_pred_4 = _3549 * _3395.x;
                                frontier_phi_73_pred_5 = _3623 * _3407.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3627 = frontier_phi_73_pred;
                            _3628 = frontier_phi_73_pred_1;
                            _3632 = frontier_phi_73_pred_2;
                            _3631 = frontier_phi_73_pred_3;
                            _3630 = frontier_phi_73_pred_4;
                            _3629 = frontier_phi_73_pred_5;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            _3334 = _3627 + _3347;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            if (_3354 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3354;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3337;
                        frontier_phi_67_pred_1 = _3338;
                        frontier_phi_67_pred_2 = _3339;
                        frontier_phi_67_pred_3 = _3336;
                        frontier_phi_67_pred_4 = _3335;
                        frontier_phi_67_pred_5 = _3334;
                    }
                    _3002 = frontier_phi_67_pred;
                    _3004 = frontier_phi_67_pred_1;
                    _3006 = frontier_phi_67_pred_2;
                    _3000 = frontier_phi_67_pred_3;
                    _2998 = frontier_phi_67_pred_4;
                    _2996 = frontier_phi_67_pred_5;
                    uint _3141 = _3140 + 1u;
                    if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3134 = _2996;
                        _3135 = _2998;
                        _3136 = _3000;
                        _3137 = _3002;
                        _3138 = _3004;
                        _3139 = _3006;
                        _3140 = _3141;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3004;
                frontier_phi_55_56_ladder_1 = _3006;
                frontier_phi_55_56_ladder_2 = _3002;
                frontier_phi_55_56_ladder_3 = _3000;
                frontier_phi_55_56_ladder_4 = _2998;
                frontier_phi_55_56_ladder_5 = _2996;
            }
            else
            {
                frontier_phi_55_56_ladder = _2890;
                frontier_phi_55_56_ladder_1 = _2892;
                frontier_phi_55_56_ladder_2 = _2888;
                frontier_phi_55_56_ladder_3 = _2886;
                frontier_phi_55_56_ladder_4 = _2884;
                frontier_phi_55_56_ladder_5 = _2882;
            }
            _2995 = frontier_phi_55_56_ladder_5;
            _2997 = frontier_phi_55_56_ladder_4;
            _2999 = frontier_phi_55_56_ladder_3;
            _3001 = frontier_phi_55_56_ladder_2;
            _3003 = frontier_phi_55_56_ladder;
            _3005 = frontier_phi_55_56_ladder_1;
        }
        float _3010 = isnan(1.0) ? _1061 : (isnan(_1061) ? 1.0 : min(_1061, 1.0));
        _2794 = (_3010 * _3001) + _2246;
        _2796 = (_3010 * _3003) + _2248;
        _2798 = (_3010 * _3005) + _2250;
        _2800 = ((_2995 * 0.039999999105930328369140625) * _3010) + _2579;
        _2802 = ((_2997 * 0.039999999105930328369140625) * _3010) + _2581;
        _2804 = ((_2999 * 0.039999999105930328369140625) * _3010) + _2583;
    }
    else
    {
        _2794 = _2246;
        _2796 = _2248;
        _2798 = _2250;
        _2800 = _2579;
        _2802 = _2581;
        _2804 = _2583;
    }
    float _4724 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _4735 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _4746 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    uint _2824 = _283 + 6u;
    float _2832 = _998 / cbSceneParam._m0[86u].x;
    float _2833 = _999 / cbSceneParam._m0[86u].y;
    vec4 _2847 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2832, _2833, (log2((isnan(cbSceneParam._m0[77u].w) ? _932 : (isnan(_932) ? cbSceneParam._m0[77u].w : min(_932, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2849 = _2847.x;
    float _2850 = _2847.y;
    float _2851 = _2847.z;
    float _2852 = _2847.w;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_932 > cbSceneParam._m0[78u].w)
    {
        float _2907 = isnan(_932) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _932 : min(cbSceneParam._m0[80u].w, _932));
        float _2908 = _2907 / _932;
        float _2919 = _2908 * _983;
        float _2920 = _984 * _2908;
        float _2921 = (-0.0) - _2920;
        float _2923 = _2908 * _985;
        float _2925 = (cbSceneParam._m0[77u].w * _2921) / _2907;
        float _2926 = _2925 + cbSceneParam._m0[79u].w;
        float _2927 = cbSceneParam._m0[79u].w - _2920;
        float _2933 = sqrt(((_2919 * _2919) + (_2920 * _2920)) + (_2923 * _2923));
        float _2936 = (1.0 - (cbSceneParam._m0[77u].w / _2907)) * _2933;
        float _2941 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2943 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3096;
        if (abs((_2921 - _2925) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3096 = ((((_2926 > 0.0) ? exp2(_2941 * _2926) : (2.0 - exp2(_2943 * _2926))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2936;
        }
        else
        {
            float _3056 = 1.0 / cbSceneParam._m0[80u].x;
            float _3057 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : max(_2926, _2927));
            float _3058 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : min(_2926, _2927));
            float _3067 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : min(_3057, 0.0));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            _3096 = ((abs(_2933 / _2921) * cbSceneParam._m0[80u].y) * ((((_3067 - _3068) * 2.0) - ((exp2(_2941 * (isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0)))) - exp2(_2941 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))))) * _3056)) - ((exp2(_2943 * _3067) - exp2(_2943 * _3068)) * _3056))) + (_2936 * cbSceneParam._m0[80u].z);
        }
        vec4 _3098 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2832, _2833, 1.0), 0.0);
        float _3107 = exp2((_3096 * (-1.44269502162933349609375)) * (1.0 - _3098.w));
        float _3108 = log2(_3107);
        float _3124 = log2(_2852);
        _2945 = (exp2(_3124 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].x)) * _3098.x) / cbSceneParam._m0[78u].x)) + _2849;
        _2947 = (exp2(_3124 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].y)) * _3098.y) / cbSceneParam._m0[78u].y)) + _2850;
        _2949 = (exp2(_3124 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].z)) * _3098.z) / cbSceneParam._m0[78u].z)) + _2851;
        _2951 = _3107 * _2852;
    }
    else
    {
        _2945 = _2849;
        _2947 = _2850;
        _2949 = _2851;
        _2951 = _2852;
    }
    float _2963 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2964 = _2963 == 3.0;
    float _2965 = log2(_2951);
    float _2972 = exp2(_2965 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2794 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1061))) + ((_2800 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1864)) * cbPerFrame._m0[3u].x));
    float _2973 = exp2(_2965 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2796 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1061))) + ((_2802 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1864)) * cbPerFrame._m0[3u].x));
    float _2974 = exp2(_2965 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2798 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1061))) + ((_2804 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1864)) * cbPerFrame._m0[3u].x));
    float _2983 = (_2963 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2983 * (_2964 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2945)));
    SV_Target.y = _2983 * (_2964 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2947)));
    SV_Target.z = _2983 * (_2964 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2949)));
    SV_Target.w = cbInstanceData._m0[_2824].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2824].w;
}


