#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1356;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _378 = _376.x;
    float _390 = dot(vec4(_378, _376.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _339.x) * 2.0) - ((((_378 - _390) * cbMtdParam._m0[24u].z) + _390) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3659 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _415 = (_408 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _416 = (_408 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _417 = (_408 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _466 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _480 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _339.y) * 2.0) - ((((_456 - _466) * cbMtdParam._m0[24u].z) + _466) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3670 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _488 = (_481 * ((_434.x * cbMtdParam._m0[13u].x) - _415)) + _415;
    float _489 = (_481 * ((_434.y * cbMtdParam._m0[13u].y) - _416)) + _416;
    float _490 = (_481 * ((_434.z * cbMtdParam._m0[13u].z) - _417)) + _417;
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _550 = _546.z;
    float _557 = ((_529.x - _548) * _408) + _548;
    float _558 = ((_529.y - _549) * _408) + _549;
    float _559 = ((_529.z - _550) * _408) + _550;
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _584 = ((_571.z - _559) * _481) + _559;
    float _587 = ((((_571.x - _557) * _481) + _557) * 2.0) + (-1.0);
    float _589 = ((((_571.y - _558) * _481) + _558) * 2.0) + (-1.0);
    float _590 = dot(vec2(_587, _589), vec2(_587, _589));
    float _3681 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _595 = sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _636 = _634.x;
    float _637 = 1.0 - _636;
    float _643 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _646 = ((isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : min(_643, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _655 = (_646 - ((((((_636 - _637) * cbMtdParam._m0[24u].w) + _637) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _646))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3702 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _656 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _663 = (_656 * ((_509.x * cbMtdParam._m0[18u].x) - _488)) + _488;
    float _664 = (_656 * ((_509.y * cbMtdParam._m0[18u].y) - _489)) + _489;
    float _665 = (_656 * ((_509.z * cbMtdParam._m0[18u].z) - _490)) + _490;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _679 = _677.x;
    float _680 = 1.0 - _679;
    float _707 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_679 - _680) * cbMtdParam._m0[24u].y) + _680) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3713 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _708 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _716 = ((((cbMtdParam._m0[10u].x - _663) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _708) + _663;
    float _717 = ((((cbMtdParam._m0[10u].y - _664) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _708) + _664;
    float _718 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _665)) * _708) + _665;
    float _722 = (cbMtdParam._m0[19u].w * (_609.z - _584)) + _584;
    vec4 _736 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _743 = (_736.x * 2.0) + (-1.0);
    float _744 = (_736.y * 2.0) + (-1.0);
    float _745 = dot(vec2(_743, _744), vec2(_743, _744));
    float _3724 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _753 = (_656 * (_736.z - _722)) + _722;
    float _756 = ((cbMtdParam._m0[23u].y - _753) * _708) + _753;
    vec4 _775 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _781 = (_775.x * 2.0) + (-1.0);
    float _782 = (_775.y * 2.0) + (-1.0);
    float _783 = dot(vec2(_781, _782), vec2(_781, _782));
    float _3735 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _791 = (((_609.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _587;
    float _792 = (((_609.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _589;
    float _804 = (((_743 - _791) + (cbMtdParam._m0[21u].x * _791)) * _656) + _791;
    float _805 = (((_744 - _792) + (cbMtdParam._m0[21u].x * _792)) * _656) + _792;
    float _806 = (_656 * (sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) - _595)) + _595;
    float _817 = (((_781 - _804) + (_804 * cbMtdParam._m0[22u].z)) * _708) + _804;
    float _818 = (((_782 - _805) + (_805 * cbMtdParam._m0[22u].z)) * _708) + _805;
    float _819 = ((sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) - _806) * _708) + _806;
    float _821 = cbMtdParam._m0[22u].x + _609.w;
    float _824 = fma(_819, _240 * NORMAL.x, fma(_818, _247 * TANGENT.x, (_233 * _225) * _817));
    float _827 = fma(_819, _240 * NORMAL.y, fma(_818, _247 * TANGENT.y, (_233 * _226) * _817));
    float _830 = fma(_819, _240 * NORMAL.z, fma(_818, _247 * TANGENT.z, (_233 * _227) * _817));
    float _834 = inversesqrt(dot(vec3(_824, _827, _830), vec3(_824, _827, _830)));
    float _835 = _834 * _824;
    float _836 = _834 * _827;
    float _837 = _834 * _830;
    float _3746 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _838 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _3768 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _3779 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _3790 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _856 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _907 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _897);
    float _908 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _897);
    float _909 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _897);
    float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
    float _914 = _907 * _913;
    float _915 = _908 * _913;
    float _916 = _909 * _913;
    float _922 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _923 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _941 = fma(_837, cbSceneParam._m0[5u].z, fma(_836, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _835));
    float _944 = fma(_837, cbSceneParam._m0[6u].z, fma(_836, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _835));
    float _947 = fma(_837, cbSceneParam._m0[7u].z, fma(_836, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _835));
    uint _961 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _967 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_961].x;
    float _968 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_961].y;
    float _969 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_961].z;
    float _3801 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    vec4 _981 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _922, cbSceneParam._m0[86u].y * _923));
    float _985 = ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * TEXCOORD_5.w) * _981.x;
    float _986 = dot(vec3(_835, _836, _837), vec3(_914, _915, _916));
    float _989 = _986 * 2.0;
    float _993 = (_989 * _835) - _914;
    float _994 = (_989 * _836) - _915;
    float _995 = (_989 * _837) - _916;
    float _999 = abs(dot(vec3(_914, _915, _916), vec3(_835, _836, _837)));
    float _3834 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1001 = sqrt(_838);
    float _1014 = exp2((_1001 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1001 * 3.0));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1355;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1080 = fma(_1054, cbModelParam._m0[26u].z, fma(_1050, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1046));
        float _1084 = fma(_1054, cbModelParam._m0[27u].z, fma(_1050, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1046));
        float _1088 = fma(_1054, cbModelParam._m0[28u].z, fma(_1050, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1046));
        float _1113 = _1046 + _835;
        float _1114 = _1050 + _836;
        float _1115 = _1054 + _837;
        float _1125 = fma(_1115, cbModelParam._m0[26u].z, fma(_1114, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1113)) - _1080;
        float _1126 = fma(_1115, cbModelParam._m0[27u].z, fma(_1114, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1113)) - _1084;
        float _1127 = fma(_1115, cbModelParam._m0[28u].z, fma(_1114, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1113)) - _1088;
        float _1131 = inversesqrt(dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127)));
        float _1144 = ((_1131 * _1125) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1080 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1131 * _1126) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1084 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1131 * _1127) / cbModelParam._m0[34u].z) + ((((((_1088 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        float _1183 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1149.x + (-0.5));
        float _1185 = _1183 * (_1149.y + (-0.5));
        float _1186 = _1183 * (_1149.z + (-0.5));
        float _1193 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1156.x + (-0.5));
        float _1195 = _1193 * (_1156.y + (-0.5));
        float _1196 = _1193 * (_1156.z + (-0.5));
        float _1203 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1163.x + (-0.5));
        float _1205 = _1203 * (_1163.y + (-0.5));
        float _1206 = _1203 * (_1163.z + (-0.5));
        float _1213 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1170.x + (-0.5));
        float _1215 = _1213 * (_1170.y + (-0.5));
        float _1216 = _1213 * (_1170.z + (-0.5));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = _1184 * 0.5;
        float _1221 = _1194 * 0.5;
        float _1222 = _1204 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1237 = (dot(vec3(_835, _836, _837), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1247 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3882 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1249 + 1.0))) + _1254) * _1217;
        float _1264 = _1185 * 0.5;
        float _1265 = _1195 * 0.5;
        float _1266 = _1205 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_835, _836, _837), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3915 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1291 + 1.0))) + _1296) * _1218;
        float _1306 = _1186 * 0.5;
        float _1307 = _1196 * 0.5;
        float _1308 = _1206 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_835, _836, _837), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3948 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1333 + 1.0))) + _1338) * _1219;
        _1355 = _1186;
        _1357 = _1185;
        _1358 = _1184;
        _1359 = _1196;
        _1360 = _1195;
        _1361 = _1194;
        _1362 = _1206;
        _1363 = _1205;
        _1364 = _1204;
        _1365 = _1219;
        _1366 = _1218;
        _1367 = _1217;
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1356;
        _1357 = _1356;
        _1358 = _1356;
        _1359 = _1356;
        _1360 = _1356;
        _1361 = _1356;
        _1362 = _1356;
        _1363 = _1356;
        _1364 = _1356;
        _1365 = _1356;
        _1366 = _1356;
        _1367 = _1356;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1394 = fma(_1054, cbModelParam._m0[30u].z, fma(_1050, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1046));
        float _1398 = fma(_1054, cbModelParam._m0[31u].z, fma(_1050, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1046));
        float _1402 = fma(_1054, cbModelParam._m0[32u].z, fma(_1050, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1046));
        float _1425 = _1046 + _835;
        float _1426 = _1050 + _836;
        float _1427 = _1054 + _837;
        float _1437 = fma(_1427, cbModelParam._m0[30u].z, fma(_1426, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1425)) - _1394;
        float _1438 = fma(_1427, cbModelParam._m0[31u].z, fma(_1426, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1425)) - _1398;
        float _1439 = fma(_1427, cbModelParam._m0[32u].z, fma(_1426, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1425)) - _1402;
        float _1443 = inversesqrt(dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439)));
        float _1456 = ((_1443 * _1437) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1394 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1443 * _1438) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1398 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1443 * _1439) / cbModelParam._m0[35u].z) + ((((((_1402 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        float _1493 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1460.x + (-0.5));
        float _1495 = _1493 * (_1460.y + (-0.5));
        float _1496 = _1493 * (_1460.z + (-0.5));
        float _1503 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1467.x + (-0.5));
        float _1505 = _1503 * (_1467.y + (-0.5));
        float _1506 = _1503 * (_1467.z + (-0.5));
        float _1513 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1474.x + (-0.5));
        float _1515 = _1513 * (_1474.y + (-0.5));
        float _1516 = _1513 * (_1474.z + (-0.5));
        float _1523 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1481.x + (-0.5));
        float _1525 = _1523 * (_1481.y + (-0.5));
        float _1526 = _1523 * (_1481.z + (-0.5));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = _1494 * 0.5;
        float _1531 = _1504 * 0.5;
        float _1532 = _1514 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_835, _836, _837), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4011 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1557 + 1.0))) + _1562) * _1527;
        float _1572 = _1495 * 0.5;
        float _1573 = _1505 * 0.5;
        float _1574 = _1515 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_835, _836, _837), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4044 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1599 + 1.0))) + _1604) * _1528;
        float _1614 = _1496 * 0.5;
        float _1615 = _1506 * 0.5;
        float _1616 = _1516 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_835, _836, _837), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4077 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1641 + 1.0))) + _1646) * _1529;
        _1663 = _1496;
        _1664 = _1495;
        _1665 = _1494;
        _1666 = _1506;
        _1667 = _1505;
        _1668 = _1504;
        _1669 = _1516;
        _1670 = _1515;
        _1671 = _1514;
        _1672 = _1529;
        _1673 = _1528;
        _1674 = _1527;
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
    }
    else
    {
        _1663 = _1356;
        _1664 = _1356;
        _1665 = _1356;
        _1666 = _1356;
        _1667 = _1356;
        _1668 = _1356;
        _1669 = _1356;
        _1670 = _1356;
        _1671 = _1356;
        _1672 = _1356;
        _1673 = _1356;
        _1674 = _1356;
        _1675 = 0.0;
        _1676 = 0.0;
        _1677 = 0.0;
    }
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1368)) + _1368;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1369)) + _1369;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1370)) + _1370;
    float _1710 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1713 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1716 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1687));
    float _1731 = _993 * 0.5;
    float _1732 = _994 * 0.5;
    float _1733 = _995 * 0.5;
    float _1734 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1737 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1740 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1774;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1747 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1355, _1359, _1362, _1365));
        float _1751 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1357, _1360, _1363, _1366));
        float _1755 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1762 = dot(vec4(cbModelParam._m0[39u]), vec4(_1731, _1732, _1733, 1.0));
        _1774 = dot(vec3(isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1762) ? 0.0 : (isnan(0.0) ? _1762 : max(0.0, _1762))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1774 = 1.0;
    }
    float _1785;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1776 = dot(vec4(cbModelParam._m0[40u]), vec4(_1731, _1732, _1733, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1789 = (_1785 * cbModelParam._m0[1u].x) + (_1774 * (1.0 - cbModelParam._m0[1u].x));
    float _1799 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _838);
    float _1800 = isnan(_1799) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1799 : min(cbModelParam._m0[25u].z, _1799));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1847 = fma(_1054, cbModelParam._m0[13u].z, fma(_1050, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046)) + cbModelParam._m0[13u].w;
        float _1851 = fma(_1054, cbModelParam._m0[14u].z, fma(_1050, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046)) + cbModelParam._m0[14u].w;
        float _1855 = fma(_1054, cbModelParam._m0[15u].z, fma(_1050, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046)) + cbModelParam._m0[15u].w;
        float _1858 = fma(_995, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993));
        float _1861 = fma(_995, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993));
        float _1864 = fma(_995, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993));
        float _1892;
        if (_1858 > 0.0)
        {
            _1892 = abs((1.0 - _1847) / _1858);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1847 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1892 = frontier_phi_14_12_ladder;
        }
        float _2092;
        if (_1861 > 0.0)
        {
            _2092 = abs((1.0 - _1851) / _1861);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1851 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2092 = frontier_phi_23_19_ladder;
        }
        float _2335;
        if (_1864 > 0.0)
        {
            _2335 = abs((1.0 - _1855) / _1864);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1855 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2335 = frontier_phi_35_30_ladder;
        }
        float _2337 = isnan(_2092) ? _1892 : (isnan(_1892) ? _2092 : min(_1892, _2092));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1858) + _1847;
        float _2343 = (_2338 * _1861) + _1851;
        float _2344 = (_2338 * _1864) + _1855;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2345;
        float _2349 = _2345 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 > _2349) || ((_2343 < _2347) || ((_2342 < _2347) || (_2342 > _2349))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2344, cbModelParam._m0[9u].z, fma(_2343, cbModelParam._m0[9u].y, _2342 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2344, cbModelParam._m0[10u].z, fma(_2343, cbModelParam._m0[10u].y, _2342 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2344, cbModelParam._m0[11u].z, fma(_2343, cbModelParam._m0[11u].y, _2342 * cbModelParam._m0[11u].x))), _1800);
            frontier_phi_13_35_ladder = _2468.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2468.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2468.x * cbModelParam._m0[1u].y;
        }
        _1880 = frontier_phi_13_35_ladder_2;
        _1882 = frontier_phi_13_35_ladder_1;
        _1884 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_993, _994, _995), _1800);
        _1880 = _1868.x * cbModelParam._m0[1u].y;
        _1882 = _1868.y * cbModelParam._m0[1u].y;
        _1884 = _1868.z * cbModelParam._m0[1u].y;
    }
    float _1888 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _838);
    float _1889 = isnan(_1888) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1888 : min(cbModelParam._m0[25u].w, _1888));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1942 = fma(_1054, cbModelParam._m0[21u].z, fma(_1050, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046)) + cbModelParam._m0[21u].w;
        float _1946 = fma(_1054, cbModelParam._m0[22u].z, fma(_1050, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046)) + cbModelParam._m0[22u].w;
        float _1950 = fma(_1054, cbModelParam._m0[23u].z, fma(_1050, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046)) + cbModelParam._m0[23u].w;
        float _1953 = fma(_995, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993));
        float _1956 = fma(_995, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993));
        float _1959 = fma(_995, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993));
        float _2097;
        if (_1953 > 0.0)
        {
            _2097 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2097 = frontier_phi_25_21_ladder;
        }
        float _2362;
        if (_1956 > 0.0)
        {
            _2362 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2362 = frontier_phi_37_32_ladder;
        }
        float _2567;
        if (_1959 > 0.0)
        {
            _2567 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2567 = frontier_phi_46_43_ladder;
        }
        float _2569 = isnan(_2362) ? _2097 : (isnan(_2097) ? _2362 : min(_2097, _2362));
        float _2570 = isnan(_2567) ? _2569 : (isnan(_2569) ? _2567 : min(_2569, _2567));
        float _2574 = (_2570 * _1953) + _1942;
        float _2575 = (_2570 * _1956) + _1946;
        float _2576 = (_2570 * _1959) + _1950;
        float _2577 = _2570 * 9.9999997473787516355514526367188e-05;
        float _2578 = (-1.0) - _2577;
        float _2580 = _2577 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2576 > _2580) || ((_2576 < _2578) || ((_2575 > _2580) || ((_2575 < _2578) || ((_2574 < _2578) || (_2574 > _2580))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2775 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2576, cbModelParam._m0[17u].z, fma(_2575, cbModelParam._m0[17u].y, _2574 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2576, cbModelParam._m0[18u].z, fma(_2575, cbModelParam._m0[18u].y, _2574 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2576, cbModelParam._m0[19u].z, fma(_2575, cbModelParam._m0[19u].y, _2574 * cbModelParam._m0[19u].x))), _1889);
            frontier_phi_22_46_ladder = _2775.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2775.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2775.x * cbModelParam._m0[1u].z;
        }
        _1978 = frontier_phi_22_46_ladder_2;
        _1980 = frontier_phi_22_46_ladder_1;
        _1982 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_993, _994, _995), _1889);
        _1978 = _1962.x * cbModelParam._m0[1u].z;
        _1980 = _1962.y * cbModelParam._m0[1u].z;
        _1982 = _1962.z * cbModelParam._m0[1u].z;
    }
    float _1994 = ((((1.0 - _1014) * ((_1001 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1014 * _1001)) * _985;
    float _1995 = _1994 * ((cbModelParam._m0[1u].w * (_1978 - _1880)) + _1880);
    float _1996 = _1994 * ((cbModelParam._m0[1u].w * (_1980 - _1882)) + _1882);
    float _1997 = _1994 * ((cbModelParam._m0[1u].w * (_1982 - _1884)) + _1884);
    float _2000 = fma(_1997, cbSceneParam._m0[89u].z, fma(_1996, cbSceneParam._m0[89u].y, _1995 * cbSceneParam._m0[89u].x));
    float _2003 = fma(_1997, cbSceneParam._m0[90u].z, fma(_1996, cbSceneParam._m0[90u].y, _1995 * cbSceneParam._m0[90u].x));
    float _2006 = fma(_1997, cbSceneParam._m0[91u].z, fma(_1996, cbSceneParam._m0[91u].y, _1995 * cbSceneParam._m0[91u].x));
    uvec4 _2016 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2018 = _2016.x * 14u;
    uint _2019 = _2018 + 13u;
    float _2026 = _985 + (-1.0);
    float _2031 = (cbLight._m0[_2019].x * _2026) + 1.0;
    float _2032 = (cbLight._m0[_2019].y * _2026) + 1.0;
    float _2033 = (cbLight._m0[_2019].z * _2026) + 1.0;
    float _2034 = (cbLight._m0[_2019].w * _2026) + 1.0;
    uint _2035 = _2018 + 5u;
    float _2041 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2045 = _2018 + 4u;
    float _2051 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2055 = _2018 | 1u;
    float _2066 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_835, _836, _837));
    float _2069 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_835, _836, _837));
    float _4213 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _4224 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2074 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.3183098733425140380859375;
    float _2076 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _2083 = ((cbLight._m0[_2035].x * _2041) * _2076) + ((cbLight._m0[_2045].x * _2051) * _2074);
    float _2084 = ((_2041 * cbLight._m0[_2035].y) * _2076) + ((_2051 * cbLight._m0[_2045].y) * _2074);
    float _2085 = ((_2041 * cbLight._m0[_2035].z) * _2076) + ((_2051 * cbLight._m0[_2045].z) * _2074);
    uvec4 _2089 = floatBitsToUint(cbLight._m0[_2018 + 12u]);
    bool _2091 = _2089.x == 0u;
    float _2102;
    float _2104;
    float _2106;
    if (_2091)
    {
        _2102 = _2083;
        _2104 = _2084;
        _2106 = _2085;
    }
    else
    {
        uint _2110 = _2018 + 6u;
        float _2126 = (dot(vec3(cbLight._m0[_2018 + 2u].xyz), vec3(_835, _836, _837)) * 0.5) + 0.5;
        float _2127 = _2126 * _2126;
        float _4235 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2128 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2129 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2102 = (((cbLight._m0[_2110].x * 0.3183098733425140380859375) * _2128) * _2129) + _2083;
        _2104 = (((cbLight._m0[_2110].y * 0.3183098733425140380859375) * _2128) * _2129) + _2084;
        _2106 = (((cbLight._m0[_2110].z * 0.3183098733425140380859375) * _2128) * _2129) + _2085;
    }
    bool _2109 = _2089.y == 0u;
    float _2147;
    float _2149;
    float _2151;
    if (_2109)
    {
        _2147 = _2102;
        _2149 = _2104;
        _2151 = _2106;
    }
    else
    {
        uint _2306 = _2018 + 7u;
        float _2322 = (dot(vec3(cbLight._m0[_2018 + 3u].xyz), vec3(_835, _836, _837)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4251 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2325 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2147 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2102;
        _2149 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2104;
        _2151 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2106;
    }
    uint _2154 = _2018 + 8u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _838) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_2018].x + _914;
    float _2170 = cbLight._m0[_2018].y + _915;
    float _2171 = cbLight._m0[_2018].z + _916;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2018].xyz));
    float _4267 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _2183 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2184 = dot(vec3(_835, _836, _837), vec3(_2176, _2177, _2178));
    float _4289 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2188 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2176, _2177, _2178));
    float _4300 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2192 = _2168 * _2168;
    float _2196 = ((_2187 * _2187) * (_2192 + (-1.0))) + 1.0;
    float _2207 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2208 = 1.0 - _2168;
    float _2219 = (0.5 / (((_2183 * ((_2182 * _2208) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2208) + _2168) * _2182))) * _2182;
    float _4311 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2192 / ((_2196 * _2196) * 3.141590118408203125));
    uint _2232 = _2018 + 9u;
    float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _838) * 0.949999988079071044921875);
    float _2244 = _2243 * _2243;
    float _2245 = cbLight._m0[_2055].x + _914;
    float _2246 = cbLight._m0[_2055].y + _915;
    float _2247 = cbLight._m0[_2055].z + _916;
    float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
    float _2252 = _2251 * _2245;
    float _2253 = _2251 * _2246;
    float _2254 = _2251 * _2247;
    float _2255 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2055].xyz));
    float _4322 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2259 = dot(vec3(_835, _836, _837), vec3(_2252, _2253, _2254));
    float _4333 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2263 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2252, _2253, _2254));
    float _4344 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2267 = _2244 * _2244;
    float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
    float _2280 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2281 = 1.0 - _2244;
    float _2291 = (0.5 / (((_2183 * ((_2258 * _2281) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2281) + _2244) * _2258))) * _2258;
    float _4355 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2293 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
    float _2303 = (((_2280 * cbLight._m0[_2232].x) * _2293) * _2041) + (((_2207 * cbLight._m0[_2154].x) * _2221) * _2051);
    float _2304 = (((_2280 * cbLight._m0[_2232].y) * _2293) * _2041) + (((_2207 * cbLight._m0[_2154].y) * _2221) * _2051);
    float _2305 = (((_2280 * cbLight._m0[_2232].z) * _2293) * _2041) + (((_2207 * cbLight._m0[_2154].z) * _2221) * _2051);
    float _2367;
    float _2369;
    float _2371;
    if (_2091)
    {
        _2367 = _2303;
        _2369 = _2304;
        _2371 = _2305;
    }
    else
    {
        uint _2373 = _2018 + 2u;
        uint _2377 = _2018 + 10u;
        float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _838) * 0.949999988079071044921875);
        float _2392 = _2391 * _2391;
        float _2393 = cbLight._m0[_2373].x + _914;
        float _2394 = cbLight._m0[_2373].y + _915;
        float _2395 = cbLight._m0[_2373].z + _916;
        float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
        float _2400 = _2399 * _2393;
        float _2401 = _2399 * _2394;
        float _2402 = _2399 * _2395;
        float _2403 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2373].xyz));
        float _4366 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2407 = dot(vec3(_835, _836, _837), vec3(_2400, _2401, _2402));
        float _4377 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2411 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2400, _2401, _2402));
        float _4388 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2415 = _2392 * _2392;
        float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
        float _2428 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2429 = 1.0 - _2392;
        float _2439 = (0.5 / (((_2183 * ((_2406 * _2429) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2429) + _2392) * _2406))) * _2406;
        float _4399 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2441 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
        float _2442 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2367 = (((_2428 * cbLight._m0[_2377].x) * _2441) * _2442) + _2303;
        _2369 = (((_2428 * cbLight._m0[_2377].y) * _2441) * _2442) + _2304;
        _2371 = (((_2428 * cbLight._m0[_2377].z) * _2441) * _2442) + _2305;
    }
    float _2477;
    float _2479;
    float _2481;
    if (_2109)
    {
        _2477 = _2367;
        _2479 = _2369;
        _2481 = _2371;
    }
    else
    {
        uint _2488 = _2018 + 3u;
        uint _2492 = _2018 + 11u;
        float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _838) * 0.949999988079071044921875);
        float _2507 = _2506 * _2506;
        float _2508 = cbLight._m0[_2488].x + _914;
        float _2509 = cbLight._m0[_2488].y + _915;
        float _2510 = cbLight._m0[_2488].z + _916;
        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
        float _2515 = _2514 * _2508;
        float _2516 = _2514 * _2509;
        float _2517 = _2514 * _2510;
        float _2518 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2488].xyz));
        float _4415 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2522 = dot(vec3(_835, _836, _837), vec3(_2515, _2516, _2517));
        float _4426 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2526 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2515, _2516, _2517));
        float _4437 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2530 = _2507 * _2507;
        float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
        float _2543 = (exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2544 = 1.0 - _2507;
        float _2554 = (0.5 / (((_2183 * ((_2521 * _2544) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2544) + _2507) * _2521))) * _2521;
        float _4448 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2556 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
        float _2557 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2477 = (((_2543 * cbLight._m0[_2492].x) * _2556) * _2557) + _2367;
        _2479 = (((_2543 * cbLight._m0[_2492].y) * _2556) * _2557) + _2369;
        _2481 = (((_2543 * cbLight._m0[_2492].z) * _2556) * _2557) + _2371;
    }
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    if (_2016.y == 0u)
    {
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2632;
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2632;
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2632;
        uvec4 _2647 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2648 = _2647.x;
        uint _2659 = uint((float(_2647.y) * floor(float(uint(cbSceneParam._m0[85u].y * _923) / _2648))) + floor(float(uint(cbSceneParam._m0[85u].x * _922) / _2648)));
        float _2669 = (log2(_2635 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2670 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        uint _2673 = uint(isnan(14.0) ? _2670 : (isnan(_2670) ? 14.0 : min(_2670, 14.0)));
        uvec4 _2678 = texelFetch(g_lightClusterGridBuffer, int(((_2673 << 2u) + (_2659 << 6u)) >> 2u));
        uint _2679 = _2678.x;
        uint _2680 = _2647.z;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        if (((((1u << ((_2680 >> 4u) & 15u)) + 4294967295u) & _2679) == 0u) || ((_2680 & 240u) == 0u))
        {
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
        }
        else
        {
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            uint _2931 = 0u;
            uint _2940;
            bool _2941;
            for (;;)
            {
                _2940 = texelFetch(g_lightClassification, int((((_2673 << 5u) + (_2659 << 9u)) + (_2931 << 2u)) >> 2u)).x;
                _2941 = _2940 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2941)
                {
                    frontier_phi_61_pred = _2925;
                    frontier_phi_61_pred_1 = _2930;
                    frontier_phi_61_pred_2 = _2929;
                    frontier_phi_61_pred_3 = _2928;
                    frontier_phi_61_pred_4 = _2927;
                    frontier_phi_61_pred_5 = _2926;
                }
                else
                {
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    uint _3055;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2940;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    for (;;)
                    {
                        uint _3059 = uint(findLSB(_3055)) + (_2931 << 5u);
                        uint _3056 = (_3055 + 4294967295u) & _3055;
                        uint _3061 = _3059 * 48u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3081 = (_3059 * 48u) + 4u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3100 = (_3059 * 48u) + 8u;
                        vec3 _3111 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x));
                        float _3115 = _3075.x - _2633;
                        float _3116 = _3075.y - _2634;
                        float _3117 = _3075.z - _2635;
                        float _3118 = dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117));
                        float _3121 = inversesqrt(_3118);
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3125 = dot(vec3(_941, _944, _947), vec3(_3122, _3123, _3124));
                        float _3130 = 1.0 - (_3118 * _3075.w);
                        float _4474 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3132 = sqrt(_3118) * _3094.w;
                        float _3135 = 1.39999997615814208984375 / (_3132 + 1.39999997615814208984375);
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3125) + _3136;
                        float _3142 = _3132 * _3132;
                        float _3146 = ((isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))) * _3131) / ((_3142 * 0.699999988079071044921875) + 1.0);
                        float _3150 = (-0.0) - _2633;
                        float _3151 = (-0.0) - _2634;
                        float _3152 = (-0.0) - _2635;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3157 = _3156 * _3150;
                        float _3158 = _3156 * _3151;
                        float _3159 = _3156 * _3152;
                        float _3167 = exp2(log2(1.0 / ((_3142 * 3.5) + 5.0)) * 0.25);
                        float _3168 = 1.0 - _1001;
                        float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                        float _3176 = _3175 * _3175;
                        float _3177 = _3176 * _3176;
                        float _3178 = _3157 + _3122;
                        float _3179 = _3158 + _3123;
                        float _3180 = _3159 + _3124;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3188 = dot(vec3(_941, _944, _947), vec3(_3157, _3158, _3159));
                        float _4490 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3191 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3192 = dot(vec3(_941, _944, _947), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                        float _4501 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3195 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                        float _3200 = _3135 * _3176;
                        float _3201 = _3200 * _3200;
                        float _3204 = ((1.0 - _3201) * _3125) + _3201;
                        float _4512 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3205 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3206 = 1.0 - _3176;
                        float _3216 = (0.5 / (((_3205 * ((_3191 * _3206) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3205 * _3206) + _3176) * _3191))) * _3205;
                        float _4523 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3227 = (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) / ((_3199 * _3199) * ((_3142 * 2.1991131305694580078125) + 3.141590118408203125))) * _3131;
                        _2984 = (_3146 * _3094.x) + _3052;
                        _2985 = (_3146 * _3094.y) + _3053;
                        _2986 = (_3146 * _3094.z) + _3054;
                        _2981 = (_3227 * _3111.x) + _3049;
                        _2982 = (_3227 * _3111.y) + _3050;
                        _2983 = (_3227 * _3111.z) + _3051;
                        if (_3056 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _3056;
                        }
                    }
                    frontier_phi_61_pred = _2981;
                    frontier_phi_61_pred_1 = _2986;
                    frontier_phi_61_pred_2 = _2985;
                    frontier_phi_61_pred_3 = _2984;
                    frontier_phi_61_pred_4 = _2983;
                    frontier_phi_61_pred_5 = _2982;
                }
                _2781 = frontier_phi_61_pred;
                _2791 = frontier_phi_61_pred_1;
                _2789 = frontier_phi_61_pred_2;
                _2787 = frontier_phi_61_pred_3;
                _2785 = frontier_phi_61_pred_4;
                _2783 = frontier_phi_61_pred_5;
                uint _2932 = _2931 + 1u;
                if (_2932 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2925 = _2781;
                    _2926 = _2783;
                    _2927 = _2785;
                    _2928 = _2787;
                    _2929 = _2789;
                    _2930 = _2791;
                    _2931 = _2932;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
        }
        uvec4 _2794 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2795 = _2794.z;
        uint _2797 = (_2795 >> 8u) & 15u;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        if (((4294967295u << _2797) & _2679) == 0u)
        {
            _2893 = _2780;
            _2895 = _2782;
            _2897 = _2784;
            _2899 = _2786;
            _2901 = _2788;
            _2903 = _2790;
        }
        else
        {
            float _2918 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
            float _2919 = _2918 * _2633;
            float _2920 = _2918 * _2634;
            float _2921 = _2918 * _2635;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2797 < ((_2795 >> 12u) & 15u))
            {
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _3032 = _2780;
                float _3033 = _2782;
                float _3034 = _2784;
                float _3035 = _2786;
                float _3036 = _2788;
                float _3037 = _2790;
                uint _3038 = _2797;
                uint _3047;
                bool _3048;
                for (;;)
                {
                    _3047 = texelFetch(g_lightClassification, int((((_2673 << 5u) + (_2659 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                    _3048 = _3047 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3048)
                    {
                        frontier_phi_67_pred = _3035;
                        frontier_phi_67_pred_1 = _3036;
                        frontier_phi_67_pred_2 = _3037;
                        frontier_phi_67_pred_3 = _3034;
                        frontier_phi_67_pred_4 = _3033;
                        frontier_phi_67_pred_5 = _3032;
                    }
                    else
                    {
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3245 = _3032;
                        float _3246 = _3033;
                        float _3247 = _3034;
                        float _3248 = _3035;
                        float _3249 = _3036;
                        float _3250 = _3037;
                        uint _3251 = _3047;
                        uint _3252;
                        vec4 _3277;
                        float _3278;
                        vec4 _3293;
                        vec3 _3305;
                        vec4 _3320;
                        vec4 _3335;
                        float _3381;
                        bool _3382;
                        for (;;)
                        {
                            uint _3262 = ((_3038 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3251));
                            _3252 = (_3251 + 4294967295u) & _3251;
                            uint _3264 = _3262 * 40u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            _3278 = _3277.w;
                            uint _3280 = (_3262 * 40u) + 4u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3295 = (_3262 * 40u) + 8u;
                            _3305 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x));
                            uint _3307 = (_3262 * 40u) + 16u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3322 = (_3262 * 40u) + 20u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3337 = (_3262 * 40u) + 24u;
                            vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3356 = (_3262 * 40u) + 28u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3381 = fma(_2635, _3369.z, fma(_2634, _3369.y, _3369.x * _2633)) + _3369.w;
                            _3382 = !((fma(_2635, _3350.z, fma(_2634, _3350.y, _3350.x * _2633)) + _3350.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3382)
                            {
                                float _3409 = _3277.x - _2633;
                                float _3410 = _3277.y - _2634;
                                float _3411 = _3277.z - _2635;
                                float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                                float _3415 = inversesqrt(_3412);
                                float _3416 = _3415 * _3409;
                                float _3417 = _3415 * _3410;
                                float _3418 = _3415 * _3411;
                                float _3422 = 1.0 - (_3412 / (_3278 * _3278));
                                float _4534 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3427 = sqrt(_3412) * _3293.w;
                                float _3429 = 1.39999997615814208984375 / (_3427 + 1.39999997615814208984375);
                                float _3430 = _3429 * _3429;
                                float _3433 = ((1.0 - _3430) * dot(vec3(_3416, _3417, _3418), vec3(_941, _944, _947))) + _3430;
                                float _3436 = _3427 * _3427;
                                float _3440 = (fma(_2635, _3320.z, fma(_2634, _3320.y, _3320.x * _2633)) + _3320.w) / _3381;
                                float _3441 = (fma(_2635, _3335.z, fma(_2634, _3335.y, _3335.x * _2633)) + _3335.w) / _3381;
                                float _3445 = 1.0 - dot(vec2(_3440, _3441), vec2(_3440, _3441));
                                float _4550 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3446 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3447 = _3446 * (((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3423) / ((_3436 * 0.699999988079071044921875) + 1.0));
                                float _3459 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                                float _3460 = 1.0 - _1001;
                                float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                                float _3468 = _3467 * _3467;
                                float _3469 = _3468 * _3468;
                                float _3470 = _3416 - _2919;
                                float _3471 = _3417 - _2920;
                                float _3472 = _3418 - _2921;
                                float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                                float _3480 = dot(vec3(_941, _944, _947), vec3((-0.0) - _2919, (-0.0) - _2920, (-0.0) - _2921));
                                float _4561 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3484 = dot(vec3(_941, _944, _947), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                                float _4572 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3487 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                                float _3492 = _3429 * _3468;
                                float _3493 = _3492 * _3492;
                                float _3499 = ((1.0 - _3493) * dot(vec3(_941, _944, _947), vec3(_3416, _3417, _3418))) + _3493;
                                float _4583 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3501 = 1.0 - _3468;
                                float _3511 = (0.5 / (((_3500 * ((_3483 * _3501) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3468) * _3483))) * _3500;
                                float _4594 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3521 = (_3446 * _3423) * (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) / ((_3491 * _3491) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3521 * _3305.x;
                                frontier_phi_73_pred_1 = _3521 * _3305.y;
                                frontier_phi_73_pred_2 = _3447 * _3293.z;
                                frontier_phi_73_pred_3 = _3447 * _3293.y;
                                frontier_phi_73_pred_4 = _3447 * _3293.x;
                                frontier_phi_73_pred_5 = _3521 * _3305.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3525 = frontier_phi_73_pred;
                            _3526 = frontier_phi_73_pred_1;
                            _3530 = frontier_phi_73_pred_2;
                            _3529 = frontier_phi_73_pred_3;
                            _3528 = frontier_phi_73_pred_4;
                            _3527 = frontier_phi_73_pred_5;
                            _3235 = _3528 + _3248;
                            _3236 = _3529 + _3249;
                            _3237 = _3530 + _3250;
                            _3232 = _3525 + _3245;
                            _3233 = _3526 + _3246;
                            _3234 = _3527 + _3247;
                            if (_3252 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3252;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3235;
                        frontier_phi_67_pred_1 = _3236;
                        frontier_phi_67_pred_2 = _3237;
                        frontier_phi_67_pred_3 = _3234;
                        frontier_phi_67_pred_4 = _3233;
                        frontier_phi_67_pred_5 = _3232;
                    }
                    _2900 = frontier_phi_67_pred;
                    _2902 = frontier_phi_67_pred_1;
                    _2904 = frontier_phi_67_pred_2;
                    _2898 = frontier_phi_67_pred_3;
                    _2896 = frontier_phi_67_pred_4;
                    _2894 = frontier_phi_67_pred_5;
                    uint _3039 = _3038 + 1u;
                    if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3032 = _2894;
                        _3033 = _2896;
                        _3034 = _2898;
                        _3035 = _2900;
                        _3036 = _2902;
                        _3037 = _2904;
                        _3038 = _3039;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2902;
                frontier_phi_55_56_ladder_1 = _2904;
                frontier_phi_55_56_ladder_2 = _2900;
                frontier_phi_55_56_ladder_3 = _2898;
                frontier_phi_55_56_ladder_4 = _2896;
                frontier_phi_55_56_ladder_5 = _2894;
            }
            else
            {
                frontier_phi_55_56_ladder = _2788;
                frontier_phi_55_56_ladder_1 = _2790;
                frontier_phi_55_56_ladder_2 = _2786;
                frontier_phi_55_56_ladder_3 = _2784;
                frontier_phi_55_56_ladder_4 = _2782;
                frontier_phi_55_56_ladder_5 = _2780;
            }
            _2893 = frontier_phi_55_56_ladder_5;
            _2895 = frontier_phi_55_56_ladder_4;
            _2897 = frontier_phi_55_56_ladder_3;
            _2899 = frontier_phi_55_56_ladder_2;
            _2901 = frontier_phi_55_56_ladder;
            _2903 = frontier_phi_55_56_ladder_1;
        }
        float _2908 = isnan(1.0) ? _985 : (isnan(_985) ? 1.0 : min(_985, 1.0));
        _2692 = (_2908 * _2899) + _2147;
        _2694 = (_2908 * _2901) + _2149;
        _2696 = (_2908 * _2903) + _2151;
        _2698 = ((_2893 * 0.039999999105930328369140625) * _2908) + _2477;
        _2700 = ((_2895 * 0.039999999105930328369140625) * _2908) + _2479;
        _2702 = ((_2897 * 0.039999999105930328369140625) * _2908) + _2481;
    }
    else
    {
        _2692 = _2147;
        _2694 = _2149;
        _2696 = _2151;
        _2698 = _2477;
        _2700 = _2479;
        _2702 = _2481;
    }
    float _4610 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4621 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4632 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    uint _2722 = _253 + 6u;
    float _2730 = _922 / cbSceneParam._m0[86u].x;
    float _2731 = _923 / cbSceneParam._m0[86u].y;
    vec4 _2745 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2730, _2731, (log2((isnan(cbSceneParam._m0[77u].w) ? _856 : (isnan(_856) ? cbSceneParam._m0[77u].w : min(_856, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2747 = _2745.x;
    float _2748 = _2745.y;
    float _2749 = _2745.z;
    float _2750 = _2745.w;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    if (_856 > cbSceneParam._m0[78u].w)
    {
        float _2805 = isnan(_856) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _856 : min(cbSceneParam._m0[80u].w, _856));
        float _2806 = _2805 / _856;
        float _2817 = _2806 * _907;
        float _2818 = _908 * _2806;
        float _2819 = (-0.0) - _2818;
        float _2821 = _2806 * _909;
        float _2823 = (cbSceneParam._m0[77u].w * _2819) / _2805;
        float _2824 = _2823 + cbSceneParam._m0[79u].w;
        float _2825 = cbSceneParam._m0[79u].w - _2818;
        float _2831 = sqrt(((_2817 * _2817) + (_2818 * _2818)) + (_2821 * _2821));
        float _2834 = (1.0 - (cbSceneParam._m0[77u].w / _2805)) * _2831;
        float _2839 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2841 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2994;
        if (abs((_2819 - _2823) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2994 = ((((_2824 > 0.0) ? exp2(_2839 * _2824) : (2.0 - exp2(_2841 * _2824))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2834;
        }
        else
        {
            float _2954 = 1.0 / cbSceneParam._m0[80u].x;
            float _2955 = isnan(_2825) ? _2824 : (isnan(_2824) ? _2825 : max(_2824, _2825));
            float _2956 = isnan(_2825) ? _2824 : (isnan(_2824) ? _2825 : min(_2824, _2825));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            _2994 = ((abs(_2831 / _2819) * cbSceneParam._m0[80u].y) * ((((_2965 - _2966) * 2.0) - ((exp2(_2839 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0)))) - exp2(_2839 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))))) * _2954)) - ((exp2(_2841 * _2965) - exp2(_2841 * _2966)) * _2954))) + (_2834 * cbSceneParam._m0[80u].z);
        }
        vec4 _2996 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2730, _2731, 1.0), 0.0);
        float _3005 = exp2((_2994 * (-1.44269502162933349609375)) * (1.0 - _2996.w));
        float _3006 = log2(_3005);
        float _3022 = log2(_2750);
        _2843 = (exp2(_3022 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].x)) * _2996.x) / cbSceneParam._m0[78u].x)) + _2747;
        _2845 = (exp2(_3022 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].y)) * _2996.y) / cbSceneParam._m0[78u].y)) + _2748;
        _2847 = (exp2(_3022 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].z)) * _2996.z) / cbSceneParam._m0[78u].z)) + _2749;
        _2849 = _3005 * _2750;
    }
    else
    {
        _2843 = _2747;
        _2845 = _2748;
        _2847 = _2749;
        _2849 = _2750;
    }
    float _2861 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2862 = _2861 == 3.0;
    float _2863 = log2(_2849);
    float _2870 = exp2(_2863 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2692 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _985))) + ((_2698 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1789)) * cbPerFrame._m0[3u].x));
    float _2871 = exp2(_2863 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2694 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _985))) + ((_2700 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1789)) * cbPerFrame._m0[3u].x));
    float _2872 = exp2(_2863 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2696 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _985))) + ((_2702 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1789)) * cbPerFrame._m0[3u].x));
    float _2881 = (_2861 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2881 * (_2862 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.y = _2881 * (_2862 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2845)));
    SV_Target.z = _2881 * (_2862 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2847)));
    SV_Target.w = cbInstanceData._m0[_2722].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2722].w;
}


