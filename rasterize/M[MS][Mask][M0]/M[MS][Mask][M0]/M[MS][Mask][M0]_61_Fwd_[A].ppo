#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1260;
float _3619;
float _3620;
float _3621;
float _3622;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _379 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _396 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _328.x) * 2.0) - ((((_367 - _379) * cbMtdParam._m0[24u].z) + _379) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3631 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _404 = (_397 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _405 = (_397 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _406 = (_397 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _423 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _455 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _469 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _328.y) * 2.0) - ((((_445 - _455) * cbMtdParam._m0[24u].z) + _455) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3642 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _477 = (_470 * ((_423.x * cbMtdParam._m0[13u].x) - _404)) + _404;
    float _478 = (_470 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _479 = (_470 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _497 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _518 = _514.z;
    float _525 = ((_497.x - _516) * _397) + _516;
    float _526 = ((_497.y - _517) * _397) + _517;
    float _527 = ((_497.z - _518) * _397) + _518;
    vec4 _539 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _552 = ((_539.z - _527) * _470) + _527;
    float _555 = ((((_539.x - _525) * _470) + _525) * 2.0) + (-1.0);
    float _557 = ((((_539.y - _526) * _470) + _526) * 2.0) + (-1.0);
    float _558 = dot(vec2(_555, _557), vec2(_555, _557));
    float _3653 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _563 = sqrt(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))));
    vec4 _577 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _604 = _602.x;
    float _605 = 1.0 - _604;
    float _618 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_604 - _605) * cbMtdParam._m0[24u].w) + _605) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3664 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _626 = (_619 * (cbMtdParam._m0[17u].x - _477)) + _477;
    float _627 = (_619 * (cbMtdParam._m0[17u].y - _478)) + _478;
    float _628 = (_619 * (cbMtdParam._m0[17u].z - _479)) + _479;
    float _632 = (cbMtdParam._m0[19u].w * (_577.z - _552)) + _552;
    vec4 _645 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _652 = (_645.x * 2.0) + (-1.0);
    float _653 = (_645.y * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3675 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _662 = (_619 * (_645.z - _632)) + _632;
    float _665 = (((_577.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _555;
    float _666 = (((_577.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _557;
    float _678 = (((_652 - _665) + (cbMtdParam._m0[21u].x * _665)) * _619) + _665;
    float _679 = (((_653 - _666) + (cbMtdParam._m0[21u].x * _666)) * _619) + _666;
    float _680 = (_619 * (sqrt(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) - _563)) + _563;
    float _684 = cbMtdParam._m0[22u].x + _577.w;
    float _687 = fma(_680, _227 * NORMAL.x, fma(_679, _234 * TANGENT.x, (_220 * _212) * _678));
    float _690 = fma(_680, _227 * NORMAL.y, fma(_679, _234 * TANGENT.y, (_220 * _213) * _678));
    float _693 = fma(_680, _227 * NORMAL.z, fma(_679, _234 * TANGENT.z, (_220 * _214) * _678));
    float _697 = inversesqrt(dot(vec3(_687, _690, _693), vec3(_687, _690, _693)));
    float _698 = _697 * _687;
    float _699 = _697 * _690;
    float _700 = _697 * _693;
    float _3686 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _701 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3708 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3719 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3730 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _719 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _771 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _761);
    float _772 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _761);
    float _773 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _761);
    float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
    float _778 = _771 * _777;
    float _779 = _772 * _777;
    float _780 = _773 * _777;
    vec4 _785 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _787 = _785.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _941 = sqrt(((_771 * _771) + (_772 * _772)) + (_773 * _773));
        float _947 = (cbMatDynParam._m0[5u].x * _941) + cbMatDynParam._m0[5u].y;
        float _3741 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _952 = (cbMatDynParam._m0[5u].z * _941) + cbMatDynParam._m0[5u].w;
        float _3752 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) - _948)) + _948) < ((_787 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _798 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _799 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _817 = fma(_700, cbSceneParam._m0[5u].z, fma(_699, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _698));
    float _820 = fma(_700, cbSceneParam._m0[6u].z, fma(_699, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _698));
    float _823 = fma(_700, cbSceneParam._m0[7u].z, fma(_699, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _698));
    uint _836 = _240 + 9u;
    uint _837 = _836 + uint(cbMatDynParam._m0[0u].w);
    float _843 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * cbInstanceData._m0[_837].x;
    float _844 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_837].y;
    float _845 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_837].z;
    float _3763 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    vec4 _857 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _798, cbSceneParam._m0[86u].y * _799));
    float _861 = ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * TEXCOORD_5.w) * _857.x;
    float _862 = dot(vec3(_698, _699, _700), vec3(_778, _779, _780));
    float _865 = _862 * 2.0;
    float _869 = (_865 * _698) - _778;
    float _870 = (_865 * _699) - _779;
    float _871 = (_865 * _700) - _780;
    float _875 = abs(dot(vec3(_778, _779, _780), vec3(_698, _699, _700)));
    float _3796 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _877 = sqrt(_701);
    float _890 = exp2((_877 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_877 * 3.0));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1259;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _984 = fma(_930, cbModelParam._m0[26u].z, fma(_926, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _922));
        float _988 = fma(_930, cbModelParam._m0[27u].z, fma(_926, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _922));
        float _992 = fma(_930, cbModelParam._m0[28u].z, fma(_926, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _922));
        float _1017 = _922 + _698;
        float _1018 = _926 + _699;
        float _1019 = _930 + _700;
        float _1029 = fma(_1019, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017)) - _984;
        float _1030 = fma(_1019, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017)) - _988;
        float _1031 = fma(_1019, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017)) - _992;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_984 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_988 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[34u].z) + ((((((_992 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1087 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1053.x + (-0.5));
        float _1089 = _1087 * (_1053.y + (-0.5));
        float _1090 = _1087 * (_1053.z + (-0.5));
        float _1097 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1060.x + (-0.5));
        float _1099 = _1097 * (_1060.y + (-0.5));
        float _1100 = _1097 * (_1060.z + (-0.5));
        float _1107 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1067.x + (-0.5));
        float _1109 = _1107 * (_1067.y + (-0.5));
        float _1110 = _1107 * (_1067.z + (-0.5));
        float _1117 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1074.x + (-0.5));
        float _1119 = _1117 * (_1074.y + (-0.5));
        float _1120 = _1117 * (_1074.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1141 = (dot(vec3(_698, _699, _700), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1151 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3844 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1153 + 1.0))) + _1158) * _1121;
        float _1168 = _1089 * 0.5;
        float _1169 = _1099 * 0.5;
        float _1170 = _1109 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_698, _699, _700), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3877 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1195 + 1.0))) + _1200) * _1122;
        float _1210 = _1090 * 0.5;
        float _1211 = _1100 * 0.5;
        float _1212 = _1110 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_698, _699, _700), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3910 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1237 + 1.0))) + _1242) * _1123;
        _1259 = _1090;
        _1261 = _1089;
        _1262 = _1088;
        _1263 = _1100;
        _1264 = _1099;
        _1265 = _1098;
        _1266 = _1110;
        _1267 = _1109;
        _1268 = _1108;
        _1269 = _1123;
        _1270 = _1122;
        _1271 = _1121;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _1260;
        _1261 = _1260;
        _1262 = _1260;
        _1263 = _1260;
        _1264 = _1260;
        _1265 = _1260;
        _1266 = _1260;
        _1267 = _1260;
        _1268 = _1260;
        _1269 = _1260;
        _1270 = _1260;
        _1271 = _1260;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1301 = fma(_930, cbModelParam._m0[30u].z, fma(_926, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922));
        float _1305 = fma(_930, cbModelParam._m0[31u].z, fma(_926, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922));
        float _1309 = fma(_930, cbModelParam._m0[32u].z, fma(_926, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922));
        float _1332 = _922 + _698;
        float _1333 = _926 + _699;
        float _1334 = _930 + _700;
        float _1344 = fma(_1334, cbModelParam._m0[30u].z, fma(_1333, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1332)) - _1301;
        float _1345 = fma(_1334, cbModelParam._m0[31u].z, fma(_1333, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1332)) - _1305;
        float _1346 = fma(_1334, cbModelParam._m0[32u].z, fma(_1333, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1332)) - _1309;
        float _1350 = inversesqrt(dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346)));
        float _1363 = ((_1350 * _1344) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1301 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1350 * _1345) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1305 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1350 * _1346) / cbModelParam._m0[35u].z) + ((((((_1309 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        float _1400 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1367.x + (-0.5));
        float _1402 = _1400 * (_1367.y + (-0.5));
        float _1403 = _1400 * (_1367.z + (-0.5));
        float _1410 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1374.x + (-0.5));
        float _1412 = _1410 * (_1374.y + (-0.5));
        float _1413 = _1410 * (_1374.z + (-0.5));
        float _1420 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1381.x + (-0.5));
        float _1422 = _1420 * (_1381.y + (-0.5));
        float _1423 = _1420 * (_1381.z + (-0.5));
        float _1430 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1388.x + (-0.5));
        float _1432 = _1430 * (_1388.y + (-0.5));
        float _1433 = _1430 * (_1388.z + (-0.5));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = _1401 * 0.5;
        float _1438 = _1411 * 0.5;
        float _1439 = _1421 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_698, _699, _700), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _3973 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1464 + 1.0))) + _1469) * _1434;
        float _1479 = _1402 * 0.5;
        float _1480 = _1412 * 0.5;
        float _1481 = _1422 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_698, _699, _700), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4006 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1506 + 1.0))) + _1511) * _1435;
        float _1521 = _1403 * 0.5;
        float _1522 = _1413 * 0.5;
        float _1523 = _1423 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_698, _699, _700), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4039 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1548 + 1.0))) + _1553) * _1436;
        _1570 = _1403;
        _1571 = _1402;
        _1572 = _1401;
        _1573 = _1413;
        _1574 = _1412;
        _1575 = _1411;
        _1576 = _1423;
        _1577 = _1422;
        _1578 = _1421;
        _1579 = _1436;
        _1580 = _1435;
        _1581 = _1434;
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
    }
    else
    {
        _1570 = _1260;
        _1571 = _1260;
        _1572 = _1260;
        _1573 = _1260;
        _1574 = _1260;
        _1575 = _1260;
        _1576 = _1260;
        _1577 = _1260;
        _1578 = _1260;
        _1579 = _1260;
        _1580 = _1260;
        _1581 = _1260;
        _1582 = 0.0;
        _1583 = 0.0;
        _1584 = 0.0;
    }
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1272)) + _1272;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1273)) + _1273;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1274)) + _1274;
    float _1617 = fma(_1596, cbSceneParam._m0[89u].z, fma(_1595, cbSceneParam._m0[89u].y, _1594 * cbSceneParam._m0[89u].x));
    float _1620 = fma(_1596, cbSceneParam._m0[90u].z, fma(_1595, cbSceneParam._m0[90u].y, _1594 * cbSceneParam._m0[90u].x));
    float _1623 = fma(_1596, cbSceneParam._m0[91u].z, fma(_1595, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1594));
    float _1638 = _869 * 0.5;
    float _1639 = _870 * 0.5;
    float _1640 = _871 * 0.5;
    float _1641 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1644 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1647 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1681;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1654 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1259, _1263, _1266, _1269));
        float _1658 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1662 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1669 = dot(vec4(cbModelParam._m0[39u]), vec4(_1638, _1639, _1640, 1.0));
        _1681 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1669) ? 0.0 : (isnan(0.0) ? _1669 : max(0.0, _1669))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1681 = 1.0;
    }
    float _1692;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1683 = dot(vec4(cbModelParam._m0[40u]), vec4(_1638, _1639, _1640, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1683) ? 0.0 : (isnan(0.0) ? _1683 : max(0.0, _1683))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1696 = (_1692 * cbModelParam._m0[1u].x) + (_1681 * (1.0 - cbModelParam._m0[1u].x));
    float _1706 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _701);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1706 : min(cbModelParam._m0[25u].z, _1706));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1755 = fma(_930, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _922)) + cbModelParam._m0[13u].w;
        float _1759 = fma(_930, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _922)) + cbModelParam._m0[14u].w;
        float _1763 = fma(_930, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _922)) + cbModelParam._m0[15u].w;
        float _1766 = fma(_871, cbModelParam._m0[13u].z, fma(_870, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _869));
        float _1769 = fma(_871, cbModelParam._m0[14u].z, fma(_870, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _869));
        float _1772 = fma(_871, cbModelParam._m0[15u].z, fma(_870, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _869));
        float _1800;
        if (_1766 > 0.0)
        {
            _1800 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1800 = frontier_phi_17_15_ladder;
        }
        float _2001;
        if (_1769 > 0.0)
        {
            _2001 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2001 = frontier_phi_26_22_ladder;
        }
        float _2244;
        if (_1772 > 0.0)
        {
            _2244 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2244 = frontier_phi_38_33_ladder;
        }
        float _2246 = isnan(_2001) ? _1800 : (isnan(_1800) ? _2001 : min(_1800, _2001));
        float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
        float _2251 = (_2247 * _1766) + _1755;
        float _2252 = (_2247 * _1769) + _1759;
        float _2253 = (_2247 * _1772) + _1763;
        float _2254 = _2247 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2254;
        float _2258 = _2254 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 > _2258) || ((_2252 < _2256) || ((_2251 < _2256) || (_2251 > _2258))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2253, cbModelParam._m0[9u].z, fma(_2252, cbModelParam._m0[9u].y, _2251 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2253, cbModelParam._m0[10u].z, fma(_2252, cbModelParam._m0[10u].y, _2251 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2253, cbModelParam._m0[11u].z, fma(_2252, cbModelParam._m0[11u].y, _2251 * cbModelParam._m0[11u].x))), _1707);
            frontier_phi_16_38_ladder = _2377.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2377.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2377.x * cbModelParam._m0[1u].y;
        }
        _1788 = frontier_phi_16_38_ladder_2;
        _1790 = frontier_phi_16_38_ladder_1;
        _1792 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_869, _870, _871), _1707);
        _1788 = _1776.x * cbModelParam._m0[1u].y;
        _1790 = _1776.y * cbModelParam._m0[1u].y;
        _1792 = _1776.z * cbModelParam._m0[1u].y;
    }
    float _1796 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _701);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1796 : min(cbModelParam._m0[25u].w, _1796));
    float _1887;
    float _1889;
    float _1891;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1851 = fma(_930, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _922)) + cbModelParam._m0[21u].w;
        float _1855 = fma(_930, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _922)) + cbModelParam._m0[22u].w;
        float _1859 = fma(_930, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _922)) + cbModelParam._m0[23u].w;
        float _1862 = fma(_871, cbModelParam._m0[21u].z, fma(_870, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _869));
        float _1865 = fma(_871, cbModelParam._m0[22u].z, fma(_870, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _869));
        float _1868 = fma(_871, cbModelParam._m0[23u].z, fma(_870, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _869));
        float _2006;
        if (_1862 > 0.0)
        {
            _2006 = abs((1.0 - _1851) / _1862);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1851 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2006 = frontier_phi_28_24_ladder;
        }
        float _2271;
        if (_1865 > 0.0)
        {
            _2271 = abs((1.0 - _1855) / _1865);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1855 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2271 = frontier_phi_40_35_ladder;
        }
        float _2476;
        if (_1868 > 0.0)
        {
            _2476 = abs((1.0 - _1859) / _1868);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1859 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2476 = frontier_phi_49_46_ladder;
        }
        float _2478 = isnan(_2271) ? _2006 : (isnan(_2006) ? _2271 : min(_2006, _2271));
        float _2479 = isnan(_2476) ? _2478 : (isnan(_2478) ? _2476 : min(_2478, _2476));
        float _2483 = (_2479 * _1862) + _1851;
        float _2484 = (_2479 * _1865) + _1855;
        float _2485 = (_2479 * _1868) + _1859;
        float _2486 = _2479 * 9.9999997473787516355514526367188e-05;
        float _2487 = (-1.0) - _2486;
        float _2489 = _2486 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2485 > _2489) || ((_2485 < _2487) || ((_2484 > _2489) || ((_2484 < _2487) || ((_2483 < _2487) || (_2483 > _2489))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2485, cbModelParam._m0[17u].z, fma(_2484, cbModelParam._m0[17u].y, _2483 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2485, cbModelParam._m0[18u].z, fma(_2484, cbModelParam._m0[18u].y, _2483 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2485, cbModelParam._m0[19u].z, fma(_2484, cbModelParam._m0[19u].y, _2483 * cbModelParam._m0[19u].x))), _1797);
            frontier_phi_25_49_ladder = _2684.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2684.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2684.x * cbModelParam._m0[1u].z;
        }
        _1887 = frontier_phi_25_49_ladder_2;
        _1889 = frontier_phi_25_49_ladder_1;
        _1891 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_869, _870, _871), _1797);
        _1887 = _1871.x * cbModelParam._m0[1u].z;
        _1889 = _1871.y * cbModelParam._m0[1u].z;
        _1891 = _1871.z * cbModelParam._m0[1u].z;
    }
    float _1903 = ((((1.0 - _890) * ((_877 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_890 * _877)) * _861;
    float _1904 = _1903 * ((cbModelParam._m0[1u].w * (_1887 - _1788)) + _1788);
    float _1905 = _1903 * ((cbModelParam._m0[1u].w * (_1889 - _1790)) + _1790);
    float _1906 = _1903 * ((cbModelParam._m0[1u].w * (_1891 - _1792)) + _1792);
    float _1909 = fma(_1906, cbSceneParam._m0[89u].z, fma(_1905, cbSceneParam._m0[89u].y, _1904 * cbSceneParam._m0[89u].x));
    float _1912 = fma(_1906, cbSceneParam._m0[90u].z, fma(_1905, cbSceneParam._m0[90u].y, _1904 * cbSceneParam._m0[90u].x));
    float _1915 = fma(_1906, cbSceneParam._m0[91u].z, fma(_1905, cbSceneParam._m0[91u].y, _1904 * cbSceneParam._m0[91u].x));
    uvec4 _1925 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1927 = _1925.x * 14u;
    uint _1928 = _1927 + 13u;
    float _1935 = _861 + (-1.0);
    float _1940 = (cbLight._m0[_1928].x * _1935) + 1.0;
    float _1941 = (cbLight._m0[_1928].y * _1935) + 1.0;
    float _1942 = (cbLight._m0[_1928].z * _1935) + 1.0;
    float _1943 = (cbLight._m0[_1928].w * _1935) + 1.0;
    uint _1944 = _1927 + 5u;
    float _1950 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1954 = _1927 + 4u;
    float _1960 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
    uint _1964 = _1927 | 1u;
    float _1975 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_698, _699, _700));
    float _1978 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_698, _699, _700));
    float _4175 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _4186 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1983 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.3183098733425140380859375;
    float _1985 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.3183098733425140380859375;
    float _1992 = ((cbLight._m0[_1944].x * _1950) * _1985) + ((cbLight._m0[_1954].x * _1960) * _1983);
    float _1993 = ((_1950 * cbLight._m0[_1944].y) * _1985) + ((_1960 * cbLight._m0[_1954].y) * _1983);
    float _1994 = ((_1950 * cbLight._m0[_1944].z) * _1985) + ((_1960 * cbLight._m0[_1954].z) * _1983);
    uvec4 _1998 = floatBitsToUint(cbLight._m0[_1927 + 12u]);
    bool _2000 = _1998.x == 0u;
    float _2011;
    float _2013;
    float _2015;
    if (_2000)
    {
        _2011 = _1992;
        _2013 = _1993;
        _2015 = _1994;
    }
    else
    {
        uint _2019 = _1927 + 6u;
        float _2035 = (dot(vec3(cbLight._m0[_1927 + 2u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2036 = _2035 * _2035;
        float _4197 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2037 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2038 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2011 = (((cbLight._m0[_2019].x * 0.3183098733425140380859375) * _2037) * _2038) + _1992;
        _2013 = (((cbLight._m0[_2019].y * 0.3183098733425140380859375) * _2037) * _2038) + _1993;
        _2015 = (((cbLight._m0[_2019].z * 0.3183098733425140380859375) * _2037) * _2038) + _1994;
    }
    bool _2018 = _1998.y == 0u;
    float _2056;
    float _2058;
    float _2060;
    if (_2018)
    {
        _2056 = _2011;
        _2058 = _2013;
        _2060 = _2015;
    }
    else
    {
        uint _2215 = _1927 + 7u;
        float _2231 = (dot(vec3(cbLight._m0[_1927 + 3u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2232 = _2231 * _2231;
        float _4213 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2233 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2234 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2056 = (((cbLight._m0[_2215].x * 0.3183098733425140380859375) * _2233) * _2234) + _2011;
        _2058 = (((cbLight._m0[_2215].y * 0.3183098733425140380859375) * _2233) * _2234) + _2013;
        _2060 = (((cbLight._m0[_2215].z * 0.3183098733425140380859375) * _2233) * _2234) + _2015;
    }
    uint _2063 = _1927 + 8u;
    float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1927].w)) * _701) * 0.949999988079071044921875);
    float _2077 = _2076 * _2076;
    float _2078 = cbLight._m0[_1927].x + _778;
    float _2079 = cbLight._m0[_1927].y + _779;
    float _2080 = cbLight._m0[_1927].z + _780;
    float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
    float _2085 = _2084 * _2078;
    float _2086 = _2084 * _2079;
    float _2087 = _2084 * _2080;
    float _2088 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_1927].xyz));
    float _4229 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _2092 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2093 = dot(vec3(_698, _699, _700), vec3(_2085, _2086, _2087));
    float _4251 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2097 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_2085, _2086, _2087));
    float _4262 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = _2077 * _2077;
    float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
    float _2116 = (exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2117 = 1.0 - _2077;
    float _2128 = (0.5 / (((_2092 * ((_2091 * _2117) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2117) + _2077) * _2091))) * _2091;
    float _4273 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2130 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
    uint _2141 = _1927 + 9u;
    float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1964].w)) * _701) * 0.949999988079071044921875);
    float _2153 = _2152 * _2152;
    float _2154 = cbLight._m0[_1964].x + _778;
    float _2155 = cbLight._m0[_1964].y + _779;
    float _2156 = cbLight._m0[_1964].z + _780;
    float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
    float _2161 = _2160 * _2154;
    float _2162 = _2160 * _2155;
    float _2163 = _2160 * _2156;
    float _2164 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_1964].xyz));
    float _4284 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2168 = dot(vec3(_698, _699, _700), vec3(_2161, _2162, _2163));
    float _4295 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2172 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_2161, _2162, _2163));
    float _4306 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2176 = _2153 * _2153;
    float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
    float _2189 = (exp2(log2(1.0 - (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2190 = 1.0 - _2153;
    float _2200 = (0.5 / (((_2092 * ((_2167 * _2190) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2190) + _2153) * _2167))) * _2167;
    float _4317 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2202 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
    float _2212 = (((_2189 * cbLight._m0[_2141].x) * _2202) * _1950) + (((_2116 * cbLight._m0[_2063].x) * _2130) * _1960);
    float _2213 = (((_2189 * cbLight._m0[_2141].y) * _2202) * _1950) + (((_2116 * cbLight._m0[_2063].y) * _2130) * _1960);
    float _2214 = (((_2189 * cbLight._m0[_2141].z) * _2202) * _1950) + (((_2116 * cbLight._m0[_2063].z) * _2130) * _1960);
    float _2276;
    float _2278;
    float _2280;
    if (_2000)
    {
        _2276 = _2212;
        _2278 = _2213;
        _2280 = _2214;
    }
    else
    {
        uint _2282 = _1927 + 2u;
        uint _2286 = _1927 + 10u;
        float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _701) * 0.949999988079071044921875);
        float _2301 = _2300 * _2300;
        float _2302 = cbLight._m0[_2282].x + _778;
        float _2303 = cbLight._m0[_2282].y + _779;
        float _2304 = cbLight._m0[_2282].z + _780;
        float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
        float _2309 = _2308 * _2302;
        float _2310 = _2308 * _2303;
        float _2311 = _2308 * _2304;
        float _2312 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2282].xyz));
        float _4328 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2316 = dot(vec3(_698, _699, _700), vec3(_2309, _2310, _2311));
        float _4339 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2319 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2320 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2309, _2310, _2311));
        float _4350 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2324 = _2301 * _2301;
        float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
        float _2337 = (exp2(log2(1.0 - (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2338 = 1.0 - _2301;
        float _2348 = (0.5 / (((_2092 * ((_2315 * _2338) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2338) + _2301) * _2315))) * _2315;
        float _4361 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2350 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
        float _2351 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2276 = (((_2337 * cbLight._m0[_2286].x) * _2350) * _2351) + _2212;
        _2278 = (((_2337 * cbLight._m0[_2286].y) * _2350) * _2351) + _2213;
        _2280 = (((_2337 * cbLight._m0[_2286].z) * _2350) * _2351) + _2214;
    }
    float _2386;
    float _2388;
    float _2390;
    if (_2018)
    {
        _2386 = _2276;
        _2388 = _2278;
        _2390 = _2280;
    }
    else
    {
        uint _2397 = _1927 + 3u;
        uint _2401 = _1927 + 11u;
        float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _701) * 0.949999988079071044921875);
        float _2416 = _2415 * _2415;
        float _2417 = cbLight._m0[_2397].x + _778;
        float _2418 = cbLight._m0[_2397].y + _779;
        float _2419 = cbLight._m0[_2397].z + _780;
        float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
        float _2424 = _2423 * _2417;
        float _2425 = _2423 * _2418;
        float _2426 = _2423 * _2419;
        float _2427 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2397].xyz));
        float _4377 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2431 = dot(vec3(_698, _699, _700), vec3(_2424, _2425, _2426));
        float _4388 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2435 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2424, _2425, _2426));
        float _4399 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2439 = _2416 * _2416;
        float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
        float _2452 = (exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2453 = 1.0 - _2416;
        float _2463 = (0.5 / (((_2092 * ((_2430 * _2453) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2453) + _2416) * _2430))) * _2430;
        float _4410 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2465 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
        float _2466 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2386 = (((_2452 * cbLight._m0[_2401].x) * _2465) * _2466) + _2276;
        _2388 = (((_2452 * cbLight._m0[_2401].y) * _2465) * _2466) + _2278;
        _2390 = (((_2452 * cbLight._m0[_2401].z) * _2465) * _2466) + _2280;
    }
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    if (_1925.y == 0u)
    {
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2541;
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2541;
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2541;
        uvec4 _2556 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2557 = _2556.x;
        uint _2568 = uint((float(_2556.y) * floor(float(uint(cbSceneParam._m0[85u].y * _799) / _2557))) + floor(float(uint(cbSceneParam._m0[85u].x * _798) / _2557)));
        float _2578 = (log2(_2544 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2579 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        uint _2582 = uint(isnan(14.0) ? _2579 : (isnan(_2579) ? 14.0 : min(_2579, 14.0)));
        uvec4 _2587 = texelFetch(g_lightClusterGridBuffer, int(((_2582 << 2u) + (_2568 << 6u)) >> 2u));
        uint _2588 = _2587.x;
        uint _2589 = _2556.z;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        if (((((1u << ((_2589 >> 4u) & 15u)) + 4294967295u) & _2588) == 0u) || ((_2589 & 240u) == 0u))
        {
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
        }
        else
        {
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2700;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            uint _2848 = 0u;
            uint _2857;
            bool _2858;
            for (;;)
            {
                _2857 = texelFetch(g_lightClassification, int((((_2582 << 5u) + (_2568 << 9u)) + (_2848 << 2u)) >> 2u)).x;
                _2858 = _2857 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2858)
                {
                    frontier_phi_66_pred = _2842;
                    frontier_phi_66_pred_1 = _2847;
                    frontier_phi_66_pred_2 = _2846;
                    frontier_phi_66_pred_3 = _2845;
                    frontier_phi_66_pred_4 = _2844;
                    frontier_phi_66_pred_5 = _2843;
                }
                else
                {
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    uint _2993;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2857;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    for (;;)
                    {
                        uint _2997 = uint(findLSB(_2993)) + (_2848 << 5u);
                        uint _2994 = (_2993 + 4294967295u) & _2993;
                        uint _2999 = _2997 * 48u;
                        vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 3u)).x));
                        uint _3019 = (_2997 * 48u) + 4u;
                        vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 3u)).x));
                        uint _3038 = (_2997 * 48u) + 8u;
                        vec3 _3049 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x));
                        float _3053 = _3013.x - _2542;
                        float _3054 = _3013.y - _2543;
                        float _3055 = _3013.z - _2544;
                        float _3056 = dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055));
                        float _3059 = inversesqrt(_3056);
                        float _3060 = _3059 * _3053;
                        float _3061 = _3059 * _3054;
                        float _3062 = _3059 * _3055;
                        float _3063 = dot(vec3(_817, _820, _823), vec3(_3060, _3061, _3062));
                        float _3068 = 1.0 - (_3056 * _3013.w);
                        float _4436 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3070 = sqrt(_3056) * _3032.w;
                        float _3073 = 1.39999997615814208984375 / (_3070 + 1.39999997615814208984375);
                        float _3074 = _3073 * _3073;
                        float _3077 = ((1.0 - _3074) * _3063) + _3074;
                        float _3080 = _3070 * _3070;
                        float _3084 = ((isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))) * _3069) / ((_3080 * 0.699999988079071044921875) + 1.0);
                        float _3088 = (-0.0) - _2542;
                        float _3089 = (-0.0) - _2543;
                        float _3090 = (-0.0) - _2544;
                        float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                        float _3095 = _3094 * _3088;
                        float _3096 = _3094 * _3089;
                        float _3097 = _3094 * _3090;
                        float _3105 = exp2(log2(1.0 / ((_3080 * 3.5) + 5.0)) * 0.25);
                        float _3106 = 1.0 - _877;
                        float _3113 = sqrt(1.0 - ((1.0 - (_3106 * _3106)) * (1.0 - (_3105 * _3105))));
                        float _3114 = _3113 * _3113;
                        float _3115 = _3114 * _3114;
                        float _3116 = _3095 + _3060;
                        float _3117 = _3096 + _3061;
                        float _3118 = _3097 + _3062;
                        float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                        float _3126 = dot(vec3(_817, _820, _823), vec3(_3095, _3096, _3097));
                        float _4452 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3129 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3130 = dot(vec3(_817, _820, _823), vec3(_3122 * _3116, _3122 * _3117, _3122 * _3118));
                        float _4463 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3133 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3137 = ((_3133 * _3133) * (_3115 + (-1.0))) + 1.0;
                        float _3138 = _3073 * _3114;
                        float _3139 = _3138 * _3138;
                        float _3142 = ((1.0 - _3139) * _3063) + _3139;
                        float _4474 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3143 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3144 = 1.0 - _3114;
                        float _3154 = (0.5 / (((_3143 * ((_3129 * _3144) + _3114)) + 9.9999999392252902907785028219223e-09) + (((_3143 * _3144) + _3114) * _3129))) * _3143;
                        float _4485 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3165 = (((_3115 * 3.1415927410125732421875) * (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) / ((_3137 * _3137) * ((_3080 * 2.1991131305694580078125) + 3.141590118408203125))) * _3069;
                        _2917 = (_3084 * _3032.x) + _2990;
                        _2918 = (_3084 * _3032.y) + _2991;
                        _2919 = (_3084 * _3032.z) + _2992;
                        _2914 = (_3165 * _3049.x) + _2987;
                        _2915 = (_3165 * _3049.y) + _2988;
                        _2916 = (_3165 * _3049.z) + _2989;
                        if (_2994 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2987 = _2914;
                            _2988 = _2915;
                            _2989 = _2916;
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2994;
                        }
                    }
                    frontier_phi_66_pred = _2914;
                    frontier_phi_66_pred_1 = _2919;
                    frontier_phi_66_pred_2 = _2918;
                    frontier_phi_66_pred_3 = _2917;
                    frontier_phi_66_pred_4 = _2916;
                    frontier_phi_66_pred_5 = _2915;
                }
                _2690 = frontier_phi_66_pred;
                _2700 = frontier_phi_66_pred_1;
                _2698 = frontier_phi_66_pred_2;
                _2696 = frontier_phi_66_pred_3;
                _2694 = frontier_phi_66_pred_4;
                _2692 = frontier_phi_66_pred_5;
                uint _2849 = _2848 + 1u;
                if (_2849 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2842 = _2690;
                    _2843 = _2692;
                    _2844 = _2694;
                    _2845 = _2696;
                    _2846 = _2698;
                    _2847 = _2700;
                    _2848 = _2849;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
        }
        uvec4 _2703 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2704 = _2703.z;
        uint _2706 = (_2704 >> 8u) & 15u;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        if (((4294967295u << _2706) & _2588) == 0u)
        {
            _2810 = _2689;
            _2812 = _2691;
            _2814 = _2693;
            _2816 = _2695;
            _2818 = _2697;
            _2820 = _2699;
        }
        else
        {
            float _2835 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
            float _2836 = _2835 * _2542;
            float _2837 = _2835 * _2543;
            float _2838 = _2835 * _2544;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2706 < ((_2704 >> 12u) & 15u))
            {
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2970 = _2689;
                float _2971 = _2691;
                float _2972 = _2693;
                float _2973 = _2695;
                float _2974 = _2697;
                float _2975 = _2699;
                uint _2976 = _2706;
                uint _2985;
                bool _2986;
                for (;;)
                {
                    _2985 = texelFetch(g_lightClassification, int((((_2582 << 5u) + (_2568 << 9u)) + (_2976 << 2u)) >> 2u)).x;
                    _2986 = _2985 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2986)
                    {
                        frontier_phi_77_pred = _2975;
                        frontier_phi_77_pred_1 = _2974;
                        frontier_phi_77_pred_2 = _2973;
                        frontier_phi_77_pred_3 = _2972;
                        frontier_phi_77_pred_4 = _2971;
                        frontier_phi_77_pred_5 = _2970;
                    }
                    else
                    {
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3192 = _2970;
                        float _3193 = _2971;
                        float _3194 = _2972;
                        float _3195 = _2973;
                        float _3196 = _2974;
                        float _3197 = _2975;
                        uint _3198 = _2985;
                        uint _3199;
                        vec4 _3224;
                        float _3225;
                        vec4 _3240;
                        vec3 _3252;
                        vec4 _3267;
                        vec4 _3282;
                        float _3328;
                        bool _3329;
                        for (;;)
                        {
                            uint _3209 = ((_2976 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3198));
                            _3199 = (_3198 + 4294967295u) & _3198;
                            uint _3211 = _3209 * 40u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            _3225 = _3224.w;
                            uint _3227 = (_3209 * 40u) + 4u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3209 * 40u) + 8u;
                            _3252 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x));
                            uint _3254 = (_3209 * 40u) + 16u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3269 = (_3209 * 40u) + 20u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3209 * 40u) + 24u;
                            vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3303 = (_3209 * 40u) + 28u;
                            vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            _3328 = fma(_2544, _3316.z, fma(_2543, _3316.y, _3316.x * _2542)) + _3316.w;
                            _3329 = !((fma(_2544, _3297.z, fma(_2543, _3297.y, _3297.x * _2542)) + _3297.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3329)
                            {
                                float _3356 = _3224.x - _2542;
                                float _3357 = _3224.y - _2543;
                                float _3358 = _3224.z - _2544;
                                float _3359 = dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358));
                                float _3362 = inversesqrt(_3359);
                                float _3363 = _3362 * _3356;
                                float _3364 = _3362 * _3357;
                                float _3365 = _3362 * _3358;
                                float _3369 = 1.0 - (_3359 / (_3225 * _3225));
                                float _4496 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3374 = sqrt(_3359) * _3240.w;
                                float _3376 = 1.39999997615814208984375 / (_3374 + 1.39999997615814208984375);
                                float _3377 = _3376 * _3376;
                                float _3380 = ((1.0 - _3377) * dot(vec3(_3363, _3364, _3365), vec3(_817, _820, _823))) + _3377;
                                float _3383 = _3374 * _3374;
                                float _3387 = (fma(_2544, _3267.z, fma(_2543, _3267.y, _3267.x * _2542)) + _3267.w) / _3328;
                                float _3388 = (fma(_2544, _3282.z, fma(_2543, _3282.y, _3282.x * _2542)) + _3282.w) / _3328;
                                float _3392 = 1.0 - dot(vec2(_3387, _3388), vec2(_3387, _3388));
                                float _4512 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3394 = _3393 * (((isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0))) * _3370) / ((_3383 * 0.699999988079071044921875) + 1.0));
                                float _3406 = exp2(log2(1.0 / ((_3383 * 3.5) + 5.0)) * 0.25);
                                float _3407 = 1.0 - _877;
                                float _3414 = sqrt(1.0 - ((1.0 - (_3407 * _3407)) * (1.0 - (_3406 * _3406))));
                                float _3415 = _3414 * _3414;
                                float _3416 = _3415 * _3415;
                                float _3417 = _3363 - _2836;
                                float _3418 = _3364 - _2837;
                                float _3419 = _3365 - _2838;
                                float _3423 = inversesqrt(dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419)));
                                float _3427 = dot(vec3(_817, _820, _823), vec3((-0.0) - _2836, (-0.0) - _2837, (-0.0) - _2838));
                                float _4523 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3431 = dot(vec3(_817, _820, _823), vec3(_3423 * _3417, _3423 * _3418, _3423 * _3419));
                                float _4534 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3434 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3438 = ((_3434 * _3434) * (_3416 + (-1.0))) + 1.0;
                                float _3439 = _3376 * _3415;
                                float _3440 = _3439 * _3439;
                                float _3446 = ((1.0 - _3440) * dot(vec3(_817, _820, _823), vec3(_3363, _3364, _3365))) + _3440;
                                float _4545 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3448 = 1.0 - _3415;
                                float _3458 = (0.5 / (((_3447 * ((_3430 * _3448) + _3415)) + 9.9999999392252902907785028219223e-09) + (((_3447 * _3448) + _3415) * _3430))) * _3447;
                                float _4556 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3468 = (_3393 * _3370) * (((_3416 * 3.1415927410125732421875) * (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) / ((_3438 * _3438) * ((_3383 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3394 * _3240.y;
                                frontier_phi_83_pred_1 = _3394 * _3240.x;
                                frontier_phi_83_pred_2 = _3468 * _3252.z;
                                frontier_phi_83_pred_3 = _3468 * _3252.y;
                                frontier_phi_83_pred_4 = _3468 * _3252.x;
                                frontier_phi_83_pred_5 = _3394 * _3240.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3476 = frontier_phi_83_pred;
                            _3475 = frontier_phi_83_pred_1;
                            _3474 = frontier_phi_83_pred_2;
                            _3473 = frontier_phi_83_pred_3;
                            _3472 = frontier_phi_83_pred_4;
                            _3477 = frontier_phi_83_pred_5;
                            _3182 = _3475 + _3195;
                            _3183 = _3476 + _3196;
                            _3184 = _3477 + _3197;
                            _3179 = _3472 + _3192;
                            _3180 = _3473 + _3193;
                            _3181 = _3474 + _3194;
                            if (_3199 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3199;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3184;
                        frontier_phi_77_pred_1 = _3183;
                        frontier_phi_77_pred_2 = _3182;
                        frontier_phi_77_pred_3 = _3181;
                        frontier_phi_77_pred_4 = _3180;
                        frontier_phi_77_pred_5 = _3179;
                    }
                    _2821 = frontier_phi_77_pred;
                    _2819 = frontier_phi_77_pred_1;
                    _2817 = frontier_phi_77_pred_2;
                    _2815 = frontier_phi_77_pred_3;
                    _2813 = frontier_phi_77_pred_4;
                    _2811 = frontier_phi_77_pred_5;
                    uint _2977 = _2976 + 1u;
                    if (_2977 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2970 = _2811;
                        _2971 = _2813;
                        _2972 = _2815;
                        _2973 = _2817;
                        _2974 = _2819;
                        _2975 = _2821;
                        _2976 = _2977;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2815;
                frontier_phi_58_59_ladder_1 = _2821;
                frontier_phi_58_59_ladder_2 = _2819;
                frontier_phi_58_59_ladder_3 = _2817;
                frontier_phi_58_59_ladder_4 = _2813;
                frontier_phi_58_59_ladder_5 = _2811;
            }
            else
            {
                frontier_phi_58_59_ladder = _2693;
                frontier_phi_58_59_ladder_1 = _2699;
                frontier_phi_58_59_ladder_2 = _2697;
                frontier_phi_58_59_ladder_3 = _2695;
                frontier_phi_58_59_ladder_4 = _2691;
                frontier_phi_58_59_ladder_5 = _2689;
            }
            _2810 = frontier_phi_58_59_ladder_5;
            _2812 = frontier_phi_58_59_ladder_4;
            _2814 = frontier_phi_58_59_ladder;
            _2816 = frontier_phi_58_59_ladder_3;
            _2818 = frontier_phi_58_59_ladder_2;
            _2820 = frontier_phi_58_59_ladder_1;
        }
        float _2825 = isnan(1.0) ? _861 : (isnan(_861) ? 1.0 : min(_861, 1.0));
        _2601 = (_2825 * _2816) + _2056;
        _2603 = (_2825 * _2818) + _2058;
        _2605 = (_2825 * _2820) + _2060;
        _2607 = ((_2810 * 0.039999999105930328369140625) * _2825) + _2386;
        _2609 = ((_2812 * 0.039999999105930328369140625) * _2825) + _2388;
        _2611 = ((_2814 * 0.039999999105930328369140625) * _2825) + _2390;
    }
    else
    {
        _2601 = _2056;
        _2603 = _2058;
        _2605 = _2060;
        _2607 = _2386;
        _2609 = _2388;
        _2611 = _2390;
    }
    float _4572 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4583 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4594 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _2628 = ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2601 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _861))) + ((_2607 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1696)) * cbPerFrame._m0[3u].x);
    float _2629 = ((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2603 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _861))) + ((_2609 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1696)) * cbPerFrame._m0[3u].x);
    float _2630 = ((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2605 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _861))) + ((_2611 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1696)) * cbPerFrame._m0[3u].x);
    uint _2631 = _240 + 6u;
    float _2639 = _798 / cbSceneParam._m0[86u].x;
    float _2640 = _799 / cbSceneParam._m0[86u].y;
    vec4 _2654 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2639, _2640, (log2((isnan(cbSceneParam._m0[77u].w) ? _719 : (isnan(_719) ? cbSceneParam._m0[77u].w : min(_719, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2656 = _2654.x;
    float _2657 = _2654.y;
    float _2658 = _2654.z;
    float _2659 = _2654.w;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    if (_719 > cbSceneParam._m0[78u].w)
    {
        float _2714 = isnan(_719) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _719 : min(cbSceneParam._m0[80u].w, _719));
        float _2715 = _2714 / _719;
        float _2726 = _2715 * _771;
        float _2727 = _772 * _2715;
        float _2728 = (-0.0) - _2727;
        float _2730 = _2715 * _773;
        float _2732 = (cbSceneParam._m0[77u].w * _2728) / _2714;
        float _2733 = _2732 + cbSceneParam._m0[79u].w;
        float _2734 = cbSceneParam._m0[79u].w - _2727;
        float _2740 = sqrt(((_2726 * _2726) + (_2727 * _2727)) + (_2730 * _2730));
        float _2743 = (1.0 - (cbSceneParam._m0[77u].w / _2714)) * _2740;
        float _2748 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2750 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2927;
        if (abs((_2728 - _2732) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2927 = ((((_2733 > 0.0) ? exp2(_2748 * _2733) : (2.0 - exp2(_2750 * _2733))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2743;
        }
        else
        {
            float _2871 = 1.0 / cbSceneParam._m0[80u].x;
            float _2872 = isnan(_2734) ? _2733 : (isnan(_2733) ? _2734 : max(_2733, _2734));
            float _2873 = isnan(_2734) ? _2733 : (isnan(_2733) ? _2734 : min(_2733, _2734));
            float _2882 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : min(_2872, 0.0));
            float _2883 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : min(_2873, 0.0));
            _2927 = ((abs(_2740 / _2728) * cbSceneParam._m0[80u].y) * ((((_2882 - _2883) * 2.0) - ((exp2(_2748 * (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0)))) - exp2(_2748 * (isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))))) * _2871)) - ((exp2(_2750 * _2882) - exp2(_2750 * _2883)) * _2871))) + (_2743 * cbSceneParam._m0[80u].z);
        }
        vec4 _2929 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2639, _2640, 1.0), 0.0);
        float _2938 = exp2((_2927 * (-1.44269502162933349609375)) * (1.0 - _2929.w));
        float _2939 = log2(_2938);
        float _2955 = log2(_2659);
        _2752 = (exp2(_2955 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].x)) * _2929.x) / cbSceneParam._m0[78u].x)) + _2656;
        _2754 = (exp2(_2955 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].y)) * _2929.y) / cbSceneParam._m0[78u].y)) + _2657;
        _2756 = (exp2(_2955 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].z)) * _2929.z) / cbSceneParam._m0[78u].z)) + _2658;
        _2758 = _2938 * _2659;
    }
    else
    {
        _2752 = _2656;
        _2754 = _2657;
        _2756 = _2658;
        _2758 = _2659;
    }
    bool _2965;
    vec4 _2768;
    vec4 _2790;
    float _2792;
    float _2796;
    float _2797;
    float _2798;
    float _2799;
    bool _2809;
    for (;;)
    {
        _2768 = cbMatDynParam._m0[0u];
        float _2770 = roundEven(_2768.y);
        bool _2771 = _2770 == 3.0;
        float _2772 = log2(_2758);
        float _2779 = exp2(_2772 * cbSceneParam._m0[78u].x) * _2628;
        float _2780 = exp2(_2772 * cbSceneParam._m0[78u].y) * _2629;
        float _2781 = exp2(_2772 * cbSceneParam._m0[78u].z) * _2630;
        float _2788 = _787 + (-0.5);
        _2790 = cbMtdParam._m0[1u];
        _2792 = _2790.y * _2788;
        float _2795 = (_2770 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2796 = _2795 * (_2771 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2752)));
        _2797 = _2795 * (_2771 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2754)));
        _2798 = _2795 * (_2771 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2756)));
        _2799 = _2788 * 0.999000012874603271484375;
        _2809 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2809)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2799) < 0.5)
            {
                _2965 = true;
                break;
            }
        }
        uint _2906 = _836 + uint(_2768.w);
        if ((cbInstanceData._m0[_2906].w < 1.0) && ((cbInstanceData._m0[_2906].w + _2799) < 0.5))
        {
            _2965 = true;
            break;
        }
        if ((_2792 + 1.0) < _2790.x)
        {
            _2965 = true;
            break;
        }
        _2965 = false;
        break;
    }
    float _3170;
    if (_2965)
    {
        discard_state = true;
        _3170 = 0.0;
    }
    else
    {
        _3170 = cbInstanceData._m0[_2631].w;
    }
    SV_Target.x = _2796;
    SV_Target.y = _2797;
    SV_Target.z = _2798;
    SV_Target.w = _3170;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2631].w;
    discard_exit();
}


