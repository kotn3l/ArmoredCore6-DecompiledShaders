#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1393;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _358.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].z) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3978 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _437 = (_430 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _438 = (_430 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _439 = (_430 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _358.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[24u].z) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3989 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _510 = (_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437;
    float _511 = (_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438;
    float _512 = (_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439;
    vec4 _530 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _268) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _269) + cbTextureTilingScale._m0[24u].w));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _549 = _547.x;
    float _559 = dot(vec4(_549, _547.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _571 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _358.z) * 2.0) - ((((_549 - _559) * cbMtdParam._m0[24u].z) + _559) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4000 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _585 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_572 * ((_530.x * cbMtdParam._m0[14u].x) - _510)) + _510);
    float _588 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_572 * ((_530.y * cbMtdParam._m0[14u].y) - _511)) + _511);
    float _591 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_572 * ((_530.z * cbMtdParam._m0[14u].z) - _512)) + _512);
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _646 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _648 = _646.x;
    float _649 = _646.y;
    float _650 = _646.z;
    float _657 = ((_629.x - _648) * _430) + _648;
    float _658 = ((_629.y - _649) * _430) + _649;
    float _659 = ((_629.z - _650) * _430) + _650;
    vec4 _671 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _682 = ((_671.x - _657) * _503) + _657;
    float _683 = ((_671.y - _658) * _503) + _658;
    float _684 = ((_671.z - _659) * _503) + _659;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _268) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _269) + cbTextureTilingScale._m0[23u].w));
    float _709 = ((_696.z - _684) * _572) + _684;
    float _712 = ((((_696.x - _682) * _572) + _682) * 2.0) + (-1.0);
    float _714 = ((((_696.y - _683) * _572) + _683) * 2.0) + (-1.0);
    float _715 = dot(vec2(_712, _714), vec2(_712, _714));
    float _4011 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _720 = sqrt(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))));
    vec4 _734 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _746 = (((_734.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _712;
    float _747 = (((_734.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _714;
    float _750 = fma(_720, _236, fma(_747, _243, _746 * _229));
    float _753 = fma(_720, _237, fma(_747, _244, _746 * _230));
    float _756 = fma(_720, _238, fma(_747, _245, _746 * _231));
    float _760 = inversesqrt(dot(vec3(_750, _753, _756), vec3(_750, _753, _756)));
    vec4 _787 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _789 = _787.x;
    float _790 = 1.0 - _789;
    float _796 = (cbMtdParam._m0[19u].x + dot(vec4(_760 * _750, _760 * _753, _760 * _756, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_789 - _790) * cbMtdParam._m0[24u].w) + _790) * cbMtdParam._m0[21u].z);
    float _4022 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _797 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _804 = (_797 * ((_609.x * cbMtdParam._m0[18u].x) - _585)) + _585;
    float _805 = (_797 * ((_609.y * cbMtdParam._m0[18u].y) - _588)) + _588;
    float _806 = (_797 * ((_609.z * cbMtdParam._m0[18u].z) - _591)) + _591;
    float _810 = (cbMtdParam._m0[19u].w * (_734.z - _709)) + _709;
    vec4 _823 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _830 = (_823.x * 2.0) + (-1.0);
    float _831 = (_823.y * 2.0) + (-1.0);
    float _832 = dot(vec2(_830, _831), vec2(_830, _831));
    float _4033 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _840 = ((_823.z - _810) * _797) + _810;
    float _850 = ((sqrt(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) - _720) * _797) + _720;
    float _853 = (((_830 - _746) * _797) + _746) + (cbMtdParam._m0[21u].x * _746);
    float _854 = (((_831 - _747) * _797) + _747) + (cbMtdParam._m0[21u].x * _747);
    float _858 = cbMtdParam._m0[22u].x + _734.w;
    float _861 = fma(_850, _236, fma(_854, _243, _853 * _229));
    float _864 = fma(_850, _237, fma(_854, _244, _853 * _230));
    float _867 = fma(_850, _238, fma(_854, _245, _853 * _231));
    float _871 = inversesqrt(dot(vec3(_861, _864, _867), vec3(_861, _864, _867)));
    float _872 = _871 * _861;
    float _873 = _871 * _864;
    float _874 = _871 * _867;
    float _4044 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _875 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4066 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4077 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4088 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _893 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _944 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _934);
    float _945 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _934);
    float _946 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _934);
    float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
    float _951 = _944 * _950;
    float _952 = _945 * _950;
    float _953 = _946 * _950;
    float _959 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _960 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _978 = fma(_874, cbSceneParam._m0[5u].z, fma(_873, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _872));
    float _981 = fma(_874, cbSceneParam._m0[6u].z, fma(_873, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _872));
    float _984 = fma(_874, cbSceneParam._m0[7u].z, fma(_873, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _872));
    uint _998 = (_248 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1004 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * cbInstanceData._m0[_998].x;
    float _1005 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * cbInstanceData._m0[_998].y;
    float _1006 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * cbInstanceData._m0[_998].z;
    float _4099 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    vec4 _1018 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _959, cbSceneParam._m0[86u].y * _960));
    float _1022 = ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * TEXCOORD_5.w) * _1018.x;
    float _1023 = dot(vec3(_872, _873, _874), vec3(_951, _952, _953));
    float _1026 = _1023 * 2.0;
    float _1030 = (_1026 * _872) - _951;
    float _1031 = (_1026 * _873) - _952;
    float _1032 = (_1026 * _874) - _953;
    float _1036 = abs(dot(vec3(_951, _952, _953), vec3(_872, _873, _874)));
    float _4132 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1038 = sqrt(_875);
    float _1051 = exp2((_1038 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1038 * 3.0));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1392;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1117 = fma(_1091, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083));
        float _1121 = fma(_1091, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083));
        float _1125 = fma(_1091, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083));
        float _1150 = _1083 + _872;
        float _1151 = _1087 + _873;
        float _1152 = _1091 + _874;
        float _1162 = fma(_1152, cbModelParam._m0[26u].z, fma(_1151, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1150)) - _1117;
        float _1163 = fma(_1152, cbModelParam._m0[27u].z, fma(_1151, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1150)) - _1121;
        float _1164 = fma(_1152, cbModelParam._m0[28u].z, fma(_1151, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1150)) - _1125;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1117 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1121 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[34u].z) + ((((((_1125 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1220 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1186.x + (-0.5));
        float _1222 = _1220 * (_1186.y + (-0.5));
        float _1223 = _1220 * (_1186.z + (-0.5));
        float _1230 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1193.x + (-0.5));
        float _1232 = _1230 * (_1193.y + (-0.5));
        float _1233 = _1230 * (_1193.z + (-0.5));
        float _1240 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1200.x + (-0.5));
        float _1242 = _1240 * (_1200.y + (-0.5));
        float _1243 = _1240 * (_1200.z + (-0.5));
        float _1250 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1207.x + (-0.5));
        float _1252 = _1250 * (_1207.y + (-0.5));
        float _1253 = _1250 * (_1207.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1274 = (dot(vec3(_872, _873, _874), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1284 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4180 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1286 + 1.0))) + _1291) * _1254;
        float _1301 = _1222 * 0.5;
        float _1302 = _1232 * 0.5;
        float _1303 = _1242 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_872, _873, _874), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4213 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1328 + 1.0))) + _1333) * _1255;
        float _1343 = _1223 * 0.5;
        float _1344 = _1233 * 0.5;
        float _1345 = _1243 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_872, _873, _874), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4246 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1370 + 1.0))) + _1375) * _1256;
        _1392 = _1223;
        _1394 = _1222;
        _1395 = _1221;
        _1396 = _1233;
        _1397 = _1232;
        _1398 = _1231;
        _1399 = _1243;
        _1400 = _1242;
        _1401 = _1241;
        _1402 = _1256;
        _1403 = _1255;
        _1404 = _1254;
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1393;
        _1394 = _1393;
        _1395 = _1393;
        _1396 = _1393;
        _1397 = _1393;
        _1398 = _1393;
        _1399 = _1393;
        _1400 = _1393;
        _1401 = _1393;
        _1402 = _1393;
        _1403 = _1393;
        _1404 = _1393;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1430 = fma(_1091, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1083));
        float _1434 = fma(_1091, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1083));
        float _1438 = fma(_1091, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1083));
        float _1461 = _1083 + _872;
        float _1462 = _1087 + _873;
        float _1463 = _1091 + _874;
        float _1473 = fma(_1463, cbModelParam._m0[30u].z, fma(_1462, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1461)) - _1430;
        float _1474 = fma(_1463, cbModelParam._m0[31u].z, fma(_1462, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1461)) - _1434;
        float _1475 = fma(_1463, cbModelParam._m0[32u].z, fma(_1462, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1461)) - _1438;
        float _1479 = inversesqrt(dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475)));
        float _1492 = ((_1479 * _1473) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1430 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1479 * _1474) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1434 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1479 * _1475) / cbModelParam._m0[35u].z) + ((((((_1438 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        float _1529 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1496.x + (-0.5));
        float _1531 = _1529 * (_1496.y + (-0.5));
        float _1532 = _1529 * (_1496.z + (-0.5));
        float _1539 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1503.x + (-0.5));
        float _1541 = _1539 * (_1503.y + (-0.5));
        float _1542 = _1539 * (_1503.z + (-0.5));
        float _1549 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1510.x + (-0.5));
        float _1551 = _1549 * (_1510.y + (-0.5));
        float _1552 = _1549 * (_1510.z + (-0.5));
        float _1559 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1517.x + (-0.5));
        float _1561 = _1559 * (_1517.y + (-0.5));
        float _1562 = _1559 * (_1517.z + (-0.5));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = _1530 * 0.5;
        float _1567 = _1540 * 0.5;
        float _1568 = _1550 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_872, _873, _874), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4309 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1593 + 1.0))) + _1598) * _1563;
        float _1608 = _1531 * 0.5;
        float _1609 = _1541 * 0.5;
        float _1610 = _1551 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_872, _873, _874), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4342 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1635 + 1.0))) + _1640) * _1564;
        float _1650 = _1532 * 0.5;
        float _1651 = _1542 * 0.5;
        float _1652 = _1552 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_872, _873, _874), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4375 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1677 + 1.0))) + _1682) * _1565;
        _1699 = _1532;
        _1700 = _1531;
        _1701 = _1530;
        _1702 = _1542;
        _1703 = _1541;
        _1704 = _1540;
        _1705 = _1552;
        _1706 = _1551;
        _1707 = _1550;
        _1708 = _1565;
        _1709 = _1564;
        _1710 = _1563;
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
    }
    else
    {
        _1699 = _1393;
        _1700 = _1393;
        _1701 = _1393;
        _1702 = _1393;
        _1703 = _1393;
        _1704 = _1393;
        _1705 = _1393;
        _1706 = _1393;
        _1707 = _1393;
        _1708 = _1393;
        _1709 = _1393;
        _1710 = _1393;
        _1711 = 0.0;
        _1712 = 0.0;
        _1713 = 0.0;
    }
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1405)) + _1405;
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1406)) + _1406;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1407)) + _1407;
    float _1746 = fma(_1725, cbSceneParam._m0[89u].z, fma(_1724, cbSceneParam._m0[89u].y, _1723 * cbSceneParam._m0[89u].x));
    float _1749 = fma(_1725, cbSceneParam._m0[90u].z, fma(_1724, cbSceneParam._m0[90u].y, _1723 * cbSceneParam._m0[90u].x));
    float _1752 = fma(_1725, cbSceneParam._m0[91u].z, fma(_1724, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1723));
    float _1767 = _1030 * 0.5;
    float _1768 = _1031 * 0.5;
    float _1769 = _1032 * 0.5;
    float _1770 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1773 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1776 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1810;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1783 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1392, _1396, _1399, _1402));
        float _1787 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1394, _1397, _1400, _1403));
        float _1791 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1395, _1398, _1401, _1404));
        float _1798 = dot(vec4(cbModelParam._m0[39u]), vec4(_1767, _1768, _1769, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1821;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1812 = dot(vec4(cbModelParam._m0[40u]), vec4(_1767, _1768, _1769, 1.0));
        _1821 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1821 = 1.0;
    }
    float _1825 = (_1821 * cbModelParam._m0[1u].x) + (_1810 * (1.0 - cbModelParam._m0[1u].x));
    float _1835 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _875);
    float _1836 = isnan(_1835) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1835 : min(cbModelParam._m0[25u].z, _1835));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1883 = fma(_1091, cbModelParam._m0[13u].z, fma(_1087, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083)) + cbModelParam._m0[13u].w;
        float _1887 = fma(_1091, cbModelParam._m0[14u].z, fma(_1087, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083)) + cbModelParam._m0[14u].w;
        float _1891 = fma(_1091, cbModelParam._m0[15u].z, fma(_1087, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083)) + cbModelParam._m0[15u].w;
        float _1894 = fma(_1032, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030));
        float _1897 = fma(_1032, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030));
        float _1900 = fma(_1032, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030));
        float _1928;
        if (_1894 > 0.0)
        {
            _1928 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1928 = frontier_phi_14_12_ladder;
        }
        float _2097;
        if (_1897 > 0.0)
        {
            _2097 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2097 = frontier_phi_23_19_ladder;
        }
        float _2392;
        if (_1900 > 0.0)
        {
            _2392 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2392 = frontier_phi_35_30_ladder;
        }
        float _2394 = isnan(_2097) ? _1928 : (isnan(_1928) ? _2097 : min(_1928, _2097));
        float _2395 = isnan(_2392) ? _2394 : (isnan(_2394) ? _2392 : min(_2394, _2392));
        float _2399 = (_2395 * _1894) + _1883;
        float _2400 = (_2395 * _1897) + _1887;
        float _2401 = (_2395 * _1900) + _1891;
        float _2402 = _2395 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2402;
        float _2406 = _2402 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 > _2406) || ((_2400 < _2404) || ((_2399 < _2404) || (_2399 > _2406))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2401, cbModelParam._m0[9u].z, fma(_2400, cbModelParam._m0[9u].y, _2399 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2401, cbModelParam._m0[10u].z, fma(_2400, cbModelParam._m0[10u].y, _2399 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2401, cbModelParam._m0[11u].z, fma(_2400, cbModelParam._m0[11u].y, _2399 * cbModelParam._m0[11u].x))), _1836);
            frontier_phi_13_35_ladder = _2546.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2546.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2546.x * cbModelParam._m0[1u].y;
        }
        _1916 = frontier_phi_13_35_ladder_2;
        _1918 = frontier_phi_13_35_ladder_1;
        _1920 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1030, _1031, _1032), _1836);
        _1916 = _1904.x * cbModelParam._m0[1u].y;
        _1918 = _1904.y * cbModelParam._m0[1u].y;
        _1920 = _1904.z * cbModelParam._m0[1u].y;
    }
    float _1924 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _875);
    float _1925 = isnan(_1924) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1924 : min(cbModelParam._m0[25u].w, _1924));
    float _2014;
    float _2016;
    float _2018;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1978 = fma(_1091, cbModelParam._m0[21u].z, fma(_1087, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083)) + cbModelParam._m0[21u].w;
        float _1982 = fma(_1091, cbModelParam._m0[22u].z, fma(_1087, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083)) + cbModelParam._m0[22u].w;
        float _1986 = fma(_1091, cbModelParam._m0[23u].z, fma(_1087, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083)) + cbModelParam._m0[23u].w;
        float _1989 = fma(_1032, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030));
        float _1992 = fma(_1032, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030));
        float _1995 = fma(_1032, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030));
        float _2102;
        if (_1989 > 0.0)
        {
            _2102 = abs((1.0 - _1978) / _1989);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1978 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2102 = frontier_phi_25_21_ladder;
        }
        float _2419;
        if (_1992 > 0.0)
        {
            _2419 = abs((1.0 - _1982) / _1992);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1982 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2419 = frontier_phi_37_32_ladder;
        }
        float _2746;
        if (_1995 > 0.0)
        {
            _2746 = abs((1.0 - _1986) / _1995);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1986 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2746 = frontier_phi_47_44_ladder;
        }
        float _2748 = isnan(_2419) ? _2102 : (isnan(_2102) ? _2419 : min(_2102, _2419));
        float _2749 = isnan(_2746) ? _2748 : (isnan(_2748) ? _2746 : min(_2748, _2746));
        float _2753 = (_2749 * _1989) + _1978;
        float _2754 = (_2749 * _1992) + _1982;
        float _2755 = (_2749 * _1995) + _1986;
        float _2756 = _2749 * 9.9999997473787516355514526367188e-05;
        float _2757 = (-1.0) - _2756;
        float _2759 = _2756 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2755 > _2759) || ((_2755 < _2757) || ((_2754 > _2759) || ((_2754 < _2757) || ((_2753 < _2757) || (_2753 > _2759))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2873 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2755, cbModelParam._m0[17u].z, fma(_2754, cbModelParam._m0[17u].y, _2753 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2755, cbModelParam._m0[18u].z, fma(_2754, cbModelParam._m0[18u].y, _2753 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2755, cbModelParam._m0[19u].z, fma(_2754, cbModelParam._m0[19u].y, _2753 * cbModelParam._m0[19u].x))), _1925);
            frontier_phi_22_47_ladder = _2873.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2873.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2873.x * cbModelParam._m0[1u].z;
        }
        _2014 = frontier_phi_22_47_ladder_2;
        _2016 = frontier_phi_22_47_ladder_1;
        _2018 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1998 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1030, _1031, _1032), _1925);
        _2014 = _1998.x * cbModelParam._m0[1u].z;
        _2016 = _1998.y * cbModelParam._m0[1u].z;
        _2018 = _1998.z * cbModelParam._m0[1u].z;
    }
    float _2030 = ((((1.0 - _1051) * ((_1038 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1051 * _1038)) * _1022;
    float _2031 = _2030 * ((cbModelParam._m0[1u].w * (_2014 - _1916)) + _1916);
    float _2032 = _2030 * ((cbModelParam._m0[1u].w * (_2016 - _1918)) + _1918);
    float _2033 = _2030 * ((cbModelParam._m0[1u].w * (_2018 - _1920)) + _1920);
    float _2036 = fma(_2033, cbSceneParam._m0[89u].z, fma(_2032, cbSceneParam._m0[89u].y, _2031 * cbSceneParam._m0[89u].x));
    float _2039 = fma(_2033, cbSceneParam._m0[90u].z, fma(_2032, cbSceneParam._m0[90u].y, _2031 * cbSceneParam._m0[90u].x));
    float _2042 = fma(_2033, cbSceneParam._m0[91u].z, fma(_2032, cbSceneParam._m0[91u].y, _2031 * cbSceneParam._m0[91u].x));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2084 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2088 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2089 = _2076 / _2088;
    float _2090 = _2080 / _2088;
    float _2091 = _2084 / _2088;
    float _2238;
    float _2239;
    float _2240;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2118 = ((uint(_2091 > cbSceneParam._m0[59u].y) + uint(_2091 > cbSceneParam._m0[59u].x)) + uint(_2091 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2119 = _2118 + 43u;
        uint _2127 = _2118 + 44u;
        uint _2135 = _2118 + 45u;
        uint _2143 = _2118 + 46u;
        float _2154 = fma(_2088, cbSceneParam._m0[_2119].w, fma(_2084, cbSceneParam._m0[_2119].z, fma(_2080, cbSceneParam._m0[_2119].y, _2076 * cbSceneParam._m0[_2119].x)));
        float _2158 = fma(_2088, cbSceneParam._m0[_2127].w, fma(_2084, cbSceneParam._m0[_2127].z, fma(_2080, cbSceneParam._m0[_2127].y, _2076 * cbSceneParam._m0[_2127].x)));
        float _2166 = fma(_2088, cbSceneParam._m0[_2143].w, fma(_2084, cbSceneParam._m0[_2143].z, fma(_2080, cbSceneParam._m0[_2143].y, _2076 * cbSceneParam._m0[_2143].x)));
        float _2171 = cbSceneParam._m0[33u].z * _2166;
        float _2173 = cbSceneParam._m0[33u].w * _2166;
        float _2176 = fma(_2088, cbSceneParam._m0[_2135].w, fma(_2084, cbSceneParam._m0[_2135].z, fma(_2080, cbSceneParam._m0[_2135].y, _2076 * cbSceneParam._m0[_2135].x))) / _2166;
        float _2224 = (cbSceneParam._m0[33u].x - sqrt(((_2090 * _2090) + (_2089 * _2089)) + (_2091 * _2091))) * cbSceneParam._m0[33u].y;
        float _4501 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2231 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2171 + _2154) / _2166, (_2173 + _2158) / _2166), _2176), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 + _2154) / _2166, (_2158 - _2171) / _2166), _2176), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2154 - _2171) / _2166, (_2158 - _2173) / _2166), _2176), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2154 - _2173) / _2166, (_2171 + _2158) / _2166), _2176), 0.0)).x), vec4(0.25)));
        _2238 = 1.0 - (_2231 * cbSceneParam._m0[34u].x);
        _2239 = 1.0 - (_2231 * cbSceneParam._m0[34u].y);
        _2240 = 1.0 - (_2231 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2238 = 1.0;
        _2239 = 1.0;
        _2240 = 1.0;
    }
    float _2304;
    float _2306;
    float _2308;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2292 = fma(_2088, cbSceneParam._m0[63u].w, fma(_2084, cbSceneParam._m0[63u].z, fma(_2080, cbSceneParam._m0[63u].y, _2076 * cbSceneParam._m0[63u].x)));
        float _2293 = fma(_2088, cbSceneParam._m0[60u].w, fma(_2084, cbSceneParam._m0[60u].z, fma(_2080, cbSceneParam._m0[60u].y, _2076 * cbSceneParam._m0[60u].x))) / _2292;
        float _2294 = fma(_2088, cbSceneParam._m0[61u].w, fma(_2084, cbSceneParam._m0[61u].z, fma(_2080, cbSceneParam._m0[61u].y, _2076 * cbSceneParam._m0[61u].x))) / _2292;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2293 >= cbSceneParam._m0[64u].x) && (_2294 >= cbSceneParam._m0[64u].y)) && (_2293 <= cbSceneParam._m0[64u].z)) && (_2294 <= cbSceneParam._m0[64u].w))
        {
            float _2432 = fma(_2088, cbSceneParam._m0[62u].w, fma(_2084, cbSceneParam._m0[62u].z, fma(_2080, cbSceneParam._m0[62u].y, _2076 * cbSceneParam._m0[62u].x))) / _2292;
            float _2436 = isnan(cbSceneParam._m0[41u].w) ? _2432 : (isnan(_2432) ? cbSceneParam._m0[41u].w : max(_2432, cbSceneParam._m0[41u].w));
            float _2479 = (cbSceneParam._m0[33u].x - sqrt(((_2090 * _2090) + (_2089 * _2089)) + (_2091 * _2091))) * cbSceneParam._m0[33u].y;
            float _4517 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
            float _2486 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2293, cbSceneParam._m0[33u].w + _2294), _2436), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2293, _2294 - cbSceneParam._m0[33u].z), _2436), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2293 - cbSceneParam._m0[33u].z, _2294 - cbSceneParam._m0[33u].w), _2436), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2293 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2294), _2436), 0.0)).x), vec4(0.25)));
            float _2490 = 1.0 - (_2486 * cbSceneParam._m0[34u].x);
            float _2491 = 1.0 - (_2486 * cbSceneParam._m0[34u].y);
            float _2492 = 1.0 - (_2486 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2492) ? _2240 : (isnan(_2240) ? _2492 : min(_2240, _2492));
            frontier_phi_34_33_ladder_1 = isnan(_2491) ? _2239 : (isnan(_2239) ? _2491 : min(_2239, _2491));
            frontier_phi_34_33_ladder_2 = isnan(_2490) ? _2238 : (isnan(_2238) ? _2490 : min(_2238, _2490));
        }
        else
        {
            frontier_phi_34_33_ladder = _2240;
            frontier_phi_34_33_ladder_1 = _2239;
            frontier_phi_34_33_ladder_2 = _2238;
        }
        _2304 = frontier_phi_34_33_ladder_2;
        _2306 = frontier_phi_34_33_ladder_1;
        _2308 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2304 = _2238;
        _2306 = _2239;
        _2308 = _2240;
    }
    uvec4 _2313 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2315 = _2313.x * 14u;
    uint _2316 = _2315 + 13u;
    float _2323 = _1022 + (-1.0);
    float _2328 = (cbLight._m0[_2316].x * _2323) + 1.0;
    float _2329 = (cbLight._m0[_2316].y * _2323) + 1.0;
    float _2330 = (cbLight._m0[_2316].z * _2323) + 1.0;
    float _2331 = (cbLight._m0[_2316].w * _2323) + 1.0;
    uint _2332 = _2315 + 5u;
    float _2338 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
    uint _2342 = _2315 + 4u;
    float _2351 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
    uint _2355 = _2315 | 1u;
    float _2366 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_872, _873, _874));
    float _2369 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_872, _873, _874));
    float _4553 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _4564 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2374 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * 0.3183098733425140380859375;
    float _2376 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * 0.3183098733425140380859375;
    float _2383 = ((cbLight._m0[_2332].x * _2338) * _2376) + (((cbLight._m0[_2342].x * _2304) * _2351) * _2374);
    float _2384 = ((_2338 * cbLight._m0[_2332].y) * _2376) + (((cbLight._m0[_2342].y * _2306) * _2351) * _2374);
    float _2385 = ((_2338 * cbLight._m0[_2332].z) * _2376) + (((cbLight._m0[_2342].z * _2308) * _2351) * _2374);
    uvec4 _2389 = floatBitsToUint(cbLight._m0[_2315 + 12u]);
    bool _2391 = _2389.x == 0u;
    float _2493;
    float _2495;
    float _2497;
    if (_2391)
    {
        _2493 = _2383;
        _2495 = _2384;
        _2497 = _2385;
    }
    else
    {
        uint _2501 = _2315 + 6u;
        float _2517 = (dot(vec3(cbLight._m0[_2315 + 2u].xyz), vec3(_872, _873, _874)) * 0.5) + 0.5;
        float _2518 = _2517 * _2517;
        float _4575 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2519 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2520 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2493 = (((cbLight._m0[_2501].x * 0.3183098733425140380859375) * _2519) * _2520) + _2383;
        _2495 = (((cbLight._m0[_2501].y * 0.3183098733425140380859375) * _2519) * _2520) + _2384;
        _2497 = (((cbLight._m0[_2501].z * 0.3183098733425140380859375) * _2519) * _2520) + _2385;
    }
    bool _2500 = _2389.y == 0u;
    float _2555;
    float _2557;
    float _2559;
    if (_2500)
    {
        _2555 = _2493;
        _2557 = _2495;
        _2559 = _2497;
    }
    else
    {
        uint _2717 = _2315 + 7u;
        float _2733 = (dot(vec3(cbLight._m0[_2315 + 3u].xyz), vec3(_872, _873, _874)) * 0.5) + 0.5;
        float _2734 = _2733 * _2733;
        float _4591 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2735 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2736 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2555 = (((cbLight._m0[_2717].x * 0.3183098733425140380859375) * _2735) * _2736) + _2493;
        _2557 = (((cbLight._m0[_2717].y * 0.3183098733425140380859375) * _2735) * _2736) + _2495;
        _2559 = (((cbLight._m0[_2717].z * 0.3183098733425140380859375) * _2735) * _2736) + _2497;
    }
    uint _2562 = _2315 + 8u;
    float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _875) * 0.949999988079071044921875);
    float _2576 = _2575 * _2575;
    float _2577 = cbLight._m0[_2315].x + _951;
    float _2578 = cbLight._m0[_2315].y + _952;
    float _2579 = cbLight._m0[_2315].z + _953;
    float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
    float _2584 = _2583 * _2577;
    float _2585 = _2583 * _2578;
    float _2586 = _2583 * _2579;
    float _2587 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2315].xyz));
    float _4607 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _4618 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _2591 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2592 = dot(vec3(_872, _873, _874), vec3(_2584, _2585, _2586));
    float _4629 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2596 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2584, _2585, _2586));
    float _4640 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2600 = _2576 * _2576;
    float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
    float _2615 = (exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2616 = 1.0 - _2576;
    float _2627 = (0.5 / (((_2591 * ((_2590 * _2616) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2591 * _2616) + _2576) * _2590))) * _2590;
    float _4651 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2629 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
    uint _2643 = _2315 + 9u;
    float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _875) * 0.949999988079071044921875);
    float _2655 = _2654 * _2654;
    float _2656 = cbLight._m0[_2355].x + _951;
    float _2657 = cbLight._m0[_2355].y + _952;
    float _2658 = cbLight._m0[_2355].z + _953;
    float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
    float _2663 = _2662 * _2656;
    float _2664 = _2662 * _2657;
    float _2665 = _2662 * _2658;
    float _2666 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2355].xyz));
    float _4662 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2669 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2670 = dot(vec3(_872, _873, _874), vec3(_2663, _2664, _2665));
    float _4673 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2673 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _2674 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2663, _2664, _2665));
    float _4684 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2678 = _2655 * _2655;
    float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
    float _2691 = (exp2(log2(1.0 - (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2692 = 1.0 - _2655;
    float _2702 = (0.5 / (((_2591 * ((_2669 * _2692) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2591 * _2692) + _2655) * _2669))) * _2669;
    float _4695 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2704 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
    float _2714 = (((_2691 * cbLight._m0[_2643].x) * _2704) * _2338) + ((((cbLight._m0[_2562].x * _2304) * _2615) * _2629) * _2351);
    float _2715 = (((_2691 * cbLight._m0[_2643].y) * _2704) * _2338) + ((((cbLight._m0[_2562].y * _2306) * _2615) * _2629) * _2351);
    float _2716 = (((_2691 * cbLight._m0[_2643].z) * _2704) * _2338) + ((((cbLight._m0[_2562].z * _2308) * _2615) * _2629) * _2351);
    float _2772;
    float _2774;
    float _2776;
    if (_2391)
    {
        _2772 = _2714;
        _2774 = _2715;
        _2776 = _2716;
    }
    else
    {
        uint _2778 = _2315 + 2u;
        uint _2782 = _2315 + 10u;
        float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2778].w)) * _875) * 0.949999988079071044921875);
        float _2797 = _2796 * _2796;
        float _2798 = cbLight._m0[_2778].x + _951;
        float _2799 = cbLight._m0[_2778].y + _952;
        float _2800 = cbLight._m0[_2778].z + _953;
        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
        float _2805 = _2804 * _2798;
        float _2806 = _2804 * _2799;
        float _2807 = _2804 * _2800;
        float _2808 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2778].xyz));
        float _4706 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2812 = dot(vec3(_872, _873, _874), vec3(_2805, _2806, _2807));
        float _4717 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2816 = dot(vec3(cbLight._m0[_2778].xyz), vec3(_2805, _2806, _2807));
        float _4728 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2820 = _2797 * _2797;
        float _2824 = ((_2815 * _2815) * (_2820 + (-1.0))) + 1.0;
        float _2833 = (exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2834 = 1.0 - _2797;
        float _2844 = (0.5 / (((_2591 * ((_2811 * _2834) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2591 * _2834) + _2797) * _2811))) * _2811;
        float _4739 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2846 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2820 / ((_2824 * _2824) * 3.141590118408203125));
        float _2847 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2772 = (((_2833 * cbLight._m0[_2782].x) * _2846) * _2847) + _2714;
        _2774 = (((_2833 * cbLight._m0[_2782].y) * _2846) * _2847) + _2715;
        _2776 = (((_2833 * cbLight._m0[_2782].z) * _2846) * _2847) + _2716;
    }
    float _2878;
    float _2880;
    float _2882;
    if (_2500)
    {
        _2878 = _2772;
        _2880 = _2774;
        _2882 = _2776;
    }
    else
    {
        uint _2889 = _2315 + 3u;
        uint _2893 = _2315 + 11u;
        float _2907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2889].w)) * _875) * 0.949999988079071044921875);
        float _2908 = _2907 * _2907;
        float _2909 = cbLight._m0[_2889].x + _951;
        float _2910 = cbLight._m0[_2889].y + _952;
        float _2911 = cbLight._m0[_2889].z + _953;
        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
        float _2916 = _2915 * _2909;
        float _2917 = _2915 * _2910;
        float _2918 = _2915 * _2911;
        float _2919 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2889].xyz));
        float _4755 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2922 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2923 = dot(vec3(_872, _873, _874), vec3(_2916, _2917, _2918));
        float _4766 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2926 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2927 = dot(vec3(cbLight._m0[_2889].xyz), vec3(_2916, _2917, _2918));
        float _4777 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2931 = _2908 * _2908;
        float _2935 = ((_2926 * _2926) * (_2931 + (-1.0))) + 1.0;
        float _2944 = (exp2(log2(1.0 - (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2945 = 1.0 - _2908;
        float _2955 = (0.5 / (((_2591 * ((_2922 * _2945) + _2908)) + 9.9999999392252902907785028219223e-09) + (((_2591 * _2945) + _2908) * _2922))) * _2922;
        float _4788 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2957 = (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2931 / ((_2935 * _2935) * 3.141590118408203125));
        float _2958 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2878 = (((_2944 * cbLight._m0[_2893].x) * _2957) * _2958) + _2772;
        _2880 = (((_2944 * cbLight._m0[_2893].y) * _2957) * _2958) + _2774;
        _2882 = (((_2944 * cbLight._m0[_2893].z) * _2957) * _2958) + _2776;
    }
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    if (_2313.y == 0u)
    {
        uvec4 _2979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2980 = _2979.x;
        uint _2991 = uint((float(_2979.y) * floor(float(uint(cbSceneParam._m0[85u].y * _960) / _2980))) + floor(float(uint(cbSceneParam._m0[85u].x * _959) / _2980)));
        float _3001 = (log2(_2091 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3002 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        uint _3005 = uint(isnan(14.0) ? _3002 : (isnan(_3002) ? 14.0 : min(_3002, 14.0)));
        uvec4 _3010 = texelFetch(g_lightClusterGridBuffer, int(((_3005 << 2u) + (_2991 << 6u)) >> 2u));
        uint _3011 = _3010.x;
        uint _3012 = _2979.z;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        if (((((1u << ((_3012 >> 4u) & 15u)) + 4294967295u) & _3011) == 0u) || ((_3012 & 240u) == 0u))
        {
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
        }
        else
        {
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            uint _3242 = 0u;
            uint _3251;
            bool _3252;
            for (;;)
            {
                _3251 = texelFetch(g_lightClassification, int((((_3005 << 5u) + (_2991 << 9u)) + (_3242 << 2u)) >> 2u)).x;
                _3252 = _3251 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3252)
                {
                    frontier_phi_66_pred = _3241;
                    frontier_phi_66_pred_1 = _3240;
                    frontier_phi_66_pred_2 = _3239;
                    frontier_phi_66_pred_3 = _3238;
                    frontier_phi_66_pred_4 = _3237;
                    frontier_phi_66_pred_5 = _3236;
                }
                else
                {
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    uint _3366;
                    _3360 = _3236;
                    _3361 = _3237;
                    _3362 = _3238;
                    _3363 = _3239;
                    _3364 = _3240;
                    _3365 = _3241;
                    _3366 = _3251;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    for (;;)
                    {
                        uint _3370 = uint(findLSB(_3366)) + (_3242 << 5u);
                        uint _3367 = (_3366 + 4294967295u) & _3366;
                        uint _3372 = _3370 * 48u;
                        vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 3u)).x));
                        uint _3392 = (_3370 * 48u) + 4u;
                        vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3392)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 3u)).x));
                        uint _3411 = (_3370 * 48u) + 8u;
                        vec3 _3422 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3411)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 2u)).x));
                        float _3426 = _3386.x - _2089;
                        float _3427 = _3386.y - _2090;
                        float _3428 = _3386.z - _2091;
                        float _3429 = dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428));
                        float _3432 = inversesqrt(_3429);
                        float _3433 = _3432 * _3426;
                        float _3434 = _3432 * _3427;
                        float _3435 = _3432 * _3428;
                        float _3436 = dot(vec3(_978, _981, _984), vec3(_3433, _3434, _3435));
                        float _3441 = 1.0 - (_3429 * _3386.w);
                        float _4814 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3442 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3443 = sqrt(_3429) * _3405.w;
                        float _3446 = 1.39999997615814208984375 / (_3443 + 1.39999997615814208984375);
                        float _3447 = _3446 * _3446;
                        float _3450 = ((1.0 - _3447) * _3436) + _3447;
                        float _3453 = _3443 * _3443;
                        float _3457 = ((isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0))) * _3442) / ((_3453 * 0.699999988079071044921875) + 1.0);
                        float _3461 = (-0.0) - _2089;
                        float _3462 = (-0.0) - _2090;
                        float _3463 = (-0.0) - _2091;
                        float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                        float _3468 = _3467 * _3461;
                        float _3469 = _3467 * _3462;
                        float _3470 = _3467 * _3463;
                        float _3477 = exp2(log2(1.0 / ((_3453 * 3.5) + 5.0)) * 0.25);
                        float _3478 = 1.0 - _1038;
                        float _3485 = sqrt(1.0 - ((1.0 - (_3478 * _3478)) * (1.0 - (_3477 * _3477))));
                        float _3486 = _3485 * _3485;
                        float _3487 = _3486 * _3486;
                        float _3488 = _3468 + _3433;
                        float _3489 = _3469 + _3434;
                        float _3490 = _3470 + _3435;
                        float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                        float _3498 = dot(vec3(_978, _981, _984), vec3(_3468, _3469, _3470));
                        float _4830 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3501 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3502 = dot(vec3(_978, _981, _984), vec3(_3494 * _3488, _3494 * _3489, _3494 * _3490));
                        float _4841 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3505 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                        float _3509 = ((_3505 * _3505) * (_3487 + (-1.0))) + 1.0;
                        float _3510 = _3446 * _3486;
                        float _3511 = _3510 * _3510;
                        float _3514 = ((1.0 - _3511) * _3436) + _3511;
                        float _4852 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3515 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                        float _3516 = 1.0 - _3486;
                        float _3526 = (0.5 / (((_3515 * ((_3501 * _3516) + _3486)) + 9.9999999392252902907785028219223e-09) + (((_3515 * _3516) + _3486) * _3501))) * _3515;
                        float _4863 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3537 = (((_3487 * 3.1415927410125732421875) * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) / ((_3509 * _3509) * ((_3453 * 2.1991131305694580078125) + 3.141590118408203125))) * _3442;
                        _3295 = (_3457 * _3405.x) + _3363;
                        _3296 = (_3457 * _3405.y) + _3364;
                        _3297 = (_3457 * _3405.z) + _3365;
                        _3292 = (_3537 * _3422.x) + _3360;
                        _3293 = (_3537 * _3422.y) + _3361;
                        _3294 = (_3537 * _3422.z) + _3362;
                        if (_3367 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3360 = _3292;
                            _3361 = _3293;
                            _3362 = _3294;
                            _3363 = _3295;
                            _3364 = _3296;
                            _3365 = _3297;
                            _3366 = _3367;
                        }
                    }
                    frontier_phi_66_pred = _3297;
                    frontier_phi_66_pred_1 = _3296;
                    frontier_phi_66_pred_2 = _3295;
                    frontier_phi_66_pred_3 = _3294;
                    frontier_phi_66_pred_4 = _3293;
                    frontier_phi_66_pred_5 = _3292;
                }
                _3102 = frontier_phi_66_pred;
                _3100 = frontier_phi_66_pred_1;
                _3098 = frontier_phi_66_pred_2;
                _3096 = frontier_phi_66_pred_3;
                _3094 = frontier_phi_66_pred_4;
                _3092 = frontier_phi_66_pred_5;
                uint _3243 = _3242 + 1u;
                if (_3243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3236 = _3092;
                    _3237 = _3094;
                    _3238 = _3096;
                    _3239 = _3098;
                    _3240 = _3100;
                    _3241 = _3102;
                    _3242 = _3243;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
        }
        uvec4 _3105 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3106 = _3105.z;
        uint _3108 = (_3106 >> 8u) & 15u;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        if (((4294967295u << _3108) & _3011) == 0u)
        {
            _3204 = _3091;
            _3206 = _3093;
            _3208 = _3095;
            _3210 = _3097;
            _3212 = _3099;
            _3214 = _3101;
        }
        else
        {
            float _3229 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
            float _3230 = _3229 * _2089;
            float _3231 = _3229 * _2090;
            float _3232 = _3229 * _2091;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3108 < ((_3106 >> 12u) & 15u))
            {
                float _3205;
                float _3207;
                float _3209;
                float _3211;
                float _3213;
                float _3215;
                float _3343 = _3091;
                float _3344 = _3093;
                float _3345 = _3095;
                float _3346 = _3097;
                float _3347 = _3099;
                float _3348 = _3101;
                uint _3349 = _3108;
                uint _3358;
                bool _3359;
                for (;;)
                {
                    _3358 = texelFetch(g_lightClassification, int((((_3005 << 5u) + (_2991 << 9u)) + (_3349 << 2u)) >> 2u)).x;
                    _3359 = _3358 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3359)
                    {
                        frontier_phi_72_pred = _3348;
                        frontier_phi_72_pred_1 = _3347;
                        frontier_phi_72_pred_2 = _3346;
                        frontier_phi_72_pred_3 = _3345;
                        frontier_phi_72_pred_4 = _3344;
                        frontier_phi_72_pred_5 = _3343;
                    }
                    else
                    {
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3555 = _3343;
                        float _3556 = _3344;
                        float _3557 = _3345;
                        float _3558 = _3346;
                        float _3559 = _3347;
                        float _3560 = _3348;
                        uint _3561 = _3358;
                        uint _3562;
                        vec4 _3587;
                        float _3588;
                        vec4 _3603;
                        vec3 _3615;
                        vec4 _3630;
                        vec4 _3645;
                        float _3691;
                        bool _3692;
                        for (;;)
                        {
                            uint _3572 = ((_3349 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3561));
                            _3562 = (_3561 + 4294967295u) & _3561;
                            uint _3574 = _3572 * 40u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            _3588 = _3587.w;
                            uint _3590 = (_3572 * 40u) + 4u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3572 * 40u) + 8u;
                            _3615 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x));
                            uint _3617 = (_3572 * 40u) + 16u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3572 * 40u) + 20u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3572 * 40u) + 24u;
                            vec4 _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3666 = (_3572 * 40u) + 28u;
                            vec4 _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            _3691 = fma(_2091, _3679.z, fma(_2090, _3679.y, _3679.x * _2089)) + _3679.w;
                            _3692 = !((fma(_2091, _3660.z, fma(_2090, _3660.y, _3660.x * _2089)) + _3660.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3692)
                            {
                                float _3719 = _3587.x - _2089;
                                float _3720 = _3587.y - _2090;
                                float _3721 = _3587.z - _2091;
                                float _3722 = dot(vec3(_3719, _3720, _3721), vec3(_3719, _3720, _3721));
                                float _3725 = inversesqrt(_3722);
                                float _3726 = _3725 * _3719;
                                float _3727 = _3725 * _3720;
                                float _3728 = _3725 * _3721;
                                float _3732 = 1.0 - (_3722 / (_3588 * _3588));
                                float _4874 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3737 = sqrt(_3722) * _3603.w;
                                float _3739 = 1.39999997615814208984375 / (_3737 + 1.39999997615814208984375);
                                float _3740 = _3739 * _3739;
                                float _3743 = ((1.0 - _3740) * dot(vec3(_3726, _3727, _3728), vec3(_978, _981, _984))) + _3740;
                                float _3746 = _3737 * _3737;
                                float _3750 = (fma(_2091, _3630.z, fma(_2090, _3630.y, _3630.x * _2089)) + _3630.w) / _3691;
                                float _3751 = (fma(_2091, _3645.z, fma(_2090, _3645.y, _3645.x * _2089)) + _3645.w) / _3691;
                                float _3755 = 1.0 - dot(vec2(_3750, _3751), vec2(_3750, _3751));
                                float _4890 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3756 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3757 = _3756 * (((isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0))) * _3733) / ((_3746 * 0.699999988079071044921875) + 1.0));
                                float _3769 = exp2(log2(1.0 / ((_3746 * 3.5) + 5.0)) * 0.25);
                                float _3770 = 1.0 - _1038;
                                float _3777 = sqrt(1.0 - ((1.0 - (_3770 * _3770)) * (1.0 - (_3769 * _3769))));
                                float _3778 = _3777 * _3777;
                                float _3779 = _3778 * _3778;
                                float _3780 = _3726 - _3230;
                                float _3781 = _3727 - _3231;
                                float _3782 = _3728 - _3232;
                                float _3786 = inversesqrt(dot(vec3(_3780, _3781, _3782), vec3(_3780, _3781, _3782)));
                                float _3790 = dot(vec3(_978, _981, _984), vec3((-0.0) - _3230, (-0.0) - _3231, (-0.0) - _3232));
                                float _4901 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3793 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3794 = dot(vec3(_978, _981, _984), vec3(_3786 * _3780, _3786 * _3781, _3786 * _3782));
                                float _4912 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3797 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3801 = ((_3797 * _3797) * (_3779 + (-1.0))) + 1.0;
                                float _3802 = _3739 * _3778;
                                float _3803 = _3802 * _3802;
                                float _3809 = ((1.0 - _3803) * dot(vec3(_978, _981, _984), vec3(_3726, _3727, _3728))) + _3803;
                                float _4923 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3810 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3811 = 1.0 - _3778;
                                float _3821 = (0.5 / (((_3810 * ((_3793 * _3811) + _3778)) + 9.9999999392252902907785028219223e-09) + (((_3810 * _3811) + _3778) * _3793))) * _3810;
                                float _4934 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3831 = (_3756 * _3733) * (((_3779 * 3.1415927410125732421875) * (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) / ((_3801 * _3801) * ((_3746 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3757 * _3603.y;
                                frontier_phi_78_pred_1 = _3757 * _3603.x;
                                frontier_phi_78_pred_2 = _3831 * _3615.z;
                                frontier_phi_78_pred_3 = _3831 * _3615.y;
                                frontier_phi_78_pred_4 = _3831 * _3615.x;
                                frontier_phi_78_pred_5 = _3757 * _3603.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3839 = frontier_phi_78_pred;
                            _3838 = frontier_phi_78_pred_1;
                            _3837 = frontier_phi_78_pred_2;
                            _3836 = frontier_phi_78_pred_3;
                            _3835 = frontier_phi_78_pred_4;
                            _3840 = frontier_phi_78_pred_5;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            _3544 = _3837 + _3557;
                            if (_3562 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3562;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3547;
                        frontier_phi_72_pred_1 = _3546;
                        frontier_phi_72_pred_2 = _3545;
                        frontier_phi_72_pred_3 = _3544;
                        frontier_phi_72_pred_4 = _3543;
                        frontier_phi_72_pred_5 = _3542;
                    }
                    _3215 = frontier_phi_72_pred;
                    _3213 = frontier_phi_72_pred_1;
                    _3211 = frontier_phi_72_pred_2;
                    _3209 = frontier_phi_72_pred_3;
                    _3207 = frontier_phi_72_pred_4;
                    _3205 = frontier_phi_72_pred_5;
                    uint _3350 = _3349 + 1u;
                    if (_3350 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3343 = _3205;
                        _3344 = _3207;
                        _3345 = _3209;
                        _3346 = _3211;
                        _3347 = _3213;
                        _3348 = _3215;
                        _3349 = _3350;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3215;
                frontier_phi_60_61_ladder_1 = _3213;
                frontier_phi_60_61_ladder_2 = _3209;
                frontier_phi_60_61_ladder_3 = _3207;
                frontier_phi_60_61_ladder_4 = _3205;
                frontier_phi_60_61_ladder_5 = _3211;
            }
            else
            {
                frontier_phi_60_61_ladder = _3101;
                frontier_phi_60_61_ladder_1 = _3099;
                frontier_phi_60_61_ladder_2 = _3095;
                frontier_phi_60_61_ladder_3 = _3093;
                frontier_phi_60_61_ladder_4 = _3091;
                frontier_phi_60_61_ladder_5 = _3097;
            }
            _3204 = frontier_phi_60_61_ladder_4;
            _3206 = frontier_phi_60_61_ladder_3;
            _3208 = frontier_phi_60_61_ladder_2;
            _3210 = frontier_phi_60_61_ladder_5;
            _3212 = frontier_phi_60_61_ladder_1;
            _3214 = frontier_phi_60_61_ladder;
        }
        float _3219 = isnan(1.0) ? _1022 : (isnan(_1022) ? 1.0 : min(_1022, 1.0));
        _3024 = (_3219 * _3210) + _2555;
        _3026 = (_3219 * _3212) + _2557;
        _3028 = (_3219 * _3214) + _2559;
        _3030 = ((_3204 * 0.039999999105930328369140625) * _3219) + _2878;
        _3032 = ((_3206 * 0.039999999105930328369140625) * _3219) + _2880;
        _3034 = ((_3208 * 0.039999999105930328369140625) * _3219) + _2882;
    }
    else
    {
        _3024 = _2555;
        _3026 = _2557;
        _3028 = _2559;
        _3030 = _2878;
        _3032 = _2880;
        _3034 = _2882;
    }
    float _4950 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4961 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _4972 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    uint _3054 = _248 + 6u;
    float _3062 = _959 / cbSceneParam._m0[86u].x;
    float _3063 = _960 / cbSceneParam._m0[86u].y;
    vec4 _3077 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3062, _3063, (log2((isnan(cbSceneParam._m0[77u].w) ? _893 : (isnan(_893) ? cbSceneParam._m0[77u].w : min(_893, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3079 = _3077.x;
    float _3080 = _3077.y;
    float _3081 = _3077.z;
    float _3082 = _3077.w;
    float _3154;
    float _3156;
    float _3158;
    float _3160;
    if (_893 > cbSceneParam._m0[78u].w)
    {
        float _3116 = isnan(_893) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _893 : min(cbSceneParam._m0[80u].w, _893));
        float _3117 = _3116 / _893;
        float _3128 = _3117 * _944;
        float _3129 = _945 * _3117;
        float _3130 = (-0.0) - _3129;
        float _3132 = _3117 * _946;
        float _3134 = (cbSceneParam._m0[77u].w * _3130) / _3116;
        float _3135 = _3134 + cbSceneParam._m0[79u].w;
        float _3136 = cbSceneParam._m0[79u].w - _3129;
        float _3142 = sqrt(((_3128 * _3128) + (_3129 * _3129)) + (_3132 * _3132));
        float _3145 = (1.0 - (cbSceneParam._m0[77u].w / _3116)) * _3142;
        float _3150 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3152 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3305;
        if (abs((_3130 - _3134) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3305 = ((((_3135 > 0.0) ? exp2(_3150 * _3135) : (2.0 - exp2(_3152 * _3135))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3145;
        }
        else
        {
            float _3265 = 1.0 / cbSceneParam._m0[80u].x;
            float _3266 = isnan(_3136) ? _3135 : (isnan(_3135) ? _3136 : max(_3135, _3136));
            float _3267 = isnan(_3136) ? _3135 : (isnan(_3135) ? _3136 : min(_3135, _3136));
            float _3276 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : min(_3266, 0.0));
            float _3277 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : min(_3267, 0.0));
            _3305 = ((abs(_3142 / _3130) * cbSceneParam._m0[80u].y) * ((((_3276 - _3277) * 2.0) - ((exp2(_3150 * (isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0)))) - exp2(_3150 * (isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))))) * _3265)) - ((exp2(_3152 * _3276) - exp2(_3152 * _3277)) * _3265))) + (_3145 * cbSceneParam._m0[80u].z);
        }
        vec4 _3307 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3062, _3063, 1.0), 0.0);
        float _3316 = exp2((_3305 * (-1.44269502162933349609375)) * (1.0 - _3307.w));
        float _3317 = log2(_3316);
        float _3333 = log2(_3082);
        _3154 = (exp2(_3333 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3317 * cbSceneParam._m0[78u].x)) * _3307.x) / cbSceneParam._m0[78u].x)) + _3079;
        _3156 = (exp2(_3333 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3317 * cbSceneParam._m0[78u].y)) * _3307.y) / cbSceneParam._m0[78u].y)) + _3080;
        _3158 = (exp2(_3333 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3317 * cbSceneParam._m0[78u].z)) * _3307.z) / cbSceneParam._m0[78u].z)) + _3081;
        _3160 = _3316 * _3082;
    }
    else
    {
        _3154 = _3079;
        _3156 = _3080;
        _3158 = _3081;
        _3160 = _3082;
    }
    float _3172 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3173 = _3172 == 3.0;
    float _3174 = log2(_3160);
    float _3181 = exp2(_3174 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_3024 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1022))) + ((_3030 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1825)) * cbPerFrame._m0[3u].x));
    float _3182 = exp2(_3174 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_3026 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1022))) + ((_3032 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1825)) * cbPerFrame._m0[3u].x));
    float _3183 = exp2(_3174 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_3028 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1022))) + ((_3034 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1825)) * cbPerFrame._m0[3u].x));
    float _3192 = (_3172 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3192 * (_3173 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3154)));
    SV_Target.y = _3192 * (_3173 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3156)));
    SV_Target.z = _3192 * (_3173 ? _3183 : (_3183 + (cbSceneParam._m0[72u].w * _3158)));
    SV_Target.w = cbInstanceData._m0[_3054].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3054].w;
}


