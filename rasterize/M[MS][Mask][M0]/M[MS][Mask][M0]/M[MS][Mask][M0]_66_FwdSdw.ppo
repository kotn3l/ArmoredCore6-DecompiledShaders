#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1337;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _341.x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3925 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _417 = (_410 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _418 = (_410 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _419 = (_410 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _468 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _482 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _341.y) * 2.0) - ((((_458 - _468) * cbMtdParam._m0[24u].z) + _468) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3936 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _490 = (_483 * ((_436.x * cbMtdParam._m0[13u].x) - _417)) + _417;
    float _491 = (_483 * ((_436.y * cbMtdParam._m0[13u].y) - _418)) + _418;
    float _492 = (_483 * ((_436.z * cbMtdParam._m0[13u].z) - _419)) + _419;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _531 = _527.z;
    float _538 = ((_510.x - _529) * _410) + _529;
    float _539 = ((_510.y - _530) * _410) + _530;
    float _540 = ((_510.z - _531) * _410) + _531;
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _565 = ((_552.z - _540) * _483) + _540;
    float _568 = ((((_552.x - _538) * _483) + _538) * 2.0) + (-1.0);
    float _570 = ((((_552.y - _539) * _483) + _539) * 2.0) + (-1.0);
    float _571 = dot(vec2(_568, _570), vec2(_568, _570));
    float _3947 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _576 = sqrt(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _617 = _615.x;
    float _618 = 1.0 - _617;
    float _624 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _627 = ((isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : min(_624, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _636 = (_627 - ((((((_617 - _618) * cbMtdParam._m0[24u].w) + _618) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _627))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3968 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _644 = (_637 * (cbMtdParam._m0[17u].x - _490)) + _490;
    float _645 = (_637 * (cbMtdParam._m0[17u].y - _491)) + _491;
    float _646 = (_637 * (cbMtdParam._m0[17u].z - _492)) + _492;
    vec4 _658 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _660 = _658.x;
    float _661 = 1.0 - _660;
    float _688 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_660 - _661) * cbMtdParam._m0[24u].y) + _661) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3979 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _689 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _697 = ((((cbMtdParam._m0[10u].x - _644) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _689) + _644;
    float _698 = ((((cbMtdParam._m0[10u].y - _645) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _689) + _645;
    float _699 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _646)) * _689) + _646;
    float _703 = (cbMtdParam._m0[19u].w * (_590.z - _565)) + _565;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _724 = (_717.x * 2.0) + (-1.0);
    float _725 = (_717.y * 2.0) + (-1.0);
    float _726 = dot(vec2(_724, _725), vec2(_724, _725));
    float _3990 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _734 = (_637 * (_717.z - _703)) + _703;
    float _737 = ((cbMtdParam._m0[23u].y - _734) * _689) + _734;
    vec4 _756 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _762 = (_756.x * 2.0) + (-1.0);
    float _763 = (_756.y * 2.0) + (-1.0);
    float _764 = dot(vec2(_762, _763), vec2(_762, _763));
    float _4001 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _772 = (((_590.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _568;
    float _773 = (((_590.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _570;
    float _785 = (((_724 - _772) + (cbMtdParam._m0[21u].x * _772)) * _637) + _772;
    float _786 = (((_725 - _773) + (cbMtdParam._m0[21u].x * _773)) * _637) + _773;
    float _787 = (_637 * (sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) - _576)) + _576;
    float _798 = (((_762 - _785) + (_785 * cbMtdParam._m0[22u].z)) * _689) + _785;
    float _799 = (((_763 - _786) + (_786 * cbMtdParam._m0[22u].z)) * _689) + _786;
    float _800 = ((sqrt(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) - _787) * _689) + _787;
    float _802 = cbMtdParam._m0[22u].x + _590.w;
    float _805 = fma(_800, _242 * NORMAL.x, fma(_799, _249 * TANGENT.x, (_235 * _227) * _798));
    float _808 = fma(_800, _242 * NORMAL.y, fma(_799, _249 * TANGENT.y, (_235 * _228) * _798));
    float _811 = fma(_800, _242 * NORMAL.z, fma(_799, _249 * TANGENT.z, (_235 * _229) * _798));
    float _815 = inversesqrt(dot(vec3(_805, _808, _811), vec3(_805, _808, _811)));
    float _816 = _815 * _805;
    float _817 = _815 * _808;
    float _818 = _815 * _811;
    float _4012 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _819 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _4023 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4034 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4045 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _4056 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _837 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _888 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _878);
    float _889 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _878);
    float _890 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _878);
    float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
    float _895 = _888 * _894;
    float _896 = _889 * _894;
    float _897 = _890 * _894;
    float _903 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _904 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _922 = fma(_818, cbSceneParam._m0[5u].z, fma(_817, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _816));
    float _925 = fma(_818, cbSceneParam._m0[6u].z, fma(_817, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _816));
    float _928 = fma(_818, cbSceneParam._m0[7u].z, fma(_817, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _816));
    uint _942 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _948 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_942].x;
    float _949 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_942].y;
    float _950 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_942].z;
    float _4067 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    vec4 _962 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _903, cbSceneParam._m0[86u].y * _904));
    float _966 = ((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * TEXCOORD_5.w) * _962.x;
    float _967 = dot(vec3(_816, _817, _818), vec3(_895, _896, _897));
    float _970 = _967 * 2.0;
    float _974 = (_970 * _816) - _895;
    float _975 = (_970 * _817) - _896;
    float _976 = (_970 * _818) - _897;
    float _980 = abs(dot(vec3(_895, _896, _897), vec3(_816, _817, _818)));
    float _4100 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _982 = sqrt(_819);
    float _995 = exp2((_982 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_982 * 3.0));
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1336;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1061 = fma(_1035, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1027));
        float _1065 = fma(_1035, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1027));
        float _1069 = fma(_1035, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1027));
        float _1094 = _1027 + _816;
        float _1095 = _1031 + _817;
        float _1096 = _1035 + _818;
        float _1106 = fma(_1096, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1094)) - _1061;
        float _1107 = fma(_1096, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1094)) - _1065;
        float _1108 = fma(_1096, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1094)) - _1069;
        float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
        float _1125 = ((_1112 * _1106) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1061 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1112 * _1107) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1065 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1112 * _1108) / cbModelParam._m0[34u].z) + ((((((_1069 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        float _1164 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1130.x + (-0.5));
        float _1166 = _1164 * (_1130.y + (-0.5));
        float _1167 = _1164 * (_1130.z + (-0.5));
        float _1174 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1137.x + (-0.5));
        float _1176 = _1174 * (_1137.y + (-0.5));
        float _1177 = _1174 * (_1137.z + (-0.5));
        float _1184 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1144.x + (-0.5));
        float _1186 = _1184 * (_1144.y + (-0.5));
        float _1187 = _1184 * (_1144.z + (-0.5));
        float _1194 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1151.x + (-0.5));
        float _1196 = _1194 * (_1151.y + (-0.5));
        float _1197 = _1194 * (_1151.z + (-0.5));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = _1165 * 0.5;
        float _1202 = _1175 * 0.5;
        float _1203 = _1185 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1218 = (dot(vec3(_816, _817, _818), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1228 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _4148 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1230 + 1.0))) + _1235) * _1198;
        float _1245 = _1166 * 0.5;
        float _1246 = _1176 * 0.5;
        float _1247 = _1186 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_816, _817, _818), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4181 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1272 + 1.0))) + _1277) * _1199;
        float _1287 = _1167 * 0.5;
        float _1288 = _1177 * 0.5;
        float _1289 = _1187 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_816, _817, _818), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4214 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1314 + 1.0))) + _1319) * _1200;
        _1336 = _1167;
        _1338 = _1166;
        _1339 = _1165;
        _1340 = _1177;
        _1341 = _1176;
        _1342 = _1175;
        _1343 = _1187;
        _1344 = _1186;
        _1345 = _1185;
        _1346 = _1200;
        _1347 = _1199;
        _1348 = _1198;
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _1337;
        _1338 = _1337;
        _1339 = _1337;
        _1340 = _1337;
        _1341 = _1337;
        _1342 = _1337;
        _1343 = _1337;
        _1344 = _1337;
        _1345 = _1337;
        _1346 = _1337;
        _1347 = _1337;
        _1348 = _1337;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1375 = fma(_1035, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1027));
        float _1379 = fma(_1035, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1027));
        float _1383 = fma(_1035, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1027));
        float _1406 = _1027 + _816;
        float _1407 = _1031 + _817;
        float _1408 = _1035 + _818;
        float _1418 = fma(_1408, cbModelParam._m0[30u].z, fma(_1407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1406)) - _1375;
        float _1419 = fma(_1408, cbModelParam._m0[31u].z, fma(_1407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1406)) - _1379;
        float _1420 = fma(_1408, cbModelParam._m0[32u].z, fma(_1407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1406)) - _1383;
        float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
        float _1437 = ((_1424 * _1418) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1375 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1424 * _1419) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1379 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1424 * _1420) / cbModelParam._m0[35u].z) + ((((((_1383 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        float _1474 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1441.x + (-0.5));
        float _1476 = _1474 * (_1441.y + (-0.5));
        float _1477 = _1474 * (_1441.z + (-0.5));
        float _1484 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1448.x + (-0.5));
        float _1486 = _1484 * (_1448.y + (-0.5));
        float _1487 = _1484 * (_1448.z + (-0.5));
        float _1494 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1455.x + (-0.5));
        float _1496 = _1494 * (_1455.y + (-0.5));
        float _1497 = _1494 * (_1455.z + (-0.5));
        float _1504 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1462.x + (-0.5));
        float _1506 = _1504 * (_1462.y + (-0.5));
        float _1507 = _1504 * (_1462.z + (-0.5));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = _1475 * 0.5;
        float _1512 = _1485 * 0.5;
        float _1513 = _1495 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_816, _817, _818), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4277 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1538 + 1.0))) + _1543) * _1508;
        float _1553 = _1476 * 0.5;
        float _1554 = _1486 * 0.5;
        float _1555 = _1496 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_816, _817, _818), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4310 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1580 + 1.0))) + _1585) * _1509;
        float _1595 = _1477 * 0.5;
        float _1596 = _1487 * 0.5;
        float _1597 = _1497 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_816, _817, _818), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4343 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1622 + 1.0))) + _1627) * _1510;
        _1644 = _1477;
        _1645 = _1476;
        _1646 = _1475;
        _1647 = _1487;
        _1648 = _1486;
        _1649 = _1485;
        _1650 = _1497;
        _1651 = _1496;
        _1652 = _1495;
        _1653 = _1510;
        _1654 = _1509;
        _1655 = _1508;
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
    }
    else
    {
        _1644 = _1337;
        _1645 = _1337;
        _1646 = _1337;
        _1647 = _1337;
        _1648 = _1337;
        _1649 = _1337;
        _1650 = _1337;
        _1651 = _1337;
        _1652 = _1337;
        _1653 = _1337;
        _1654 = _1337;
        _1655 = _1337;
        _1656 = 0.0;
        _1657 = 0.0;
        _1658 = 0.0;
    }
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1349)) + _1349;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1350)) + _1350;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1351)) + _1351;
    float _1691 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1668));
    float _1712 = _974 * 0.5;
    float _1713 = _975 * 0.5;
    float _1714 = _976 * 0.5;
    float _1715 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1718 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1721 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1755;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1728 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1336, _1340, _1343, _1346));
        float _1732 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1736 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1339, _1342, _1345, _1348));
        float _1743 = dot(vec4(cbModelParam._m0[39u]), vec4(_1712, _1713, _1714, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1766;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1757 = dot(vec4(cbModelParam._m0[40u]), vec4(_1712, _1713, _1714, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1770 = (_1766 * cbModelParam._m0[1u].x) + (_1755 * (1.0 - cbModelParam._m0[1u].x));
    float _1780 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _819);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1780 : min(cbModelParam._m0[25u].z, _1780));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1829 = fma(_1035, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1027)) + cbModelParam._m0[13u].w;
        float _1833 = fma(_1035, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1027)) + cbModelParam._m0[14u].w;
        float _1837 = fma(_1035, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1027)) + cbModelParam._m0[15u].w;
        float _1840 = fma(_976, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974));
        float _1843 = fma(_976, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974));
        float _1846 = fma(_976, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974));
        float _1874;
        if (_1840 > 0.0)
        {
            _1874 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1874 = frontier_phi_14_12_ladder;
        }
        float _2044;
        if (_1843 > 0.0)
        {
            _2044 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2044 = frontier_phi_23_19_ladder;
        }
        float _2339;
        if (_1846 > 0.0)
        {
            _2339 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2339 = frontier_phi_35_30_ladder;
        }
        float _2341 = isnan(_2044) ? _1874 : (isnan(_1874) ? _2044 : min(_1874, _2044));
        float _2342 = isnan(_2339) ? _2341 : (isnan(_2341) ? _2339 : min(_2341, _2339));
        float _2346 = (_2342 * _1840) + _1829;
        float _2347 = (_2342 * _1843) + _1833;
        float _2348 = (_2342 * _1846) + _1837;
        float _2349 = _2342 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2349;
        float _2353 = _2349 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 > _2353) || ((_2347 < _2351) || ((_2346 < _2351) || (_2346 > _2353))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2348, cbModelParam._m0[9u].z, fma(_2347, cbModelParam._m0[9u].y, _2346 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2348, cbModelParam._m0[10u].z, fma(_2347, cbModelParam._m0[10u].y, _2346 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2348, cbModelParam._m0[11u].z, fma(_2347, cbModelParam._m0[11u].y, _2346 * cbModelParam._m0[11u].x))), _1781);
            frontier_phi_13_35_ladder = _2493.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2493.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2493.x * cbModelParam._m0[1u].y;
        }
        _1862 = frontier_phi_13_35_ladder_2;
        _1864 = frontier_phi_13_35_ladder_1;
        _1866 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_974, _975, _976), _1781);
        _1862 = _1850.x * cbModelParam._m0[1u].y;
        _1864 = _1850.y * cbModelParam._m0[1u].y;
        _1866 = _1850.z * cbModelParam._m0[1u].y;
    }
    float _1870 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _819);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1870 : min(cbModelParam._m0[25u].w, _1870));
    float _1961;
    float _1963;
    float _1965;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1925 = fma(_1035, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1027)) + cbModelParam._m0[21u].w;
        float _1929 = fma(_1035, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1027)) + cbModelParam._m0[22u].w;
        float _1933 = fma(_1035, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1027)) + cbModelParam._m0[23u].w;
        float _1936 = fma(_976, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974));
        float _1939 = fma(_976, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974));
        float _1942 = fma(_976, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974));
        float _2049;
        if (_1936 > 0.0)
        {
            _2049 = abs((1.0 - _1925) / _1936);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1925 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2049 = frontier_phi_25_21_ladder;
        }
        float _2366;
        if (_1939 > 0.0)
        {
            _2366 = abs((1.0 - _1929) / _1939);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1929 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2366 = frontier_phi_37_32_ladder;
        }
        float _2693;
        if (_1942 > 0.0)
        {
            _2693 = abs((1.0 - _1933) / _1942);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1933 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2693 = frontier_phi_47_44_ladder;
        }
        float _2695 = isnan(_2366) ? _2049 : (isnan(_2049) ? _2366 : min(_2049, _2366));
        float _2696 = isnan(_2693) ? _2695 : (isnan(_2695) ? _2693 : min(_2695, _2693));
        float _2700 = (_2696 * _1936) + _1925;
        float _2701 = (_2696 * _1939) + _1929;
        float _2702 = (_2696 * _1942) + _1933;
        float _2703 = _2696 * 9.9999997473787516355514526367188e-05;
        float _2704 = (-1.0) - _2703;
        float _2706 = _2703 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2702 > _2706) || ((_2702 < _2704) || ((_2701 > _2706) || ((_2701 < _2704) || ((_2700 < _2704) || (_2700 > _2706))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2820 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2702, cbModelParam._m0[17u].z, fma(_2701, cbModelParam._m0[17u].y, _2700 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2702, cbModelParam._m0[18u].z, fma(_2701, cbModelParam._m0[18u].y, _2700 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2702, cbModelParam._m0[19u].z, fma(_2701, cbModelParam._m0[19u].y, _2700 * cbModelParam._m0[19u].x))), _1871);
            frontier_phi_22_47_ladder = _2820.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2820.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2820.x * cbModelParam._m0[1u].z;
        }
        _1961 = frontier_phi_22_47_ladder_2;
        _1963 = frontier_phi_22_47_ladder_1;
        _1965 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_974, _975, _976), _1871);
        _1961 = _1945.x * cbModelParam._m0[1u].z;
        _1963 = _1945.y * cbModelParam._m0[1u].z;
        _1965 = _1945.z * cbModelParam._m0[1u].z;
    }
    float _1977 = ((((1.0 - _995) * ((_982 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_995 * _982)) * _966;
    float _1978 = _1977 * ((cbModelParam._m0[1u].w * (_1961 - _1862)) + _1862);
    float _1979 = _1977 * ((cbModelParam._m0[1u].w * (_1963 - _1864)) + _1864);
    float _1980 = _1977 * ((cbModelParam._m0[1u].w * (_1965 - _1866)) + _1866);
    float _1983 = fma(_1980, cbSceneParam._m0[89u].z, fma(_1979, cbSceneParam._m0[89u].y, _1978 * cbSceneParam._m0[89u].x));
    float _1986 = fma(_1980, cbSceneParam._m0[90u].z, fma(_1979, cbSceneParam._m0[90u].y, _1978 * cbSceneParam._m0[90u].x));
    float _1989 = fma(_1980, cbSceneParam._m0[91u].z, fma(_1979, cbSceneParam._m0[91u].y, _1978 * cbSceneParam._m0[91u].x));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2035 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2036 = _2023 / _2035;
    float _2037 = _2027 / _2035;
    float _2038 = _2031 / _2035;
    float _2185;
    float _2186;
    float _2187;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2065 = ((uint(_2038 > cbSceneParam._m0[59u].y) + uint(_2038 > cbSceneParam._m0[59u].x)) + uint(_2038 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2066 = _2065 + 43u;
        uint _2074 = _2065 + 44u;
        uint _2082 = _2065 + 45u;
        uint _2090 = _2065 + 46u;
        float _2101 = fma(_2035, cbSceneParam._m0[_2066].w, fma(_2031, cbSceneParam._m0[_2066].z, fma(_2027, cbSceneParam._m0[_2066].y, _2023 * cbSceneParam._m0[_2066].x)));
        float _2105 = fma(_2035, cbSceneParam._m0[_2074].w, fma(_2031, cbSceneParam._m0[_2074].z, fma(_2027, cbSceneParam._m0[_2074].y, _2023 * cbSceneParam._m0[_2074].x)));
        float _2113 = fma(_2035, cbSceneParam._m0[_2090].w, fma(_2031, cbSceneParam._m0[_2090].z, fma(_2027, cbSceneParam._m0[_2090].y, _2023 * cbSceneParam._m0[_2090].x)));
        float _2118 = cbSceneParam._m0[33u].z * _2113;
        float _2120 = cbSceneParam._m0[33u].w * _2113;
        float _2123 = fma(_2035, cbSceneParam._m0[_2082].w, fma(_2031, cbSceneParam._m0[_2082].z, fma(_2027, cbSceneParam._m0[_2082].y, _2023 * cbSceneParam._m0[_2082].x))) / _2113;
        float _2171 = (cbSceneParam._m0[33u].x - sqrt(((_2037 * _2037) + (_2036 * _2036)) + (_2038 * _2038))) * cbSceneParam._m0[33u].y;
        float _4469 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2178 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 + _2101) / _2113, (_2120 + _2105) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2120 + _2101) / _2113, (_2105 - _2118) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 - _2118) / _2113, (_2105 - _2120) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 - _2120) / _2113, (_2118 + _2105) / _2113), _2123), 0.0)).x), vec4(0.25)));
        _2185 = 1.0 - (_2178 * cbSceneParam._m0[34u].x);
        _2186 = 1.0 - (_2178 * cbSceneParam._m0[34u].y);
        _2187 = 1.0 - (_2178 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2185 = 1.0;
        _2186 = 1.0;
        _2187 = 1.0;
    }
    float _2251;
    float _2253;
    float _2255;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2239 = fma(_2035, cbSceneParam._m0[63u].w, fma(_2031, cbSceneParam._m0[63u].z, fma(_2027, cbSceneParam._m0[63u].y, _2023 * cbSceneParam._m0[63u].x)));
        float _2240 = fma(_2035, cbSceneParam._m0[60u].w, fma(_2031, cbSceneParam._m0[60u].z, fma(_2027, cbSceneParam._m0[60u].y, _2023 * cbSceneParam._m0[60u].x))) / _2239;
        float _2241 = fma(_2035, cbSceneParam._m0[61u].w, fma(_2031, cbSceneParam._m0[61u].z, fma(_2027, cbSceneParam._m0[61u].y, _2023 * cbSceneParam._m0[61u].x))) / _2239;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2240 >= cbSceneParam._m0[64u].x) && (_2241 >= cbSceneParam._m0[64u].y)) && (_2240 <= cbSceneParam._m0[64u].z)) && (_2241 <= cbSceneParam._m0[64u].w))
        {
            float _2379 = fma(_2035, cbSceneParam._m0[62u].w, fma(_2031, cbSceneParam._m0[62u].z, fma(_2027, cbSceneParam._m0[62u].y, _2023 * cbSceneParam._m0[62u].x))) / _2239;
            float _2383 = isnan(cbSceneParam._m0[41u].w) ? _2379 : (isnan(_2379) ? cbSceneParam._m0[41u].w : max(_2379, cbSceneParam._m0[41u].w));
            float _2426 = (cbSceneParam._m0[33u].x - sqrt(((_2037 * _2037) + (_2036 * _2036)) + (_2038 * _2038))) * cbSceneParam._m0[33u].y;
            float _4485 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
            float _2433 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2240, cbSceneParam._m0[33u].w + _2241), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2240, _2241 - cbSceneParam._m0[33u].z), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2240 - cbSceneParam._m0[33u].z, _2241 - cbSceneParam._m0[33u].w), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2240 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2241), _2383), 0.0)).x), vec4(0.25)));
            float _2437 = 1.0 - (_2433 * cbSceneParam._m0[34u].x);
            float _2438 = 1.0 - (_2433 * cbSceneParam._m0[34u].y);
            float _2439 = 1.0 - (_2433 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2439) ? _2187 : (isnan(_2187) ? _2439 : min(_2187, _2439));
            frontier_phi_34_33_ladder_1 = isnan(_2438) ? _2186 : (isnan(_2186) ? _2438 : min(_2186, _2438));
            frontier_phi_34_33_ladder_2 = isnan(_2437) ? _2185 : (isnan(_2185) ? _2437 : min(_2185, _2437));
        }
        else
        {
            frontier_phi_34_33_ladder = _2187;
            frontier_phi_34_33_ladder_1 = _2186;
            frontier_phi_34_33_ladder_2 = _2185;
        }
        _2251 = frontier_phi_34_33_ladder_2;
        _2253 = frontier_phi_34_33_ladder_1;
        _2255 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2251 = _2185;
        _2253 = _2186;
        _2255 = _2187;
    }
    uvec4 _2260 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2262 = _2260.x * 14u;
    uint _2263 = _2262 + 13u;
    float _2270 = _966 + (-1.0);
    float _2275 = (cbLight._m0[_2263].x * _2270) + 1.0;
    float _2276 = (cbLight._m0[_2263].y * _2270) + 1.0;
    float _2277 = (cbLight._m0[_2263].z * _2270) + 1.0;
    float _2278 = (cbLight._m0[_2263].w * _2270) + 1.0;
    uint _2279 = _2262 + 5u;
    float _2285 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
    uint _2289 = _2262 + 4u;
    float _2298 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
    uint _2302 = _2262 | 1u;
    float _2313 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_816, _817, _818));
    float _2316 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_816, _817, _818));
    float _4521 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _4532 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2321 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.3183098733425140380859375;
    float _2323 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 0.3183098733425140380859375;
    float _2330 = ((cbLight._m0[_2279].x * _2285) * _2323) + (((cbLight._m0[_2289].x * _2251) * _2298) * _2321);
    float _2331 = ((_2285 * cbLight._m0[_2279].y) * _2323) + (((cbLight._m0[_2289].y * _2253) * _2298) * _2321);
    float _2332 = ((_2285 * cbLight._m0[_2279].z) * _2323) + (((cbLight._m0[_2289].z * _2255) * _2298) * _2321);
    uvec4 _2336 = floatBitsToUint(cbLight._m0[_2262 + 12u]);
    bool _2338 = _2336.x == 0u;
    float _2440;
    float _2442;
    float _2444;
    if (_2338)
    {
        _2440 = _2330;
        _2442 = _2331;
        _2444 = _2332;
    }
    else
    {
        uint _2448 = _2262 + 6u;
        float _2464 = (dot(vec3(cbLight._m0[_2262 + 2u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2465 = _2464 * _2464;
        float _4543 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2466 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2467 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2440 = (((cbLight._m0[_2448].x * 0.3183098733425140380859375) * _2466) * _2467) + _2330;
        _2442 = (((cbLight._m0[_2448].y * 0.3183098733425140380859375) * _2466) * _2467) + _2331;
        _2444 = (((cbLight._m0[_2448].z * 0.3183098733425140380859375) * _2466) * _2467) + _2332;
    }
    bool _2447 = _2336.y == 0u;
    float _2502;
    float _2504;
    float _2506;
    if (_2447)
    {
        _2502 = _2440;
        _2504 = _2442;
        _2506 = _2444;
    }
    else
    {
        uint _2664 = _2262 + 7u;
        float _2680 = (dot(vec3(cbLight._m0[_2262 + 3u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2681 = _2680 * _2680;
        float _4559 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2682 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2683 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2502 = (((cbLight._m0[_2664].x * 0.3183098733425140380859375) * _2682) * _2683) + _2440;
        _2504 = (((cbLight._m0[_2664].y * 0.3183098733425140380859375) * _2682) * _2683) + _2442;
        _2506 = (((cbLight._m0[_2664].z * 0.3183098733425140380859375) * _2682) * _2683) + _2444;
    }
    uint _2509 = _2262 + 8u;
    float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _819) * 0.949999988079071044921875);
    float _2523 = _2522 * _2522;
    float _2524 = cbLight._m0[_2262].x + _895;
    float _2525 = cbLight._m0[_2262].y + _896;
    float _2526 = cbLight._m0[_2262].z + _897;
    float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
    float _2531 = _2530 * _2524;
    float _2532 = _2530 * _2525;
    float _2533 = _2530 * _2526;
    float _2534 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2262].xyz));
    float _4575 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2537 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _4586 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _2538 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2539 = dot(vec3(_816, _817, _818), vec3(_2531, _2532, _2533));
    float _4597 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2542 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2543 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2531, _2532, _2533));
    float _4608 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2547 = _2523 * _2523;
    float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
    float _2562 = (exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2563 = 1.0 - _2523;
    float _2574 = (0.5 / (((_2538 * ((_2537 * _2563) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2563) + _2523) * _2537))) * _2537;
    float _4619 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2576 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
    uint _2590 = _2262 + 9u;
    float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _819) * 0.949999988079071044921875);
    float _2602 = _2601 * _2601;
    float _2603 = cbLight._m0[_2302].x + _895;
    float _2604 = cbLight._m0[_2302].y + _896;
    float _2605 = cbLight._m0[_2302].z + _897;
    float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
    float _2610 = _2609 * _2603;
    float _2611 = _2609 * _2604;
    float _2612 = _2609 * _2605;
    float _2613 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2302].xyz));
    float _4630 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2617 = dot(vec3(_816, _817, _818), vec3(_2610, _2611, _2612));
    float _4641 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2620 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2621 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2610, _2611, _2612));
    float _4652 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2625 = _2602 * _2602;
    float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
    float _2638 = (exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2639 = 1.0 - _2602;
    float _2649 = (0.5 / (((_2538 * ((_2616 * _2639) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2639) + _2602) * _2616))) * _2616;
    float _4663 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2651 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
    float _2661 = (((_2638 * cbLight._m0[_2590].x) * _2651) * _2285) + ((((cbLight._m0[_2509].x * _2251) * _2562) * _2576) * _2298);
    float _2662 = (((_2638 * cbLight._m0[_2590].y) * _2651) * _2285) + ((((cbLight._m0[_2509].y * _2253) * _2562) * _2576) * _2298);
    float _2663 = (((_2638 * cbLight._m0[_2590].z) * _2651) * _2285) + ((((cbLight._m0[_2509].z * _2255) * _2562) * _2576) * _2298);
    float _2719;
    float _2721;
    float _2723;
    if (_2338)
    {
        _2719 = _2661;
        _2721 = _2662;
        _2723 = _2663;
    }
    else
    {
        uint _2725 = _2262 + 2u;
        uint _2729 = _2262 + 10u;
        float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2725].w)) * _819) * 0.949999988079071044921875);
        float _2744 = _2743 * _2743;
        float _2745 = cbLight._m0[_2725].x + _895;
        float _2746 = cbLight._m0[_2725].y + _896;
        float _2747 = cbLight._m0[_2725].z + _897;
        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
        float _2752 = _2751 * _2745;
        float _2753 = _2751 * _2746;
        float _2754 = _2751 * _2747;
        float _2755 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2725].xyz));
        float _4674 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2759 = dot(vec3(_816, _817, _818), vec3(_2752, _2753, _2754));
        float _4685 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2763 = dot(vec3(cbLight._m0[_2725].xyz), vec3(_2752, _2753, _2754));
        float _4696 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2767 = _2744 * _2744;
        float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
        float _2780 = (exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2781 = 1.0 - _2744;
        float _2791 = (0.5 / (((_2538 * ((_2758 * _2781) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2781) + _2744) * _2758))) * _2758;
        float _4707 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2793 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
        float _2794 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2719 = (((_2780 * cbLight._m0[_2729].x) * _2793) * _2794) + _2661;
        _2721 = (((_2780 * cbLight._m0[_2729].y) * _2793) * _2794) + _2662;
        _2723 = (((_2780 * cbLight._m0[_2729].z) * _2793) * _2794) + _2663;
    }
    float _2825;
    float _2827;
    float _2829;
    if (_2447)
    {
        _2825 = _2719;
        _2827 = _2721;
        _2829 = _2723;
    }
    else
    {
        uint _2836 = _2262 + 3u;
        uint _2840 = _2262 + 11u;
        float _2854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2836].w)) * _819) * 0.949999988079071044921875);
        float _2855 = _2854 * _2854;
        float _2856 = cbLight._m0[_2836].x + _895;
        float _2857 = cbLight._m0[_2836].y + _896;
        float _2858 = cbLight._m0[_2836].z + _897;
        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
        float _2863 = _2862 * _2856;
        float _2864 = _2862 * _2857;
        float _2865 = _2862 * _2858;
        float _2866 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2836].xyz));
        float _4723 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2869 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2870 = dot(vec3(_816, _817, _818), vec3(_2863, _2864, _2865));
        float _4734 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2874 = dot(vec3(cbLight._m0[_2836].xyz), vec3(_2863, _2864, _2865));
        float _4745 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2878 = _2855 * _2855;
        float _2882 = ((_2873 * _2873) * (_2878 + (-1.0))) + 1.0;
        float _2891 = (exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2892 = 1.0 - _2855;
        float _2902 = (0.5 / (((_2538 * ((_2869 * _2892) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2892) + _2855) * _2869))) * _2869;
        float _4756 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2904 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2878 / ((_2882 * _2882) * 3.141590118408203125));
        float _2905 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2825 = (((_2891 * cbLight._m0[_2840].x) * _2904) * _2905) + _2719;
        _2827 = (((_2891 * cbLight._m0[_2840].y) * _2904) * _2905) + _2721;
        _2829 = (((_2891 * cbLight._m0[_2840].z) * _2904) * _2905) + _2723;
    }
    float _2971;
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    if (_2260.y == 0u)
    {
        uvec4 _2926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2927 = _2926.x;
        uint _2938 = uint((float(_2926.y) * floor(float(uint(cbSceneParam._m0[85u].y * _904) / _2927))) + floor(float(uint(cbSceneParam._m0[85u].x * _903) / _2927)));
        float _2948 = (log2(_2038 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2949 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        uint _2952 = uint(isnan(14.0) ? _2949 : (isnan(_2949) ? 14.0 : min(_2949, 14.0)));
        uvec4 _2957 = texelFetch(g_lightClusterGridBuffer, int(((_2952 << 2u) + (_2938 << 6u)) >> 2u));
        uint _2958 = _2957.x;
        uint _2959 = _2926.z;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        if (((((1u << ((_2959 >> 4u) & 15u)) + 4294967295u) & _2958) == 0u) || ((_2959 & 240u) == 0u))
        {
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
        }
        else
        {
            float _3039;
            float _3041;
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            uint _3189 = 0u;
            uint _3198;
            bool _3199;
            for (;;)
            {
                _3198 = texelFetch(g_lightClassification, int((((_2952 << 5u) + (_2938 << 9u)) + (_3189 << 2u)) >> 2u)).x;
                _3199 = _3198 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3199)
                {
                    frontier_phi_66_pred = _3188;
                    frontier_phi_66_pred_1 = _3187;
                    frontier_phi_66_pred_2 = _3186;
                    frontier_phi_66_pred_3 = _3185;
                    frontier_phi_66_pred_4 = _3184;
                    frontier_phi_66_pred_5 = _3183;
                }
                else
                {
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    uint _3313;
                    _3307 = _3183;
                    _3308 = _3184;
                    _3309 = _3185;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3188;
                    _3313 = _3198;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    for (;;)
                    {
                        uint _3317 = uint(findLSB(_3313)) + (_3189 << 5u);
                        uint _3314 = (_3313 + 4294967295u) & _3313;
                        uint _3319 = _3317 * 48u;
                        vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3319)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 3u)).x));
                        uint _3339 = (_3317 * 48u) + 4u;
                        vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 3u)).x));
                        uint _3358 = (_3317 * 48u) + 8u;
                        vec3 _3369 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x));
                        float _3373 = _3333.x - _2036;
                        float _3374 = _3333.y - _2037;
                        float _3375 = _3333.z - _2038;
                        float _3376 = dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375));
                        float _3379 = inversesqrt(_3376);
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3383 = dot(vec3(_922, _925, _928), vec3(_3380, _3381, _3382));
                        float _3388 = 1.0 - (_3376 * _3333.w);
                        float _4782 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3389 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3390 = sqrt(_3376) * _3352.w;
                        float _3393 = 1.39999997615814208984375 / (_3390 + 1.39999997615814208984375);
                        float _3394 = _3393 * _3393;
                        float _3397 = ((1.0 - _3394) * _3383) + _3394;
                        float _3400 = _3390 * _3390;
                        float _3404 = ((isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0))) * _3389) / ((_3400 * 0.699999988079071044921875) + 1.0);
                        float _3408 = (-0.0) - _2036;
                        float _3409 = (-0.0) - _2037;
                        float _3410 = (-0.0) - _2038;
                        float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                        float _3415 = _3414 * _3408;
                        float _3416 = _3414 * _3409;
                        float _3417 = _3414 * _3410;
                        float _3424 = exp2(log2(1.0 / ((_3400 * 3.5) + 5.0)) * 0.25);
                        float _3425 = 1.0 - _982;
                        float _3432 = sqrt(1.0 - ((1.0 - (_3425 * _3425)) * (1.0 - (_3424 * _3424))));
                        float _3433 = _3432 * _3432;
                        float _3434 = _3433 * _3433;
                        float _3435 = _3415 + _3380;
                        float _3436 = _3416 + _3381;
                        float _3437 = _3417 + _3382;
                        float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                        float _3445 = dot(vec3(_922, _925, _928), vec3(_3415, _3416, _3417));
                        float _4798 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3448 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3449 = dot(vec3(_922, _925, _928), vec3(_3441 * _3435, _3441 * _3436, _3441 * _3437));
                        float _4809 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3452 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3456 = ((_3452 * _3452) * (_3434 + (-1.0))) + 1.0;
                        float _3457 = _3393 * _3433;
                        float _3458 = _3457 * _3457;
                        float _3461 = ((1.0 - _3458) * _3383) + _3458;
                        float _4820 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3462 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3463 = 1.0 - _3433;
                        float _3473 = (0.5 / (((_3462 * ((_3448 * _3463) + _3433)) + 9.9999999392252902907785028219223e-09) + (((_3462 * _3463) + _3433) * _3448))) * _3462;
                        float _4831 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3484 = (((_3434 * 3.1415927410125732421875) * (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) / ((_3456 * _3456) * ((_3400 * 2.1991131305694580078125) + 3.141590118408203125))) * _3389;
                        _3242 = (_3404 * _3352.x) + _3310;
                        _3243 = (_3404 * _3352.y) + _3311;
                        _3244 = (_3404 * _3352.z) + _3312;
                        _3239 = (_3484 * _3369.x) + _3307;
                        _3240 = (_3484 * _3369.y) + _3308;
                        _3241 = (_3484 * _3369.z) + _3309;
                        if (_3314 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3307 = _3239;
                            _3308 = _3240;
                            _3309 = _3241;
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3244;
                            _3313 = _3314;
                        }
                    }
                    frontier_phi_66_pred = _3244;
                    frontier_phi_66_pred_1 = _3243;
                    frontier_phi_66_pred_2 = _3242;
                    frontier_phi_66_pred_3 = _3241;
                    frontier_phi_66_pred_4 = _3240;
                    frontier_phi_66_pred_5 = _3239;
                }
                _3049 = frontier_phi_66_pred;
                _3047 = frontier_phi_66_pred_1;
                _3045 = frontier_phi_66_pred_2;
                _3043 = frontier_phi_66_pred_3;
                _3041 = frontier_phi_66_pred_4;
                _3039 = frontier_phi_66_pred_5;
                uint _3190 = _3189 + 1u;
                if (_3190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3183 = _3039;
                    _3184 = _3041;
                    _3185 = _3043;
                    _3186 = _3045;
                    _3187 = _3047;
                    _3188 = _3049;
                    _3189 = _3190;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
        }
        uvec4 _3052 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3053 = _3052.z;
        uint _3055 = (_3053 >> 8u) & 15u;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        if (((4294967295u << _3055) & _2958) == 0u)
        {
            _3151 = _3038;
            _3153 = _3040;
            _3155 = _3042;
            _3157 = _3044;
            _3159 = _3046;
            _3161 = _3048;
        }
        else
        {
            float _3176 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
            float _3177 = _3176 * _2036;
            float _3178 = _3176 * _2037;
            float _3179 = _3176 * _2038;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3055 < ((_3053 >> 12u) & 15u))
            {
                float _3152;
                float _3154;
                float _3156;
                float _3158;
                float _3160;
                float _3162;
                float _3290 = _3038;
                float _3291 = _3040;
                float _3292 = _3042;
                float _3293 = _3044;
                float _3294 = _3046;
                float _3295 = _3048;
                uint _3296 = _3055;
                uint _3305;
                bool _3306;
                for (;;)
                {
                    _3305 = texelFetch(g_lightClassification, int((((_2952 << 5u) + (_2938 << 9u)) + (_3296 << 2u)) >> 2u)).x;
                    _3306 = _3305 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3306)
                    {
                        frontier_phi_72_pred = _3295;
                        frontier_phi_72_pred_1 = _3294;
                        frontier_phi_72_pred_2 = _3293;
                        frontier_phi_72_pred_3 = _3292;
                        frontier_phi_72_pred_4 = _3291;
                        frontier_phi_72_pred_5 = _3290;
                    }
                    else
                    {
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3502 = _3290;
                        float _3503 = _3291;
                        float _3504 = _3292;
                        float _3505 = _3293;
                        float _3506 = _3294;
                        float _3507 = _3295;
                        uint _3508 = _3305;
                        uint _3509;
                        vec4 _3534;
                        float _3535;
                        vec4 _3550;
                        vec3 _3562;
                        vec4 _3577;
                        vec4 _3592;
                        float _3638;
                        bool _3639;
                        for (;;)
                        {
                            uint _3519 = ((_3296 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3508));
                            _3509 = (_3508 + 4294967295u) & _3508;
                            uint _3521 = _3519 * 40u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            _3535 = _3534.w;
                            uint _3537 = (_3519 * 40u) + 4u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3519 * 40u) + 8u;
                            _3562 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x));
                            uint _3564 = (_3519 * 40u) + 16u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3519 * 40u) + 20u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3594 = (_3519 * 40u) + 24u;
                            vec4 _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            uint _3613 = (_3519 * 40u) + 28u;
                            vec4 _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            _3638 = fma(_2038, _3626.z, fma(_2037, _3626.y, _3626.x * _2036)) + _3626.w;
                            _3639 = !((fma(_2038, _3607.z, fma(_2037, _3607.y, _3607.x * _2036)) + _3607.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3639)
                            {
                                float _3666 = _3534.x - _2036;
                                float _3667 = _3534.y - _2037;
                                float _3668 = _3534.z - _2038;
                                float _3669 = dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668));
                                float _3672 = inversesqrt(_3669);
                                float _3673 = _3672 * _3666;
                                float _3674 = _3672 * _3667;
                                float _3675 = _3672 * _3668;
                                float _3679 = 1.0 - (_3669 / (_3535 * _3535));
                                float _4842 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3680 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3684 = sqrt(_3669) * _3550.w;
                                float _3686 = 1.39999997615814208984375 / (_3684 + 1.39999997615814208984375);
                                float _3687 = _3686 * _3686;
                                float _3690 = ((1.0 - _3687) * dot(vec3(_3673, _3674, _3675), vec3(_922, _925, _928))) + _3687;
                                float _3693 = _3684 * _3684;
                                float _3697 = (fma(_2038, _3577.z, fma(_2037, _3577.y, _3577.x * _2036)) + _3577.w) / _3638;
                                float _3698 = (fma(_2038, _3592.z, fma(_2037, _3592.y, _3592.x * _2036)) + _3592.w) / _3638;
                                float _3702 = 1.0 - dot(vec2(_3697, _3698), vec2(_3697, _3698));
                                float _4858 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3704 = _3703 * (((isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0))) * _3680) / ((_3693 * 0.699999988079071044921875) + 1.0));
                                float _3716 = exp2(log2(1.0 / ((_3693 * 3.5) + 5.0)) * 0.25);
                                float _3717 = 1.0 - _982;
                                float _3724 = sqrt(1.0 - ((1.0 - (_3717 * _3717)) * (1.0 - (_3716 * _3716))));
                                float _3725 = _3724 * _3724;
                                float _3726 = _3725 * _3725;
                                float _3727 = _3673 - _3177;
                                float _3728 = _3674 - _3178;
                                float _3729 = _3675 - _3179;
                                float _3733 = inversesqrt(dot(vec3(_3727, _3728, _3729), vec3(_3727, _3728, _3729)));
                                float _3737 = dot(vec3(_922, _925, _928), vec3((-0.0) - _3177, (-0.0) - _3178, (-0.0) - _3179));
                                float _4869 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3740 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3741 = dot(vec3(_922, _925, _928), vec3(_3733 * _3727, _3733 * _3728, _3733 * _3729));
                                float _4880 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3744 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3748 = ((_3744 * _3744) * (_3726 + (-1.0))) + 1.0;
                                float _3749 = _3686 * _3725;
                                float _3750 = _3749 * _3749;
                                float _3756 = ((1.0 - _3750) * dot(vec3(_922, _925, _928), vec3(_3673, _3674, _3675))) + _3750;
                                float _4891 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3757 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3758 = 1.0 - _3725;
                                float _3768 = (0.5 / (((_3757 * ((_3740 * _3758) + _3725)) + 9.9999999392252902907785028219223e-09) + (((_3757 * _3758) + _3725) * _3740))) * _3757;
                                float _4902 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3778 = (_3703 * _3680) * (((_3726 * 3.1415927410125732421875) * (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0)))) / ((_3748 * _3748) * ((_3693 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3704 * _3550.y;
                                frontier_phi_78_pred_1 = _3704 * _3550.x;
                                frontier_phi_78_pred_2 = _3778 * _3562.z;
                                frontier_phi_78_pred_3 = _3778 * _3562.y;
                                frontier_phi_78_pred_4 = _3778 * _3562.x;
                                frontier_phi_78_pred_5 = _3704 * _3550.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3786 = frontier_phi_78_pred;
                            _3785 = frontier_phi_78_pred_1;
                            _3784 = frontier_phi_78_pred_2;
                            _3783 = frontier_phi_78_pred_3;
                            _3782 = frontier_phi_78_pred_4;
                            _3787 = frontier_phi_78_pred_5;
                            _3492 = _3785 + _3505;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            _3489 = _3782 + _3502;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            if (_3509 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3509;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3494;
                        frontier_phi_72_pred_1 = _3493;
                        frontier_phi_72_pred_2 = _3492;
                        frontier_phi_72_pred_3 = _3491;
                        frontier_phi_72_pred_4 = _3490;
                        frontier_phi_72_pred_5 = _3489;
                    }
                    _3162 = frontier_phi_72_pred;
                    _3160 = frontier_phi_72_pred_1;
                    _3158 = frontier_phi_72_pred_2;
                    _3156 = frontier_phi_72_pred_3;
                    _3154 = frontier_phi_72_pred_4;
                    _3152 = frontier_phi_72_pred_5;
                    uint _3297 = _3296 + 1u;
                    if (_3297 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3290 = _3152;
                        _3291 = _3154;
                        _3292 = _3156;
                        _3293 = _3158;
                        _3294 = _3160;
                        _3295 = _3162;
                        _3296 = _3297;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3162;
                frontier_phi_60_61_ladder_1 = _3160;
                frontier_phi_60_61_ladder_2 = _3156;
                frontier_phi_60_61_ladder_3 = _3154;
                frontier_phi_60_61_ladder_4 = _3152;
                frontier_phi_60_61_ladder_5 = _3158;
            }
            else
            {
                frontier_phi_60_61_ladder = _3048;
                frontier_phi_60_61_ladder_1 = _3046;
                frontier_phi_60_61_ladder_2 = _3042;
                frontier_phi_60_61_ladder_3 = _3040;
                frontier_phi_60_61_ladder_4 = _3038;
                frontier_phi_60_61_ladder_5 = _3044;
            }
            _3151 = frontier_phi_60_61_ladder_4;
            _3153 = frontier_phi_60_61_ladder_3;
            _3155 = frontier_phi_60_61_ladder_2;
            _3157 = frontier_phi_60_61_ladder_5;
            _3159 = frontier_phi_60_61_ladder_1;
            _3161 = frontier_phi_60_61_ladder;
        }
        float _3166 = isnan(1.0) ? _966 : (isnan(_966) ? 1.0 : min(_966, 1.0));
        _2971 = (_3166 * _3157) + _2502;
        _2973 = (_3166 * _3159) + _2504;
        _2975 = (_3166 * _3161) + _2506;
        _2977 = ((_3151 * 0.039999999105930328369140625) * _3166) + _2825;
        _2979 = ((_3153 * 0.039999999105930328369140625) * _3166) + _2827;
        _2981 = ((_3155 * 0.039999999105930328369140625) * _3166) + _2829;
    }
    else
    {
        _2971 = _2502;
        _2973 = _2504;
        _2975 = _2506;
        _2977 = _2825;
        _2979 = _2827;
        _2981 = _2829;
    }
    float _4918 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _4929 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4940 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    uint _3001 = _255 + 6u;
    float _3009 = _903 / cbSceneParam._m0[86u].x;
    float _3010 = _904 / cbSceneParam._m0[86u].y;
    vec4 _3024 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3009, _3010, (log2((isnan(cbSceneParam._m0[77u].w) ? _837 : (isnan(_837) ? cbSceneParam._m0[77u].w : min(_837, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3026 = _3024.x;
    float _3027 = _3024.y;
    float _3028 = _3024.z;
    float _3029 = _3024.w;
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    if (_837 > cbSceneParam._m0[78u].w)
    {
        float _3063 = isnan(_837) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _837 : min(cbSceneParam._m0[80u].w, _837));
        float _3064 = _3063 / _837;
        float _3075 = _3064 * _888;
        float _3076 = _889 * _3064;
        float _3077 = (-0.0) - _3076;
        float _3079 = _3064 * _890;
        float _3081 = (cbSceneParam._m0[77u].w * _3077) / _3063;
        float _3082 = _3081 + cbSceneParam._m0[79u].w;
        float _3083 = cbSceneParam._m0[79u].w - _3076;
        float _3089 = sqrt(((_3075 * _3075) + (_3076 * _3076)) + (_3079 * _3079));
        float _3092 = (1.0 - (cbSceneParam._m0[77u].w / _3063)) * _3089;
        float _3097 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3099 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3252;
        if (abs((_3077 - _3081) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3252 = ((((_3082 > 0.0) ? exp2(_3097 * _3082) : (2.0 - exp2(_3099 * _3082))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3092;
        }
        else
        {
            float _3212 = 1.0 / cbSceneParam._m0[80u].x;
            float _3213 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : max(_3082, _3083));
            float _3214 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : min(_3082, _3083));
            float _3223 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : min(_3213, 0.0));
            float _3224 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : min(_3214, 0.0));
            _3252 = ((abs(_3089 / _3077) * cbSceneParam._m0[80u].y) * ((((_3223 - _3224) * 2.0) - ((exp2(_3097 * (isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0)))) - exp2(_3097 * (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))))) * _3212)) - ((exp2(_3099 * _3223) - exp2(_3099 * _3224)) * _3212))) + (_3092 * cbSceneParam._m0[80u].z);
        }
        vec4 _3254 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3009, _3010, 1.0), 0.0);
        float _3263 = exp2((_3252 * (-1.44269502162933349609375)) * (1.0 - _3254.w));
        float _3264 = log2(_3263);
        float _3280 = log2(_3029);
        _3101 = (exp2(_3280 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3264 * cbSceneParam._m0[78u].x)) * _3254.x) / cbSceneParam._m0[78u].x)) + _3026;
        _3103 = (exp2(_3280 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3264 * cbSceneParam._m0[78u].y)) * _3254.y) / cbSceneParam._m0[78u].y)) + _3027;
        _3105 = (exp2(_3280 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3264 * cbSceneParam._m0[78u].z)) * _3254.z) / cbSceneParam._m0[78u].z)) + _3028;
        _3107 = _3263 * _3029;
    }
    else
    {
        _3101 = _3026;
        _3103 = _3027;
        _3105 = _3028;
        _3107 = _3029;
    }
    float _3119 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3120 = _3119 == 3.0;
    float _3121 = log2(_3107);
    float _3128 = exp2(_3121 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2971 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _966))) + ((_2977 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1770)) * cbPerFrame._m0[3u].x));
    float _3129 = exp2(_3121 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2973 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _966))) + ((_2979 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1770)) * cbPerFrame._m0[3u].x));
    float _3130 = exp2(_3121 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2975 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _966))) + ((_2981 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1770)) * cbPerFrame._m0[3u].x));
    float _3139 = (_3119 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3139 * (_3120 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3101)));
    SV_Target.y = _3139 * (_3120 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3103)));
    SV_Target.z = _3139 * (_3120 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3105)));
    SV_Target.w = cbInstanceData._m0[_3001].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3001].w;
}


