#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1159;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _294.x * cbMtdParam._m0[11u].x;
    float _300 = _294.y * cbMtdParam._m0[11u].y;
    float _301 = _294.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[24u].z) + _388) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3466 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _419 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _270.x) * ((_406 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299);
    float _422 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _270.y) * ((_406 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300);
    float _425 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _270.z) * ((_406 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301);
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _462 = _460.x;
    float _463 = _460.y;
    float _464 = _460.z;
    float _473 = ((_443.z - _464) * _406) + _464;
    float _476 = ((((_443.x - _462) * _406) + _462) * 2.0) + (-1.0);
    float _478 = ((((_443.y - _463) * _406) + _463) * 2.0) + (-1.0);
    float _479 = dot(vec2(_476, _478), vec2(_476, _478));
    float _3477 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _484 = sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _512 = (((_500.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _476;
    float _513 = (((_500.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _478;
    float _516 = fma(_484, _218, fma(_513, _225, _512 * _211));
    float _519 = fma(_484, _219, fma(_513, _226, _512 * _212));
    float _522 = fma(_484, _220, fma(_513, _227, _512 * _213));
    float _526 = inversesqrt(dot(vec3(_516, _519, _522), vec3(_516, _519, _522)));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _555 = _553.x;
    float _556 = 1.0 - _555;
    float _562 = (cbMtdParam._m0[19u].x + dot(vec4(_526 * _516, _526 * _519, _526 * _522, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_555 - _556) * cbMtdParam._m0[24u].w) + _556) * cbMtdParam._m0[21u].z);
    float _3488 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _570 = (_563 * (cbMtdParam._m0[17u].x - _419)) + _419;
    float _571 = (_563 * (cbMtdParam._m0[17u].y - _422)) + _422;
    float _572 = (_563 * (cbMtdParam._m0[17u].z - _425)) + _425;
    float _576 = (cbMtdParam._m0[19u].w * (_500.z - _473)) + _473;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _596 = (_589.x * 2.0) + (-1.0);
    float _597 = (_589.y * 2.0) + (-1.0);
    float _598 = dot(vec2(_596, _597), vec2(_596, _597));
    float _3499 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _606 = ((_589.z - _576) * _563) + _576;
    float _616 = ((sqrt(1.0 - (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) - _484) * _563) + _484;
    float _619 = (((_596 - _512) * _563) + _512) + (cbMtdParam._m0[21u].x * _512);
    float _620 = (((_597 - _513) * _563) + _513) + (cbMtdParam._m0[21u].x * _513);
    float _624 = cbMtdParam._m0[22u].x + _500.w;
    float _627 = fma(_616, _218, fma(_620, _225, _619 * _211));
    float _630 = fma(_616, _219, fma(_620, _226, _619 * _212));
    float _633 = fma(_616, _220, fma(_620, _227, _619 * _213));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    float _638 = _637 * _627;
    float _639 = _637 * _630;
    float _640 = _637 * _633;
    float _3510 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _641 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3532 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _3543 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3554 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _659 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _710 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _700);
    float _711 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _700);
    float _712 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _700);
    float _716 = inversesqrt(dot(vec3(_710, _711, _712), vec3(_710, _711, _712)));
    float _717 = _710 * _716;
    float _718 = _711 * _716;
    float _719 = _712 * _716;
    float _725 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _726 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _744 = fma(_640, cbSceneParam._m0[5u].z, fma(_639, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _638));
    float _747 = fma(_640, cbSceneParam._m0[6u].z, fma(_639, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _638));
    float _750 = fma(_640, cbSceneParam._m0[7u].z, fma(_639, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _638));
    uint _764 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _770 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_764].x;
    float _771 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_764].y;
    float _772 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_764].z;
    float _3565 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    vec4 _784 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _725, cbSceneParam._m0[86u].y * _726));
    float _788 = ((isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * TEXCOORD_5.w) * _784.x;
    float _789 = dot(vec3(_638, _639, _640), vec3(_717, _718, _719));
    float _792 = _789 * 2.0;
    float _796 = (_792 * _638) - _717;
    float _797 = (_792 * _639) - _718;
    float _798 = (_792 * _640) - _719;
    float _802 = abs(dot(vec3(_717, _718, _719), vec3(_638, _639, _640)));
    float _3598 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _804 = sqrt(_641);
    float _817 = exp2((_804 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_804 * 3.0));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1158;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _883 = fma(_857, cbModelParam._m0[26u].z, fma(_853, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849));
        float _887 = fma(_857, cbModelParam._m0[27u].z, fma(_853, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849));
        float _891 = fma(_857, cbModelParam._m0[28u].z, fma(_853, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849));
        float _916 = _849 + _638;
        float _917 = _853 + _639;
        float _918 = _857 + _640;
        float _928 = fma(_918, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916)) - _883;
        float _929 = fma(_918, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916)) - _887;
        float _930 = fma(_918, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916)) - _891;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_883 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_887 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[34u].z) + ((((((_891 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _986 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_952.x + (-0.5));
        float _988 = _986 * (_952.y + (-0.5));
        float _989 = _986 * (_952.z + (-0.5));
        float _996 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_959.x + (-0.5));
        float _998 = _996 * (_959.y + (-0.5));
        float _999 = _996 * (_959.z + (-0.5));
        float _1006 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_966.x + (-0.5));
        float _1008 = _1006 * (_966.y + (-0.5));
        float _1009 = _1006 * (_966.z + (-0.5));
        float _1016 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_973.x + (-0.5));
        float _1018 = _1016 * (_973.y + (-0.5));
        float _1019 = _1016 * (_973.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1040 = (dot(vec3(_638, _639, _640), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1050 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3646 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1052 + 1.0))) + _1057) * _1020;
        float _1067 = _988 * 0.5;
        float _1068 = _998 * 0.5;
        float _1069 = _1008 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_638, _639, _640), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3679 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1094 + 1.0))) + _1099) * _1021;
        float _1109 = _989 * 0.5;
        float _1110 = _999 * 0.5;
        float _1111 = _1009 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_638, _639, _640), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3712 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1136 + 1.0))) + _1141) * _1022;
        _1158 = _989;
        _1160 = _988;
        _1161 = _987;
        _1162 = _999;
        _1163 = _998;
        _1164 = _997;
        _1165 = _1009;
        _1166 = _1008;
        _1167 = _1007;
        _1168 = _1022;
        _1169 = _1021;
        _1170 = _1020;
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _1159;
        _1160 = _1159;
        _1161 = _1159;
        _1162 = _1159;
        _1163 = _1159;
        _1164 = _1159;
        _1165 = _1159;
        _1166 = _1159;
        _1167 = _1159;
        _1168 = _1159;
        _1169 = _1159;
        _1170 = _1159;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1198 = fma(_857, cbModelParam._m0[30u].z, fma(_853, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _849));
        float _1202 = fma(_857, cbModelParam._m0[31u].z, fma(_853, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _849));
        float _1206 = fma(_857, cbModelParam._m0[32u].z, fma(_853, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _849));
        float _1229 = _849 + _638;
        float _1230 = _853 + _639;
        float _1231 = _857 + _640;
        float _1241 = fma(_1231, cbModelParam._m0[30u].z, fma(_1230, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1229)) - _1198;
        float _1242 = fma(_1231, cbModelParam._m0[31u].z, fma(_1230, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1229)) - _1202;
        float _1243 = fma(_1231, cbModelParam._m0[32u].z, fma(_1230, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1229)) - _1206;
        float _1247 = inversesqrt(dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243)));
        float _1260 = ((_1247 * _1241) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1198 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1247 * _1242) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1202 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1247 * _1243) / cbModelParam._m0[35u].z) + ((((((_1206 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        float _1297 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1264.x + (-0.5));
        float _1299 = _1297 * (_1264.y + (-0.5));
        float _1300 = _1297 * (_1264.z + (-0.5));
        float _1307 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1271.x + (-0.5));
        float _1309 = _1307 * (_1271.y + (-0.5));
        float _1310 = _1307 * (_1271.z + (-0.5));
        float _1317 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1278.x + (-0.5));
        float _1319 = _1317 * (_1278.y + (-0.5));
        float _1320 = _1317 * (_1278.z + (-0.5));
        float _1327 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1285.x + (-0.5));
        float _1329 = _1327 * (_1285.y + (-0.5));
        float _1330 = _1327 * (_1285.z + (-0.5));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = _1298 * 0.5;
        float _1335 = _1308 * 0.5;
        float _1336 = _1318 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_638, _639, _640), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3775 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1361 + 1.0))) + _1366) * _1331;
        float _1376 = _1299 * 0.5;
        float _1377 = _1309 * 0.5;
        float _1378 = _1319 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_638, _639, _640), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _3808 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1403 + 1.0))) + _1408) * _1332;
        float _1418 = _1300 * 0.5;
        float _1419 = _1310 * 0.5;
        float _1420 = _1320 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_638, _639, _640), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3841 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1445 + 1.0))) + _1450) * _1333;
        _1467 = _1300;
        _1468 = _1299;
        _1469 = _1298;
        _1470 = _1310;
        _1471 = _1309;
        _1472 = _1308;
        _1473 = _1320;
        _1474 = _1319;
        _1475 = _1318;
        _1476 = _1333;
        _1477 = _1332;
        _1478 = _1331;
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
    }
    else
    {
        _1467 = _1159;
        _1468 = _1159;
        _1469 = _1159;
        _1470 = _1159;
        _1471 = _1159;
        _1472 = _1159;
        _1473 = _1159;
        _1474 = _1159;
        _1475 = _1159;
        _1476 = _1159;
        _1477 = _1159;
        _1478 = _1159;
        _1479 = 0.0;
        _1480 = 0.0;
        _1481 = 0.0;
    }
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1171)) + _1171;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1172)) + _1172;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1173)) + _1173;
    float _1514 = fma(_1493, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1493, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1493, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1491));
    float _1535 = _796 * 0.5;
    float _1536 = _797 * 0.5;
    float _1537 = _798 * 0.5;
    float _1538 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1541 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1544 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1578;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1551 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1158, _1162, _1165, _1168));
        float _1555 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1559 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1566 = dot(vec4(cbModelParam._m0[39u]), vec4(_1535, _1536, _1537, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1566) ? 0.0 : (isnan(0.0) ? _1566 : max(0.0, _1566))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1589;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1580 = dot(vec4(cbModelParam._m0[40u]), vec4(_1535, _1536, _1537, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1593 = (_1589 * cbModelParam._m0[1u].x) + (_1578 * (1.0 - cbModelParam._m0[1u].x));
    float _1603 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _641);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1603 : min(cbModelParam._m0[25u].z, _1603));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1652 = fma(_857, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _849)) + cbModelParam._m0[13u].w;
        float _1656 = fma(_857, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _849)) + cbModelParam._m0[14u].w;
        float _1660 = fma(_857, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _849)) + cbModelParam._m0[15u].w;
        float _1663 = fma(_798, cbModelParam._m0[13u].z, fma(_797, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _796));
        float _1666 = fma(_798, cbModelParam._m0[14u].z, fma(_797, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _796));
        float _1669 = fma(_798, cbModelParam._m0[15u].z, fma(_797, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _796));
        float _1697;
        if (_1663 > 0.0)
        {
            _1697 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1697 = frontier_phi_14_12_ladder;
        }
        float _1898;
        if (_1666 > 0.0)
        {
            _1898 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1898 = frontier_phi_23_19_ladder;
        }
        float _2141;
        if (_1669 > 0.0)
        {
            _2141 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2141 = frontier_phi_35_30_ladder;
        }
        float _2143 = isnan(_1898) ? _1697 : (isnan(_1697) ? _1898 : min(_1697, _1898));
        float _2144 = isnan(_2141) ? _2143 : (isnan(_2143) ? _2141 : min(_2143, _2141));
        float _2148 = (_2144 * _1663) + _1652;
        float _2149 = (_2144 * _1666) + _1656;
        float _2150 = (_2144 * _1669) + _1660;
        float _2151 = _2144 * 9.9999997473787516355514526367188e-05;
        float _2153 = (-1.0) - _2151;
        float _2155 = _2151 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2150 > _2155) || ((_2150 < _2153) || ((_2149 > _2155) || ((_2149 < _2153) || ((_2148 < _2153) || (_2148 > _2155))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2150, cbModelParam._m0[9u].z, fma(_2149, cbModelParam._m0[9u].y, _2148 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2150, cbModelParam._m0[10u].z, fma(_2149, cbModelParam._m0[10u].y, _2148 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2150, cbModelParam._m0[11u].z, fma(_2149, cbModelParam._m0[11u].y, _2148 * cbModelParam._m0[11u].x))), _1604);
            frontier_phi_13_35_ladder = _2274.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2274.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2274.x * cbModelParam._m0[1u].y;
        }
        _1685 = frontier_phi_13_35_ladder_2;
        _1687 = frontier_phi_13_35_ladder_1;
        _1689 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1673 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_796, _797, _798), _1604);
        _1685 = _1673.x * cbModelParam._m0[1u].y;
        _1687 = _1673.y * cbModelParam._m0[1u].y;
        _1689 = _1673.z * cbModelParam._m0[1u].y;
    }
    float _1693 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _641);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1693 : min(cbModelParam._m0[25u].w, _1693));
    float _1784;
    float _1786;
    float _1788;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1748 = fma(_857, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _849)) + cbModelParam._m0[21u].w;
        float _1752 = fma(_857, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _849)) + cbModelParam._m0[22u].w;
        float _1756 = fma(_857, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _849)) + cbModelParam._m0[23u].w;
        float _1759 = fma(_798, cbModelParam._m0[21u].z, fma(_797, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _796));
        float _1762 = fma(_798, cbModelParam._m0[22u].z, fma(_797, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _796));
        float _1765 = fma(_798, cbModelParam._m0[23u].z, fma(_797, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _796));
        float _1903;
        if (_1759 > 0.0)
        {
            _1903 = abs((1.0 - _1748) / _1759);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1748 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1903 = frontier_phi_25_21_ladder;
        }
        float _2168;
        if (_1762 > 0.0)
        {
            _2168 = abs((1.0 - _1752) / _1762);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1752 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2168 = frontier_phi_37_32_ladder;
        }
        float _2373;
        if (_1765 > 0.0)
        {
            _2373 = abs((1.0 - _1756) / _1765);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1756 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2373 = frontier_phi_46_43_ladder;
        }
        float _2375 = isnan(_2168) ? _1903 : (isnan(_1903) ? _2168 : min(_1903, _2168));
        float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
        float _2380 = (_2376 * _1759) + _1748;
        float _2381 = (_2376 * _1762) + _1752;
        float _2382 = (_2376 * _1765) + _1756;
        float _2383 = _2376 * 9.9999997473787516355514526367188e-05;
        float _2384 = (-1.0) - _2383;
        float _2386 = _2383 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2382 > _2386) || ((_2382 < _2384) || ((_2381 > _2386) || ((_2381 < _2384) || ((_2380 < _2384) || (_2380 > _2386))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2581 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2382, cbModelParam._m0[17u].z, fma(_2381, cbModelParam._m0[17u].y, _2380 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2382, cbModelParam._m0[18u].z, fma(_2381, cbModelParam._m0[18u].y, _2380 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2382, cbModelParam._m0[19u].z, fma(_2381, cbModelParam._m0[19u].y, _2380 * cbModelParam._m0[19u].x))), _1694);
            frontier_phi_22_46_ladder = _2581.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2581.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2581.x * cbModelParam._m0[1u].z;
        }
        _1784 = frontier_phi_22_46_ladder_2;
        _1786 = frontier_phi_22_46_ladder_1;
        _1788 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_796, _797, _798), _1694);
        _1784 = _1768.x * cbModelParam._m0[1u].z;
        _1786 = _1768.y * cbModelParam._m0[1u].z;
        _1788 = _1768.z * cbModelParam._m0[1u].z;
    }
    float _1800 = ((((1.0 - _817) * ((_804 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_817 * _804)) * _788;
    float _1801 = _1800 * ((cbModelParam._m0[1u].w * (_1784 - _1685)) + _1685);
    float _1802 = _1800 * ((cbModelParam._m0[1u].w * (_1786 - _1687)) + _1687);
    float _1803 = _1800 * ((cbModelParam._m0[1u].w * (_1788 - _1689)) + _1689);
    float _1806 = fma(_1803, cbSceneParam._m0[89u].z, fma(_1802, cbSceneParam._m0[89u].y, _1801 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1803, cbSceneParam._m0[90u].z, fma(_1802, cbSceneParam._m0[90u].y, _1801 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1803, cbSceneParam._m0[91u].z, fma(_1802, cbSceneParam._m0[91u].y, _1801 * cbSceneParam._m0[91u].x));
    uvec4 _1822 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1824 = _1822.x * 14u;
    uint _1825 = _1824 + 13u;
    float _1832 = _788 + (-1.0);
    float _1837 = (cbLight._m0[_1825].x * _1832) + 1.0;
    float _1838 = (cbLight._m0[_1825].y * _1832) + 1.0;
    float _1839 = (cbLight._m0[_1825].z * _1832) + 1.0;
    float _1840 = (cbLight._m0[_1825].w * _1832) + 1.0;
    uint _1841 = _1824 + 5u;
    float _1847 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
    uint _1851 = _1824 + 4u;
    float _1857 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
    uint _1861 = _1824 | 1u;
    float _1872 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_638, _639, _640));
    float _1875 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_638, _639, _640));
    float _3977 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _3988 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1880 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _1882 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.3183098733425140380859375;
    float _1889 = ((cbLight._m0[_1841].x * _1847) * _1882) + ((cbLight._m0[_1851].x * _1857) * _1880);
    float _1890 = ((_1847 * cbLight._m0[_1841].y) * _1882) + ((_1857 * cbLight._m0[_1851].y) * _1880);
    float _1891 = ((_1847 * cbLight._m0[_1841].z) * _1882) + ((_1857 * cbLight._m0[_1851].z) * _1880);
    uvec4 _1895 = floatBitsToUint(cbLight._m0[_1824 + 12u]);
    bool _1897 = _1895.x == 0u;
    float _1908;
    float _1910;
    float _1912;
    if (_1897)
    {
        _1908 = _1889;
        _1910 = _1890;
        _1912 = _1891;
    }
    else
    {
        uint _1916 = _1824 + 6u;
        float _1932 = (dot(vec3(cbLight._m0[_1824 + 2u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _1933 = _1932 * _1932;
        float _3999 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1935 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _1908 = (((cbLight._m0[_1916].x * 0.3183098733425140380859375) * _1934) * _1935) + _1889;
        _1910 = (((cbLight._m0[_1916].y * 0.3183098733425140380859375) * _1934) * _1935) + _1890;
        _1912 = (((cbLight._m0[_1916].z * 0.3183098733425140380859375) * _1934) * _1935) + _1891;
    }
    bool _1915 = _1895.y == 0u;
    float _1953;
    float _1955;
    float _1957;
    if (_1915)
    {
        _1953 = _1908;
        _1955 = _1910;
        _1957 = _1912;
    }
    else
    {
        uint _2112 = _1824 + 7u;
        float _2128 = (dot(vec3(cbLight._m0[_1824 + 3u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2129 = _2128 * _2128;
        float _4015 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2131 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _1953 = (((cbLight._m0[_2112].x * 0.3183098733425140380859375) * _2130) * _2131) + _1908;
        _1955 = (((cbLight._m0[_2112].y * 0.3183098733425140380859375) * _2130) * _2131) + _1910;
        _1957 = (((cbLight._m0[_2112].z * 0.3183098733425140380859375) * _2130) * _2131) + _1912;
    }
    uint _1960 = _1824 + 8u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _641) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1824].x + _717;
    float _1976 = cbLight._m0[_1824].y + _718;
    float _1977 = cbLight._m0[_1824].z + _719;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_1824].xyz));
    float _4031 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _1989 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1990 = dot(vec3(_638, _639, _640), vec3(_1982, _1983, _1984));
    float _4053 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1994 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_1982, _1983, _1984));
    float _4064 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1998 = _1974 * _1974;
    float _2002 = ((_1993 * _1993) * (_1998 + (-1.0))) + 1.0;
    float _2013 = (exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2014 = 1.0 - _1974;
    float _2025 = (0.5 / (((_1989 * ((_1988 * _2014) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2014) + _1974) * _1988))) * _1988;
    float _4075 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2027 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1998 / ((_2002 * _2002) * 3.141590118408203125));
    uint _2038 = _1824 + 9u;
    float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1861].w)) * _641) * 0.949999988079071044921875);
    float _2050 = _2049 * _2049;
    float _2051 = cbLight._m0[_1861].x + _717;
    float _2052 = cbLight._m0[_1861].y + _718;
    float _2053 = cbLight._m0[_1861].z + _719;
    float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
    float _2058 = _2057 * _2051;
    float _2059 = _2057 * _2052;
    float _2060 = _2057 * _2053;
    float _2061 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_1861].xyz));
    float _4086 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2065 = dot(vec3(_638, _639, _640), vec3(_2058, _2059, _2060));
    float _4097 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2069 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_2058, _2059, _2060));
    float _4108 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2073 = _2050 * _2050;
    float _2077 = ((_2068 * _2068) * (_2073 + (-1.0))) + 1.0;
    float _2086 = (exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2087 = 1.0 - _2050;
    float _2097 = (0.5 / (((_1989 * ((_2064 * _2087) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2087) + _2050) * _2064))) * _2064;
    float _4119 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2099 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2073 / ((_2077 * _2077) * 3.141590118408203125));
    float _2109 = (((_2086 * cbLight._m0[_2038].x) * _2099) * _1847) + (((_2013 * cbLight._m0[_1960].x) * _2027) * _1857);
    float _2110 = (((_2086 * cbLight._m0[_2038].y) * _2099) * _1847) + (((_2013 * cbLight._m0[_1960].y) * _2027) * _1857);
    float _2111 = (((_2086 * cbLight._m0[_2038].z) * _2099) * _1847) + (((_2013 * cbLight._m0[_1960].z) * _2027) * _1857);
    float _2173;
    float _2175;
    float _2177;
    if (_1897)
    {
        _2173 = _2109;
        _2175 = _2110;
        _2177 = _2111;
    }
    else
    {
        uint _2179 = _1824 + 2u;
        uint _2183 = _1824 + 10u;
        float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _641) * 0.949999988079071044921875);
        float _2198 = _2197 * _2197;
        float _2199 = cbLight._m0[_2179].x + _717;
        float _2200 = cbLight._m0[_2179].y + _718;
        float _2201 = cbLight._m0[_2179].z + _719;
        float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
        float _2206 = _2205 * _2199;
        float _2207 = _2205 * _2200;
        float _2208 = _2205 * _2201;
        float _2209 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2179].xyz));
        float _4130 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2213 = dot(vec3(_638, _639, _640), vec3(_2206, _2207, _2208));
        float _4141 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2216 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2217 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2206, _2207, _2208));
        float _4152 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2221 = _2198 * _2198;
        float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
        float _2234 = (exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2235 = 1.0 - _2198;
        float _2245 = (0.5 / (((_1989 * ((_2212 * _2235) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2235) + _2198) * _2212))) * _2212;
        float _4163 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2247 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
        float _2248 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _2173 = (((_2234 * cbLight._m0[_2183].x) * _2247) * _2248) + _2109;
        _2175 = (((_2234 * cbLight._m0[_2183].y) * _2247) * _2248) + _2110;
        _2177 = (((_2234 * cbLight._m0[_2183].z) * _2247) * _2248) + _2111;
    }
    float _2283;
    float _2285;
    float _2287;
    if (_1915)
    {
        _2283 = _2173;
        _2285 = _2175;
        _2287 = _2177;
    }
    else
    {
        uint _2294 = _1824 + 3u;
        uint _2298 = _1824 + 11u;
        float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _641) * 0.949999988079071044921875);
        float _2313 = _2312 * _2312;
        float _2314 = cbLight._m0[_2294].x + _717;
        float _2315 = cbLight._m0[_2294].y + _718;
        float _2316 = cbLight._m0[_2294].z + _719;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2321 = _2320 * _2314;
        float _2322 = _2320 * _2315;
        float _2323 = _2320 * _2316;
        float _2324 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2294].xyz));
        float _4179 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2328 = dot(vec3(_638, _639, _640), vec3(_2321, _2322, _2323));
        float _4190 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2332 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2321, _2322, _2323));
        float _4201 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2336 = _2313 * _2313;
        float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
        float _2349 = (exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2350 = 1.0 - _2313;
        float _2360 = (0.5 / (((_1989 * ((_2327 * _2350) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2350) + _2313) * _2327))) * _2327;
        float _4212 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2362 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
        float _2363 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _2283 = (((_2349 * cbLight._m0[_2298].x) * _2362) * _2363) + _2173;
        _2285 = (((_2349 * cbLight._m0[_2298].y) * _2362) * _2363) + _2175;
        _2287 = (((_2349 * cbLight._m0[_2298].z) * _2362) * _2363) + _2177;
    }
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    if (_1822.y == 0u)
    {
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2438;
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2438;
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2438;
        uvec4 _2453 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2454 = _2453.x;
        uint _2465 = uint((float(_2453.y) * floor(float(uint(cbSceneParam._m0[85u].y * _726) / _2454))) + floor(float(uint(cbSceneParam._m0[85u].x * _725) / _2454)));
        float _2475 = (log2(_2441 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2476 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        uint _2479 = uint(isnan(14.0) ? _2476 : (isnan(_2476) ? 14.0 : min(_2476, 14.0)));
        uvec4 _2484 = texelFetch(g_lightClusterGridBuffer, int(((_2479 << 2u) + (_2465 << 6u)) >> 2u));
        uint _2485 = _2484.x;
        uint _2486 = _2453.z;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        if (((((1u << ((_2486 >> 4u) & 15u)) + 4294967295u) & _2485) == 0u) || ((_2486 & 240u) == 0u))
        {
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
        }
        else
        {
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            uint _2737 = 0u;
            uint _2746;
            bool _2747;
            for (;;)
            {
                _2746 = texelFetch(g_lightClassification, int((((_2479 << 5u) + (_2465 << 9u)) + (_2737 << 2u)) >> 2u)).x;
                _2747 = _2746 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2747)
                {
                    frontier_phi_61_pred = _2731;
                    frontier_phi_61_pred_1 = _2736;
                    frontier_phi_61_pred_2 = _2735;
                    frontier_phi_61_pred_3 = _2734;
                    frontier_phi_61_pred_4 = _2733;
                    frontier_phi_61_pred_5 = _2732;
                }
                else
                {
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    uint _2861;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2746;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    for (;;)
                    {
                        uint _2865 = uint(findLSB(_2861)) + (_2737 << 5u);
                        uint _2862 = (_2861 + 4294967295u) & _2861;
                        uint _2867 = _2865 * 48u;
                        vec4 _2881 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 3u)).x));
                        uint _2887 = (_2865 * 48u) + 4u;
                        vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2887)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 3u)).x));
                        uint _2906 = (_2865 * 48u) + 8u;
                        vec3 _2917 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x));
                        float _2921 = _2881.x - _2439;
                        float _2922 = _2881.y - _2440;
                        float _2923 = _2881.z - _2441;
                        float _2924 = dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923));
                        float _2927 = inversesqrt(_2924);
                        float _2928 = _2927 * _2921;
                        float _2929 = _2927 * _2922;
                        float _2930 = _2927 * _2923;
                        float _2931 = dot(vec3(_744, _747, _750), vec3(_2928, _2929, _2930));
                        float _2936 = 1.0 - (_2924 * _2881.w);
                        float _4238 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2937 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2938 = sqrt(_2924) * _2900.w;
                        float _2941 = 1.39999997615814208984375 / (_2938 + 1.39999997615814208984375);
                        float _2942 = _2941 * _2941;
                        float _2945 = ((1.0 - _2942) * _2931) + _2942;
                        float _2948 = _2938 * _2938;
                        float _2952 = ((isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))) * _2937) / ((_2948 * 0.699999988079071044921875) + 1.0);
                        float _2956 = (-0.0) - _2439;
                        float _2957 = (-0.0) - _2440;
                        float _2958 = (-0.0) - _2441;
                        float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
                        float _2963 = _2962 * _2956;
                        float _2964 = _2962 * _2957;
                        float _2965 = _2962 * _2958;
                        float _2973 = exp2(log2(1.0 / ((_2948 * 3.5) + 5.0)) * 0.25);
                        float _2974 = 1.0 - _804;
                        float _2981 = sqrt(1.0 - ((1.0 - (_2974 * _2974)) * (1.0 - (_2973 * _2973))));
                        float _2982 = _2981 * _2981;
                        float _2983 = _2982 * _2982;
                        float _2984 = _2963 + _2928;
                        float _2985 = _2964 + _2929;
                        float _2986 = _2965 + _2930;
                        float _2990 = inversesqrt(dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986)));
                        float _2994 = dot(vec3(_744, _747, _750), vec3(_2963, _2964, _2965));
                        float _4254 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2997 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2998 = dot(vec3(_744, _747, _750), vec3(_2990 * _2984, _2990 * _2985, _2990 * _2986));
                        float _4265 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3001 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _3005 = ((_3001 * _3001) * (_2983 + (-1.0))) + 1.0;
                        float _3006 = _2941 * _2982;
                        float _3007 = _3006 * _3006;
                        float _3010 = ((1.0 - _3007) * _2931) + _3007;
                        float _4276 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3011 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _3012 = 1.0 - _2982;
                        float _3022 = (0.5 / (((_3011 * ((_2997 * _3012) + _2982)) + 9.9999999392252902907785028219223e-09) + (((_3011 * _3012) + _2982) * _2997))) * _3011;
                        float _4287 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3033 = (((_2983 * 3.1415927410125732421875) * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) / ((_3005 * _3005) * ((_2948 * 2.1991131305694580078125) + 3.141590118408203125))) * _2937;
                        _2790 = (_2952 * _2900.x) + _2858;
                        _2791 = (_2952 * _2900.y) + _2859;
                        _2792 = (_2952 * _2900.z) + _2860;
                        _2787 = (_3033 * _2917.x) + _2855;
                        _2788 = (_3033 * _2917.y) + _2856;
                        _2789 = (_3033 * _2917.z) + _2857;
                        if (_2862 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2862;
                        }
                    }
                    frontier_phi_61_pred = _2787;
                    frontier_phi_61_pred_1 = _2792;
                    frontier_phi_61_pred_2 = _2791;
                    frontier_phi_61_pred_3 = _2790;
                    frontier_phi_61_pred_4 = _2789;
                    frontier_phi_61_pred_5 = _2788;
                }
                _2587 = frontier_phi_61_pred;
                _2597 = frontier_phi_61_pred_1;
                _2595 = frontier_phi_61_pred_2;
                _2593 = frontier_phi_61_pred_3;
                _2591 = frontier_phi_61_pred_4;
                _2589 = frontier_phi_61_pred_5;
                uint _2738 = _2737 + 1u;
                if (_2738 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2731 = _2587;
                    _2732 = _2589;
                    _2733 = _2591;
                    _2734 = _2593;
                    _2735 = _2595;
                    _2736 = _2597;
                    _2737 = _2738;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
        }
        uvec4 _2600 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2601 = _2600.z;
        uint _2603 = (_2601 >> 8u) & 15u;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        if (((4294967295u << _2603) & _2485) == 0u)
        {
            _2699 = _2586;
            _2701 = _2588;
            _2703 = _2590;
            _2705 = _2592;
            _2707 = _2594;
            _2709 = _2596;
        }
        else
        {
            float _2724 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
            float _2725 = _2724 * _2439;
            float _2726 = _2724 * _2440;
            float _2727 = _2724 * _2441;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2603 < ((_2601 >> 12u) & 15u))
            {
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2838 = _2586;
                float _2839 = _2588;
                float _2840 = _2590;
                float _2841 = _2592;
                float _2842 = _2594;
                float _2843 = _2596;
                uint _2844 = _2603;
                uint _2853;
                bool _2854;
                for (;;)
                {
                    _2853 = texelFetch(g_lightClassification, int((((_2479 << 5u) + (_2465 << 9u)) + (_2844 << 2u)) >> 2u)).x;
                    _2854 = _2853 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2854)
                    {
                        frontier_phi_67_pred = _2841;
                        frontier_phi_67_pred_1 = _2842;
                        frontier_phi_67_pred_2 = _2843;
                        frontier_phi_67_pred_3 = _2840;
                        frontier_phi_67_pred_4 = _2839;
                        frontier_phi_67_pred_5 = _2838;
                    }
                    else
                    {
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3051 = _2838;
                        float _3052 = _2839;
                        float _3053 = _2840;
                        float _3054 = _2841;
                        float _3055 = _2842;
                        float _3056 = _2843;
                        uint _3057 = _2853;
                        uint _3058;
                        vec4 _3083;
                        float _3084;
                        vec4 _3099;
                        vec3 _3111;
                        vec4 _3126;
                        vec4 _3142;
                        float _3188;
                        bool _3189;
                        for (;;)
                        {
                            uint _3068 = ((_2844 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3057));
                            _3058 = (_3057 + 4294967295u) & _3057;
                            uint _3070 = _3068 * 40u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            _3084 = _3083.w;
                            uint _3086 = (_3068 * 40u) + 4u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3101 = (_3068 * 40u) + 8u;
                            _3111 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x));
                            uint _3113 = (_3068 * 40u) + 16u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3129 = (_3068 * 40u) + 20u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3144 = (_3068 * 40u) + 24u;
                            vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3163 = (_3068 * 40u) + 28u;
                            vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            _3188 = fma(_2441, _3176.z, fma(_2440, _3176.y, _3176.x * _2439)) + _3176.w;
                            _3189 = !((fma(_2441, _3157.z, fma(_2440, _3157.y, _3157.x * _2439)) + _3157.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3189)
                            {
                                float _3216 = _3083.x - _2439;
                                float _3217 = _3083.y - _2440;
                                float _3218 = _3083.z - _2441;
                                float _3219 = dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218));
                                float _3222 = inversesqrt(_3219);
                                float _3223 = _3222 * _3216;
                                float _3224 = _3222 * _3217;
                                float _3225 = _3222 * _3218;
                                float _3229 = 1.0 - (_3219 / (_3084 * _3084));
                                float _4298 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3234 = sqrt(_3219) * _3099.w;
                                float _3236 = 1.39999997615814208984375 / (_3234 + 1.39999997615814208984375);
                                float _3237 = _3236 * _3236;
                                float _3240 = ((1.0 - _3237) * dot(vec3(_3223, _3224, _3225), vec3(_744, _747, _750))) + _3237;
                                float _3243 = _3234 * _3234;
                                float _3247 = (fma(_2441, _3126.z, fma(_2440, _3126.y, _3126.x * _2439)) + _3126.w) / _3188;
                                float _3248 = (fma(_2441, _3142.z, fma(_2440, _3142.y, _3142.x * _2439)) + _3142.w) / _3188;
                                float _3252 = 1.0 - dot(vec2(_3247, _3248), vec2(_3247, _3248));
                                float _4314 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3254 = _3253 * (((isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))) * _3230) / ((_3243 * 0.699999988079071044921875) + 1.0));
                                float _3266 = exp2(log2(1.0 / ((_3243 * 3.5) + 5.0)) * 0.25);
                                float _3267 = 1.0 - _804;
                                float _3274 = sqrt(1.0 - ((1.0 - (_3267 * _3267)) * (1.0 - (_3266 * _3266))));
                                float _3275 = _3274 * _3274;
                                float _3276 = _3275 * _3275;
                                float _3277 = _3223 - _2725;
                                float _3278 = _3224 - _2726;
                                float _3279 = _3225 - _2727;
                                float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                                float _3287 = dot(vec3(_744, _747, _750), vec3((-0.0) - _2725, (-0.0) - _2726, (-0.0) - _2727));
                                float _4325 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3290 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3291 = dot(vec3(_744, _747, _750), vec3(_3283 * _3277, _3283 * _3278, _3283 * _3279));
                                float _4336 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3294 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3298 = ((_3294 * _3294) * (_3276 + (-1.0))) + 1.0;
                                float _3299 = _3236 * _3275;
                                float _3300 = _3299 * _3299;
                                float _3306 = ((1.0 - _3300) * dot(vec3(_744, _747, _750), vec3(_3223, _3224, _3225))) + _3300;
                                float _4347 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3308 = 1.0 - _3275;
                                float _3318 = (0.5 / (((_3307 * ((_3290 * _3308) + _3275)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3275) * _3290))) * _3307;
                                float _4358 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3328 = (_3253 * _3230) * (((_3276 * 3.1415927410125732421875) * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) / ((_3298 * _3298) * ((_3243 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3328 * _3111.x;
                                frontier_phi_73_pred_1 = _3328 * _3111.y;
                                frontier_phi_73_pred_2 = _3254 * _3099.z;
                                frontier_phi_73_pred_3 = _3254 * _3099.y;
                                frontier_phi_73_pred_4 = _3254 * _3099.x;
                                frontier_phi_73_pred_5 = _3328 * _3111.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3332 = frontier_phi_73_pred;
                            _3333 = frontier_phi_73_pred_1;
                            _3337 = frontier_phi_73_pred_2;
                            _3336 = frontier_phi_73_pred_3;
                            _3335 = frontier_phi_73_pred_4;
                            _3334 = frontier_phi_73_pred_5;
                            _3041 = _3335 + _3054;
                            _3042 = _3336 + _3055;
                            _3043 = _3337 + _3056;
                            _3038 = _3332 + _3051;
                            _3039 = _3333 + _3052;
                            _3040 = _3334 + _3053;
                            if (_3058 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3058;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3041;
                        frontier_phi_67_pred_1 = _3042;
                        frontier_phi_67_pred_2 = _3043;
                        frontier_phi_67_pred_3 = _3040;
                        frontier_phi_67_pred_4 = _3039;
                        frontier_phi_67_pred_5 = _3038;
                    }
                    _2706 = frontier_phi_67_pred;
                    _2708 = frontier_phi_67_pred_1;
                    _2710 = frontier_phi_67_pred_2;
                    _2704 = frontier_phi_67_pred_3;
                    _2702 = frontier_phi_67_pred_4;
                    _2700 = frontier_phi_67_pred_5;
                    uint _2845 = _2844 + 1u;
                    if (_2845 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2838 = _2700;
                        _2839 = _2702;
                        _2840 = _2704;
                        _2841 = _2706;
                        _2842 = _2708;
                        _2843 = _2710;
                        _2844 = _2845;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2708;
                frontier_phi_55_56_ladder_1 = _2710;
                frontier_phi_55_56_ladder_2 = _2706;
                frontier_phi_55_56_ladder_3 = _2704;
                frontier_phi_55_56_ladder_4 = _2702;
                frontier_phi_55_56_ladder_5 = _2700;
            }
            else
            {
                frontier_phi_55_56_ladder = _2594;
                frontier_phi_55_56_ladder_1 = _2596;
                frontier_phi_55_56_ladder_2 = _2592;
                frontier_phi_55_56_ladder_3 = _2590;
                frontier_phi_55_56_ladder_4 = _2588;
                frontier_phi_55_56_ladder_5 = _2586;
            }
            _2699 = frontier_phi_55_56_ladder_5;
            _2701 = frontier_phi_55_56_ladder_4;
            _2703 = frontier_phi_55_56_ladder_3;
            _2705 = frontier_phi_55_56_ladder_2;
            _2707 = frontier_phi_55_56_ladder;
            _2709 = frontier_phi_55_56_ladder_1;
        }
        float _2714 = isnan(1.0) ? _788 : (isnan(_788) ? 1.0 : min(_788, 1.0));
        _2498 = (_2714 * _2705) + _1953;
        _2500 = (_2714 * _2707) + _1955;
        _2502 = (_2714 * _2709) + _1957;
        _2504 = ((_2699 * 0.039999999105930328369140625) * _2714) + _2283;
        _2506 = ((_2701 * 0.039999999105930328369140625) * _2714) + _2285;
        _2508 = ((_2703 * 0.039999999105930328369140625) * _2714) + _2287;
    }
    else
    {
        _2498 = _1953;
        _2500 = _1955;
        _2502 = _1957;
        _2504 = _2283;
        _2506 = _2285;
        _2508 = _2287;
    }
    float _4374 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4385 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4396 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    uint _2528 = _230 + 6u;
    float _2536 = _725 / cbSceneParam._m0[86u].x;
    float _2537 = _726 / cbSceneParam._m0[86u].y;
    vec4 _2551 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, (log2((isnan(cbSceneParam._m0[77u].w) ? _659 : (isnan(_659) ? cbSceneParam._m0[77u].w : min(_659, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2553 = _2551.x;
    float _2554 = _2551.y;
    float _2555 = _2551.z;
    float _2556 = _2551.w;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    if (_659 > cbSceneParam._m0[78u].w)
    {
        float _2611 = isnan(_659) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _659 : min(cbSceneParam._m0[80u].w, _659));
        float _2612 = _2611 / _659;
        float _2623 = _2612 * _710;
        float _2624 = _711 * _2612;
        float _2625 = (-0.0) - _2624;
        float _2627 = _2612 * _712;
        float _2629 = (cbSceneParam._m0[77u].w * _2625) / _2611;
        float _2630 = _2629 + cbSceneParam._m0[79u].w;
        float _2631 = cbSceneParam._m0[79u].w - _2624;
        float _2637 = sqrt(((_2623 * _2623) + (_2624 * _2624)) + (_2627 * _2627));
        float _2640 = (1.0 - (cbSceneParam._m0[77u].w / _2611)) * _2637;
        float _2645 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2647 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2800;
        if (abs((_2625 - _2629) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2800 = ((((_2630 > 0.0) ? exp2(_2645 * _2630) : (2.0 - exp2(_2647 * _2630))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2640;
        }
        else
        {
            float _2760 = 1.0 / cbSceneParam._m0[80u].x;
            float _2761 = isnan(_2631) ? _2630 : (isnan(_2630) ? _2631 : max(_2630, _2631));
            float _2762 = isnan(_2631) ? _2630 : (isnan(_2630) ? _2631 : min(_2630, _2631));
            float _2771 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : min(_2761, 0.0));
            float _2772 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : min(_2762, 0.0));
            _2800 = ((abs(_2637 / _2625) * cbSceneParam._m0[80u].y) * ((((_2771 - _2772) * 2.0) - ((exp2(_2645 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)))) - exp2(_2645 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0))))) * _2760)) - ((exp2(_2647 * _2771) - exp2(_2647 * _2772)) * _2760))) + (_2640 * cbSceneParam._m0[80u].z);
        }
        vec4 _2802 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, 1.0), 0.0);
        float _2811 = exp2((_2800 * (-1.44269502162933349609375)) * (1.0 - _2802.w));
        float _2812 = log2(_2811);
        float _2828 = log2(_2556);
        _2649 = (exp2(_2828 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].x)) * _2802.x) / cbSceneParam._m0[78u].x)) + _2553;
        _2651 = (exp2(_2828 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].y)) * _2802.y) / cbSceneParam._m0[78u].y)) + _2554;
        _2653 = (exp2(_2828 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].z)) * _2802.z) / cbSceneParam._m0[78u].z)) + _2555;
        _2655 = _2811 * _2556;
    }
    else
    {
        _2649 = _2553;
        _2651 = _2554;
        _2653 = _2555;
        _2655 = _2556;
    }
    float _2667 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2668 = _2667 == 3.0;
    float _2669 = log2(_2655);
    float _2676 = exp2(_2669 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2498 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _788))) + ((_2504 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1593)) * cbPerFrame._m0[3u].x));
    float _2677 = exp2(_2669 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2500 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _788))) + ((_2506 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1593)) * cbPerFrame._m0[3u].x));
    float _2678 = exp2(_2669 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2502 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _788))) + ((_2508 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1593)) * cbPerFrame._m0[3u].x));
    float _2687 = (_2667 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2687 * (_2668 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2649)));
    SV_Target.y = _2687 * (_2668 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2651)));
    SV_Target.z = _2687 * (_2668 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2653)));
    SV_Target.w = cbInstanceData._m0[_2528].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2528].w;
}


