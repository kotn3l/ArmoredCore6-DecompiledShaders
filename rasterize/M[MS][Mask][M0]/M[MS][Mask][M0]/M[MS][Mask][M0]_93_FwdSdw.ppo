#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1351;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3937 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3948 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3959 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _374.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].z) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3970 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _448 = (_441 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _449 = (_441 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _450 = (_441 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _291) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _292) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _374.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[24u].z) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3981 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    float _527 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _521;
    float _530 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _522;
    float _533 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _523;
    float _540 = ((_521 - _527) * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) + _527;
    float _541 = ((_522 - _530) * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) + _530;
    float _542 = ((_523 - _533) * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) + _533;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _624 = _622.x;
    float _625 = _622.y;
    float _626 = _622.z;
    float _633 = ((_605.x - _624) * _441) + _624;
    float _634 = ((_605.y - _625) * _441) + _625;
    float _635 = ((_605.z - _626) * _441) + _626;
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _291) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _292) + cbTextureTilingScale._m0[2u].w));
    float _660 = ((_647.z - _635) * _514) + _635;
    float _663 = ((((_647.x - _633) * _514) + _633) * 2.0) + (-1.0);
    float _664 = ((((_647.y - _634) * _514) + _634) * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _3992 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _670 = sqrt(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _700 = (_663 + ((((_580.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_688.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _701 = (_664 + ((((_580.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_688.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _704 = fma(_670, _239, fma(_701, _246, _700 * _232));
    float _707 = fma(_670, _240, fma(_701, _247, _700 * _233));
    float _710 = fma(_670, _241, fma(_701, _248, _700 * _234));
    float _714 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _743 = _741.x;
    float _744 = 1.0 - _743;
    float _750 = (cbMtdParam._m0[19u].x + dot(vec4(_714 * _704, _714 * _707, _714 * _710, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_743 - _744) * cbMtdParam._m0[24u].w) + _744) * cbMtdParam._m0[21u].z);
    float _4003 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _751 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _758 = (_751 * ((_561.x * cbMtdParam._m0[18u].x) - _540)) + _540;
    float _759 = (_751 * ((_561.y * cbMtdParam._m0[18u].y) - _541)) + _541;
    float _760 = (_751 * ((_561.z * cbMtdParam._m0[18u].z) - _542)) + _542;
    float _765 = (((_580.z - _660) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _660;
    float _769 = ((_688.z - _765) * cbMtdParam._m0[19u].w) + _765;
    vec4 _782 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _789 = (_782.x * 2.0) + (-1.0);
    float _790 = (_782.y * 2.0) + (-1.0);
    float _791 = dot(vec2(_789, _790), vec2(_789, _790));
    float _4014 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _799 = ((_782.z - _769) * _751) + _769;
    float _809 = ((sqrt(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) - _670) * _751) + _670;
    float _812 = (((_789 - _700) * _751) + _700) + (cbMtdParam._m0[21u].x * _700);
    float _813 = (((_790 - _701) * _751) + _701) + (cbMtdParam._m0[21u].x * _701);
    float _815 = cbMtdParam._m0[22u].x + _688.w;
    float _818 = fma(_809, _239, fma(_813, _246, _812 * _232));
    float _821 = fma(_809, _240, fma(_813, _247, _812 * _233));
    float _824 = fma(_809, _241, fma(_813, _248, _812 * _234));
    float _828 = inversesqrt(dot(vec3(_818, _821, _824), vec3(_818, _821, _824)));
    float _829 = _828 * _818;
    float _830 = _828 * _821;
    float _831 = _828 * _824;
    float _4025 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _832 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4047 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4058 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4069 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _850 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _902 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _892);
    float _903 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _892);
    float _904 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _892);
    float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
    float _909 = _902 * _908;
    float _910 = _903 * _908;
    float _911 = _904 * _908;
    float _917 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _918 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _936 = fma(_831, cbSceneParam._m0[5u].z, fma(_830, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _829));
    float _939 = fma(_831, cbSceneParam._m0[6u].z, fma(_830, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _829));
    float _942 = fma(_831, cbSceneParam._m0[7u].z, fma(_830, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _829));
    uint _956 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _962 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * cbInstanceData._m0[_956].x;
    float _963 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * cbInstanceData._m0[_956].y;
    float _964 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * cbInstanceData._m0[_956].z;
    float _4080 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    vec4 _976 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _917, cbSceneParam._m0[86u].y * _918));
    float _980 = ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * TEXCOORD_5.w) * _976.x;
    float _981 = dot(vec3(_829, _830, _831), vec3(_909, _910, _911));
    float _984 = _981 * 2.0;
    float _988 = (_984 * _829) - _909;
    float _989 = (_984 * _830) - _910;
    float _990 = (_984 * _831) - _911;
    float _994 = abs(dot(vec3(_909, _910, _911), vec3(_829, _830, _831)));
    float _4113 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _996 = sqrt(_832);
    float _1009 = exp2((_996 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_996 * 3.0));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1350;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1075 = fma(_1049, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041));
        float _1079 = fma(_1049, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041));
        float _1083 = fma(_1049, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041));
        float _1108 = _1041 + _829;
        float _1109 = _1045 + _830;
        float _1110 = _1049 + _831;
        float _1120 = fma(_1110, cbModelParam._m0[26u].z, fma(_1109, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1108)) - _1075;
        float _1121 = fma(_1110, cbModelParam._m0[27u].z, fma(_1109, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1108)) - _1079;
        float _1122 = fma(_1110, cbModelParam._m0[28u].z, fma(_1109, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1108)) - _1083;
        float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
        float _1139 = ((_1126 * _1120) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1075 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1126 * _1121) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1079 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1126 * _1122) / cbModelParam._m0[34u].z) + ((((((_1083 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        float _1178 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1144.x + (-0.5));
        float _1180 = _1178 * (_1144.y + (-0.5));
        float _1181 = _1178 * (_1144.z + (-0.5));
        float _1188 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1151.x + (-0.5));
        float _1190 = _1188 * (_1151.y + (-0.5));
        float _1191 = _1188 * (_1151.z + (-0.5));
        float _1198 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1158.x + (-0.5));
        float _1200 = _1198 * (_1158.y + (-0.5));
        float _1201 = _1198 * (_1158.z + (-0.5));
        float _1208 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1165.x + (-0.5));
        float _1210 = _1208 * (_1165.y + (-0.5));
        float _1211 = _1208 * (_1165.z + (-0.5));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = _1179 * 0.5;
        float _1216 = _1189 * 0.5;
        float _1217 = _1199 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1232 = (dot(vec3(_829, _830, _831), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1242 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _4161 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1244 + 1.0))) + _1249) * _1212;
        float _1259 = _1180 * 0.5;
        float _1260 = _1190 * 0.5;
        float _1261 = _1200 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_829, _830, _831), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4194 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1286 + 1.0))) + _1291) * _1213;
        float _1301 = _1181 * 0.5;
        float _1302 = _1191 * 0.5;
        float _1303 = _1201 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_829, _830, _831), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4227 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1328 + 1.0))) + _1333) * _1214;
        _1350 = _1181;
        _1352 = _1180;
        _1353 = _1179;
        _1354 = _1191;
        _1355 = _1190;
        _1356 = _1189;
        _1357 = _1201;
        _1358 = _1200;
        _1359 = _1199;
        _1360 = _1214;
        _1361 = _1213;
        _1362 = _1212;
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
    }
    else
    {
        _1350 = _1351;
        _1352 = _1351;
        _1353 = _1351;
        _1354 = _1351;
        _1355 = _1351;
        _1356 = _1351;
        _1357 = _1351;
        _1358 = _1351;
        _1359 = _1351;
        _1360 = _1351;
        _1361 = _1351;
        _1362 = _1351;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1389 = fma(_1049, cbModelParam._m0[30u].z, fma(_1045, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041));
        float _1393 = fma(_1049, cbModelParam._m0[31u].z, fma(_1045, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041));
        float _1397 = fma(_1049, cbModelParam._m0[32u].z, fma(_1045, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041));
        float _1420 = _1041 + _829;
        float _1421 = _1045 + _830;
        float _1422 = _1049 + _831;
        float _1432 = fma(_1422, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1420)) - _1389;
        float _1433 = fma(_1422, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1420)) - _1393;
        float _1434 = fma(_1422, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1420)) - _1397;
        float _1438 = inversesqrt(dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434)));
        float _1451 = ((_1438 * _1432) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1389 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1438 * _1433) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1393 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1438 * _1434) / cbModelParam._m0[35u].z) + ((((((_1397 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        float _1488 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1455.x + (-0.5));
        float _1490 = _1488 * (_1455.y + (-0.5));
        float _1491 = _1488 * (_1455.z + (-0.5));
        float _1498 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1462.x + (-0.5));
        float _1500 = _1498 * (_1462.y + (-0.5));
        float _1501 = _1498 * (_1462.z + (-0.5));
        float _1508 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1469.x + (-0.5));
        float _1510 = _1508 * (_1469.y + (-0.5));
        float _1511 = _1508 * (_1469.z + (-0.5));
        float _1518 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1476.x + (-0.5));
        float _1520 = _1518 * (_1476.y + (-0.5));
        float _1521 = _1518 * (_1476.z + (-0.5));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = _1489 * 0.5;
        float _1526 = _1499 * 0.5;
        float _1527 = _1509 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_829, _830, _831), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4290 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1552 + 1.0))) + _1557) * _1522;
        float _1567 = _1490 * 0.5;
        float _1568 = _1500 * 0.5;
        float _1569 = _1510 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_829, _830, _831), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4323 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1594 + 1.0))) + _1599) * _1523;
        float _1609 = _1491 * 0.5;
        float _1610 = _1501 * 0.5;
        float _1611 = _1511 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_829, _830, _831), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4356 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1636 + 1.0))) + _1641) * _1524;
        _1658 = _1491;
        _1659 = _1490;
        _1660 = _1489;
        _1661 = _1501;
        _1662 = _1500;
        _1663 = _1499;
        _1664 = _1511;
        _1665 = _1510;
        _1666 = _1509;
        _1667 = _1524;
        _1668 = _1523;
        _1669 = _1522;
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    }
    else
    {
        _1658 = _1351;
        _1659 = _1351;
        _1660 = _1351;
        _1661 = _1351;
        _1662 = _1351;
        _1663 = _1351;
        _1664 = _1351;
        _1665 = _1351;
        _1666 = _1351;
        _1667 = _1351;
        _1668 = _1351;
        _1669 = _1351;
        _1670 = 0.0;
        _1671 = 0.0;
        _1672 = 0.0;
    }
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1363)) + _1363;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1364)) + _1364;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1365)) + _1365;
    float _1705 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1682));
    float _1726 = _988 * 0.5;
    float _1727 = _989 * 0.5;
    float _1728 = _990 * 0.5;
    float _1729 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1732 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1735 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1769;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1742 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1350, _1354, _1357, _1360));
        float _1746 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1352, _1355, _1358, _1361));
        float _1750 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1757 = dot(vec4(cbModelParam._m0[39u]), vec4(_1726, _1727, _1728, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1780;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1771 = dot(vec4(cbModelParam._m0[40u]), vec4(_1726, _1727, _1728, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1784 = (_1780 * cbModelParam._m0[1u].x) + (_1769 * (1.0 - cbModelParam._m0[1u].x));
    float _1794 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _832);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1794 : min(cbModelParam._m0[25u].z, _1794));
    float _1875;
    float _1877;
    float _1879;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1842 = fma(_1049, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041)) + cbModelParam._m0[13u].w;
        float _1846 = fma(_1049, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041)) + cbModelParam._m0[14u].w;
        float _1850 = fma(_1049, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041)) + cbModelParam._m0[15u].w;
        float _1853 = fma(_990, cbModelParam._m0[13u].z, fma(_989, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988));
        float _1856 = fma(_990, cbModelParam._m0[14u].z, fma(_989, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988));
        float _1859 = fma(_990, cbModelParam._m0[15u].z, fma(_989, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988));
        float _1887;
        if (_1853 > 0.0)
        {
            _1887 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1887 = frontier_phi_14_12_ladder;
        }
        float _2056;
        if (_1856 > 0.0)
        {
            _2056 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2056 = frontier_phi_23_19_ladder;
        }
        float _2351;
        if (_1859 > 0.0)
        {
            _2351 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2351 = frontier_phi_35_30_ladder;
        }
        float _2353 = isnan(_2056) ? _1887 : (isnan(_1887) ? _2056 : min(_1887, _2056));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1853) + _1842;
        float _2359 = (_2354 * _1856) + _1846;
        float _2360 = (_2354 * _1859) + _1850;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2363 = (-1.0) - _2361;
        float _2365 = _2361 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2360 > _2365) || ((_2360 < _2363) || ((_2359 > _2365) || ((_2359 < _2363) || ((_2358 < _2363) || (_2358 > _2365))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2505 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2360, cbModelParam._m0[9u].z, fma(_2359, cbModelParam._m0[9u].y, _2358 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2360, cbModelParam._m0[10u].z, fma(_2359, cbModelParam._m0[10u].y, _2358 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2360, cbModelParam._m0[11u].z, fma(_2359, cbModelParam._m0[11u].y, _2358 * cbModelParam._m0[11u].x))), _1795);
            frontier_phi_13_35_ladder = _2505.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2505.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2505.x * cbModelParam._m0[1u].y;
        }
        _1875 = frontier_phi_13_35_ladder_2;
        _1877 = frontier_phi_13_35_ladder_1;
        _1879 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1863 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_988, _989, _990), _1795);
        _1875 = _1863.x * cbModelParam._m0[1u].y;
        _1877 = _1863.y * cbModelParam._m0[1u].y;
        _1879 = _1863.z * cbModelParam._m0[1u].y;
    }
    float _1883 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _832);
    float _1884 = isnan(_1883) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1883 : min(cbModelParam._m0[25u].w, _1883));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1937 = fma(_1049, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041)) + cbModelParam._m0[21u].w;
        float _1941 = fma(_1049, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041)) + cbModelParam._m0[22u].w;
        float _1945 = fma(_1049, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041)) + cbModelParam._m0[23u].w;
        float _1948 = fma(_990, cbModelParam._m0[21u].z, fma(_989, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988));
        float _1951 = fma(_990, cbModelParam._m0[22u].z, fma(_989, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988));
        float _1954 = fma(_990, cbModelParam._m0[23u].z, fma(_989, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988));
        float _2061;
        if (_1948 > 0.0)
        {
            _2061 = abs((1.0 - _1937) / _1948);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1937 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2061 = frontier_phi_25_21_ladder;
        }
        float _2378;
        if (_1951 > 0.0)
        {
            _2378 = abs((1.0 - _1941) / _1951);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1941 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2378 = frontier_phi_37_32_ladder;
        }
        float _2705;
        if (_1954 > 0.0)
        {
            _2705 = abs((1.0 - _1945) / _1954);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1945 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2705 = frontier_phi_47_44_ladder;
        }
        float _2707 = isnan(_2378) ? _2061 : (isnan(_2061) ? _2378 : min(_2061, _2378));
        float _2708 = isnan(_2705) ? _2707 : (isnan(_2707) ? _2705 : min(_2707, _2705));
        float _2712 = (_2708 * _1948) + _1937;
        float _2713 = (_2708 * _1951) + _1941;
        float _2714 = (_2708 * _1954) + _1945;
        float _2715 = _2708 * 9.9999997473787516355514526367188e-05;
        float _2716 = (-1.0) - _2715;
        float _2718 = _2715 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2714 > _2718) || ((_2714 < _2716) || ((_2713 > _2718) || ((_2713 < _2716) || ((_2712 < _2716) || (_2712 > _2718))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2832 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2714, cbModelParam._m0[17u].z, fma(_2713, cbModelParam._m0[17u].y, _2712 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2714, cbModelParam._m0[18u].z, fma(_2713, cbModelParam._m0[18u].y, _2712 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2714, cbModelParam._m0[19u].z, fma(_2713, cbModelParam._m0[19u].y, _2712 * cbModelParam._m0[19u].x))), _1884);
            frontier_phi_22_47_ladder = _2832.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2832.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2832.x * cbModelParam._m0[1u].z;
        }
        _1973 = frontier_phi_22_47_ladder_2;
        _1975 = frontier_phi_22_47_ladder_1;
        _1977 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_988, _989, _990), _1884);
        _1973 = _1957.x * cbModelParam._m0[1u].z;
        _1975 = _1957.y * cbModelParam._m0[1u].z;
        _1977 = _1957.z * cbModelParam._m0[1u].z;
    }
    float _1989 = ((((1.0 - _1009) * ((_996 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1009 * _996)) * _980;
    float _1990 = _1989 * ((cbModelParam._m0[1u].w * (_1973 - _1875)) + _1875);
    float _1991 = _1989 * ((cbModelParam._m0[1u].w * (_1975 - _1877)) + _1877);
    float _1992 = _1989 * ((cbModelParam._m0[1u].w * (_1977 - _1879)) + _1879);
    float _1995 = fma(_1992, cbSceneParam._m0[89u].z, fma(_1991, cbSceneParam._m0[89u].y, _1990 * cbSceneParam._m0[89u].x));
    float _1998 = fma(_1992, cbSceneParam._m0[90u].z, fma(_1991, cbSceneParam._m0[90u].y, _1990 * cbSceneParam._m0[90u].x));
    float _2001 = fma(_1992, cbSceneParam._m0[91u].z, fma(_1991, cbSceneParam._m0[91u].y, _1990 * cbSceneParam._m0[91u].x));
    float _2035 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2039 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2043 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2047 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2048 = _2035 / _2047;
    float _2049 = _2039 / _2047;
    float _2050 = _2043 / _2047;
    float _2197;
    float _2198;
    float _2199;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2077 = ((uint(_2050 > cbSceneParam._m0[59u].y) + uint(_2050 > cbSceneParam._m0[59u].x)) + uint(_2050 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2078 = _2077 + 43u;
        uint _2086 = _2077 + 44u;
        uint _2094 = _2077 + 45u;
        uint _2102 = _2077 + 46u;
        float _2113 = fma(_2047, cbSceneParam._m0[_2078].w, fma(_2043, cbSceneParam._m0[_2078].z, fma(_2039, cbSceneParam._m0[_2078].y, _2035 * cbSceneParam._m0[_2078].x)));
        float _2117 = fma(_2047, cbSceneParam._m0[_2086].w, fma(_2043, cbSceneParam._m0[_2086].z, fma(_2039, cbSceneParam._m0[_2086].y, _2035 * cbSceneParam._m0[_2086].x)));
        float _2125 = fma(_2047, cbSceneParam._m0[_2102].w, fma(_2043, cbSceneParam._m0[_2102].z, fma(_2039, cbSceneParam._m0[_2102].y, _2035 * cbSceneParam._m0[_2102].x)));
        float _2130 = cbSceneParam._m0[33u].z * _2125;
        float _2132 = cbSceneParam._m0[33u].w * _2125;
        float _2135 = fma(_2047, cbSceneParam._m0[_2094].w, fma(_2043, cbSceneParam._m0[_2094].z, fma(_2039, cbSceneParam._m0[_2094].y, _2035 * cbSceneParam._m0[_2094].x))) / _2125;
        float _2183 = (cbSceneParam._m0[33u].x - sqrt(((_2049 * _2049) + (_2048 * _2048)) + (_2050 * _2050))) * cbSceneParam._m0[33u].y;
        float _4482 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2190 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2130 + _2113) / _2125, (_2132 + _2117) / _2125), _2135), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 + _2113) / _2125, (_2117 - _2130) / _2125), _2135), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2113 - _2130) / _2125, (_2117 - _2132) / _2125), _2135), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2113 - _2132) / _2125, (_2130 + _2117) / _2125), _2135), 0.0)).x), vec4(0.25)));
        _2197 = 1.0 - (_2190 * cbSceneParam._m0[34u].x);
        _2198 = 1.0 - (_2190 * cbSceneParam._m0[34u].y);
        _2199 = 1.0 - (_2190 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2197 = 1.0;
        _2198 = 1.0;
        _2199 = 1.0;
    }
    float _2263;
    float _2265;
    float _2267;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2251 = fma(_2047, cbSceneParam._m0[63u].w, fma(_2043, cbSceneParam._m0[63u].z, fma(_2039, cbSceneParam._m0[63u].y, _2035 * cbSceneParam._m0[63u].x)));
        float _2252 = fma(_2047, cbSceneParam._m0[60u].w, fma(_2043, cbSceneParam._m0[60u].z, fma(_2039, cbSceneParam._m0[60u].y, _2035 * cbSceneParam._m0[60u].x))) / _2251;
        float _2253 = fma(_2047, cbSceneParam._m0[61u].w, fma(_2043, cbSceneParam._m0[61u].z, fma(_2039, cbSceneParam._m0[61u].y, _2035 * cbSceneParam._m0[61u].x))) / _2251;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2252 >= cbSceneParam._m0[64u].x) && (_2253 >= cbSceneParam._m0[64u].y)) && (_2252 <= cbSceneParam._m0[64u].z)) && (_2253 <= cbSceneParam._m0[64u].w))
        {
            float _2391 = fma(_2047, cbSceneParam._m0[62u].w, fma(_2043, cbSceneParam._m0[62u].z, fma(_2039, cbSceneParam._m0[62u].y, _2035 * cbSceneParam._m0[62u].x))) / _2251;
            float _2395 = isnan(cbSceneParam._m0[41u].w) ? _2391 : (isnan(_2391) ? cbSceneParam._m0[41u].w : max(_2391, cbSceneParam._m0[41u].w));
            float _2438 = (cbSceneParam._m0[33u].x - sqrt(((_2049 * _2049) + (_2048 * _2048)) + (_2050 * _2050))) * cbSceneParam._m0[33u].y;
            float _4498 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
            float _2445 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2252, cbSceneParam._m0[33u].w + _2253), _2395), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2252, _2253 - cbSceneParam._m0[33u].z), _2395), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2252 - cbSceneParam._m0[33u].z, _2253 - cbSceneParam._m0[33u].w), _2395), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2252 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2253), _2395), 0.0)).x), vec4(0.25)));
            float _2449 = 1.0 - (_2445 * cbSceneParam._m0[34u].x);
            float _2450 = 1.0 - (_2445 * cbSceneParam._m0[34u].y);
            float _2451 = 1.0 - (_2445 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2451) ? _2199 : (isnan(_2199) ? _2451 : min(_2199, _2451));
            frontier_phi_34_33_ladder_1 = isnan(_2450) ? _2198 : (isnan(_2198) ? _2450 : min(_2198, _2450));
            frontier_phi_34_33_ladder_2 = isnan(_2449) ? _2197 : (isnan(_2197) ? _2449 : min(_2197, _2449));
        }
        else
        {
            frontier_phi_34_33_ladder = _2199;
            frontier_phi_34_33_ladder_1 = _2198;
            frontier_phi_34_33_ladder_2 = _2197;
        }
        _2263 = frontier_phi_34_33_ladder_2;
        _2265 = frontier_phi_34_33_ladder_1;
        _2267 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2263 = _2197;
        _2265 = _2198;
        _2267 = _2199;
    }
    uvec4 _2272 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2274 = _2272.x * 14u;
    uint _2275 = _2274 + 13u;
    float _2282 = _980 + (-1.0);
    float _2287 = (cbLight._m0[_2275].x * _2282) + 1.0;
    float _2288 = (cbLight._m0[_2275].y * _2282) + 1.0;
    float _2289 = (cbLight._m0[_2275].z * _2282) + 1.0;
    float _2290 = (cbLight._m0[_2275].w * _2282) + 1.0;
    uint _2291 = _2274 + 5u;
    float _2297 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
    uint _2301 = _2274 + 4u;
    float _2310 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
    uint _2314 = _2274 | 1u;
    float _2325 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_829, _830, _831));
    float _2328 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_829, _830, _831));
    float _4534 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _4545 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2333 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2335 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * 0.3183098733425140380859375;
    float _2342 = ((cbLight._m0[_2291].x * _2297) * _2335) + (((cbLight._m0[_2301].x * _2263) * _2310) * _2333);
    float _2343 = ((_2297 * cbLight._m0[_2291].y) * _2335) + (((cbLight._m0[_2301].y * _2265) * _2310) * _2333);
    float _2344 = ((_2297 * cbLight._m0[_2291].z) * _2335) + (((cbLight._m0[_2301].z * _2267) * _2310) * _2333);
    uvec4 _2348 = floatBitsToUint(cbLight._m0[_2274 + 12u]);
    bool _2350 = _2348.x == 0u;
    float _2452;
    float _2454;
    float _2456;
    if (_2350)
    {
        _2452 = _2342;
        _2454 = _2343;
        _2456 = _2344;
    }
    else
    {
        uint _2460 = _2274 + 6u;
        float _2476 = (dot(vec3(cbLight._m0[_2274 + 2u].xyz), vec3(_829, _830, _831)) * 0.5) + 0.5;
        float _2477 = _2476 * _2476;
        float _4556 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2478 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2479 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
        _2452 = (((cbLight._m0[_2460].x * 0.3183098733425140380859375) * _2478) * _2479) + _2342;
        _2454 = (((cbLight._m0[_2460].y * 0.3183098733425140380859375) * _2478) * _2479) + _2343;
        _2456 = (((cbLight._m0[_2460].z * 0.3183098733425140380859375) * _2478) * _2479) + _2344;
    }
    bool _2459 = _2348.y == 0u;
    float _2514;
    float _2516;
    float _2518;
    if (_2459)
    {
        _2514 = _2452;
        _2516 = _2454;
        _2518 = _2456;
    }
    else
    {
        uint _2676 = _2274 + 7u;
        float _2692 = (dot(vec3(cbLight._m0[_2274 + 3u].xyz), vec3(_829, _830, _831)) * 0.5) + 0.5;
        float _2693 = _2692 * _2692;
        float _4572 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2694 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2695 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2514 = (((cbLight._m0[_2676].x * 0.3183098733425140380859375) * _2694) * _2695) + _2452;
        _2516 = (((cbLight._m0[_2676].y * 0.3183098733425140380859375) * _2694) * _2695) + _2454;
        _2518 = (((cbLight._m0[_2676].z * 0.3183098733425140380859375) * _2694) * _2695) + _2456;
    }
    uint _2521 = _2274 + 8u;
    float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _832) * 0.949999988079071044921875);
    float _2535 = _2534 * _2534;
    float _2536 = cbLight._m0[_2274].x + _909;
    float _2537 = cbLight._m0[_2274].y + _910;
    float _2538 = cbLight._m0[_2274].z + _911;
    float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
    float _2543 = _2542 * _2536;
    float _2544 = _2542 * _2537;
    float _2545 = _2542 * _2538;
    float _2546 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2274].xyz));
    float _4588 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _4599 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2550 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2551 = dot(vec3(_829, _830, _831), vec3(_2543, _2544, _2545));
    float _4610 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2555 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2543, _2544, _2545));
    float _4621 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2559 = _2535 * _2535;
    float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
    float _2574 = (exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2575 = 1.0 - _2535;
    float _2586 = (0.5 / (((_2550 * ((_2549 * _2575) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2575) + _2535) * _2549))) * _2549;
    float _4632 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2588 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
    uint _2602 = _2274 + 9u;
    float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _832) * 0.949999988079071044921875);
    float _2614 = _2613 * _2613;
    float _2615 = cbLight._m0[_2314].x + _909;
    float _2616 = cbLight._m0[_2314].y + _910;
    float _2617 = cbLight._m0[_2314].z + _911;
    float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
    float _2622 = _2621 * _2615;
    float _2623 = _2621 * _2616;
    float _2624 = _2621 * _2617;
    float _2625 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2314].xyz));
    float _4643 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2628 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2629 = dot(vec3(_829, _830, _831), vec3(_2622, _2623, _2624));
    float _4654 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2632 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _2633 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2622, _2623, _2624));
    float _4665 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2637 = _2614 * _2614;
    float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
    float _2650 = (exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2651 = 1.0 - _2614;
    float _2661 = (0.5 / (((_2550 * ((_2628 * _2651) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2651) + _2614) * _2628))) * _2628;
    float _4676 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2663 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
    float _2673 = (((_2650 * cbLight._m0[_2602].x) * _2663) * _2297) + ((((cbLight._m0[_2521].x * _2263) * _2574) * _2588) * _2310);
    float _2674 = (((_2650 * cbLight._m0[_2602].y) * _2663) * _2297) + ((((cbLight._m0[_2521].y * _2265) * _2574) * _2588) * _2310);
    float _2675 = (((_2650 * cbLight._m0[_2602].z) * _2663) * _2297) + ((((cbLight._m0[_2521].z * _2267) * _2574) * _2588) * _2310);
    float _2731;
    float _2733;
    float _2735;
    if (_2350)
    {
        _2731 = _2673;
        _2733 = _2674;
        _2735 = _2675;
    }
    else
    {
        uint _2737 = _2274 + 2u;
        uint _2741 = _2274 + 10u;
        float _2755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2737].w)) * _832) * 0.949999988079071044921875);
        float _2756 = _2755 * _2755;
        float _2757 = cbLight._m0[_2737].x + _909;
        float _2758 = cbLight._m0[_2737].y + _910;
        float _2759 = cbLight._m0[_2737].z + _911;
        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
        float _2764 = _2763 * _2757;
        float _2765 = _2763 * _2758;
        float _2766 = _2763 * _2759;
        float _2767 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2737].xyz));
        float _4687 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2771 = dot(vec3(_829, _830, _831), vec3(_2764, _2765, _2766));
        float _4698 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2775 = dot(vec3(cbLight._m0[_2737].xyz), vec3(_2764, _2765, _2766));
        float _4709 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2779 = _2756 * _2756;
        float _2783 = ((_2774 * _2774) * (_2779 + (-1.0))) + 1.0;
        float _2792 = (exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2793 = 1.0 - _2756;
        float _2803 = (0.5 / (((_2550 * ((_2770 * _2793) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2793) + _2756) * _2770))) * _2770;
        float _4720 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2805 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2779 / ((_2783 * _2783) * 3.141590118408203125));
        float _2806 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
        _2731 = (((_2792 * cbLight._m0[_2741].x) * _2805) * _2806) + _2673;
        _2733 = (((_2792 * cbLight._m0[_2741].y) * _2805) * _2806) + _2674;
        _2735 = (((_2792 * cbLight._m0[_2741].z) * _2805) * _2806) + _2675;
    }
    float _2837;
    float _2839;
    float _2841;
    if (_2459)
    {
        _2837 = _2731;
        _2839 = _2733;
        _2841 = _2735;
    }
    else
    {
        uint _2848 = _2274 + 3u;
        uint _2852 = _2274 + 11u;
        float _2866 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2848].w)) * _832) * 0.949999988079071044921875);
        float _2867 = _2866 * _2866;
        float _2868 = cbLight._m0[_2848].x + _909;
        float _2869 = cbLight._m0[_2848].y + _910;
        float _2870 = cbLight._m0[_2848].z + _911;
        float _2874 = inversesqrt(dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870)));
        float _2875 = _2874 * _2868;
        float _2876 = _2874 * _2869;
        float _2877 = _2874 * _2870;
        float _2878 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2848].xyz));
        float _4736 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2881 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2882 = dot(vec3(_829, _830, _831), vec3(_2875, _2876, _2877));
        float _4747 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2885 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2886 = dot(vec3(cbLight._m0[_2848].xyz), vec3(_2875, _2876, _2877));
        float _4758 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2890 = _2867 * _2867;
        float _2894 = ((_2885 * _2885) * (_2890 + (-1.0))) + 1.0;
        float _2903 = (exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2904 = 1.0 - _2867;
        float _2914 = (0.5 / (((_2550 * ((_2881 * _2904) + _2867)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2904) + _2867) * _2881))) * _2881;
        float _4769 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2916 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2890 / ((_2894 * _2894) * 3.141590118408203125));
        float _2917 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2837 = (((_2903 * cbLight._m0[_2852].x) * _2916) * _2917) + _2731;
        _2839 = (((_2903 * cbLight._m0[_2852].y) * _2916) * _2917) + _2733;
        _2841 = (((_2903 * cbLight._m0[_2852].z) * _2916) * _2917) + _2735;
    }
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    if (_2272.y == 0u)
    {
        uvec4 _2938 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2939 = _2938.x;
        uint _2950 = uint((float(_2938.y) * floor(float(uint(cbSceneParam._m0[85u].y * _918) / _2939))) + floor(float(uint(cbSceneParam._m0[85u].x * _917) / _2939)));
        float _2960 = (log2(_2050 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2961 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        uint _2964 = uint(isnan(14.0) ? _2961 : (isnan(_2961) ? 14.0 : min(_2961, 14.0)));
        uvec4 _2969 = texelFetch(g_lightClusterGridBuffer, int(((_2964 << 2u) + (_2950 << 6u)) >> 2u));
        uint _2970 = _2969.x;
        uint _2971 = _2938.z;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        if (((((1u << ((_2971 >> 4u) & 15u)) + 4294967295u) & _2970) == 0u) || ((_2971 & 240u) == 0u))
        {
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
        }
        else
        {
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            uint _3201 = 0u;
            uint _3210;
            bool _3211;
            for (;;)
            {
                _3210 = texelFetch(g_lightClassification, int((((_2964 << 5u) + (_2950 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                _3211 = _3210 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3211)
                {
                    frontier_phi_66_pred = _3200;
                    frontier_phi_66_pred_1 = _3199;
                    frontier_phi_66_pred_2 = _3198;
                    frontier_phi_66_pred_3 = _3197;
                    frontier_phi_66_pred_4 = _3196;
                    frontier_phi_66_pred_5 = _3195;
                }
                else
                {
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    uint _3325;
                    _3319 = _3195;
                    _3320 = _3196;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3210;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    for (;;)
                    {
                        uint _3329 = uint(findLSB(_3325)) + (_3201 << 5u);
                        uint _3326 = (_3325 + 4294967295u) & _3325;
                        uint _3331 = _3329 * 48u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 3u)).x));
                        uint _3351 = (_3329 * 48u) + 4u;
                        vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 3u)).x));
                        uint _3370 = (_3329 * 48u) + 8u;
                        vec3 _3381 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x));
                        float _3385 = _3345.x - _2048;
                        float _3386 = _3345.y - _2049;
                        float _3387 = _3345.z - _2050;
                        float _3388 = dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387));
                        float _3391 = inversesqrt(_3388);
                        float _3392 = _3391 * _3385;
                        float _3393 = _3391 * _3386;
                        float _3394 = _3391 * _3387;
                        float _3395 = dot(vec3(_936, _939, _942), vec3(_3392, _3393, _3394));
                        float _3400 = 1.0 - (_3388 * _3345.w);
                        float _4795 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3401 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3402 = sqrt(_3388) * _3364.w;
                        float _3405 = 1.39999997615814208984375 / (_3402 + 1.39999997615814208984375);
                        float _3406 = _3405 * _3405;
                        float _3409 = ((1.0 - _3406) * _3395) + _3406;
                        float _3412 = _3402 * _3402;
                        float _3416 = ((isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))) * _3401) / ((_3412 * 0.699999988079071044921875) + 1.0);
                        float _3420 = (-0.0) - _2048;
                        float _3421 = (-0.0) - _2049;
                        float _3422 = (-0.0) - _2050;
                        float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                        float _3427 = _3426 * _3420;
                        float _3428 = _3426 * _3421;
                        float _3429 = _3426 * _3422;
                        float _3436 = exp2(log2(1.0 / ((_3412 * 3.5) + 5.0)) * 0.25);
                        float _3437 = 1.0 - _996;
                        float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                        float _3445 = _3444 * _3444;
                        float _3446 = _3445 * _3445;
                        float _3447 = _3427 + _3392;
                        float _3448 = _3428 + _3393;
                        float _3449 = _3429 + _3394;
                        float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                        float _3457 = dot(vec3(_936, _939, _942), vec3(_3427, _3428, _3429));
                        float _4811 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3460 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3461 = dot(vec3(_936, _939, _942), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                        float _4822 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                        float _3469 = _3405 * _3445;
                        float _3470 = _3469 * _3469;
                        float _3473 = ((1.0 - _3470) * _3395) + _3470;
                        float _4833 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3474 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3475 = 1.0 - _3445;
                        float _3485 = (0.5 / (((_3474 * ((_3460 * _3475) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3474 * _3475) + _3445) * _3460))) * _3474;
                        float _4844 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3496 = (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) / ((_3468 * _3468) * ((_3412 * 2.1991131305694580078125) + 3.141590118408203125))) * _3401;
                        _3254 = (_3416 * _3364.x) + _3322;
                        _3255 = (_3416 * _3364.y) + _3323;
                        _3256 = (_3416 * _3364.z) + _3324;
                        _3251 = (_3496 * _3381.x) + _3319;
                        _3252 = (_3496 * _3381.y) + _3320;
                        _3253 = (_3496 * _3381.z) + _3321;
                        if (_3326 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3319 = _3251;
                            _3320 = _3252;
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3326;
                        }
                    }
                    frontier_phi_66_pred = _3256;
                    frontier_phi_66_pred_1 = _3255;
                    frontier_phi_66_pred_2 = _3254;
                    frontier_phi_66_pred_3 = _3253;
                    frontier_phi_66_pred_4 = _3252;
                    frontier_phi_66_pred_5 = _3251;
                }
                _3061 = frontier_phi_66_pred;
                _3059 = frontier_phi_66_pred_1;
                _3057 = frontier_phi_66_pred_2;
                _3055 = frontier_phi_66_pred_3;
                _3053 = frontier_phi_66_pred_4;
                _3051 = frontier_phi_66_pred_5;
                uint _3202 = _3201 + 1u;
                if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3195 = _3051;
                    _3196 = _3053;
                    _3197 = _3055;
                    _3198 = _3057;
                    _3199 = _3059;
                    _3200 = _3061;
                    _3201 = _3202;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
        }
        uvec4 _3064 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3065 = _3064.z;
        uint _3067 = (_3065 >> 8u) & 15u;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        if (((4294967295u << _3067) & _2970) == 0u)
        {
            _3163 = _3050;
            _3165 = _3052;
            _3167 = _3054;
            _3169 = _3056;
            _3171 = _3058;
            _3173 = _3060;
        }
        else
        {
            float _3188 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
            float _3189 = _3188 * _2048;
            float _3190 = _3188 * _2049;
            float _3191 = _3188 * _2050;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3067 < ((_3065 >> 12u) & 15u))
            {
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3302 = _3050;
                float _3303 = _3052;
                float _3304 = _3054;
                float _3305 = _3056;
                float _3306 = _3058;
                float _3307 = _3060;
                uint _3308 = _3067;
                uint _3317;
                bool _3318;
                for (;;)
                {
                    _3317 = texelFetch(g_lightClassification, int((((_2964 << 5u) + (_2950 << 9u)) + (_3308 << 2u)) >> 2u)).x;
                    _3318 = _3317 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3318)
                    {
                        frontier_phi_72_pred = _3307;
                        frontier_phi_72_pred_1 = _3306;
                        frontier_phi_72_pred_2 = _3305;
                        frontier_phi_72_pred_3 = _3304;
                        frontier_phi_72_pred_4 = _3303;
                        frontier_phi_72_pred_5 = _3302;
                    }
                    else
                    {
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3514 = _3302;
                        float _3515 = _3303;
                        float _3516 = _3304;
                        float _3517 = _3305;
                        float _3518 = _3306;
                        float _3519 = _3307;
                        uint _3520 = _3317;
                        uint _3521;
                        vec4 _3546;
                        float _3547;
                        vec4 _3562;
                        vec3 _3574;
                        vec4 _3589;
                        vec4 _3604;
                        float _3650;
                        bool _3651;
                        for (;;)
                        {
                            uint _3531 = ((_3308 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3520));
                            _3521 = (_3520 + 4294967295u) & _3520;
                            uint _3533 = _3531 * 40u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3547 = _3546.w;
                            uint _3549 = (_3531 * 40u) + 4u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3531 * 40u) + 8u;
                            _3574 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x));
                            uint _3576 = (_3531 * 40u) + 16u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3591 = (_3531 * 40u) + 20u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3606 = (_3531 * 40u) + 24u;
                            vec4 _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3625 = (_3531 * 40u) + 28u;
                            vec4 _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            _3650 = fma(_2050, _3638.z, fma(_2049, _3638.y, _3638.x * _2048)) + _3638.w;
                            _3651 = !((fma(_2050, _3619.z, fma(_2049, _3619.y, _3619.x * _2048)) + _3619.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3651)
                            {
                                float _3678 = _3546.x - _2048;
                                float _3679 = _3546.y - _2049;
                                float _3680 = _3546.z - _2050;
                                float _3681 = dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680));
                                float _3684 = inversesqrt(_3681);
                                float _3685 = _3684 * _3678;
                                float _3686 = _3684 * _3679;
                                float _3687 = _3684 * _3680;
                                float _3691 = 1.0 - (_3681 / (_3547 * _3547));
                                float _4855 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3696 = sqrt(_3681) * _3562.w;
                                float _3698 = 1.39999997615814208984375 / (_3696 + 1.39999997615814208984375);
                                float _3699 = _3698 * _3698;
                                float _3702 = ((1.0 - _3699) * dot(vec3(_3685, _3686, _3687), vec3(_936, _939, _942))) + _3699;
                                float _3705 = _3696 * _3696;
                                float _3709 = (fma(_2050, _3589.z, fma(_2049, _3589.y, _3589.x * _2048)) + _3589.w) / _3650;
                                float _3710 = (fma(_2050, _3604.z, fma(_2049, _3604.y, _3604.x * _2048)) + _3604.w) / _3650;
                                float _3714 = 1.0 - dot(vec2(_3709, _3710), vec2(_3709, _3710));
                                float _4871 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3716 = _3715 * (((isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0))) * _3692) / ((_3705 * 0.699999988079071044921875) + 1.0));
                                float _3728 = exp2(log2(1.0 / ((_3705 * 3.5) + 5.0)) * 0.25);
                                float _3729 = 1.0 - _996;
                                float _3736 = sqrt(1.0 - ((1.0 - (_3729 * _3729)) * (1.0 - (_3728 * _3728))));
                                float _3737 = _3736 * _3736;
                                float _3738 = _3737 * _3737;
                                float _3739 = _3685 - _3189;
                                float _3740 = _3686 - _3190;
                                float _3741 = _3687 - _3191;
                                float _3745 = inversesqrt(dot(vec3(_3739, _3740, _3741), vec3(_3739, _3740, _3741)));
                                float _3749 = dot(vec3(_936, _939, _942), vec3((-0.0) - _3189, (-0.0) - _3190, (-0.0) - _3191));
                                float _4882 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3752 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3753 = dot(vec3(_936, _939, _942), vec3(_3745 * _3739, _3745 * _3740, _3745 * _3741));
                                float _4893 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3756 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3760 = ((_3756 * _3756) * (_3738 + (-1.0))) + 1.0;
                                float _3761 = _3698 * _3737;
                                float _3762 = _3761 * _3761;
                                float _3768 = ((1.0 - _3762) * dot(vec3(_936, _939, _942), vec3(_3685, _3686, _3687))) + _3762;
                                float _4904 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3769 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3770 = 1.0 - _3737;
                                float _3780 = (0.5 / (((_3769 * ((_3752 * _3770) + _3737)) + 9.9999999392252902907785028219223e-09) + (((_3769 * _3770) + _3737) * _3752))) * _3769;
                                float _4915 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3790 = (_3715 * _3692) * (((_3738 * 3.1415927410125732421875) * (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) / ((_3760 * _3760) * ((_3705 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3716 * _3562.y;
                                frontier_phi_78_pred_1 = _3716 * _3562.x;
                                frontier_phi_78_pred_2 = _3790 * _3574.z;
                                frontier_phi_78_pred_3 = _3790 * _3574.y;
                                frontier_phi_78_pred_4 = _3790 * _3574.x;
                                frontier_phi_78_pred_5 = _3716 * _3562.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3798 = frontier_phi_78_pred;
                            _3797 = frontier_phi_78_pred_1;
                            _3796 = frontier_phi_78_pred_2;
                            _3795 = frontier_phi_78_pred_3;
                            _3794 = frontier_phi_78_pred_4;
                            _3799 = frontier_phi_78_pred_5;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            _3506 = _3799 + _3519;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            _3503 = _3796 + _3516;
                            if (_3521 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3521;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3506;
                        frontier_phi_72_pred_1 = _3505;
                        frontier_phi_72_pred_2 = _3504;
                        frontier_phi_72_pred_3 = _3503;
                        frontier_phi_72_pred_4 = _3502;
                        frontier_phi_72_pred_5 = _3501;
                    }
                    _3174 = frontier_phi_72_pred;
                    _3172 = frontier_phi_72_pred_1;
                    _3170 = frontier_phi_72_pred_2;
                    _3168 = frontier_phi_72_pred_3;
                    _3166 = frontier_phi_72_pred_4;
                    _3164 = frontier_phi_72_pred_5;
                    uint _3309 = _3308 + 1u;
                    if (_3309 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3302 = _3164;
                        _3303 = _3166;
                        _3304 = _3168;
                        _3305 = _3170;
                        _3306 = _3172;
                        _3307 = _3174;
                        _3308 = _3309;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3174;
                frontier_phi_60_61_ladder_1 = _3172;
                frontier_phi_60_61_ladder_2 = _3168;
                frontier_phi_60_61_ladder_3 = _3166;
                frontier_phi_60_61_ladder_4 = _3164;
                frontier_phi_60_61_ladder_5 = _3170;
            }
            else
            {
                frontier_phi_60_61_ladder = _3060;
                frontier_phi_60_61_ladder_1 = _3058;
                frontier_phi_60_61_ladder_2 = _3054;
                frontier_phi_60_61_ladder_3 = _3052;
                frontier_phi_60_61_ladder_4 = _3050;
                frontier_phi_60_61_ladder_5 = _3056;
            }
            _3163 = frontier_phi_60_61_ladder_4;
            _3165 = frontier_phi_60_61_ladder_3;
            _3167 = frontier_phi_60_61_ladder_2;
            _3169 = frontier_phi_60_61_ladder_5;
            _3171 = frontier_phi_60_61_ladder_1;
            _3173 = frontier_phi_60_61_ladder;
        }
        float _3178 = isnan(1.0) ? _980 : (isnan(_980) ? 1.0 : min(_980, 1.0));
        _2983 = (_3178 * _3169) + _2514;
        _2985 = (_3178 * _3171) + _2516;
        _2987 = (_3178 * _3173) + _2518;
        _2989 = ((_3163 * 0.039999999105930328369140625) * _3178) + _2837;
        _2991 = ((_3165 * 0.039999999105930328369140625) * _3178) + _2839;
        _2993 = ((_3167 * 0.039999999105930328369140625) * _3178) + _2841;
    }
    else
    {
        _2983 = _2514;
        _2985 = _2516;
        _2987 = _2518;
        _2989 = _2837;
        _2991 = _2839;
        _2993 = _2841;
    }
    float _4931 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4942 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4953 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    uint _3013 = _272 + 6u;
    float _3021 = _917 / cbSceneParam._m0[86u].x;
    float _3022 = _918 / cbSceneParam._m0[86u].y;
    vec4 _3036 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3021, _3022, (log2((isnan(cbSceneParam._m0[77u].w) ? _850 : (isnan(_850) ? cbSceneParam._m0[77u].w : min(_850, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3038 = _3036.x;
    float _3039 = _3036.y;
    float _3040 = _3036.z;
    float _3041 = _3036.w;
    float _3113;
    float _3115;
    float _3117;
    float _3119;
    if (_850 > cbSceneParam._m0[78u].w)
    {
        float _3075 = isnan(_850) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _850 : min(cbSceneParam._m0[80u].w, _850));
        float _3076 = _3075 / _850;
        float _3087 = _3076 * _902;
        float _3088 = _903 * _3076;
        float _3089 = (-0.0) - _3088;
        float _3091 = _3076 * _904;
        float _3093 = (cbSceneParam._m0[77u].w * _3089) / _3075;
        float _3094 = _3093 + cbSceneParam._m0[79u].w;
        float _3095 = cbSceneParam._m0[79u].w - _3088;
        float _3101 = sqrt(((_3087 * _3087) + (_3088 * _3088)) + (_3091 * _3091));
        float _3104 = (1.0 - (cbSceneParam._m0[77u].w / _3075)) * _3101;
        float _3109 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3111 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3264;
        if (abs((_3089 - _3093) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3264 = ((((_3094 > 0.0) ? exp2(_3109 * _3094) : (2.0 - exp2(_3111 * _3094))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3104;
        }
        else
        {
            float _3224 = 1.0 / cbSceneParam._m0[80u].x;
            float _3225 = isnan(_3095) ? _3094 : (isnan(_3094) ? _3095 : max(_3094, _3095));
            float _3226 = isnan(_3095) ? _3094 : (isnan(_3094) ? _3095 : min(_3094, _3095));
            float _3235 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : min(_3225, 0.0));
            float _3236 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : min(_3226, 0.0));
            _3264 = ((abs(_3101 / _3089) * cbSceneParam._m0[80u].y) * ((((_3235 - _3236) * 2.0) - ((exp2(_3109 * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0)))) - exp2(_3109 * (isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))))) * _3224)) - ((exp2(_3111 * _3235) - exp2(_3111 * _3236)) * _3224))) + (_3104 * cbSceneParam._m0[80u].z);
        }
        vec4 _3266 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3021, _3022, 1.0), 0.0);
        float _3275 = exp2((_3264 * (-1.44269502162933349609375)) * (1.0 - _3266.w));
        float _3276 = log2(_3275);
        float _3292 = log2(_3041);
        _3113 = (exp2(_3292 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].x)) * _3266.x) / cbSceneParam._m0[78u].x)) + _3038;
        _3115 = (exp2(_3292 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].y)) * _3266.y) / cbSceneParam._m0[78u].y)) + _3039;
        _3117 = (exp2(_3292 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].z)) * _3266.z) / cbSceneParam._m0[78u].z)) + _3040;
        _3119 = _3275 * _3041;
    }
    else
    {
        _3113 = _3038;
        _3115 = _3039;
        _3117 = _3040;
        _3119 = _3041;
    }
    float _3131 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3132 = _3131 == 3.0;
    float _3133 = log2(_3119);
    float _3140 = exp2(_3133 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2983 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _980))) + ((_2989 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1784)) * cbPerFrame._m0[3u].x));
    float _3141 = exp2(_3133 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2985 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _980))) + ((_2991 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1784)) * cbPerFrame._m0[3u].x));
    float _3142 = exp2(_3133 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2987 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _980))) + ((_2993 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1784)) * cbPerFrame._m0[3u].x));
    float _3151 = (_3131 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3151 * (_3132 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3113)));
    SV_Target.y = _3151 * (_3132 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3115)));
    SV_Target.z = _3151 * (_3132 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3117)));
    SV_Target.w = cbInstanceData._m0[_3013].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3013].w;
}


