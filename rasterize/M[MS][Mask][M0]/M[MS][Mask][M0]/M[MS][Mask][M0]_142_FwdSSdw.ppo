#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1391;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _310.x * cbMtdParam._m0[11u].x;
    float _316 = _310.y * cbMtdParam._m0[11u].y;
    float _317 = _310.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _356.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].z) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3717 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _435 = (_428 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _436 = (_428 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _437 = (_428 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _356.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[24u].z) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3728 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _508 = (_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435;
    float _509 = (_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436;
    float _510 = (_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437;
    vec4 _528 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _266) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _267) + cbTextureTilingScale._m0[24u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _547 = _545.x;
    float _557 = dot(vec4(_547, _545.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _569 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _356.z) * 2.0) - ((((_547 - _557) * cbMtdParam._m0[24u].z) + _557) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3739 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _583 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _286.x) * ((_570 * ((_528.x * cbMtdParam._m0[14u].x) - _508)) + _508);
    float _586 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _286.y) * ((_570 * ((_528.y * cbMtdParam._m0[14u].y) - _509)) + _509);
    float _589 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _286.z) * ((_570 * ((_528.z * cbMtdParam._m0[14u].z) - _510)) + _510);
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _644 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _646 = _644.x;
    float _647 = _644.y;
    float _648 = _644.z;
    float _655 = ((_627.x - _646) * _428) + _646;
    float _656 = ((_627.y - _647) * _428) + _647;
    float _657 = ((_627.z - _648) * _428) + _648;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _680 = ((_669.x - _655) * _501) + _655;
    float _681 = ((_669.y - _656) * _501) + _656;
    float _682 = ((_669.z - _657) * _501) + _657;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _266) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _267) + cbTextureTilingScale._m0[23u].w));
    float _707 = ((_694.z - _682) * _570) + _682;
    float _710 = ((((_694.x - _680) * _570) + _680) * 2.0) + (-1.0);
    float _712 = ((((_694.y - _681) * _570) + _681) * 2.0) + (-1.0);
    float _713 = dot(vec2(_710, _712), vec2(_710, _712));
    float _3750 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _718 = sqrt(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))));
    vec4 _732 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _744 = (((_732.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _710;
    float _745 = (((_732.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _712;
    float _748 = fma(_718, _234, fma(_745, _241, _744 * _227));
    float _751 = fma(_718, _235, fma(_745, _242, _744 * _228));
    float _754 = fma(_718, _236, fma(_745, _243, _744 * _229));
    float _758 = inversesqrt(dot(vec3(_748, _751, _754), vec3(_748, _751, _754)));
    vec4 _785 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _787 = _785.x;
    float _788 = 1.0 - _787;
    float _794 = (cbMtdParam._m0[19u].x + dot(vec4(_758 * _748, _758 * _751, _758 * _754, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_787 - _788) * cbMtdParam._m0[24u].w) + _788) * cbMtdParam._m0[21u].z);
    float _3761 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _795 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _802 = (_795 * ((_607.x * cbMtdParam._m0[18u].x) - _583)) + _583;
    float _803 = (_795 * ((_607.y * cbMtdParam._m0[18u].y) - _586)) + _586;
    float _804 = (_795 * ((_607.z * cbMtdParam._m0[18u].z) - _589)) + _589;
    float _808 = (cbMtdParam._m0[19u].w * (_732.z - _707)) + _707;
    vec4 _821 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _828 = (_821.x * 2.0) + (-1.0);
    float _829 = (_821.y * 2.0) + (-1.0);
    float _830 = dot(vec2(_828, _829), vec2(_828, _829));
    float _3772 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _838 = ((_821.z - _808) * _795) + _808;
    float _848 = ((sqrt(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) - _718) * _795) + _718;
    float _851 = (((_828 - _744) * _795) + _744) + (cbMtdParam._m0[21u].x * _744);
    float _852 = (((_829 - _745) * _795) + _745) + (cbMtdParam._m0[21u].x * _745);
    float _856 = cbMtdParam._m0[22u].x + _732.w;
    float _859 = fma(_848, _234, fma(_852, _241, _851 * _227));
    float _862 = fma(_848, _235, fma(_852, _242, _851 * _228));
    float _865 = fma(_848, _236, fma(_852, _243, _851 * _229));
    float _869 = inversesqrt(dot(vec3(_859, _862, _865), vec3(_859, _862, _865)));
    float _870 = _869 * _859;
    float _871 = _869 * _862;
    float _872 = _869 * _865;
    float _3783 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _873 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _3805 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _3816 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _3827 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _891 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _942 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _932);
    float _943 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _932);
    float _944 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _932);
    float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
    float _949 = _942 * _948;
    float _950 = _943 * _948;
    float _951 = _944 * _948;
    float _957 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _958 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _976 = fma(_872, cbSceneParam._m0[5u].z, fma(_871, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _870));
    float _979 = fma(_872, cbSceneParam._m0[6u].z, fma(_871, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _870));
    float _982 = fma(_872, cbSceneParam._m0[7u].z, fma(_871, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _870));
    uint _996 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1002 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_996].x;
    float _1003 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_996].y;
    float _1004 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_996].z;
    float _3838 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    vec4 _1016 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _957, cbSceneParam._m0[86u].y * _958));
    float _1020 = ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * TEXCOORD_5.w) * _1016.x;
    float _1021 = dot(vec3(_870, _871, _872), vec3(_949, _950, _951));
    float _1024 = _1021 * 2.0;
    float _1028 = (_1024 * _870) - _949;
    float _1029 = (_1024 * _871) - _950;
    float _1030 = (_1024 * _872) - _951;
    float _1034 = abs(dot(vec3(_949, _950, _951), vec3(_870, _871, _872)));
    float _3871 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1036 = sqrt(_873);
    float _1049 = exp2((_1036 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1036 * 3.0));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1390;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1115 = fma(_1089, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081));
        float _1119 = fma(_1089, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081));
        float _1123 = fma(_1089, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081));
        float _1148 = _1081 + _870;
        float _1149 = _1085 + _871;
        float _1150 = _1089 + _872;
        float _1160 = fma(_1150, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148)) - _1115;
        float _1161 = fma(_1150, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148)) - _1119;
        float _1162 = fma(_1150, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148)) - _1123;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1115 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1119 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[34u].z) + ((((((_1123 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1218 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1184.x + (-0.5));
        float _1220 = _1218 * (_1184.y + (-0.5));
        float _1221 = _1218 * (_1184.z + (-0.5));
        float _1228 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1191.x + (-0.5));
        float _1230 = _1228 * (_1191.y + (-0.5));
        float _1231 = _1228 * (_1191.z + (-0.5));
        float _1238 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1198.x + (-0.5));
        float _1240 = _1238 * (_1198.y + (-0.5));
        float _1241 = _1238 * (_1198.z + (-0.5));
        float _1248 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1205.x + (-0.5));
        float _1250 = _1248 * (_1205.y + (-0.5));
        float _1251 = _1248 * (_1205.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1272 = (dot(vec3(_870, _871, _872), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1282 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3919 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1284 + 1.0))) + _1289) * _1252;
        float _1299 = _1220 * 0.5;
        float _1300 = _1230 * 0.5;
        float _1301 = _1240 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_870, _871, _872), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3952 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1326 + 1.0))) + _1331) * _1253;
        float _1341 = _1221 * 0.5;
        float _1342 = _1231 * 0.5;
        float _1343 = _1241 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_870, _871, _872), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3985 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1368 + 1.0))) + _1373) * _1254;
        _1390 = _1221;
        _1392 = _1220;
        _1393 = _1219;
        _1394 = _1231;
        _1395 = _1230;
        _1396 = _1229;
        _1397 = _1241;
        _1398 = _1240;
        _1399 = _1239;
        _1400 = _1254;
        _1401 = _1253;
        _1402 = _1252;
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1391;
        _1392 = _1391;
        _1393 = _1391;
        _1394 = _1391;
        _1395 = _1391;
        _1396 = _1391;
        _1397 = _1391;
        _1398 = _1391;
        _1399 = _1391;
        _1400 = _1391;
        _1401 = _1391;
        _1402 = _1391;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1428 = fma(_1089, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1081));
        float _1432 = fma(_1089, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1081));
        float _1436 = fma(_1089, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1081));
        float _1459 = _1081 + _870;
        float _1460 = _1085 + _871;
        float _1461 = _1089 + _872;
        float _1471 = fma(_1461, cbModelParam._m0[30u].z, fma(_1460, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1459)) - _1428;
        float _1472 = fma(_1461, cbModelParam._m0[31u].z, fma(_1460, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1459)) - _1432;
        float _1473 = fma(_1461, cbModelParam._m0[32u].z, fma(_1460, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1459)) - _1436;
        float _1477 = inversesqrt(dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473)));
        float _1490 = ((_1477 * _1471) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1428 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1491 = ((_1477 * _1472) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1432 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1492 = ((_1477 * _1473) / cbModelParam._m0[35u].z) + ((((((_1436 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        float _1527 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1494.x + (-0.5));
        float _1529 = _1527 * (_1494.y + (-0.5));
        float _1530 = _1527 * (_1494.z + (-0.5));
        float _1537 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1501.x + (-0.5));
        float _1539 = _1537 * (_1501.y + (-0.5));
        float _1540 = _1537 * (_1501.z + (-0.5));
        float _1547 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1508.x + (-0.5));
        float _1549 = _1547 * (_1508.y + (-0.5));
        float _1550 = _1547 * (_1508.z + (-0.5));
        float _1557 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1515.x + (-0.5));
        float _1559 = _1557 * (_1515.y + (-0.5));
        float _1560 = _1557 * (_1515.z + (-0.5));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = _1528 * 0.5;
        float _1565 = _1538 * 0.5;
        float _1566 = _1548 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_870, _871, _872), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4048 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1591 + 1.0))) + _1596) * _1561;
        float _1606 = _1529 * 0.5;
        float _1607 = _1539 * 0.5;
        float _1608 = _1549 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_870, _871, _872), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4081 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1633 + 1.0))) + _1638) * _1562;
        float _1648 = _1530 * 0.5;
        float _1649 = _1540 * 0.5;
        float _1650 = _1550 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_870, _871, _872), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4114 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1675 + 1.0))) + _1680) * _1563;
        _1697 = _1530;
        _1698 = _1529;
        _1699 = _1528;
        _1700 = _1540;
        _1701 = _1539;
        _1702 = _1538;
        _1703 = _1550;
        _1704 = _1549;
        _1705 = _1548;
        _1706 = _1563;
        _1707 = _1562;
        _1708 = _1561;
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
    }
    else
    {
        _1697 = _1391;
        _1698 = _1391;
        _1699 = _1391;
        _1700 = _1391;
        _1701 = _1391;
        _1702 = _1391;
        _1703 = _1391;
        _1704 = _1391;
        _1705 = _1391;
        _1706 = _1391;
        _1707 = _1391;
        _1708 = _1391;
        _1709 = 0.0;
        _1710 = 0.0;
        _1711 = 0.0;
    }
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1403)) + _1403;
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1404)) + _1404;
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1405)) + _1405;
    float _1744 = fma(_1723, cbSceneParam._m0[89u].z, fma(_1722, cbSceneParam._m0[89u].y, _1721 * cbSceneParam._m0[89u].x));
    float _1747 = fma(_1723, cbSceneParam._m0[90u].z, fma(_1722, cbSceneParam._m0[90u].y, _1721 * cbSceneParam._m0[90u].x));
    float _1750 = fma(_1723, cbSceneParam._m0[91u].z, fma(_1722, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1721));
    float _1765 = _1028 * 0.5;
    float _1766 = _1029 * 0.5;
    float _1767 = _1030 * 0.5;
    float _1768 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1771 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1774 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1808;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1781 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1390, _1394, _1397, _1400));
        float _1785 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1392, _1395, _1398, _1401));
        float _1789 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1796 = dot(vec4(cbModelParam._m0[39u]), vec4(_1765, _1766, _1767, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1819;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1810 = dot(vec4(cbModelParam._m0[40u]), vec4(_1765, _1766, _1767, 1.0));
        _1819 = dot(vec3(isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1819 = 1.0;
    }
    float _1823 = (_1819 * cbModelParam._m0[1u].x) + (_1808 * (1.0 - cbModelParam._m0[1u].x));
    float _1833 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _873);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1833 : min(cbModelParam._m0[25u].z, _1833));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1881 = fma(_1089, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081)) + cbModelParam._m0[13u].w;
        float _1885 = fma(_1089, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081)) + cbModelParam._m0[14u].w;
        float _1889 = fma(_1089, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081)) + cbModelParam._m0[15u].w;
        float _1892 = fma(_1030, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028));
        float _1895 = fma(_1030, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028));
        float _1898 = fma(_1030, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028));
        float _1926;
        if (_1892 > 0.0)
        {
            _1926 = abs((1.0 - _1881) / _1892);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1881 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1926 = frontier_phi_14_12_ladder;
        }
        float _2147;
        if (_1895 > 0.0)
        {
            _2147 = abs((1.0 - _1885) / _1895);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1885 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2147 = frontier_phi_23_19_ladder;
        }
        float _2393;
        if (_1898 > 0.0)
        {
            _2393 = abs((1.0 - _1889) / _1898);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1889 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2393 = frontier_phi_35_30_ladder;
        }
        float _2395 = isnan(_2147) ? _1926 : (isnan(_1926) ? _2147 : min(_1926, _2147));
        float _2396 = isnan(_2393) ? _2395 : (isnan(_2395) ? _2393 : min(_2395, _2393));
        float _2400 = (_2396 * _1892) + _1881;
        float _2401 = (_2396 * _1895) + _1885;
        float _2402 = (_2396 * _1898) + _1889;
        float _2403 = _2396 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2403;
        float _2407 = _2403 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 > _2407) || ((_2401 < _2405) || ((_2400 < _2405) || (_2400 > _2407))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2402, cbModelParam._m0[9u].z, fma(_2401, cbModelParam._m0[9u].y, _2400 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2402, cbModelParam._m0[10u].z, fma(_2401, cbModelParam._m0[10u].y, _2400 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2402, cbModelParam._m0[11u].z, fma(_2401, cbModelParam._m0[11u].y, _2400 * cbModelParam._m0[11u].x))), _1834);
            frontier_phi_13_35_ladder = _2526.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2526.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2526.x * cbModelParam._m0[1u].y;
        }
        _1914 = frontier_phi_13_35_ladder_2;
        _1916 = frontier_phi_13_35_ladder_1;
        _1918 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1028, _1029, _1030), _1834);
        _1914 = _1902.x * cbModelParam._m0[1u].y;
        _1916 = _1902.y * cbModelParam._m0[1u].y;
        _1918 = _1902.z * cbModelParam._m0[1u].y;
    }
    float _1922 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _873);
    float _1923 = isnan(_1922) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1922 : min(cbModelParam._m0[25u].w, _1922));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1976 = fma(_1089, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081)) + cbModelParam._m0[21u].w;
        float _1980 = fma(_1089, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081)) + cbModelParam._m0[22u].w;
        float _1984 = fma(_1089, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081)) + cbModelParam._m0[23u].w;
        float _1987 = fma(_1030, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028));
        float _1990 = fma(_1030, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028));
        float _1993 = fma(_1030, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028));
        float _2152;
        if (_1987 > 0.0)
        {
            _2152 = abs((1.0 - _1976) / _1987);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1976 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2152 = frontier_phi_25_21_ladder;
        }
        float _2420;
        if (_1990 > 0.0)
        {
            _2420 = abs((1.0 - _1980) / _1990);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1980 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2420 = frontier_phi_37_32_ladder;
        }
        float _2625;
        if (_1993 > 0.0)
        {
            _2625 = abs((1.0 - _1984) / _1993);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1984 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2625 = frontier_phi_46_43_ladder;
        }
        float _2627 = isnan(_2420) ? _2152 : (isnan(_2152) ? _2420 : min(_2152, _2420));
        float _2628 = isnan(_2625) ? _2627 : (isnan(_2627) ? _2625 : min(_2627, _2625));
        float _2632 = (_2628 * _1987) + _1976;
        float _2633 = (_2628 * _1990) + _1980;
        float _2634 = (_2628 * _1993) + _1984;
        float _2635 = _2628 * 9.9999997473787516355514526367188e-05;
        float _2636 = (-1.0) - _2635;
        float _2638 = _2635 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2634 > _2638) || ((_2634 < _2636) || ((_2633 > _2638) || ((_2633 < _2636) || ((_2632 < _2636) || (_2632 > _2638))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2634, cbModelParam._m0[17u].z, fma(_2633, cbModelParam._m0[17u].y, _2632 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2634, cbModelParam._m0[18u].z, fma(_2633, cbModelParam._m0[18u].y, _2632 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2634, cbModelParam._m0[19u].z, fma(_2633, cbModelParam._m0[19u].y, _2632 * cbModelParam._m0[19u].x))), _1923);
            frontier_phi_22_46_ladder = _2833.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2833.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2833.x * cbModelParam._m0[1u].z;
        }
        _2012 = frontier_phi_22_46_ladder_2;
        _2014 = frontier_phi_22_46_ladder_1;
        _2016 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1028, _1029, _1030), _1923);
        _2012 = _1996.x * cbModelParam._m0[1u].z;
        _2014 = _1996.y * cbModelParam._m0[1u].z;
        _2016 = _1996.z * cbModelParam._m0[1u].z;
    }
    float _2028 = ((((1.0 - _1049) * ((_1036 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1049 * _1036)) * _1020;
    float _2029 = _2028 * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2030 = _2028 * ((cbModelParam._m0[1u].w * (_2014 - _1916)) + _1916);
    float _2031 = _2028 * ((cbModelParam._m0[1u].w * (_2016 - _1918)) + _1918);
    float _2034 = fma(_2031, cbSceneParam._m0[89u].z, fma(_2030, cbSceneParam._m0[89u].y, _2029 * cbSceneParam._m0[89u].x));
    float _2037 = fma(_2031, cbSceneParam._m0[90u].z, fma(_2030, cbSceneParam._m0[90u].y, _2029 * cbSceneParam._m0[90u].x));
    float _2040 = fma(_2031, cbSceneParam._m0[91u].z, fma(_2030, cbSceneParam._m0[91u].y, _2029 * cbSceneParam._m0[91u].x));
    vec4 _2048 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_957, _958));
    float _2050 = _2048.w;
    float _2062 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2050);
    float _2063 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2050);
    float _2064 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2050);
    uvec4 _2068 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2070 = _2068.x * 14u;
    uint _2071 = _2070 + 13u;
    float _2078 = _1020 + (-1.0);
    float _2083 = (cbLight._m0[_2071].x * _2078) + 1.0;
    float _2084 = (cbLight._m0[_2071].y * _2078) + 1.0;
    float _2085 = (cbLight._m0[_2071].z * _2078) + 1.0;
    float _2086 = (cbLight._m0[_2071].w * _2078) + 1.0;
    uint _2087 = _2070 + 5u;
    float _2093 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
    uint _2097 = _2070 + 4u;
    float _2106 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
    uint _2110 = _2070 | 1u;
    float _2121 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_870, _871, _872));
    float _2124 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_870, _871, _872));
    float _4250 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _4261 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2129 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _2131 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.3183098733425140380859375;
    float _2138 = ((cbLight._m0[_2087].x * _2093) * _2131) + (((cbLight._m0[_2097].x * _2062) * _2106) * _2129);
    float _2139 = ((_2093 * cbLight._m0[_2087].y) * _2131) + (((cbLight._m0[_2097].y * _2063) * _2106) * _2129);
    float _2140 = ((_2093 * cbLight._m0[_2087].z) * _2131) + (((cbLight._m0[_2097].z * _2064) * _2106) * _2129);
    uvec4 _2144 = floatBitsToUint(cbLight._m0[_2070 + 12u]);
    bool _2146 = _2144.x == 0u;
    float _2157;
    float _2159;
    float _2161;
    if (_2146)
    {
        _2157 = _2138;
        _2159 = _2139;
        _2161 = _2140;
    }
    else
    {
        uint _2165 = _2070 + 6u;
        float _2181 = (dot(vec3(cbLight._m0[_2070 + 2u].xyz), vec3(_870, _871, _872)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4272 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2184 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2157 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _2138;
        _2159 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _2139;
        _2161 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _2140;
    }
    bool _2164 = _2144.y == 0u;
    float _2202;
    float _2204;
    float _2206;
    if (_2164)
    {
        _2202 = _2157;
        _2204 = _2159;
        _2206 = _2161;
    }
    else
    {
        uint _2364 = _2070 + 7u;
        float _2380 = (dot(vec3(cbLight._m0[_2070 + 3u].xyz), vec3(_870, _871, _872)) * 0.5) + 0.5;
        float _2381 = _2380 * _2380;
        float _4288 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2382 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2383 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2202 = (((cbLight._m0[_2364].x * 0.3183098733425140380859375) * _2382) * _2383) + _2157;
        _2204 = (((cbLight._m0[_2364].y * 0.3183098733425140380859375) * _2382) * _2383) + _2159;
        _2206 = (((cbLight._m0[_2364].z * 0.3183098733425140380859375) * _2382) * _2383) + _2161;
    }
    uint _2209 = _2070 + 8u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2070].w)) * _873) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_2070].x + _949;
    float _2225 = cbLight._m0[_2070].y + _950;
    float _2226 = cbLight._m0[_2070].z + _951;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2070].xyz));
    float _4304 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _2238 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2239 = dot(vec3(_870, _871, _872), vec3(_2231, _2232, _2233));
    float _4326 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2243 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_2231, _2232, _2233));
    float _4337 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2247 = _2223 * _2223;
    float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
    float _2262 = (exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2263 = 1.0 - _2223;
    float _2274 = (0.5 / (((_2238 * ((_2237 * _2263) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2263) + _2223) * _2237))) * _2237;
    float _4348 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2276 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
    uint _2290 = _2070 + 9u;
    float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _873) * 0.949999988079071044921875);
    float _2302 = _2301 * _2301;
    float _2303 = cbLight._m0[_2110].x + _949;
    float _2304 = cbLight._m0[_2110].y + _950;
    float _2305 = cbLight._m0[_2110].z + _951;
    float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
    float _2310 = _2309 * _2303;
    float _2311 = _2309 * _2304;
    float _2312 = _2309 * _2305;
    float _2313 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2110].xyz));
    float _4359 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2317 = dot(vec3(_870, _871, _872), vec3(_2310, _2311, _2312));
    float _4370 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2321 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2310, _2311, _2312));
    float _4381 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2325 = _2302 * _2302;
    float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
    float _2338 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2339 = 1.0 - _2302;
    float _2349 = (0.5 / (((_2238 * ((_2316 * _2339) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2339) + _2302) * _2316))) * _2316;
    float _4392 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2351 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
    float _2361 = (((_2338 * cbLight._m0[_2290].x) * _2351) * _2093) + ((((cbLight._m0[_2209].x * _2062) * _2262) * _2276) * _2106);
    float _2362 = (((_2338 * cbLight._m0[_2290].y) * _2351) * _2093) + ((((cbLight._m0[_2209].y * _2063) * _2262) * _2276) * _2106);
    float _2363 = (((_2338 * cbLight._m0[_2290].z) * _2351) * _2093) + ((((cbLight._m0[_2209].z * _2064) * _2262) * _2276) * _2106);
    float _2425;
    float _2427;
    float _2429;
    if (_2146)
    {
        _2425 = _2361;
        _2427 = _2362;
        _2429 = _2363;
    }
    else
    {
        uint _2431 = _2070 + 2u;
        uint _2435 = _2070 + 10u;
        float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2431].w)) * _873) * 0.949999988079071044921875);
        float _2450 = _2449 * _2449;
        float _2451 = cbLight._m0[_2431].x + _949;
        float _2452 = cbLight._m0[_2431].y + _950;
        float _2453 = cbLight._m0[_2431].z + _951;
        float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
        float _2458 = _2457 * _2451;
        float _2459 = _2457 * _2452;
        float _2460 = _2457 * _2453;
        float _2461 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2431].xyz));
        float _4403 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2465 = dot(vec3(_870, _871, _872), vec3(_2458, _2459, _2460));
        float _4414 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2469 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_2458, _2459, _2460));
        float _4425 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2473 = _2450 * _2450;
        float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
        float _2486 = (exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2487 = 1.0 - _2450;
        float _2497 = (0.5 / (((_2238 * ((_2464 * _2487) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2487) + _2450) * _2464))) * _2464;
        float _4436 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2499 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
        float _2500 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2425 = (((_2486 * cbLight._m0[_2435].x) * _2499) * _2500) + _2361;
        _2427 = (((_2486 * cbLight._m0[_2435].y) * _2499) * _2500) + _2362;
        _2429 = (((_2486 * cbLight._m0[_2435].z) * _2499) * _2500) + _2363;
    }
    float _2535;
    float _2537;
    float _2539;
    if (_2164)
    {
        _2535 = _2425;
        _2537 = _2427;
        _2539 = _2429;
    }
    else
    {
        uint _2546 = _2070 + 3u;
        uint _2550 = _2070 + 11u;
        float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2546].w)) * _873) * 0.949999988079071044921875);
        float _2565 = _2564 * _2564;
        float _2566 = cbLight._m0[_2546].x + _949;
        float _2567 = cbLight._m0[_2546].y + _950;
        float _2568 = cbLight._m0[_2546].z + _951;
        float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
        float _2573 = _2572 * _2566;
        float _2574 = _2572 * _2567;
        float _2575 = _2572 * _2568;
        float _2576 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2546].xyz));
        float _4452 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2580 = dot(vec3(_870, _871, _872), vec3(_2573, _2574, _2575));
        float _4463 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2584 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_2573, _2574, _2575));
        float _4474 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2588 = _2565 * _2565;
        float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
        float _2601 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2602 = 1.0 - _2565;
        float _2612 = (0.5 / (((_2238 * ((_2579 * _2602) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2602) + _2565) * _2579))) * _2579;
        float _4485 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2614 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
        float _2615 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2535 = (((_2601 * cbLight._m0[_2550].x) * _2614) * _2615) + _2425;
        _2537 = (((_2601 * cbLight._m0[_2550].y) * _2614) * _2615) + _2427;
        _2539 = (((_2601 * cbLight._m0[_2550].z) * _2614) * _2615) + _2429;
    }
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    if (_2068.y == 0u)
    {
        float _2690 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2690;
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2690;
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2690;
        uvec4 _2705 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2706 = _2705.x;
        uint _2717 = uint((float(_2705.y) * floor(float(uint(cbSceneParam._m0[85u].y * _958) / _2706))) + floor(float(uint(cbSceneParam._m0[85u].x * _957) / _2706)));
        float _2727 = (log2(_2693 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2728 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        uint _2731 = uint(isnan(14.0) ? _2728 : (isnan(_2728) ? 14.0 : min(_2728, 14.0)));
        uvec4 _2736 = texelFetch(g_lightClusterGridBuffer, int(((_2731 << 2u) + (_2717 << 6u)) >> 2u));
        uint _2737 = _2736.x;
        uint _2738 = _2705.z;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        if (((((1u << ((_2738 >> 4u) & 15u)) + 4294967295u) & _2737) == 0u) || ((_2738 & 240u) == 0u))
        {
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
        }
        else
        {
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            uint _2989 = 0u;
            uint _2998;
            bool _2999;
            for (;;)
            {
                _2998 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_2989 << 2u)) >> 2u)).x;
                _2999 = _2998 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2999)
                {
                    frontier_phi_61_pred = _2983;
                    frontier_phi_61_pred_1 = _2988;
                    frontier_phi_61_pred_2 = _2987;
                    frontier_phi_61_pred_3 = _2986;
                    frontier_phi_61_pred_4 = _2985;
                    frontier_phi_61_pred_5 = _2984;
                }
                else
                {
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    uint _3113;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2985;
                    _3110 = _2986;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2998;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    for (;;)
                    {
                        uint _3117 = uint(findLSB(_3113)) + (_2989 << 5u);
                        uint _3114 = (_3113 + 4294967295u) & _3113;
                        uint _3119 = _3117 * 48u;
                        vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 3u)).x));
                        uint _3139 = (_3117 * 48u) + 4u;
                        vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 3u)).x));
                        uint _3158 = (_3117 * 48u) + 8u;
                        vec3 _3169 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x));
                        float _3173 = _3133.x - _2691;
                        float _3174 = _3133.y - _2692;
                        float _3175 = _3133.z - _2693;
                        float _3176 = dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175));
                        float _3179 = inversesqrt(_3176);
                        float _3180 = _3179 * _3173;
                        float _3181 = _3179 * _3174;
                        float _3182 = _3179 * _3175;
                        float _3183 = dot(vec3(_976, _979, _982), vec3(_3180, _3181, _3182));
                        float _3188 = 1.0 - (_3176 * _3133.w);
                        float _4511 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3189 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3190 = sqrt(_3176) * _3152.w;
                        float _3193 = 1.39999997615814208984375 / (_3190 + 1.39999997615814208984375);
                        float _3194 = _3193 * _3193;
                        float _3197 = ((1.0 - _3194) * _3183) + _3194;
                        float _3200 = _3190 * _3190;
                        float _3204 = ((isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))) * _3189) / ((_3200 * 0.699999988079071044921875) + 1.0);
                        float _3208 = (-0.0) - _2691;
                        float _3209 = (-0.0) - _2692;
                        float _3210 = (-0.0) - _2693;
                        float _3214 = inversesqrt(dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210)));
                        float _3215 = _3214 * _3208;
                        float _3216 = _3214 * _3209;
                        float _3217 = _3214 * _3210;
                        float _3225 = exp2(log2(1.0 / ((_3200 * 3.5) + 5.0)) * 0.25);
                        float _3226 = 1.0 - _1036;
                        float _3233 = sqrt(1.0 - ((1.0 - (_3226 * _3226)) * (1.0 - (_3225 * _3225))));
                        float _3234 = _3233 * _3233;
                        float _3235 = _3234 * _3234;
                        float _3236 = _3215 + _3180;
                        float _3237 = _3216 + _3181;
                        float _3238 = _3217 + _3182;
                        float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                        float _3246 = dot(vec3(_976, _979, _982), vec3(_3215, _3216, _3217));
                        float _4527 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3249 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3250 = dot(vec3(_976, _979, _982), vec3(_3242 * _3236, _3242 * _3237, _3242 * _3238));
                        float _4538 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3253 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3257 = ((_3253 * _3253) * (_3235 + (-1.0))) + 1.0;
                        float _3258 = _3193 * _3234;
                        float _3259 = _3258 * _3258;
                        float _3262 = ((1.0 - _3259) * _3183) + _3259;
                        float _4549 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3263 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3264 = 1.0 - _3234;
                        float _3274 = (0.5 / (((_3263 * ((_3249 * _3264) + _3234)) + 9.9999999392252902907785028219223e-09) + (((_3263 * _3264) + _3234) * _3249))) * _3263;
                        float _4560 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3285 = (((_3235 * 3.1415927410125732421875) * (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) / ((_3257 * _3257) * ((_3200 * 2.1991131305694580078125) + 3.141590118408203125))) * _3189;
                        _3042 = (_3204 * _3152.x) + _3110;
                        _3043 = (_3204 * _3152.y) + _3111;
                        _3044 = (_3204 * _3152.z) + _3112;
                        _3039 = (_3285 * _3169.x) + _3107;
                        _3040 = (_3285 * _3169.y) + _3108;
                        _3041 = (_3285 * _3169.z) + _3109;
                        if (_3114 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3041;
                            _3110 = _3042;
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3114;
                        }
                    }
                    frontier_phi_61_pred = _3039;
                    frontier_phi_61_pred_1 = _3044;
                    frontier_phi_61_pred_2 = _3043;
                    frontier_phi_61_pred_3 = _3042;
                    frontier_phi_61_pred_4 = _3041;
                    frontier_phi_61_pred_5 = _3040;
                }
                _2839 = frontier_phi_61_pred;
                _2849 = frontier_phi_61_pred_1;
                _2847 = frontier_phi_61_pred_2;
                _2845 = frontier_phi_61_pred_3;
                _2843 = frontier_phi_61_pred_4;
                _2841 = frontier_phi_61_pred_5;
                uint _2990 = _2989 + 1u;
                if (_2990 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2983 = _2839;
                    _2984 = _2841;
                    _2985 = _2843;
                    _2986 = _2845;
                    _2987 = _2847;
                    _2988 = _2849;
                    _2989 = _2990;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
        }
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.z;
        uint _2855 = (_2853 >> 8u) & 15u;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        if (((4294967295u << _2855) & _2737) == 0u)
        {
            _2951 = _2838;
            _2953 = _2840;
            _2955 = _2842;
            _2957 = _2844;
            _2959 = _2846;
            _2961 = _2848;
        }
        else
        {
            float _2976 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
            float _2977 = _2976 * _2691;
            float _2978 = _2976 * _2692;
            float _2979 = _2976 * _2693;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2855 < ((_2853 >> 12u) & 15u))
            {
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _3090 = _2838;
                float _3091 = _2840;
                float _3092 = _2842;
                float _3093 = _2844;
                float _3094 = _2846;
                float _3095 = _2848;
                uint _3096 = _2855;
                uint _3105;
                bool _3106;
                for (;;)
                {
                    _3105 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_3096 << 2u)) >> 2u)).x;
                    _3106 = _3105 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3106)
                    {
                        frontier_phi_67_pred = _3093;
                        frontier_phi_67_pred_1 = _3094;
                        frontier_phi_67_pred_2 = _3095;
                        frontier_phi_67_pred_3 = _3092;
                        frontier_phi_67_pred_4 = _3091;
                        frontier_phi_67_pred_5 = _3090;
                    }
                    else
                    {
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3303 = _3090;
                        float _3304 = _3091;
                        float _3305 = _3092;
                        float _3306 = _3093;
                        float _3307 = _3094;
                        float _3308 = _3095;
                        uint _3309 = _3105;
                        uint _3310;
                        vec4 _3335;
                        float _3336;
                        vec4 _3351;
                        vec3 _3363;
                        vec4 _3378;
                        vec4 _3393;
                        float _3439;
                        bool _3440;
                        for (;;)
                        {
                            uint _3320 = ((_3096 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3309));
                            _3310 = (_3309 + 4294967295u) & _3309;
                            uint _3322 = _3320 * 40u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3336 = _3335.w;
                            uint _3338 = (_3320 * 40u) + 4u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3320 * 40u) + 8u;
                            _3363 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x));
                            uint _3365 = (_3320 * 40u) + 16u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3320 * 40u) + 20u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3320 * 40u) + 24u;
                            vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3414 = (_3320 * 40u) + 28u;
                            vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            _3439 = fma(_2693, _3427.z, fma(_2692, _3427.y, _3427.x * _2691)) + _3427.w;
                            _3440 = !((fma(_2693, _3408.z, fma(_2692, _3408.y, _3408.x * _2691)) + _3408.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3440)
                            {
                                float _3467 = _3335.x - _2691;
                                float _3468 = _3335.y - _2692;
                                float _3469 = _3335.z - _2693;
                                float _3470 = dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469));
                                float _3473 = inversesqrt(_3470);
                                float _3474 = _3473 * _3467;
                                float _3475 = _3473 * _3468;
                                float _3476 = _3473 * _3469;
                                float _3480 = 1.0 - (_3470 / (_3336 * _3336));
                                float _4571 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3485 = sqrt(_3470) * _3351.w;
                                float _3487 = 1.39999997615814208984375 / (_3485 + 1.39999997615814208984375);
                                float _3488 = _3487 * _3487;
                                float _3491 = ((1.0 - _3488) * dot(vec3(_3474, _3475, _3476), vec3(_976, _979, _982))) + _3488;
                                float _3494 = _3485 * _3485;
                                float _3498 = (fma(_2693, _3378.z, fma(_2692, _3378.y, _3378.x * _2691)) + _3378.w) / _3439;
                                float _3499 = (fma(_2693, _3393.z, fma(_2692, _3393.y, _3393.x * _2691)) + _3393.w) / _3439;
                                float _3503 = 1.0 - dot(vec2(_3498, _3499), vec2(_3498, _3499));
                                float _4587 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3505 = _3504 * (((isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * _3481) / ((_3494 * 0.699999988079071044921875) + 1.0));
                                float _3517 = exp2(log2(1.0 / ((_3494 * 3.5) + 5.0)) * 0.25);
                                float _3518 = 1.0 - _1036;
                                float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                                float _3526 = _3525 * _3525;
                                float _3527 = _3526 * _3526;
                                float _3528 = _3474 - _2977;
                                float _3529 = _3475 - _2978;
                                float _3530 = _3476 - _2979;
                                float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                                float _3538 = dot(vec3(_976, _979, _982), vec3((-0.0) - _2977, (-0.0) - _2978, (-0.0) - _2979));
                                float _4598 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3542 = dot(vec3(_976, _979, _982), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                                float _4609 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                                float _3550 = _3487 * _3526;
                                float _3551 = _3550 * _3550;
                                float _3557 = ((1.0 - _3551) * dot(vec3(_976, _979, _982), vec3(_3474, _3475, _3476))) + _3551;
                                float _4620 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3559 = 1.0 - _3526;
                                float _3569 = (0.5 / (((_3558 * ((_3541 * _3559) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3526) * _3541))) * _3558;
                                float _4631 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3579 = (_3504 * _3481) * (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3549 * _3549) * ((_3494 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3579 * _3363.x;
                                frontier_phi_73_pred_1 = _3579 * _3363.y;
                                frontier_phi_73_pred_2 = _3505 * _3351.z;
                                frontier_phi_73_pred_3 = _3505 * _3351.y;
                                frontier_phi_73_pred_4 = _3505 * _3351.x;
                                frontier_phi_73_pred_5 = _3579 * _3363.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3583 = frontier_phi_73_pred;
                            _3584 = frontier_phi_73_pred_1;
                            _3588 = frontier_phi_73_pred_2;
                            _3587 = frontier_phi_73_pred_3;
                            _3586 = frontier_phi_73_pred_4;
                            _3585 = frontier_phi_73_pred_5;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            if (_3310 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3310;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3293;
                        frontier_phi_67_pred_1 = _3294;
                        frontier_phi_67_pred_2 = _3295;
                        frontier_phi_67_pred_3 = _3292;
                        frontier_phi_67_pred_4 = _3291;
                        frontier_phi_67_pred_5 = _3290;
                    }
                    _2958 = frontier_phi_67_pred;
                    _2960 = frontier_phi_67_pred_1;
                    _2962 = frontier_phi_67_pred_2;
                    _2956 = frontier_phi_67_pred_3;
                    _2954 = frontier_phi_67_pred_4;
                    _2952 = frontier_phi_67_pred_5;
                    uint _3097 = _3096 + 1u;
                    if (_3097 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3090 = _2952;
                        _3091 = _2954;
                        _3092 = _2956;
                        _3093 = _2958;
                        _3094 = _2960;
                        _3095 = _2962;
                        _3096 = _3097;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2960;
                frontier_phi_55_56_ladder_1 = _2962;
                frontier_phi_55_56_ladder_2 = _2958;
                frontier_phi_55_56_ladder_3 = _2956;
                frontier_phi_55_56_ladder_4 = _2954;
                frontier_phi_55_56_ladder_5 = _2952;
            }
            else
            {
                frontier_phi_55_56_ladder = _2846;
                frontier_phi_55_56_ladder_1 = _2848;
                frontier_phi_55_56_ladder_2 = _2844;
                frontier_phi_55_56_ladder_3 = _2842;
                frontier_phi_55_56_ladder_4 = _2840;
                frontier_phi_55_56_ladder_5 = _2838;
            }
            _2951 = frontier_phi_55_56_ladder_5;
            _2953 = frontier_phi_55_56_ladder_4;
            _2955 = frontier_phi_55_56_ladder_3;
            _2957 = frontier_phi_55_56_ladder_2;
            _2959 = frontier_phi_55_56_ladder;
            _2961 = frontier_phi_55_56_ladder_1;
        }
        float _2966 = isnan(1.0) ? _1020 : (isnan(_1020) ? 1.0 : min(_1020, 1.0));
        _2750 = (_2966 * _2957) + _2202;
        _2752 = (_2966 * _2959) + _2204;
        _2754 = (_2966 * _2961) + _2206;
        _2756 = ((_2951 * 0.039999999105930328369140625) * _2966) + _2535;
        _2758 = ((_2953 * 0.039999999105930328369140625) * _2966) + _2537;
        _2760 = ((_2955 * 0.039999999105930328369140625) * _2966) + _2539;
    }
    else
    {
        _2750 = _2202;
        _2752 = _2204;
        _2754 = _2206;
        _2756 = _2535;
        _2758 = _2537;
        _2760 = _2539;
    }
    float _4647 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4658 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4669 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    uint _2780 = _246 + 6u;
    float _2788 = _957 / cbSceneParam._m0[86u].x;
    float _2789 = _958 / cbSceneParam._m0[86u].y;
    vec4 _2803 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, (log2((isnan(cbSceneParam._m0[77u].w) ? _891 : (isnan(_891) ? cbSceneParam._m0[77u].w : min(_891, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2805 = _2803.x;
    float _2806 = _2803.y;
    float _2807 = _2803.z;
    float _2808 = _2803.w;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    if (_891 > cbSceneParam._m0[78u].w)
    {
        float _2863 = isnan(_891) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _891 : min(cbSceneParam._m0[80u].w, _891));
        float _2864 = _2863 / _891;
        float _2875 = _2864 * _942;
        float _2876 = _943 * _2864;
        float _2877 = (-0.0) - _2876;
        float _2879 = _2864 * _944;
        float _2881 = (cbSceneParam._m0[77u].w * _2877) / _2863;
        float _2882 = _2881 + cbSceneParam._m0[79u].w;
        float _2883 = cbSceneParam._m0[79u].w - _2876;
        float _2889 = sqrt(((_2875 * _2875) + (_2876 * _2876)) + (_2879 * _2879));
        float _2892 = (1.0 - (cbSceneParam._m0[77u].w / _2863)) * _2889;
        float _2897 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2899 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3052;
        if (abs((_2877 - _2881) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3052 = ((((_2882 > 0.0) ? exp2(_2897 * _2882) : (2.0 - exp2(_2899 * _2882))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2892;
        }
        else
        {
            float _3012 = 1.0 / cbSceneParam._m0[80u].x;
            float _3013 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : max(_2882, _2883));
            float _3014 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : min(_2882, _2883));
            float _3023 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : min(_3013, 0.0));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            _3052 = ((abs(_2889 / _2877) * cbSceneParam._m0[80u].y) * ((((_3023 - _3024) * 2.0) - ((exp2(_2897 * (isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0)))) - exp2(_2897 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))))) * _3012)) - ((exp2(_2899 * _3023) - exp2(_2899 * _3024)) * _3012))) + (_2892 * cbSceneParam._m0[80u].z);
        }
        vec4 _3054 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, 1.0), 0.0);
        float _3063 = exp2((_3052 * (-1.44269502162933349609375)) * (1.0 - _3054.w));
        float _3064 = log2(_3063);
        float _3080 = log2(_2808);
        _2901 = (exp2(_3080 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3064 * cbSceneParam._m0[78u].x)) * _3054.x) / cbSceneParam._m0[78u].x)) + _2805;
        _2903 = (exp2(_3080 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3064 * cbSceneParam._m0[78u].y)) * _3054.y) / cbSceneParam._m0[78u].y)) + _2806;
        _2905 = (exp2(_3080 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3064 * cbSceneParam._m0[78u].z)) * _3054.z) / cbSceneParam._m0[78u].z)) + _2807;
        _2907 = _3063 * _2808;
    }
    else
    {
        _2901 = _2805;
        _2903 = _2806;
        _2905 = _2807;
        _2907 = _2808;
    }
    float _2919 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2920 = _2919 == 3.0;
    float _2921 = log2(_2907);
    float _2928 = exp2(_2921 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2750 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1020))) + ((_2756 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1823)) * cbPerFrame._m0[3u].x));
    float _2929 = exp2(_2921 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2752 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1020))) + ((_2758 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1823)) * cbPerFrame._m0[3u].x));
    float _2930 = exp2(_2921 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2754 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1020))) + ((_2760 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1823)) * cbPerFrame._m0[3u].x));
    float _2939 = (_2919 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2939 * (_2920 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2901)));
    SV_Target.y = _2939 * (_2920 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2903)));
    SV_Target.z = _2939 * (_2920 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2905)));
    SV_Target.w = cbInstanceData._m0[_2780].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2780].w;
}


