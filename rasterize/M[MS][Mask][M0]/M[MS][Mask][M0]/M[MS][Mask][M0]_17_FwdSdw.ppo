#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1265;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[24u].z) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3855 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _438 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_425 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319);
    float _441 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_425 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320);
    float _444 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_425 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321);
    vec4 _462 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _479 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _481 = _479.x;
    float _482 = _479.y;
    float _483 = _479.z;
    float _492 = ((_462.z - _483) * _425) + _483;
    float _495 = ((((_462.x - _481) * _425) + _481) * 2.0) + (-1.0);
    float _497 = ((((_462.y - _482) * _425) + _482) * 2.0) + (-1.0);
    float _498 = dot(vec2(_495, _497), vec2(_495, _497));
    float _3866 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _503 = sqrt(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _546 = _544.x;
    float _547 = 1.0 - _546;
    float _553 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _556 = ((isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : min(_553, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _565 = (_556 - ((((((_546 - _547) * cbMtdParam._m0[24u].w) + _547) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _556))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3887 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _573 = (_566 * (cbMtdParam._m0[17u].x - _438)) + _438;
    float _574 = (_566 * (cbMtdParam._m0[17u].y - _441)) + _441;
    float _575 = (_566 * (cbMtdParam._m0[17u].z - _444)) + _444;
    vec4 _587 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _589 = _587.x;
    float _590 = 1.0 - _589;
    float _617 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_589 - _590) * cbMtdParam._m0[24u].y) + _590) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3898 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _626 = ((((cbMtdParam._m0[10u].x - _573) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _618) + _573;
    float _627 = ((((cbMtdParam._m0[10u].y - _574) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _618) + _574;
    float _628 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _575)) * _618) + _575;
    float _632 = (cbMtdParam._m0[19u].w * (_519.z - _492)) + _492;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _653 = (_646.x * 2.0) + (-1.0);
    float _654 = (_646.y * 2.0) + (-1.0);
    float _655 = dot(vec2(_653, _654), vec2(_653, _654));
    float _3909 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _663 = (_566 * (_646.z - _632)) + _632;
    float _666 = ((cbMtdParam._m0[23u].y - _663) * _618) + _663;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _691 = (_685.x * 2.0) + (-1.0);
    float _692 = (_685.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _3920 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _701 = (((_519.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _495;
    float _702 = (((_519.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _497;
    float _714 = (((_653 - _701) + (cbMtdParam._m0[21u].x * _701)) * _566) + _701;
    float _715 = (((_654 - _702) + (cbMtdParam._m0[21u].x * _702)) * _566) + _702;
    float _716 = (_566 * (sqrt(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) - _503)) + _503;
    float _727 = (((_691 - _714) + (_714 * cbMtdParam._m0[22u].z)) * _618) + _714;
    float _728 = (((_692 - _715) + (_715 * cbMtdParam._m0[22u].z)) * _618) + _715;
    float _729 = ((sqrt(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) - _716) * _618) + _716;
    float _731 = cbMtdParam._m0[22u].x + _519.w;
    float _734 = fma(_729, _238 * NORMAL.x, fma(_728, _245 * TANGENT.x, (_231 * _223) * _727));
    float _737 = fma(_729, _238 * NORMAL.y, fma(_728, _245 * TANGENT.y, (_231 * _224) * _727));
    float _740 = fma(_729, _238 * NORMAL.z, fma(_728, _245 * TANGENT.z, (_231 * _225) * _727));
    float _744 = inversesqrt(dot(vec3(_734, _737, _740), vec3(_734, _737, _740)));
    float _745 = _744 * _734;
    float _746 = _744 * _737;
    float _747 = _744 * _740;
    float _3931 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _748 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3953 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3964 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3975 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _766 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _816 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _806);
    float _817 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _806);
    float _818 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _806);
    float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
    float _823 = _816 * _822;
    float _824 = _817 * _822;
    float _825 = _818 * _822;
    float _831 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _832 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _850 = fma(_747, cbSceneParam._m0[5u].z, fma(_746, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _745));
    float _853 = fma(_747, cbSceneParam._m0[6u].z, fma(_746, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _745));
    float _856 = fma(_747, cbSceneParam._m0[7u].z, fma(_746, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _745));
    uint _870 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _876 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * cbInstanceData._m0[_870].x;
    float _877 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * cbInstanceData._m0[_870].y;
    float _878 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * cbInstanceData._m0[_870].z;
    float _3986 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    vec4 _890 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _831, cbSceneParam._m0[86u].y * _832));
    float _894 = ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * TEXCOORD_5.w) * _890.x;
    float _895 = dot(vec3(_745, _746, _747), vec3(_823, _824, _825));
    float _898 = _895 * 2.0;
    float _902 = (_898 * _745) - _823;
    float _903 = (_898 * _746) - _824;
    float _904 = (_898 * _747) - _825;
    float _908 = abs(dot(vec3(_823, _824, _825), vec3(_745, _746, _747)));
    float _4019 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _910 = sqrt(_748);
    float _923 = exp2((_910 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_910 * 3.0));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1264;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _989 = fma(_963, cbModelParam._m0[26u].z, fma(_959, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955));
        float _993 = fma(_963, cbModelParam._m0[27u].z, fma(_959, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955));
        float _997 = fma(_963, cbModelParam._m0[28u].z, fma(_959, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955));
        float _1022 = _955 + _745;
        float _1023 = _959 + _746;
        float _1024 = _963 + _747;
        float _1034 = fma(_1024, cbModelParam._m0[26u].z, fma(_1023, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022)) - _989;
        float _1035 = fma(_1024, cbModelParam._m0[27u].z, fma(_1023, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022)) - _993;
        float _1036 = fma(_1024, cbModelParam._m0[28u].z, fma(_1023, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022)) - _997;
        float _1040 = inversesqrt(dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036)));
        float _1053 = ((_1040 * _1034) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_989 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1040 * _1035) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_993 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1040 * _1036) / cbModelParam._m0[34u].z) + ((((((_997 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        float _1092 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1058.x + (-0.5));
        float _1094 = _1092 * (_1058.y + (-0.5));
        float _1095 = _1092 * (_1058.z + (-0.5));
        float _1102 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1065.x + (-0.5));
        float _1104 = _1102 * (_1065.y + (-0.5));
        float _1105 = _1102 * (_1065.z + (-0.5));
        float _1112 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1072.x + (-0.5));
        float _1114 = _1112 * (_1072.y + (-0.5));
        float _1115 = _1112 * (_1072.z + (-0.5));
        float _1122 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1079.x + (-0.5));
        float _1124 = _1122 * (_1079.y + (-0.5));
        float _1125 = _1122 * (_1079.z + (-0.5));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = _1093 * 0.5;
        float _1130 = _1103 * 0.5;
        float _1131 = _1113 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1146 = (dot(vec3(_745, _746, _747), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1156 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _4067 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1158 + 1.0))) + _1163) * _1126;
        float _1173 = _1094 * 0.5;
        float _1174 = _1104 * 0.5;
        float _1175 = _1114 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_745, _746, _747), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _4100 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1200 + 1.0))) + _1205) * _1127;
        float _1215 = _1095 * 0.5;
        float _1216 = _1105 * 0.5;
        float _1217 = _1115 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_745, _746, _747), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4133 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1242 + 1.0))) + _1247) * _1128;
        _1264 = _1095;
        _1266 = _1094;
        _1267 = _1093;
        _1268 = _1105;
        _1269 = _1104;
        _1270 = _1103;
        _1271 = _1115;
        _1272 = _1114;
        _1273 = _1113;
        _1274 = _1128;
        _1275 = _1127;
        _1276 = _1126;
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
    }
    else
    {
        _1264 = _1265;
        _1266 = _1265;
        _1267 = _1265;
        _1268 = _1265;
        _1269 = _1265;
        _1270 = _1265;
        _1271 = _1265;
        _1272 = _1265;
        _1273 = _1265;
        _1274 = _1265;
        _1275 = _1265;
        _1276 = _1265;
        _1277 = 0.0;
        _1278 = 0.0;
        _1279 = 0.0;
    }
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1304 = fma(_963, cbModelParam._m0[30u].z, fma(_959, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955));
        float _1308 = fma(_963, cbModelParam._m0[31u].z, fma(_959, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955));
        float _1312 = fma(_963, cbModelParam._m0[32u].z, fma(_959, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955));
        float _1335 = _955 + _745;
        float _1336 = _959 + _746;
        float _1337 = _963 + _747;
        float _1347 = fma(_1337, cbModelParam._m0[30u].z, fma(_1336, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1335)) - _1304;
        float _1348 = fma(_1337, cbModelParam._m0[31u].z, fma(_1336, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1335)) - _1308;
        float _1349 = fma(_1337, cbModelParam._m0[32u].z, fma(_1336, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1335)) - _1312;
        float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
        float _1366 = ((_1353 * _1347) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1304 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1353 * _1348) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1308 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1353 * _1349) / cbModelParam._m0[35u].z) + ((((((_1312 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        float _1403 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1370.x + (-0.5));
        float _1405 = _1403 * (_1370.y + (-0.5));
        float _1406 = _1403 * (_1370.z + (-0.5));
        float _1413 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1377.x + (-0.5));
        float _1415 = _1413 * (_1377.y + (-0.5));
        float _1416 = _1413 * (_1377.z + (-0.5));
        float _1423 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1384.x + (-0.5));
        float _1425 = _1423 * (_1384.y + (-0.5));
        float _1426 = _1423 * (_1384.z + (-0.5));
        float _1433 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1391.x + (-0.5));
        float _1435 = _1433 * (_1391.y + (-0.5));
        float _1436 = _1433 * (_1391.z + (-0.5));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = _1404 * 0.5;
        float _1441 = _1414 * 0.5;
        float _1442 = _1424 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_745, _746, _747), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4196 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1467 + 1.0))) + _1472) * _1437;
        float _1482 = _1405 * 0.5;
        float _1483 = _1415 * 0.5;
        float _1484 = _1425 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_745, _746, _747), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4229 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1509 + 1.0))) + _1514) * _1438;
        float _1524 = _1406 * 0.5;
        float _1525 = _1416 * 0.5;
        float _1526 = _1426 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_745, _746, _747), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4262 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1551 + 1.0))) + _1556) * _1439;
        _1573 = _1406;
        _1574 = _1405;
        _1575 = _1404;
        _1576 = _1416;
        _1577 = _1415;
        _1578 = _1414;
        _1579 = _1426;
        _1580 = _1425;
        _1581 = _1424;
        _1582 = _1439;
        _1583 = _1438;
        _1584 = _1437;
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
    }
    else
    {
        _1573 = _1265;
        _1574 = _1265;
        _1575 = _1265;
        _1576 = _1265;
        _1577 = _1265;
        _1578 = _1265;
        _1579 = _1265;
        _1580 = _1265;
        _1581 = _1265;
        _1582 = _1265;
        _1583 = _1265;
        _1584 = _1265;
        _1585 = 0.0;
        _1586 = 0.0;
        _1587 = 0.0;
    }
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1277)) + _1277;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1278)) + _1278;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1279)) + _1279;
    float _1620 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1597));
    float _1641 = _902 * 0.5;
    float _1642 = _903 * 0.5;
    float _1643 = _904 * 0.5;
    float _1644 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1647 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1650 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1684;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1657 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1264, _1268, _1271, _1274));
        float _1661 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1665 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1267, _1270, _1273, _1276));
        float _1672 = dot(vec4(cbModelParam._m0[39u]), vec4(_1641, _1642, _1643, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1672) ? 0.0 : (isnan(0.0) ? _1672 : max(0.0, _1672))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1695;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1686 = dot(vec4(cbModelParam._m0[40u]), vec4(_1641, _1642, _1643, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1699 = (_1695 * cbModelParam._m0[1u].x) + (_1684 * (1.0 - cbModelParam._m0[1u].x));
    float _1709 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1709 : min(cbModelParam._m0[25u].z, _1709));
    float _1791;
    float _1793;
    float _1795;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1758 = fma(_963, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _955)) + cbModelParam._m0[13u].w;
        float _1762 = fma(_963, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _955)) + cbModelParam._m0[14u].w;
        float _1766 = fma(_963, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _955)) + cbModelParam._m0[15u].w;
        float _1769 = fma(_904, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _902));
        float _1772 = fma(_904, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _902));
        float _1775 = fma(_904, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _902));
        float _1803;
        if (_1769 > 0.0)
        {
            _1803 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1803 = frontier_phi_14_12_ladder;
        }
        float _1973;
        if (_1772 > 0.0)
        {
            _1973 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1973 = frontier_phi_23_19_ladder;
        }
        float _2268;
        if (_1775 > 0.0)
        {
            _2268 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2268 = frontier_phi_35_30_ladder;
        }
        float _2270 = isnan(_1973) ? _1803 : (isnan(_1803) ? _1973 : min(_1803, _1973));
        float _2271 = isnan(_2268) ? _2270 : (isnan(_2270) ? _2268 : min(_2270, _2268));
        float _2275 = (_2271 * _1769) + _1758;
        float _2276 = (_2271 * _1772) + _1762;
        float _2277 = (_2271 * _1775) + _1766;
        float _2278 = _2271 * 9.9999997473787516355514526367188e-05;
        float _2280 = (-1.0) - _2278;
        float _2282 = _2278 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2277 > _2282) || ((_2277 < _2280) || ((_2276 > _2282) || ((_2276 < _2280) || ((_2275 < _2280) || (_2275 > _2282))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2277, cbModelParam._m0[9u].z, fma(_2276, cbModelParam._m0[9u].y, _2275 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2277, cbModelParam._m0[10u].z, fma(_2276, cbModelParam._m0[10u].y, _2275 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2277, cbModelParam._m0[11u].z, fma(_2276, cbModelParam._m0[11u].y, _2275 * cbModelParam._m0[11u].x))), _1710);
            frontier_phi_13_35_ladder = _2422.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2422.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2422.x * cbModelParam._m0[1u].y;
        }
        _1791 = frontier_phi_13_35_ladder_2;
        _1793 = frontier_phi_13_35_ladder_1;
        _1795 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1779 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_902, _903, _904), _1710);
        _1791 = _1779.x * cbModelParam._m0[1u].y;
        _1793 = _1779.y * cbModelParam._m0[1u].y;
        _1795 = _1779.z * cbModelParam._m0[1u].y;
    }
    float _1799 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1800 = isnan(_1799) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1799 : min(cbModelParam._m0[25u].w, _1799));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1854 = fma(_963, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _955)) + cbModelParam._m0[21u].w;
        float _1858 = fma(_963, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _955)) + cbModelParam._m0[22u].w;
        float _1862 = fma(_963, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _955)) + cbModelParam._m0[23u].w;
        float _1865 = fma(_904, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _902));
        float _1868 = fma(_904, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _902));
        float _1871 = fma(_904, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _902));
        float _1978;
        if (_1865 > 0.0)
        {
            _1978 = abs((1.0 - _1854) / _1865);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1854 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1978 = frontier_phi_25_21_ladder;
        }
        float _2295;
        if (_1868 > 0.0)
        {
            _2295 = abs((1.0 - _1858) / _1868);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1858 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2295 = frontier_phi_37_32_ladder;
        }
        float _2622;
        if (_1871 > 0.0)
        {
            _2622 = abs((1.0 - _1862) / _1871);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1862 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2622 = frontier_phi_47_44_ladder;
        }
        float _2624 = isnan(_2295) ? _1978 : (isnan(_1978) ? _2295 : min(_1978, _2295));
        float _2625 = isnan(_2622) ? _2624 : (isnan(_2624) ? _2622 : min(_2624, _2622));
        float _2629 = (_2625 * _1865) + _1854;
        float _2630 = (_2625 * _1868) + _1858;
        float _2631 = (_2625 * _1871) + _1862;
        float _2632 = _2625 * 9.9999997473787516355514526367188e-05;
        float _2633 = (-1.0) - _2632;
        float _2635 = _2632 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2631 > _2635) || ((_2631 < _2633) || ((_2630 > _2635) || ((_2630 < _2633) || ((_2629 < _2633) || (_2629 > _2635))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2749 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2631, cbModelParam._m0[17u].z, fma(_2630, cbModelParam._m0[17u].y, _2629 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2631, cbModelParam._m0[18u].z, fma(_2630, cbModelParam._m0[18u].y, _2629 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2631, cbModelParam._m0[19u].z, fma(_2630, cbModelParam._m0[19u].y, _2629 * cbModelParam._m0[19u].x))), _1800);
            frontier_phi_22_47_ladder = _2749.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2749.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2749.x * cbModelParam._m0[1u].z;
        }
        _1890 = frontier_phi_22_47_ladder_2;
        _1892 = frontier_phi_22_47_ladder_1;
        _1894 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_902, _903, _904), _1800);
        _1890 = _1874.x * cbModelParam._m0[1u].z;
        _1892 = _1874.y * cbModelParam._m0[1u].z;
        _1894 = _1874.z * cbModelParam._m0[1u].z;
    }
    float _1906 = ((((1.0 - _923) * ((_910 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_923 * _910)) * _894;
    float _1907 = _1906 * ((cbModelParam._m0[1u].w * (_1890 - _1791)) + _1791);
    float _1908 = _1906 * ((cbModelParam._m0[1u].w * (_1892 - _1793)) + _1793);
    float _1909 = _1906 * ((cbModelParam._m0[1u].w * (_1894 - _1795)) + _1795);
    float _1912 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1908, cbSceneParam._m0[89u].y, _1907 * cbSceneParam._m0[89u].x));
    float _1915 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1908, cbSceneParam._m0[90u].y, _1907 * cbSceneParam._m0[90u].x));
    float _1918 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1908, cbSceneParam._m0[91u].y, _1907 * cbSceneParam._m0[91u].x));
    float _1952 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1956 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1960 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1964 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1965 = _1952 / _1964;
    float _1966 = _1956 / _1964;
    float _1967 = _1960 / _1964;
    float _2114;
    float _2115;
    float _2116;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1994 = ((uint(_1967 > cbSceneParam._m0[59u].y) + uint(_1967 > cbSceneParam._m0[59u].x)) + uint(_1967 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1995 = _1994 + 43u;
        uint _2003 = _1994 + 44u;
        uint _2011 = _1994 + 45u;
        uint _2019 = _1994 + 46u;
        float _2030 = fma(_1964, cbSceneParam._m0[_1995].w, fma(_1960, cbSceneParam._m0[_1995].z, fma(_1956, cbSceneParam._m0[_1995].y, _1952 * cbSceneParam._m0[_1995].x)));
        float _2034 = fma(_1964, cbSceneParam._m0[_2003].w, fma(_1960, cbSceneParam._m0[_2003].z, fma(_1956, cbSceneParam._m0[_2003].y, _1952 * cbSceneParam._m0[_2003].x)));
        float _2042 = fma(_1964, cbSceneParam._m0[_2019].w, fma(_1960, cbSceneParam._m0[_2019].z, fma(_1956, cbSceneParam._m0[_2019].y, _1952 * cbSceneParam._m0[_2019].x)));
        float _2047 = cbSceneParam._m0[33u].z * _2042;
        float _2049 = cbSceneParam._m0[33u].w * _2042;
        float _2052 = fma(_1964, cbSceneParam._m0[_2011].w, fma(_1960, cbSceneParam._m0[_2011].z, fma(_1956, cbSceneParam._m0[_2011].y, _1952 * cbSceneParam._m0[_2011].x))) / _2042;
        float _2100 = (cbSceneParam._m0[33u].x - sqrt(((_1966 * _1966) + (_1965 * _1965)) + (_1967 * _1967))) * cbSceneParam._m0[33u].y;
        float _4388 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2107 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2047 + _2030) / _2042, (_2049 + _2034) / _2042), _2052), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2049 + _2030) / _2042, (_2034 - _2047) / _2042), _2052), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2030 - _2047) / _2042, (_2034 - _2049) / _2042), _2052), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2030 - _2049) / _2042, (_2047 + _2034) / _2042), _2052), 0.0)).x), vec4(0.25)));
        _2114 = 1.0 - (_2107 * cbSceneParam._m0[34u].x);
        _2115 = 1.0 - (_2107 * cbSceneParam._m0[34u].y);
        _2116 = 1.0 - (_2107 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2114 = 1.0;
        _2115 = 1.0;
        _2116 = 1.0;
    }
    float _2180;
    float _2182;
    float _2184;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2168 = fma(_1964, cbSceneParam._m0[63u].w, fma(_1960, cbSceneParam._m0[63u].z, fma(_1956, cbSceneParam._m0[63u].y, _1952 * cbSceneParam._m0[63u].x)));
        float _2169 = fma(_1964, cbSceneParam._m0[60u].w, fma(_1960, cbSceneParam._m0[60u].z, fma(_1956, cbSceneParam._m0[60u].y, _1952 * cbSceneParam._m0[60u].x))) / _2168;
        float _2170 = fma(_1964, cbSceneParam._m0[61u].w, fma(_1960, cbSceneParam._m0[61u].z, fma(_1956, cbSceneParam._m0[61u].y, _1952 * cbSceneParam._m0[61u].x))) / _2168;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2169 >= cbSceneParam._m0[64u].x) && (_2170 >= cbSceneParam._m0[64u].y)) && (_2169 <= cbSceneParam._m0[64u].z)) && (_2170 <= cbSceneParam._m0[64u].w))
        {
            float _2308 = fma(_1964, cbSceneParam._m0[62u].w, fma(_1960, cbSceneParam._m0[62u].z, fma(_1956, cbSceneParam._m0[62u].y, _1952 * cbSceneParam._m0[62u].x))) / _2168;
            float _2312 = isnan(cbSceneParam._m0[41u].w) ? _2308 : (isnan(_2308) ? cbSceneParam._m0[41u].w : max(_2308, cbSceneParam._m0[41u].w));
            float _2355 = (cbSceneParam._m0[33u].x - sqrt(((_1966 * _1966) + (_1965 * _1965)) + (_1967 * _1967))) * cbSceneParam._m0[33u].y;
            float _4404 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
            float _2362 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2169, cbSceneParam._m0[33u].w + _2170), _2312), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2169, _2170 - cbSceneParam._m0[33u].z), _2312), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2169 - cbSceneParam._m0[33u].z, _2170 - cbSceneParam._m0[33u].w), _2312), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2169 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2170), _2312), 0.0)).x), vec4(0.25)));
            float _2366 = 1.0 - (_2362 * cbSceneParam._m0[34u].x);
            float _2367 = 1.0 - (_2362 * cbSceneParam._m0[34u].y);
            float _2368 = 1.0 - (_2362 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2368) ? _2116 : (isnan(_2116) ? _2368 : min(_2116, _2368));
            frontier_phi_34_33_ladder_1 = isnan(_2367) ? _2115 : (isnan(_2115) ? _2367 : min(_2115, _2367));
            frontier_phi_34_33_ladder_2 = isnan(_2366) ? _2114 : (isnan(_2114) ? _2366 : min(_2114, _2366));
        }
        else
        {
            frontier_phi_34_33_ladder = _2116;
            frontier_phi_34_33_ladder_1 = _2115;
            frontier_phi_34_33_ladder_2 = _2114;
        }
        _2180 = frontier_phi_34_33_ladder_2;
        _2182 = frontier_phi_34_33_ladder_1;
        _2184 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2180 = _2114;
        _2182 = _2115;
        _2184 = _2116;
    }
    uvec4 _2189 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2191 = _2189.x * 14u;
    uint _2192 = _2191 + 13u;
    float _2199 = _894 + (-1.0);
    float _2204 = (cbLight._m0[_2192].x * _2199) + 1.0;
    float _2205 = (cbLight._m0[_2192].y * _2199) + 1.0;
    float _2206 = (cbLight._m0[_2192].z * _2199) + 1.0;
    float _2207 = (cbLight._m0[_2192].w * _2199) + 1.0;
    uint _2208 = _2191 + 5u;
    float _2214 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2218 = _2191 + 4u;
    float _2227 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2231 = _2191 | 1u;
    float _2242 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_745, _746, _747));
    float _2245 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_745, _746, _747));
    float _4440 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _4451 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2250 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * 0.3183098733425140380859375;
    float _2252 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * 0.3183098733425140380859375;
    float _2259 = ((cbLight._m0[_2208].x * _2214) * _2252) + (((cbLight._m0[_2218].x * _2180) * _2227) * _2250);
    float _2260 = ((_2214 * cbLight._m0[_2208].y) * _2252) + (((cbLight._m0[_2218].y * _2182) * _2227) * _2250);
    float _2261 = ((_2214 * cbLight._m0[_2208].z) * _2252) + (((cbLight._m0[_2218].z * _2184) * _2227) * _2250);
    uvec4 _2265 = floatBitsToUint(cbLight._m0[_2191 + 12u]);
    bool _2267 = _2265.x == 0u;
    float _2369;
    float _2371;
    float _2373;
    if (_2267)
    {
        _2369 = _2259;
        _2371 = _2260;
        _2373 = _2261;
    }
    else
    {
        uint _2377 = _2191 + 6u;
        float _2393 = (dot(vec3(cbLight._m0[_2191 + 2u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2394 = _2393 * _2393;
        float _4462 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2395 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2396 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2369 = (((cbLight._m0[_2377].x * 0.3183098733425140380859375) * _2395) * _2396) + _2259;
        _2371 = (((cbLight._m0[_2377].y * 0.3183098733425140380859375) * _2395) * _2396) + _2260;
        _2373 = (((cbLight._m0[_2377].z * 0.3183098733425140380859375) * _2395) * _2396) + _2261;
    }
    bool _2376 = _2265.y == 0u;
    float _2431;
    float _2433;
    float _2435;
    if (_2376)
    {
        _2431 = _2369;
        _2433 = _2371;
        _2435 = _2373;
    }
    else
    {
        uint _2593 = _2191 + 7u;
        float _2609 = (dot(vec3(cbLight._m0[_2191 + 3u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2610 = _2609 * _2609;
        float _4478 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2611 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2612 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2431 = (((cbLight._m0[_2593].x * 0.3183098733425140380859375) * _2611) * _2612) + _2369;
        _2433 = (((cbLight._m0[_2593].y * 0.3183098733425140380859375) * _2611) * _2612) + _2371;
        _2435 = (((cbLight._m0[_2593].z * 0.3183098733425140380859375) * _2611) * _2612) + _2373;
    }
    uint _2438 = _2191 + 8u;
    float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _748) * 0.949999988079071044921875);
    float _2452 = _2451 * _2451;
    float _2453 = cbLight._m0[_2191].x + _823;
    float _2454 = cbLight._m0[_2191].y + _824;
    float _2455 = cbLight._m0[_2191].z + _825;
    float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
    float _2460 = _2459 * _2453;
    float _2461 = _2459 * _2454;
    float _2462 = _2459 * _2455;
    float _2463 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2191].xyz));
    float _4494 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2466 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _4505 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _2467 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2468 = dot(vec3(_745, _746, _747), vec3(_2460, _2461, _2462));
    float _4516 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2472 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2460, _2461, _2462));
    float _4527 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2476 = _2452 * _2452;
    float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
    float _2491 = (exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2492 = 1.0 - _2452;
    float _2503 = (0.5 / (((_2467 * ((_2466 * _2492) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2467 * _2492) + _2452) * _2466))) * _2466;
    float _4538 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2505 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
    uint _2519 = _2191 + 9u;
    float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _748) * 0.949999988079071044921875);
    float _2531 = _2530 * _2530;
    float _2532 = cbLight._m0[_2231].x + _823;
    float _2533 = cbLight._m0[_2231].y + _824;
    float _2534 = cbLight._m0[_2231].z + _825;
    float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
    float _2539 = _2538 * _2532;
    float _2540 = _2538 * _2533;
    float _2541 = _2538 * _2534;
    float _2542 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2231].xyz));
    float _4549 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2546 = dot(vec3(_745, _746, _747), vec3(_2539, _2540, _2541));
    float _4560 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2550 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2539, _2540, _2541));
    float _4571 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2554 = _2531 * _2531;
    float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
    float _2567 = (exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2568 = 1.0 - _2531;
    float _2578 = (0.5 / (((_2467 * ((_2545 * _2568) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2467 * _2568) + _2531) * _2545))) * _2545;
    float _4582 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2580 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
    float _2590 = (((_2567 * cbLight._m0[_2519].x) * _2580) * _2214) + ((((cbLight._m0[_2438].x * _2180) * _2491) * _2505) * _2227);
    float _2591 = (((_2567 * cbLight._m0[_2519].y) * _2580) * _2214) + ((((cbLight._m0[_2438].y * _2182) * _2491) * _2505) * _2227);
    float _2592 = (((_2567 * cbLight._m0[_2519].z) * _2580) * _2214) + ((((cbLight._m0[_2438].z * _2184) * _2491) * _2505) * _2227);
    float _2648;
    float _2650;
    float _2652;
    if (_2267)
    {
        _2648 = _2590;
        _2650 = _2591;
        _2652 = _2592;
    }
    else
    {
        uint _2654 = _2191 + 2u;
        uint _2658 = _2191 + 10u;
        float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2654].w)) * _748) * 0.949999988079071044921875);
        float _2673 = _2672 * _2672;
        float _2674 = cbLight._m0[_2654].x + _823;
        float _2675 = cbLight._m0[_2654].y + _824;
        float _2676 = cbLight._m0[_2654].z + _825;
        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
        float _2681 = _2680 * _2674;
        float _2682 = _2680 * _2675;
        float _2683 = _2680 * _2676;
        float _2684 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2654].xyz));
        float _4593 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2688 = dot(vec3(_745, _746, _747), vec3(_2681, _2682, _2683));
        float _4604 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2692 = dot(vec3(cbLight._m0[_2654].xyz), vec3(_2681, _2682, _2683));
        float _4615 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2696 = _2673 * _2673;
        float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
        float _2709 = (exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2710 = 1.0 - _2673;
        float _2720 = (0.5 / (((_2467 * ((_2687 * _2710) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2467 * _2710) + _2673) * _2687))) * _2687;
        float _4626 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2722 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
        float _2723 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2648 = (((_2709 * cbLight._m0[_2658].x) * _2722) * _2723) + _2590;
        _2650 = (((_2709 * cbLight._m0[_2658].y) * _2722) * _2723) + _2591;
        _2652 = (((_2709 * cbLight._m0[_2658].z) * _2722) * _2723) + _2592;
    }
    float _2754;
    float _2756;
    float _2758;
    if (_2376)
    {
        _2754 = _2648;
        _2756 = _2650;
        _2758 = _2652;
    }
    else
    {
        uint _2765 = _2191 + 3u;
        uint _2769 = _2191 + 11u;
        float _2783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2765].w)) * _748) * 0.949999988079071044921875);
        float _2784 = _2783 * _2783;
        float _2785 = cbLight._m0[_2765].x + _823;
        float _2786 = cbLight._m0[_2765].y + _824;
        float _2787 = cbLight._m0[_2765].z + _825;
        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
        float _2792 = _2791 * _2785;
        float _2793 = _2791 * _2786;
        float _2794 = _2791 * _2787;
        float _2795 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2765].xyz));
        float _4642 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2798 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2799 = dot(vec3(_745, _746, _747), vec3(_2792, _2793, _2794));
        float _4653 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2802 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2803 = dot(vec3(cbLight._m0[_2765].xyz), vec3(_2792, _2793, _2794));
        float _4664 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2807 = _2784 * _2784;
        float _2811 = ((_2802 * _2802) * (_2807 + (-1.0))) + 1.0;
        float _2820 = (exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2821 = 1.0 - _2784;
        float _2831 = (0.5 / (((_2467 * ((_2798 * _2821) + _2784)) + 9.9999999392252902907785028219223e-09) + (((_2467 * _2821) + _2784) * _2798))) * _2798;
        float _4675 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2833 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2807 / ((_2811 * _2811) * 3.141590118408203125));
        float _2834 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2754 = (((_2820 * cbLight._m0[_2769].x) * _2833) * _2834) + _2648;
        _2756 = (((_2820 * cbLight._m0[_2769].y) * _2833) * _2834) + _2650;
        _2758 = (((_2820 * cbLight._m0[_2769].z) * _2833) * _2834) + _2652;
    }
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    if (_2189.y == 0u)
    {
        uvec4 _2855 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2856 = _2855.x;
        uint _2867 = uint((float(_2855.y) * floor(float(uint(cbSceneParam._m0[85u].y * _832) / _2856))) + floor(float(uint(cbSceneParam._m0[85u].x * _831) / _2856)));
        float _2877 = (log2(_1967 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2878 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        uint _2881 = uint(isnan(14.0) ? _2878 : (isnan(_2878) ? 14.0 : min(_2878, 14.0)));
        uvec4 _2886 = texelFetch(g_lightClusterGridBuffer, int(((_2881 << 2u) + (_2867 << 6u)) >> 2u));
        uint _2887 = _2886.x;
        uint _2888 = _2855.z;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        if (((((1u << ((_2888 >> 4u) & 15u)) + 4294967295u) & _2887) == 0u) || ((_2888 & 240u) == 0u))
        {
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
        }
        else
        {
            float _2968;
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _2978;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            uint _3118 = 0u;
            uint _3127;
            bool _3128;
            for (;;)
            {
                _3127 = texelFetch(g_lightClassification, int((((_2881 << 5u) + (_2867 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                _3128 = _3127 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3128)
                {
                    frontier_phi_66_pred = _3117;
                    frontier_phi_66_pred_1 = _3116;
                    frontier_phi_66_pred_2 = _3115;
                    frontier_phi_66_pred_3 = _3114;
                    frontier_phi_66_pred_4 = _3113;
                    frontier_phi_66_pred_5 = _3112;
                }
                else
                {
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    uint _3242;
                    _3236 = _3112;
                    _3237 = _3113;
                    _3238 = _3114;
                    _3239 = _3115;
                    _3240 = _3116;
                    _3241 = _3117;
                    _3242 = _3127;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    for (;;)
                    {
                        uint _3246 = uint(findLSB(_3242)) + (_3118 << 5u);
                        uint _3243 = (_3242 + 4294967295u) & _3242;
                        uint _3248 = _3246 * 48u;
                        vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 3u)).x));
                        uint _3268 = (_3246 * 48u) + 4u;
                        vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3268)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 3u)).x));
                        uint _3287 = (_3246 * 48u) + 8u;
                        vec3 _3298 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3287)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 2u)).x));
                        float _3302 = _3262.x - _1965;
                        float _3303 = _3262.y - _1966;
                        float _3304 = _3262.z - _1967;
                        float _3305 = dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304));
                        float _3308 = inversesqrt(_3305);
                        float _3309 = _3308 * _3302;
                        float _3310 = _3308 * _3303;
                        float _3311 = _3308 * _3304;
                        float _3312 = dot(vec3(_850, _853, _856), vec3(_3309, _3310, _3311));
                        float _3317 = 1.0 - (_3305 * _3262.w);
                        float _4701 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3318 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3319 = sqrt(_3305) * _3281.w;
                        float _3322 = 1.39999997615814208984375 / (_3319 + 1.39999997615814208984375);
                        float _3323 = _3322 * _3322;
                        float _3326 = ((1.0 - _3323) * _3312) + _3323;
                        float _3329 = _3319 * _3319;
                        float _3333 = ((isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))) * _3318) / ((_3329 * 0.699999988079071044921875) + 1.0);
                        float _3337 = (-0.0) - _1965;
                        float _3338 = (-0.0) - _1966;
                        float _3339 = (-0.0) - _1967;
                        float _3343 = inversesqrt(dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339)));
                        float _3344 = _3343 * _3337;
                        float _3345 = _3343 * _3338;
                        float _3346 = _3343 * _3339;
                        float _3353 = exp2(log2(1.0 / ((_3329 * 3.5) + 5.0)) * 0.25);
                        float _3354 = 1.0 - _910;
                        float _3361 = sqrt(1.0 - ((1.0 - (_3354 * _3354)) * (1.0 - (_3353 * _3353))));
                        float _3362 = _3361 * _3361;
                        float _3363 = _3362 * _3362;
                        float _3364 = _3344 + _3309;
                        float _3365 = _3345 + _3310;
                        float _3366 = _3346 + _3311;
                        float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                        float _3374 = dot(vec3(_850, _853, _856), vec3(_3344, _3345, _3346));
                        float _4717 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3377 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3378 = dot(vec3(_850, _853, _856), vec3(_3370 * _3364, _3370 * _3365, _3370 * _3366));
                        float _4728 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3381 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3385 = ((_3381 * _3381) * (_3363 + (-1.0))) + 1.0;
                        float _3386 = _3322 * _3362;
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3312) + _3387;
                        float _4739 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3391 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3392 = 1.0 - _3362;
                        float _3402 = (0.5 / (((_3391 * ((_3377 * _3392) + _3362)) + 9.9999999392252902907785028219223e-09) + (((_3391 * _3392) + _3362) * _3377))) * _3391;
                        float _4750 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3413 = (((_3363 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3385 * _3385) * ((_3329 * 2.1991131305694580078125) + 3.141590118408203125))) * _3318;
                        _3171 = (_3333 * _3281.x) + _3239;
                        _3172 = (_3333 * _3281.y) + _3240;
                        _3173 = (_3333 * _3281.z) + _3241;
                        _3168 = (_3413 * _3298.x) + _3236;
                        _3169 = (_3413 * _3298.y) + _3237;
                        _3170 = (_3413 * _3298.z) + _3238;
                        if (_3243 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3236 = _3168;
                            _3237 = _3169;
                            _3238 = _3170;
                            _3239 = _3171;
                            _3240 = _3172;
                            _3241 = _3173;
                            _3242 = _3243;
                        }
                    }
                    frontier_phi_66_pred = _3173;
                    frontier_phi_66_pred_1 = _3172;
                    frontier_phi_66_pred_2 = _3171;
                    frontier_phi_66_pred_3 = _3170;
                    frontier_phi_66_pred_4 = _3169;
                    frontier_phi_66_pred_5 = _3168;
                }
                _2978 = frontier_phi_66_pred;
                _2976 = frontier_phi_66_pred_1;
                _2974 = frontier_phi_66_pred_2;
                _2972 = frontier_phi_66_pred_3;
                _2970 = frontier_phi_66_pred_4;
                _2968 = frontier_phi_66_pred_5;
                uint _3119 = _3118 + 1u;
                if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3112 = _2968;
                    _3113 = _2970;
                    _3114 = _2972;
                    _3115 = _2974;
                    _3116 = _2976;
                    _3117 = _2978;
                    _3118 = _3119;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
        }
        uvec4 _2981 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2982 = _2981.z;
        uint _2984 = (_2982 >> 8u) & 15u;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        if (((4294967295u << _2984) & _2887) == 0u)
        {
            _3080 = _2967;
            _3082 = _2969;
            _3084 = _2971;
            _3086 = _2973;
            _3088 = _2975;
            _3090 = _2977;
        }
        else
        {
            float _3105 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
            float _3106 = _3105 * _1965;
            float _3107 = _3105 * _1966;
            float _3108 = _3105 * _1967;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2984 < ((_2982 >> 12u) & 15u))
            {
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3219 = _2967;
                float _3220 = _2969;
                float _3221 = _2971;
                float _3222 = _2973;
                float _3223 = _2975;
                float _3224 = _2977;
                uint _3225 = _2984;
                uint _3234;
                bool _3235;
                for (;;)
                {
                    _3234 = texelFetch(g_lightClassification, int((((_2881 << 5u) + (_2867 << 9u)) + (_3225 << 2u)) >> 2u)).x;
                    _3235 = _3234 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3235)
                    {
                        frontier_phi_72_pred = _3224;
                        frontier_phi_72_pred_1 = _3223;
                        frontier_phi_72_pred_2 = _3222;
                        frontier_phi_72_pred_3 = _3221;
                        frontier_phi_72_pred_4 = _3220;
                        frontier_phi_72_pred_5 = _3219;
                    }
                    else
                    {
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3431 = _3219;
                        float _3432 = _3220;
                        float _3433 = _3221;
                        float _3434 = _3222;
                        float _3435 = _3223;
                        float _3436 = _3224;
                        uint _3437 = _3234;
                        uint _3438;
                        vec4 _3463;
                        float _3464;
                        vec4 _3479;
                        vec3 _3491;
                        vec4 _3506;
                        vec4 _3522;
                        float _3568;
                        bool _3569;
                        for (;;)
                        {
                            uint _3448 = ((_3225 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3437));
                            _3438 = (_3437 + 4294967295u) & _3437;
                            uint _3450 = _3448 * 40u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            _3464 = _3463.w;
                            uint _3466 = (_3448 * 40u) + 4u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3481 = (_3448 * 40u) + 8u;
                            _3491 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x));
                            uint _3493 = (_3448 * 40u) + 16u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3509 = (_3448 * 40u) + 20u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3524 = (_3448 * 40u) + 24u;
                            vec4 _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3543 = (_3448 * 40u) + 28u;
                            vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            _3568 = fma(_1967, _3556.z, fma(_1966, _3556.y, _3556.x * _1965)) + _3556.w;
                            _3569 = !((fma(_1967, _3537.z, fma(_1966, _3537.y, _3537.x * _1965)) + _3537.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3569)
                            {
                                float _3596 = _3463.x - _1965;
                                float _3597 = _3463.y - _1966;
                                float _3598 = _3463.z - _1967;
                                float _3599 = dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598));
                                float _3602 = inversesqrt(_3599);
                                float _3603 = _3602 * _3596;
                                float _3604 = _3602 * _3597;
                                float _3605 = _3602 * _3598;
                                float _3609 = 1.0 - (_3599 / (_3464 * _3464));
                                float _4761 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3614 = sqrt(_3599) * _3479.w;
                                float _3616 = 1.39999997615814208984375 / (_3614 + 1.39999997615814208984375);
                                float _3617 = _3616 * _3616;
                                float _3620 = ((1.0 - _3617) * dot(vec3(_3603, _3604, _3605), vec3(_850, _853, _856))) + _3617;
                                float _3623 = _3614 * _3614;
                                float _3627 = (fma(_1967, _3506.z, fma(_1966, _3506.y, _3506.x * _1965)) + _3506.w) / _3568;
                                float _3628 = (fma(_1967, _3522.z, fma(_1966, _3522.y, _3522.x * _1965)) + _3522.w) / _3568;
                                float _3632 = 1.0 - dot(vec2(_3627, _3628), vec2(_3627, _3628));
                                float _4777 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3634 = _3633 * (((isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0))) * _3610) / ((_3623 * 0.699999988079071044921875) + 1.0));
                                float _3646 = exp2(log2(1.0 / ((_3623 * 3.5) + 5.0)) * 0.25);
                                float _3647 = 1.0 - _910;
                                float _3654 = sqrt(1.0 - ((1.0 - (_3647 * _3647)) * (1.0 - (_3646 * _3646))));
                                float _3655 = _3654 * _3654;
                                float _3656 = _3655 * _3655;
                                float _3657 = _3603 - _3106;
                                float _3658 = _3604 - _3107;
                                float _3659 = _3605 - _3108;
                                float _3663 = inversesqrt(dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659)));
                                float _3667 = dot(vec3(_850, _853, _856), vec3((-0.0) - _3106, (-0.0) - _3107, (-0.0) - _3108));
                                float _4788 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3671 = dot(vec3(_850, _853, _856), vec3(_3663 * _3657, _3663 * _3658, _3663 * _3659));
                                float _4799 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3674 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3678 = ((_3674 * _3674) * (_3656 + (-1.0))) + 1.0;
                                float _3679 = _3616 * _3655;
                                float _3680 = _3679 * _3679;
                                float _3686 = ((1.0 - _3680) * dot(vec3(_850, _853, _856), vec3(_3603, _3604, _3605))) + _3680;
                                float _4810 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3688 = 1.0 - _3655;
                                float _3698 = (0.5 / (((_3687 * ((_3670 * _3688) + _3655)) + 9.9999999392252902907785028219223e-09) + (((_3687 * _3688) + _3655) * _3670))) * _3687;
                                float _4821 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3708 = (_3633 * _3610) * (((_3656 * 3.1415927410125732421875) * (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0)))) / ((_3678 * _3678) * ((_3623 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3634 * _3479.y;
                                frontier_phi_78_pred_1 = _3634 * _3479.x;
                                frontier_phi_78_pred_2 = _3708 * _3491.z;
                                frontier_phi_78_pred_3 = _3708 * _3491.y;
                                frontier_phi_78_pred_4 = _3708 * _3491.x;
                                frontier_phi_78_pred_5 = _3634 * _3479.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3716 = frontier_phi_78_pred;
                            _3715 = frontier_phi_78_pred_1;
                            _3714 = frontier_phi_78_pred_2;
                            _3713 = frontier_phi_78_pred_3;
                            _3712 = frontier_phi_78_pred_4;
                            _3717 = frontier_phi_78_pred_5;
                            _3421 = _3715 + _3434;
                            _3422 = _3716 + _3435;
                            _3423 = _3717 + _3436;
                            _3418 = _3712 + _3431;
                            _3419 = _3713 + _3432;
                            _3420 = _3714 + _3433;
                            if (_3438 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3438;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3423;
                        frontier_phi_72_pred_1 = _3422;
                        frontier_phi_72_pred_2 = _3421;
                        frontier_phi_72_pred_3 = _3420;
                        frontier_phi_72_pred_4 = _3419;
                        frontier_phi_72_pred_5 = _3418;
                    }
                    _3091 = frontier_phi_72_pred;
                    _3089 = frontier_phi_72_pred_1;
                    _3087 = frontier_phi_72_pred_2;
                    _3085 = frontier_phi_72_pred_3;
                    _3083 = frontier_phi_72_pred_4;
                    _3081 = frontier_phi_72_pred_5;
                    uint _3226 = _3225 + 1u;
                    if (_3226 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3219 = _3081;
                        _3220 = _3083;
                        _3221 = _3085;
                        _3222 = _3087;
                        _3223 = _3089;
                        _3224 = _3091;
                        _3225 = _3226;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3091;
                frontier_phi_60_61_ladder_1 = _3089;
                frontier_phi_60_61_ladder_2 = _3085;
                frontier_phi_60_61_ladder_3 = _3083;
                frontier_phi_60_61_ladder_4 = _3081;
                frontier_phi_60_61_ladder_5 = _3087;
            }
            else
            {
                frontier_phi_60_61_ladder = _2977;
                frontier_phi_60_61_ladder_1 = _2975;
                frontier_phi_60_61_ladder_2 = _2971;
                frontier_phi_60_61_ladder_3 = _2969;
                frontier_phi_60_61_ladder_4 = _2967;
                frontier_phi_60_61_ladder_5 = _2973;
            }
            _3080 = frontier_phi_60_61_ladder_4;
            _3082 = frontier_phi_60_61_ladder_3;
            _3084 = frontier_phi_60_61_ladder_2;
            _3086 = frontier_phi_60_61_ladder_5;
            _3088 = frontier_phi_60_61_ladder_1;
            _3090 = frontier_phi_60_61_ladder;
        }
        float _3095 = isnan(1.0) ? _894 : (isnan(_894) ? 1.0 : min(_894, 1.0));
        _2900 = (_3095 * _3086) + _2431;
        _2902 = (_3095 * _3088) + _2433;
        _2904 = (_3095 * _3090) + _2435;
        _2906 = ((_3080 * 0.039999999105930328369140625) * _3095) + _2754;
        _2908 = ((_3082 * 0.039999999105930328369140625) * _3095) + _2756;
        _2910 = ((_3084 * 0.039999999105930328369140625) * _3095) + _2758;
    }
    else
    {
        _2900 = _2431;
        _2902 = _2433;
        _2904 = _2435;
        _2906 = _2754;
        _2908 = _2756;
        _2910 = _2758;
    }
    float _4837 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4848 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4859 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    uint _2930 = _251 + 6u;
    float _2938 = _831 / cbSceneParam._m0[86u].x;
    float _2939 = _832 / cbSceneParam._m0[86u].y;
    vec4 _2953 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2938, _2939, (log2((isnan(cbSceneParam._m0[77u].w) ? _766 : (isnan(_766) ? cbSceneParam._m0[77u].w : min(_766, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2955 = _2953.x;
    float _2956 = _2953.y;
    float _2957 = _2953.z;
    float _2958 = _2953.w;
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    if (_766 > cbSceneParam._m0[78u].w)
    {
        float _2992 = isnan(_766) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _766 : min(cbSceneParam._m0[80u].w, _766));
        float _2993 = _2992 / _766;
        float _3004 = _2993 * _816;
        float _3005 = _817 * _2993;
        float _3006 = (-0.0) - _3005;
        float _3008 = _2993 * _818;
        float _3010 = (cbSceneParam._m0[77u].w * _3006) / _2992;
        float _3011 = _3010 + cbSceneParam._m0[79u].w;
        float _3012 = cbSceneParam._m0[79u].w - _3005;
        float _3018 = sqrt(((_3004 * _3004) + (_3005 * _3005)) + (_3008 * _3008));
        float _3021 = (1.0 - (cbSceneParam._m0[77u].w / _2992)) * _3018;
        float _3026 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3028 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3181;
        if (abs((_3006 - _3010) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3181 = ((((_3011 > 0.0) ? exp2(_3026 * _3011) : (2.0 - exp2(_3028 * _3011))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3021;
        }
        else
        {
            float _3141 = 1.0 / cbSceneParam._m0[80u].x;
            float _3142 = isnan(_3012) ? _3011 : (isnan(_3011) ? _3012 : max(_3011, _3012));
            float _3143 = isnan(_3012) ? _3011 : (isnan(_3011) ? _3012 : min(_3011, _3012));
            float _3152 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : min(_3142, 0.0));
            float _3153 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : min(_3143, 0.0));
            _3181 = ((abs(_3018 / _3006) * cbSceneParam._m0[80u].y) * ((((_3152 - _3153) * 2.0) - ((exp2(_3026 * (isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0)))) - exp2(_3026 * (isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))))) * _3141)) - ((exp2(_3028 * _3152) - exp2(_3028 * _3153)) * _3141))) + (_3021 * cbSceneParam._m0[80u].z);
        }
        vec4 _3183 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2938, _2939, 1.0), 0.0);
        float _3192 = exp2((_3181 * (-1.44269502162933349609375)) * (1.0 - _3183.w));
        float _3193 = log2(_3192);
        float _3209 = log2(_2958);
        _3030 = (exp2(_3209 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].x)) * _3183.x) / cbSceneParam._m0[78u].x)) + _2955;
        _3032 = (exp2(_3209 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].y)) * _3183.y) / cbSceneParam._m0[78u].y)) + _2956;
        _3034 = (exp2(_3209 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].z)) * _3183.z) / cbSceneParam._m0[78u].z)) + _2957;
        _3036 = _3192 * _2958;
    }
    else
    {
        _3030 = _2955;
        _3032 = _2956;
        _3034 = _2957;
        _3036 = _2958;
    }
    float _3048 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3049 = _3048 == 3.0;
    float _3050 = log2(_3036);
    float _3057 = exp2(_3050 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2900 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _894))) + ((_2906 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1699)) * cbPerFrame._m0[3u].x));
    float _3058 = exp2(_3050 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2902 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _894))) + ((_2908 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1699)) * cbPerFrame._m0[3u].x));
    float _3059 = exp2(_3050 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2904 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _894))) + ((_2910 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1699)) * cbPerFrame._m0[3u].x));
    float _3068 = (_3048 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3068 * (_3049 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3030)));
    SV_Target.y = _3068 * (_3049 ? _3058 : (_3058 + (cbSceneParam._m0[72u].w * _3032)));
    SV_Target.z = _3068 * (_3049 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3034)));
    SV_Target.w = cbInstanceData._m0[_2930].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2930].w;
}


