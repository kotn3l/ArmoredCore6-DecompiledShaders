#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1564;
float _4202;
float _4203;
float _4204;
float _4205;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _417 = _415.x;
    float _429 = dot(vec4(_417, _415.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _446 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _375.x) * 2.0) - ((((_417 - _429) * cbMtdParam._m0[24u].z) + _429) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4214 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _454 = (_447 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _455 = (_447 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _456 = (_447 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _473 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _493 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _495 = _493.x;
    float _505 = dot(vec4(_495, _493.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _519 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _375.y) * 2.0) - ((((_495 - _505) * cbMtdParam._m0[24u].z) + _505) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4225 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _527 = (_520 * ((_473.x * cbMtdParam._m0[13u].x) - _454)) + _454;
    float _528 = (_520 * ((_473.y * cbMtdParam._m0[13u].y) - _455)) + _455;
    float _529 = (_520 * ((_473.z * cbMtdParam._m0[13u].z) - _456)) + _456;
    vec4 _547 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _286) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _287) + cbTextureTilingScale._m0[24u].w));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _566 = _564.x;
    float _576 = dot(vec4(_566, _564.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _588 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _375.z) * 2.0) - ((((_566 - _576) * cbMtdParam._m0[24u].z) + _576) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4236 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _602 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _306.x) * ((_589 * ((_547.x * cbMtdParam._m0[14u].x) - _527)) + _527);
    float _605 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _306.y) * ((_589 * ((_547.y * cbMtdParam._m0[14u].y) - _528)) + _528);
    float _608 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _306.z) * ((_589 * ((_547.z * cbMtdParam._m0[14u].z) - _529)) + _529);
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _286) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _287) + cbTextureTilingScale._m0[14u].w));
    vec4 _646 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _663 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _665 = _663.x;
    float _666 = _663.y;
    float _667 = _663.z;
    float _674 = ((_646.x - _665) * _447) + _665;
    float _675 = ((_646.y - _666) * _447) + _666;
    float _676 = ((_646.z - _667) * _447) + _667;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _699 = ((_688.x - _674) * _520) + _674;
    float _700 = ((_688.y - _675) * _520) + _675;
    float _701 = ((_688.z - _676) * _520) + _676;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _286) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _287) + cbTextureTilingScale._m0[23u].w));
    float _726 = ((_713.z - _701) * _589) + _701;
    float _729 = ((((_713.x - _699) * _589) + _699) * 2.0) + (-1.0);
    float _731 = ((((_713.y - _700) * _589) + _700) * 2.0) + (-1.0);
    float _732 = dot(vec2(_729, _731), vec2(_729, _731));
    float _4247 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _737 = sqrt(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))));
    vec4 _751 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _763 = (((_751.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _729;
    float _764 = (((_751.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _731;
    float _767 = fma(_737, _255, fma(_764, _262, _763 * _248));
    float _770 = fma(_737, _256, fma(_764, _263, _763 * _249));
    float _773 = fma(_737, _257, fma(_764, _264, _763 * _250));
    float _777 = inversesqrt(dot(vec3(_767, _770, _773), vec3(_767, _770, _773)));
    vec4 _804 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _806 = _804.x;
    float _807 = 1.0 - _806;
    float _813 = (cbMtdParam._m0[19u].x + dot(vec4(_777 * _767, _777 * _770, _777 * _773, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_806 - _807) * cbMtdParam._m0[24u].w) + _807) * cbMtdParam._m0[21u].z);
    float _4258 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _814 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _816 = (-0.0) - cbMtdParam._m0[24u].x;
    float _818 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _818 : (isnan(_818) ? 1.0 : min(_818, 1.0));
    float _826 = _814 - ((_814 * TEXCOORD_8.x) * _819);
    float _827 = _814 - ((_814 * TEXCOORD_8.y) * _819);
    float _828 = _814 - ((_814 * TEXCOORD_8.z) * _819);
    float _835 = (_826 * ((_626.x * cbMtdParam._m0[18u].x) - _602)) + _602;
    float _836 = (_827 * ((_626.y * cbMtdParam._m0[18u].y) - _605)) + _605;
    float _837 = (_828 * ((_626.z * cbMtdParam._m0[18u].z) - _608)) + _608;
    vec4 _849 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _851 = _849.x;
    float _852 = 1.0 - _851;
    float _880 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_851 - _852) * cbMtdParam._m0[24u].y) + _852) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4279 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _881 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _889 = ((((cbMtdParam._m0[10u].x - _835) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _881) + _835;
    float _890 = ((((cbMtdParam._m0[10u].y - _836) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _881) + _836;
    float _891 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _837)) * _881) + _837;
    float _895 = (cbMtdParam._m0[19u].w * (_751.z - _726)) + _726;
    vec4 _909 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _916 = (_909.x * 2.0) + (-1.0);
    float _917 = (_909.y * 2.0) + (-1.0);
    float _918 = dot(vec2(_916, _917), vec2(_916, _917));
    float _4290 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _926 = ((_909.z - _895) * _826) + _895;
    float _929 = ((cbMtdParam._m0[23u].y - _926) * _881) + _926;
    vec4 _948 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _954 = (_948.x * 2.0) + (-1.0);
    float _955 = (_948.y * 2.0) + (-1.0);
    float _956 = dot(vec2(_954, _955), vec2(_954, _955));
    float _4301 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _971 = ((sqrt(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) - _737) * _828) + _737;
    float _974 = (((_916 - _763) * _826) + _763) + (cbMtdParam._m0[21u].x * _763);
    float _975 = (((_917 - _764) * _827) + _764) + (cbMtdParam._m0[21u].x * _764);
    float _986 = (((_954 - _974) + (_974 * cbMtdParam._m0[22u].z)) * _881) + _974;
    float _987 = (((_955 - _975) + (_975 * cbMtdParam._m0[22u].z)) * _881) + _975;
    float _988 = (_881 * (sqrt(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) - _971)) + _971;
    float _990 = cbMtdParam._m0[22u].x + _751.w;
    float _993 = fma(_988, _255, fma(_987, _262, _986 * _248));
    float _996 = fma(_988, _256, fma(_987, _263, _986 * _249));
    float _999 = fma(_988, _257, fma(_987, _264, _986 * _250));
    float _1003 = inversesqrt(dot(vec3(_993, _996, _999), vec3(_993, _996, _999)));
    float _1004 = _1003 * _993;
    float _1005 = _1003 * _996;
    float _1006 = _1003 * _999;
    float _4312 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _1007 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _4323 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4334 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4345 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4356 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _1025 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1075 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1065);
    float _1076 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1065);
    float _1077 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1065);
    float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
    float _1082 = _1075 * _1081;
    float _1083 = _1076 * _1081;
    float _1084 = _1077 * _1081;
    vec4 _1089 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1091 = _1089.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1245 = sqrt(((_1075 * _1075) + (_1076 * _1076)) + (_1077 * _1077));
        float _1251 = (cbMatDynParam._m0[5u].x * _1245) + cbMatDynParam._m0[5u].y;
        float _4367 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1256 = (cbMatDynParam._m0[5u].z * _1245) + cbMatDynParam._m0[5u].w;
        float _4378 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) - _1252)) + _1252) < ((_1091 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1102 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1103 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1121 = fma(_1006, cbSceneParam._m0[5u].z, fma(_1005, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1004));
    float _1124 = fma(_1006, cbSceneParam._m0[6u].z, fma(_1005, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1004));
    float _1127 = fma(_1006, cbSceneParam._m0[7u].z, fma(_1005, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1004));
    uint _1140 = _267 + 9u;
    uint _1141 = _1140 + uint(cbMatDynParam._m0[0u].w);
    float _1147 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * cbInstanceData._m0[_1141].x;
    float _1148 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * cbInstanceData._m0[_1141].y;
    float _1149 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * cbInstanceData._m0[_1141].z;
    float _4389 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1150 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _4400 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _1151 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _4411 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _1152 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    vec4 _1161 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1102, cbSceneParam._m0[86u].y * _1103));
    float _1165 = ((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * TEXCOORD_5.w) * _1161.x;
    float _1166 = dot(vec3(_1004, _1005, _1006), vec3(_1082, _1083, _1084));
    float _1169 = _1166 * 2.0;
    float _1173 = (_1169 * _1004) - _1082;
    float _1174 = (_1169 * _1005) - _1083;
    float _1175 = (_1169 * _1006) - _1084;
    float _1179 = abs(dot(vec3(_1082, _1083, _1084), vec3(_1004, _1005, _1006)));
    float _4422 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1181 = sqrt(_1007);
    float _1194 = exp2((_1181 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1181 * 3.0));
    float _1226 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1230 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1234 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1563;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1288 = fma(_1234, cbModelParam._m0[26u].z, fma(_1230, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1226));
        float _1292 = fma(_1234, cbModelParam._m0[27u].z, fma(_1230, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1226));
        float _1296 = fma(_1234, cbModelParam._m0[28u].z, fma(_1230, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1226));
        float _1321 = _1226 + _1004;
        float _1322 = _1230 + _1005;
        float _1323 = _1234 + _1006;
        float _1333 = fma(_1323, cbModelParam._m0[26u].z, fma(_1322, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1321)) - _1288;
        float _1334 = fma(_1323, cbModelParam._m0[27u].z, fma(_1322, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1321)) - _1292;
        float _1335 = fma(_1323, cbModelParam._m0[28u].z, fma(_1322, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1321)) - _1296;
        float _1339 = inversesqrt(dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335)));
        float _1352 = ((_1339 * _1333) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1288 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1339 * _1334) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1292 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1339 * _1335) / cbModelParam._m0[34u].z) + ((((((_1296 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        float _1391 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1357.x + (-0.5));
        float _1393 = _1391 * (_1357.y + (-0.5));
        float _1394 = _1391 * (_1357.z + (-0.5));
        float _1401 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1364.x + (-0.5));
        float _1403 = _1401 * (_1364.y + (-0.5));
        float _1404 = _1401 * (_1364.z + (-0.5));
        float _1411 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1371.x + (-0.5));
        float _1413 = _1411 * (_1371.y + (-0.5));
        float _1414 = _1411 * (_1371.z + (-0.5));
        float _1421 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1378.x + (-0.5));
        float _1423 = _1421 * (_1378.y + (-0.5));
        float _1424 = _1421 * (_1378.z + (-0.5));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = _1392 * 0.5;
        float _1429 = _1402 * 0.5;
        float _1430 = _1412 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1445 = (dot(vec3(_1004, _1005, _1006), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1455 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4470 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1457 + 1.0))) + _1462) * _1425;
        float _1472 = _1393 * 0.5;
        float _1473 = _1403 * 0.5;
        float _1474 = _1413 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_1004, _1005, _1006), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4503 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1499 + 1.0))) + _1504) * _1426;
        float _1514 = _1394 * 0.5;
        float _1515 = _1404 * 0.5;
        float _1516 = _1414 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_1004, _1005, _1006), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4514 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4525 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4536 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_1541 + 1.0))) + _1546) * _1427;
        _1563 = _1394;
        _1565 = _1393;
        _1566 = _1392;
        _1567 = _1404;
        _1568 = _1403;
        _1569 = _1402;
        _1570 = _1414;
        _1571 = _1413;
        _1572 = _1412;
        _1573 = _1427;
        _1574 = _1426;
        _1575 = _1425;
        _1576 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1577 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1578 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
    }
    else
    {
        _1563 = _1564;
        _1565 = _1564;
        _1566 = _1564;
        _1567 = _1564;
        _1568 = _1564;
        _1569 = _1564;
        _1570 = _1564;
        _1571 = _1564;
        _1572 = _1564;
        _1573 = _1564;
        _1574 = _1564;
        _1575 = _1564;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1604 = fma(_1234, cbModelParam._m0[30u].z, fma(_1230, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1226));
        float _1608 = fma(_1234, cbModelParam._m0[31u].z, fma(_1230, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1226));
        float _1612 = fma(_1234, cbModelParam._m0[32u].z, fma(_1230, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1226));
        float _1635 = _1226 + _1004;
        float _1636 = _1230 + _1005;
        float _1637 = _1234 + _1006;
        float _1647 = fma(_1637, cbModelParam._m0[30u].z, fma(_1636, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1635)) - _1604;
        float _1648 = fma(_1637, cbModelParam._m0[31u].z, fma(_1636, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1635)) - _1608;
        float _1649 = fma(_1637, cbModelParam._m0[32u].z, fma(_1636, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1635)) - _1612;
        float _1653 = inversesqrt(dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649)));
        float _1666 = ((_1653 * _1647) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1604 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1667 = ((_1653 * _1648) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1608 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1668 = ((_1653 * _1649) / cbModelParam._m0[35u].z) + ((((((_1612 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        vec4 _1691 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        float _1703 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1670.x + (-0.5));
        float _1705 = _1703 * (_1670.y + (-0.5));
        float _1706 = _1703 * (_1670.z + (-0.5));
        float _1713 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1677.x + (-0.5));
        float _1715 = _1713 * (_1677.y + (-0.5));
        float _1716 = _1713 * (_1677.z + (-0.5));
        float _1723 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1684.x + (-0.5));
        float _1725 = _1723 * (_1684.y + (-0.5));
        float _1726 = _1723 * (_1684.z + (-0.5));
        float _1733 = exp2((_1691.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1691.x + (-0.5));
        float _1735 = _1733 * (_1691.y + (-0.5));
        float _1736 = _1733 * (_1691.z + (-0.5));
        float _1737 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1738 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1739 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1740 = _1704 * 0.5;
        float _1741 = _1714 * 0.5;
        float _1742 = _1724 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_1004, _1005, _1006), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4577 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1737 + 9.9999997473787516355514526367188e-06);
        float _4588 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4599 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_1767 + 1.0))) + _1772) * _1737;
        float _1782 = _1705 * 0.5;
        float _1783 = _1715 * 0.5;
        float _1784 = _1725 * 0.5;
        float _1785 = dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784));
        float _1790 = (_1785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1785);
        float _1798 = (dot(vec3(_1004, _1005, _1006), vec3(_1790 * _1782, _1790 * _1783, _1790 * _1784)) + 1.0) * 0.5;
        float _4610 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1807 = sqrt(((_1783 * _1783) + (_1782 * _1782)) + (_1784 * _1784)) / (_1738 + 9.9999997473787516355514526367188e-06);
        float _4621 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _1809 = _1808 * 2.0;
        float _1813 = (1.0 - _1808) / (_1808 + 1.0);
        float _4632 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _1823 = ((((1.0 - _1814) * (_1809 + 2.0)) * exp2(log2(isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_1809 + 1.0))) + _1814) * _1738;
        float _1824 = _1706 * 0.5;
        float _1825 = _1716 * 0.5;
        float _1826 = _1726 * 0.5;
        float _1827 = dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826));
        float _1832 = (_1827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1827);
        float _1840 = (dot(vec3(_1004, _1005, _1006), vec3(_1832 * _1824, _1832 * _1825, _1832 * _1826)) + 1.0) * 0.5;
        float _4643 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1849 = sqrt(((_1825 * _1825) + (_1824 * _1824)) + (_1826 * _1826)) / (_1739 + 9.9999997473787516355514526367188e-06);
        float _4654 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _1851 = _1850 * 2.0;
        float _1855 = (1.0 - _1850) / (_1850 + 1.0);
        float _4665 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _1865 = ((((1.0 - _1856) * (_1851 + 2.0)) * exp2(log2(isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_1851 + 1.0))) + _1856) * _1739;
        _1873 = _1706;
        _1874 = _1705;
        _1875 = _1704;
        _1876 = _1716;
        _1877 = _1715;
        _1878 = _1714;
        _1879 = _1726;
        _1880 = _1725;
        _1881 = _1724;
        _1882 = _1739;
        _1883 = _1738;
        _1884 = _1737;
        _1885 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
        _1886 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)));
        _1887 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)));
    }
    else
    {
        _1873 = _1564;
        _1874 = _1564;
        _1875 = _1564;
        _1876 = _1564;
        _1877 = _1564;
        _1878 = _1564;
        _1879 = _1564;
        _1880 = _1564;
        _1881 = _1564;
        _1882 = _1564;
        _1883 = _1564;
        _1884 = _1564;
        _1885 = 0.0;
        _1886 = 0.0;
        _1887 = 0.0;
    }
    float _1897 = (cbModelParam._m0[1u].x * (_1885 - _1576)) + _1576;
    float _1898 = (cbModelParam._m0[1u].x * (_1886 - _1577)) + _1577;
    float _1899 = (cbModelParam._m0[1u].x * (_1887 - _1578)) + _1578;
    float _1920 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1898, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1923 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1898, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1926 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1898, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1897));
    float _1941 = _1173 * 0.5;
    float _1942 = _1174 * 0.5;
    float _1943 = _1175 * 0.5;
    float _1944 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1875, _1878, _1881, _1884));
    float _1947 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1874, _1877, _1880, _1883));
    float _1950 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1873, _1876, _1879, _1882));
    float _1984;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1957 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1563, _1567, _1570, _1573));
        float _1961 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1565, _1568, _1571, _1574));
        float _1965 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1566, _1569, _1572, _1575));
        float _1972 = dot(vec4(cbModelParam._m0[39u]), vec4(_1941, _1942, _1943, 1.0));
        _1984 = dot(vec3(isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)), isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1972) ? 0.0 : (isnan(0.0) ? _1972 : max(0.0, _1972))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1984 = 1.0;
    }
    float _1995;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1986 = dot(vec4(cbModelParam._m0[40u]), vec4(_1941, _1942, _1943, 1.0));
        _1995 = dot(vec3(isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0)), isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0)), isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1986) ? 0.0 : (isnan(0.0) ? _1986 : max(0.0, _1986))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1995 = 1.0;
    }
    float _1999 = (_1995 * cbModelParam._m0[1u].x) + (_1984 * (1.0 - cbModelParam._m0[1u].x));
    float _2009 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1007);
    float _2010 = isnan(_2009) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2009 : min(cbModelParam._m0[25u].z, _2009));
    float _2090;
    float _2092;
    float _2094;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2057 = fma(_1234, cbModelParam._m0[13u].z, fma(_1230, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1226)) + cbModelParam._m0[13u].w;
        float _2061 = fma(_1234, cbModelParam._m0[14u].z, fma(_1230, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1226)) + cbModelParam._m0[14u].w;
        float _2065 = fma(_1234, cbModelParam._m0[15u].z, fma(_1230, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1226)) + cbModelParam._m0[15u].w;
        float _2068 = fma(_1175, cbModelParam._m0[13u].z, fma(_1174, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1173));
        float _2071 = fma(_1175, cbModelParam._m0[14u].z, fma(_1174, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1173));
        float _2074 = fma(_1175, cbModelParam._m0[15u].z, fma(_1174, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1173));
        float _2102;
        if (_2068 > 0.0)
        {
            _2102 = abs((1.0 - _2057) / _2068);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2057 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2102 = frontier_phi_17_15_ladder;
        }
        float _2271;
        if (_2071 > 0.0)
        {
            _2271 = abs((1.0 - _2061) / _2071);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2061 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2271 = frontier_phi_26_22_ladder;
        }
        float _2566;
        if (_2074 > 0.0)
        {
            _2566 = abs((1.0 - _2065) / _2074);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2065 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2566 = frontier_phi_38_33_ladder;
        }
        float _2568 = isnan(_2271) ? _2102 : (isnan(_2102) ? _2271 : min(_2102, _2271));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _2068) + _2057;
        float _2574 = (_2569 * _2071) + _2061;
        float _2575 = (_2569 * _2074) + _2065;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2578 = (-1.0) - _2576;
        float _2580 = _2576 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2575 > _2580) || ((_2575 < _2578) || ((_2574 > _2580) || ((_2574 < _2578) || ((_2573 < _2578) || (_2573 > _2580))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2575, cbModelParam._m0[9u].z, fma(_2574, cbModelParam._m0[9u].y, _2573 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2575, cbModelParam._m0[10u].z, fma(_2574, cbModelParam._m0[10u].y, _2573 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2575, cbModelParam._m0[11u].z, fma(_2574, cbModelParam._m0[11u].y, _2573 * cbModelParam._m0[11u].x))), _2010);
            frontier_phi_16_38_ladder = _2720.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2720.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2720.x * cbModelParam._m0[1u].y;
        }
        _2090 = frontier_phi_16_38_ladder_2;
        _2092 = frontier_phi_16_38_ladder_1;
        _2094 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2078 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1173, _1174, _1175), _2010);
        _2090 = _2078.x * cbModelParam._m0[1u].y;
        _2092 = _2078.y * cbModelParam._m0[1u].y;
        _2094 = _2078.z * cbModelParam._m0[1u].y;
    }
    float _2098 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1007);
    float _2099 = isnan(_2098) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2098 : min(cbModelParam._m0[25u].w, _2098));
    float _2188;
    float _2190;
    float _2192;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2152 = fma(_1234, cbModelParam._m0[21u].z, fma(_1230, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1226)) + cbModelParam._m0[21u].w;
        float _2156 = fma(_1234, cbModelParam._m0[22u].z, fma(_1230, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1226)) + cbModelParam._m0[22u].w;
        float _2160 = fma(_1234, cbModelParam._m0[23u].z, fma(_1230, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1226)) + cbModelParam._m0[23u].w;
        float _2163 = fma(_1175, cbModelParam._m0[21u].z, fma(_1174, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1173));
        float _2166 = fma(_1175, cbModelParam._m0[22u].z, fma(_1174, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1173));
        float _2169 = fma(_1175, cbModelParam._m0[23u].z, fma(_1174, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1173));
        float _2276;
        if (_2163 > 0.0)
        {
            _2276 = abs((1.0 - _2152) / _2163);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2152 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2276 = frontier_phi_28_24_ladder;
        }
        float _2593;
        if (_2166 > 0.0)
        {
            _2593 = abs((1.0 - _2156) / _2166);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2166 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2156 + 1.0) / _2166);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2593 = frontier_phi_40_35_ladder;
        }
        float _2920;
        if (_2169 > 0.0)
        {
            _2920 = abs((1.0 - _2160) / _2169);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2169 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2160 + 1.0) / _2169);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2920 = frontier_phi_50_47_ladder;
        }
        float _2922 = isnan(_2593) ? _2276 : (isnan(_2276) ? _2593 : min(_2276, _2593));
        float _2923 = isnan(_2920) ? _2922 : (isnan(_2922) ? _2920 : min(_2922, _2920));
        float _2927 = (_2923 * _2163) + _2152;
        float _2928 = (_2923 * _2166) + _2156;
        float _2929 = (_2923 * _2169) + _2160;
        float _2930 = _2923 * 9.9999997473787516355514526367188e-05;
        float _2931 = (-1.0) - _2930;
        float _2933 = _2930 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2929 > _2933) || ((_2929 < _2931) || ((_2928 > _2933) || ((_2928 < _2931) || ((_2927 < _2931) || (_2927 > _2933))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3047 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2929, cbModelParam._m0[17u].z, fma(_2928, cbModelParam._m0[17u].y, _2927 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2929, cbModelParam._m0[18u].z, fma(_2928, cbModelParam._m0[18u].y, _2927 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2929, cbModelParam._m0[19u].z, fma(_2928, cbModelParam._m0[19u].y, _2927 * cbModelParam._m0[19u].x))), _2099);
            frontier_phi_25_50_ladder = _3047.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3047.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3047.x * cbModelParam._m0[1u].z;
        }
        _2188 = frontier_phi_25_50_ladder_2;
        _2190 = frontier_phi_25_50_ladder_1;
        _2192 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2172 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1173, _1174, _1175), _2099);
        _2188 = _2172.x * cbModelParam._m0[1u].z;
        _2190 = _2172.y * cbModelParam._m0[1u].z;
        _2192 = _2172.z * cbModelParam._m0[1u].z;
    }
    float _2204 = ((((1.0 - _1194) * ((_1181 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1194 * _1181)) * _1165;
    float _2205 = _2204 * ((cbModelParam._m0[1u].w * (_2188 - _2090)) + _2090);
    float _2206 = _2204 * ((cbModelParam._m0[1u].w * (_2190 - _2092)) + _2092);
    float _2207 = _2204 * ((cbModelParam._m0[1u].w * (_2192 - _2094)) + _2094);
    float _2210 = fma(_2207, cbSceneParam._m0[89u].z, fma(_2206, cbSceneParam._m0[89u].y, _2205 * cbSceneParam._m0[89u].x));
    float _2213 = fma(_2207, cbSceneParam._m0[90u].z, fma(_2206, cbSceneParam._m0[90u].y, _2205 * cbSceneParam._m0[90u].x));
    float _2216 = fma(_2207, cbSceneParam._m0[91u].z, fma(_2206, cbSceneParam._m0[91u].y, _2205 * cbSceneParam._m0[91u].x));
    float _2250 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2254 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2258 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2262 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2263 = _2250 / _2262;
    float _2264 = _2254 / _2262;
    float _2265 = _2258 / _2262;
    float _2412;
    float _2413;
    float _2414;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2292 = ((uint(_2265 > cbSceneParam._m0[59u].y) + uint(_2265 > cbSceneParam._m0[59u].x)) + uint(_2265 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2293 = _2292 + 43u;
        uint _2301 = _2292 + 44u;
        uint _2309 = _2292 + 45u;
        uint _2317 = _2292 + 46u;
        float _2328 = fma(_2262, cbSceneParam._m0[_2293].w, fma(_2258, cbSceneParam._m0[_2293].z, fma(_2254, cbSceneParam._m0[_2293].y, _2250 * cbSceneParam._m0[_2293].x)));
        float _2332 = fma(_2262, cbSceneParam._m0[_2301].w, fma(_2258, cbSceneParam._m0[_2301].z, fma(_2254, cbSceneParam._m0[_2301].y, _2250 * cbSceneParam._m0[_2301].x)));
        float _2340 = fma(_2262, cbSceneParam._m0[_2317].w, fma(_2258, cbSceneParam._m0[_2317].z, fma(_2254, cbSceneParam._m0[_2317].y, _2250 * cbSceneParam._m0[_2317].x)));
        float _2345 = cbSceneParam._m0[33u].z * _2340;
        float _2347 = cbSceneParam._m0[33u].w * _2340;
        float _2350 = fma(_2262, cbSceneParam._m0[_2309].w, fma(_2258, cbSceneParam._m0[_2309].z, fma(_2254, cbSceneParam._m0[_2309].y, _2250 * cbSceneParam._m0[_2309].x))) / _2340;
        float _2398 = (cbSceneParam._m0[33u].x - sqrt(((_2264 * _2264) + (_2263 * _2263)) + (_2265 * _2265))) * cbSceneParam._m0[33u].y;
        float _4791 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2405 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2345 + _2328) / _2340, (_2347 + _2332) / _2340), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2347 + _2328) / _2340, (_2332 - _2345) / _2340), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2328 - _2345) / _2340, (_2332 - _2347) / _2340), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2328 - _2347) / _2340, (_2345 + _2332) / _2340), _2350), 0.0)).x), vec4(0.25)));
        _2412 = 1.0 - (_2405 * cbSceneParam._m0[34u].x);
        _2413 = 1.0 - (_2405 * cbSceneParam._m0[34u].y);
        _2414 = 1.0 - (_2405 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2412 = 1.0;
        _2413 = 1.0;
        _2414 = 1.0;
    }
    float _2478;
    float _2480;
    float _2482;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2466 = fma(_2262, cbSceneParam._m0[63u].w, fma(_2258, cbSceneParam._m0[63u].z, fma(_2254, cbSceneParam._m0[63u].y, _2250 * cbSceneParam._m0[63u].x)));
        float _2467 = fma(_2262, cbSceneParam._m0[60u].w, fma(_2258, cbSceneParam._m0[60u].z, fma(_2254, cbSceneParam._m0[60u].y, _2250 * cbSceneParam._m0[60u].x))) / _2466;
        float _2468 = fma(_2262, cbSceneParam._m0[61u].w, fma(_2258, cbSceneParam._m0[61u].z, fma(_2254, cbSceneParam._m0[61u].y, _2250 * cbSceneParam._m0[61u].x))) / _2466;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2467 >= cbSceneParam._m0[64u].x) && (_2468 >= cbSceneParam._m0[64u].y)) && (_2467 <= cbSceneParam._m0[64u].z)) && (_2468 <= cbSceneParam._m0[64u].w))
        {
            float _2606 = fma(_2262, cbSceneParam._m0[62u].w, fma(_2258, cbSceneParam._m0[62u].z, fma(_2254, cbSceneParam._m0[62u].y, _2250 * cbSceneParam._m0[62u].x))) / _2466;
            float _2610 = isnan(cbSceneParam._m0[41u].w) ? _2606 : (isnan(_2606) ? cbSceneParam._m0[41u].w : max(_2606, cbSceneParam._m0[41u].w));
            float _2653 = (cbSceneParam._m0[33u].x - sqrt(((_2264 * _2264) + (_2263 * _2263)) + (_2265 * _2265))) * cbSceneParam._m0[33u].y;
            float _4807 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
            float _2660 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2467, cbSceneParam._m0[33u].w + _2468), _2610), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2467, _2468 - cbSceneParam._m0[33u].z), _2610), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2467 - cbSceneParam._m0[33u].z, _2468 - cbSceneParam._m0[33u].w), _2610), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2467 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2468), _2610), 0.0)).x), vec4(0.25)));
            float _2664 = 1.0 - (_2660 * cbSceneParam._m0[34u].x);
            float _2665 = 1.0 - (_2660 * cbSceneParam._m0[34u].y);
            float _2666 = 1.0 - (_2660 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2666) ? _2414 : (isnan(_2414) ? _2666 : min(_2414, _2666));
            frontier_phi_37_36_ladder_1 = isnan(_2665) ? _2413 : (isnan(_2413) ? _2665 : min(_2413, _2665));
            frontier_phi_37_36_ladder_2 = isnan(_2664) ? _2412 : (isnan(_2412) ? _2664 : min(_2412, _2664));
        }
        else
        {
            frontier_phi_37_36_ladder = _2414;
            frontier_phi_37_36_ladder_1 = _2413;
            frontier_phi_37_36_ladder_2 = _2412;
        }
        _2478 = frontier_phi_37_36_ladder_2;
        _2480 = frontier_phi_37_36_ladder_1;
        _2482 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2478 = _2412;
        _2480 = _2413;
        _2482 = _2414;
    }
    uvec4 _2487 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2489 = _2487.x * 14u;
    uint _2490 = _2489 + 13u;
    float _2497 = _1165 + (-1.0);
    float _2502 = (cbLight._m0[_2490].x * _2497) + 1.0;
    float _2503 = (cbLight._m0[_2490].y * _2497) + 1.0;
    float _2504 = (cbLight._m0[_2490].z * _2497) + 1.0;
    float _2505 = (cbLight._m0[_2490].w * _2497) + 1.0;
    uint _2506 = _2489 + 5u;
    float _2512 = isnan(1.0) ? _2503 : (isnan(_2503) ? 1.0 : min(_2503, 1.0));
    uint _2516 = _2489 + 4u;
    float _2525 = isnan(1.0) ? _2502 : (isnan(_2502) ? 1.0 : min(_2502, 1.0));
    uint _2529 = _2489 | 1u;
    float _2540 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_1004, _1005, _1006));
    float _2543 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_1004, _1005, _1006));
    float _4843 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _4854 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2548 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * 0.3183098733425140380859375;
    float _2550 = (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * 0.3183098733425140380859375;
    float _2557 = ((cbLight._m0[_2506].x * _2512) * _2550) + (((cbLight._m0[_2516].x * _2478) * _2525) * _2548);
    float _2558 = ((_2512 * cbLight._m0[_2506].y) * _2550) + (((cbLight._m0[_2516].y * _2480) * _2525) * _2548);
    float _2559 = ((_2512 * cbLight._m0[_2506].z) * _2550) + (((cbLight._m0[_2516].z * _2482) * _2525) * _2548);
    uvec4 _2563 = floatBitsToUint(cbLight._m0[_2489 + 12u]);
    bool _2565 = _2563.x == 0u;
    float _2667;
    float _2669;
    float _2671;
    if (_2565)
    {
        _2667 = _2557;
        _2669 = _2558;
        _2671 = _2559;
    }
    else
    {
        uint _2675 = _2489 + 6u;
        float _2691 = (dot(vec3(cbLight._m0[_2489 + 2u].xyz), vec3(_1004, _1005, _1006)) * 0.5) + 0.5;
        float _2692 = _2691 * _2691;
        float _4865 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2693 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2694 = isnan(1.0) ? _2504 : (isnan(_2504) ? 1.0 : min(_2504, 1.0));
        _2667 = (((cbLight._m0[_2675].x * 0.3183098733425140380859375) * _2693) * _2694) + _2557;
        _2669 = (((cbLight._m0[_2675].y * 0.3183098733425140380859375) * _2693) * _2694) + _2558;
        _2671 = (((cbLight._m0[_2675].z * 0.3183098733425140380859375) * _2693) * _2694) + _2559;
    }
    bool _2674 = _2563.y == 0u;
    float _2729;
    float _2731;
    float _2733;
    if (_2674)
    {
        _2729 = _2667;
        _2731 = _2669;
        _2733 = _2671;
    }
    else
    {
        uint _2891 = _2489 + 7u;
        float _2907 = (dot(vec3(cbLight._m0[_2489 + 3u].xyz), vec3(_1004, _1005, _1006)) * 0.5) + 0.5;
        float _2908 = _2907 * _2907;
        float _4881 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2909 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
        float _2910 = isnan(1.0) ? _2505 : (isnan(_2505) ? 1.0 : min(_2505, 1.0));
        _2729 = (((cbLight._m0[_2891].x * 0.3183098733425140380859375) * _2909) * _2910) + _2667;
        _2731 = (((cbLight._m0[_2891].y * 0.3183098733425140380859375) * _2909) * _2910) + _2669;
        _2733 = (((cbLight._m0[_2891].z * 0.3183098733425140380859375) * _2909) * _2910) + _2671;
    }
    uint _2736 = _2489 + 8u;
    float _2749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _1007) * 0.949999988079071044921875);
    float _2750 = _2749 * _2749;
    float _2751 = cbLight._m0[_2489].x + _1082;
    float _2752 = cbLight._m0[_2489].y + _1083;
    float _2753 = cbLight._m0[_2489].z + _1084;
    float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
    float _2758 = _2757 * _2751;
    float _2759 = _2757 * _2752;
    float _2760 = _2757 * _2753;
    float _2761 = dot(vec3(_1004, _1005, _1006), vec3(cbLight._m0[_2489].xyz));
    float _4897 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2764 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
    float _4908 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _2765 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
    float _2766 = dot(vec3(_1004, _1005, _1006), vec3(_2758, _2759, _2760));
    float _4919 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2769 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
    float _2770 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2758, _2759, _2760));
    float _4930 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2774 = _2750 * _2750;
    float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
    float _2789 = (exp2(log2(1.0 - (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2790 = 1.0 - _2750;
    float _2801 = (0.5 / (((_2765 * ((_2764 * _2790) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _2790) + _2750) * _2764))) * _2764;
    float _4941 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2803 = (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
    uint _2817 = _2489 + 9u;
    float _2828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2529].w)) * _1007) * 0.949999988079071044921875);
    float _2829 = _2828 * _2828;
    float _2830 = cbLight._m0[_2529].x + _1082;
    float _2831 = cbLight._m0[_2529].y + _1083;
    float _2832 = cbLight._m0[_2529].z + _1084;
    float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
    float _2837 = _2836 * _2830;
    float _2838 = _2836 * _2831;
    float _2839 = _2836 * _2832;
    float _2840 = dot(vec3(_1004, _1005, _1006), vec3(cbLight._m0[_2529].xyz));
    float _4952 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
    float _2843 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
    float _2844 = dot(vec3(_1004, _1005, _1006), vec3(_2837, _2838, _2839));
    float _4963 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
    float _2847 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
    float _2848 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_2837, _2838, _2839));
    float _4974 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
    float _2852 = _2829 * _2829;
    float _2856 = ((_2847 * _2847) * (_2852 + (-1.0))) + 1.0;
    float _2865 = (exp2(log2(1.0 - (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2866 = 1.0 - _2829;
    float _2876 = (0.5 / (((_2765 * ((_2843 * _2866) + _2829)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _2866) + _2829) * _2843))) * _2843;
    float _4985 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
    float _2878 = (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0))) * (_2852 / ((_2856 * _2856) * 3.141590118408203125));
    float _2888 = (((_2865 * cbLight._m0[_2817].x) * _2878) * _2512) + ((((cbLight._m0[_2736].x * _2478) * _2789) * _2803) * _2525);
    float _2889 = (((_2865 * cbLight._m0[_2817].y) * _2878) * _2512) + ((((cbLight._m0[_2736].y * _2480) * _2789) * _2803) * _2525);
    float _2890 = (((_2865 * cbLight._m0[_2817].z) * _2878) * _2512) + ((((cbLight._m0[_2736].z * _2482) * _2789) * _2803) * _2525);
    float _2946;
    float _2948;
    float _2950;
    if (_2565)
    {
        _2946 = _2888;
        _2948 = _2889;
        _2950 = _2890;
    }
    else
    {
        uint _2952 = _2489 + 2u;
        uint _2956 = _2489 + 10u;
        float _2970 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2952].w)) * _1007) * 0.949999988079071044921875);
        float _2971 = _2970 * _2970;
        float _2972 = cbLight._m0[_2952].x + _1082;
        float _2973 = cbLight._m0[_2952].y + _1083;
        float _2974 = cbLight._m0[_2952].z + _1084;
        float _2978 = inversesqrt(dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974)));
        float _2979 = _2978 * _2972;
        float _2980 = _2978 * _2973;
        float _2981 = _2978 * _2974;
        float _2982 = dot(vec3(_1004, _1005, _1006), vec3(cbLight._m0[_2952].xyz));
        float _4996 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2985 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
        float _2986 = dot(vec3(_1004, _1005, _1006), vec3(_2979, _2980, _2981));
        float _5007 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        float _2989 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
        float _2990 = dot(vec3(cbLight._m0[_2952].xyz), vec3(_2979, _2980, _2981));
        float _5018 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        float _2994 = _2971 * _2971;
        float _2998 = ((_2989 * _2989) * (_2994 + (-1.0))) + 1.0;
        float _3007 = (exp2(log2(1.0 - (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3008 = 1.0 - _2971;
        float _3018 = (0.5 / (((_2765 * ((_2985 * _3008) + _2971)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _3008) + _2971) * _2985))) * _2985;
        float _5029 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3020 = (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_2994 / ((_2998 * _2998) * 3.141590118408203125));
        float _3021 = isnan(1.0) ? _2504 : (isnan(_2504) ? 1.0 : min(_2504, 1.0));
        _2946 = (((_3007 * cbLight._m0[_2956].x) * _3020) * _3021) + _2888;
        _2948 = (((_3007 * cbLight._m0[_2956].y) * _3020) * _3021) + _2889;
        _2950 = (((_3007 * cbLight._m0[_2956].z) * _3020) * _3021) + _2890;
    }
    float _3052;
    float _3054;
    float _3056;
    if (_2674)
    {
        _3052 = _2946;
        _3054 = _2948;
        _3056 = _2950;
    }
    else
    {
        uint _3063 = _2489 + 3u;
        uint _3067 = _2489 + 11u;
        float _3081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3063].w)) * _1007) * 0.949999988079071044921875);
        float _3082 = _3081 * _3081;
        float _3083 = cbLight._m0[_3063].x + _1082;
        float _3084 = cbLight._m0[_3063].y + _1083;
        float _3085 = cbLight._m0[_3063].z + _1084;
        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
        float _3090 = _3089 * _3083;
        float _3091 = _3089 * _3084;
        float _3092 = _3089 * _3085;
        float _3093 = dot(vec3(_1004, _1005, _1006), vec3(cbLight._m0[_3063].xyz));
        float _5045 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
        float _3096 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
        float _3097 = dot(vec3(_1004, _1005, _1006), vec3(_3090, _3091, _3092));
        float _5056 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
        float _3100 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
        float _3101 = dot(vec3(cbLight._m0[_3063].xyz), vec3(_3090, _3091, _3092));
        float _5067 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
        float _3105 = _3082 * _3082;
        float _3109 = ((_3100 * _3100) * (_3105 + (-1.0))) + 1.0;
        float _3118 = (exp2(log2(1.0 - (isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3119 = 1.0 - _3082;
        float _3129 = (0.5 / (((_2765 * ((_3096 * _3119) + _3082)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _3119) + _3082) * _3096))) * _3096;
        float _5078 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
        float _3131 = (isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_3105 / ((_3109 * _3109) * 3.141590118408203125));
        float _3132 = isnan(1.0) ? _2505 : (isnan(_2505) ? 1.0 : min(_2505, 1.0));
        _3052 = (((_3118 * cbLight._m0[_3067].x) * _3131) * _3132) + _2946;
        _3054 = (((_3118 * cbLight._m0[_3067].y) * _3131) * _3132) + _2948;
        _3056 = (((_3118 * cbLight._m0[_3067].z) * _3131) * _3132) + _2950;
    }
    float _3198;
    float _3200;
    float _3202;
    float _3204;
    float _3206;
    float _3208;
    if (_2487.y == 0u)
    {
        uvec4 _3153 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3154 = _3153.x;
        uint _3165 = uint((float(_3153.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1103) / _3154))) + floor(float(uint(cbSceneParam._m0[85u].x * _1102) / _3154)));
        float _3175 = (log2(_2265 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3176 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
        uint _3179 = uint(isnan(14.0) ? _3176 : (isnan(_3176) ? 14.0 : min(_3176, 14.0)));
        uvec4 _3184 = texelFetch(g_lightClusterGridBuffer, int(((_3179 << 2u) + (_3165 << 6u)) >> 2u));
        uint _3185 = _3184.x;
        uint _3186 = _3153.z;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        float _3275;
        if (((((1u << ((_3186 >> 4u) & 15u)) + 4294967295u) & _3185) == 0u) || ((_3186 & 240u) == 0u))
        {
            _3265 = 0.0;
            _3267 = 0.0;
            _3269 = 0.0;
            _3271 = 0.0;
            _3273 = 0.0;
            _3275 = 0.0;
        }
        else
        {
            float _3266;
            float _3268;
            float _3270;
            float _3272;
            float _3274;
            float _3276;
            float _3417 = 0.0;
            float _3418 = 0.0;
            float _3419 = 0.0;
            float _3420 = 0.0;
            float _3421 = 0.0;
            float _3422 = 0.0;
            uint _3423 = 0u;
            uint _3432;
            bool _3433;
            for (;;)
            {
                _3432 = texelFetch(g_lightClassification, int((((_3179 << 5u) + (_3165 << 9u)) + (_3423 << 2u)) >> 2u)).x;
                _3433 = _3432 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3433)
                {
                    frontier_phi_71_pred = _3422;
                    frontier_phi_71_pred_1 = _3421;
                    frontier_phi_71_pred_2 = _3420;
                    frontier_phi_71_pred_3 = _3419;
                    frontier_phi_71_pred_4 = _3418;
                    frontier_phi_71_pred_5 = _3417;
                }
                else
                {
                    float _3562;
                    float _3563;
                    float _3564;
                    float _3565;
                    float _3566;
                    float _3567;
                    uint _3568;
                    _3562 = _3417;
                    _3563 = _3418;
                    _3564 = _3419;
                    _3565 = _3420;
                    _3566 = _3421;
                    _3567 = _3422;
                    _3568 = _3432;
                    float _3489;
                    float _3490;
                    float _3491;
                    float _3492;
                    float _3493;
                    float _3494;
                    for (;;)
                    {
                        uint _3572 = uint(findLSB(_3568)) + (_3423 << 5u);
                        uint _3569 = (_3568 + 4294967295u) & _3568;
                        uint _3574 = _3572 * 48u;
                        vec4 _3588 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3574)).x, texelFetch(g_PointLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3574 + 3u)).x));
                        uint _3594 = (_3572 * 48u) + 4u;
                        vec4 _3607 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3594)).x, texelFetch(g_PointLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3594 + 3u)).x));
                        uint _3613 = (_3572 * 48u) + 8u;
                        vec3 _3624 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3613)).x, texelFetch(g_PointLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3613 + 2u)).x));
                        float _3628 = _3588.x - _2263;
                        float _3629 = _3588.y - _2264;
                        float _3630 = _3588.z - _2265;
                        float _3631 = dot(vec3(_3628, _3629, _3630), vec3(_3628, _3629, _3630));
                        float _3634 = inversesqrt(_3631);
                        float _3635 = _3634 * _3628;
                        float _3636 = _3634 * _3629;
                        float _3637 = _3634 * _3630;
                        float _3638 = dot(vec3(_1121, _1124, _1127), vec3(_3635, _3636, _3637));
                        float _3643 = 1.0 - (_3631 * _3588.w);
                        float _5104 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                        float _3644 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                        float _3645 = sqrt(_3631) * _3607.w;
                        float _3648 = 1.39999997615814208984375 / (_3645 + 1.39999997615814208984375);
                        float _3649 = _3648 * _3648;
                        float _3652 = ((1.0 - _3649) * _3638) + _3649;
                        float _3655 = _3645 * _3645;
                        float _3659 = ((isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0))) * _3644) / ((_3655 * 0.699999988079071044921875) + 1.0);
                        float _3663 = (-0.0) - _2263;
                        float _3664 = (-0.0) - _2264;
                        float _3665 = (-0.0) - _2265;
                        float _3669 = inversesqrt(dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665)));
                        float _3670 = _3669 * _3663;
                        float _3671 = _3669 * _3664;
                        float _3672 = _3669 * _3665;
                        float _3679 = exp2(log2(1.0 / ((_3655 * 3.5) + 5.0)) * 0.25);
                        float _3680 = 1.0 - _1181;
                        float _3687 = sqrt(1.0 - ((1.0 - (_3680 * _3680)) * (1.0 - (_3679 * _3679))));
                        float _3688 = _3687 * _3687;
                        float _3689 = _3688 * _3688;
                        float _3690 = _3670 + _3635;
                        float _3691 = _3671 + _3636;
                        float _3692 = _3672 + _3637;
                        float _3696 = inversesqrt(dot(vec3(_3690, _3691, _3692), vec3(_3690, _3691, _3692)));
                        float _3700 = dot(vec3(_1121, _1124, _1127), vec3(_3670, _3671, _3672));
                        float _5120 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                        float _3703 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
                        float _3704 = dot(vec3(_1121, _1124, _1127), vec3(_3696 * _3690, _3696 * _3691, _3696 * _3692));
                        float _5131 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                        float _3707 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                        float _3711 = ((_3707 * _3707) * (_3689 + (-1.0))) + 1.0;
                        float _3712 = _3648 * _3688;
                        float _3713 = _3712 * _3712;
                        float _3716 = ((1.0 - _3713) * _3638) + _3713;
                        float _5142 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                        float _3717 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
                        float _3718 = 1.0 - _3688;
                        float _3728 = (0.5 / (((_3717 * ((_3703 * _3718) + _3688)) + 9.9999999392252902907785028219223e-09) + (((_3717 * _3718) + _3688) * _3703))) * _3717;
                        float _5153 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                        float _3739 = (((_3689 * 3.1415927410125732421875) * (isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0)))) / ((_3711 * _3711) * ((_3655 * 2.1991131305694580078125) + 3.141590118408203125))) * _3644;
                        _3492 = (_3659 * _3607.x) + _3565;
                        _3493 = (_3659 * _3607.y) + _3566;
                        _3494 = (_3659 * _3607.z) + _3567;
                        _3489 = (_3739 * _3624.x) + _3562;
                        _3490 = (_3739 * _3624.y) + _3563;
                        _3491 = (_3739 * _3624.z) + _3564;
                        if (_3569 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3562 = _3489;
                            _3563 = _3490;
                            _3564 = _3491;
                            _3565 = _3492;
                            _3566 = _3493;
                            _3567 = _3494;
                            _3568 = _3569;
                        }
                    }
                    frontier_phi_71_pred = _3494;
                    frontier_phi_71_pred_1 = _3493;
                    frontier_phi_71_pred_2 = _3492;
                    frontier_phi_71_pred_3 = _3491;
                    frontier_phi_71_pred_4 = _3490;
                    frontier_phi_71_pred_5 = _3489;
                }
                _3276 = frontier_phi_71_pred;
                _3274 = frontier_phi_71_pred_1;
                _3272 = frontier_phi_71_pred_2;
                _3270 = frontier_phi_71_pred_3;
                _3268 = frontier_phi_71_pred_4;
                _3266 = frontier_phi_71_pred_5;
                uint _3424 = _3423 + 1u;
                if (_3424 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3417 = _3266;
                    _3418 = _3268;
                    _3419 = _3270;
                    _3420 = _3272;
                    _3421 = _3274;
                    _3422 = _3276;
                    _3423 = _3424;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3265 = _3266;
            _3267 = _3268;
            _3269 = _3270;
            _3271 = _3272;
            _3273 = _3274;
            _3275 = _3276;
        }
        uvec4 _3279 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3280 = _3279.z;
        uint _3282 = (_3280 >> 8u) & 15u;
        float _3385;
        float _3387;
        float _3389;
        float _3391;
        float _3393;
        float _3395;
        if (((4294967295u << _3282) & _3185) == 0u)
        {
            _3385 = _3265;
            _3387 = _3267;
            _3389 = _3269;
            _3391 = _3271;
            _3393 = _3273;
            _3395 = _3275;
        }
        else
        {
            float _3410 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
            float _3411 = _3410 * _2263;
            float _3412 = _3410 * _2264;
            float _3413 = _3410 * _2265;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3282 < ((_3280 >> 12u) & 15u))
            {
                float _3386;
                float _3388;
                float _3390;
                float _3392;
                float _3394;
                float _3396;
                float _3545 = _3265;
                float _3546 = _3267;
                float _3547 = _3269;
                float _3548 = _3271;
                float _3549 = _3273;
                float _3550 = _3275;
                uint _3551 = _3282;
                uint _3560;
                bool _3561;
                for (;;)
                {
                    _3560 = texelFetch(g_lightClassification, int((((_3179 << 5u) + (_3165 << 9u)) + (_3551 << 2u)) >> 2u)).x;
                    _3561 = _3560 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3561)
                    {
                        frontier_phi_82_pred = _3550;
                        frontier_phi_82_pred_1 = _3549;
                        frontier_phi_82_pred_2 = _3548;
                        frontier_phi_82_pred_3 = _3547;
                        frontier_phi_82_pred_4 = _3546;
                        frontier_phi_82_pred_5 = _3545;
                    }
                    else
                    {
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _4046;
                        float _4047;
                        float _4048;
                        float _4049;
                        float _4050;
                        float _4051;
                        float _3766 = _3545;
                        float _3767 = _3546;
                        float _3768 = _3547;
                        float _3769 = _3548;
                        float _3770 = _3549;
                        float _3771 = _3550;
                        uint _3772 = _3560;
                        uint _3773;
                        vec4 _3798;
                        float _3799;
                        vec4 _3814;
                        vec3 _3826;
                        vec4 _3841;
                        vec4 _3856;
                        float _3902;
                        bool _3903;
                        for (;;)
                        {
                            uint _3783 = ((_3551 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3772));
                            _3773 = (_3772 + 4294967295u) & _3772;
                            uint _3785 = _3783 * 40u;
                            _3798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 3u)).x));
                            _3799 = _3798.w;
                            uint _3801 = (_3783 * 40u) + 4u;
                            _3814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 3u)).x));
                            uint _3816 = (_3783 * 40u) + 8u;
                            _3826 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 2u)).x));
                            uint _3828 = (_3783 * 40u) + 16u;
                            _3841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 3u)).x));
                            uint _3843 = (_3783 * 40u) + 20u;
                            _3856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 3u)).x));
                            uint _3858 = (_3783 * 40u) + 24u;
                            vec4 _3871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 3u)).x));
                            uint _3877 = (_3783 * 40u) + 28u;
                            vec4 _3890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 3u)).x));
                            _3902 = fma(_2265, _3890.z, fma(_2264, _3890.y, _3890.x * _2263)) + _3890.w;
                            _3903 = !((fma(_2265, _3871.z, fma(_2264, _3871.y, _3871.x * _2263)) + _3871.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3903)
                            {
                                float _3930 = _3798.x - _2263;
                                float _3931 = _3798.y - _2264;
                                float _3932 = _3798.z - _2265;
                                float _3933 = dot(vec3(_3930, _3931, _3932), vec3(_3930, _3931, _3932));
                                float _3936 = inversesqrt(_3933);
                                float _3937 = _3936 * _3930;
                                float _3938 = _3936 * _3931;
                                float _3939 = _3936 * _3932;
                                float _3943 = 1.0 - (_3933 / (_3799 * _3799));
                                float _5164 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                                float _3944 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
                                float _3948 = sqrt(_3933) * _3814.w;
                                float _3950 = 1.39999997615814208984375 / (_3948 + 1.39999997615814208984375);
                                float _3951 = _3950 * _3950;
                                float _3954 = ((1.0 - _3951) * dot(vec3(_3937, _3938, _3939), vec3(_1121, _1124, _1127))) + _3951;
                                float _3957 = _3948 * _3948;
                                float _3961 = (fma(_2265, _3841.z, fma(_2264, _3841.y, _3841.x * _2263)) + _3841.w) / _3902;
                                float _3962 = (fma(_2265, _3856.z, fma(_2264, _3856.y, _3856.x * _2263)) + _3856.w) / _3902;
                                float _3966 = 1.0 - dot(vec2(_3961, _3962), vec2(_3961, _3962));
                                float _5180 = isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0));
                                float _3967 = isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0));
                                float _3968 = _3967 * (((isnan(0.0) ? _3954 : (isnan(_3954) ? 0.0 : max(_3954, 0.0))) * _3944) / ((_3957 * 0.699999988079071044921875) + 1.0));
                                float _3980 = exp2(log2(1.0 / ((_3957 * 3.5) + 5.0)) * 0.25);
                                float _3981 = 1.0 - _1181;
                                float _3988 = sqrt(1.0 - ((1.0 - (_3981 * _3981)) * (1.0 - (_3980 * _3980))));
                                float _3989 = _3988 * _3988;
                                float _3990 = _3989 * _3989;
                                float _3991 = _3937 - _3411;
                                float _3992 = _3938 - _3412;
                                float _3993 = _3939 - _3413;
                                float _3997 = inversesqrt(dot(vec3(_3991, _3992, _3993), vec3(_3991, _3992, _3993)));
                                float _4001 = dot(vec3(_1121, _1124, _1127), vec3((-0.0) - _3411, (-0.0) - _3412, (-0.0) - _3413));
                                float _5191 = isnan(0.0) ? _4001 : (isnan(_4001) ? 0.0 : max(_4001, 0.0));
                                float _4004 = isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0));
                                float _4005 = dot(vec3(_1121, _1124, _1127), vec3(_3997 * _3991, _3997 * _3992, _3997 * _3993));
                                float _5202 = isnan(0.0) ? _4005 : (isnan(_4005) ? 0.0 : max(_4005, 0.0));
                                float _4008 = isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0));
                                float _4012 = ((_4008 * _4008) * (_3990 + (-1.0))) + 1.0;
                                float _4013 = _3950 * _3989;
                                float _4014 = _4013 * _4013;
                                float _4020 = ((1.0 - _4014) * dot(vec3(_1121, _1124, _1127), vec3(_3937, _3938, _3939))) + _4014;
                                float _5213 = isnan(0.0) ? _4020 : (isnan(_4020) ? 0.0 : max(_4020, 0.0));
                                float _4021 = isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0));
                                float _4022 = 1.0 - _3989;
                                float _4032 = (0.5 / (((_4021 * ((_4004 * _4022) + _3989)) + 9.9999999392252902907785028219223e-09) + (((_4021 * _4022) + _3989) * _4004))) * _4021;
                                float _5224 = isnan(0.0) ? _4032 : (isnan(_4032) ? 0.0 : max(_4032, 0.0));
                                float _4042 = (_3967 * _3944) * (((_3990 * 3.1415927410125732421875) * (isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0)))) / ((_4012 * _4012) * ((_3957 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3968 * _3814.z;
                                frontier_phi_88_pred_1 = _3968 * _3814.y;
                                frontier_phi_88_pred_2 = _3968 * _3814.x;
                                frontier_phi_88_pred_3 = _4042 * _3826.z;
                                frontier_phi_88_pred_4 = _4042 * _3826.y;
                                frontier_phi_88_pred_5 = _4042 * _3826.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4051 = frontier_phi_88_pred;
                            _4050 = frontier_phi_88_pred_1;
                            _4049 = frontier_phi_88_pred_2;
                            _4048 = frontier_phi_88_pred_3;
                            _4047 = frontier_phi_88_pred_4;
                            _4046 = frontier_phi_88_pred_5;
                            _3756 = _4049 + _3769;
                            _3757 = _4050 + _3770;
                            _3758 = _4051 + _3771;
                            _3753 = _4046 + _3766;
                            _3754 = _4047 + _3767;
                            _3755 = _4048 + _3768;
                            if (_3773 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3766 = _3753;
                                _3767 = _3754;
                                _3768 = _3755;
                                _3769 = _3756;
                                _3770 = _3757;
                                _3771 = _3758;
                                _3772 = _3773;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3758;
                        frontier_phi_82_pred_1 = _3757;
                        frontier_phi_82_pred_2 = _3756;
                        frontier_phi_82_pred_3 = _3755;
                        frontier_phi_82_pred_4 = _3754;
                        frontier_phi_82_pred_5 = _3753;
                    }
                    _3396 = frontier_phi_82_pred;
                    _3394 = frontier_phi_82_pred_1;
                    _3392 = frontier_phi_82_pred_2;
                    _3390 = frontier_phi_82_pred_3;
                    _3388 = frontier_phi_82_pred_4;
                    _3386 = frontier_phi_82_pred_5;
                    uint _3552 = _3551 + 1u;
                    if (_3552 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3545 = _3386;
                        _3546 = _3388;
                        _3547 = _3390;
                        _3548 = _3392;
                        _3549 = _3394;
                        _3550 = _3396;
                        _3551 = _3552;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3392;
                frontier_phi_63_64_ladder_1 = _3396;
                frontier_phi_63_64_ladder_2 = _3394;
                frontier_phi_63_64_ladder_3 = _3390;
                frontier_phi_63_64_ladder_4 = _3388;
                frontier_phi_63_64_ladder_5 = _3386;
            }
            else
            {
                frontier_phi_63_64_ladder = _3271;
                frontier_phi_63_64_ladder_1 = _3275;
                frontier_phi_63_64_ladder_2 = _3273;
                frontier_phi_63_64_ladder_3 = _3269;
                frontier_phi_63_64_ladder_4 = _3267;
                frontier_phi_63_64_ladder_5 = _3265;
            }
            _3385 = frontier_phi_63_64_ladder_5;
            _3387 = frontier_phi_63_64_ladder_4;
            _3389 = frontier_phi_63_64_ladder_3;
            _3391 = frontier_phi_63_64_ladder;
            _3393 = frontier_phi_63_64_ladder_2;
            _3395 = frontier_phi_63_64_ladder_1;
        }
        float _3400 = isnan(1.0) ? _1165 : (isnan(_1165) ? 1.0 : min(_1165, 1.0));
        _3198 = (_3400 * _3391) + _2729;
        _3200 = (_3400 * _3393) + _2731;
        _3202 = (_3400 * _3395) + _2733;
        _3204 = ((_3385 * 0.039999999105930328369140625) * _3400) + _3052;
        _3206 = ((_3387 * 0.039999999105930328369140625) * _3400) + _3054;
        _3208 = ((_3389 * 0.039999999105930328369140625) * _3400) + _3056;
    }
    else
    {
        _3198 = _2729;
        _3200 = _2731;
        _3202 = _2733;
        _3204 = _3052;
        _3206 = _3054;
        _3208 = _3056;
    }
    float _5240 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _5251 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _5262 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _3225 = ((isnan(1.0) ? _5240 : (isnan(_5240) ? 1.0 : min(_5240, 1.0))) * (_3198 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1165))) + ((_3204 + ((isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0))) * _1999)) * cbPerFrame._m0[3u].x);
    float _3226 = ((isnan(1.0) ? _5251 : (isnan(_5251) ? 1.0 : min(_5251, 1.0))) * (_3200 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1165))) + ((_3206 + ((isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0))) * _1999)) * cbPerFrame._m0[3u].x);
    float _3227 = ((isnan(1.0) ? _5262 : (isnan(_5262) ? 1.0 : min(_5262, 1.0))) * (_3202 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1165))) + ((_3208 + ((isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0))) * _1999)) * cbPerFrame._m0[3u].x);
    uint _3228 = _267 + 6u;
    float _3236 = _1102 / cbSceneParam._m0[86u].x;
    float _3237 = _1103 / cbSceneParam._m0[86u].y;
    vec4 _3251 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3236, _3237, (log2((isnan(cbSceneParam._m0[77u].w) ? _1025 : (isnan(_1025) ? cbSceneParam._m0[77u].w : min(_1025, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3253 = _3251.x;
    float _3254 = _3251.y;
    float _3255 = _3251.z;
    float _3256 = _3251.w;
    float _3327;
    float _3329;
    float _3331;
    float _3333;
    if (_1025 > cbSceneParam._m0[78u].w)
    {
        float _3290 = isnan(_1025) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1025 : min(cbSceneParam._m0[80u].w, _1025));
        float _3291 = _3290 / _1025;
        float _3302 = _3291 * _1075;
        float _3303 = _1076 * _3291;
        float _3304 = (-0.0) - _3303;
        float _3305 = _3291 * _1077;
        float _3307 = (cbSceneParam._m0[77u].w * _3304) / _3290;
        float _3308 = _3307 + cbSceneParam._m0[79u].w;
        float _3309 = cbSceneParam._m0[79u].w - _3303;
        float _3315 = sqrt(((_3302 * _3302) + (_3303 * _3303)) + (_3305 * _3305));
        float _3318 = (1.0 - (cbSceneParam._m0[77u].w / _3290)) * _3315;
        float _3323 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3325 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3502;
        if (abs((_3304 - _3307) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3502 = ((((_3308 > 0.0) ? exp2(_3323 * _3308) : (2.0 - exp2(_3325 * _3308))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3318;
        }
        else
        {
            float _3446 = 1.0 / cbSceneParam._m0[80u].x;
            float _3447 = isnan(_3309) ? _3308 : (isnan(_3308) ? _3309 : max(_3308, _3309));
            float _3448 = isnan(_3309) ? _3308 : (isnan(_3308) ? _3309 : min(_3308, _3309));
            float _3457 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : min(_3447, 0.0));
            float _3458 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : min(_3448, 0.0));
            _3502 = ((abs(_3315 / _3304) * cbSceneParam._m0[80u].y) * ((((_3457 - _3458) * 2.0) - ((exp2(_3323 * (isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0)))) - exp2(_3323 * (isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0))))) * _3446)) - ((exp2(_3325 * _3457) - exp2(_3325 * _3458)) * _3446))) + (_3318 * cbSceneParam._m0[80u].z);
        }
        vec4 _3504 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3236, _3237, 1.0), 0.0);
        float _3513 = exp2((_3502 * (-1.44269502162933349609375)) * (1.0 - _3504.w));
        float _3514 = log2(_3513);
        float _3530 = log2(_3256);
        _3327 = (exp2(_3530 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3514 * cbSceneParam._m0[78u].x)) * _3504.x) / cbSceneParam._m0[78u].x)) + _3253;
        _3329 = (exp2(_3530 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3514 * cbSceneParam._m0[78u].y)) * _3504.y) / cbSceneParam._m0[78u].y)) + _3254;
        _3331 = (exp2(_3530 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3514 * cbSceneParam._m0[78u].z)) * _3504.z) / cbSceneParam._m0[78u].z)) + _3255;
        _3333 = _3513 * _3256;
    }
    else
    {
        _3327 = _3253;
        _3329 = _3254;
        _3331 = _3255;
        _3333 = _3256;
    }
    bool _3540;
    vec4 _3343;
    vec4 _3365;
    float _3367;
    float _3371;
    float _3372;
    float _3373;
    float _3374;
    bool _3384;
    for (;;)
    {
        _3343 = cbMatDynParam._m0[0u];
        float _3345 = roundEven(_3343.y);
        bool _3346 = _3345 == 3.0;
        float _3347 = log2(_3333);
        float _3354 = exp2(_3347 * cbSceneParam._m0[78u].x) * _3225;
        float _3355 = exp2(_3347 * cbSceneParam._m0[78u].y) * _3226;
        float _3356 = exp2(_3347 * cbSceneParam._m0[78u].z) * _3227;
        float _3363 = _1091 + (-0.5);
        _3365 = cbMtdParam._m0[1u];
        _3367 = _3365.y * _3363;
        float _3370 = (_3345 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3371 = _3370 * (_3346 ? _3354 : (_3354 + (cbSceneParam._m0[72u].w * _3327)));
        _3372 = _3370 * (_3346 ? _3355 : (_3355 + (cbSceneParam._m0[72u].w * _3329)));
        _3373 = _3370 * (_3346 ? _3356 : (_3356 + (cbSceneParam._m0[72u].w * _3331)));
        _3374 = _3363 * 0.999000012874603271484375;
        _3384 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3384)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3374) < 0.5)
            {
                _3540 = true;
                break;
            }
        }
        uint _3481 = _1140 + uint(_3343.w);
        if ((cbInstanceData._m0[_3481].w < 1.0) && ((cbInstanceData._m0[_3481].w + _3374) < 0.5))
        {
            _3540 = true;
            break;
        }
        if ((_3367 + 1.0) < _3365.x)
        {
            _3540 = true;
            break;
        }
        _3540 = false;
        break;
    }
    float _3744;
    if (_3540)
    {
        discard_state = true;
        _3744 = 0.0;
    }
    else
    {
        _3744 = cbInstanceData._m0[_3228].w;
    }
    SV_Target.x = _3371;
    SV_Target.y = _3372;
    SV_Target.z = _3373;
    SV_Target.w = _3744;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3228].w;
    discard_exit();
}


