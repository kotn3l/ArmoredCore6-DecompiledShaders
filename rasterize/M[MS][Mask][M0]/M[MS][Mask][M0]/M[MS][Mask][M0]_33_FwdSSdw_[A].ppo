#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1276;
float _3658;
float _3659;
float _3660;
float _3661;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3670 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3681 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3692 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].z) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3703 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _443 = (_436 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _444 = (_436 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _445 = (_436 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) + _455;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _549 = _545.z;
    float _558 = ((_528.z - _549) * _436) + _549;
    float _561 = ((((_528.x - _547) * _436) + _547) * 2.0) + (-1.0);
    float _562 = ((((_528.y - _548) * _436) + _548) * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _3714 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _625 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_611 - _612) * cbMtdParam._m0[24u].w) + _612) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3725 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _633 = (_626 * ((_483.x * cbMtdParam._m0[18u].x) - _462)) + _462;
    float _634 = (_626 * ((_483.y * cbMtdParam._m0[18u].y) - _463)) + _463;
    float _635 = (_626 * ((_483.z * cbMtdParam._m0[18u].z) - _464)) + _464;
    float _640 = (((_503.z - _558) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _558;
    float _644 = ((_584.z - _640) * cbMtdParam._m0[19u].w) + _640;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _664 = (_657.x * 2.0) + (-1.0);
    float _665 = (_657.y * 2.0) + (-1.0);
    float _666 = dot(vec2(_664, _665), vec2(_664, _665));
    float _3736 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _674 = (_626 * (_657.z - _644)) + _644;
    float _683 = (_561 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_503.x * 2.0) + (-1.0)))) + (((_584.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _684 = (_562 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_503.y * 2.0) + (-1.0)))) + (((_584.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _696 = (((_664 - _683) + (cbMtdParam._m0[21u].x * _683)) * _626) + _683;
    float _697 = (((_665 - _684) + (cbMtdParam._m0[21u].x * _684)) * _626) + _684;
    float _698 = (_626 * (sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) - _568)) + _568;
    float _700 = cbMtdParam._m0[22u].x + _584.w;
    float _703 = fma(_698, _236 * NORMAL.x, fma(_697, _243 * TANGENT.x, (_229 * _221) * _696));
    float _706 = fma(_698, _236 * NORMAL.y, fma(_697, _243 * TANGENT.y, (_229 * _222) * _696));
    float _709 = fma(_698, _236 * NORMAL.z, fma(_697, _243 * TANGENT.z, (_229 * _223) * _696));
    float _713 = inversesqrt(dot(vec3(_703, _706, _709), vec3(_703, _706, _709)));
    float _714 = _713 * _703;
    float _715 = _713 * _706;
    float _716 = _713 * _709;
    float _3747 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _717 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _3769 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3780 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3791 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _735 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _787 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _777);
    float _788 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _777);
    float _789 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _777);
    float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
    float _794 = _787 * _793;
    float _795 = _788 * _793;
    float _796 = _789 * _793;
    vec4 _801 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _803 = _801.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _957 = sqrt(((_787 * _787) + (_788 * _788)) + (_789 * _789));
        float _963 = (cbMatDynParam._m0[5u].x * _957) + cbMatDynParam._m0[5u].y;
        float _3802 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _968 = (cbMatDynParam._m0[5u].z * _957) + cbMatDynParam._m0[5u].w;
        float _3813 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) - _964)) + _964) < ((_803 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _814 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _815 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _833 = fma(_716, cbSceneParam._m0[5u].z, fma(_715, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _714));
    float _836 = fma(_716, cbSceneParam._m0[6u].z, fma(_715, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _714));
    float _839 = fma(_716, cbSceneParam._m0[7u].z, fma(_715, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _714));
    uint _852 = _270 + 9u;
    uint _853 = _852 + uint(cbMatDynParam._m0[0u].w);
    float _859 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_853].x;
    float _860 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_853].y;
    float _861 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_853].z;
    float _3824 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    vec4 _873 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _814, cbSceneParam._m0[86u].y * _815));
    float _877 = ((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * TEXCOORD_5.w) * _873.x;
    float _878 = dot(vec3(_714, _715, _716), vec3(_794, _795, _796));
    float _881 = _878 * 2.0;
    float _885 = (_881 * _714) - _794;
    float _886 = (_881 * _715) - _795;
    float _887 = (_881 * _716) - _796;
    float _891 = abs(dot(vec3(_794, _795, _796), vec3(_714, _715, _716)));
    float _3857 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _893 = sqrt(_717);
    float _906 = exp2((_893 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_893 * 3.0));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1275;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1000 = fma(_946, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938));
        float _1004 = fma(_946, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938));
        float _1008 = fma(_946, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938));
        float _1033 = _938 + _714;
        float _1034 = _942 + _715;
        float _1035 = _946 + _716;
        float _1045 = fma(_1035, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033)) - _1000;
        float _1046 = fma(_1035, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033)) - _1004;
        float _1047 = fma(_1035, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033)) - _1008;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1000 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1004 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[34u].z) + ((((((_1008 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1103 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1069.x + (-0.5));
        float _1105 = _1103 * (_1069.y + (-0.5));
        float _1106 = _1103 * (_1069.z + (-0.5));
        float _1113 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1076.x + (-0.5));
        float _1115 = _1113 * (_1076.y + (-0.5));
        float _1116 = _1113 * (_1076.z + (-0.5));
        float _1123 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1083.x + (-0.5));
        float _1125 = _1123 * (_1083.y + (-0.5));
        float _1126 = _1123 * (_1083.z + (-0.5));
        float _1133 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1090.x + (-0.5));
        float _1135 = _1133 * (_1090.y + (-0.5));
        float _1136 = _1133 * (_1090.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1157 = (dot(vec3(_714, _715, _716), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1167 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3905 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1169 + 1.0))) + _1174) * _1137;
        float _1184 = _1105 * 0.5;
        float _1185 = _1115 * 0.5;
        float _1186 = _1125 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_714, _715, _716), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3938 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1211 + 1.0))) + _1216) * _1138;
        float _1226 = _1106 * 0.5;
        float _1227 = _1116 * 0.5;
        float _1228 = _1126 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_714, _715, _716), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3971 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1253 + 1.0))) + _1258) * _1139;
        _1275 = _1106;
        _1277 = _1105;
        _1278 = _1104;
        _1279 = _1116;
        _1280 = _1115;
        _1281 = _1114;
        _1282 = _1126;
        _1283 = _1125;
        _1284 = _1124;
        _1285 = _1139;
        _1286 = _1138;
        _1287 = _1137;
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _1276;
        _1277 = _1276;
        _1278 = _1276;
        _1279 = _1276;
        _1280 = _1276;
        _1281 = _1276;
        _1282 = _1276;
        _1283 = _1276;
        _1284 = _1276;
        _1285 = _1276;
        _1286 = _1276;
        _1287 = _1276;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1318 = fma(_946, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938));
        float _1322 = fma(_946, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938));
        float _1326 = fma(_946, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938));
        float _1349 = _938 + _714;
        float _1350 = _942 + _715;
        float _1351 = _946 + _716;
        float _1361 = fma(_1351, cbModelParam._m0[30u].z, fma(_1350, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1349)) - _1318;
        float _1362 = fma(_1351, cbModelParam._m0[31u].z, fma(_1350, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1349)) - _1322;
        float _1363 = fma(_1351, cbModelParam._m0[32u].z, fma(_1350, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1349)) - _1326;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1318 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1322 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[35u].z) + ((((((_1326 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1417 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1384.x + (-0.5));
        float _1419 = _1417 * (_1384.y + (-0.5));
        float _1420 = _1417 * (_1384.z + (-0.5));
        float _1427 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1391.x + (-0.5));
        float _1429 = _1427 * (_1391.y + (-0.5));
        float _1430 = _1427 * (_1391.z + (-0.5));
        float _1437 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1398.x + (-0.5));
        float _1439 = _1437 * (_1398.y + (-0.5));
        float _1440 = _1437 * (_1398.z + (-0.5));
        float _1447 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1405.x + (-0.5));
        float _1449 = _1447 * (_1405.y + (-0.5));
        float _1450 = _1447 * (_1405.z + (-0.5));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = _1418 * 0.5;
        float _1455 = _1428 * 0.5;
        float _1456 = _1438 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_714, _715, _716), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4034 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1481 + 1.0))) + _1486) * _1451;
        float _1496 = _1419 * 0.5;
        float _1497 = _1429 * 0.5;
        float _1498 = _1439 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_714, _715, _716), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4067 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1523 + 1.0))) + _1528) * _1452;
        float _1538 = _1420 * 0.5;
        float _1539 = _1430 * 0.5;
        float _1540 = _1440 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_714, _715, _716), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4100 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1565 + 1.0))) + _1570) * _1453;
        _1587 = _1420;
        _1588 = _1419;
        _1589 = _1418;
        _1590 = _1430;
        _1591 = _1429;
        _1592 = _1428;
        _1593 = _1440;
        _1594 = _1439;
        _1595 = _1438;
        _1596 = _1453;
        _1597 = _1452;
        _1598 = _1451;
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
    }
    else
    {
        _1587 = _1276;
        _1588 = _1276;
        _1589 = _1276;
        _1590 = _1276;
        _1591 = _1276;
        _1592 = _1276;
        _1593 = _1276;
        _1594 = _1276;
        _1595 = _1276;
        _1596 = _1276;
        _1597 = _1276;
        _1598 = _1276;
        _1599 = 0.0;
        _1600 = 0.0;
        _1601 = 0.0;
    }
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1288)) + _1288;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1289)) + _1289;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1290)) + _1290;
    float _1634 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1611));
    float _1655 = _885 * 0.5;
    float _1656 = _886 * 0.5;
    float _1657 = _887 * 0.5;
    float _1658 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1661 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1664 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1698;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1671 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1275, _1279, _1282, _1285));
        float _1675 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1679 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1686 = dot(vec4(cbModelParam._m0[39u]), vec4(_1655, _1656, _1657, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1709;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1700 = dot(vec4(cbModelParam._m0[40u]), vec4(_1655, _1656, _1657, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1713 = (_1709 * cbModelParam._m0[1u].x) + (_1698 * (1.0 - cbModelParam._m0[1u].x));
    float _1723 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _717);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1723 : min(cbModelParam._m0[25u].z, _1723));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1771 = fma(_946, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938)) + cbModelParam._m0[13u].w;
        float _1775 = fma(_946, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938)) + cbModelParam._m0[14u].w;
        float _1779 = fma(_946, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938)) + cbModelParam._m0[15u].w;
        float _1782 = fma(_887, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885));
        float _1785 = fma(_887, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885));
        float _1788 = fma(_887, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885));
        float _1816;
        if (_1782 > 0.0)
        {
            _1816 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1816 = frontier_phi_17_15_ladder;
        }
        float _2037;
        if (_1785 > 0.0)
        {
            _2037 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2037 = frontier_phi_26_22_ladder;
        }
        float _2283;
        if (_1788 > 0.0)
        {
            _2283 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2283 = frontier_phi_38_33_ladder;
        }
        float _2285 = isnan(_2037) ? _1816 : (isnan(_1816) ? _2037 : min(_1816, _2037));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1782) + _1771;
        float _2291 = (_2286 * _1785) + _1775;
        float _2292 = (_2286 * _1788) + _1779;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2293;
        float _2297 = _2293 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 > _2297) || ((_2291 < _2295) || ((_2290 < _2295) || (_2290 > _2297))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2292, cbModelParam._m0[9u].z, fma(_2291, cbModelParam._m0[9u].y, _2290 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2292, cbModelParam._m0[10u].z, fma(_2291, cbModelParam._m0[10u].y, _2290 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2292, cbModelParam._m0[11u].z, fma(_2291, cbModelParam._m0[11u].y, _2290 * cbModelParam._m0[11u].x))), _1724);
            frontier_phi_16_38_ladder = _2416.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2416.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2416.x * cbModelParam._m0[1u].y;
        }
        _1804 = frontier_phi_16_38_ladder_2;
        _1806 = frontier_phi_16_38_ladder_1;
        _1808 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_885, _886, _887), _1724);
        _1804 = _1792.x * cbModelParam._m0[1u].y;
        _1806 = _1792.y * cbModelParam._m0[1u].y;
        _1808 = _1792.z * cbModelParam._m0[1u].y;
    }
    float _1812 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _717);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1812 : min(cbModelParam._m0[25u].w, _1812));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1866 = fma(_946, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938)) + cbModelParam._m0[21u].w;
        float _1870 = fma(_946, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938)) + cbModelParam._m0[22u].w;
        float _1874 = fma(_946, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938)) + cbModelParam._m0[23u].w;
        float _1877 = fma(_887, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885));
        float _1880 = fma(_887, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885));
        float _1883 = fma(_887, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885));
        float _2042;
        if (_1877 > 0.0)
        {
            _2042 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2042 = frontier_phi_28_24_ladder;
        }
        float _2310;
        if (_1880 > 0.0)
        {
            _2310 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2310 = frontier_phi_40_35_ladder;
        }
        float _2515;
        if (_1883 > 0.0)
        {
            _2515 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2515 = frontier_phi_49_46_ladder;
        }
        float _2517 = isnan(_2310) ? _2042 : (isnan(_2042) ? _2310 : min(_2042, _2310));
        float _2518 = isnan(_2515) ? _2517 : (isnan(_2517) ? _2515 : min(_2517, _2515));
        float _2522 = (_2518 * _1877) + _1866;
        float _2523 = (_2518 * _1880) + _1870;
        float _2524 = (_2518 * _1883) + _1874;
        float _2525 = _2518 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2525;
        float _2528 = _2525 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2524 > _2528) || ((_2524 < _2526) || ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 < _2526) || (_2522 > _2528))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2524, cbModelParam._m0[17u].z, fma(_2523, cbModelParam._m0[17u].y, _2522 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2524, cbModelParam._m0[18u].z, fma(_2523, cbModelParam._m0[18u].y, _2522 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2524, cbModelParam._m0[19u].z, fma(_2523, cbModelParam._m0[19u].y, _2522 * cbModelParam._m0[19u].x))), _1813);
            frontier_phi_25_49_ladder = _2723.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2723.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2723.x * cbModelParam._m0[1u].z;
        }
        _1902 = frontier_phi_25_49_ladder_2;
        _1904 = frontier_phi_25_49_ladder_1;
        _1906 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_885, _886, _887), _1813);
        _1902 = _1886.x * cbModelParam._m0[1u].z;
        _1904 = _1886.y * cbModelParam._m0[1u].z;
        _1906 = _1886.z * cbModelParam._m0[1u].z;
    }
    float _1918 = ((((1.0 - _906) * ((_893 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_906 * _893)) * _877;
    float _1919 = _1918 * ((cbModelParam._m0[1u].w * (_1902 - _1804)) + _1804);
    float _1920 = _1918 * ((cbModelParam._m0[1u].w * (_1904 - _1806)) + _1806);
    float _1921 = _1918 * ((cbModelParam._m0[1u].w * (_1906 - _1808)) + _1808);
    float _1924 = fma(_1921, cbSceneParam._m0[89u].z, fma(_1920, cbSceneParam._m0[89u].y, _1919 * cbSceneParam._m0[89u].x));
    float _1927 = fma(_1921, cbSceneParam._m0[90u].z, fma(_1920, cbSceneParam._m0[90u].y, _1919 * cbSceneParam._m0[90u].x));
    float _1930 = fma(_1921, cbSceneParam._m0[91u].z, fma(_1920, cbSceneParam._m0[91u].y, _1919 * cbSceneParam._m0[91u].x));
    vec4 _1938 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_814, _815));
    float _1940 = _1938.w;
    float _1952 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1940);
    float _1953 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1940);
    float _1954 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1940);
    uvec4 _1958 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1960 = _1958.x * 14u;
    uint _1961 = _1960 + 13u;
    float _1968 = _877 + (-1.0);
    float _1973 = (cbLight._m0[_1961].x * _1968) + 1.0;
    float _1974 = (cbLight._m0[_1961].y * _1968) + 1.0;
    float _1975 = (cbLight._m0[_1961].z * _1968) + 1.0;
    float _1976 = (cbLight._m0[_1961].w * _1968) + 1.0;
    uint _1977 = _1960 + 5u;
    float _1983 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
    uint _1987 = _1960 + 4u;
    float _1996 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
    uint _2000 = _1960 | 1u;
    float _2011 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_714, _715, _716));
    float _2014 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_714, _715, _716));
    float _4236 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _4247 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2019 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _2021 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _2028 = ((cbLight._m0[_1977].x * _1983) * _2021) + (((cbLight._m0[_1987].x * _1952) * _1996) * _2019);
    float _2029 = ((_1983 * cbLight._m0[_1977].y) * _2021) + (((cbLight._m0[_1987].y * _1953) * _1996) * _2019);
    float _2030 = ((_1983 * cbLight._m0[_1977].z) * _2021) + (((cbLight._m0[_1987].z * _1954) * _1996) * _2019);
    uvec4 _2034 = floatBitsToUint(cbLight._m0[_1960 + 12u]);
    bool _2036 = _2034.x == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_2036)
    {
        _2047 = _2028;
        _2049 = _2029;
        _2051 = _2030;
    }
    else
    {
        uint _2055 = _1960 + 6u;
        float _2071 = (dot(vec3(cbLight._m0[_1960 + 2u].xyz), vec3(_714, _715, _716)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _4258 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2074 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2047 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _2028;
        _2049 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _2029;
        _2051 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _2030;
    }
    bool _2054 = _2034.y == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_2054)
    {
        _2092 = _2047;
        _2094 = _2049;
        _2096 = _2051;
    }
    else
    {
        uint _2254 = _1960 + 7u;
        float _2270 = (dot(vec3(cbLight._m0[_1960 + 3u].xyz), vec3(_714, _715, _716)) * 0.5) + 0.5;
        float _2271 = _2270 * _2270;
        float _4274 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2272 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2273 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2092 = (((cbLight._m0[_2254].x * 0.3183098733425140380859375) * _2272) * _2273) + _2047;
        _2094 = (((cbLight._m0[_2254].y * 0.3183098733425140380859375) * _2272) * _2273) + _2049;
        _2096 = (((cbLight._m0[_2254].z * 0.3183098733425140380859375) * _2272) * _2273) + _2051;
    }
    uint _2099 = _1960 + 8u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _717) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1960].x + _794;
    float _2115 = cbLight._m0[_1960].y + _795;
    float _2116 = cbLight._m0[_1960].z + _796;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_714, _715, _716), vec3(cbLight._m0[_1960].xyz));
    float _4290 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2128 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2129 = dot(vec3(_714, _715, _716), vec3(_2121, _2122, _2123));
    float _4312 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2133 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_2121, _2122, _2123));
    float _4323 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = _2113 * _2113;
    float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
    float _2152 = (exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2153 = 1.0 - _2113;
    float _2164 = (0.5 / (((_2128 * ((_2127 * _2153) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2153) + _2113) * _2127))) * _2127;
    float _4334 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
    uint _2180 = _1960 + 9u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _717) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_2000].x + _794;
    float _2194 = cbLight._m0[_2000].y + _795;
    float _2195 = cbLight._m0[_2000].z + _796;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_714, _715, _716), vec3(cbLight._m0[_2000].xyz));
    float _4345 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2207 = dot(vec3(_714, _715, _716), vec3(_2200, _2201, _2202));
    float _4356 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2200, _2201, _2202));
    float _4367 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2192 * _2192;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2228 = (exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2229 = 1.0 - _2192;
    float _2239 = (0.5 / (((_2128 * ((_2206 * _2229) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2229) + _2192) * _2206))) * _2206;
    float _4378 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2241 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    float _2251 = (((_2228 * cbLight._m0[_2180].x) * _2241) * _1983) + ((((cbLight._m0[_2099].x * _1952) * _2152) * _2166) * _1996);
    float _2252 = (((_2228 * cbLight._m0[_2180].y) * _2241) * _1983) + ((((cbLight._m0[_2099].y * _1953) * _2152) * _2166) * _1996);
    float _2253 = (((_2228 * cbLight._m0[_2180].z) * _2241) * _1983) + ((((cbLight._m0[_2099].z * _1954) * _2152) * _2166) * _1996);
    float _2315;
    float _2317;
    float _2319;
    if (_2036)
    {
        _2315 = _2251;
        _2317 = _2252;
        _2319 = _2253;
    }
    else
    {
        uint _2321 = _1960 + 2u;
        uint _2325 = _1960 + 10u;
        float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _717) * 0.949999988079071044921875);
        float _2340 = _2339 * _2339;
        float _2341 = cbLight._m0[_2321].x + _794;
        float _2342 = cbLight._m0[_2321].y + _795;
        float _2343 = cbLight._m0[_2321].z + _796;
        float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
        float _2348 = _2347 * _2341;
        float _2349 = _2347 * _2342;
        float _2350 = _2347 * _2343;
        float _2351 = dot(vec3(_714, _715, _716), vec3(cbLight._m0[_2321].xyz));
        float _4389 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2355 = dot(vec3(_714, _715, _716), vec3(_2348, _2349, _2350));
        float _4400 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2359 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2348, _2349, _2350));
        float _4411 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2363 = _2340 * _2340;
        float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
        float _2376 = (exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2377 = 1.0 - _2340;
        float _2387 = (0.5 / (((_2128 * ((_2354 * _2377) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2377) + _2340) * _2354))) * _2354;
        float _4422 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2389 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
        float _2390 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2315 = (((_2376 * cbLight._m0[_2325].x) * _2389) * _2390) + _2251;
        _2317 = (((_2376 * cbLight._m0[_2325].y) * _2389) * _2390) + _2252;
        _2319 = (((_2376 * cbLight._m0[_2325].z) * _2389) * _2390) + _2253;
    }
    float _2425;
    float _2427;
    float _2429;
    if (_2054)
    {
        _2425 = _2315;
        _2427 = _2317;
        _2429 = _2319;
    }
    else
    {
        uint _2436 = _1960 + 3u;
        uint _2440 = _1960 + 11u;
        float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _717) * 0.949999988079071044921875);
        float _2455 = _2454 * _2454;
        float _2456 = cbLight._m0[_2436].x + _794;
        float _2457 = cbLight._m0[_2436].y + _795;
        float _2458 = cbLight._m0[_2436].z + _796;
        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
        float _2463 = _2462 * _2456;
        float _2464 = _2462 * _2457;
        float _2465 = _2462 * _2458;
        float _2466 = dot(vec3(_714, _715, _716), vec3(cbLight._m0[_2436].xyz));
        float _4438 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2470 = dot(vec3(_714, _715, _716), vec3(_2463, _2464, _2465));
        float _4449 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2474 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2463, _2464, _2465));
        float _4460 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2478 = _2455 * _2455;
        float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
        float _2491 = (exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2492 = 1.0 - _2455;
        float _2502 = (0.5 / (((_2128 * ((_2469 * _2492) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2492) + _2455) * _2469))) * _2469;
        float _4471 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2504 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
        float _2505 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2425 = (((_2491 * cbLight._m0[_2440].x) * _2504) * _2505) + _2315;
        _2427 = (((_2491 * cbLight._m0[_2440].y) * _2504) * _2505) + _2317;
        _2429 = (((_2491 * cbLight._m0[_2440].z) * _2504) * _2505) + _2319;
    }
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    if (_1958.y == 0u)
    {
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2580;
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2580;
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2580;
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.x;
        uint _2607 = uint((float(_2595.y) * floor(float(uint(cbSceneParam._m0[85u].y * _815) / _2596))) + floor(float(uint(cbSceneParam._m0[85u].x * _814) / _2596)));
        float _2617 = (log2(_2583 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2618 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        uint _2621 = uint(isnan(14.0) ? _2618 : (isnan(_2618) ? 14.0 : min(_2618, 14.0)));
        uvec4 _2626 = texelFetch(g_lightClusterGridBuffer, int(((_2621 << 2u) + (_2607 << 6u)) >> 2u));
        uint _2627 = _2626.x;
        uint _2628 = _2595.z;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        if (((((1u << ((_2628 >> 4u) & 15u)) + 4294967295u) & _2627) == 0u) || ((_2628 & 240u) == 0u))
        {
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
        }
        else
        {
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            uint _2887 = 0u;
            uint _2896;
            bool _2897;
            for (;;)
            {
                _2896 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_2887 << 2u)) >> 2u)).x;
                _2897 = _2896 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2897)
                {
                    frontier_phi_66_pred = _2881;
                    frontier_phi_66_pred_1 = _2886;
                    frontier_phi_66_pred_2 = _2885;
                    frontier_phi_66_pred_3 = _2884;
                    frontier_phi_66_pred_4 = _2883;
                    frontier_phi_66_pred_5 = _2882;
                }
                else
                {
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    uint _3032;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2896;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    for (;;)
                    {
                        uint _3036 = uint(findLSB(_3032)) + (_2887 << 5u);
                        uint _3033 = (_3032 + 4294967295u) & _3032;
                        uint _3038 = _3036 * 48u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 3u)).x));
                        uint _3058 = (_3036 * 48u) + 4u;
                        vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3077 = (_3036 * 48u) + 8u;
                        vec3 _3088 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x));
                        float _3092 = _3052.x - _2581;
                        float _3093 = _3052.y - _2582;
                        float _3094 = _3052.z - _2583;
                        float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                        float _3098 = inversesqrt(_3095);
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3102 = dot(vec3(_833, _836, _839), vec3(_3099, _3100, _3101));
                        float _3107 = 1.0 - (_3095 * _3052.w);
                        float _4497 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3109 = sqrt(_3095) * _3071.w;
                        float _3112 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3102) + _3113;
                        float _3119 = _3109 * _3109;
                        float _3123 = ((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3108) / ((_3119 * 0.699999988079071044921875) + 1.0);
                        float _3127 = (-0.0) - _2581;
                        float _3128 = (-0.0) - _2582;
                        float _3129 = (-0.0) - _2583;
                        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3144 = exp2(log2(1.0 / ((_3119 * 3.5) + 5.0)) * 0.25);
                        float _3145 = 1.0 - _893;
                        float _3152 = sqrt(1.0 - ((1.0 - (_3145 * _3145)) * (1.0 - (_3144 * _3144))));
                        float _3153 = _3152 * _3152;
                        float _3154 = _3153 * _3153;
                        float _3155 = _3134 + _3099;
                        float _3156 = _3135 + _3100;
                        float _3157 = _3136 + _3101;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3165 = dot(vec3(_833, _836, _839), vec3(_3134, _3135, _3136));
                        float _4513 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3168 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3169 = dot(vec3(_833, _836, _839), vec3(_3161 * _3155, _3161 * _3156, _3161 * _3157));
                        float _4524 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3176 = ((_3172 * _3172) * (_3154 + (-1.0))) + 1.0;
                        float _3177 = _3112 * _3153;
                        float _3178 = _3177 * _3177;
                        float _3181 = ((1.0 - _3178) * _3102) + _3178;
                        float _4535 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3182 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3183 = 1.0 - _3153;
                        float _3193 = (0.5 / (((_3182 * ((_3168 * _3183) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3153) * _3168))) * _3182;
                        float _4546 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3204 = (((_3154 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3176 * _3176) * ((_3119 * 2.1991131305694580078125) + 3.141590118408203125))) * _3108;
                        _2956 = (_3123 * _3071.x) + _3029;
                        _2957 = (_3123 * _3071.y) + _3030;
                        _2958 = (_3123 * _3071.z) + _3031;
                        _2953 = (_3204 * _3088.x) + _3026;
                        _2954 = (_3204 * _3088.y) + _3027;
                        _2955 = (_3204 * _3088.z) + _3028;
                        if (_3033 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _3033;
                        }
                    }
                    frontier_phi_66_pred = _2953;
                    frontier_phi_66_pred_1 = _2958;
                    frontier_phi_66_pred_2 = _2957;
                    frontier_phi_66_pred_3 = _2956;
                    frontier_phi_66_pred_4 = _2955;
                    frontier_phi_66_pred_5 = _2954;
                }
                _2729 = frontier_phi_66_pred;
                _2739 = frontier_phi_66_pred_1;
                _2737 = frontier_phi_66_pred_2;
                _2735 = frontier_phi_66_pred_3;
                _2733 = frontier_phi_66_pred_4;
                _2731 = frontier_phi_66_pred_5;
                uint _2888 = _2887 + 1u;
                if (_2888 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2881 = _2729;
                    _2882 = _2731;
                    _2883 = _2733;
                    _2884 = _2735;
                    _2885 = _2737;
                    _2886 = _2739;
                    _2887 = _2888;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
        }
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.z;
        uint _2745 = (_2743 >> 8u) & 15u;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        if (((4294967295u << _2745) & _2627) == 0u)
        {
            _2849 = _2728;
            _2851 = _2730;
            _2853 = _2732;
            _2855 = _2734;
            _2857 = _2736;
            _2859 = _2738;
        }
        else
        {
            float _2874 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
            float _2875 = _2874 * _2581;
            float _2876 = _2874 * _2582;
            float _2877 = _2874 * _2583;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2745 < ((_2743 >> 12u) & 15u))
            {
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _3009 = _2728;
                float _3010 = _2730;
                float _3011 = _2732;
                float _3012 = _2734;
                float _3013 = _2736;
                float _3014 = _2738;
                uint _3015 = _2745;
                uint _3024;
                bool _3025;
                for (;;)
                {
                    _3024 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                    _3025 = _3024 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3025)
                    {
                        frontier_phi_77_pred = _3014;
                        frontier_phi_77_pred_1 = _3013;
                        frontier_phi_77_pred_2 = _3012;
                        frontier_phi_77_pred_3 = _3011;
                        frontier_phi_77_pred_4 = _3010;
                        frontier_phi_77_pred_5 = _3009;
                    }
                    else
                    {
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3231 = _3009;
                        float _3232 = _3010;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        float _3235 = _3013;
                        float _3236 = _3014;
                        uint _3237 = _3024;
                        uint _3238;
                        vec4 _3263;
                        float _3264;
                        vec4 _3279;
                        vec3 _3291;
                        vec4 _3306;
                        vec4 _3321;
                        float _3367;
                        bool _3368;
                        for (;;)
                        {
                            uint _3248 = ((_3015 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3237));
                            _3238 = (_3237 + 4294967295u) & _3237;
                            uint _3250 = _3248 * 40u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            _3264 = _3263.w;
                            uint _3266 = (_3248 * 40u) + 4u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3281 = (_3248 * 40u) + 8u;
                            _3291 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x));
                            uint _3293 = (_3248 * 40u) + 16u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3308 = (_3248 * 40u) + 20u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3248 * 40u) + 24u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3342 = (_3248 * 40u) + 28u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3367 = fma(_2583, _3355.z, fma(_2582, _3355.y, _3355.x * _2581)) + _3355.w;
                            _3368 = !((fma(_2583, _3336.z, fma(_2582, _3336.y, _3336.x * _2581)) + _3336.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3368)
                            {
                                float _3395 = _3263.x - _2581;
                                float _3396 = _3263.y - _2582;
                                float _3397 = _3263.z - _2583;
                                float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                                float _3401 = inversesqrt(_3398);
                                float _3402 = _3401 * _3395;
                                float _3403 = _3401 * _3396;
                                float _3404 = _3401 * _3397;
                                float _3408 = 1.0 - (_3398 / (_3264 * _3264));
                                float _4557 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3413 = sqrt(_3398) * _3279.w;
                                float _3415 = 1.39999997615814208984375 / (_3413 + 1.39999997615814208984375);
                                float _3416 = _3415 * _3415;
                                float _3419 = ((1.0 - _3416) * dot(vec3(_3402, _3403, _3404), vec3(_833, _836, _839))) + _3416;
                                float _3422 = _3413 * _3413;
                                float _3426 = (fma(_2583, _3306.z, fma(_2582, _3306.y, _3306.x * _2581)) + _3306.w) / _3367;
                                float _3427 = (fma(_2583, _3321.z, fma(_2582, _3321.y, _3321.x * _2581)) + _3321.w) / _3367;
                                float _3431 = 1.0 - dot(vec2(_3426, _3427), vec2(_3426, _3427));
                                float _4573 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3433 = _3432 * (((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3409) / ((_3422 * 0.699999988079071044921875) + 1.0));
                                float _3445 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                                float _3446 = 1.0 - _893;
                                float _3453 = sqrt(1.0 - ((1.0 - (_3446 * _3446)) * (1.0 - (_3445 * _3445))));
                                float _3454 = _3453 * _3453;
                                float _3455 = _3454 * _3454;
                                float _3456 = _3402 - _2875;
                                float _3457 = _3403 - _2876;
                                float _3458 = _3404 - _2877;
                                float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                                float _3466 = dot(vec3(_833, _836, _839), vec3((-0.0) - _2875, (-0.0) - _2876, (-0.0) - _2877));
                                float _4584 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3469 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3470 = dot(vec3(_833, _836, _839), vec3(_3462 * _3456, _3462 * _3457, _3462 * _3458));
                                float _4595 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3473 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3477 = ((_3473 * _3473) * (_3455 + (-1.0))) + 1.0;
                                float _3478 = _3415 * _3454;
                                float _3479 = _3478 * _3478;
                                float _3485 = ((1.0 - _3479) * dot(vec3(_833, _836, _839), vec3(_3402, _3403, _3404))) + _3479;
                                float _4606 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3487 = 1.0 - _3454;
                                float _3497 = (0.5 / (((_3486 * ((_3469 * _3487) + _3454)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3454) * _3469))) * _3486;
                                float _4617 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3507 = (_3432 * _3409) * (((_3455 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3477 * _3477) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3433 * _3279.y;
                                frontier_phi_83_pred_1 = _3433 * _3279.x;
                                frontier_phi_83_pred_2 = _3507 * _3291.z;
                                frontier_phi_83_pred_3 = _3507 * _3291.y;
                                frontier_phi_83_pred_4 = _3507 * _3291.x;
                                frontier_phi_83_pred_5 = _3433 * _3279.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3515 = frontier_phi_83_pred;
                            _3514 = frontier_phi_83_pred_1;
                            _3513 = frontier_phi_83_pred_2;
                            _3512 = frontier_phi_83_pred_3;
                            _3511 = frontier_phi_83_pred_4;
                            _3516 = frontier_phi_83_pred_5;
                            _3221 = _3514 + _3234;
                            _3222 = _3515 + _3235;
                            _3223 = _3516 + _3236;
                            _3218 = _3511 + _3231;
                            _3219 = _3512 + _3232;
                            _3220 = _3513 + _3233;
                            if (_3238 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3238;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3223;
                        frontier_phi_77_pred_1 = _3222;
                        frontier_phi_77_pred_2 = _3221;
                        frontier_phi_77_pred_3 = _3220;
                        frontier_phi_77_pred_4 = _3219;
                        frontier_phi_77_pred_5 = _3218;
                    }
                    _2860 = frontier_phi_77_pred;
                    _2858 = frontier_phi_77_pred_1;
                    _2856 = frontier_phi_77_pred_2;
                    _2854 = frontier_phi_77_pred_3;
                    _2852 = frontier_phi_77_pred_4;
                    _2850 = frontier_phi_77_pred_5;
                    uint _3016 = _3015 + 1u;
                    if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3009 = _2850;
                        _3010 = _2852;
                        _3011 = _2854;
                        _3012 = _2856;
                        _3013 = _2858;
                        _3014 = _2860;
                        _3015 = _3016;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2854;
                frontier_phi_58_59_ladder_1 = _2860;
                frontier_phi_58_59_ladder_2 = _2858;
                frontier_phi_58_59_ladder_3 = _2856;
                frontier_phi_58_59_ladder_4 = _2852;
                frontier_phi_58_59_ladder_5 = _2850;
            }
            else
            {
                frontier_phi_58_59_ladder = _2732;
                frontier_phi_58_59_ladder_1 = _2738;
                frontier_phi_58_59_ladder_2 = _2736;
                frontier_phi_58_59_ladder_3 = _2734;
                frontier_phi_58_59_ladder_4 = _2730;
                frontier_phi_58_59_ladder_5 = _2728;
            }
            _2849 = frontier_phi_58_59_ladder_5;
            _2851 = frontier_phi_58_59_ladder_4;
            _2853 = frontier_phi_58_59_ladder;
            _2855 = frontier_phi_58_59_ladder_3;
            _2857 = frontier_phi_58_59_ladder_2;
            _2859 = frontier_phi_58_59_ladder_1;
        }
        float _2864 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
        _2640 = (_2864 * _2855) + _2092;
        _2642 = (_2864 * _2857) + _2094;
        _2644 = (_2864 * _2859) + _2096;
        _2646 = ((_2849 * 0.039999999105930328369140625) * _2864) + _2425;
        _2648 = ((_2851 * 0.039999999105930328369140625) * _2864) + _2427;
        _2650 = ((_2853 * 0.039999999105930328369140625) * _2864) + _2429;
    }
    else
    {
        _2640 = _2092;
        _2642 = _2094;
        _2644 = _2096;
        _2646 = _2425;
        _2648 = _2427;
        _2650 = _2429;
    }
    float _4633 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4644 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4655 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _2667 = ((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2640 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _877))) + ((_2646 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2668 = ((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2642 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _877))) + ((_2648 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2669 = ((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2644 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _877))) + ((_2650 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    uint _2670 = _270 + 6u;
    float _2678 = _814 / cbSceneParam._m0[86u].x;
    float _2679 = _815 / cbSceneParam._m0[86u].y;
    vec4 _2693 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, (log2((isnan(cbSceneParam._m0[77u].w) ? _735 : (isnan(_735) ? cbSceneParam._m0[77u].w : min(_735, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2695 = _2693.x;
    float _2696 = _2693.y;
    float _2697 = _2693.z;
    float _2698 = _2693.w;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_735 > cbSceneParam._m0[78u].w)
    {
        float _2753 = isnan(_735) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _735 : min(cbSceneParam._m0[80u].w, _735));
        float _2754 = _2753 / _735;
        float _2765 = _2754 * _787;
        float _2766 = _788 * _2754;
        float _2767 = (-0.0) - _2766;
        float _2769 = _2754 * _789;
        float _2771 = (cbSceneParam._m0[77u].w * _2767) / _2753;
        float _2772 = _2771 + cbSceneParam._m0[79u].w;
        float _2773 = cbSceneParam._m0[79u].w - _2766;
        float _2779 = sqrt(((_2765 * _2765) + (_2766 * _2766)) + (_2769 * _2769));
        float _2782 = (1.0 - (cbSceneParam._m0[77u].w / _2753)) * _2779;
        float _2787 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2789 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2966;
        if (abs((_2767 - _2771) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2966 = ((((_2772 > 0.0) ? exp2(_2787 * _2772) : (2.0 - exp2(_2789 * _2772))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2782;
        }
        else
        {
            float _2910 = 1.0 / cbSceneParam._m0[80u].x;
            float _2911 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : max(_2772, _2773));
            float _2912 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : min(_2772, _2773));
            float _2921 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : min(_2911, 0.0));
            float _2922 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : min(_2912, 0.0));
            _2966 = ((abs(_2779 / _2767) * cbSceneParam._m0[80u].y) * ((((_2921 - _2922) * 2.0) - ((exp2(_2787 * (isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0)))) - exp2(_2787 * (isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))))) * _2910)) - ((exp2(_2789 * _2921) - exp2(_2789 * _2922)) * _2910))) + (_2782 * cbSceneParam._m0[80u].z);
        }
        vec4 _2968 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, 1.0), 0.0);
        float _2977 = exp2((_2966 * (-1.44269502162933349609375)) * (1.0 - _2968.w));
        float _2978 = log2(_2977);
        float _2994 = log2(_2698);
        _2791 = (exp2(_2994 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].x)) * _2968.x) / cbSceneParam._m0[78u].x)) + _2695;
        _2793 = (exp2(_2994 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].y)) * _2968.y) / cbSceneParam._m0[78u].y)) + _2696;
        _2795 = (exp2(_2994 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].z)) * _2968.z) / cbSceneParam._m0[78u].z)) + _2697;
        _2797 = _2977 * _2698;
    }
    else
    {
        _2791 = _2695;
        _2793 = _2696;
        _2795 = _2697;
        _2797 = _2698;
    }
    bool _3004;
    vec4 _2807;
    vec4 _2829;
    float _2831;
    float _2835;
    float _2836;
    float _2837;
    float _2838;
    bool _2848;
    for (;;)
    {
        _2807 = cbMatDynParam._m0[0u];
        float _2809 = roundEven(_2807.y);
        bool _2810 = _2809 == 3.0;
        float _2811 = log2(_2797);
        float _2818 = exp2(_2811 * cbSceneParam._m0[78u].x) * _2667;
        float _2819 = exp2(_2811 * cbSceneParam._m0[78u].y) * _2668;
        float _2820 = exp2(_2811 * cbSceneParam._m0[78u].z) * _2669;
        float _2827 = _803 + (-0.5);
        _2829 = cbMtdParam._m0[1u];
        _2831 = _2829.y * _2827;
        float _2834 = (_2809 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2835 = _2834 * (_2810 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2791)));
        _2836 = _2834 * (_2810 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2793)));
        _2837 = _2834 * (_2810 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2795)));
        _2838 = _2827 * 0.999000012874603271484375;
        _2848 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2848)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _2838) < 0.5)
            {
                _3004 = true;
                break;
            }
        }
        uint _2945 = _852 + uint(_2807.w);
        if ((cbInstanceData._m0[_2945].w < 1.0) && ((cbInstanceData._m0[_2945].w + _2838) < 0.5))
        {
            _3004 = true;
            break;
        }
        if ((_2831 + 1.0) < _2829.x)
        {
            _3004 = true;
            break;
        }
        _3004 = false;
        break;
    }
    float _3209;
    if (_3004)
    {
        discard_state = true;
        _3209 = 0.0;
    }
    else
    {
        _3209 = cbInstanceData._m0[_2670].w;
    }
    SV_Target.x = _2835;
    SV_Target.y = _2836;
    SV_Target.z = _2837;
    SV_Target.w = _3209;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2670].w;
    discard_exit();
}


