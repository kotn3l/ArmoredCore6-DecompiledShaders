#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1553;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3855 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3866 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3877 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _391.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[24u].z) + _443) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3888 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _468 = (_461 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _469 = (_461 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _470 = (_461 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _391.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[24u].z) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3899 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _308) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _309) + cbTextureTilingScale._m0[24u].w));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _580 = _578.x;
    float _590 = dot(vec4(_580, _578.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _602 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _391.z) * 2.0) - ((((_580 - _590) * cbMtdParam._m0[24u].z) + _590) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3910 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _610 = (_603 * ((_561.x * cbMtdParam._m0[14u].x) - _541)) + _541;
    float _611 = (_603 * ((_561.y * cbMtdParam._m0[14u].y) - _542)) + _542;
    float _612 = (_603 * ((_561.z * cbMtdParam._m0[14u].z) - _543)) + _543;
    float _616 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _610;
    float _619 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _611;
    float _622 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _612;
    float _629 = ((_610 - _616) * (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) + _616;
    float _630 = ((_611 - _619) * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) + _619;
    float _631 = ((_612 - _622) * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) + _622;
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _708 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _710 = _708.x;
    float _711 = _708.y;
    float _712 = _708.z;
    float _719 = ((_691.x - _710) * _461) + _710;
    float _720 = ((_691.y - _711) * _461) + _711;
    float _721 = ((_691.z - _712) * _461) + _712;
    vec4 _733 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _744 = ((_733.x - _719) * _534) + _719;
    float _745 = ((_733.y - _720) * _534) + _720;
    float _746 = ((_733.z - _721) * _534) + _721;
    vec4 _758 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _308) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _309) + cbTextureTilingScale._m0[23u].w));
    float _771 = ((_758.z - _746) * _603) + _746;
    float _774 = ((((_758.x - _744) * _603) + _744) * 2.0) + (-1.0);
    float _775 = ((((_758.y - _745) * _603) + _745) * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _3921 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _781 = sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))));
    vec4 _795 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _820 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _822 = _820.x;
    float _823 = 1.0 - _822;
    float _829 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _832 = ((isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : min(_829, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _841 = (_832 - ((((((_822 - _823) * cbMtdParam._m0[24u].w) + _823) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _832))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3942 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _842 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _849 = (_842 * ((_649.x * cbMtdParam._m0[18u].x) - _629)) + _629;
    float _850 = (_842 * ((_649.y * cbMtdParam._m0[18u].y) - _630)) + _630;
    float _851 = (_842 * ((_649.z * cbMtdParam._m0[18u].z) - _631)) + _631;
    vec4 _863 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _865 = _863.x;
    float _866 = 1.0 - _865;
    float _893 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_865 - _866) * cbMtdParam._m0[24u].y) + _866) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3953 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _894 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _902 = ((((cbMtdParam._m0[10u].x - _849) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _894) + _849;
    float _903 = ((((cbMtdParam._m0[10u].y - _850) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _894) + _850;
    float _904 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _851)) * _894) + _851;
    float _909 = (((_668.z - _771) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _771;
    float _913 = ((_795.z - _909) * cbMtdParam._m0[19u].w) + _909;
    vec4 _927 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _934 = (_927.x * 2.0) + (-1.0);
    float _935 = (_927.y * 2.0) + (-1.0);
    float _936 = dot(vec2(_934, _935), vec2(_934, _935));
    float _3964 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _944 = (_842 * (_927.z - _913)) + _913;
    float _947 = ((cbMtdParam._m0[23u].y - _944) * _894) + _944;
    vec4 _966 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _972 = (_966.x * 2.0) + (-1.0);
    float _973 = (_966.y * 2.0) + (-1.0);
    float _974 = dot(vec2(_972, _973), vec2(_972, _973));
    float _3975 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _988 = (_774 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_668.x * 2.0) + (-1.0)))) + (((_795.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _989 = (_775 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_668.y * 2.0) + (-1.0)))) + (((_795.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1001 = (((_934 - _988) + (cbMtdParam._m0[21u].x * _988)) * _842) + _988;
    float _1002 = (((_935 - _989) + (cbMtdParam._m0[21u].x * _989)) * _842) + _989;
    float _1003 = (_842 * (sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) - _781)) + _781;
    float _1014 = (((_972 - _1001) + (_1001 * cbMtdParam._m0[22u].z)) * _894) + _1001;
    float _1015 = (((_973 - _1002) + (_1002 * cbMtdParam._m0[22u].z)) * _894) + _1002;
    float _1016 = ((sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) - _1003) * _894) + _1003;
    float _1018 = cbMtdParam._m0[22u].x + _795.w;
    float _1021 = fma(_1016, _257 * NORMAL.x, fma(_1015, _264 * TANGENT.x, (_250 * _242) * _1014));
    float _1024 = fma(_1016, _257 * NORMAL.y, fma(_1015, _264 * TANGENT.y, (_250 * _243) * _1014));
    float _1027 = fma(_1016, _257 * NORMAL.z, fma(_1015, _264 * TANGENT.z, (_250 * _244) * _1014));
    float _1031 = inversesqrt(dot(vec3(_1021, _1024, _1027), vec3(_1021, _1024, _1027)));
    float _1032 = _1031 * _1021;
    float _1033 = _1031 * _1024;
    float _1034 = _1031 * _1027;
    float _3986 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _1035 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _4008 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4019 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4030 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _1053 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1104 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1094);
    float _1105 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1094);
    float _1106 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1094);
    float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
    float _1111 = _1104 * _1110;
    float _1112 = _1105 * _1110;
    float _1113 = _1106 * _1110;
    float _1119 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1120 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1138 = fma(_1034, cbSceneParam._m0[5u].z, fma(_1033, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1032));
    float _1141 = fma(_1034, cbSceneParam._m0[6u].z, fma(_1033, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1032));
    float _1144 = fma(_1034, cbSceneParam._m0[7u].z, fma(_1033, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1032));
    uint _1158 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1164 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_1158].x;
    float _1165 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_1158].y;
    float _1166 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_1158].z;
    float _4041 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _1167 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _1168 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _1169 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    vec4 _1178 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1119, cbSceneParam._m0[86u].y * _1120));
    float _1182 = ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * TEXCOORD_5.w) * _1178.x;
    float _1183 = dot(vec3(_1032, _1033, _1034), vec3(_1111, _1112, _1113));
    float _1186 = _1183 * 2.0;
    float _1190 = (_1186 * _1032) - _1111;
    float _1191 = (_1186 * _1033) - _1112;
    float _1192 = (_1186 * _1034) - _1113;
    float _1196 = abs(dot(vec3(_1111, _1112, _1113), vec3(_1032, _1033, _1034)));
    float _4074 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _1198 = sqrt(_1035);
    float _1211 = exp2((_1198 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1198 * 3.0));
    float _1243 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1247 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1251 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1552;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1277 = fma(_1251, cbModelParam._m0[26u].z, fma(_1247, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1243));
        float _1281 = fma(_1251, cbModelParam._m0[27u].z, fma(_1247, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1243));
        float _1285 = fma(_1251, cbModelParam._m0[28u].z, fma(_1247, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1243));
        float _1310 = _1243 + _1032;
        float _1311 = _1247 + _1033;
        float _1312 = _1251 + _1034;
        float _1322 = fma(_1312, cbModelParam._m0[26u].z, fma(_1311, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1310)) - _1277;
        float _1323 = fma(_1312, cbModelParam._m0[27u].z, fma(_1311, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1310)) - _1281;
        float _1324 = fma(_1312, cbModelParam._m0[28u].z, fma(_1311, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1310)) - _1285;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1277 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1281 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[34u].z) + ((((((_1285 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1380 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1346.x + (-0.5));
        float _1382 = _1380 * (_1346.y + (-0.5));
        float _1383 = _1380 * (_1346.z + (-0.5));
        float _1390 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1353.x + (-0.5));
        float _1392 = _1390 * (_1353.y + (-0.5));
        float _1393 = _1390 * (_1353.z + (-0.5));
        float _1400 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1360.x + (-0.5));
        float _1402 = _1400 * (_1360.y + (-0.5));
        float _1403 = _1400 * (_1360.z + (-0.5));
        float _1410 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1367.x + (-0.5));
        float _1412 = _1410 * (_1367.y + (-0.5));
        float _1413 = _1410 * (_1367.z + (-0.5));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = _1381 * 0.5;
        float _1418 = _1391 * 0.5;
        float _1419 = _1401 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1434 = (dot(vec3(_1032, _1033, _1034), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1444 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4122 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1446 + 1.0))) + _1451) * _1414;
        float _1461 = _1382 * 0.5;
        float _1462 = _1392 * 0.5;
        float _1463 = _1402 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_1032, _1033, _1034), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4155 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1488 + 1.0))) + _1493) * _1415;
        float _1503 = _1383 * 0.5;
        float _1504 = _1393 * 0.5;
        float _1505 = _1403 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_1032, _1033, _1034), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4188 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1530 + 1.0))) + _1535) * _1416;
        _1552 = _1383;
        _1554 = _1382;
        _1555 = _1381;
        _1556 = _1393;
        _1557 = _1392;
        _1558 = _1391;
        _1559 = _1403;
        _1560 = _1402;
        _1561 = _1401;
        _1562 = _1416;
        _1563 = _1415;
        _1564 = _1414;
        _1565 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1567 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
    }
    else
    {
        _1552 = _1553;
        _1554 = _1553;
        _1555 = _1553;
        _1556 = _1553;
        _1557 = _1553;
        _1558 = _1553;
        _1559 = _1553;
        _1560 = _1553;
        _1561 = _1553;
        _1562 = _1553;
        _1563 = _1553;
        _1564 = _1553;
        _1565 = 0.0;
        _1566 = 0.0;
        _1567 = 0.0;
    }
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1590 = fma(_1251, cbModelParam._m0[30u].z, fma(_1247, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243));
        float _1594 = fma(_1251, cbModelParam._m0[31u].z, fma(_1247, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243));
        float _1598 = fma(_1251, cbModelParam._m0[32u].z, fma(_1247, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243));
        float _1621 = _1243 + _1032;
        float _1622 = _1247 + _1033;
        float _1623 = _1251 + _1034;
        float _1633 = fma(_1623, cbModelParam._m0[30u].z, fma(_1622, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1621)) - _1590;
        float _1634 = fma(_1623, cbModelParam._m0[31u].z, fma(_1622, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1621)) - _1594;
        float _1635 = fma(_1623, cbModelParam._m0[32u].z, fma(_1622, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1621)) - _1598;
        float _1639 = inversesqrt(dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635)));
        float _1652 = ((_1639 * _1633) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1590 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1653 = ((_1639 * _1634) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1594 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1654 = ((_1639 * _1635) / cbModelParam._m0[35u].z) + ((((((_1598 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1656 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1663 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        float _1689 = exp2((_1656.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1656.x + (-0.5));
        float _1691 = _1689 * (_1656.y + (-0.5));
        float _1692 = _1689 * (_1656.z + (-0.5));
        float _1699 = exp2((_1663.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1663.x + (-0.5));
        float _1701 = _1699 * (_1663.y + (-0.5));
        float _1702 = _1699 * (_1663.z + (-0.5));
        float _1709 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1710 = _1709 * (_1670.x + (-0.5));
        float _1711 = _1709 * (_1670.y + (-0.5));
        float _1712 = _1709 * (_1670.z + (-0.5));
        float _1719 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1677.x + (-0.5));
        float _1721 = _1719 * (_1677.y + (-0.5));
        float _1722 = _1719 * (_1677.z + (-0.5));
        float _1723 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1724 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1725 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1726 = _1690 * 0.5;
        float _1727 = _1700 * 0.5;
        float _1728 = _1710 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_1032, _1033, _1034), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1723 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4251 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1753 + 1.0))) + _1758) * _1723;
        float _1768 = _1691 * 0.5;
        float _1769 = _1701 * 0.5;
        float _1770 = _1711 * 0.5;
        float _1771 = dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770));
        float _1776 = (_1771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1771);
        float _1784 = (dot(vec3(_1032, _1033, _1034), vec3(_1776 * _1768, _1776 * _1769, _1776 * _1770)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770)) / (_1724 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1795 = _1794 * 2.0;
        float _1799 = (1.0 - _1794) / (_1794 + 1.0);
        float _4284 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1809 = ((((1.0 - _1800) * (_1795 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1795 + 1.0))) + _1800) * _1724;
        float _1810 = _1692 * 0.5;
        float _1811 = _1702 * 0.5;
        float _1812 = _1712 * 0.5;
        float _1813 = dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812));
        float _1818 = (_1813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1813);
        float _1826 = (dot(vec3(_1032, _1033, _1034), vec3(_1818 * _1810, _1818 * _1811, _1818 * _1812)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1835 = sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812)) / (_1725 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1837 = _1836 * 2.0;
        float _1841 = (1.0 - _1836) / (_1836 + 1.0);
        float _4317 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1851 = ((((1.0 - _1842) * (_1837 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1837 + 1.0))) + _1842) * _1725;
        _1859 = _1692;
        _1860 = _1691;
        _1861 = _1690;
        _1862 = _1702;
        _1863 = _1701;
        _1864 = _1700;
        _1865 = _1712;
        _1866 = _1711;
        _1867 = _1710;
        _1868 = _1725;
        _1869 = _1724;
        _1870 = _1723;
        _1871 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
        _1872 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)));
        _1873 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)));
    }
    else
    {
        _1859 = _1553;
        _1860 = _1553;
        _1861 = _1553;
        _1862 = _1553;
        _1863 = _1553;
        _1864 = _1553;
        _1865 = _1553;
        _1866 = _1553;
        _1867 = _1553;
        _1868 = _1553;
        _1869 = _1553;
        _1870 = _1553;
        _1871 = 0.0;
        _1872 = 0.0;
        _1873 = 0.0;
    }
    float _1883 = (cbModelParam._m0[1u].x * (_1871 - _1565)) + _1565;
    float _1884 = (cbModelParam._m0[1u].x * (_1872 - _1566)) + _1566;
    float _1885 = (cbModelParam._m0[1u].x * (_1873 - _1567)) + _1567;
    float _1906 = fma(_1885, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1883 * cbSceneParam._m0[89u].x));
    float _1909 = fma(_1885, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1883 * cbSceneParam._m0[90u].x));
    float _1912 = fma(_1885, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1883));
    float _1927 = _1190 * 0.5;
    float _1928 = _1191 * 0.5;
    float _1929 = _1192 * 0.5;
    float _1930 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1861, _1864, _1867, _1870));
    float _1933 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1860, _1863, _1866, _1869));
    float _1936 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1859, _1862, _1865, _1868));
    float _1970;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1943 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1552, _1556, _1559, _1562));
        float _1947 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1554, _1557, _1560, _1563));
        float _1951 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1555, _1558, _1561, _1564));
        float _1958 = dot(vec4(cbModelParam._m0[39u]), vec4(_1927, _1928, _1929, 1.0));
        _1970 = dot(vec3(isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0)), isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1958) ? 0.0 : (isnan(0.0) ? _1958 : max(0.0, _1958))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1970 = 1.0;
    }
    float _1981;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1972 = dot(vec4(cbModelParam._m0[40u]), vec4(_1927, _1928, _1929, 1.0));
        _1981 = dot(vec3(isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1972) ? 0.0 : (isnan(0.0) ? _1972 : max(0.0, _1972))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1981 = 1.0;
    }
    float _1985 = (_1981 * cbModelParam._m0[1u].x) + (_1970 * (1.0 - cbModelParam._m0[1u].x));
    float _1995 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1035);
    float _1996 = isnan(_1995) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1995 : min(cbModelParam._m0[25u].z, _1995));
    float _2076;
    float _2078;
    float _2080;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2043 = fma(_1251, cbModelParam._m0[13u].z, fma(_1247, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1243)) + cbModelParam._m0[13u].w;
        float _2047 = fma(_1251, cbModelParam._m0[14u].z, fma(_1247, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1243)) + cbModelParam._m0[14u].w;
        float _2051 = fma(_1251, cbModelParam._m0[15u].z, fma(_1247, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1243)) + cbModelParam._m0[15u].w;
        float _2054 = fma(_1192, cbModelParam._m0[13u].z, fma(_1191, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1190));
        float _2057 = fma(_1192, cbModelParam._m0[14u].z, fma(_1191, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1190));
        float _2060 = fma(_1192, cbModelParam._m0[15u].z, fma(_1191, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1190));
        float _2088;
        if (_2054 > 0.0)
        {
            _2088 = abs((1.0 - _2043) / _2054);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2043 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2088 = frontier_phi_14_12_ladder;
        }
        float _2288;
        if (_2057 > 0.0)
        {
            _2288 = abs((1.0 - _2047) / _2057);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2047 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2288 = frontier_phi_23_19_ladder;
        }
        float _2531;
        if (_2060 > 0.0)
        {
            _2531 = abs((1.0 - _2051) / _2060);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2051 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2531 = frontier_phi_35_30_ladder;
        }
        float _2533 = isnan(_2288) ? _2088 : (isnan(_2088) ? _2288 : min(_2088, _2288));
        float _2534 = isnan(_2531) ? _2533 : (isnan(_2533) ? _2531 : min(_2533, _2531));
        float _2538 = (_2534 * _2054) + _2043;
        float _2539 = (_2534 * _2057) + _2047;
        float _2540 = (_2534 * _2060) + _2051;
        float _2541 = _2534 * 9.9999997473787516355514526367188e-05;
        float _2543 = (-1.0) - _2541;
        float _2545 = _2541 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2540 > _2545) || ((_2540 < _2543) || ((_2539 > _2545) || ((_2539 < _2543) || ((_2538 < _2543) || (_2538 > _2545))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2664 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2540, cbModelParam._m0[9u].z, fma(_2539, cbModelParam._m0[9u].y, _2538 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2540, cbModelParam._m0[10u].z, fma(_2539, cbModelParam._m0[10u].y, _2538 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2540, cbModelParam._m0[11u].z, fma(_2539, cbModelParam._m0[11u].y, _2538 * cbModelParam._m0[11u].x))), _1996);
            frontier_phi_13_35_ladder = _2664.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2664.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2664.x * cbModelParam._m0[1u].y;
        }
        _2076 = frontier_phi_13_35_ladder_2;
        _2078 = frontier_phi_13_35_ladder_1;
        _2080 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2064 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1190, _1191, _1192), _1996);
        _2076 = _2064.x * cbModelParam._m0[1u].y;
        _2078 = _2064.y * cbModelParam._m0[1u].y;
        _2080 = _2064.z * cbModelParam._m0[1u].y;
    }
    float _2084 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1035);
    float _2085 = isnan(_2084) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2084 : min(cbModelParam._m0[25u].w, _2084));
    float _2174;
    float _2176;
    float _2178;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2138 = fma(_1251, cbModelParam._m0[21u].z, fma(_1247, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1243)) + cbModelParam._m0[21u].w;
        float _2142 = fma(_1251, cbModelParam._m0[22u].z, fma(_1247, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1243)) + cbModelParam._m0[22u].w;
        float _2146 = fma(_1251, cbModelParam._m0[23u].z, fma(_1247, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1243)) + cbModelParam._m0[23u].w;
        float _2149 = fma(_1192, cbModelParam._m0[21u].z, fma(_1191, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1190));
        float _2152 = fma(_1192, cbModelParam._m0[22u].z, fma(_1191, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1190));
        float _2155 = fma(_1192, cbModelParam._m0[23u].z, fma(_1191, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1190));
        float _2293;
        if (_2149 > 0.0)
        {
            _2293 = abs((1.0 - _2138) / _2149);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2149 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2138 + 1.0) / _2149);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2293 = frontier_phi_25_21_ladder;
        }
        float _2558;
        if (_2152 > 0.0)
        {
            _2558 = abs((1.0 - _2142) / _2152);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2142 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2558 = frontier_phi_37_32_ladder;
        }
        float _2763;
        if (_2155 > 0.0)
        {
            _2763 = abs((1.0 - _2146) / _2155);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2146 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2763 = frontier_phi_46_43_ladder;
        }
        float _2765 = isnan(_2558) ? _2293 : (isnan(_2293) ? _2558 : min(_2293, _2558));
        float _2766 = isnan(_2763) ? _2765 : (isnan(_2765) ? _2763 : min(_2765, _2763));
        float _2770 = (_2766 * _2149) + _2138;
        float _2771 = (_2766 * _2152) + _2142;
        float _2772 = (_2766 * _2155) + _2146;
        float _2773 = _2766 * 9.9999997473787516355514526367188e-05;
        float _2774 = (-1.0) - _2773;
        float _2776 = _2773 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2772 > _2776) || ((_2772 < _2774) || ((_2771 > _2776) || ((_2771 < _2774) || ((_2770 < _2774) || (_2770 > _2776))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2971 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2772, cbModelParam._m0[17u].z, fma(_2771, cbModelParam._m0[17u].y, _2770 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2772, cbModelParam._m0[18u].z, fma(_2771, cbModelParam._m0[18u].y, _2770 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2772, cbModelParam._m0[19u].z, fma(_2771, cbModelParam._m0[19u].y, _2770 * cbModelParam._m0[19u].x))), _2085);
            frontier_phi_22_46_ladder = _2971.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2971.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2971.x * cbModelParam._m0[1u].z;
        }
        _2174 = frontier_phi_22_46_ladder_2;
        _2176 = frontier_phi_22_46_ladder_1;
        _2178 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2158 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1190, _1191, _1192), _2085);
        _2174 = _2158.x * cbModelParam._m0[1u].z;
        _2176 = _2158.y * cbModelParam._m0[1u].z;
        _2178 = _2158.z * cbModelParam._m0[1u].z;
    }
    float _2190 = ((((1.0 - _1211) * ((_1198 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1211 * _1198)) * _1182;
    float _2191 = _2190 * ((cbModelParam._m0[1u].w * (_2174 - _2076)) + _2076);
    float _2192 = _2190 * ((cbModelParam._m0[1u].w * (_2176 - _2078)) + _2078);
    float _2193 = _2190 * ((cbModelParam._m0[1u].w * (_2178 - _2080)) + _2080);
    float _2196 = fma(_2193, cbSceneParam._m0[89u].z, fma(_2192, cbSceneParam._m0[89u].y, _2191 * cbSceneParam._m0[89u].x));
    float _2199 = fma(_2193, cbSceneParam._m0[90u].z, fma(_2192, cbSceneParam._m0[90u].y, _2191 * cbSceneParam._m0[90u].x));
    float _2202 = fma(_2193, cbSceneParam._m0[91u].z, fma(_2192, cbSceneParam._m0[91u].y, _2191 * cbSceneParam._m0[91u].x));
    uvec4 _2212 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2214 = _2212.x * 14u;
    uint _2215 = _2214 + 13u;
    float _2222 = _1182 + (-1.0);
    float _2227 = (cbLight._m0[_2215].x * _2222) + 1.0;
    float _2228 = (cbLight._m0[_2215].y * _2222) + 1.0;
    float _2229 = (cbLight._m0[_2215].z * _2222) + 1.0;
    float _2230 = (cbLight._m0[_2215].w * _2222) + 1.0;
    uint _2231 = _2214 + 5u;
    float _2237 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
    uint _2241 = _2214 + 4u;
    float _2247 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2251 = _2214 | 1u;
    float _2262 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_1032, _1033, _1034));
    float _2265 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_1032, _1033, _1034));
    float _4453 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _4464 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2270 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2272 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2279 = ((cbLight._m0[_2231].x * _2237) * _2272) + ((cbLight._m0[_2241].x * _2247) * _2270);
    float _2280 = ((_2237 * cbLight._m0[_2231].y) * _2272) + ((_2247 * cbLight._m0[_2241].y) * _2270);
    float _2281 = ((_2237 * cbLight._m0[_2231].z) * _2272) + ((_2247 * cbLight._m0[_2241].z) * _2270);
    uvec4 _2285 = floatBitsToUint(cbLight._m0[_2214 + 12u]);
    bool _2287 = _2285.x == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2287)
    {
        _2298 = _2279;
        _2300 = _2280;
        _2302 = _2281;
    }
    else
    {
        uint _2306 = _2214 + 6u;
        float _2322 = (dot(vec3(cbLight._m0[_2214 + 2u].xyz), vec3(_1032, _1033, _1034)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4475 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2325 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2298 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2279;
        _2300 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2280;
        _2302 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2281;
    }
    bool _2305 = _2285.y == 0u;
    float _2343;
    float _2345;
    float _2347;
    if (_2305)
    {
        _2343 = _2298;
        _2345 = _2300;
        _2347 = _2302;
    }
    else
    {
        uint _2502 = _2214 + 7u;
        float _2518 = (dot(vec3(cbLight._m0[_2214 + 3u].xyz), vec3(_1032, _1033, _1034)) * 0.5) + 0.5;
        float _2519 = _2518 * _2518;
        float _4491 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2520 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2521 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2343 = (((cbLight._m0[_2502].x * 0.3183098733425140380859375) * _2520) * _2521) + _2298;
        _2345 = (((cbLight._m0[_2502].y * 0.3183098733425140380859375) * _2520) * _2521) + _2300;
        _2347 = (((cbLight._m0[_2502].z * 0.3183098733425140380859375) * _2520) * _2521) + _2302;
    }
    uint _2350 = _2214 + 8u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _1035) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2214].x + _1111;
    float _2366 = cbLight._m0[_2214].y + _1112;
    float _2367 = cbLight._m0[_2214].z + _1113;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_1032, _1033, _1034), vec3(cbLight._m0[_2214].xyz));
    float _4507 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _4518 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _2379 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2380 = dot(vec3(_1032, _1033, _1034), vec3(_2372, _2373, _2374));
    float _4529 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2384 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2372, _2373, _2374));
    float _4540 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2388 = _2364 * _2364;
    float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
    float _2403 = (exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2404 = 1.0 - _2364;
    float _2415 = (0.5 / (((_2379 * ((_2378 * _2404) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2404) + _2364) * _2378))) * _2378;
    float _4551 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2417 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
    uint _2428 = _2214 + 9u;
    float _2439 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _1035) * 0.949999988079071044921875);
    float _2440 = _2439 * _2439;
    float _2441 = cbLight._m0[_2251].x + _1111;
    float _2442 = cbLight._m0[_2251].y + _1112;
    float _2443 = cbLight._m0[_2251].z + _1113;
    float _2447 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
    float _2448 = _2447 * _2441;
    float _2449 = _2447 * _2442;
    float _2450 = _2447 * _2443;
    float _2451 = dot(vec3(_1032, _1033, _1034), vec3(cbLight._m0[_2251].xyz));
    float _4562 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2454 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2455 = dot(vec3(_1032, _1033, _1034), vec3(_2448, _2449, _2450));
    float _4573 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2459 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2448, _2449, _2450));
    float _4584 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2463 = _2440 * _2440;
    float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
    float _2476 = (exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2477 = 1.0 - _2440;
    float _2487 = (0.5 / (((_2379 * ((_2454 * _2477) + _2440)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2477) + _2440) * _2454))) * _2454;
    float _4595 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2489 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
    float _2499 = (((_2476 * cbLight._m0[_2428].x) * _2489) * _2237) + (((_2403 * cbLight._m0[_2350].x) * _2417) * _2247);
    float _2500 = (((_2476 * cbLight._m0[_2428].y) * _2489) * _2237) + (((_2403 * cbLight._m0[_2350].y) * _2417) * _2247);
    float _2501 = (((_2476 * cbLight._m0[_2428].z) * _2489) * _2237) + (((_2403 * cbLight._m0[_2350].z) * _2417) * _2247);
    float _2563;
    float _2565;
    float _2567;
    if (_2287)
    {
        _2563 = _2499;
        _2565 = _2500;
        _2567 = _2501;
    }
    else
    {
        uint _2569 = _2214 + 2u;
        uint _2573 = _2214 + 10u;
        float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2569].w)) * _1035) * 0.949999988079071044921875);
        float _2588 = _2587 * _2587;
        float _2589 = cbLight._m0[_2569].x + _1111;
        float _2590 = cbLight._m0[_2569].y + _1112;
        float _2591 = cbLight._m0[_2569].z + _1113;
        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
        float _2596 = _2595 * _2589;
        float _2597 = _2595 * _2590;
        float _2598 = _2595 * _2591;
        float _2599 = dot(vec3(_1032, _1033, _1034), vec3(cbLight._m0[_2569].xyz));
        float _4606 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2603 = dot(vec3(_1032, _1033, _1034), vec3(_2596, _2597, _2598));
        float _4617 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2607 = dot(vec3(cbLight._m0[_2569].xyz), vec3(_2596, _2597, _2598));
        float _4628 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _2588 * _2588;
        float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
        float _2624 = (exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2625 = 1.0 - _2588;
        float _2635 = (0.5 / (((_2379 * ((_2602 * _2625) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2625) + _2588) * _2602))) * _2602;
        float _4639 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2637 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
        float _2638 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2563 = (((_2624 * cbLight._m0[_2573].x) * _2637) * _2638) + _2499;
        _2565 = (((_2624 * cbLight._m0[_2573].y) * _2637) * _2638) + _2500;
        _2567 = (((_2624 * cbLight._m0[_2573].z) * _2637) * _2638) + _2501;
    }
    float _2673;
    float _2675;
    float _2677;
    if (_2305)
    {
        _2673 = _2563;
        _2675 = _2565;
        _2677 = _2567;
    }
    else
    {
        uint _2684 = _2214 + 3u;
        uint _2688 = _2214 + 11u;
        float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2684].w)) * _1035) * 0.949999988079071044921875);
        float _2703 = _2702 * _2702;
        float _2704 = cbLight._m0[_2684].x + _1111;
        float _2705 = cbLight._m0[_2684].y + _1112;
        float _2706 = cbLight._m0[_2684].z + _1113;
        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
        float _2711 = _2710 * _2704;
        float _2712 = _2710 * _2705;
        float _2713 = _2710 * _2706;
        float _2714 = dot(vec3(_1032, _1033, _1034), vec3(cbLight._m0[_2684].xyz));
        float _4655 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2718 = dot(vec3(_1032, _1033, _1034), vec3(_2711, _2712, _2713));
        float _4666 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2722 = dot(vec3(cbLight._m0[_2684].xyz), vec3(_2711, _2712, _2713));
        float _4677 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2726 = _2703 * _2703;
        float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
        float _2739 = (exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2740 = 1.0 - _2703;
        float _2750 = (0.5 / (((_2379 * ((_2717 * _2740) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2740) + _2703) * _2717))) * _2717;
        float _4688 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2752 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
        float _2753 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2673 = (((_2739 * cbLight._m0[_2688].x) * _2752) * _2753) + _2563;
        _2675 = (((_2739 * cbLight._m0[_2688].y) * _2752) * _2753) + _2565;
        _2677 = (((_2739 * cbLight._m0[_2688].z) * _2752) * _2753) + _2567;
    }
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    if (_2212.y == 0u)
    {
        float _2828 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2829 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2828;
        float _2830 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2828;
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2828;
        uvec4 _2843 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2844 = _2843.x;
        uint _2855 = uint((float(_2843.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1120) / _2844))) + floor(float(uint(cbSceneParam._m0[85u].x * _1119) / _2844)));
        float _2865 = (log2(_2831 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2866 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        uint _2869 = uint(isnan(14.0) ? _2866 : (isnan(_2866) ? 14.0 : min(_2866, 14.0)));
        uvec4 _2874 = texelFetch(g_lightClusterGridBuffer, int(((_2869 << 2u) + (_2855 << 6u)) >> 2u));
        uint _2875 = _2874.x;
        uint _2876 = _2843.z;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        if (((((1u << ((_2876 >> 4u) & 15u)) + 4294967295u) & _2875) == 0u) || ((_2876 & 240u) == 0u))
        {
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
        }
        else
        {
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            uint _3127 = 0u;
            uint _3136;
            bool _3137;
            for (;;)
            {
                _3136 = texelFetch(g_lightClassification, int((((_2869 << 5u) + (_2855 << 9u)) + (_3127 << 2u)) >> 2u)).x;
                _3137 = _3136 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3137)
                {
                    frontier_phi_61_pred = _3121;
                    frontier_phi_61_pred_1 = _3126;
                    frontier_phi_61_pred_2 = _3125;
                    frontier_phi_61_pred_3 = _3124;
                    frontier_phi_61_pred_4 = _3123;
                    frontier_phi_61_pred_5 = _3122;
                }
                else
                {
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    uint _3251;
                    _3245 = _3121;
                    _3246 = _3122;
                    _3247 = _3123;
                    _3248 = _3124;
                    _3249 = _3125;
                    _3250 = _3126;
                    _3251 = _3136;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    for (;;)
                    {
                        uint _3255 = uint(findLSB(_3251)) + (_3127 << 5u);
                        uint _3252 = (_3251 + 4294967295u) & _3251;
                        uint _3257 = _3255 * 48u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 3u)).x));
                        uint _3277 = (_3255 * 48u) + 4u;
                        vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 3u)).x));
                        uint _3296 = (_3255 * 48u) + 8u;
                        vec3 _3307 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x));
                        float _3311 = _3271.x - _2829;
                        float _3312 = _3271.y - _2830;
                        float _3313 = _3271.z - _2831;
                        float _3314 = dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313));
                        float _3317 = inversesqrt(_3314);
                        float _3318 = _3317 * _3311;
                        float _3319 = _3317 * _3312;
                        float _3320 = _3317 * _3313;
                        float _3321 = dot(vec3(_1138, _1141, _1144), vec3(_3318, _3319, _3320));
                        float _3326 = 1.0 - (_3314 * _3271.w);
                        float _4714 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3327 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3328 = sqrt(_3314) * _3290.w;
                        float _3331 = 1.39999997615814208984375 / (_3328 + 1.39999997615814208984375);
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3321) + _3332;
                        float _3338 = _3328 * _3328;
                        float _3342 = ((isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0))) * _3327) / ((_3338 * 0.699999988079071044921875) + 1.0);
                        float _3346 = (-0.0) - _2829;
                        float _3347 = (-0.0) - _2830;
                        float _3348 = (-0.0) - _2831;
                        float _3352 = inversesqrt(dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348)));
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3363 = exp2(log2(1.0 / ((_3338 * 3.5) + 5.0)) * 0.25);
                        float _3364 = 1.0 - _1198;
                        float _3371 = sqrt(1.0 - ((1.0 - (_3364 * _3364)) * (1.0 - (_3363 * _3363))));
                        float _3372 = _3371 * _3371;
                        float _3373 = _3372 * _3372;
                        float _3374 = _3353 + _3318;
                        float _3375 = _3354 + _3319;
                        float _3376 = _3355 + _3320;
                        float _3380 = inversesqrt(dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376)));
                        float _3384 = dot(vec3(_1138, _1141, _1144), vec3(_3353, _3354, _3355));
                        float _4730 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3387 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3388 = dot(vec3(_1138, _1141, _1144), vec3(_3380 * _3374, _3380 * _3375, _3380 * _3376));
                        float _4741 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3391 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3395 = ((_3391 * _3391) * (_3373 + (-1.0))) + 1.0;
                        float _3396 = _3331 * _3372;
                        float _3397 = _3396 * _3396;
                        float _3400 = ((1.0 - _3397) * _3321) + _3397;
                        float _4752 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3401 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3402 = 1.0 - _3372;
                        float _3412 = (0.5 / (((_3401 * ((_3387 * _3402) + _3372)) + 9.9999999392252902907785028219223e-09) + (((_3401 * _3402) + _3372) * _3387))) * _3401;
                        float _4763 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3423 = (((_3373 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3395 * _3395) * ((_3338 * 2.1991131305694580078125) + 3.141590118408203125))) * _3327;
                        _3180 = (_3342 * _3290.x) + _3248;
                        _3181 = (_3342 * _3290.y) + _3249;
                        _3182 = (_3342 * _3290.z) + _3250;
                        _3177 = (_3423 * _3307.x) + _3245;
                        _3178 = (_3423 * _3307.y) + _3246;
                        _3179 = (_3423 * _3307.z) + _3247;
                        if (_3252 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3245 = _3177;
                            _3246 = _3178;
                            _3247 = _3179;
                            _3248 = _3180;
                            _3249 = _3181;
                            _3250 = _3182;
                            _3251 = _3252;
                        }
                    }
                    frontier_phi_61_pred = _3177;
                    frontier_phi_61_pred_1 = _3182;
                    frontier_phi_61_pred_2 = _3181;
                    frontier_phi_61_pred_3 = _3180;
                    frontier_phi_61_pred_4 = _3179;
                    frontier_phi_61_pred_5 = _3178;
                }
                _2977 = frontier_phi_61_pred;
                _2987 = frontier_phi_61_pred_1;
                _2985 = frontier_phi_61_pred_2;
                _2983 = frontier_phi_61_pred_3;
                _2981 = frontier_phi_61_pred_4;
                _2979 = frontier_phi_61_pred_5;
                uint _3128 = _3127 + 1u;
                if (_3128 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3121 = _2977;
                    _3122 = _2979;
                    _3123 = _2981;
                    _3124 = _2983;
                    _3125 = _2985;
                    _3126 = _2987;
                    _3127 = _3128;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
        }
        uvec4 _2990 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2991 = _2990.z;
        uint _2993 = (_2991 >> 8u) & 15u;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        if (((4294967295u << _2993) & _2875) == 0u)
        {
            _3089 = _2976;
            _3091 = _2978;
            _3093 = _2980;
            _3095 = _2982;
            _3097 = _2984;
            _3099 = _2986;
        }
        else
        {
            float _3114 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
            float _3115 = _3114 * _2829;
            float _3116 = _3114 * _2830;
            float _3117 = _3114 * _2831;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2993 < ((_2991 >> 12u) & 15u))
            {
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3098;
                float _3100;
                float _3228 = _2976;
                float _3229 = _2978;
                float _3230 = _2980;
                float _3231 = _2982;
                float _3232 = _2984;
                float _3233 = _2986;
                uint _3234 = _2993;
                uint _3243;
                bool _3244;
                for (;;)
                {
                    _3243 = texelFetch(g_lightClassification, int((((_2869 << 5u) + (_2855 << 9u)) + (_3234 << 2u)) >> 2u)).x;
                    _3244 = _3243 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3244)
                    {
                        frontier_phi_67_pred = _3231;
                        frontier_phi_67_pred_1 = _3232;
                        frontier_phi_67_pred_2 = _3233;
                        frontier_phi_67_pred_3 = _3230;
                        frontier_phi_67_pred_4 = _3229;
                        frontier_phi_67_pred_5 = _3228;
                    }
                    else
                    {
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3441 = _3228;
                        float _3442 = _3229;
                        float _3443 = _3230;
                        float _3444 = _3231;
                        float _3445 = _3232;
                        float _3446 = _3233;
                        uint _3447 = _3243;
                        uint _3448;
                        vec4 _3473;
                        float _3474;
                        vec4 _3489;
                        vec3 _3501;
                        vec4 _3516;
                        vec4 _3531;
                        float _3577;
                        bool _3578;
                        for (;;)
                        {
                            uint _3458 = ((_3234 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3447));
                            _3448 = (_3447 + 4294967295u) & _3447;
                            uint _3460 = _3458 * 40u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3474 = _3473.w;
                            uint _3476 = (_3458 * 40u) + 4u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3491 = (_3458 * 40u) + 8u;
                            _3501 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x));
                            uint _3503 = (_3458 * 40u) + 16u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3518 = (_3458 * 40u) + 20u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3458 * 40u) + 24u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3552 = (_3458 * 40u) + 28u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            _3577 = fma(_2831, _3565.z, fma(_2830, _3565.y, _3565.x * _2829)) + _3565.w;
                            _3578 = !((fma(_2831, _3546.z, fma(_2830, _3546.y, _3546.x * _2829)) + _3546.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3578)
                            {
                                float _3605 = _3473.x - _2829;
                                float _3606 = _3473.y - _2830;
                                float _3607 = _3473.z - _2831;
                                float _3608 = dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607));
                                float _3611 = inversesqrt(_3608);
                                float _3612 = _3611 * _3605;
                                float _3613 = _3611 * _3606;
                                float _3614 = _3611 * _3607;
                                float _3618 = 1.0 - (_3608 / (_3474 * _3474));
                                float _4774 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3623 = sqrt(_3608) * _3489.w;
                                float _3625 = 1.39999997615814208984375 / (_3623 + 1.39999997615814208984375);
                                float _3626 = _3625 * _3625;
                                float _3629 = ((1.0 - _3626) * dot(vec3(_3612, _3613, _3614), vec3(_1138, _1141, _1144))) + _3626;
                                float _3632 = _3623 * _3623;
                                float _3636 = (fma(_2831, _3516.z, fma(_2830, _3516.y, _3516.x * _2829)) + _3516.w) / _3577;
                                float _3637 = (fma(_2831, _3531.z, fma(_2830, _3531.y, _3531.x * _2829)) + _3531.w) / _3577;
                                float _3641 = 1.0 - dot(vec2(_3636, _3637), vec2(_3636, _3637));
                                float _4790 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3643 = _3642 * (((isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0))) * _3619) / ((_3632 * 0.699999988079071044921875) + 1.0));
                                float _3655 = exp2(log2(1.0 / ((_3632 * 3.5) + 5.0)) * 0.25);
                                float _3656 = 1.0 - _1198;
                                float _3663 = sqrt(1.0 - ((1.0 - (_3656 * _3656)) * (1.0 - (_3655 * _3655))));
                                float _3664 = _3663 * _3663;
                                float _3665 = _3664 * _3664;
                                float _3666 = _3612 - _3115;
                                float _3667 = _3613 - _3116;
                                float _3668 = _3614 - _3117;
                                float _3672 = inversesqrt(dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668)));
                                float _3676 = dot(vec3(_1138, _1141, _1144), vec3((-0.0) - _3115, (-0.0) - _3116, (-0.0) - _3117));
                                float _4801 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3679 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3680 = dot(vec3(_1138, _1141, _1144), vec3(_3672 * _3666, _3672 * _3667, _3672 * _3668));
                                float _4812 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3687 = ((_3683 * _3683) * (_3665 + (-1.0))) + 1.0;
                                float _3688 = _3625 * _3664;
                                float _3689 = _3688 * _3688;
                                float _3695 = ((1.0 - _3689) * dot(vec3(_1138, _1141, _1144), vec3(_3612, _3613, _3614))) + _3689;
                                float _4823 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3697 = 1.0 - _3664;
                                float _3707 = (0.5 / (((_3696 * ((_3679 * _3697) + _3664)) + 9.9999999392252902907785028219223e-09) + (((_3696 * _3697) + _3664) * _3679))) * _3696;
                                float _4834 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3717 = (_3642 * _3619) * (((_3665 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3687 * _3687) * ((_3632 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3717 * _3501.x;
                                frontier_phi_73_pred_1 = _3717 * _3501.y;
                                frontier_phi_73_pred_2 = _3643 * _3489.z;
                                frontier_phi_73_pred_3 = _3643 * _3489.y;
                                frontier_phi_73_pred_4 = _3643 * _3489.x;
                                frontier_phi_73_pred_5 = _3717 * _3501.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3721 = frontier_phi_73_pred;
                            _3722 = frontier_phi_73_pred_1;
                            _3726 = frontier_phi_73_pred_2;
                            _3725 = frontier_phi_73_pred_3;
                            _3724 = frontier_phi_73_pred_4;
                            _3723 = frontier_phi_73_pred_5;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            if (_3448 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3448;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3431;
                        frontier_phi_67_pred_1 = _3432;
                        frontier_phi_67_pred_2 = _3433;
                        frontier_phi_67_pred_3 = _3430;
                        frontier_phi_67_pred_4 = _3429;
                        frontier_phi_67_pred_5 = _3428;
                    }
                    _3096 = frontier_phi_67_pred;
                    _3098 = frontier_phi_67_pred_1;
                    _3100 = frontier_phi_67_pred_2;
                    _3094 = frontier_phi_67_pred_3;
                    _3092 = frontier_phi_67_pred_4;
                    _3090 = frontier_phi_67_pred_5;
                    uint _3235 = _3234 + 1u;
                    if (_3235 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3228 = _3090;
                        _3229 = _3092;
                        _3230 = _3094;
                        _3231 = _3096;
                        _3232 = _3098;
                        _3233 = _3100;
                        _3234 = _3235;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3098;
                frontier_phi_55_56_ladder_1 = _3100;
                frontier_phi_55_56_ladder_2 = _3096;
                frontier_phi_55_56_ladder_3 = _3094;
                frontier_phi_55_56_ladder_4 = _3092;
                frontier_phi_55_56_ladder_5 = _3090;
            }
            else
            {
                frontier_phi_55_56_ladder = _2984;
                frontier_phi_55_56_ladder_1 = _2986;
                frontier_phi_55_56_ladder_2 = _2982;
                frontier_phi_55_56_ladder_3 = _2980;
                frontier_phi_55_56_ladder_4 = _2978;
                frontier_phi_55_56_ladder_5 = _2976;
            }
            _3089 = frontier_phi_55_56_ladder_5;
            _3091 = frontier_phi_55_56_ladder_4;
            _3093 = frontier_phi_55_56_ladder_3;
            _3095 = frontier_phi_55_56_ladder_2;
            _3097 = frontier_phi_55_56_ladder;
            _3099 = frontier_phi_55_56_ladder_1;
        }
        float _3104 = isnan(1.0) ? _1182 : (isnan(_1182) ? 1.0 : min(_1182, 1.0));
        _2888 = (_3104 * _3095) + _2343;
        _2890 = (_3104 * _3097) + _2345;
        _2892 = (_3104 * _3099) + _2347;
        _2894 = ((_3089 * 0.039999999105930328369140625) * _3104) + _2673;
        _2896 = ((_3091 * 0.039999999105930328369140625) * _3104) + _2675;
        _2898 = ((_3093 * 0.039999999105930328369140625) * _3104) + _2677;
    }
    else
    {
        _2888 = _2343;
        _2890 = _2345;
        _2892 = _2347;
        _2894 = _2673;
        _2896 = _2675;
        _2898 = _2677;
    }
    float _4850 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _4861 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _4872 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    uint _2918 = _289 + 6u;
    float _2926 = _1119 / cbSceneParam._m0[86u].x;
    float _2927 = _1120 / cbSceneParam._m0[86u].y;
    vec4 _2941 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2926, _2927, (log2((isnan(cbSceneParam._m0[77u].w) ? _1053 : (isnan(_1053) ? cbSceneParam._m0[77u].w : min(_1053, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2943 = _2941.x;
    float _2944 = _2941.y;
    float _2945 = _2941.z;
    float _2946 = _2941.w;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_1053 > cbSceneParam._m0[78u].w)
    {
        float _3001 = isnan(_1053) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1053 : min(cbSceneParam._m0[80u].w, _1053));
        float _3002 = _3001 / _1053;
        float _3013 = _3002 * _1104;
        float _3014 = _1105 * _3002;
        float _3015 = (-0.0) - _3014;
        float _3017 = _3002 * _1106;
        float _3019 = (cbSceneParam._m0[77u].w * _3015) / _3001;
        float _3020 = _3019 + cbSceneParam._m0[79u].w;
        float _3021 = cbSceneParam._m0[79u].w - _3014;
        float _3027 = sqrt(((_3013 * _3013) + (_3014 * _3014)) + (_3017 * _3017));
        float _3030 = (1.0 - (cbSceneParam._m0[77u].w / _3001)) * _3027;
        float _3035 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3037 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3190;
        if (abs((_3015 - _3019) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3190 = ((((_3020 > 0.0) ? exp2(_3035 * _3020) : (2.0 - exp2(_3037 * _3020))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3030;
        }
        else
        {
            float _3150 = 1.0 / cbSceneParam._m0[80u].x;
            float _3151 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : max(_3020, _3021));
            float _3152 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : min(_3020, _3021));
            float _3161 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : min(_3151, 0.0));
            float _3162 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : min(_3152, 0.0));
            _3190 = ((abs(_3027 / _3015) * cbSceneParam._m0[80u].y) * ((((_3161 - _3162) * 2.0) - ((exp2(_3035 * (isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0)))) - exp2(_3035 * (isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0))))) * _3150)) - ((exp2(_3037 * _3161) - exp2(_3037 * _3162)) * _3150))) + (_3030 * cbSceneParam._m0[80u].z);
        }
        vec4 _3192 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2926, _2927, 1.0), 0.0);
        float _3201 = exp2((_3190 * (-1.44269502162933349609375)) * (1.0 - _3192.w));
        float _3202 = log2(_3201);
        float _3218 = log2(_2946);
        _3039 = (exp2(_3218 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].x)) * _3192.x) / cbSceneParam._m0[78u].x)) + _2943;
        _3041 = (exp2(_3218 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].y)) * _3192.y) / cbSceneParam._m0[78u].y)) + _2944;
        _3043 = (exp2(_3218 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].z)) * _3192.z) / cbSceneParam._m0[78u].z)) + _2945;
        _3045 = _3201 * _2946;
    }
    else
    {
        _3039 = _2943;
        _3041 = _2944;
        _3043 = _2945;
        _3045 = _2946;
    }
    float _3057 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3058 = _3057 == 3.0;
    float _3059 = log2(_3045);
    float _3066 = exp2(_3059 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2888 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1182))) + ((_2894 + ((isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0))) * _1985)) * cbPerFrame._m0[3u].x));
    float _3067 = exp2(_3059 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2890 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1182))) + ((_2896 + ((isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0))) * _1985)) * cbPerFrame._m0[3u].x));
    float _3068 = exp2(_3059 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2892 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1182))) + ((_2898 + ((isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0))) * _1985)) * cbPerFrame._m0[3u].x));
    float _3077 = (_3057 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3077 * (_3058 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3039)));
    SV_Target.y = _3077 * (_3058 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3041)));
    SV_Target.z = _3077 * (_3058 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3043)));
    SV_Target.w = cbInstanceData._m0[_2918].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2918].w;
}


