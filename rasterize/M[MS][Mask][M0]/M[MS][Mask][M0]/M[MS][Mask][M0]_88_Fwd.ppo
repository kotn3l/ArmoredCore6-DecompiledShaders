#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1451;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3754 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3765 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3776 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _385.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[24u].z) + _434) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3787 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _459 = (_452 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _460 = (_452 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _461 = (_452 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _385.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[24u].z) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3798 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    float _538 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _532;
    float _541 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _533;
    float _544 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _534;
    float _551 = ((_532 - _538) * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) + _538;
    float _552 = ((_533 - _541) * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) + _541;
    float _553 = ((_534 - _544) * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) + _544;
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _633 = _631.x;
    float _634 = _631.y;
    float _635 = _631.z;
    float _642 = ((_614.x - _633) * _452) + _633;
    float _643 = ((_614.y - _634) * _452) + _634;
    float _644 = ((_614.z - _635) * _452) + _635;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _669 = ((_656.z - _644) * _525) + _644;
    float _672 = ((((_656.x - _642) * _525) + _642) * 2.0) + (-1.0);
    float _673 = ((((_656.y - _643) * _525) + _643) * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _3809 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _679 = sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _720 = _718.x;
    float _721 = 1.0 - _720;
    float _727 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _730 = ((isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : min(_727, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _739 = (_730 - ((((((_720 - _721) * cbMtdParam._m0[24u].w) + _721) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _730))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3830 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _740 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _747 = (_740 * ((_572.x * cbMtdParam._m0[18u].x) - _551)) + _551;
    float _748 = (_740 * ((_572.y * cbMtdParam._m0[18u].y) - _552)) + _552;
    float _749 = (_740 * ((_572.z * cbMtdParam._m0[18u].z) - _553)) + _553;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _763 = _761.x;
    float _764 = 1.0 - _763;
    float _789 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_763 - _764) * cbMtdParam._m0[24u].y) + _764) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3841 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _790 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _798 = ((((cbMtdParam._m0[10u].x - _747) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _790) + _747;
    float _799 = ((((cbMtdParam._m0[10u].y - _748) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _790) + _748;
    float _800 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _749)) * _790) + _749;
    float _805 = (((_591.z - _669) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _669;
    float _809 = ((_693.z - _805) * cbMtdParam._m0[19u].w) + _805;
    vec4 _823 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _830 = (_823.x * 2.0) + (-1.0);
    float _831 = (_823.y * 2.0) + (-1.0);
    float _832 = dot(vec2(_830, _831), vec2(_830, _831));
    float _3852 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _840 = (_740 * (_823.z - _809)) + _809;
    float _843 = ((cbMtdParam._m0[23u].y - _840) * _790) + _840;
    vec4 _864 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _870 = (_864.x * 2.0) + (-1.0);
    float _871 = (_864.y * 2.0) + (-1.0);
    float _872 = dot(vec2(_870, _871), vec2(_870, _871));
    float _3863 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _886 = (_672 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_591.x * 2.0) + (-1.0)))) + (((_693.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _887 = (_673 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_591.y * 2.0) + (-1.0)))) + (((_693.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _899 = (((_830 - _886) + (cbMtdParam._m0[21u].x * _886)) * _740) + _886;
    float _900 = (((_831 - _887) + (cbMtdParam._m0[21u].x * _887)) * _740) + _887;
    float _901 = (_740 * (sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) - _679)) + _679;
    float _912 = (((_870 - _899) + (_899 * cbMtdParam._m0[22u].z)) * _790) + _899;
    float _913 = (((_871 - _900) + (_900 * cbMtdParam._m0[22u].z)) * _790) + _900;
    float _914 = ((sqrt(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) - _901) * _790) + _901;
    float _916 = cbMtdParam._m0[22u].x + _693.w;
    float _919 = fma(_914, _251 * NORMAL.x, fma(_913, _258 * TANGENT.x, (_244 * _236) * _912));
    float _922 = fma(_914, _251 * NORMAL.y, fma(_913, _258 * TANGENT.y, (_244 * _237) * _912));
    float _925 = fma(_914, _251 * NORMAL.z, fma(_913, _258 * TANGENT.z, (_244 * _238) * _912));
    float _929 = inversesqrt(dot(vec3(_919, _922, _925), vec3(_919, _922, _925)));
    float _930 = _929 * _919;
    float _931 = _929 * _922;
    float _932 = _929 * _925;
    float _3874 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _933 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _3896 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _3907 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _3918 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _951 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1002 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _992);
    float _1003 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _992);
    float _1004 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _992);
    float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
    float _1009 = _1002 * _1008;
    float _1010 = _1003 * _1008;
    float _1011 = _1004 * _1008;
    float _1017 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1018 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1036 = fma(_932, cbSceneParam._m0[5u].z, fma(_931, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _930));
    float _1039 = fma(_932, cbSceneParam._m0[6u].z, fma(_931, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _930));
    float _1042 = fma(_932, cbSceneParam._m0[7u].z, fma(_931, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _930));
    uint _1056 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1062 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_1056].x;
    float _1063 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_1056].y;
    float _1064 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_1056].z;
    float _3929 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1065 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    vec4 _1076 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1017, cbSceneParam._m0[86u].y * _1018));
    float _1080 = ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * TEXCOORD_5.w) * _1076.x;
    float _1081 = dot(vec3(_930, _931, _932), vec3(_1009, _1010, _1011));
    float _1084 = _1081 * 2.0;
    float _1088 = (_1084 * _930) - _1009;
    float _1089 = (_1084 * _931) - _1010;
    float _1090 = (_1084 * _932) - _1011;
    float _1094 = abs(dot(vec3(_1009, _1010, _1011), vec3(_930, _931, _932)));
    float _3962 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1096 = sqrt(_933);
    float _1109 = exp2((_1096 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1096 * 3.0));
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1450;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1175 = fma(_1149, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141));
        float _1179 = fma(_1149, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141));
        float _1183 = fma(_1149, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141));
        float _1208 = _1141 + _930;
        float _1209 = _1145 + _931;
        float _1210 = _1149 + _932;
        float _1220 = fma(_1210, cbModelParam._m0[26u].z, fma(_1209, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1208)) - _1175;
        float _1221 = fma(_1210, cbModelParam._m0[27u].z, fma(_1209, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1208)) - _1179;
        float _1222 = fma(_1210, cbModelParam._m0[28u].z, fma(_1209, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1208)) - _1183;
        float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
        float _1239 = ((_1226 * _1220) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1175 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1226 * _1221) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1179 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1226 * _1222) / cbModelParam._m0[34u].z) + ((((((_1183 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1278 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1244.x + (-0.5));
        float _1280 = _1278 * (_1244.y + (-0.5));
        float _1281 = _1278 * (_1244.z + (-0.5));
        float _1288 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1251.x + (-0.5));
        float _1290 = _1288 * (_1251.y + (-0.5));
        float _1291 = _1288 * (_1251.z + (-0.5));
        float _1298 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1258.x + (-0.5));
        float _1300 = _1298 * (_1258.y + (-0.5));
        float _1301 = _1298 * (_1258.z + (-0.5));
        float _1308 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1265.x + (-0.5));
        float _1310 = _1308 * (_1265.y + (-0.5));
        float _1311 = _1308 * (_1265.z + (-0.5));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = _1279 * 0.5;
        float _1316 = _1289 * 0.5;
        float _1317 = _1299 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1332 = (dot(vec3(_930, _931, _932), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1342 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4010 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1344 + 1.0))) + _1349) * _1312;
        float _1359 = _1280 * 0.5;
        float _1360 = _1290 * 0.5;
        float _1361 = _1300 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_930, _931, _932), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4043 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1386 + 1.0))) + _1391) * _1313;
        float _1401 = _1281 * 0.5;
        float _1402 = _1291 * 0.5;
        float _1403 = _1301 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_930, _931, _932), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4076 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1428 + 1.0))) + _1433) * _1314;
        _1450 = _1281;
        _1452 = _1280;
        _1453 = _1279;
        _1454 = _1291;
        _1455 = _1290;
        _1456 = _1289;
        _1457 = _1301;
        _1458 = _1300;
        _1459 = _1299;
        _1460 = _1314;
        _1461 = _1313;
        _1462 = _1312;
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
    }
    else
    {
        _1450 = _1451;
        _1452 = _1451;
        _1453 = _1451;
        _1454 = _1451;
        _1455 = _1451;
        _1456 = _1451;
        _1457 = _1451;
        _1458 = _1451;
        _1459 = _1451;
        _1460 = _1451;
        _1461 = _1451;
        _1462 = _1451;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1489 = fma(_1149, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141));
        float _1493 = fma(_1149, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141));
        float _1497 = fma(_1149, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141));
        float _1520 = _1141 + _930;
        float _1521 = _1145 + _931;
        float _1522 = _1149 + _932;
        float _1532 = fma(_1522, cbModelParam._m0[30u].z, fma(_1521, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1520)) - _1489;
        float _1533 = fma(_1522, cbModelParam._m0[31u].z, fma(_1521, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1520)) - _1493;
        float _1534 = fma(_1522, cbModelParam._m0[32u].z, fma(_1521, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1520)) - _1497;
        float _1538 = inversesqrt(dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534)));
        float _1551 = ((_1538 * _1532) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1489 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1552 = ((_1538 * _1533) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1493 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1538 * _1534) / cbModelParam._m0[35u].z) + ((((((_1497 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        float _1588 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1555.x + (-0.5));
        float _1590 = _1588 * (_1555.y + (-0.5));
        float _1591 = _1588 * (_1555.z + (-0.5));
        float _1598 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1562.x + (-0.5));
        float _1600 = _1598 * (_1562.y + (-0.5));
        float _1601 = _1598 * (_1562.z + (-0.5));
        float _1608 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1569.x + (-0.5));
        float _1610 = _1608 * (_1569.y + (-0.5));
        float _1611 = _1608 * (_1569.z + (-0.5));
        float _1618 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1576.x + (-0.5));
        float _1620 = _1618 * (_1576.y + (-0.5));
        float _1621 = _1618 * (_1576.z + (-0.5));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = _1589 * 0.5;
        float _1626 = _1599 * 0.5;
        float _1627 = _1609 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_930, _931, _932), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4139 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1652 + 1.0))) + _1657) * _1622;
        float _1667 = _1590 * 0.5;
        float _1668 = _1600 * 0.5;
        float _1669 = _1610 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_930, _931, _932), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4172 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1694 + 1.0))) + _1699) * _1623;
        float _1709 = _1591 * 0.5;
        float _1710 = _1601 * 0.5;
        float _1711 = _1611 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1725 = (dot(vec3(_930, _931, _932), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4205 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1736 + 1.0))) + _1741) * _1624;
        _1758 = _1591;
        _1759 = _1590;
        _1760 = _1589;
        _1761 = _1601;
        _1762 = _1600;
        _1763 = _1599;
        _1764 = _1611;
        _1765 = _1610;
        _1766 = _1609;
        _1767 = _1624;
        _1768 = _1623;
        _1769 = _1622;
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
    }
    else
    {
        _1758 = _1451;
        _1759 = _1451;
        _1760 = _1451;
        _1761 = _1451;
        _1762 = _1451;
        _1763 = _1451;
        _1764 = _1451;
        _1765 = _1451;
        _1766 = _1451;
        _1767 = _1451;
        _1768 = _1451;
        _1769 = _1451;
        _1770 = 0.0;
        _1771 = 0.0;
        _1772 = 0.0;
    }
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1463)) + _1463;
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1464)) + _1464;
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1465)) + _1465;
    float _1805 = fma(_1784, cbSceneParam._m0[89u].z, fma(_1783, cbSceneParam._m0[89u].y, _1782 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1784, cbSceneParam._m0[90u].z, fma(_1783, cbSceneParam._m0[90u].y, _1782 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1784, cbSceneParam._m0[91u].z, fma(_1783, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1782));
    float _1826 = _1088 * 0.5;
    float _1827 = _1089 * 0.5;
    float _1828 = _1090 * 0.5;
    float _1829 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1832 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1835 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1869;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1842 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1450, _1454, _1457, _1460));
        float _1846 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1452, _1455, _1458, _1461));
        float _1850 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1453, _1456, _1459, _1462));
        float _1857 = dot(vec4(cbModelParam._m0[39u]), vec4(_1826, _1827, _1828, 1.0));
        _1869 = dot(vec3(isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1857) ? 0.0 : (isnan(0.0) ? _1857 : max(0.0, _1857))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1869 = 1.0;
    }
    float _1880;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1871 = dot(vec4(cbModelParam._m0[40u]), vec4(_1826, _1827, _1828, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1871) ? 0.0 : (isnan(0.0) ? _1871 : max(0.0, _1871))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1884 = (_1880 * cbModelParam._m0[1u].x) + (_1869 * (1.0 - cbModelParam._m0[1u].x));
    float _1894 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _933);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1894 : min(cbModelParam._m0[25u].z, _1894));
    float _1975;
    float _1977;
    float _1979;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1942 = fma(_1149, cbModelParam._m0[13u].z, fma(_1145, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1141)) + cbModelParam._m0[13u].w;
        float _1946 = fma(_1149, cbModelParam._m0[14u].z, fma(_1145, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1141)) + cbModelParam._m0[14u].w;
        float _1950 = fma(_1149, cbModelParam._m0[15u].z, fma(_1145, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1141)) + cbModelParam._m0[15u].w;
        float _1953 = fma(_1090, cbModelParam._m0[13u].z, fma(_1089, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1088));
        float _1956 = fma(_1090, cbModelParam._m0[14u].z, fma(_1089, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1088));
        float _1959 = fma(_1090, cbModelParam._m0[15u].z, fma(_1089, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1088));
        float _1987;
        if (_1953 > 0.0)
        {
            _1987 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1987 = frontier_phi_14_12_ladder;
        }
        float _2187;
        if (_1956 > 0.0)
        {
            _2187 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2187 = frontier_phi_23_19_ladder;
        }
        float _2430;
        if (_1959 > 0.0)
        {
            _2430 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2430 = frontier_phi_35_30_ladder;
        }
        float _2432 = isnan(_2187) ? _1987 : (isnan(_1987) ? _2187 : min(_1987, _2187));
        float _2433 = isnan(_2430) ? _2432 : (isnan(_2432) ? _2430 : min(_2432, _2430));
        float _2437 = (_2433 * _1953) + _1942;
        float _2438 = (_2433 * _1956) + _1946;
        float _2439 = (_2433 * _1959) + _1950;
        float _2440 = _2433 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2440;
        float _2444 = _2440 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 > _2444) || ((_2438 < _2442) || ((_2437 < _2442) || (_2437 > _2444))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2439, cbModelParam._m0[9u].z, fma(_2438, cbModelParam._m0[9u].y, _2437 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2439, cbModelParam._m0[10u].z, fma(_2438, cbModelParam._m0[10u].y, _2437 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2439, cbModelParam._m0[11u].z, fma(_2438, cbModelParam._m0[11u].y, _2437 * cbModelParam._m0[11u].x))), _1895);
            frontier_phi_13_35_ladder = _2563.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2563.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2563.x * cbModelParam._m0[1u].y;
        }
        _1975 = frontier_phi_13_35_ladder_2;
        _1977 = frontier_phi_13_35_ladder_1;
        _1979 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1963 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1088, _1089, _1090), _1895);
        _1975 = _1963.x * cbModelParam._m0[1u].y;
        _1977 = _1963.y * cbModelParam._m0[1u].y;
        _1979 = _1963.z * cbModelParam._m0[1u].y;
    }
    float _1983 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _933);
    float _1984 = isnan(_1983) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1983 : min(cbModelParam._m0[25u].w, _1983));
    float _2073;
    float _2075;
    float _2077;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2037 = fma(_1149, cbModelParam._m0[21u].z, fma(_1145, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1141)) + cbModelParam._m0[21u].w;
        float _2041 = fma(_1149, cbModelParam._m0[22u].z, fma(_1145, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1141)) + cbModelParam._m0[22u].w;
        float _2045 = fma(_1149, cbModelParam._m0[23u].z, fma(_1145, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1141)) + cbModelParam._m0[23u].w;
        float _2048 = fma(_1090, cbModelParam._m0[21u].z, fma(_1089, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1088));
        float _2051 = fma(_1090, cbModelParam._m0[22u].z, fma(_1089, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1088));
        float _2054 = fma(_1090, cbModelParam._m0[23u].z, fma(_1089, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1088));
        float _2192;
        if (_2048 > 0.0)
        {
            _2192 = abs((1.0 - _2037) / _2048);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2037 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2192 = frontier_phi_25_21_ladder;
        }
        float _2457;
        if (_2051 > 0.0)
        {
            _2457 = abs((1.0 - _2041) / _2051);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2041 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2457 = frontier_phi_37_32_ladder;
        }
        float _2662;
        if (_2054 > 0.0)
        {
            _2662 = abs((1.0 - _2045) / _2054);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2045 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2662 = frontier_phi_46_43_ladder;
        }
        float _2664 = isnan(_2457) ? _2192 : (isnan(_2192) ? _2457 : min(_2192, _2457));
        float _2665 = isnan(_2662) ? _2664 : (isnan(_2664) ? _2662 : min(_2664, _2662));
        float _2669 = (_2665 * _2048) + _2037;
        float _2670 = (_2665 * _2051) + _2041;
        float _2671 = (_2665 * _2054) + _2045;
        float _2672 = _2665 * 9.9999997473787516355514526367188e-05;
        float _2673 = (-1.0) - _2672;
        float _2675 = _2672 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2671 > _2675) || ((_2671 < _2673) || ((_2670 > _2675) || ((_2670 < _2673) || ((_2669 < _2673) || (_2669 > _2675))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2671, cbModelParam._m0[17u].z, fma(_2670, cbModelParam._m0[17u].y, _2669 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2671, cbModelParam._m0[18u].z, fma(_2670, cbModelParam._m0[18u].y, _2669 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2671, cbModelParam._m0[19u].z, fma(_2670, cbModelParam._m0[19u].y, _2669 * cbModelParam._m0[19u].x))), _1984);
            frontier_phi_22_46_ladder = _2870.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2870.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2870.x * cbModelParam._m0[1u].z;
        }
        _2073 = frontier_phi_22_46_ladder_2;
        _2075 = frontier_phi_22_46_ladder_1;
        _2077 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2057 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1088, _1089, _1090), _1984);
        _2073 = _2057.x * cbModelParam._m0[1u].z;
        _2075 = _2057.y * cbModelParam._m0[1u].z;
        _2077 = _2057.z * cbModelParam._m0[1u].z;
    }
    float _2089 = ((((1.0 - _1109) * ((_1096 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1109 * _1096)) * _1080;
    float _2090 = _2089 * ((cbModelParam._m0[1u].w * (_2073 - _1975)) + _1975);
    float _2091 = _2089 * ((cbModelParam._m0[1u].w * (_2075 - _1977)) + _1977);
    float _2092 = _2089 * ((cbModelParam._m0[1u].w * (_2077 - _1979)) + _1979);
    float _2095 = fma(_2092, cbSceneParam._m0[89u].z, fma(_2091, cbSceneParam._m0[89u].y, _2090 * cbSceneParam._m0[89u].x));
    float _2098 = fma(_2092, cbSceneParam._m0[90u].z, fma(_2091, cbSceneParam._m0[90u].y, _2090 * cbSceneParam._m0[90u].x));
    float _2101 = fma(_2092, cbSceneParam._m0[91u].z, fma(_2091, cbSceneParam._m0[91u].y, _2090 * cbSceneParam._m0[91u].x));
    uvec4 _2111 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2113 = _2111.x * 14u;
    uint _2114 = _2113 + 13u;
    float _2121 = _1080 + (-1.0);
    float _2126 = (cbLight._m0[_2114].x * _2121) + 1.0;
    float _2127 = (cbLight._m0[_2114].y * _2121) + 1.0;
    float _2128 = (cbLight._m0[_2114].z * _2121) + 1.0;
    float _2129 = (cbLight._m0[_2114].w * _2121) + 1.0;
    uint _2130 = _2113 + 5u;
    float _2136 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2140 = _2113 + 4u;
    float _2146 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2150 = _2113 | 1u;
    float _2161 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_930, _931, _932));
    float _2164 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_930, _931, _932));
    float _4341 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _4352 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2169 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.3183098733425140380859375;
    float _2171 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.3183098733425140380859375;
    float _2178 = ((cbLight._m0[_2130].x * _2136) * _2171) + ((cbLight._m0[_2140].x * _2146) * _2169);
    float _2179 = ((_2136 * cbLight._m0[_2130].y) * _2171) + ((_2146 * cbLight._m0[_2140].y) * _2169);
    float _2180 = ((_2136 * cbLight._m0[_2130].z) * _2171) + ((_2146 * cbLight._m0[_2140].z) * _2169);
    uvec4 _2184 = floatBitsToUint(cbLight._m0[_2113 + 12u]);
    bool _2186 = _2184.x == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2186)
    {
        _2197 = _2178;
        _2199 = _2179;
        _2201 = _2180;
    }
    else
    {
        uint _2205 = _2113 + 6u;
        float _2221 = (dot(vec3(cbLight._m0[_2113 + 2u].xyz), vec3(_930, _931, _932)) * 0.5) + 0.5;
        float _2222 = _2221 * _2221;
        float _4363 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2223 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2224 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2197 = (((cbLight._m0[_2205].x * 0.3183098733425140380859375) * _2223) * _2224) + _2178;
        _2199 = (((cbLight._m0[_2205].y * 0.3183098733425140380859375) * _2223) * _2224) + _2179;
        _2201 = (((cbLight._m0[_2205].z * 0.3183098733425140380859375) * _2223) * _2224) + _2180;
    }
    bool _2204 = _2184.y == 0u;
    float _2242;
    float _2244;
    float _2246;
    if (_2204)
    {
        _2242 = _2197;
        _2244 = _2199;
        _2246 = _2201;
    }
    else
    {
        uint _2401 = _2113 + 7u;
        float _2417 = (dot(vec3(cbLight._m0[_2113 + 3u].xyz), vec3(_930, _931, _932)) * 0.5) + 0.5;
        float _2418 = _2417 * _2417;
        float _4379 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2419 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2420 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2242 = (((cbLight._m0[_2401].x * 0.3183098733425140380859375) * _2419) * _2420) + _2197;
        _2244 = (((cbLight._m0[_2401].y * 0.3183098733425140380859375) * _2419) * _2420) + _2199;
        _2246 = (((cbLight._m0[_2401].z * 0.3183098733425140380859375) * _2419) * _2420) + _2201;
    }
    uint _2249 = _2113 + 8u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _933) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2113].x + _1009;
    float _2265 = cbLight._m0[_2113].y + _1010;
    float _2266 = cbLight._m0[_2113].z + _1011;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2113].xyz));
    float _4395 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _4406 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _2278 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2279 = dot(vec3(_930, _931, _932), vec3(_2271, _2272, _2273));
    float _4417 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2271, _2272, _2273));
    float _4428 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2263 * _2263;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2302 = (exp2(log2(1.0 - (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2303 = 1.0 - _2263;
    float _2314 = (0.5 / (((_2278 * ((_2277 * _2303) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2303) + _2263) * _2277))) * _2277;
    float _4439 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2316 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    uint _2327 = _2113 + 9u;
    float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _933) * 0.949999988079071044921875);
    float _2339 = _2338 * _2338;
    float _2340 = cbLight._m0[_2150].x + _1009;
    float _2341 = cbLight._m0[_2150].y + _1010;
    float _2342 = cbLight._m0[_2150].z + _1011;
    float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
    float _2347 = _2346 * _2340;
    float _2348 = _2346 * _2341;
    float _2349 = _2346 * _2342;
    float _2350 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2150].xyz));
    float _4450 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2354 = dot(vec3(_930, _931, _932), vec3(_2347, _2348, _2349));
    float _4461 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2358 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2347, _2348, _2349));
    float _4472 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2362 = _2339 * _2339;
    float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
    float _2375 = (exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2376 = 1.0 - _2339;
    float _2386 = (0.5 / (((_2278 * ((_2353 * _2376) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2376) + _2339) * _2353))) * _2353;
    float _4483 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2388 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
    float _2398 = (((_2375 * cbLight._m0[_2327].x) * _2388) * _2136) + (((_2302 * cbLight._m0[_2249].x) * _2316) * _2146);
    float _2399 = (((_2375 * cbLight._m0[_2327].y) * _2388) * _2136) + (((_2302 * cbLight._m0[_2249].y) * _2316) * _2146);
    float _2400 = (((_2375 * cbLight._m0[_2327].z) * _2388) * _2136) + (((_2302 * cbLight._m0[_2249].z) * _2316) * _2146);
    float _2462;
    float _2464;
    float _2466;
    if (_2186)
    {
        _2462 = _2398;
        _2464 = _2399;
        _2466 = _2400;
    }
    else
    {
        uint _2468 = _2113 + 2u;
        uint _2472 = _2113 + 10u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _933) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _1009;
        float _2489 = cbLight._m0[_2468].y + _1010;
        float _2490 = cbLight._m0[_2468].z + _1011;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2468].xyz));
        float _4494 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2502 = dot(vec3(_930, _931, _932), vec3(_2495, _2496, _2497));
        float _4505 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4516 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2523 = (exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2524 = 1.0 - _2487;
        float _2534 = (0.5 / (((_2278 * ((_2501 * _2524) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2524) + _2487) * _2501))) * _2501;
        float _4527 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2462 = (((_2523 * cbLight._m0[_2472].x) * _2536) * _2537) + _2398;
        _2464 = (((_2523 * cbLight._m0[_2472].y) * _2536) * _2537) + _2399;
        _2466 = (((_2523 * cbLight._m0[_2472].z) * _2536) * _2537) + _2400;
    }
    float _2572;
    float _2574;
    float _2576;
    if (_2204)
    {
        _2572 = _2462;
        _2574 = _2464;
        _2576 = _2466;
    }
    else
    {
        uint _2583 = _2113 + 3u;
        uint _2587 = _2113 + 11u;
        float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2583].w)) * _933) * 0.949999988079071044921875);
        float _2602 = _2601 * _2601;
        float _2603 = cbLight._m0[_2583].x + _1009;
        float _2604 = cbLight._m0[_2583].y + _1010;
        float _2605 = cbLight._m0[_2583].z + _1011;
        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
        float _2610 = _2609 * _2603;
        float _2611 = _2609 * _2604;
        float _2612 = _2609 * _2605;
        float _2613 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2583].xyz));
        float _4543 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2617 = dot(vec3(_930, _931, _932), vec3(_2610, _2611, _2612));
        float _4554 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2621 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_2610, _2611, _2612));
        float _4565 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2625 = _2602 * _2602;
        float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
        float _2638 = (exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2639 = 1.0 - _2602;
        float _2649 = (0.5 / (((_2278 * ((_2616 * _2639) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2639) + _2602) * _2616))) * _2616;
        float _4576 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2651 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
        float _2652 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2572 = (((_2638 * cbLight._m0[_2587].x) * _2651) * _2652) + _2462;
        _2574 = (((_2638 * cbLight._m0[_2587].y) * _2651) * _2652) + _2464;
        _2576 = (((_2638 * cbLight._m0[_2587].z) * _2651) * _2652) + _2466;
    }
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_2111.y == 0u)
    {
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2727;
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2727;
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2727;
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.x;
        uint _2754 = uint((float(_2742.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1018) / _2743))) + floor(float(uint(cbSceneParam._m0[85u].x * _1017) / _2743)));
        float _2764 = (log2(_2730 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2765 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        uint _2768 = uint(isnan(14.0) ? _2765 : (isnan(_2765) ? 14.0 : min(_2765, 14.0)));
        uvec4 _2773 = texelFetch(g_lightClusterGridBuffer, int(((_2768 << 2u) + (_2754 << 6u)) >> 2u));
        uint _2774 = _2773.x;
        uint _2775 = _2742.z;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((((1u << ((_2775 >> 4u) & 15u)) + 4294967295u) & _2774) == 0u) || ((_2775 & 240u) == 0u))
        {
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
        }
        else
        {
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            uint _3026 = 0u;
            uint _3035;
            bool _3036;
            for (;;)
            {
                _3035 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3026 << 2u)) >> 2u)).x;
                _3036 = _3035 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3036)
                {
                    frontier_phi_61_pred = _3020;
                    frontier_phi_61_pred_1 = _3025;
                    frontier_phi_61_pred_2 = _3024;
                    frontier_phi_61_pred_3 = _3023;
                    frontier_phi_61_pred_4 = _3022;
                    frontier_phi_61_pred_5 = _3021;
                }
                else
                {
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    uint _3150;
                    _3144 = _3020;
                    _3145 = _3021;
                    _3146 = _3022;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3035;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    for (;;)
                    {
                        uint _3154 = uint(findLSB(_3150)) + (_3026 << 5u);
                        uint _3151 = (_3150 + 4294967295u) & _3150;
                        uint _3156 = _3154 * 48u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3176 = (_3154 * 48u) + 4u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3195 = (_3154 * 48u) + 8u;
                        vec3 _3206 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x));
                        float _3210 = _3170.x - _2728;
                        float _3211 = _3170.y - _2729;
                        float _3212 = _3170.z - _2730;
                        float _3213 = dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212));
                        float _3216 = inversesqrt(_3213);
                        float _3217 = _3216 * _3210;
                        float _3218 = _3216 * _3211;
                        float _3219 = _3216 * _3212;
                        float _3220 = dot(vec3(_1036, _1039, _1042), vec3(_3217, _3218, _3219));
                        float _3225 = 1.0 - (_3213 * _3170.w);
                        float _4602 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3227 = sqrt(_3213) * _3189.w;
                        float _3230 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                        float _3231 = _3230 * _3230;
                        float _3234 = ((1.0 - _3231) * _3220) + _3231;
                        float _3237 = _3227 * _3227;
                        float _3241 = ((isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))) * _3226) / ((_3237 * 0.699999988079071044921875) + 1.0);
                        float _3245 = (-0.0) - _2728;
                        float _3246 = (-0.0) - _2729;
                        float _3247 = (-0.0) - _2730;
                        float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                        float _3252 = _3251 * _3245;
                        float _3253 = _3251 * _3246;
                        float _3254 = _3251 * _3247;
                        float _3262 = exp2(log2(1.0 / ((_3237 * 3.5) + 5.0)) * 0.25);
                        float _3263 = 1.0 - _1096;
                        float _3270 = sqrt(1.0 - ((1.0 - (_3263 * _3263)) * (1.0 - (_3262 * _3262))));
                        float _3271 = _3270 * _3270;
                        float _3272 = _3271 * _3271;
                        float _3273 = _3252 + _3217;
                        float _3274 = _3253 + _3218;
                        float _3275 = _3254 + _3219;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3283 = dot(vec3(_1036, _1039, _1042), vec3(_3252, _3253, _3254));
                        float _4618 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3287 = dot(vec3(_1036, _1039, _1042), vec3(_3279 * _3273, _3279 * _3274, _3279 * _3275));
                        float _4629 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3290 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3294 = ((_3290 * _3290) * (_3272 + (-1.0))) + 1.0;
                        float _3295 = _3230 * _3271;
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3220) + _3296;
                        float _4640 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3300 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3301 = 1.0 - _3271;
                        float _3311 = (0.5 / (((_3300 * ((_3286 * _3301) + _3271)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3271) * _3286))) * _3300;
                        float _4651 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3322 = (((_3272 * 3.1415927410125732421875) * (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) / ((_3294 * _3294) * ((_3237 * 2.1991131305694580078125) + 3.141590118408203125))) * _3226;
                        _3079 = (_3241 * _3189.x) + _3147;
                        _3080 = (_3241 * _3189.y) + _3148;
                        _3081 = (_3241 * _3189.z) + _3149;
                        _3076 = (_3322 * _3206.x) + _3144;
                        _3077 = (_3322 * _3206.y) + _3145;
                        _3078 = (_3322 * _3206.z) + _3146;
                        if (_3151 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3144 = _3076;
                            _3145 = _3077;
                            _3146 = _3078;
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3151;
                        }
                    }
                    frontier_phi_61_pred = _3076;
                    frontier_phi_61_pred_1 = _3081;
                    frontier_phi_61_pred_2 = _3080;
                    frontier_phi_61_pred_3 = _3079;
                    frontier_phi_61_pred_4 = _3078;
                    frontier_phi_61_pred_5 = _3077;
                }
                _2876 = frontier_phi_61_pred;
                _2886 = frontier_phi_61_pred_1;
                _2884 = frontier_phi_61_pred_2;
                _2882 = frontier_phi_61_pred_3;
                _2880 = frontier_phi_61_pred_4;
                _2878 = frontier_phi_61_pred_5;
                uint _3027 = _3026 + 1u;
                if (_3027 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3020 = _2876;
                    _3021 = _2878;
                    _3022 = _2880;
                    _3023 = _2882;
                    _3024 = _2884;
                    _3025 = _2886;
                    _3026 = _3027;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
        }
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.z;
        uint _2892 = (_2890 >> 8u) & 15u;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        if (((4294967295u << _2892) & _2774) == 0u)
        {
            _2988 = _2875;
            _2990 = _2877;
            _2992 = _2879;
            _2994 = _2881;
            _2996 = _2883;
            _2998 = _2885;
        }
        else
        {
            float _3013 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
            float _3014 = _3013 * _2728;
            float _3015 = _3013 * _2729;
            float _3016 = _3013 * _2730;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2892 < ((_2890 >> 12u) & 15u))
            {
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3127 = _2875;
                float _3128 = _2877;
                float _3129 = _2879;
                float _3130 = _2881;
                float _3131 = _2883;
                float _3132 = _2885;
                uint _3133 = _2892;
                uint _3142;
                bool _3143;
                for (;;)
                {
                    _3142 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                    _3143 = _3142 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3143)
                    {
                        frontier_phi_67_pred = _3130;
                        frontier_phi_67_pred_1 = _3131;
                        frontier_phi_67_pred_2 = _3132;
                        frontier_phi_67_pred_3 = _3129;
                        frontier_phi_67_pred_4 = _3128;
                        frontier_phi_67_pred_5 = _3127;
                    }
                    else
                    {
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3340 = _3127;
                        float _3341 = _3128;
                        float _3342 = _3129;
                        float _3343 = _3130;
                        float _3344 = _3131;
                        float _3345 = _3132;
                        uint _3346 = _3142;
                        uint _3347;
                        vec4 _3372;
                        float _3373;
                        vec4 _3388;
                        vec3 _3400;
                        vec4 _3415;
                        vec4 _3430;
                        float _3476;
                        bool _3477;
                        for (;;)
                        {
                            uint _3357 = ((_3133 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3346));
                            _3347 = (_3346 + 4294967295u) & _3346;
                            uint _3359 = _3357 * 40u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3373 = _3372.w;
                            uint _3375 = (_3357 * 40u) + 4u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3390 = (_3357 * 40u) + 8u;
                            _3400 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x));
                            uint _3402 = (_3357 * 40u) + 16u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3417 = (_3357 * 40u) + 20u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3357 * 40u) + 24u;
                            vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3451 = (_3357 * 40u) + 28u;
                            vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            _3476 = fma(_2730, _3464.z, fma(_2729, _3464.y, _3464.x * _2728)) + _3464.w;
                            _3477 = !((fma(_2730, _3445.z, fma(_2729, _3445.y, _3445.x * _2728)) + _3445.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3477)
                            {
                                float _3504 = _3372.x - _2728;
                                float _3505 = _3372.y - _2729;
                                float _3506 = _3372.z - _2730;
                                float _3507 = dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506));
                                float _3510 = inversesqrt(_3507);
                                float _3511 = _3510 * _3504;
                                float _3512 = _3510 * _3505;
                                float _3513 = _3510 * _3506;
                                float _3517 = 1.0 - (_3507 / (_3373 * _3373));
                                float _4662 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3522 = sqrt(_3507) * _3388.w;
                                float _3524 = 1.39999997615814208984375 / (_3522 + 1.39999997615814208984375);
                                float _3525 = _3524 * _3524;
                                float _3528 = ((1.0 - _3525) * dot(vec3(_3511, _3512, _3513), vec3(_1036, _1039, _1042))) + _3525;
                                float _3531 = _3522 * _3522;
                                float _3535 = (fma(_2730, _3415.z, fma(_2729, _3415.y, _3415.x * _2728)) + _3415.w) / _3476;
                                float _3536 = (fma(_2730, _3430.z, fma(_2729, _3430.y, _3430.x * _2728)) + _3430.w) / _3476;
                                float _3540 = 1.0 - dot(vec2(_3535, _3536), vec2(_3535, _3536));
                                float _4678 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3542 = _3541 * (((isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0))) * _3518) / ((_3531 * 0.699999988079071044921875) + 1.0));
                                float _3554 = exp2(log2(1.0 / ((_3531 * 3.5) + 5.0)) * 0.25);
                                float _3555 = 1.0 - _1096;
                                float _3562 = sqrt(1.0 - ((1.0 - (_3555 * _3555)) * (1.0 - (_3554 * _3554))));
                                float _3563 = _3562 * _3562;
                                float _3564 = _3563 * _3563;
                                float _3565 = _3511 - _3014;
                                float _3566 = _3512 - _3015;
                                float _3567 = _3513 - _3016;
                                float _3571 = inversesqrt(dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567)));
                                float _3575 = dot(vec3(_1036, _1039, _1042), vec3((-0.0) - _3014, (-0.0) - _3015, (-0.0) - _3016));
                                float _4689 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3578 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3579 = dot(vec3(_1036, _1039, _1042), vec3(_3571 * _3565, _3571 * _3566, _3571 * _3567));
                                float _4700 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3582 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3586 = ((_3582 * _3582) * (_3564 + (-1.0))) + 1.0;
                                float _3587 = _3524 * _3563;
                                float _3588 = _3587 * _3587;
                                float _3594 = ((1.0 - _3588) * dot(vec3(_1036, _1039, _1042), vec3(_3511, _3512, _3513))) + _3588;
                                float _4711 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3596 = 1.0 - _3563;
                                float _3606 = (0.5 / (((_3595 * ((_3578 * _3596) + _3563)) + 9.9999999392252902907785028219223e-09) + (((_3595 * _3596) + _3563) * _3578))) * _3595;
                                float _4722 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3616 = (_3541 * _3518) * (((_3564 * 3.1415927410125732421875) * (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) / ((_3586 * _3586) * ((_3531 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3616 * _3400.x;
                                frontier_phi_73_pred_1 = _3616 * _3400.y;
                                frontier_phi_73_pred_2 = _3542 * _3388.z;
                                frontier_phi_73_pred_3 = _3542 * _3388.y;
                                frontier_phi_73_pred_4 = _3542 * _3388.x;
                                frontier_phi_73_pred_5 = _3616 * _3400.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3620 = frontier_phi_73_pred;
                            _3621 = frontier_phi_73_pred_1;
                            _3625 = frontier_phi_73_pred_2;
                            _3624 = frontier_phi_73_pred_3;
                            _3623 = frontier_phi_73_pred_4;
                            _3622 = frontier_phi_73_pred_5;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            _3327 = _3620 + _3340;
                            _3328 = _3621 + _3341;
                            _3329 = _3622 + _3342;
                            if (_3347 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3347;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3330;
                        frontier_phi_67_pred_1 = _3331;
                        frontier_phi_67_pred_2 = _3332;
                        frontier_phi_67_pred_3 = _3329;
                        frontier_phi_67_pred_4 = _3328;
                        frontier_phi_67_pred_5 = _3327;
                    }
                    _2995 = frontier_phi_67_pred;
                    _2997 = frontier_phi_67_pred_1;
                    _2999 = frontier_phi_67_pred_2;
                    _2993 = frontier_phi_67_pred_3;
                    _2991 = frontier_phi_67_pred_4;
                    _2989 = frontier_phi_67_pred_5;
                    uint _3134 = _3133 + 1u;
                    if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3127 = _2989;
                        _3128 = _2991;
                        _3129 = _2993;
                        _3130 = _2995;
                        _3131 = _2997;
                        _3132 = _2999;
                        _3133 = _3134;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2997;
                frontier_phi_55_56_ladder_1 = _2999;
                frontier_phi_55_56_ladder_2 = _2995;
                frontier_phi_55_56_ladder_3 = _2993;
                frontier_phi_55_56_ladder_4 = _2991;
                frontier_phi_55_56_ladder_5 = _2989;
            }
            else
            {
                frontier_phi_55_56_ladder = _2883;
                frontier_phi_55_56_ladder_1 = _2885;
                frontier_phi_55_56_ladder_2 = _2881;
                frontier_phi_55_56_ladder_3 = _2879;
                frontier_phi_55_56_ladder_4 = _2877;
                frontier_phi_55_56_ladder_5 = _2875;
            }
            _2988 = frontier_phi_55_56_ladder_5;
            _2990 = frontier_phi_55_56_ladder_4;
            _2992 = frontier_phi_55_56_ladder_3;
            _2994 = frontier_phi_55_56_ladder_2;
            _2996 = frontier_phi_55_56_ladder;
            _2998 = frontier_phi_55_56_ladder_1;
        }
        float _3003 = isnan(1.0) ? _1080 : (isnan(_1080) ? 1.0 : min(_1080, 1.0));
        _2787 = (_3003 * _2994) + _2242;
        _2789 = (_3003 * _2996) + _2244;
        _2791 = (_3003 * _2998) + _2246;
        _2793 = ((_2988 * 0.039999999105930328369140625) * _3003) + _2572;
        _2795 = ((_2990 * 0.039999999105930328369140625) * _3003) + _2574;
        _2797 = ((_2992 * 0.039999999105930328369140625) * _3003) + _2576;
    }
    else
    {
        _2787 = _2242;
        _2789 = _2244;
        _2791 = _2246;
        _2793 = _2572;
        _2795 = _2574;
        _2797 = _2576;
    }
    float _4738 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _4749 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _4760 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    uint _2817 = _283 + 6u;
    float _2825 = _1017 / cbSceneParam._m0[86u].x;
    float _2826 = _1018 / cbSceneParam._m0[86u].y;
    vec4 _2840 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, (log2((isnan(cbSceneParam._m0[77u].w) ? _951 : (isnan(_951) ? cbSceneParam._m0[77u].w : min(_951, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2842 = _2840.x;
    float _2843 = _2840.y;
    float _2844 = _2840.z;
    float _2845 = _2840.w;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_951 > cbSceneParam._m0[78u].w)
    {
        float _2900 = isnan(_951) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _951 : min(cbSceneParam._m0[80u].w, _951));
        float _2901 = _2900 / _951;
        float _2912 = _2901 * _1002;
        float _2913 = _1003 * _2901;
        float _2914 = (-0.0) - _2913;
        float _2916 = _2901 * _1004;
        float _2918 = (cbSceneParam._m0[77u].w * _2914) / _2900;
        float _2919 = _2918 + cbSceneParam._m0[79u].w;
        float _2920 = cbSceneParam._m0[79u].w - _2913;
        float _2926 = sqrt(((_2912 * _2912) + (_2913 * _2913)) + (_2916 * _2916));
        float _2929 = (1.0 - (cbSceneParam._m0[77u].w / _2900)) * _2926;
        float _2934 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2936 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3089;
        if (abs((_2914 - _2918) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3089 = ((((_2919 > 0.0) ? exp2(_2934 * _2919) : (2.0 - exp2(_2936 * _2919))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2929;
        }
        else
        {
            float _3049 = 1.0 / cbSceneParam._m0[80u].x;
            float _3050 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : max(_2919, _2920));
            float _3051 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : min(_2919, _2920));
            float _3060 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : min(_3050, 0.0));
            float _3061 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : min(_3051, 0.0));
            _3089 = ((abs(_2926 / _2914) * cbSceneParam._m0[80u].y) * ((((_3060 - _3061) * 2.0) - ((exp2(_2934 * (isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0)))) - exp2(_2934 * (isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))))) * _3049)) - ((exp2(_2936 * _3060) - exp2(_2936 * _3061)) * _3049))) + (_2929 * cbSceneParam._m0[80u].z);
        }
        vec4 _3091 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, 1.0), 0.0);
        float _3100 = exp2((_3089 * (-1.44269502162933349609375)) * (1.0 - _3091.w));
        float _3101 = log2(_3100);
        float _3117 = log2(_2845);
        _2938 = (exp2(_3117 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].x)) * _3091.x) / cbSceneParam._m0[78u].x)) + _2842;
        _2940 = (exp2(_3117 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].y)) * _3091.y) / cbSceneParam._m0[78u].y)) + _2843;
        _2942 = (exp2(_3117 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].z)) * _3091.z) / cbSceneParam._m0[78u].z)) + _2844;
        _2944 = _3100 * _2845;
    }
    else
    {
        _2938 = _2842;
        _2940 = _2843;
        _2942 = _2844;
        _2944 = _2845;
    }
    float _2956 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2957 = _2956 == 3.0;
    float _2958 = log2(_2944);
    float _2965 = exp2(_2958 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2787 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1080))) + ((_2793 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1884)) * cbPerFrame._m0[3u].x));
    float _2966 = exp2(_2958 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2789 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1080))) + ((_2795 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1884)) * cbPerFrame._m0[3u].x));
    float _2967 = exp2(_2958 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2791 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1080))) + ((_2797 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1884)) * cbPerFrame._m0[3u].x));
    float _2976 = (_2956 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2976 * (_2957 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2938)));
    SV_Target.y = _2976 * (_2957 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2940)));
    SV_Target.z = _2976 * (_2957 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2942)));
    SV_Target.w = cbInstanceData._m0[_2817].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2817].w;
}


