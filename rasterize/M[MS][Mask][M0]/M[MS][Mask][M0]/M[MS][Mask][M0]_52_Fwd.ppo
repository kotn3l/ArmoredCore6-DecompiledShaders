#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1152;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _296.x * cbMtdParam._m0[11u].x;
    float _302 = _296.y * cbMtdParam._m0[11u].y;
    float _303 = _296.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _393 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _342.x) * 2.0) - ((((_381 - _393) * cbMtdParam._m0[24u].z) + _393) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3459 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _418 = (_411 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _419 = (_411 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _420 = (_411 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _437 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _252) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _253) + cbTextureTilingScale._m0[3u].w));
    vec4 _457 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _459 = _457.x;
    float _469 = dot(vec4(_459, _457.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _483 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _342.y) * 2.0) - ((((_459 - _469) * cbMtdParam._m0[24u].z) + _469) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3470 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _497 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _272.x) * ((_484 * ((_437.x * cbMtdParam._m0[13u].x) - _418)) + _418);
    float _500 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _272.y) * ((_484 * ((_437.y * cbMtdParam._m0[13u].y) - _419)) + _419);
    float _503 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _272.z) * ((_484 * ((_437.z * cbMtdParam._m0[13u].z) - _420)) + _420);
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _533 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _535 = _533.x;
    float _536 = _533.y;
    float _537 = _533.z;
    float _544 = ((_516.x - _535) * _411) + _535;
    float _545 = ((_516.y - _536) * _411) + _536;
    float _546 = ((_516.z - _537) * _411) + _537;
    vec4 _558 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _252) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _253) + cbTextureTilingScale._m0[2u].w));
    float _571 = ((_558.z - _546) * _484) + _546;
    float _574 = ((((_558.x - _544) * _484) + _544) * 2.0) + (-1.0);
    float _576 = ((((_558.y - _545) * _484) + _545) * 2.0) + (-1.0);
    float _577 = dot(vec2(_574, _576), vec2(_574, _576));
    float _3481 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _582 = sqrt(1.0 - (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _608 = (((_596.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _574;
    float _609 = (((_596.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _576;
    float _613 = (cbMtdParam._m0[19u].w * (_596.z - _571)) + _571;
    float _617 = cbMtdParam._m0[22u].x + _596.w;
    float _620 = fma(_582, _219 * NORMAL.x, fma(_609, _226 * TANGENT.x, (_212 * _204) * _608));
    float _623 = fma(_582, _219 * NORMAL.y, fma(_609, _226 * TANGENT.y, (_212 * _205) * _608));
    float _626 = fma(_582, _219 * NORMAL.z, fma(_609, _226 * TANGENT.z, (_212 * _206) * _608));
    float _630 = inversesqrt(dot(vec3(_620, _623, _626), vec3(_620, _623, _626)));
    float _631 = _630 * _620;
    float _632 = _630 * _623;
    float _633 = _630 * _626;
    float _3492 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _634 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _3503 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3514 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3525 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3536 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _652 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _703 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _693);
    float _704 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _693);
    float _705 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _693);
    float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
    float _710 = _703 * _709;
    float _711 = _704 * _709;
    float _712 = _705 * _709;
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _737 = fma(_633, cbSceneParam._m0[5u].z, fma(_632, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _631));
    float _740 = fma(_633, cbSceneParam._m0[6u].z, fma(_632, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _631));
    float _743 = fma(_633, cbSceneParam._m0[7u].z, fma(_632, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _631));
    uint _757 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _763 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * cbInstanceData._m0[_757].x;
    float _764 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) * cbInstanceData._m0[_757].y;
    float _765 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) * cbInstanceData._m0[_757].z;
    float _3547 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    vec4 _777 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _781 = ((isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * TEXCOORD_5.w) * _777.x;
    float _782 = dot(vec3(_631, _632, _633), vec3(_710, _711, _712));
    float _785 = _782 * 2.0;
    float _789 = (_785 * _631) - _710;
    float _790 = (_785 * _632) - _711;
    float _791 = (_785 * _633) - _712;
    float _795 = abs(dot(vec3(_710, _711, _712), vec3(_631, _632, _633)));
    float _3580 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _797 = sqrt(_634);
    float _810 = exp2((_797 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_797 * 3.0));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1151;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _876 = fma(_850, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842));
        float _880 = fma(_850, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842));
        float _884 = fma(_850, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842));
        float _909 = _842 + _631;
        float _910 = _846 + _632;
        float _911 = _850 + _633;
        float _921 = fma(_911, cbModelParam._m0[26u].z, fma(_910, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _909)) - _876;
        float _922 = fma(_911, cbModelParam._m0[27u].z, fma(_910, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _909)) - _880;
        float _923 = fma(_911, cbModelParam._m0[28u].z, fma(_910, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _909)) - _884;
        float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
        float _940 = ((_927 * _921) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_876 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_927 * _922) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_880 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_927 * _923) / cbModelParam._m0[34u].z) + ((((((_884 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        float _979 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_945.x + (-0.5));
        float _981 = _979 * (_945.y + (-0.5));
        float _982 = _979 * (_945.z + (-0.5));
        float _989 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_952.x + (-0.5));
        float _991 = _989 * (_952.y + (-0.5));
        float _992 = _989 * (_952.z + (-0.5));
        float _999 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_959.x + (-0.5));
        float _1001 = _999 * (_959.y + (-0.5));
        float _1002 = _999 * (_959.z + (-0.5));
        float _1009 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_966.x + (-0.5));
        float _1011 = _1009 * (_966.y + (-0.5));
        float _1012 = _1009 * (_966.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = _980 * 0.5;
        float _1017 = _990 * 0.5;
        float _1018 = _1000 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1033 = (dot(vec3(_631, _632, _633), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1043 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3628 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1045 + 1.0))) + _1050) * _1013;
        float _1060 = _981 * 0.5;
        float _1061 = _991 * 0.5;
        float _1062 = _1001 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_631, _632, _633), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3661 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1087 + 1.0))) + _1092) * _1014;
        float _1102 = _982 * 0.5;
        float _1103 = _992 * 0.5;
        float _1104 = _1002 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_631, _632, _633), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3694 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1129 + 1.0))) + _1134) * _1015;
        _1151 = _982;
        _1153 = _981;
        _1154 = _980;
        _1155 = _992;
        _1156 = _991;
        _1157 = _990;
        _1158 = _1002;
        _1159 = _1001;
        _1160 = _1000;
        _1161 = _1015;
        _1162 = _1014;
        _1163 = _1013;
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
    }
    else
    {
        _1151 = _1152;
        _1153 = _1152;
        _1154 = _1152;
        _1155 = _1152;
        _1156 = _1152;
        _1157 = _1152;
        _1158 = _1152;
        _1159 = _1152;
        _1160 = _1152;
        _1161 = _1152;
        _1162 = _1152;
        _1163 = _1152;
        _1164 = 0.0;
        _1165 = 0.0;
        _1166 = 0.0;
    }
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1190 = fma(_850, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842));
        float _1194 = fma(_850, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842));
        float _1198 = fma(_850, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842));
        float _1221 = _842 + _631;
        float _1222 = _846 + _632;
        float _1223 = _850 + _633;
        float _1233 = fma(_1223, cbModelParam._m0[30u].z, fma(_1222, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1221)) - _1190;
        float _1234 = fma(_1223, cbModelParam._m0[31u].z, fma(_1222, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1221)) - _1194;
        float _1235 = fma(_1223, cbModelParam._m0[32u].z, fma(_1222, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1221)) - _1198;
        float _1239 = inversesqrt(dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235)));
        float _1252 = ((_1239 * _1233) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1190 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1239 * _1234) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1194 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1239 * _1235) / cbModelParam._m0[35u].z) + ((((((_1198 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        float _1289 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1256.x + (-0.5));
        float _1291 = _1289 * (_1256.y + (-0.5));
        float _1292 = _1289 * (_1256.z + (-0.5));
        float _1299 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1263.x + (-0.5));
        float _1301 = _1299 * (_1263.y + (-0.5));
        float _1302 = _1299 * (_1263.z + (-0.5));
        float _1309 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1270.x + (-0.5));
        float _1311 = _1309 * (_1270.y + (-0.5));
        float _1312 = _1309 * (_1270.z + (-0.5));
        float _1319 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1277.x + (-0.5));
        float _1321 = _1319 * (_1277.y + (-0.5));
        float _1322 = _1319 * (_1277.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_631, _632, _633), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3757 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1353 + 1.0))) + _1358) * _1323;
        float _1368 = _1291 * 0.5;
        float _1369 = _1301 * 0.5;
        float _1370 = _1311 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_631, _632, _633), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3790 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1395 + 1.0))) + _1400) * _1324;
        float _1410 = _1292 * 0.5;
        float _1411 = _1302 * 0.5;
        float _1412 = _1312 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_631, _632, _633), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3823 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1437 + 1.0))) + _1442) * _1325;
        _1459 = _1292;
        _1460 = _1291;
        _1461 = _1290;
        _1462 = _1302;
        _1463 = _1301;
        _1464 = _1300;
        _1465 = _1312;
        _1466 = _1311;
        _1467 = _1310;
        _1468 = _1325;
        _1469 = _1324;
        _1470 = _1323;
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
    }
    else
    {
        _1459 = _1152;
        _1460 = _1152;
        _1461 = _1152;
        _1462 = _1152;
        _1463 = _1152;
        _1464 = _1152;
        _1465 = _1152;
        _1466 = _1152;
        _1467 = _1152;
        _1468 = _1152;
        _1469 = _1152;
        _1470 = _1152;
        _1471 = 0.0;
        _1472 = 0.0;
        _1473 = 0.0;
    }
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1164)) + _1164;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1165)) + _1165;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1166)) + _1166;
    float _1506 = fma(_1485, cbSceneParam._m0[89u].z, fma(_1484, cbSceneParam._m0[89u].y, _1483 * cbSceneParam._m0[89u].x));
    float _1509 = fma(_1485, cbSceneParam._m0[90u].z, fma(_1484, cbSceneParam._m0[90u].y, _1483 * cbSceneParam._m0[90u].x));
    float _1512 = fma(_1485, cbSceneParam._m0[91u].z, fma(_1484, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1483));
    float _1527 = _789 * 0.5;
    float _1528 = _790 * 0.5;
    float _1529 = _791 * 0.5;
    float _1530 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1533 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1536 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1570;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1543 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1151, _1155, _1158, _1161));
        float _1547 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1153, _1156, _1159, _1162));
        float _1551 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1558 = dot(vec4(cbModelParam._m0[39u]), vec4(_1527, _1528, _1529, 1.0));
        _1570 = dot(vec3(isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1558) ? 0.0 : (isnan(0.0) ? _1558 : max(0.0, _1558))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1570 = 1.0;
    }
    float _1581;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1572 = dot(vec4(cbModelParam._m0[40u]), vec4(_1527, _1528, _1529, 1.0));
        _1581 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1572) ? 0.0 : (isnan(0.0) ? _1572 : max(0.0, _1572))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1581 = 1.0;
    }
    float _1585 = (_1581 * cbModelParam._m0[1u].x) + (_1570 * (1.0 - cbModelParam._m0[1u].x));
    float _1595 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _634);
    float _1596 = isnan(_1595) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1595 : min(cbModelParam._m0[25u].z, _1595));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1645 = fma(_850, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842)) + cbModelParam._m0[13u].w;
        float _1649 = fma(_850, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842)) + cbModelParam._m0[14u].w;
        float _1653 = fma(_850, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842)) + cbModelParam._m0[15u].w;
        float _1656 = fma(_791, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789));
        float _1659 = fma(_791, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789));
        float _1662 = fma(_791, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789));
        float _1690;
        if (_1656 > 0.0)
        {
            _1690 = abs((1.0 - _1645) / _1656);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1645 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1690 = frontier_phi_14_12_ladder;
        }
        float _1892;
        if (_1659 > 0.0)
        {
            _1892 = abs((1.0 - _1649) / _1659);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1649 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1892 = frontier_phi_23_19_ladder;
        }
        float _2135;
        if (_1662 > 0.0)
        {
            _2135 = abs((1.0 - _1653) / _1662);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1653 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2135 = frontier_phi_35_30_ladder;
        }
        float _2137 = isnan(_1892) ? _1690 : (isnan(_1690) ? _1892 : min(_1690, _1892));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1656) + _1645;
        float _2143 = (_2138 * _1659) + _1649;
        float _2144 = (_2138 * _1662) + _1653;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2145;
        float _2149 = _2145 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 > _2149) || ((_2143 < _2147) || ((_2142 < _2147) || (_2142 > _2149))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2268 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2144, cbModelParam._m0[9u].z, fma(_2143, cbModelParam._m0[9u].y, _2142 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2144, cbModelParam._m0[10u].z, fma(_2143, cbModelParam._m0[10u].y, _2142 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2144, cbModelParam._m0[11u].z, fma(_2143, cbModelParam._m0[11u].y, _2142 * cbModelParam._m0[11u].x))), _1596);
            frontier_phi_13_35_ladder = _2268.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2268.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2268.x * cbModelParam._m0[1u].y;
        }
        _1678 = frontier_phi_13_35_ladder_2;
        _1680 = frontier_phi_13_35_ladder_1;
        _1682 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_789, _790, _791), _1596);
        _1678 = _1666.x * cbModelParam._m0[1u].y;
        _1680 = _1666.y * cbModelParam._m0[1u].y;
        _1682 = _1666.z * cbModelParam._m0[1u].y;
    }
    float _1686 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _634);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1686 : min(cbModelParam._m0[25u].w, _1686));
    float _1778;
    float _1780;
    float _1782;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1742 = fma(_850, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842)) + cbModelParam._m0[21u].w;
        float _1746 = fma(_850, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842)) + cbModelParam._m0[22u].w;
        float _1750 = fma(_850, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842)) + cbModelParam._m0[23u].w;
        float _1753 = fma(_791, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789));
        float _1756 = fma(_791, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789));
        float _1759 = fma(_791, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789));
        float _1897;
        if (_1753 > 0.0)
        {
            _1897 = abs((1.0 - _1742) / _1753);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1742 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1897 = frontier_phi_25_21_ladder;
        }
        float _2162;
        if (_1756 > 0.0)
        {
            _2162 = abs((1.0 - _1746) / _1756);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1746 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2162 = frontier_phi_37_32_ladder;
        }
        float _2367;
        if (_1759 > 0.0)
        {
            _2367 = abs((1.0 - _1750) / _1759);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1750 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2367 = frontier_phi_46_43_ladder;
        }
        float _2369 = isnan(_2162) ? _1897 : (isnan(_1897) ? _2162 : min(_1897, _2162));
        float _2370 = isnan(_2367) ? _2369 : (isnan(_2369) ? _2367 : min(_2369, _2367));
        float _2374 = (_2370 * _1753) + _1742;
        float _2375 = (_2370 * _1756) + _1746;
        float _2376 = (_2370 * _1759) + _1750;
        float _2377 = _2370 * 9.9999997473787516355514526367188e-05;
        float _2378 = (-1.0) - _2377;
        float _2380 = _2377 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2376 > _2380) || ((_2376 < _2378) || ((_2375 > _2380) || ((_2375 < _2378) || ((_2374 < _2378) || (_2374 > _2380))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2575 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2376, cbModelParam._m0[17u].z, fma(_2375, cbModelParam._m0[17u].y, _2374 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2376, cbModelParam._m0[18u].z, fma(_2375, cbModelParam._m0[18u].y, _2374 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2376, cbModelParam._m0[19u].z, fma(_2375, cbModelParam._m0[19u].y, _2374 * cbModelParam._m0[19u].x))), _1687);
            frontier_phi_22_46_ladder = _2575.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2575.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2575.x * cbModelParam._m0[1u].z;
        }
        _1778 = frontier_phi_22_46_ladder_2;
        _1780 = frontier_phi_22_46_ladder_1;
        _1782 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_789, _790, _791), _1687);
        _1778 = _1762.x * cbModelParam._m0[1u].z;
        _1780 = _1762.y * cbModelParam._m0[1u].z;
        _1782 = _1762.z * cbModelParam._m0[1u].z;
    }
    float _1794 = ((((1.0 - _810) * ((_797 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_810 * _797)) * _781;
    float _1795 = _1794 * ((cbModelParam._m0[1u].w * (_1778 - _1678)) + _1678);
    float _1796 = _1794 * ((cbModelParam._m0[1u].w * (_1780 - _1680)) + _1680);
    float _1797 = _1794 * ((cbModelParam._m0[1u].w * (_1782 - _1682)) + _1682);
    float _1800 = fma(_1797, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1795 * cbSceneParam._m0[89u].x));
    float _1803 = fma(_1797, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1795 * cbSceneParam._m0[90u].x));
    float _1806 = fma(_1797, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, _1795 * cbSceneParam._m0[91u].x));
    uvec4 _1816 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1818 = _1816.x * 14u;
    uint _1819 = _1818 + 13u;
    float _1826 = _781 + (-1.0);
    float _1831 = (cbLight._m0[_1819].x * _1826) + 1.0;
    float _1832 = (cbLight._m0[_1819].y * _1826) + 1.0;
    float _1833 = (cbLight._m0[_1819].z * _1826) + 1.0;
    float _1834 = (cbLight._m0[_1819].w * _1826) + 1.0;
    uint _1835 = _1818 + 5u;
    float _1841 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1845 = _1818 + 4u;
    float _1851 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
    uint _1855 = _1818 | 1u;
    float _1866 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_631, _632, _633));
    float _1869 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_631, _632, _633));
    float _3959 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _3970 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1874 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.3183098733425140380859375;
    float _1876 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.3183098733425140380859375;
    float _1883 = ((cbLight._m0[_1835].x * _1841) * _1876) + ((cbLight._m0[_1845].x * _1851) * _1874);
    float _1884 = ((_1841 * cbLight._m0[_1835].y) * _1876) + ((_1851 * cbLight._m0[_1845].y) * _1874);
    float _1885 = ((_1841 * cbLight._m0[_1835].z) * _1876) + ((_1851 * cbLight._m0[_1845].z) * _1874);
    uvec4 _1889 = floatBitsToUint(cbLight._m0[_1818 + 12u]);
    bool _1891 = _1889.x == 0u;
    float _1902;
    float _1904;
    float _1906;
    if (_1891)
    {
        _1902 = _1883;
        _1904 = _1884;
        _1906 = _1885;
    }
    else
    {
        uint _1910 = _1818 + 6u;
        float _1926 = (dot(vec3(cbLight._m0[_1818 + 2u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _1927 = _1926 * _1926;
        float _3981 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1929 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _1902 = (((cbLight._m0[_1910].x * 0.3183098733425140380859375) * _1928) * _1929) + _1883;
        _1904 = (((cbLight._m0[_1910].y * 0.3183098733425140380859375) * _1928) * _1929) + _1884;
        _1906 = (((cbLight._m0[_1910].z * 0.3183098733425140380859375) * _1928) * _1929) + _1885;
    }
    bool _1909 = _1889.y == 0u;
    float _1947;
    float _1949;
    float _1951;
    if (_1909)
    {
        _1947 = _1902;
        _1949 = _1904;
        _1951 = _1906;
    }
    else
    {
        uint _2106 = _1818 + 7u;
        float _2122 = (dot(vec3(cbLight._m0[_1818 + 3u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _2123 = _2122 * _2122;
        float _3997 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2124 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _2125 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _1947 = (((cbLight._m0[_2106].x * 0.3183098733425140380859375) * _2124) * _2125) + _1902;
        _1949 = (((cbLight._m0[_2106].y * 0.3183098733425140380859375) * _2124) * _2125) + _1904;
        _1951 = (((cbLight._m0[_2106].z * 0.3183098733425140380859375) * _2124) * _2125) + _1906;
    }
    uint _1954 = _1818 + 8u;
    float _1967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1818].w)) * _634) * 0.949999988079071044921875);
    float _1968 = _1967 * _1967;
    float _1969 = cbLight._m0[_1818].x + _710;
    float _1970 = cbLight._m0[_1818].y + _711;
    float _1971 = cbLight._m0[_1818].z + _712;
    float _1975 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
    float _1976 = _1975 * _1969;
    float _1977 = _1975 * _1970;
    float _1978 = _1975 * _1971;
    float _1979 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_1818].xyz));
    float _4013 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _4024 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _1983 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1984 = dot(vec3(_631, _632, _633), vec3(_1976, _1977, _1978));
    float _4035 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1988 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_1976, _1977, _1978));
    float _4046 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1992 = _1968 * _1968;
    float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
    float _2007 = (exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2008 = 1.0 - _1968;
    float _2019 = (0.5 / (((_1983 * ((_1982 * _2008) + _1968)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2008) + _1968) * _1982))) * _1982;
    float _4057 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2021 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
    uint _2032 = _1818 + 9u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1855].w)) * _634) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1855].x + _710;
    float _2046 = cbLight._m0[_1855].y + _711;
    float _2047 = cbLight._m0[_1855].z + _712;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_1855].xyz));
    float _4068 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _2059 = dot(vec3(_631, _632, _633), vec3(_2052, _2053, _2054));
    float _4079 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_2052, _2053, _2054));
    float _4090 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2044 * _2044;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2080 = (exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2081 = 1.0 - _2044;
    float _2091 = (0.5 / (((_1983 * ((_2058 * _2081) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2081) + _2044) * _2058))) * _2058;
    float _4101 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    float _2103 = (((_2080 * cbLight._m0[_2032].x) * _2093) * _1841) + (((_2007 * cbLight._m0[_1954].x) * _2021) * _1851);
    float _2104 = (((_2080 * cbLight._m0[_2032].y) * _2093) * _1841) + (((_2007 * cbLight._m0[_1954].y) * _2021) * _1851);
    float _2105 = (((_2080 * cbLight._m0[_2032].z) * _2093) * _1841) + (((_2007 * cbLight._m0[_1954].z) * _2021) * _1851);
    float _2167;
    float _2169;
    float _2171;
    if (_1891)
    {
        _2167 = _2103;
        _2169 = _2104;
        _2171 = _2105;
    }
    else
    {
        uint _2173 = _1818 + 2u;
        uint _2177 = _1818 + 10u;
        float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _634) * 0.949999988079071044921875);
        float _2192 = _2191 * _2191;
        float _2193 = cbLight._m0[_2173].x + _710;
        float _2194 = cbLight._m0[_2173].y + _711;
        float _2195 = cbLight._m0[_2173].z + _712;
        float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
        float _2200 = _2199 * _2193;
        float _2201 = _2199 * _2194;
        float _2202 = _2199 * _2195;
        float _2203 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2173].xyz));
        float _4112 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _2207 = dot(vec3(_631, _632, _633), vec3(_2200, _2201, _2202));
        float _4123 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2211 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2200, _2201, _2202));
        float _4134 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2215 = _2192 * _2192;
        float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
        float _2228 = (exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2229 = 1.0 - _2192;
        float _2239 = (0.5 / (((_1983 * ((_2206 * _2229) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2229) + _2192) * _2206))) * _2206;
        float _4145 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2241 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
        float _2242 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2167 = (((_2228 * cbLight._m0[_2177].x) * _2241) * _2242) + _2103;
        _2169 = (((_2228 * cbLight._m0[_2177].y) * _2241) * _2242) + _2104;
        _2171 = (((_2228 * cbLight._m0[_2177].z) * _2241) * _2242) + _2105;
    }
    float _2277;
    float _2279;
    float _2281;
    if (_1909)
    {
        _2277 = _2167;
        _2279 = _2169;
        _2281 = _2171;
    }
    else
    {
        uint _2288 = _1818 + 3u;
        uint _2292 = _1818 + 11u;
        float _2306 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _634) * 0.949999988079071044921875);
        float _2307 = _2306 * _2306;
        float _2308 = cbLight._m0[_2288].x + _710;
        float _2309 = cbLight._m0[_2288].y + _711;
        float _2310 = cbLight._m0[_2288].z + _712;
        float _2314 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
        float _2315 = _2314 * _2308;
        float _2316 = _2314 * _2309;
        float _2317 = _2314 * _2310;
        float _2318 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2288].xyz));
        float _4161 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2322 = dot(vec3(_631, _632, _633), vec3(_2315, _2316, _2317));
        float _4172 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2326 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2315, _2316, _2317));
        float _4183 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2330 = _2307 * _2307;
        float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
        float _2343 = (exp2(log2(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2344 = 1.0 - _2307;
        float _2354 = (0.5 / (((_1983 * ((_2321 * _2344) + _2307)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2344) + _2307) * _2321))) * _2321;
        float _4194 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2356 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
        float _2357 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _2277 = (((_2343 * cbLight._m0[_2292].x) * _2356) * _2357) + _2167;
        _2279 = (((_2343 * cbLight._m0[_2292].y) * _2356) * _2357) + _2169;
        _2281 = (((_2343 * cbLight._m0[_2292].z) * _2356) * _2357) + _2171;
    }
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    float _2502;
    if (_1816.y == 0u)
    {
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2432;
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2432;
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2432;
        uvec4 _2447 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2448 = _2447.x;
        uint _2459 = uint((float(_2447.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2448))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2448)));
        float _2469 = (log2(_2435 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2470 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        uint _2473 = uint(isnan(14.0) ? _2470 : (isnan(_2470) ? 14.0 : min(_2470, 14.0)));
        uvec4 _2478 = texelFetch(g_lightClusterGridBuffer, int(((_2473 << 2u) + (_2459 << 6u)) >> 2u));
        uint _2479 = _2478.x;
        uint _2480 = _2447.z;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        if (((((1u << ((_2480 >> 4u) & 15u)) + 4294967295u) & _2479) == 0u) || ((_2480 & 240u) == 0u))
        {
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
        }
        else
        {
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            uint _2731 = 0u;
            uint _2740;
            bool _2741;
            for (;;)
            {
                _2740 = texelFetch(g_lightClassification, int((((_2473 << 5u) + (_2459 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                _2741 = _2740 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2741)
                {
                    frontier_phi_61_pred = _2725;
                    frontier_phi_61_pred_1 = _2730;
                    frontier_phi_61_pred_2 = _2729;
                    frontier_phi_61_pred_3 = _2728;
                    frontier_phi_61_pred_4 = _2727;
                    frontier_phi_61_pred_5 = _2726;
                }
                else
                {
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    uint _2855;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2740;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    for (;;)
                    {
                        uint _2859 = uint(findLSB(_2855)) + (_2731 << 5u);
                        uint _2856 = (_2855 + 4294967295u) & _2855;
                        uint _2861 = _2859 * 48u;
                        vec4 _2875 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 3u)).x));
                        uint _2881 = (_2859 * 48u) + 4u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 3u)).x));
                        uint _2900 = (_2859 * 48u) + 8u;
                        vec3 _2911 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x));
                        float _2915 = _2875.x - _2433;
                        float _2916 = _2875.y - _2434;
                        float _2917 = _2875.z - _2435;
                        float _2918 = dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917));
                        float _2921 = inversesqrt(_2918);
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2925 = dot(vec3(_737, _740, _743), vec3(_2922, _2923, _2924));
                        float _2930 = 1.0 - (_2918 * _2875.w);
                        float _4220 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2932 = sqrt(_2918) * _2894.w;
                        float _2935 = 1.39999997615814208984375 / (_2932 + 1.39999997615814208984375);
                        float _2936 = _2935 * _2935;
                        float _2939 = ((1.0 - _2936) * _2925) + _2936;
                        float _2942 = _2932 * _2932;
                        float _2946 = ((isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))) * _2931) / ((_2942 * 0.699999988079071044921875) + 1.0);
                        float _2950 = (-0.0) - _2433;
                        float _2951 = (-0.0) - _2434;
                        float _2952 = (-0.0) - _2435;
                        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2967 = exp2(log2(1.0 / ((_2942 * 3.5) + 5.0)) * 0.25);
                        float _2968 = 1.0 - _797;
                        float _2975 = sqrt(1.0 - ((1.0 - (_2968 * _2968)) * (1.0 - (_2967 * _2967))));
                        float _2976 = _2975 * _2975;
                        float _2977 = _2976 * _2976;
                        float _2978 = _2957 + _2922;
                        float _2979 = _2958 + _2923;
                        float _2980 = _2959 + _2924;
                        float _2984 = inversesqrt(dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980)));
                        float _2988 = dot(vec3(_737, _740, _743), vec3(_2957, _2958, _2959));
                        float _4236 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2991 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                        float _2992 = dot(vec3(_737, _740, _743), vec3(_2984 * _2978, _2984 * _2979, _2984 * _2980));
                        float _4247 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2995 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2999 = ((_2995 * _2995) * (_2977 + (-1.0))) + 1.0;
                        float _3000 = _2935 * _2976;
                        float _3001 = _3000 * _3000;
                        float _3004 = ((1.0 - _3001) * _2925) + _3001;
                        float _4258 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3005 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                        float _3006 = 1.0 - _2976;
                        float _3016 = (0.5 / (((_3005 * ((_2991 * _3006) + _2976)) + 9.9999999392252902907785028219223e-09) + (((_3005 * _3006) + _2976) * _2991))) * _3005;
                        float _4269 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3027 = (((_2977 * 3.1415927410125732421875) * (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) / ((_2999 * _2999) * ((_2942 * 2.1991131305694580078125) + 3.141590118408203125))) * _2931;
                        _2784 = (_2946 * _2894.x) + _2852;
                        _2785 = (_2946 * _2894.y) + _2853;
                        _2786 = (_2946 * _2894.z) + _2854;
                        _2781 = (_3027 * _2911.x) + _2849;
                        _2782 = (_3027 * _2911.y) + _2850;
                        _2783 = (_3027 * _2911.z) + _2851;
                        if (_2856 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2856;
                        }
                    }
                    frontier_phi_61_pred = _2781;
                    frontier_phi_61_pred_1 = _2786;
                    frontier_phi_61_pred_2 = _2785;
                    frontier_phi_61_pred_3 = _2784;
                    frontier_phi_61_pred_4 = _2783;
                    frontier_phi_61_pred_5 = _2782;
                }
                _2581 = frontier_phi_61_pred;
                _2591 = frontier_phi_61_pred_1;
                _2589 = frontier_phi_61_pred_2;
                _2587 = frontier_phi_61_pred_3;
                _2585 = frontier_phi_61_pred_4;
                _2583 = frontier_phi_61_pred_5;
                uint _2732 = _2731 + 1u;
                if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2725 = _2581;
                    _2726 = _2583;
                    _2727 = _2585;
                    _2728 = _2587;
                    _2729 = _2589;
                    _2730 = _2591;
                    _2731 = _2732;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
        }
        uvec4 _2594 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2595 = _2594.z;
        uint _2597 = (_2595 >> 8u) & 15u;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((4294967295u << _2597) & _2479) == 0u)
        {
            _2693 = _2580;
            _2695 = _2582;
            _2697 = _2584;
            _2699 = _2586;
            _2701 = _2588;
            _2703 = _2590;
        }
        else
        {
            float _2718 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
            float _2719 = _2718 * _2433;
            float _2720 = _2718 * _2434;
            float _2721 = _2718 * _2435;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2597 < ((_2595 >> 12u) & 15u))
            {
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2832 = _2580;
                float _2833 = _2582;
                float _2834 = _2584;
                float _2835 = _2586;
                float _2836 = _2588;
                float _2837 = _2590;
                uint _2838 = _2597;
                uint _2847;
                bool _2848;
                for (;;)
                {
                    _2847 = texelFetch(g_lightClassification, int((((_2473 << 5u) + (_2459 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                    _2848 = _2847 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2848)
                    {
                        frontier_phi_67_pred = _2835;
                        frontier_phi_67_pred_1 = _2836;
                        frontier_phi_67_pred_2 = _2837;
                        frontier_phi_67_pred_3 = _2834;
                        frontier_phi_67_pred_4 = _2833;
                        frontier_phi_67_pred_5 = _2832;
                    }
                    else
                    {
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3045 = _2832;
                        float _3046 = _2833;
                        float _3047 = _2834;
                        float _3048 = _2835;
                        float _3049 = _2836;
                        float _3050 = _2837;
                        uint _3051 = _2847;
                        uint _3052;
                        vec4 _3077;
                        float _3078;
                        vec4 _3093;
                        vec3 _3105;
                        vec4 _3120;
                        vec4 _3135;
                        float _3181;
                        bool _3182;
                        for (;;)
                        {
                            uint _3062 = ((_2838 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3051));
                            _3052 = (_3051 + 4294967295u) & _3051;
                            uint _3064 = _3062 * 40u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            _3078 = _3077.w;
                            uint _3080 = (_3062 * 40u) + 4u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3095 = (_3062 * 40u) + 8u;
                            _3105 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x));
                            uint _3107 = (_3062 * 40u) + 16u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3122 = (_3062 * 40u) + 20u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3137 = (_3062 * 40u) + 24u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3156 = (_3062 * 40u) + 28u;
                            vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3181 = fma(_2435, _3169.z, fma(_2434, _3169.y, _3169.x * _2433)) + _3169.w;
                            _3182 = !((fma(_2435, _3150.z, fma(_2434, _3150.y, _3150.x * _2433)) + _3150.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3182)
                            {
                                float _3209 = _3077.x - _2433;
                                float _3210 = _3077.y - _2434;
                                float _3211 = _3077.z - _2435;
                                float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                                float _3215 = inversesqrt(_3212);
                                float _3216 = _3215 * _3209;
                                float _3217 = _3215 * _3210;
                                float _3218 = _3215 * _3211;
                                float _3222 = 1.0 - (_3212 / (_3078 * _3078));
                                float _4280 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3227 = sqrt(_3212) * _3093.w;
                                float _3229 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                                float _3230 = _3229 * _3229;
                                float _3233 = ((1.0 - _3230) * dot(vec3(_3216, _3217, _3218), vec3(_737, _740, _743))) + _3230;
                                float _3236 = _3227 * _3227;
                                float _3240 = (fma(_2435, _3120.z, fma(_2434, _3120.y, _3120.x * _2433)) + _3120.w) / _3181;
                                float _3241 = (fma(_2435, _3135.z, fma(_2434, _3135.y, _3135.x * _2433)) + _3135.w) / _3181;
                                float _3245 = 1.0 - dot(vec2(_3240, _3241), vec2(_3240, _3241));
                                float _4296 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3247 = _3246 * (((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3223) / ((_3236 * 0.699999988079071044921875) + 1.0));
                                float _3259 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                                float _3260 = 1.0 - _797;
                                float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                                float _3268 = _3267 * _3267;
                                float _3269 = _3268 * _3268;
                                float _3270 = _3216 - _2719;
                                float _3271 = _3217 - _2720;
                                float _3272 = _3218 - _2721;
                                float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                                float _3280 = dot(vec3(_737, _740, _743), vec3((-0.0) - _2719, (-0.0) - _2720, (-0.0) - _2721));
                                float _4307 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3283 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3284 = dot(vec3(_737, _740, _743), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                                float _4318 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                                float _3292 = _3229 * _3268;
                                float _3293 = _3292 * _3292;
                                float _3299 = ((1.0 - _3293) * dot(vec3(_737, _740, _743), vec3(_3216, _3217, _3218))) + _3293;
                                float _4329 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3301 = 1.0 - _3268;
                                float _3311 = (0.5 / (((_3300 * ((_3283 * _3301) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3268) * _3283))) * _3300;
                                float _4340 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3321 = (_3246 * _3223) * (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) / ((_3291 * _3291) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3321 * _3105.x;
                                frontier_phi_73_pred_1 = _3321 * _3105.y;
                                frontier_phi_73_pred_2 = _3247 * _3093.z;
                                frontier_phi_73_pred_3 = _3247 * _3093.y;
                                frontier_phi_73_pred_4 = _3247 * _3093.x;
                                frontier_phi_73_pred_5 = _3321 * _3105.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3325 = frontier_phi_73_pred;
                            _3326 = frontier_phi_73_pred_1;
                            _3330 = frontier_phi_73_pred_2;
                            _3329 = frontier_phi_73_pred_3;
                            _3328 = frontier_phi_73_pred_4;
                            _3327 = frontier_phi_73_pred_5;
                            _3035 = _3328 + _3048;
                            _3036 = _3329 + _3049;
                            _3037 = _3330 + _3050;
                            _3032 = _3325 + _3045;
                            _3033 = _3326 + _3046;
                            _3034 = _3327 + _3047;
                            if (_3052 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3052;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3035;
                        frontier_phi_67_pred_1 = _3036;
                        frontier_phi_67_pred_2 = _3037;
                        frontier_phi_67_pred_3 = _3034;
                        frontier_phi_67_pred_4 = _3033;
                        frontier_phi_67_pred_5 = _3032;
                    }
                    _2700 = frontier_phi_67_pred;
                    _2702 = frontier_phi_67_pred_1;
                    _2704 = frontier_phi_67_pred_2;
                    _2698 = frontier_phi_67_pred_3;
                    _2696 = frontier_phi_67_pred_4;
                    _2694 = frontier_phi_67_pred_5;
                    uint _2839 = _2838 + 1u;
                    if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2832 = _2694;
                        _2833 = _2696;
                        _2834 = _2698;
                        _2835 = _2700;
                        _2836 = _2702;
                        _2837 = _2704;
                        _2838 = _2839;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2702;
                frontier_phi_55_56_ladder_1 = _2704;
                frontier_phi_55_56_ladder_2 = _2700;
                frontier_phi_55_56_ladder_3 = _2698;
                frontier_phi_55_56_ladder_4 = _2696;
                frontier_phi_55_56_ladder_5 = _2694;
            }
            else
            {
                frontier_phi_55_56_ladder = _2588;
                frontier_phi_55_56_ladder_1 = _2590;
                frontier_phi_55_56_ladder_2 = _2586;
                frontier_phi_55_56_ladder_3 = _2584;
                frontier_phi_55_56_ladder_4 = _2582;
                frontier_phi_55_56_ladder_5 = _2580;
            }
            _2693 = frontier_phi_55_56_ladder_5;
            _2695 = frontier_phi_55_56_ladder_4;
            _2697 = frontier_phi_55_56_ladder_3;
            _2699 = frontier_phi_55_56_ladder_2;
            _2701 = frontier_phi_55_56_ladder;
            _2703 = frontier_phi_55_56_ladder_1;
        }
        float _2708 = isnan(1.0) ? _781 : (isnan(_781) ? 1.0 : min(_781, 1.0));
        _2492 = (_2708 * _2699) + _1947;
        _2494 = (_2708 * _2701) + _1949;
        _2496 = (_2708 * _2703) + _1951;
        _2498 = ((_2693 * 0.039999999105930328369140625) * _2708) + _2277;
        _2500 = ((_2695 * 0.039999999105930328369140625) * _2708) + _2279;
        _2502 = ((_2697 * 0.039999999105930328369140625) * _2708) + _2281;
    }
    else
    {
        _2492 = _1947;
        _2494 = _1949;
        _2496 = _1951;
        _2498 = _2277;
        _2500 = _2279;
        _2502 = _2281;
    }
    float _4356 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4367 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4378 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    uint _2522 = _232 + 6u;
    float _2530 = _718 / cbSceneParam._m0[86u].x;
    float _2531 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2545 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2530, _2531, (log2((isnan(cbSceneParam._m0[77u].w) ? _652 : (isnan(_652) ? cbSceneParam._m0[77u].w : min(_652, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2547 = _2545.x;
    float _2548 = _2545.y;
    float _2549 = _2545.z;
    float _2550 = _2545.w;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    if (_652 > cbSceneParam._m0[78u].w)
    {
        float _2605 = isnan(_652) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _652 : min(cbSceneParam._m0[80u].w, _652));
        float _2606 = _2605 / _652;
        float _2617 = _2606 * _703;
        float _2618 = _704 * _2606;
        float _2619 = (-0.0) - _2618;
        float _2621 = _2606 * _705;
        float _2623 = (cbSceneParam._m0[77u].w * _2619) / _2605;
        float _2624 = _2623 + cbSceneParam._m0[79u].w;
        float _2625 = cbSceneParam._m0[79u].w - _2618;
        float _2631 = sqrt(((_2617 * _2617) + (_2618 * _2618)) + (_2621 * _2621));
        float _2634 = (1.0 - (cbSceneParam._m0[77u].w / _2605)) * _2631;
        float _2639 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2641 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2794;
        if (abs((_2619 - _2623) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2794 = ((((_2624 > 0.0) ? exp2(_2639 * _2624) : (2.0 - exp2(_2641 * _2624))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2634;
        }
        else
        {
            float _2754 = 1.0 / cbSceneParam._m0[80u].x;
            float _2755 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : max(_2624, _2625));
            float _2756 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : min(_2624, _2625));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            _2794 = ((abs(_2631 / _2619) * cbSceneParam._m0[80u].y) * ((((_2765 - _2766) * 2.0) - ((exp2(_2639 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0)))) - exp2(_2639 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))))) * _2754)) - ((exp2(_2641 * _2765) - exp2(_2641 * _2766)) * _2754))) + (_2634 * cbSceneParam._m0[80u].z);
        }
        vec4 _2796 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2530, _2531, 1.0), 0.0);
        float _2805 = exp2((_2794 * (-1.44269502162933349609375)) * (1.0 - _2796.w));
        float _2806 = log2(_2805);
        float _2822 = log2(_2550);
        _2643 = (exp2(_2822 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].x)) * _2796.x) / cbSceneParam._m0[78u].x)) + _2547;
        _2645 = (exp2(_2822 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].y)) * _2796.y) / cbSceneParam._m0[78u].y)) + _2548;
        _2647 = (exp2(_2822 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].z)) * _2796.z) / cbSceneParam._m0[78u].z)) + _2549;
        _2649 = _2805 * _2550;
    }
    else
    {
        _2643 = _2547;
        _2645 = _2548;
        _2647 = _2549;
        _2649 = _2550;
    }
    float _2661 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2662 = _2661 == 3.0;
    float _2663 = log2(_2649);
    float _2670 = exp2(_2663 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2492 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _781))) + ((_2498 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1585)) * cbPerFrame._m0[3u].x));
    float _2671 = exp2(_2663 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2494 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _781))) + ((_2500 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1585)) * cbPerFrame._m0[3u].x));
    float _2672 = exp2(_2663 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2496 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _781))) + ((_2502 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1585)) * cbPerFrame._m0[3u].x));
    float _2681 = (_2661 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2681 * (_2662 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2643)));
    SV_Target.y = _2681 * (_2662 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.z = _2681 * (_2662 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2647)));
    SV_Target.w = cbInstanceData._m0[_2522].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2522].w;
}


