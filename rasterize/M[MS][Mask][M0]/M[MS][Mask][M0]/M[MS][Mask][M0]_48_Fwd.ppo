#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1374;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3677 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3688 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3699 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].z) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3710 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _448 = (_441 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _449 = (_441 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _450 = (_441 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    float _454 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _448;
    float _457 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _449;
    float _460 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _450;
    float _467 = ((_448 - _454) * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) + _454;
    float _468 = ((_449 - _457) * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) + _457;
    float _469 = ((_450 - _460) * (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) + _460;
    vec4 _488 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _294) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _295) + cbTextureTilingScale._m0[14u].w));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _554 = _552.x;
    float _555 = _552.y;
    float _556 = _552.z;
    float _565 = ((_535.z - _556) * _441) + _556;
    float _568 = ((((_535.x - _554) * _441) + _554) * 2.0) + (-1.0);
    float _569 = ((((_535.y - _555) * _441) + _555) * 2.0) + (-1.0);
    float _570 = dot(vec2(_568, _569), vec2(_568, _569));
    float _3721 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _575 = sqrt(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _607 = (_568 + ((((_508.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_595.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _608 = (_569 + ((((_508.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_595.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _611 = fma(_575, _244, fma(_608, _251, _607 * _237));
    float _614 = fma(_575, _245, fma(_608, _252, _607 * _238));
    float _617 = fma(_575, _246, fma(_608, _253, _607 * _239));
    float _621 = inversesqrt(dot(vec3(_611, _614, _617), vec3(_611, _614, _617)));
    vec4 _648 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _650 = _648.x;
    float _651 = 1.0 - _650;
    float _657 = (cbMtdParam._m0[19u].x + dot(vec4(_621 * _611, _621 * _614, _621 * _617, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_650 - _651) * cbMtdParam._m0[24u].w) + _651) * cbMtdParam._m0[21u].z);
    float _3732 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _660 = (-0.0) - cbMtdParam._m0[24u].x;
    float _662 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _662 : (isnan(_662) ? 1.0 : min(_662, 1.0));
    float _670 = _658 - ((_658 * TEXCOORD_8.x) * _663);
    float _671 = _658 - ((_658 * TEXCOORD_8.y) * _663);
    float _672 = _658 - ((_658 * TEXCOORD_8.z) * _663);
    float _679 = (_670 * ((_488.x * cbMtdParam._m0[18u].x) - _467)) + _467;
    float _680 = (_671 * ((_488.y * cbMtdParam._m0[18u].y) - _468)) + _468;
    float _681 = (_672 * ((_488.z * cbMtdParam._m0[18u].z) - _469)) + _469;
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _695 = _693.x;
    float _696 = 1.0 - _695;
    float _722 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_695 - _696) * cbMtdParam._m0[24u].y) + _696) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3753 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _723 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _731 = ((((cbMtdParam._m0[10u].x - _679) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _723) + _679;
    float _732 = ((((cbMtdParam._m0[10u].y - _680) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _723) + _680;
    float _733 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _681)) * _723) + _681;
    float _738 = (((_508.z - _565) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _565;
    float _742 = ((_595.z - _738) * cbMtdParam._m0[19u].w) + _738;
    vec4 _756 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _763 = (_756.x * 2.0) + (-1.0);
    float _764 = (_756.y * 2.0) + (-1.0);
    float _765 = dot(vec2(_763, _764), vec2(_763, _764));
    float _3764 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _773 = ((_756.z - _742) * _670) + _742;
    float _776 = ((cbMtdParam._m0[23u].y - _773) * _723) + _773;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _801 = (_795.x * 2.0) + (-1.0);
    float _802 = (_795.y * 2.0) + (-1.0);
    float _803 = dot(vec2(_801, _802), vec2(_801, _802));
    float _3775 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _818 = ((sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) - _575) * _672) + _575;
    float _821 = (((_763 - _607) * _670) + _607) + (cbMtdParam._m0[21u].x * _607);
    float _822 = (((_764 - _608) * _671) + _608) + (cbMtdParam._m0[21u].x * _608);
    float _833 = (((_801 - _821) + (_821 * cbMtdParam._m0[22u].z)) * _723) + _821;
    float _834 = (((_802 - _822) + (_822 * cbMtdParam._m0[22u].z)) * _723) + _822;
    float _835 = (_723 * (sqrt(1.0 - (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) - _818)) + _818;
    float _839 = cbMtdParam._m0[22u].x + _595.w;
    float _842 = fma(_835, _244, fma(_834, _251, _833 * _237));
    float _845 = fma(_835, _245, fma(_834, _252, _833 * _238));
    float _848 = fma(_835, _246, fma(_834, _253, _833 * _239));
    float _852 = inversesqrt(dot(vec3(_842, _845, _848), vec3(_842, _845, _848)));
    float _853 = _852 * _842;
    float _854 = _852 * _845;
    float _855 = _852 * _848;
    float _3786 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _856 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _3808 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3819 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _3830 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _874 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _925 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _915);
    float _926 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _915);
    float _927 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _915);
    float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
    float _932 = _925 * _931;
    float _933 = _926 * _931;
    float _934 = _927 * _931;
    float _940 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _941 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _959 = fma(_855, cbSceneParam._m0[5u].z, fma(_854, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _853));
    float _962 = fma(_855, cbSceneParam._m0[6u].z, fma(_854, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _853));
    float _965 = fma(_855, cbSceneParam._m0[7u].z, fma(_854, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _853));
    uint _979 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _985 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * cbInstanceData._m0[_979].x;
    float _986 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * cbInstanceData._m0[_979].y;
    float _987 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * cbInstanceData._m0[_979].z;
    float _3841 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _989 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    vec4 _999 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _940, cbSceneParam._m0[86u].y * _941));
    float _1003 = ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * TEXCOORD_5.w) * _999.x;
    float _1004 = dot(vec3(_853, _854, _855), vec3(_932, _933, _934));
    float _1007 = _1004 * 2.0;
    float _1011 = (_1007 * _853) - _932;
    float _1012 = (_1007 * _854) - _933;
    float _1013 = (_1007 * _855) - _934;
    float _1017 = abs(dot(vec3(_932, _933, _934), vec3(_853, _854, _855)));
    float _3874 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1019 = sqrt(_856);
    float _1032 = exp2((_1019 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1019 * 3.0));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1373;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1098 = fma(_1072, cbModelParam._m0[26u].z, fma(_1068, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1064));
        float _1102 = fma(_1072, cbModelParam._m0[27u].z, fma(_1068, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1064));
        float _1106 = fma(_1072, cbModelParam._m0[28u].z, fma(_1068, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1064));
        float _1131 = _1064 + _853;
        float _1132 = _1068 + _854;
        float _1133 = _1072 + _855;
        float _1143 = fma(_1133, cbModelParam._m0[26u].z, fma(_1132, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1131)) - _1098;
        float _1144 = fma(_1133, cbModelParam._m0[27u].z, fma(_1132, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1131)) - _1102;
        float _1145 = fma(_1133, cbModelParam._m0[28u].z, fma(_1132, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1131)) - _1106;
        float _1149 = inversesqrt(dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145)));
        float _1162 = ((_1149 * _1143) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1098 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1149 * _1144) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1102 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1149 * _1145) / cbModelParam._m0[34u].z) + ((((((_1106 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        float _1201 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1167.x + (-0.5));
        float _1203 = _1201 * (_1167.y + (-0.5));
        float _1204 = _1201 * (_1167.z + (-0.5));
        float _1211 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1174.x + (-0.5));
        float _1213 = _1211 * (_1174.y + (-0.5));
        float _1214 = _1211 * (_1174.z + (-0.5));
        float _1221 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1181.x + (-0.5));
        float _1223 = _1221 * (_1181.y + (-0.5));
        float _1224 = _1221 * (_1181.z + (-0.5));
        float _1231 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1188.x + (-0.5));
        float _1233 = _1231 * (_1188.y + (-0.5));
        float _1234 = _1231 * (_1188.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1255 = (dot(vec3(_853, _854, _855), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1265 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3922 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1267 + 1.0))) + _1272) * _1235;
        float _1282 = _1203 * 0.5;
        float _1283 = _1213 * 0.5;
        float _1284 = _1223 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_853, _854, _855), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3955 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1309 + 1.0))) + _1314) * _1236;
        float _1324 = _1204 * 0.5;
        float _1325 = _1214 * 0.5;
        float _1326 = _1224 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_853, _854, _855), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3988 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1351 + 1.0))) + _1356) * _1237;
        _1373 = _1204;
        _1375 = _1203;
        _1376 = _1202;
        _1377 = _1214;
        _1378 = _1213;
        _1379 = _1212;
        _1380 = _1224;
        _1381 = _1223;
        _1382 = _1222;
        _1383 = _1237;
        _1384 = _1236;
        _1385 = _1235;
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1374;
        _1375 = _1374;
        _1376 = _1374;
        _1377 = _1374;
        _1378 = _1374;
        _1379 = _1374;
        _1380 = _1374;
        _1381 = _1374;
        _1382 = _1374;
        _1383 = _1374;
        _1384 = _1374;
        _1385 = _1374;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1413 = fma(_1072, cbModelParam._m0[30u].z, fma(_1068, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1064));
        float _1417 = fma(_1072, cbModelParam._m0[31u].z, fma(_1068, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1064));
        float _1421 = fma(_1072, cbModelParam._m0[32u].z, fma(_1068, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1064));
        float _1444 = _1064 + _853;
        float _1445 = _1068 + _854;
        float _1446 = _1072 + _855;
        float _1456 = fma(_1446, cbModelParam._m0[30u].z, fma(_1445, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1444)) - _1413;
        float _1457 = fma(_1446, cbModelParam._m0[31u].z, fma(_1445, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1444)) - _1417;
        float _1458 = fma(_1446, cbModelParam._m0[32u].z, fma(_1445, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1444)) - _1421;
        float _1462 = inversesqrt(dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458)));
        float _1475 = ((_1462 * _1456) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1413 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1462 * _1457) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1417 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1462 * _1458) / cbModelParam._m0[35u].z) + ((((((_1421 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        float _1512 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1479.x + (-0.5));
        float _1514 = _1512 * (_1479.y + (-0.5));
        float _1515 = _1512 * (_1479.z + (-0.5));
        float _1522 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1486.x + (-0.5));
        float _1524 = _1522 * (_1486.y + (-0.5));
        float _1525 = _1522 * (_1486.z + (-0.5));
        float _1532 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1493.x + (-0.5));
        float _1534 = _1532 * (_1493.y + (-0.5));
        float _1535 = _1532 * (_1493.z + (-0.5));
        float _1542 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1500.x + (-0.5));
        float _1544 = _1542 * (_1500.y + (-0.5));
        float _1545 = _1542 * (_1500.z + (-0.5));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = _1513 * 0.5;
        float _1550 = _1523 * 0.5;
        float _1551 = _1533 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_853, _854, _855), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4051 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1576 + 1.0))) + _1581) * _1546;
        float _1591 = _1514 * 0.5;
        float _1592 = _1524 * 0.5;
        float _1593 = _1534 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_853, _854, _855), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4084 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1618 + 1.0))) + _1623) * _1547;
        float _1633 = _1515 * 0.5;
        float _1634 = _1525 * 0.5;
        float _1635 = _1535 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_853, _854, _855), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4117 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1660 + 1.0))) + _1665) * _1548;
        _1682 = _1515;
        _1683 = _1514;
        _1684 = _1513;
        _1685 = _1525;
        _1686 = _1524;
        _1687 = _1523;
        _1688 = _1535;
        _1689 = _1534;
        _1690 = _1533;
        _1691 = _1548;
        _1692 = _1547;
        _1693 = _1546;
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
    }
    else
    {
        _1682 = _1374;
        _1683 = _1374;
        _1684 = _1374;
        _1685 = _1374;
        _1686 = _1374;
        _1687 = _1374;
        _1688 = _1374;
        _1689 = _1374;
        _1690 = _1374;
        _1691 = _1374;
        _1692 = _1374;
        _1693 = _1374;
        _1694 = 0.0;
        _1695 = 0.0;
        _1696 = 0.0;
    }
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1386)) + _1386;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1387)) + _1387;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1388)) + _1388;
    float _1729 = fma(_1708, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1706 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1708, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1706 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1708, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1706));
    float _1750 = _1011 * 0.5;
    float _1751 = _1012 * 0.5;
    float _1752 = _1013 * 0.5;
    float _1753 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1756 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1759 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1793;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1766 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1373, _1377, _1380, _1383));
        float _1770 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1774 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1781 = dot(vec4(cbModelParam._m0[39u]), vec4(_1750, _1751, _1752, 1.0));
        _1793 = dot(vec3(isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1793 = 1.0;
    }
    float _1804;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1795 = dot(vec4(cbModelParam._m0[40u]), vec4(_1750, _1751, _1752, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1795) ? 0.0 : (isnan(0.0) ? _1795 : max(0.0, _1795))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1808 = (_1804 * cbModelParam._m0[1u].x) + (_1793 * (1.0 - cbModelParam._m0[1u].x));
    float _1818 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _856);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1818 : min(cbModelParam._m0[25u].z, _1818));
    float _1899;
    float _1901;
    float _1903;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1866 = fma(_1072, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1064)) + cbModelParam._m0[13u].w;
        float _1870 = fma(_1072, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1064)) + cbModelParam._m0[14u].w;
        float _1874 = fma(_1072, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1064)) + cbModelParam._m0[15u].w;
        float _1877 = fma(_1013, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011));
        float _1880 = fma(_1013, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011));
        float _1883 = fma(_1013, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011));
        float _1911;
        if (_1877 > 0.0)
        {
            _1911 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1911 = frontier_phi_14_12_ladder;
        }
        float _2111;
        if (_1880 > 0.0)
        {
            _2111 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2111 = frontier_phi_23_19_ladder;
        }
        float _2354;
        if (_1883 > 0.0)
        {
            _2354 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2354 = frontier_phi_35_30_ladder;
        }
        float _2356 = isnan(_2111) ? _1911 : (isnan(_1911) ? _2111 : min(_1911, _2111));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1877) + _1866;
        float _2362 = (_2357 * _1880) + _1870;
        float _2363 = (_2357 * _1883) + _1874;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2366 = (-1.0) - _2364;
        float _2368 = _2364 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2363 > _2368) || ((_2363 < _2366) || ((_2362 > _2368) || ((_2362 < _2366) || ((_2361 < _2366) || (_2361 > _2368))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2363, cbModelParam._m0[9u].z, fma(_2362, cbModelParam._m0[9u].y, _2361 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2363, cbModelParam._m0[10u].z, fma(_2362, cbModelParam._m0[10u].y, _2361 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2363, cbModelParam._m0[11u].z, fma(_2362, cbModelParam._m0[11u].y, _2361 * cbModelParam._m0[11u].x))), _1819);
            frontier_phi_13_35_ladder = _2487.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2487.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2487.x * cbModelParam._m0[1u].y;
        }
        _1899 = frontier_phi_13_35_ladder_2;
        _1901 = frontier_phi_13_35_ladder_1;
        _1903 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1011, _1012, _1013), _1819);
        _1899 = _1887.x * cbModelParam._m0[1u].y;
        _1901 = _1887.y * cbModelParam._m0[1u].y;
        _1903 = _1887.z * cbModelParam._m0[1u].y;
    }
    float _1907 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _856);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1907 : min(cbModelParam._m0[25u].w, _1907));
    float _1997;
    float _1999;
    float _2001;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1961 = fma(_1072, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1064)) + cbModelParam._m0[21u].w;
        float _1965 = fma(_1072, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1064)) + cbModelParam._m0[22u].w;
        float _1969 = fma(_1072, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1064)) + cbModelParam._m0[23u].w;
        float _1972 = fma(_1013, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011));
        float _1975 = fma(_1013, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011));
        float _1978 = fma(_1013, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011));
        float _2116;
        if (_1972 > 0.0)
        {
            _2116 = abs((1.0 - _1961) / _1972);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1961 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2116 = frontier_phi_25_21_ladder;
        }
        float _2381;
        if (_1975 > 0.0)
        {
            _2381 = abs((1.0 - _1965) / _1975);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1965 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2381 = frontier_phi_37_32_ladder;
        }
        float _2586;
        if (_1978 > 0.0)
        {
            _2586 = abs((1.0 - _1969) / _1978);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1969 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2586 = frontier_phi_46_43_ladder;
        }
        float _2588 = isnan(_2381) ? _2116 : (isnan(_2116) ? _2381 : min(_2116, _2381));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _1972) + _1961;
        float _2594 = (_2589 * _1975) + _1965;
        float _2595 = (_2589 * _1978) + _1969;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2597 = (-1.0) - _2596;
        float _2599 = _2596 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2595 > _2599) || ((_2595 < _2597) || ((_2594 > _2599) || ((_2594 < _2597) || ((_2593 < _2597) || (_2593 > _2599))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2595, cbModelParam._m0[17u].z, fma(_2594, cbModelParam._m0[17u].y, _2593 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2595, cbModelParam._m0[18u].z, fma(_2594, cbModelParam._m0[18u].y, _2593 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2595, cbModelParam._m0[19u].z, fma(_2594, cbModelParam._m0[19u].y, _2593 * cbModelParam._m0[19u].x))), _1908);
            frontier_phi_22_46_ladder = _2794.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2794.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2794.x * cbModelParam._m0[1u].z;
        }
        _1997 = frontier_phi_22_46_ladder_2;
        _1999 = frontier_phi_22_46_ladder_1;
        _2001 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1981 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1011, _1012, _1013), _1908);
        _1997 = _1981.x * cbModelParam._m0[1u].z;
        _1999 = _1981.y * cbModelParam._m0[1u].z;
        _2001 = _1981.z * cbModelParam._m0[1u].z;
    }
    float _2013 = ((((1.0 - _1032) * ((_1019 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1032 * _1019)) * _1003;
    float _2014 = _2013 * ((cbModelParam._m0[1u].w * (_1997 - _1899)) + _1899);
    float _2015 = _2013 * ((cbModelParam._m0[1u].w * (_1999 - _1901)) + _1901);
    float _2016 = _2013 * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2019 = fma(_2016, cbSceneParam._m0[89u].z, fma(_2015, cbSceneParam._m0[89u].y, _2014 * cbSceneParam._m0[89u].x));
    float _2022 = fma(_2016, cbSceneParam._m0[90u].z, fma(_2015, cbSceneParam._m0[90u].y, _2014 * cbSceneParam._m0[90u].x));
    float _2025 = fma(_2016, cbSceneParam._m0[91u].z, fma(_2015, cbSceneParam._m0[91u].y, _2014 * cbSceneParam._m0[91u].x));
    uvec4 _2035 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2037 = _2035.x * 14u;
    uint _2038 = _2037 + 13u;
    float _2045 = _1003 + (-1.0);
    float _2050 = (cbLight._m0[_2038].x * _2045) + 1.0;
    float _2051 = (cbLight._m0[_2038].y * _2045) + 1.0;
    float _2052 = (cbLight._m0[_2038].z * _2045) + 1.0;
    float _2053 = (cbLight._m0[_2038].w * _2045) + 1.0;
    uint _2054 = _2037 + 5u;
    float _2060 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2064 = _2037 + 4u;
    float _2070 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2074 = _2037 | 1u;
    float _2085 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_853, _854, _855));
    float _2088 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_853, _854, _855));
    float _4253 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _4264 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2093 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 0.3183098733425140380859375;
    float _2095 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * 0.3183098733425140380859375;
    float _2102 = ((cbLight._m0[_2054].x * _2060) * _2095) + ((cbLight._m0[_2064].x * _2070) * _2093);
    float _2103 = ((_2060 * cbLight._m0[_2054].y) * _2095) + ((_2070 * cbLight._m0[_2064].y) * _2093);
    float _2104 = ((_2060 * cbLight._m0[_2054].z) * _2095) + ((_2070 * cbLight._m0[_2064].z) * _2093);
    uvec4 _2108 = floatBitsToUint(cbLight._m0[_2037 + 12u]);
    bool _2110 = _2108.x == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2110)
    {
        _2121 = _2102;
        _2123 = _2103;
        _2125 = _2104;
    }
    else
    {
        uint _2129 = _2037 + 6u;
        float _2145 = (dot(vec3(cbLight._m0[_2037 + 2u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2146 = _2145 * _2145;
        float _4275 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2148 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2121 = (((cbLight._m0[_2129].x * 0.3183098733425140380859375) * _2147) * _2148) + _2102;
        _2123 = (((cbLight._m0[_2129].y * 0.3183098733425140380859375) * _2147) * _2148) + _2103;
        _2125 = (((cbLight._m0[_2129].z * 0.3183098733425140380859375) * _2147) * _2148) + _2104;
    }
    bool _2128 = _2108.y == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2128)
    {
        _2166 = _2121;
        _2168 = _2123;
        _2170 = _2125;
    }
    else
    {
        uint _2325 = _2037 + 7u;
        float _2341 = (dot(vec3(cbLight._m0[_2037 + 3u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4291 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2344 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2166 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2121;
        _2168 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2123;
        _2170 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2125;
    }
    uint _2173 = _2037 + 8u;
    float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _856) * 0.949999988079071044921875);
    float _2187 = _2186 * _2186;
    float _2188 = cbLight._m0[_2037].x + _932;
    float _2189 = cbLight._m0[_2037].y + _933;
    float _2190 = cbLight._m0[_2037].z + _934;
    float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
    float _2195 = _2194 * _2188;
    float _2196 = _2194 * _2189;
    float _2197 = _2194 * _2190;
    float _2198 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2037].xyz));
    float _4307 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _4318 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _2202 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2203 = dot(vec3(_853, _854, _855), vec3(_2195, _2196, _2197));
    float _4329 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2195, _2196, _2197));
    float _4340 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2187 * _2187;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2226 = (exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2227 = 1.0 - _2187;
    float _2238 = (0.5 / (((_2202 * ((_2201 * _2227) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2227) + _2187) * _2201))) * _2201;
    float _4351 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    uint _2251 = _2037 + 9u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _856) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2074].x + _932;
    float _2265 = cbLight._m0[_2074].y + _933;
    float _2266 = cbLight._m0[_2074].z + _934;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2074].xyz));
    float _4362 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _2278 = dot(vec3(_853, _854, _855), vec3(_2271, _2272, _2273));
    float _4373 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2282 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2271, _2272, _2273));
    float _4384 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2286 = _2263 * _2263;
    float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
    float _2299 = (exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2300 = 1.0 - _2263;
    float _2310 = (0.5 / (((_2202 * ((_2277 * _2300) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2300) + _2263) * _2277))) * _2277;
    float _4395 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
    float _2322 = (((_2299 * cbLight._m0[_2251].x) * _2312) * _2060) + (((_2226 * cbLight._m0[_2173].x) * _2240) * _2070);
    float _2323 = (((_2299 * cbLight._m0[_2251].y) * _2312) * _2060) + (((_2226 * cbLight._m0[_2173].y) * _2240) * _2070);
    float _2324 = (((_2299 * cbLight._m0[_2251].z) * _2312) * _2060) + (((_2226 * cbLight._m0[_2173].z) * _2240) * _2070);
    float _2386;
    float _2388;
    float _2390;
    if (_2110)
    {
        _2386 = _2322;
        _2388 = _2323;
        _2390 = _2324;
    }
    else
    {
        uint _2392 = _2037 + 2u;
        uint _2396 = _2037 + 10u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _856) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _932;
        float _2413 = cbLight._m0[_2392].y + _933;
        float _2414 = cbLight._m0[_2392].z + _934;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2392].xyz));
        float _4406 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2426 = dot(vec3(_853, _854, _855), vec3(_2419, _2420, _2421));
        float _4417 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4428 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2447 = (exp2(log2(1.0 - (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2448 = 1.0 - _2411;
        float _2458 = (0.5 / (((_2202 * ((_2425 * _2448) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2448) + _2411) * _2425))) * _2425;
        float _4439 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2460 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2461 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2386 = (((_2447 * cbLight._m0[_2396].x) * _2460) * _2461) + _2322;
        _2388 = (((_2447 * cbLight._m0[_2396].y) * _2460) * _2461) + _2323;
        _2390 = (((_2447 * cbLight._m0[_2396].z) * _2460) * _2461) + _2324;
    }
    float _2496;
    float _2498;
    float _2500;
    if (_2128)
    {
        _2496 = _2386;
        _2498 = _2388;
        _2500 = _2390;
    }
    else
    {
        uint _2507 = _2037 + 3u;
        uint _2511 = _2037 + 11u;
        float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _856) * 0.949999988079071044921875);
        float _2526 = _2525 * _2525;
        float _2527 = cbLight._m0[_2507].x + _932;
        float _2528 = cbLight._m0[_2507].y + _933;
        float _2529 = cbLight._m0[_2507].z + _934;
        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
        float _2534 = _2533 * _2527;
        float _2535 = _2533 * _2528;
        float _2536 = _2533 * _2529;
        float _2537 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2507].xyz));
        float _4455 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2541 = dot(vec3(_853, _854, _855), vec3(_2534, _2535, _2536));
        float _4466 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2545 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2534, _2535, _2536));
        float _4477 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _2526 * _2526;
        float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
        float _2562 = (exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2563 = 1.0 - _2526;
        float _2573 = (0.5 / (((_2202 * ((_2540 * _2563) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2563) + _2526) * _2540))) * _2540;
        float _4488 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2496 = (((_2562 * cbLight._m0[_2511].x) * _2575) * _2576) + _2386;
        _2498 = (((_2562 * cbLight._m0[_2511].y) * _2575) * _2576) + _2388;
        _2500 = (((_2562 * cbLight._m0[_2511].z) * _2575) * _2576) + _2390;
    }
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_2035.y == 0u)
    {
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2651;
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2651;
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2651;
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.x;
        uint _2678 = uint((float(_2666.y) * floor(float(uint(cbSceneParam._m0[85u].y * _941) / _2667))) + floor(float(uint(cbSceneParam._m0[85u].x * _940) / _2667)));
        float _2688 = (log2(_2654 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2689 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        uint _2692 = uint(isnan(14.0) ? _2689 : (isnan(_2689) ? 14.0 : min(_2689, 14.0)));
        uvec4 _2697 = texelFetch(g_lightClusterGridBuffer, int(((_2692 << 2u) + (_2678 << 6u)) >> 2u));
        uint _2698 = _2697.x;
        uint _2699 = _2666.z;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        if (((((1u << ((_2699 >> 4u) & 15u)) + 4294967295u) & _2698) == 0u) || ((_2699 & 240u) == 0u))
        {
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
        }
        else
        {
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            uint _2949 = 0u;
            uint _2958;
            bool _2959;
            for (;;)
            {
                _2958 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_2949 << 2u)) >> 2u)).x;
                _2959 = _2958 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2959)
                {
                    frontier_phi_61_pred = _2943;
                    frontier_phi_61_pred_1 = _2948;
                    frontier_phi_61_pred_2 = _2947;
                    frontier_phi_61_pred_3 = _2946;
                    frontier_phi_61_pred_4 = _2945;
                    frontier_phi_61_pred_5 = _2944;
                }
                else
                {
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    uint _3073;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2958;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    for (;;)
                    {
                        uint _3077 = uint(findLSB(_3073)) + (_2949 << 5u);
                        uint _3074 = (_3073 + 4294967295u) & _3073;
                        uint _3079 = _3077 * 48u;
                        vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 3u)).x));
                        uint _3099 = (_3077 * 48u) + 4u;
                        vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 3u)).x));
                        uint _3118 = (_3077 * 48u) + 8u;
                        vec3 _3129 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x));
                        float _3133 = _3093.x - _2652;
                        float _3134 = _3093.y - _2653;
                        float _3135 = _3093.z - _2654;
                        float _3136 = dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135));
                        float _3139 = inversesqrt(_3136);
                        float _3140 = _3139 * _3133;
                        float _3141 = _3139 * _3134;
                        float _3142 = _3139 * _3135;
                        float _3143 = dot(vec3(_959, _962, _965), vec3(_3140, _3141, _3142));
                        float _3148 = 1.0 - (_3136 * _3093.w);
                        float _4514 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3149 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3150 = sqrt(_3136) * _3112.w;
                        float _3153 = 1.39999997615814208984375 / (_3150 + 1.39999997615814208984375);
                        float _3154 = _3153 * _3153;
                        float _3157 = ((1.0 - _3154) * _3143) + _3154;
                        float _3160 = _3150 * _3150;
                        float _3164 = ((isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0))) * _3149) / ((_3160 * 0.699999988079071044921875) + 1.0);
                        float _3168 = (-0.0) - _2652;
                        float _3169 = (-0.0) - _2653;
                        float _3170 = (-0.0) - _2654;
                        float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                        float _3175 = _3174 * _3168;
                        float _3176 = _3174 * _3169;
                        float _3177 = _3174 * _3170;
                        float _3185 = exp2(log2(1.0 / ((_3160 * 3.5) + 5.0)) * 0.25);
                        float _3186 = 1.0 - _1019;
                        float _3193 = sqrt(1.0 - ((1.0 - (_3186 * _3186)) * (1.0 - (_3185 * _3185))));
                        float _3194 = _3193 * _3193;
                        float _3195 = _3194 * _3194;
                        float _3196 = _3175 + _3140;
                        float _3197 = _3176 + _3141;
                        float _3198 = _3177 + _3142;
                        float _3202 = inversesqrt(dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198)));
                        float _3206 = dot(vec3(_959, _962, _965), vec3(_3175, _3176, _3177));
                        float _4530 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3209 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3210 = dot(vec3(_959, _962, _965), vec3(_3202 * _3196, _3202 * _3197, _3202 * _3198));
                        float _4541 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3217 = ((_3213 * _3213) * (_3195 + (-1.0))) + 1.0;
                        float _3218 = _3153 * _3194;
                        float _3219 = _3218 * _3218;
                        float _3222 = ((1.0 - _3219) * _3143) + _3219;
                        float _4552 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3223 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3224 = 1.0 - _3194;
                        float _3234 = (0.5 / (((_3223 * ((_3209 * _3224) + _3194)) + 9.9999999392252902907785028219223e-09) + (((_3223 * _3224) + _3194) * _3209))) * _3223;
                        float _4563 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3245 = (((_3195 * 3.1415927410125732421875) * (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) / ((_3217 * _3217) * ((_3160 * 2.1991131305694580078125) + 3.141590118408203125))) * _3149;
                        _3002 = (_3164 * _3112.x) + _3070;
                        _3003 = (_3164 * _3112.y) + _3071;
                        _3004 = (_3164 * _3112.z) + _3072;
                        _2999 = (_3245 * _3129.x) + _3067;
                        _3000 = (_3245 * _3129.y) + _3068;
                        _3001 = (_3245 * _3129.z) + _3069;
                        if (_3074 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3074;
                        }
                    }
                    frontier_phi_61_pred = _2999;
                    frontier_phi_61_pred_1 = _3004;
                    frontier_phi_61_pred_2 = _3003;
                    frontier_phi_61_pred_3 = _3002;
                    frontier_phi_61_pred_4 = _3001;
                    frontier_phi_61_pred_5 = _3000;
                }
                _2800 = frontier_phi_61_pred;
                _2810 = frontier_phi_61_pred_1;
                _2808 = frontier_phi_61_pred_2;
                _2806 = frontier_phi_61_pred_3;
                _2804 = frontier_phi_61_pred_4;
                _2802 = frontier_phi_61_pred_5;
                uint _2950 = _2949 + 1u;
                if (_2950 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2943 = _2800;
                    _2944 = _2802;
                    _2945 = _2804;
                    _2946 = _2806;
                    _2947 = _2808;
                    _2948 = _2810;
                    _2949 = _2950;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
        }
        uvec4 _2813 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2814 = _2813.z;
        uint _2816 = (_2814 >> 8u) & 15u;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        if (((4294967295u << _2816) & _2698) == 0u)
        {
            _2911 = _2799;
            _2913 = _2801;
            _2915 = _2803;
            _2917 = _2805;
            _2919 = _2807;
            _2921 = _2809;
        }
        else
        {
            float _2936 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
            float _2937 = _2936 * _2652;
            float _2938 = _2936 * _2653;
            float _2939 = _2936 * _2654;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2816 < ((_2814 >> 12u) & 15u))
            {
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _3050 = _2799;
                float _3051 = _2801;
                float _3052 = _2803;
                float _3053 = _2805;
                float _3054 = _2807;
                float _3055 = _2809;
                uint _3056 = _2816;
                uint _3065;
                bool _3066;
                for (;;)
                {
                    _3065 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_3056 << 2u)) >> 2u)).x;
                    _3066 = _3065 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3066)
                    {
                        frontier_phi_67_pred = _3053;
                        frontier_phi_67_pred_1 = _3054;
                        frontier_phi_67_pred_2 = _3055;
                        frontier_phi_67_pred_3 = _3052;
                        frontier_phi_67_pred_4 = _3051;
                        frontier_phi_67_pred_5 = _3050;
                    }
                    else
                    {
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3263 = _3050;
                        float _3264 = _3051;
                        float _3265 = _3052;
                        float _3266 = _3053;
                        float _3267 = _3054;
                        float _3268 = _3055;
                        uint _3269 = _3065;
                        uint _3270;
                        vec4 _3295;
                        float _3296;
                        vec4 _3311;
                        vec3 _3323;
                        vec4 _3338;
                        vec4 _3353;
                        float _3399;
                        bool _3400;
                        for (;;)
                        {
                            uint _3280 = ((_3056 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3269));
                            _3270 = (_3269 + 4294967295u) & _3269;
                            uint _3282 = _3280 * 40u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            _3296 = _3295.w;
                            uint _3298 = (_3280 * 40u) + 4u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3280 * 40u) + 8u;
                            _3323 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x));
                            uint _3325 = (_3280 * 40u) + 16u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3280 * 40u) + 20u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3355 = (_3280 * 40u) + 24u;
                            vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3374 = (_3280 * 40u) + 28u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            _3399 = fma(_2654, _3387.z, fma(_2653, _3387.y, _3387.x * _2652)) + _3387.w;
                            _3400 = !((fma(_2654, _3368.z, fma(_2653, _3368.y, _3368.x * _2652)) + _3368.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3400)
                            {
                                float _3427 = _3295.x - _2652;
                                float _3428 = _3295.y - _2653;
                                float _3429 = _3295.z - _2654;
                                float _3430 = dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429));
                                float _3433 = inversesqrt(_3430);
                                float _3434 = _3433 * _3427;
                                float _3435 = _3433 * _3428;
                                float _3436 = _3433 * _3429;
                                float _3440 = 1.0 - (_3430 / (_3296 * _3296));
                                float _4574 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3445 = sqrt(_3430) * _3311.w;
                                float _3447 = 1.39999997615814208984375 / (_3445 + 1.39999997615814208984375);
                                float _3448 = _3447 * _3447;
                                float _3451 = ((1.0 - _3448) * dot(vec3(_3434, _3435, _3436), vec3(_959, _962, _965))) + _3448;
                                float _3454 = _3445 * _3445;
                                float _3458 = (fma(_2654, _3338.z, fma(_2653, _3338.y, _3338.x * _2652)) + _3338.w) / _3399;
                                float _3459 = (fma(_2654, _3353.z, fma(_2653, _3353.y, _3353.x * _2652)) + _3353.w) / _3399;
                                float _3463 = 1.0 - dot(vec2(_3458, _3459), vec2(_3458, _3459));
                                float _4590 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3465 = _3464 * (((isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0))) * _3441) / ((_3454 * 0.699999988079071044921875) + 1.0));
                                float _3477 = exp2(log2(1.0 / ((_3454 * 3.5) + 5.0)) * 0.25);
                                float _3478 = 1.0 - _1019;
                                float _3485 = sqrt(1.0 - ((1.0 - (_3478 * _3478)) * (1.0 - (_3477 * _3477))));
                                float _3486 = _3485 * _3485;
                                float _3487 = _3486 * _3486;
                                float _3488 = _3434 - _2937;
                                float _3489 = _3435 - _2938;
                                float _3490 = _3436 - _2939;
                                float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                                float _3498 = dot(vec3(_959, _962, _965), vec3((-0.0) - _2937, (-0.0) - _2938, (-0.0) - _2939));
                                float _4601 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3501 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3502 = dot(vec3(_959, _962, _965), vec3(_3494 * _3488, _3494 * _3489, _3494 * _3490));
                                float _4612 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3505 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3509 = ((_3505 * _3505) * (_3487 + (-1.0))) + 1.0;
                                float _3510 = _3447 * _3486;
                                float _3511 = _3510 * _3510;
                                float _3517 = ((1.0 - _3511) * dot(vec3(_959, _962, _965), vec3(_3434, _3435, _3436))) + _3511;
                                float _4623 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3519 = 1.0 - _3486;
                                float _3529 = (0.5 / (((_3518 * ((_3501 * _3519) + _3486)) + 9.9999999392252902907785028219223e-09) + (((_3518 * _3519) + _3486) * _3501))) * _3518;
                                float _4634 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3539 = (_3464 * _3441) * (((_3487 * 3.1415927410125732421875) * (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) / ((_3509 * _3509) * ((_3454 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3539 * _3323.x;
                                frontier_phi_73_pred_1 = _3539 * _3323.y;
                                frontier_phi_73_pred_2 = _3465 * _3311.z;
                                frontier_phi_73_pred_3 = _3465 * _3311.y;
                                frontier_phi_73_pred_4 = _3465 * _3311.x;
                                frontier_phi_73_pred_5 = _3539 * _3323.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3543 = frontier_phi_73_pred;
                            _3544 = frontier_phi_73_pred_1;
                            _3548 = frontier_phi_73_pred_2;
                            _3547 = frontier_phi_73_pred_3;
                            _3546 = frontier_phi_73_pred_4;
                            _3545 = frontier_phi_73_pred_5;
                            _3253 = _3546 + _3266;
                            _3254 = _3547 + _3267;
                            _3255 = _3548 + _3268;
                            _3250 = _3543 + _3263;
                            _3251 = _3544 + _3264;
                            _3252 = _3545 + _3265;
                            if (_3270 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3270;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3253;
                        frontier_phi_67_pred_1 = _3254;
                        frontier_phi_67_pred_2 = _3255;
                        frontier_phi_67_pred_3 = _3252;
                        frontier_phi_67_pred_4 = _3251;
                        frontier_phi_67_pred_5 = _3250;
                    }
                    _2918 = frontier_phi_67_pred;
                    _2920 = frontier_phi_67_pred_1;
                    _2922 = frontier_phi_67_pred_2;
                    _2916 = frontier_phi_67_pred_3;
                    _2914 = frontier_phi_67_pred_4;
                    _2912 = frontier_phi_67_pred_5;
                    uint _3057 = _3056 + 1u;
                    if (_3057 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3050 = _2912;
                        _3051 = _2914;
                        _3052 = _2916;
                        _3053 = _2918;
                        _3054 = _2920;
                        _3055 = _2922;
                        _3056 = _3057;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2920;
                frontier_phi_55_56_ladder_1 = _2922;
                frontier_phi_55_56_ladder_2 = _2918;
                frontier_phi_55_56_ladder_3 = _2916;
                frontier_phi_55_56_ladder_4 = _2914;
                frontier_phi_55_56_ladder_5 = _2912;
            }
            else
            {
                frontier_phi_55_56_ladder = _2807;
                frontier_phi_55_56_ladder_1 = _2809;
                frontier_phi_55_56_ladder_2 = _2805;
                frontier_phi_55_56_ladder_3 = _2803;
                frontier_phi_55_56_ladder_4 = _2801;
                frontier_phi_55_56_ladder_5 = _2799;
            }
            _2911 = frontier_phi_55_56_ladder_5;
            _2913 = frontier_phi_55_56_ladder_4;
            _2915 = frontier_phi_55_56_ladder_3;
            _2917 = frontier_phi_55_56_ladder_2;
            _2919 = frontier_phi_55_56_ladder;
            _2921 = frontier_phi_55_56_ladder_1;
        }
        float _2926 = isnan(1.0) ? _1003 : (isnan(_1003) ? 1.0 : min(_1003, 1.0));
        _2711 = (_2926 * _2917) + _2166;
        _2713 = (_2926 * _2919) + _2168;
        _2715 = (_2926 * _2921) + _2170;
        _2717 = ((_2911 * 0.039999999105930328369140625) * _2926) + _2496;
        _2719 = ((_2913 * 0.039999999105930328369140625) * _2926) + _2498;
        _2721 = ((_2915 * 0.039999999105930328369140625) * _2926) + _2500;
    }
    else
    {
        _2711 = _2166;
        _2713 = _2168;
        _2715 = _2170;
        _2717 = _2496;
        _2719 = _2498;
        _2721 = _2500;
    }
    float _4650 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4661 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4672 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    uint _2741 = _275 + 6u;
    float _2749 = _940 / cbSceneParam._m0[86u].x;
    float _2750 = _941 / cbSceneParam._m0[86u].y;
    vec4 _2764 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, (log2((isnan(cbSceneParam._m0[77u].w) ? _874 : (isnan(_874) ? cbSceneParam._m0[77u].w : min(_874, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2766 = _2764.x;
    float _2767 = _2764.y;
    float _2768 = _2764.z;
    float _2769 = _2764.w;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    if (_874 > cbSceneParam._m0[78u].w)
    {
        float _2824 = isnan(_874) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _874 : min(cbSceneParam._m0[80u].w, _874));
        float _2825 = _2824 / _874;
        float _2836 = _2825 * _925;
        float _2837 = _926 * _2825;
        float _2838 = (-0.0) - _2837;
        float _2839 = _2825 * _927;
        float _2841 = (cbSceneParam._m0[77u].w * _2838) / _2824;
        float _2842 = _2841 + cbSceneParam._m0[79u].w;
        float _2843 = cbSceneParam._m0[79u].w - _2837;
        float _2849 = sqrt(((_2836 * _2836) + (_2837 * _2837)) + (_2839 * _2839));
        float _2852 = (1.0 - (cbSceneParam._m0[77u].w / _2824)) * _2849;
        float _2857 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2859 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3012;
        if (abs((_2838 - _2841) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3012 = ((((_2842 > 0.0) ? exp2(_2857 * _2842) : (2.0 - exp2(_2859 * _2842))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2852;
        }
        else
        {
            float _2972 = 1.0 / cbSceneParam._m0[80u].x;
            float _2973 = isnan(_2843) ? _2842 : (isnan(_2842) ? _2843 : max(_2842, _2843));
            float _2974 = isnan(_2843) ? _2842 : (isnan(_2842) ? _2843 : min(_2842, _2843));
            float _2983 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : min(_2973, 0.0));
            float _2984 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : min(_2974, 0.0));
            _3012 = ((abs(_2849 / _2838) * cbSceneParam._m0[80u].y) * ((((_2983 - _2984) * 2.0) - ((exp2(_2857 * (isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0)))) - exp2(_2857 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))))) * _2972)) - ((exp2(_2859 * _2983) - exp2(_2859 * _2984)) * _2972))) + (_2852 * cbSceneParam._m0[80u].z);
        }
        vec4 _3014 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, 1.0), 0.0);
        float _3023 = exp2((_3012 * (-1.44269502162933349609375)) * (1.0 - _3014.w));
        float _3024 = log2(_3023);
        float _3040 = log2(_2769);
        _2861 = (exp2(_3040 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].x)) * _3014.x) / cbSceneParam._m0[78u].x)) + _2766;
        _2863 = (exp2(_3040 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].y)) * _3014.y) / cbSceneParam._m0[78u].y)) + _2767;
        _2865 = (exp2(_3040 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].z)) * _3014.z) / cbSceneParam._m0[78u].z)) + _2768;
        _2867 = _3023 * _2769;
    }
    else
    {
        _2861 = _2766;
        _2863 = _2767;
        _2865 = _2768;
        _2867 = _2769;
    }
    float _2879 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2880 = _2879 == 3.0;
    float _2881 = log2(_2867);
    float _2888 = exp2(_2881 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2711 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1003))) + ((_2717 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1808)) * cbPerFrame._m0[3u].x));
    float _2889 = exp2(_2881 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2713 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1003))) + ((_2719 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1808)) * cbPerFrame._m0[3u].x));
    float _2890 = exp2(_2881 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2715 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1003))) + ((_2721 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1808)) * cbPerFrame._m0[3u].x));
    float _2899 = (_2879 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2899 * (_2880 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2861)));
    SV_Target.y = _2899 * (_2880 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2863)));
    SV_Target.z = _2899 * (_2880 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2865)));
    SV_Target.w = cbInstanceData._m0[_2741].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2741].w;
}


