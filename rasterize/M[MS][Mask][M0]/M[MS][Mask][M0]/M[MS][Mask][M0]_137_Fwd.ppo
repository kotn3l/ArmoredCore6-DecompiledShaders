#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1491;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _369.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].z) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3793 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _448 = (_441 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _449 = (_441 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _450 = (_441 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _369.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[24u].z) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3804 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    vec4 _541 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _558 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _560 = _558.x;
    float _570 = dot(vec4(_560, _558.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _582 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _369.z) * 2.0) - ((((_560 - _570) * cbMtdParam._m0[24u].z) + _570) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3815 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _583 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _596 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_583 * ((_541.x * cbMtdParam._m0[14u].x) - _521)) + _521);
    float _599 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_583 * ((_541.y * cbMtdParam._m0[14u].y) - _522)) + _522);
    float _602 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_583 * ((_541.z * cbMtdParam._m0[14u].z) - _523)) + _523);
    vec4 _620 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _640 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _659 = _657.x;
    float _660 = _657.y;
    float _661 = _657.z;
    float _668 = ((_640.x - _659) * _441) + _659;
    float _669 = ((_640.y - _660) * _441) + _660;
    float _670 = ((_640.z - _661) * _441) + _661;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _693 = ((_682.x - _668) * _514) + _668;
    float _694 = ((_682.y - _669) * _514) + _669;
    float _695 = ((_682.z - _670) * _514) + _670;
    vec4 _707 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _720 = ((_707.z - _695) * _583) + _695;
    float _723 = ((((_707.x - _693) * _583) + _693) * 2.0) + (-1.0);
    float _725 = ((((_707.y - _694) * _583) + _694) * 2.0) + (-1.0);
    float _726 = dot(vec2(_723, _725), vec2(_723, _725));
    float _3826 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _731 = sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))));
    vec4 _745 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _770 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _772 = _770.x;
    float _773 = 1.0 - _772;
    float _779 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _782 = ((isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : min(_779, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _791 = (_782 - ((((((_772 - _773) * cbMtdParam._m0[24u].w) + _773) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _782))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3847 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _792 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _799 = (_792 * ((_620.x * cbMtdParam._m0[18u].x) - _596)) + _596;
    float _800 = (_792 * ((_620.y * cbMtdParam._m0[18u].y) - _599)) + _599;
    float _801 = (_792 * ((_620.z * cbMtdParam._m0[18u].z) - _602)) + _602;
    vec4 _813 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _815 = _813.x;
    float _816 = 1.0 - _815;
    float _843 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_815 - _816) * cbMtdParam._m0[24u].y) + _816) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3858 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _844 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _852 = ((((cbMtdParam._m0[10u].x - _799) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _844) + _799;
    float _853 = ((((cbMtdParam._m0[10u].y - _800) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _844) + _800;
    float _854 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _801)) * _844) + _801;
    float _858 = (cbMtdParam._m0[19u].w * (_745.z - _720)) + _720;
    vec4 _872 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _879 = (_872.x * 2.0) + (-1.0);
    float _880 = (_872.y * 2.0) + (-1.0);
    float _881 = dot(vec2(_879, _880), vec2(_879, _880));
    float _3869 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _889 = (_792 * (_872.z - _858)) + _858;
    float _892 = ((cbMtdParam._m0[23u].y - _889) * _844) + _889;
    vec4 _911 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _917 = (_911.x * 2.0) + (-1.0);
    float _918 = (_911.y * 2.0) + (-1.0);
    float _919 = dot(vec2(_917, _918), vec2(_917, _918));
    float _3880 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _927 = (((_745.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _723;
    float _928 = (((_745.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _725;
    float _940 = (((_879 - _927) + (cbMtdParam._m0[21u].x * _927)) * _792) + _927;
    float _941 = (((_880 - _928) + (cbMtdParam._m0[21u].x * _928)) * _792) + _928;
    float _942 = (_792 * (sqrt(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) - _731)) + _731;
    float _953 = (((_917 - _940) + (_940 * cbMtdParam._m0[22u].z)) * _844) + _940;
    float _954 = (((_918 - _941) + (_941 * cbMtdParam._m0[22u].z)) * _844) + _941;
    float _955 = ((sqrt(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) - _942) * _844) + _942;
    float _957 = cbMtdParam._m0[22u].x + _745.w;
    float _960 = fma(_955, _248 * NORMAL.x, fma(_954, _255 * TANGENT.x, (_241 * _233) * _953));
    float _963 = fma(_955, _248 * NORMAL.y, fma(_954, _255 * TANGENT.y, (_241 * _234) * _953));
    float _966 = fma(_955, _248 * NORMAL.z, fma(_954, _255 * TANGENT.z, (_241 * _235) * _953));
    float _970 = inversesqrt(dot(vec3(_960, _963, _966), vec3(_960, _963, _966)));
    float _971 = _970 * _960;
    float _972 = _970 * _963;
    float _973 = _970 * _966;
    float _3891 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _974 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _3913 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _3924 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _3935 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _992 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1042 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1032);
    float _1043 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1032);
    float _1044 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1032);
    float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
    float _1049 = _1042 * _1048;
    float _1050 = _1043 * _1048;
    float _1051 = _1044 * _1048;
    float _1057 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1058 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1076 = fma(_973, cbSceneParam._m0[5u].z, fma(_972, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _971));
    float _1079 = fma(_973, cbSceneParam._m0[6u].z, fma(_972, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _971));
    float _1082 = fma(_973, cbSceneParam._m0[7u].z, fma(_972, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _971));
    uint _1096 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1102 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_1096].x;
    float _1103 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_1096].y;
    float _1104 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_1096].z;
    float _3946 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1107 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    vec4 _1116 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1057, cbSceneParam._m0[86u].y * _1058));
    float _1120 = ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * TEXCOORD_5.w) * _1116.x;
    float _1121 = dot(vec3(_971, _972, _973), vec3(_1049, _1050, _1051));
    float _1124 = _1121 * 2.0;
    float _1128 = (_1124 * _971) - _1049;
    float _1129 = (_1124 * _972) - _1050;
    float _1130 = (_1124 * _973) - _1051;
    float _1134 = abs(dot(vec3(_1049, _1050, _1051), vec3(_971, _972, _973)));
    float _3979 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _1136 = sqrt(_974);
    float _1149 = exp2((_1136 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1136 * 3.0));
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1185 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1189 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1490;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1215 = fma(_1189, cbModelParam._m0[26u].z, fma(_1185, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1181));
        float _1219 = fma(_1189, cbModelParam._m0[27u].z, fma(_1185, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1181));
        float _1223 = fma(_1189, cbModelParam._m0[28u].z, fma(_1185, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1181));
        float _1248 = _1181 + _971;
        float _1249 = _1185 + _972;
        float _1250 = _1189 + _973;
        float _1260 = fma(_1250, cbModelParam._m0[26u].z, fma(_1249, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1248)) - _1215;
        float _1261 = fma(_1250, cbModelParam._m0[27u].z, fma(_1249, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1248)) - _1219;
        float _1262 = fma(_1250, cbModelParam._m0[28u].z, fma(_1249, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1248)) - _1223;
        float _1266 = inversesqrt(dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262)));
        float _1279 = ((_1266 * _1260) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1215 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1266 * _1261) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1219 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1266 * _1262) / cbModelParam._m0[34u].z) + ((((((_1223 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        float _1318 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1284.x + (-0.5));
        float _1320 = _1318 * (_1284.y + (-0.5));
        float _1321 = _1318 * (_1284.z + (-0.5));
        float _1328 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1291.x + (-0.5));
        float _1330 = _1328 * (_1291.y + (-0.5));
        float _1331 = _1328 * (_1291.z + (-0.5));
        float _1338 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1298.x + (-0.5));
        float _1340 = _1338 * (_1298.y + (-0.5));
        float _1341 = _1338 * (_1298.z + (-0.5));
        float _1348 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1305.x + (-0.5));
        float _1350 = _1348 * (_1305.y + (-0.5));
        float _1351 = _1348 * (_1305.z + (-0.5));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = _1319 * 0.5;
        float _1356 = _1329 * 0.5;
        float _1357 = _1339 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1372 = (dot(vec3(_971, _972, _973), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1382 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4027 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1384 + 1.0))) + _1389) * _1352;
        float _1399 = _1320 * 0.5;
        float _1400 = _1330 * 0.5;
        float _1401 = _1340 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_971, _972, _973), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4060 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1426 + 1.0))) + _1431) * _1353;
        float _1441 = _1321 * 0.5;
        float _1442 = _1331 * 0.5;
        float _1443 = _1341 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_971, _972, _973), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4093 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1468 + 1.0))) + _1473) * _1354;
        _1490 = _1321;
        _1492 = _1320;
        _1493 = _1319;
        _1494 = _1331;
        _1495 = _1330;
        _1496 = _1329;
        _1497 = _1341;
        _1498 = _1340;
        _1499 = _1339;
        _1500 = _1354;
        _1501 = _1353;
        _1502 = _1352;
        _1503 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1504 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1505 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
    }
    else
    {
        _1490 = _1491;
        _1492 = _1491;
        _1493 = _1491;
        _1494 = _1491;
        _1495 = _1491;
        _1496 = _1491;
        _1497 = _1491;
        _1498 = _1491;
        _1499 = _1491;
        _1500 = _1491;
        _1501 = _1491;
        _1502 = _1491;
        _1503 = 0.0;
        _1504 = 0.0;
        _1505 = 0.0;
    }
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1528 = fma(_1189, cbModelParam._m0[30u].z, fma(_1185, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1181));
        float _1532 = fma(_1189, cbModelParam._m0[31u].z, fma(_1185, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1181));
        float _1536 = fma(_1189, cbModelParam._m0[32u].z, fma(_1185, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1181));
        float _1559 = _1181 + _971;
        float _1560 = _1185 + _972;
        float _1561 = _1189 + _973;
        float _1571 = fma(_1561, cbModelParam._m0[30u].z, fma(_1560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1559)) - _1528;
        float _1572 = fma(_1561, cbModelParam._m0[31u].z, fma(_1560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1559)) - _1532;
        float _1573 = fma(_1561, cbModelParam._m0[32u].z, fma(_1560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1559)) - _1536;
        float _1577 = inversesqrt(dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573)));
        float _1590 = ((_1577 * _1571) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1528 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1591 = ((_1577 * _1572) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1532 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1592 = ((_1577 * _1573) / cbModelParam._m0[35u].z) + ((((((_1536 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        float _1627 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1594.x + (-0.5));
        float _1629 = _1627 * (_1594.y + (-0.5));
        float _1630 = _1627 * (_1594.z + (-0.5));
        float _1637 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1601.x + (-0.5));
        float _1639 = _1637 * (_1601.y + (-0.5));
        float _1640 = _1637 * (_1601.z + (-0.5));
        float _1647 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1608.x + (-0.5));
        float _1649 = _1647 * (_1608.y + (-0.5));
        float _1650 = _1647 * (_1608.z + (-0.5));
        float _1657 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1615.x + (-0.5));
        float _1659 = _1657 * (_1615.y + (-0.5));
        float _1660 = _1657 * (_1615.z + (-0.5));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1663 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1664 = _1628 * 0.5;
        float _1665 = _1638 * 0.5;
        float _1666 = _1648 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_971, _972, _973), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4156 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1691 + 1.0))) + _1696) * _1661;
        float _1706 = _1629 * 0.5;
        float _1707 = _1639 * 0.5;
        float _1708 = _1649 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_971, _972, _973), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1662 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4189 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1733 + 1.0))) + _1738) * _1662;
        float _1748 = _1630 * 0.5;
        float _1749 = _1640 * 0.5;
        float _1750 = _1650 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_971, _972, _973), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1663 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4222 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1775 + 1.0))) + _1780) * _1663;
        _1797 = _1630;
        _1798 = _1629;
        _1799 = _1628;
        _1800 = _1640;
        _1801 = _1639;
        _1802 = _1638;
        _1803 = _1650;
        _1804 = _1649;
        _1805 = _1648;
        _1806 = _1663;
        _1807 = _1662;
        _1808 = _1661;
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
        _1810 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
        _1811 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
    }
    else
    {
        _1797 = _1491;
        _1798 = _1491;
        _1799 = _1491;
        _1800 = _1491;
        _1801 = _1491;
        _1802 = _1491;
        _1803 = _1491;
        _1804 = _1491;
        _1805 = _1491;
        _1806 = _1491;
        _1807 = _1491;
        _1808 = _1491;
        _1809 = 0.0;
        _1810 = 0.0;
        _1811 = 0.0;
    }
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1503)) + _1503;
    float _1822 = (cbModelParam._m0[1u].x * (_1810 - _1504)) + _1504;
    float _1823 = (cbModelParam._m0[1u].x * (_1811 - _1505)) + _1505;
    float _1844 = fma(_1823, cbSceneParam._m0[89u].z, fma(_1822, cbSceneParam._m0[89u].y, _1821 * cbSceneParam._m0[89u].x));
    float _1847 = fma(_1823, cbSceneParam._m0[90u].z, fma(_1822, cbSceneParam._m0[90u].y, _1821 * cbSceneParam._m0[90u].x));
    float _1850 = fma(_1823, cbSceneParam._m0[91u].z, fma(_1822, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1821));
    float _1865 = _1128 * 0.5;
    float _1866 = _1129 * 0.5;
    float _1867 = _1130 * 0.5;
    float _1868 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1799, _1802, _1805, _1808));
    float _1871 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1798, _1801, _1804, _1807));
    float _1874 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1908;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1881 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1490, _1494, _1497, _1500));
        float _1885 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1492, _1495, _1498, _1501));
        float _1889 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1493, _1496, _1499, _1502));
        float _1896 = dot(vec4(cbModelParam._m0[39u]), vec4(_1865, _1866, _1867, 1.0));
        _1908 = dot(vec3(isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1896) ? 0.0 : (isnan(0.0) ? _1896 : max(0.0, _1896))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1908 = 1.0;
    }
    float _1919;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1910 = dot(vec4(cbModelParam._m0[40u]), vec4(_1865, _1866, _1867, 1.0));
        _1919 = dot(vec3(isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1919 = 1.0;
    }
    float _1923 = (_1919 * cbModelParam._m0[1u].x) + (_1908 * (1.0 - cbModelParam._m0[1u].x));
    float _1933 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _974);
    float _1934 = isnan(_1933) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1933 : min(cbModelParam._m0[25u].z, _1933));
    float _2014;
    float _2016;
    float _2018;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1981 = fma(_1189, cbModelParam._m0[13u].z, fma(_1185, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1181)) + cbModelParam._m0[13u].w;
        float _1985 = fma(_1189, cbModelParam._m0[14u].z, fma(_1185, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1181)) + cbModelParam._m0[14u].w;
        float _1989 = fma(_1189, cbModelParam._m0[15u].z, fma(_1185, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1181)) + cbModelParam._m0[15u].w;
        float _1992 = fma(_1130, cbModelParam._m0[13u].z, fma(_1129, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1128));
        float _1995 = fma(_1130, cbModelParam._m0[14u].z, fma(_1129, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1128));
        float _1998 = fma(_1130, cbModelParam._m0[15u].z, fma(_1129, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1128));
        float _2026;
        if (_1992 > 0.0)
        {
            _2026 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2026 = frontier_phi_14_12_ladder;
        }
        float _2226;
        if (_1995 > 0.0)
        {
            _2226 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2226 = frontier_phi_23_19_ladder;
        }
        float _2469;
        if (_1998 > 0.0)
        {
            _2469 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2469 = frontier_phi_35_30_ladder;
        }
        float _2471 = isnan(_2226) ? _2026 : (isnan(_2026) ? _2226 : min(_2026, _2226));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1992) + _1981;
        float _2477 = (_2472 * _1995) + _1985;
        float _2478 = (_2472 * _1998) + _1989;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2479;
        float _2483 = _2479 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 > _2483) || ((_2477 < _2481) || ((_2476 < _2481) || (_2476 > _2483))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2478, cbModelParam._m0[9u].z, fma(_2477, cbModelParam._m0[9u].y, _2476 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2478, cbModelParam._m0[10u].z, fma(_2477, cbModelParam._m0[10u].y, _2476 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2478, cbModelParam._m0[11u].z, fma(_2477, cbModelParam._m0[11u].y, _2476 * cbModelParam._m0[11u].x))), _1934);
            frontier_phi_13_35_ladder = _2602.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2602.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2602.x * cbModelParam._m0[1u].y;
        }
        _2014 = frontier_phi_13_35_ladder_2;
        _2016 = frontier_phi_13_35_ladder_1;
        _2018 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2002 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1128, _1129, _1130), _1934);
        _2014 = _2002.x * cbModelParam._m0[1u].y;
        _2016 = _2002.y * cbModelParam._m0[1u].y;
        _2018 = _2002.z * cbModelParam._m0[1u].y;
    }
    float _2022 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _974);
    float _2023 = isnan(_2022) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2022 : min(cbModelParam._m0[25u].w, _2022));
    float _2112;
    float _2114;
    float _2116;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2076 = fma(_1189, cbModelParam._m0[21u].z, fma(_1185, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1181)) + cbModelParam._m0[21u].w;
        float _2080 = fma(_1189, cbModelParam._m0[22u].z, fma(_1185, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1181)) + cbModelParam._m0[22u].w;
        float _2084 = fma(_1189, cbModelParam._m0[23u].z, fma(_1185, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1181)) + cbModelParam._m0[23u].w;
        float _2087 = fma(_1130, cbModelParam._m0[21u].z, fma(_1129, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1128));
        float _2090 = fma(_1130, cbModelParam._m0[22u].z, fma(_1129, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1128));
        float _2093 = fma(_1130, cbModelParam._m0[23u].z, fma(_1129, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1128));
        float _2231;
        if (_2087 > 0.0)
        {
            _2231 = abs((1.0 - _2076) / _2087);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2076 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2231 = frontier_phi_25_21_ladder;
        }
        float _2496;
        if (_2090 > 0.0)
        {
            _2496 = abs((1.0 - _2080) / _2090);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2080 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2496 = frontier_phi_37_32_ladder;
        }
        float _2701;
        if (_2093 > 0.0)
        {
            _2701 = abs((1.0 - _2084) / _2093);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2084 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2701 = frontier_phi_46_43_ladder;
        }
        float _2703 = isnan(_2496) ? _2231 : (isnan(_2231) ? _2496 : min(_2231, _2496));
        float _2704 = isnan(_2701) ? _2703 : (isnan(_2703) ? _2701 : min(_2703, _2701));
        float _2708 = (_2704 * _2087) + _2076;
        float _2709 = (_2704 * _2090) + _2080;
        float _2710 = (_2704 * _2093) + _2084;
        float _2711 = _2704 * 9.9999997473787516355514526367188e-05;
        float _2712 = (-1.0) - _2711;
        float _2714 = _2711 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2710 > _2714) || ((_2710 < _2712) || ((_2709 > _2714) || ((_2709 < _2712) || ((_2708 < _2712) || (_2708 > _2714))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2909 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2710, cbModelParam._m0[17u].z, fma(_2709, cbModelParam._m0[17u].y, _2708 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2710, cbModelParam._m0[18u].z, fma(_2709, cbModelParam._m0[18u].y, _2708 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2710, cbModelParam._m0[19u].z, fma(_2709, cbModelParam._m0[19u].y, _2708 * cbModelParam._m0[19u].x))), _2023);
            frontier_phi_22_46_ladder = _2909.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2909.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2909.x * cbModelParam._m0[1u].z;
        }
        _2112 = frontier_phi_22_46_ladder_2;
        _2114 = frontier_phi_22_46_ladder_1;
        _2116 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2096 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1128, _1129, _1130), _2023);
        _2112 = _2096.x * cbModelParam._m0[1u].z;
        _2114 = _2096.y * cbModelParam._m0[1u].z;
        _2116 = _2096.z * cbModelParam._m0[1u].z;
    }
    float _2128 = ((((1.0 - _1149) * ((_1136 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1149 * _1136)) * _1120;
    float _2129 = _2128 * ((cbModelParam._m0[1u].w * (_2112 - _2014)) + _2014);
    float _2130 = _2128 * ((cbModelParam._m0[1u].w * (_2114 - _2016)) + _2016);
    float _2131 = _2128 * ((cbModelParam._m0[1u].w * (_2116 - _2018)) + _2018);
    float _2134 = fma(_2131, cbSceneParam._m0[89u].z, fma(_2130, cbSceneParam._m0[89u].y, _2129 * cbSceneParam._m0[89u].x));
    float _2137 = fma(_2131, cbSceneParam._m0[90u].z, fma(_2130, cbSceneParam._m0[90u].y, _2129 * cbSceneParam._m0[90u].x));
    float _2140 = fma(_2131, cbSceneParam._m0[91u].z, fma(_2130, cbSceneParam._m0[91u].y, _2129 * cbSceneParam._m0[91u].x));
    uvec4 _2150 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2152 = _2150.x * 14u;
    uint _2153 = _2152 + 13u;
    float _2160 = _1120 + (-1.0);
    float _2165 = (cbLight._m0[_2153].x * _2160) + 1.0;
    float _2166 = (cbLight._m0[_2153].y * _2160) + 1.0;
    float _2167 = (cbLight._m0[_2153].z * _2160) + 1.0;
    float _2168 = (cbLight._m0[_2153].w * _2160) + 1.0;
    uint _2169 = _2152 + 5u;
    float _2175 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2179 = _2152 + 4u;
    float _2185 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2189 = _2152 | 1u;
    float _2200 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_971, _972, _973));
    float _2203 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_971, _972, _973));
    float _4358 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _4369 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2208 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2210 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2217 = ((cbLight._m0[_2169].x * _2175) * _2210) + ((cbLight._m0[_2179].x * _2185) * _2208);
    float _2218 = ((_2175 * cbLight._m0[_2169].y) * _2210) + ((_2185 * cbLight._m0[_2179].y) * _2208);
    float _2219 = ((_2175 * cbLight._m0[_2169].z) * _2210) + ((_2185 * cbLight._m0[_2179].z) * _2208);
    uvec4 _2223 = floatBitsToUint(cbLight._m0[_2152 + 12u]);
    bool _2225 = _2223.x == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2225)
    {
        _2236 = _2217;
        _2238 = _2218;
        _2240 = _2219;
    }
    else
    {
        uint _2244 = _2152 + 6u;
        float _2260 = (dot(vec3(cbLight._m0[_2152 + 2u].xyz), vec3(_971, _972, _973)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4380 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2263 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2236 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2217;
        _2238 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2218;
        _2240 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2219;
    }
    bool _2243 = _2223.y == 0u;
    float _2281;
    float _2283;
    float _2285;
    if (_2243)
    {
        _2281 = _2236;
        _2283 = _2238;
        _2285 = _2240;
    }
    else
    {
        uint _2440 = _2152 + 7u;
        float _2456 = (dot(vec3(cbLight._m0[_2152 + 3u].xyz), vec3(_971, _972, _973)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4396 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2459 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2281 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2236;
        _2283 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2238;
        _2285 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2240;
    }
    uint _2288 = _2152 + 8u;
    float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _974) * 0.949999988079071044921875);
    float _2302 = _2301 * _2301;
    float _2303 = cbLight._m0[_2152].x + _1049;
    float _2304 = cbLight._m0[_2152].y + _1050;
    float _2305 = cbLight._m0[_2152].z + _1051;
    float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
    float _2310 = _2309 * _2303;
    float _2311 = _2309 * _2304;
    float _2312 = _2309 * _2305;
    float _2313 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2152].xyz));
    float _4412 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _4423 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _2317 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2318 = dot(vec3(_971, _972, _973), vec3(_2310, _2311, _2312));
    float _4434 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2310, _2311, _2312));
    float _4445 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2302 * _2302;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2341 = (exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2342 = 1.0 - _2302;
    float _2353 = (0.5 / (((_2317 * ((_2316 * _2342) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2342) + _2302) * _2316))) * _2316;
    float _4456 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2355 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    uint _2366 = _2152 + 9u;
    float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _974) * 0.949999988079071044921875);
    float _2378 = _2377 * _2377;
    float _2379 = cbLight._m0[_2189].x + _1049;
    float _2380 = cbLight._m0[_2189].y + _1050;
    float _2381 = cbLight._m0[_2189].z + _1051;
    float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
    float _2386 = _2385 * _2379;
    float _2387 = _2385 * _2380;
    float _2388 = _2385 * _2381;
    float _2389 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2189].xyz));
    float _4467 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2393 = dot(vec3(_971, _972, _973), vec3(_2386, _2387, _2388));
    float _4478 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2386, _2387, _2388));
    float _4489 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2378 * _2378;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2414 = (exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2415 = 1.0 - _2378;
    float _2425 = (0.5 / (((_2317 * ((_2392 * _2415) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2415) + _2378) * _2392))) * _2392;
    float _4500 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    float _2437 = (((_2414 * cbLight._m0[_2366].x) * _2427) * _2175) + (((_2341 * cbLight._m0[_2288].x) * _2355) * _2185);
    float _2438 = (((_2414 * cbLight._m0[_2366].y) * _2427) * _2175) + (((_2341 * cbLight._m0[_2288].y) * _2355) * _2185);
    float _2439 = (((_2414 * cbLight._m0[_2366].z) * _2427) * _2175) + (((_2341 * cbLight._m0[_2288].z) * _2355) * _2185);
    float _2501;
    float _2503;
    float _2505;
    if (_2225)
    {
        _2501 = _2437;
        _2503 = _2438;
        _2505 = _2439;
    }
    else
    {
        uint _2507 = _2152 + 2u;
        uint _2511 = _2152 + 10u;
        float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _974) * 0.949999988079071044921875);
        float _2526 = _2525 * _2525;
        float _2527 = cbLight._m0[_2507].x + _1049;
        float _2528 = cbLight._m0[_2507].y + _1050;
        float _2529 = cbLight._m0[_2507].z + _1051;
        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
        float _2534 = _2533 * _2527;
        float _2535 = _2533 * _2528;
        float _2536 = _2533 * _2529;
        float _2537 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2507].xyz));
        float _4511 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2541 = dot(vec3(_971, _972, _973), vec3(_2534, _2535, _2536));
        float _4522 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2545 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2534, _2535, _2536));
        float _4533 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _2526 * _2526;
        float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
        float _2562 = (exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2563 = 1.0 - _2526;
        float _2573 = (0.5 / (((_2317 * ((_2540 * _2563) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2563) + _2526) * _2540))) * _2540;
        float _4544 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2501 = (((_2562 * cbLight._m0[_2511].x) * _2575) * _2576) + _2437;
        _2503 = (((_2562 * cbLight._m0[_2511].y) * _2575) * _2576) + _2438;
        _2505 = (((_2562 * cbLight._m0[_2511].z) * _2575) * _2576) + _2439;
    }
    float _2611;
    float _2613;
    float _2615;
    if (_2243)
    {
        _2611 = _2501;
        _2613 = _2503;
        _2615 = _2505;
    }
    else
    {
        uint _2622 = _2152 + 3u;
        uint _2626 = _2152 + 11u;
        float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2622].w)) * _974) * 0.949999988079071044921875);
        float _2641 = _2640 * _2640;
        float _2642 = cbLight._m0[_2622].x + _1049;
        float _2643 = cbLight._m0[_2622].y + _1050;
        float _2644 = cbLight._m0[_2622].z + _1051;
        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
        float _2649 = _2648 * _2642;
        float _2650 = _2648 * _2643;
        float _2651 = _2648 * _2644;
        float _2652 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2622].xyz));
        float _4560 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2656 = dot(vec3(_971, _972, _973), vec3(_2649, _2650, _2651));
        float _4571 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2660 = dot(vec3(cbLight._m0[_2622].xyz), vec3(_2649, _2650, _2651));
        float _4582 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2664 = _2641 * _2641;
        float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
        float _2677 = (exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2678 = 1.0 - _2641;
        float _2688 = (0.5 / (((_2317 * ((_2655 * _2678) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2678) + _2641) * _2655))) * _2655;
        float _4593 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2690 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
        float _2691 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2611 = (((_2677 * cbLight._m0[_2626].x) * _2690) * _2691) + _2501;
        _2613 = (((_2677 * cbLight._m0[_2626].y) * _2690) * _2691) + _2503;
        _2615 = (((_2677 * cbLight._m0[_2626].z) * _2690) * _2691) + _2505;
    }
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    if (_2150.y == 0u)
    {
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2767 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2766;
        float _2768 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2766;
        float _2769 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2766;
        uvec4 _2781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2782 = _2781.x;
        uint _2793 = uint((float(_2781.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1058) / _2782))) + floor(float(uint(cbSceneParam._m0[85u].x * _1057) / _2782)));
        float _2803 = (log2(_2769 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2804 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        uint _2807 = uint(isnan(14.0) ? _2804 : (isnan(_2804) ? 14.0 : min(_2804, 14.0)));
        uvec4 _2812 = texelFetch(g_lightClusterGridBuffer, int(((_2807 << 2u) + (_2793 << 6u)) >> 2u));
        uint _2813 = _2812.x;
        uint _2814 = _2781.z;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        if (((((1u << ((_2814 >> 4u) & 15u)) + 4294967295u) & _2813) == 0u) || ((_2814 & 240u) == 0u))
        {
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
        }
        else
        {
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            uint _3065 = 0u;
            uint _3074;
            bool _3075;
            for (;;)
            {
                _3074 = texelFetch(g_lightClassification, int((((_2807 << 5u) + (_2793 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                _3075 = _3074 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3075)
                {
                    frontier_phi_61_pred = _3059;
                    frontier_phi_61_pred_1 = _3064;
                    frontier_phi_61_pred_2 = _3063;
                    frontier_phi_61_pred_3 = _3062;
                    frontier_phi_61_pred_4 = _3061;
                    frontier_phi_61_pred_5 = _3060;
                }
                else
                {
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    uint _3189;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3062;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3074;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    for (;;)
                    {
                        uint _3193 = uint(findLSB(_3189)) + (_3065 << 5u);
                        uint _3190 = (_3189 + 4294967295u) & _3189;
                        uint _3195 = _3193 * 48u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3215 = (_3193 * 48u) + 4u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3234 = (_3193 * 48u) + 8u;
                        vec3 _3245 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x));
                        float _3249 = _3209.x - _2767;
                        float _3250 = _3209.y - _2768;
                        float _3251 = _3209.z - _2769;
                        float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                        float _3255 = inversesqrt(_3252);
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3259 = dot(vec3(_1076, _1079, _1082), vec3(_3256, _3257, _3258));
                        float _3264 = 1.0 - (_3252 * _3209.w);
                        float _4619 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3265 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3266 = sqrt(_3252) * _3228.w;
                        float _3269 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3259) + _3270;
                        float _3276 = _3266 * _3266;
                        float _3280 = ((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3265) / ((_3276 * 0.699999988079071044921875) + 1.0);
                        float _3284 = (-0.0) - _2767;
                        float _3285 = (-0.0) - _2768;
                        float _3286 = (-0.0) - _2769;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3291 = _3290 * _3284;
                        float _3292 = _3290 * _3285;
                        float _3293 = _3290 * _3286;
                        float _3301 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                        float _3302 = 1.0 - _1136;
                        float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                        float _3310 = _3309 * _3309;
                        float _3311 = _3310 * _3310;
                        float _3312 = _3291 + _3256;
                        float _3313 = _3292 + _3257;
                        float _3314 = _3293 + _3258;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3322 = dot(vec3(_1076, _1079, _1082), vec3(_3291, _3292, _3293));
                        float _4635 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3326 = dot(vec3(_1076, _1079, _1082), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                        float _4646 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                        float _3334 = _3269 * _3310;
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3259) + _3335;
                        float _4657 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3340 = 1.0 - _3310;
                        float _3350 = (0.5 / (((_3339 * ((_3325 * _3340) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3310) * _3325))) * _3339;
                        float _4668 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3361 = (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) / ((_3333 * _3333) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125))) * _3265;
                        _3118 = (_3280 * _3228.x) + _3186;
                        _3119 = (_3280 * _3228.y) + _3187;
                        _3120 = (_3280 * _3228.z) + _3188;
                        _3115 = (_3361 * _3245.x) + _3183;
                        _3116 = (_3361 * _3245.y) + _3184;
                        _3117 = (_3361 * _3245.z) + _3185;
                        if (_3190 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3118;
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3190;
                        }
                    }
                    frontier_phi_61_pred = _3115;
                    frontier_phi_61_pred_1 = _3120;
                    frontier_phi_61_pred_2 = _3119;
                    frontier_phi_61_pred_3 = _3118;
                    frontier_phi_61_pred_4 = _3117;
                    frontier_phi_61_pred_5 = _3116;
                }
                _2915 = frontier_phi_61_pred;
                _2925 = frontier_phi_61_pred_1;
                _2923 = frontier_phi_61_pred_2;
                _2921 = frontier_phi_61_pred_3;
                _2919 = frontier_phi_61_pred_4;
                _2917 = frontier_phi_61_pred_5;
                uint _3066 = _3065 + 1u;
                if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3059 = _2915;
                    _3060 = _2917;
                    _3061 = _2919;
                    _3062 = _2921;
                    _3063 = _2923;
                    _3064 = _2925;
                    _3065 = _3066;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
        }
        uvec4 _2928 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2929 = _2928.z;
        uint _2931 = (_2929 >> 8u) & 15u;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        if (((4294967295u << _2931) & _2813) == 0u)
        {
            _3027 = _2914;
            _3029 = _2916;
            _3031 = _2918;
            _3033 = _2920;
            _3035 = _2922;
            _3037 = _2924;
        }
        else
        {
            float _3052 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
            float _3053 = _3052 * _2767;
            float _3054 = _3052 * _2768;
            float _3055 = _3052 * _2769;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2931 < ((_2929 >> 12u) & 15u))
            {
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3166 = _2914;
                float _3167 = _2916;
                float _3168 = _2918;
                float _3169 = _2920;
                float _3170 = _2922;
                float _3171 = _2924;
                uint _3172 = _2931;
                uint _3181;
                bool _3182;
                for (;;)
                {
                    _3181 = texelFetch(g_lightClassification, int((((_2807 << 5u) + (_2793 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                    _3182 = _3181 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3182)
                    {
                        frontier_phi_67_pred = _3169;
                        frontier_phi_67_pred_1 = _3170;
                        frontier_phi_67_pred_2 = _3171;
                        frontier_phi_67_pred_3 = _3168;
                        frontier_phi_67_pred_4 = _3167;
                        frontier_phi_67_pred_5 = _3166;
                    }
                    else
                    {
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3379 = _3166;
                        float _3380 = _3167;
                        float _3381 = _3168;
                        float _3382 = _3169;
                        float _3383 = _3170;
                        float _3384 = _3171;
                        uint _3385 = _3181;
                        uint _3386;
                        vec4 _3411;
                        float _3412;
                        vec4 _3427;
                        vec3 _3439;
                        vec4 _3454;
                        vec4 _3469;
                        float _3515;
                        bool _3516;
                        for (;;)
                        {
                            uint _3396 = ((_3172 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3385));
                            _3386 = (_3385 + 4294967295u) & _3385;
                            uint _3398 = _3396 * 40u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            _3412 = _3411.w;
                            uint _3414 = (_3396 * 40u) + 4u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3396 * 40u) + 8u;
                            _3439 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x));
                            uint _3441 = (_3396 * 40u) + 16u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3396 * 40u) + 20u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3471 = (_3396 * 40u) + 24u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3490 = (_3396 * 40u) + 28u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            _3515 = fma(_2769, _3503.z, fma(_2768, _3503.y, _3503.x * _2767)) + _3503.w;
                            _3516 = !((fma(_2769, _3484.z, fma(_2768, _3484.y, _3484.x * _2767)) + _3484.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3516)
                            {
                                float _3543 = _3411.x - _2767;
                                float _3544 = _3411.y - _2768;
                                float _3545 = _3411.z - _2769;
                                float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                                float _3549 = inversesqrt(_3546);
                                float _3550 = _3549 * _3543;
                                float _3551 = _3549 * _3544;
                                float _3552 = _3549 * _3545;
                                float _3556 = 1.0 - (_3546 / (_3412 * _3412));
                                float _4679 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3561 = sqrt(_3546) * _3427.w;
                                float _3563 = 1.39999997615814208984375 / (_3561 + 1.39999997615814208984375);
                                float _3564 = _3563 * _3563;
                                float _3567 = ((1.0 - _3564) * dot(vec3(_3550, _3551, _3552), vec3(_1076, _1079, _1082))) + _3564;
                                float _3570 = _3561 * _3561;
                                float _3574 = (fma(_2769, _3454.z, fma(_2768, _3454.y, _3454.x * _2767)) + _3454.w) / _3515;
                                float _3575 = (fma(_2769, _3469.z, fma(_2768, _3469.y, _3469.x * _2767)) + _3469.w) / _3515;
                                float _3579 = 1.0 - dot(vec2(_3574, _3575), vec2(_3574, _3575));
                                float _4695 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3581 = _3580 * (((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3557) / ((_3570 * 0.699999988079071044921875) + 1.0));
                                float _3593 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                                float _3594 = 1.0 - _1136;
                                float _3601 = sqrt(1.0 - ((1.0 - (_3594 * _3594)) * (1.0 - (_3593 * _3593))));
                                float _3602 = _3601 * _3601;
                                float _3603 = _3602 * _3602;
                                float _3604 = _3550 - _3053;
                                float _3605 = _3551 - _3054;
                                float _3606 = _3552 - _3055;
                                float _3610 = inversesqrt(dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606)));
                                float _3614 = dot(vec3(_1076, _1079, _1082), vec3((-0.0) - _3053, (-0.0) - _3054, (-0.0) - _3055));
                                float _4706 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3618 = dot(vec3(_1076, _1079, _1082), vec3(_3610 * _3604, _3610 * _3605, _3610 * _3606));
                                float _4717 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3625 = ((_3621 * _3621) * (_3603 + (-1.0))) + 1.0;
                                float _3626 = _3563 * _3602;
                                float _3627 = _3626 * _3626;
                                float _3633 = ((1.0 - _3627) * dot(vec3(_1076, _1079, _1082), vec3(_3550, _3551, _3552))) + _3627;
                                float _4728 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3635 = 1.0 - _3602;
                                float _3645 = (0.5 / (((_3634 * ((_3617 * _3635) + _3602)) + 9.9999999392252902907785028219223e-09) + (((_3634 * _3635) + _3602) * _3617))) * _3634;
                                float _4739 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3655 = (_3580 * _3557) * (((_3603 * 3.1415927410125732421875) * (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) / ((_3625 * _3625) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3655 * _3439.x;
                                frontier_phi_73_pred_1 = _3655 * _3439.y;
                                frontier_phi_73_pred_2 = _3581 * _3427.z;
                                frontier_phi_73_pred_3 = _3581 * _3427.y;
                                frontier_phi_73_pred_4 = _3581 * _3427.x;
                                frontier_phi_73_pred_5 = _3655 * _3439.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3659 = frontier_phi_73_pred;
                            _3660 = frontier_phi_73_pred_1;
                            _3664 = frontier_phi_73_pred_2;
                            _3663 = frontier_phi_73_pred_3;
                            _3662 = frontier_phi_73_pred_4;
                            _3661 = frontier_phi_73_pred_5;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            if (_3386 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3386;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3369;
                        frontier_phi_67_pred_1 = _3370;
                        frontier_phi_67_pred_2 = _3371;
                        frontier_phi_67_pred_3 = _3368;
                        frontier_phi_67_pred_4 = _3367;
                        frontier_phi_67_pred_5 = _3366;
                    }
                    _3034 = frontier_phi_67_pred;
                    _3036 = frontier_phi_67_pred_1;
                    _3038 = frontier_phi_67_pred_2;
                    _3032 = frontier_phi_67_pred_3;
                    _3030 = frontier_phi_67_pred_4;
                    _3028 = frontier_phi_67_pred_5;
                    uint _3173 = _3172 + 1u;
                    if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3166 = _3028;
                        _3167 = _3030;
                        _3168 = _3032;
                        _3169 = _3034;
                        _3170 = _3036;
                        _3171 = _3038;
                        _3172 = _3173;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3036;
                frontier_phi_55_56_ladder_1 = _3038;
                frontier_phi_55_56_ladder_2 = _3034;
                frontier_phi_55_56_ladder_3 = _3032;
                frontier_phi_55_56_ladder_4 = _3030;
                frontier_phi_55_56_ladder_5 = _3028;
            }
            else
            {
                frontier_phi_55_56_ladder = _2922;
                frontier_phi_55_56_ladder_1 = _2924;
                frontier_phi_55_56_ladder_2 = _2920;
                frontier_phi_55_56_ladder_3 = _2918;
                frontier_phi_55_56_ladder_4 = _2916;
                frontier_phi_55_56_ladder_5 = _2914;
            }
            _3027 = frontier_phi_55_56_ladder_5;
            _3029 = frontier_phi_55_56_ladder_4;
            _3031 = frontier_phi_55_56_ladder_3;
            _3033 = frontier_phi_55_56_ladder_2;
            _3035 = frontier_phi_55_56_ladder;
            _3037 = frontier_phi_55_56_ladder_1;
        }
        float _3042 = isnan(1.0) ? _1120 : (isnan(_1120) ? 1.0 : min(_1120, 1.0));
        _2826 = (_3042 * _3033) + _2281;
        _2828 = (_3042 * _3035) + _2283;
        _2830 = (_3042 * _3037) + _2285;
        _2832 = ((_3027 * 0.039999999105930328369140625) * _3042) + _2611;
        _2834 = ((_3029 * 0.039999999105930328369140625) * _3042) + _2613;
        _2836 = ((_3031 * 0.039999999105930328369140625) * _3042) + _2615;
    }
    else
    {
        _2826 = _2281;
        _2828 = _2283;
        _2830 = _2285;
        _2832 = _2611;
        _2834 = _2613;
        _2836 = _2615;
    }
    float _4755 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _4766 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _4777 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    uint _2856 = _261 + 6u;
    float _2864 = _1057 / cbSceneParam._m0[86u].x;
    float _2865 = _1058 / cbSceneParam._m0[86u].y;
    vec4 _2879 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2864, _2865, (log2((isnan(cbSceneParam._m0[77u].w) ? _992 : (isnan(_992) ? cbSceneParam._m0[77u].w : min(_992, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2881 = _2879.x;
    float _2882 = _2879.y;
    float _2883 = _2879.z;
    float _2884 = _2879.w;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_992 > cbSceneParam._m0[78u].w)
    {
        float _2939 = isnan(_992) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _992 : min(cbSceneParam._m0[80u].w, _992));
        float _2940 = _2939 / _992;
        float _2951 = _2940 * _1042;
        float _2952 = _1043 * _2940;
        float _2953 = (-0.0) - _2952;
        float _2955 = _2940 * _1044;
        float _2957 = (cbSceneParam._m0[77u].w * _2953) / _2939;
        float _2958 = _2957 + cbSceneParam._m0[79u].w;
        float _2959 = cbSceneParam._m0[79u].w - _2952;
        float _2965 = sqrt(((_2951 * _2951) + (_2952 * _2952)) + (_2955 * _2955));
        float _2968 = (1.0 - (cbSceneParam._m0[77u].w / _2939)) * _2965;
        float _2973 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2975 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3128;
        if (abs((_2953 - _2957) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3128 = ((((_2958 > 0.0) ? exp2(_2973 * _2958) : (2.0 - exp2(_2975 * _2958))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2968;
        }
        else
        {
            float _3088 = 1.0 / cbSceneParam._m0[80u].x;
            float _3089 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : max(_2958, _2959));
            float _3090 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : min(_2958, _2959));
            float _3099 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : min(_3089, 0.0));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            _3128 = ((abs(_2965 / _2953) * cbSceneParam._m0[80u].y) * ((((_3099 - _3100) * 2.0) - ((exp2(_2973 * (isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0)))) - exp2(_2973 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))))) * _3088)) - ((exp2(_2975 * _3099) - exp2(_2975 * _3100)) * _3088))) + (_2968 * cbSceneParam._m0[80u].z);
        }
        vec4 _3130 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2864, _2865, 1.0), 0.0);
        float _3139 = exp2((_3128 * (-1.44269502162933349609375)) * (1.0 - _3130.w));
        float _3140 = log2(_3139);
        float _3156 = log2(_2884);
        _2977 = (exp2(_3156 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].x)) * _3130.x) / cbSceneParam._m0[78u].x)) + _2881;
        _2979 = (exp2(_3156 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].y)) * _3130.y) / cbSceneParam._m0[78u].y)) + _2882;
        _2981 = (exp2(_3156 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].z)) * _3130.z) / cbSceneParam._m0[78u].z)) + _2883;
        _2983 = _3139 * _2884;
    }
    else
    {
        _2977 = _2881;
        _2979 = _2882;
        _2981 = _2883;
        _2983 = _2884;
    }
    float _2995 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2996 = _2995 == 3.0;
    float _2997 = log2(_2983);
    float _3004 = exp2(_2997 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2826 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1120))) + ((_2832 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1923)) * cbPerFrame._m0[3u].x));
    float _3005 = exp2(_2997 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2828 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1120))) + ((_2834 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1923)) * cbPerFrame._m0[3u].x));
    float _3006 = exp2(_2997 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2830 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1120))) + ((_2836 + ((isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0))) * _1923)) * cbPerFrame._m0[3u].x));
    float _3015 = (_2995 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3015 * (_2996 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2977)));
    SV_Target.y = _3015 * (_2996 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2979)));
    SV_Target.z = _3015 * (_2996 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2981)));
    SV_Target.w = cbInstanceData._m0[_2856].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2856].w;
}


