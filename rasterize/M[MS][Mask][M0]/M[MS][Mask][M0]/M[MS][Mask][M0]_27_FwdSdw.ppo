#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1290;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].z) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3879 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _436 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_423 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317);
    float _439 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_423 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318);
    float _442 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_423 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319);
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _477 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _479 = _477.x;
    float _480 = _477.y;
    float _481 = _477.z;
    float _490 = ((_460.z - _481) * _423) + _481;
    float _493 = ((((_460.x - _479) * _423) + _479) * 2.0) + (-1.0);
    float _495 = ((((_460.y - _480) * _423) + _480) * 2.0) + (-1.0);
    float _496 = dot(vec2(_493, _495), vec2(_493, _495));
    float _3890 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _529 = (((_517.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _493;
    float _530 = (((_517.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _495;
    float _533 = fma(_501, _237, fma(_530, _244, _529 * _230));
    float _536 = fma(_501, _238, fma(_530, _245, _529 * _231));
    float _539 = fma(_501, _239, fma(_530, _246, _529 * _232));
    float _543 = inversesqrt(dot(vec3(_533, _536, _539), vec3(_533, _536, _539)));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _572 = _570.x;
    float _573 = 1.0 - _572;
    float _579 = (cbMtdParam._m0[19u].x + dot(vec4(_543 * _533, _543 * _536, _543 * _539, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_572 - _573) * cbMtdParam._m0[24u].w) + _573) * cbMtdParam._m0[21u].z);
    float _3901 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _582 = (-0.0) - cbMtdParam._m0[24u].x;
    float _584 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _584 : (isnan(_584) ? 1.0 : min(_584, 1.0));
    float _592 = _580 - ((_580 * TEXCOORD_8.x) * _585);
    float _593 = _580 - ((_580 * TEXCOORD_8.y) * _585);
    float _594 = _580 - ((_580 * TEXCOORD_8.z) * _585);
    float _601 = (_592 * (cbMtdParam._m0[17u].x - _436)) + _436;
    float _602 = (_593 * (cbMtdParam._m0[17u].y - _439)) + _439;
    float _603 = (_594 * (cbMtdParam._m0[17u].z - _442)) + _442;
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _617 = _615.x;
    float _618 = 1.0 - _617;
    float _646 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_617 - _618) * cbMtdParam._m0[24u].y) + _618) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3922 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _647 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _655 = ((((cbMtdParam._m0[10u].x - _601) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _647) + _601;
    float _656 = ((((cbMtdParam._m0[10u].y - _602) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _647) + _602;
    float _657 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _603)) * _647) + _603;
    float _661 = (cbMtdParam._m0[19u].w * (_517.z - _490)) + _490;
    vec4 _675 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _682 = (_675.x * 2.0) + (-1.0);
    float _683 = (_675.y * 2.0) + (-1.0);
    float _684 = dot(vec2(_682, _683), vec2(_682, _683));
    float _3933 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _692 = ((_675.z - _661) * _592) + _661;
    float _695 = ((cbMtdParam._m0[23u].y - _692) * _647) + _692;
    vec4 _714 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _720 = (_714.x * 2.0) + (-1.0);
    float _721 = (_714.y * 2.0) + (-1.0);
    float _722 = dot(vec2(_720, _721), vec2(_720, _721));
    float _3944 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _737 = ((sqrt(1.0 - (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) - _501) * _594) + _501;
    float _740 = (((_682 - _529) * _592) + _529) + (cbMtdParam._m0[21u].x * _529);
    float _741 = (((_683 - _530) * _593) + _530) + (cbMtdParam._m0[21u].x * _530);
    float _752 = (((_720 - _740) + (_740 * cbMtdParam._m0[22u].z)) * _647) + _740;
    float _753 = (((_721 - _741) + (_741 * cbMtdParam._m0[22u].z)) * _647) + _741;
    float _754 = (_647 * (sqrt(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) - _737)) + _737;
    float _756 = cbMtdParam._m0[22u].x + _517.w;
    float _759 = fma(_754, _237, fma(_753, _244, _752 * _230));
    float _762 = fma(_754, _238, fma(_753, _245, _752 * _231));
    float _765 = fma(_754, _239, fma(_753, _246, _752 * _232));
    float _769 = inversesqrt(dot(vec3(_759, _762, _765), vec3(_759, _762, _765)));
    float _770 = _769 * _759;
    float _771 = _769 * _762;
    float _772 = _769 * _765;
    float _3955 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _773 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3977 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _3988 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3999 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _791 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _841 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _831);
    float _842 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _831);
    float _843 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _831);
    float _847 = inversesqrt(dot(vec3(_841, _842, _843), vec3(_841, _842, _843)));
    float _848 = _841 * _847;
    float _849 = _842 * _847;
    float _850 = _843 * _847;
    float _856 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _857 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _875 = fma(_772, cbSceneParam._m0[5u].z, fma(_771, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _770));
    float _878 = fma(_772, cbSceneParam._m0[6u].z, fma(_771, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _770));
    float _881 = fma(_772, cbSceneParam._m0[7u].z, fma(_771, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _770));
    uint _895 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _901 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * cbInstanceData._m0[_895].x;
    float _902 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * cbInstanceData._m0[_895].y;
    float _903 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_895].z;
    float _4010 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    vec4 _915 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _856, cbSceneParam._m0[86u].y * _857));
    float _919 = ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * TEXCOORD_5.w) * _915.x;
    float _920 = dot(vec3(_770, _771, _772), vec3(_848, _849, _850));
    float _923 = _920 * 2.0;
    float _927 = (_923 * _770) - _848;
    float _928 = (_923 * _771) - _849;
    float _929 = (_923 * _772) - _850;
    float _933 = abs(dot(vec3(_848, _849, _850), vec3(_770, _771, _772)));
    float _4043 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _935 = sqrt(_773);
    float _948 = exp2((_935 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_935 * 3.0));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1289;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1014 = fma(_988, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _980));
        float _1018 = fma(_988, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _980));
        float _1022 = fma(_988, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _980));
        float _1047 = _980 + _770;
        float _1048 = _984 + _771;
        float _1049 = _988 + _772;
        float _1059 = fma(_1049, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047)) - _1014;
        float _1060 = fma(_1049, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047)) - _1018;
        float _1061 = fma(_1049, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047)) - _1022;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1014 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1018 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[34u].z) + ((((((_1022 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1117 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1083.x + (-0.5));
        float _1119 = _1117 * (_1083.y + (-0.5));
        float _1120 = _1117 * (_1083.z + (-0.5));
        float _1127 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1090.x + (-0.5));
        float _1129 = _1127 * (_1090.y + (-0.5));
        float _1130 = _1127 * (_1090.z + (-0.5));
        float _1137 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1097.x + (-0.5));
        float _1139 = _1137 * (_1097.y + (-0.5));
        float _1140 = _1137 * (_1097.z + (-0.5));
        float _1147 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1104.x + (-0.5));
        float _1149 = _1147 * (_1104.y + (-0.5));
        float _1150 = _1147 * (_1104.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1171 = (dot(vec3(_770, _771, _772), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1181 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _4091 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1183 + 1.0))) + _1188) * _1151;
        float _1198 = _1119 * 0.5;
        float _1199 = _1129 * 0.5;
        float _1200 = _1139 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_770, _771, _772), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _4124 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1225 + 1.0))) + _1230) * _1152;
        float _1240 = _1120 * 0.5;
        float _1241 = _1130 * 0.5;
        float _1242 = _1140 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_770, _771, _772), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4157 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1267 + 1.0))) + _1272) * _1153;
        _1289 = _1120;
        _1291 = _1119;
        _1292 = _1118;
        _1293 = _1130;
        _1294 = _1129;
        _1295 = _1128;
        _1296 = _1140;
        _1297 = _1139;
        _1298 = _1138;
        _1299 = _1153;
        _1300 = _1152;
        _1301 = _1151;
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _1290;
        _1291 = _1290;
        _1292 = _1290;
        _1293 = _1290;
        _1294 = _1290;
        _1295 = _1290;
        _1296 = _1290;
        _1297 = _1290;
        _1298 = _1290;
        _1299 = _1290;
        _1300 = _1290;
        _1301 = _1290;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1329 = fma(_988, cbModelParam._m0[30u].z, fma(_984, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980));
        float _1333 = fma(_988, cbModelParam._m0[31u].z, fma(_984, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980));
        float _1337 = fma(_988, cbModelParam._m0[32u].z, fma(_984, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980));
        float _1360 = _980 + _770;
        float _1361 = _984 + _771;
        float _1362 = _988 + _772;
        float _1372 = fma(_1362, cbModelParam._m0[30u].z, fma(_1361, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1360)) - _1329;
        float _1373 = fma(_1362, cbModelParam._m0[31u].z, fma(_1361, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1360)) - _1333;
        float _1374 = fma(_1362, cbModelParam._m0[32u].z, fma(_1361, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1360)) - _1337;
        float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
        float _1391 = ((_1378 * _1372) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1329 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1378 * _1373) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1333 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1378 * _1374) / cbModelParam._m0[35u].z) + ((((((_1337 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        float _1428 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1395.x + (-0.5));
        float _1430 = _1428 * (_1395.y + (-0.5));
        float _1431 = _1428 * (_1395.z + (-0.5));
        float _1438 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1402.x + (-0.5));
        float _1440 = _1438 * (_1402.y + (-0.5));
        float _1441 = _1438 * (_1402.z + (-0.5));
        float _1448 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1409.x + (-0.5));
        float _1450 = _1448 * (_1409.y + (-0.5));
        float _1451 = _1448 * (_1409.z + (-0.5));
        float _1458 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1416.x + (-0.5));
        float _1460 = _1458 * (_1416.y + (-0.5));
        float _1461 = _1458 * (_1416.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_770, _771, _772), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4220 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1492 + 1.0))) + _1497) * _1462;
        float _1507 = _1430 * 0.5;
        float _1508 = _1440 * 0.5;
        float _1509 = _1450 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_770, _771, _772), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4253 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1534 + 1.0))) + _1539) * _1463;
        float _1549 = _1431 * 0.5;
        float _1550 = _1441 * 0.5;
        float _1551 = _1451 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_770, _771, _772), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4286 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1576 + 1.0))) + _1581) * _1464;
        _1598 = _1431;
        _1599 = _1430;
        _1600 = _1429;
        _1601 = _1441;
        _1602 = _1440;
        _1603 = _1439;
        _1604 = _1451;
        _1605 = _1450;
        _1606 = _1449;
        _1607 = _1464;
        _1608 = _1463;
        _1609 = _1462;
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1290;
        _1599 = _1290;
        _1600 = _1290;
        _1601 = _1290;
        _1602 = _1290;
        _1603 = _1290;
        _1604 = _1290;
        _1605 = _1290;
        _1606 = _1290;
        _1607 = _1290;
        _1608 = _1290;
        _1609 = _1290;
        _1610 = 0.0;
        _1611 = 0.0;
        _1612 = 0.0;
    }
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1302)) + _1302;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1303)) + _1303;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1304)) + _1304;
    float _1645 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1622));
    float _1666 = _927 * 0.5;
    float _1667 = _928 * 0.5;
    float _1668 = _929 * 0.5;
    float _1669 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1672 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1675 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1709;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1682 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1289, _1293, _1296, _1299));
        float _1686 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1690 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1697 = dot(vec4(cbModelParam._m0[39u]), vec4(_1666, _1667, _1668, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1720;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1711 = dot(vec4(cbModelParam._m0[40u]), vec4(_1666, _1667, _1668, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1724 = (_1720 * cbModelParam._m0[1u].x) + (_1709 * (1.0 - cbModelParam._m0[1u].x));
    float _1734 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _773);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1734 : min(cbModelParam._m0[25u].z, _1734));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1783 = fma(_988, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980)) + cbModelParam._m0[13u].w;
        float _1787 = fma(_988, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980)) + cbModelParam._m0[14u].w;
        float _1791 = fma(_988, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980)) + cbModelParam._m0[15u].w;
        float _1794 = fma(_929, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _927));
        float _1797 = fma(_929, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _927));
        float _1800 = fma(_929, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _927));
        float _1828;
        if (_1794 > 0.0)
        {
            _1828 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1828 = frontier_phi_14_12_ladder;
        }
        float _1998;
        if (_1797 > 0.0)
        {
            _1998 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1998 = frontier_phi_23_19_ladder;
        }
        float _2293;
        if (_1800 > 0.0)
        {
            _2293 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2293 = frontier_phi_35_30_ladder;
        }
        float _2295 = isnan(_1998) ? _1828 : (isnan(_1828) ? _1998 : min(_1828, _1998));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1794) + _1783;
        float _2301 = (_2296 * _1797) + _1787;
        float _2302 = (_2296 * _1800) + _1791;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2305 = (-1.0) - _2303;
        float _2307 = _2303 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2302 > _2307) || ((_2302 < _2305) || ((_2301 > _2307) || ((_2301 < _2305) || ((_2300 < _2305) || (_2300 > _2307))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2302, cbModelParam._m0[9u].z, fma(_2301, cbModelParam._m0[9u].y, _2300 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2302, cbModelParam._m0[10u].z, fma(_2301, cbModelParam._m0[10u].y, _2300 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2302, cbModelParam._m0[11u].z, fma(_2301, cbModelParam._m0[11u].y, _2300 * cbModelParam._m0[11u].x))), _1735);
            frontier_phi_13_35_ladder = _2447.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2447.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2447.x * cbModelParam._m0[1u].y;
        }
        _1816 = frontier_phi_13_35_ladder_2;
        _1818 = frontier_phi_13_35_ladder_1;
        _1820 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_927, _928, _929), _1735);
        _1816 = _1804.x * cbModelParam._m0[1u].y;
        _1818 = _1804.y * cbModelParam._m0[1u].y;
        _1820 = _1804.z * cbModelParam._m0[1u].y;
    }
    float _1824 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _773);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1824 : min(cbModelParam._m0[25u].w, _1824));
    float _1915;
    float _1917;
    float _1919;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1879 = fma(_988, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980)) + cbModelParam._m0[21u].w;
        float _1883 = fma(_988, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980)) + cbModelParam._m0[22u].w;
        float _1887 = fma(_988, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980)) + cbModelParam._m0[23u].w;
        float _1890 = fma(_929, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _927));
        float _1893 = fma(_929, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _927));
        float _1896 = fma(_929, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _927));
        float _2003;
        if (_1890 > 0.0)
        {
            _2003 = abs((1.0 - _1879) / _1890);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1879 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2003 = frontier_phi_25_21_ladder;
        }
        float _2320;
        if (_1893 > 0.0)
        {
            _2320 = abs((1.0 - _1883) / _1893);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1883 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2320 = frontier_phi_37_32_ladder;
        }
        float _2647;
        if (_1896 > 0.0)
        {
            _2647 = abs((1.0 - _1887) / _1896);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1887 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2647 = frontier_phi_47_44_ladder;
        }
        float _2649 = isnan(_2320) ? _2003 : (isnan(_2003) ? _2320 : min(_2003, _2320));
        float _2650 = isnan(_2647) ? _2649 : (isnan(_2649) ? _2647 : min(_2649, _2647));
        float _2654 = (_2650 * _1890) + _1879;
        float _2655 = (_2650 * _1893) + _1883;
        float _2656 = (_2650 * _1896) + _1887;
        float _2657 = _2650 * 9.9999997473787516355514526367188e-05;
        float _2658 = (-1.0) - _2657;
        float _2660 = _2657 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2656 > _2660) || ((_2656 < _2658) || ((_2655 > _2660) || ((_2655 < _2658) || ((_2654 < _2658) || (_2654 > _2660))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2656, cbModelParam._m0[17u].z, fma(_2655, cbModelParam._m0[17u].y, _2654 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2656, cbModelParam._m0[18u].z, fma(_2655, cbModelParam._m0[18u].y, _2654 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2656, cbModelParam._m0[19u].z, fma(_2655, cbModelParam._m0[19u].y, _2654 * cbModelParam._m0[19u].x))), _1825);
            frontier_phi_22_47_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1915 = frontier_phi_22_47_ladder_2;
        _1917 = frontier_phi_22_47_ladder_1;
        _1919 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_927, _928, _929), _1825);
        _1915 = _1899.x * cbModelParam._m0[1u].z;
        _1917 = _1899.y * cbModelParam._m0[1u].z;
        _1919 = _1899.z * cbModelParam._m0[1u].z;
    }
    float _1931 = ((((1.0 - _948) * ((_935 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_948 * _935)) * _919;
    float _1932 = _1931 * ((cbModelParam._m0[1u].w * (_1915 - _1816)) + _1816);
    float _1933 = _1931 * ((cbModelParam._m0[1u].w * (_1917 - _1818)) + _1818);
    float _1934 = _1931 * ((cbModelParam._m0[1u].w * (_1919 - _1820)) + _1820);
    float _1937 = fma(_1934, cbSceneParam._m0[89u].z, fma(_1933, cbSceneParam._m0[89u].y, _1932 * cbSceneParam._m0[89u].x));
    float _1940 = fma(_1934, cbSceneParam._m0[90u].z, fma(_1933, cbSceneParam._m0[90u].y, _1932 * cbSceneParam._m0[90u].x));
    float _1943 = fma(_1934, cbSceneParam._m0[91u].z, fma(_1933, cbSceneParam._m0[91u].y, _1932 * cbSceneParam._m0[91u].x));
    float _1977 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1981 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1985 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1990 = _1977 / _1989;
    float _1991 = _1981 / _1989;
    float _1992 = _1985 / _1989;
    float _2139;
    float _2140;
    float _2141;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2019 = ((uint(_1992 > cbSceneParam._m0[59u].y) + uint(_1992 > cbSceneParam._m0[59u].x)) + uint(_1992 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2020 = _2019 + 43u;
        uint _2028 = _2019 + 44u;
        uint _2036 = _2019 + 45u;
        uint _2044 = _2019 + 46u;
        float _2055 = fma(_1989, cbSceneParam._m0[_2020].w, fma(_1985, cbSceneParam._m0[_2020].z, fma(_1981, cbSceneParam._m0[_2020].y, _1977 * cbSceneParam._m0[_2020].x)));
        float _2059 = fma(_1989, cbSceneParam._m0[_2028].w, fma(_1985, cbSceneParam._m0[_2028].z, fma(_1981, cbSceneParam._m0[_2028].y, _1977 * cbSceneParam._m0[_2028].x)));
        float _2067 = fma(_1989, cbSceneParam._m0[_2044].w, fma(_1985, cbSceneParam._m0[_2044].z, fma(_1981, cbSceneParam._m0[_2044].y, _1977 * cbSceneParam._m0[_2044].x)));
        float _2072 = cbSceneParam._m0[33u].z * _2067;
        float _2074 = cbSceneParam._m0[33u].w * _2067;
        float _2077 = fma(_1989, cbSceneParam._m0[_2036].w, fma(_1985, cbSceneParam._m0[_2036].z, fma(_1981, cbSceneParam._m0[_2036].y, _1977 * cbSceneParam._m0[_2036].x))) / _2067;
        float _2125 = (cbSceneParam._m0[33u].x - sqrt(((_1991 * _1991) + (_1990 * _1990)) + (_1992 * _1992))) * cbSceneParam._m0[33u].y;
        float _4412 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2132 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2072 + _2055) / _2067, (_2074 + _2059) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 + _2055) / _2067, (_2059 - _2072) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 - _2072) / _2067, (_2059 - _2074) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 - _2074) / _2067, (_2072 + _2059) / _2067), _2077), 0.0)).x), vec4(0.25)));
        _2139 = 1.0 - (_2132 * cbSceneParam._m0[34u].x);
        _2140 = 1.0 - (_2132 * cbSceneParam._m0[34u].y);
        _2141 = 1.0 - (_2132 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2139 = 1.0;
        _2140 = 1.0;
        _2141 = 1.0;
    }
    float _2205;
    float _2207;
    float _2209;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2193 = fma(_1989, cbSceneParam._m0[63u].w, fma(_1985, cbSceneParam._m0[63u].z, fma(_1981, cbSceneParam._m0[63u].y, _1977 * cbSceneParam._m0[63u].x)));
        float _2194 = fma(_1989, cbSceneParam._m0[60u].w, fma(_1985, cbSceneParam._m0[60u].z, fma(_1981, cbSceneParam._m0[60u].y, _1977 * cbSceneParam._m0[60u].x))) / _2193;
        float _2195 = fma(_1989, cbSceneParam._m0[61u].w, fma(_1985, cbSceneParam._m0[61u].z, fma(_1981, cbSceneParam._m0[61u].y, _1977 * cbSceneParam._m0[61u].x))) / _2193;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2194 >= cbSceneParam._m0[64u].x) && (_2195 >= cbSceneParam._m0[64u].y)) && (_2194 <= cbSceneParam._m0[64u].z)) && (_2195 <= cbSceneParam._m0[64u].w))
        {
            float _2333 = fma(_1989, cbSceneParam._m0[62u].w, fma(_1985, cbSceneParam._m0[62u].z, fma(_1981, cbSceneParam._m0[62u].y, _1977 * cbSceneParam._m0[62u].x))) / _2193;
            float _2337 = isnan(cbSceneParam._m0[41u].w) ? _2333 : (isnan(_2333) ? cbSceneParam._m0[41u].w : max(_2333, cbSceneParam._m0[41u].w));
            float _2380 = (cbSceneParam._m0[33u].x - sqrt(((_1991 * _1991) + (_1990 * _1990)) + (_1992 * _1992))) * cbSceneParam._m0[33u].y;
            float _4428 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
            float _2387 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2194, cbSceneParam._m0[33u].w + _2195), _2337), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2194, _2195 - cbSceneParam._m0[33u].z), _2337), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2194 - cbSceneParam._m0[33u].z, _2195 - cbSceneParam._m0[33u].w), _2337), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2194 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2195), _2337), 0.0)).x), vec4(0.25)));
            float _2391 = 1.0 - (_2387 * cbSceneParam._m0[34u].x);
            float _2392 = 1.0 - (_2387 * cbSceneParam._m0[34u].y);
            float _2393 = 1.0 - (_2387 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2393) ? _2141 : (isnan(_2141) ? _2393 : min(_2141, _2393));
            frontier_phi_34_33_ladder_1 = isnan(_2392) ? _2140 : (isnan(_2140) ? _2392 : min(_2140, _2392));
            frontier_phi_34_33_ladder_2 = isnan(_2391) ? _2139 : (isnan(_2139) ? _2391 : min(_2139, _2391));
        }
        else
        {
            frontier_phi_34_33_ladder = _2141;
            frontier_phi_34_33_ladder_1 = _2140;
            frontier_phi_34_33_ladder_2 = _2139;
        }
        _2205 = frontier_phi_34_33_ladder_2;
        _2207 = frontier_phi_34_33_ladder_1;
        _2209 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2205 = _2139;
        _2207 = _2140;
        _2209 = _2141;
    }
    uvec4 _2214 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2216 = _2214.x * 14u;
    uint _2217 = _2216 + 13u;
    float _2224 = _919 + (-1.0);
    float _2229 = (cbLight._m0[_2217].x * _2224) + 1.0;
    float _2230 = (cbLight._m0[_2217].y * _2224) + 1.0;
    float _2231 = (cbLight._m0[_2217].z * _2224) + 1.0;
    float _2232 = (cbLight._m0[_2217].w * _2224) + 1.0;
    uint _2233 = _2216 + 5u;
    float _2239 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2243 = _2216 + 4u;
    float _2252 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
    uint _2256 = _2216 | 1u;
    float _2267 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_770, _771, _772));
    float _2270 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_770, _771, _772));
    float _4464 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _4475 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2275 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2277 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * 0.3183098733425140380859375;
    float _2284 = ((cbLight._m0[_2233].x * _2239) * _2277) + (((cbLight._m0[_2243].x * _2205) * _2252) * _2275);
    float _2285 = ((_2239 * cbLight._m0[_2233].y) * _2277) + (((cbLight._m0[_2243].y * _2207) * _2252) * _2275);
    float _2286 = ((_2239 * cbLight._m0[_2233].z) * _2277) + (((cbLight._m0[_2243].z * _2209) * _2252) * _2275);
    uvec4 _2290 = floatBitsToUint(cbLight._m0[_2216 + 12u]);
    bool _2292 = _2290.x == 0u;
    float _2394;
    float _2396;
    float _2398;
    if (_2292)
    {
        _2394 = _2284;
        _2396 = _2285;
        _2398 = _2286;
    }
    else
    {
        uint _2402 = _2216 + 6u;
        float _2418 = (dot(vec3(cbLight._m0[_2216 + 2u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2419 = _2418 * _2418;
        float _4486 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2420 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2421 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2394 = (((cbLight._m0[_2402].x * 0.3183098733425140380859375) * _2420) * _2421) + _2284;
        _2396 = (((cbLight._m0[_2402].y * 0.3183098733425140380859375) * _2420) * _2421) + _2285;
        _2398 = (((cbLight._m0[_2402].z * 0.3183098733425140380859375) * _2420) * _2421) + _2286;
    }
    bool _2401 = _2290.y == 0u;
    float _2456;
    float _2458;
    float _2460;
    if (_2401)
    {
        _2456 = _2394;
        _2458 = _2396;
        _2460 = _2398;
    }
    else
    {
        uint _2618 = _2216 + 7u;
        float _2634 = (dot(vec3(cbLight._m0[_2216 + 3u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2635 = _2634 * _2634;
        float _4502 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2636 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2637 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2456 = (((cbLight._m0[_2618].x * 0.3183098733425140380859375) * _2636) * _2637) + _2394;
        _2458 = (((cbLight._m0[_2618].y * 0.3183098733425140380859375) * _2636) * _2637) + _2396;
        _2460 = (((cbLight._m0[_2618].z * 0.3183098733425140380859375) * _2636) * _2637) + _2398;
    }
    uint _2463 = _2216 + 8u;
    float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _773) * 0.949999988079071044921875);
    float _2477 = _2476 * _2476;
    float _2478 = cbLight._m0[_2216].x + _848;
    float _2479 = cbLight._m0[_2216].y + _849;
    float _2480 = cbLight._m0[_2216].z + _850;
    float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
    float _2485 = _2484 * _2478;
    float _2486 = _2484 * _2479;
    float _2487 = _2484 * _2480;
    float _2488 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2216].xyz));
    float _4518 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _4529 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _2492 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2493 = dot(vec3(_770, _771, _772), vec3(_2485, _2486, _2487));
    float _4540 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2497 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2485, _2486, _2487));
    float _4551 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2501 = _2477 * _2477;
    float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
    float _2516 = (exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2517 = 1.0 - _2477;
    float _2528 = (0.5 / (((_2492 * ((_2491 * _2517) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2517) + _2477) * _2491))) * _2491;
    float _4562 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2530 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
    uint _2544 = _2216 + 9u;
    float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _773) * 0.949999988079071044921875);
    float _2556 = _2555 * _2555;
    float _2557 = cbLight._m0[_2256].x + _848;
    float _2558 = cbLight._m0[_2256].y + _849;
    float _2559 = cbLight._m0[_2256].z + _850;
    float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
    float _2564 = _2563 * _2557;
    float _2565 = _2563 * _2558;
    float _2566 = _2563 * _2559;
    float _2567 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2256].xyz));
    float _4573 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2571 = dot(vec3(_770, _771, _772), vec3(_2564, _2565, _2566));
    float _4584 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2575 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2564, _2565, _2566));
    float _4595 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2579 = _2556 * _2556;
    float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
    float _2592 = (exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2593 = 1.0 - _2556;
    float _2603 = (0.5 / (((_2492 * ((_2570 * _2593) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2593) + _2556) * _2570))) * _2570;
    float _4606 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2605 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
    float _2615 = (((_2592 * cbLight._m0[_2544].x) * _2605) * _2239) + ((((cbLight._m0[_2463].x * _2205) * _2516) * _2530) * _2252);
    float _2616 = (((_2592 * cbLight._m0[_2544].y) * _2605) * _2239) + ((((cbLight._m0[_2463].y * _2207) * _2516) * _2530) * _2252);
    float _2617 = (((_2592 * cbLight._m0[_2544].z) * _2605) * _2239) + ((((cbLight._m0[_2463].z * _2209) * _2516) * _2530) * _2252);
    float _2673;
    float _2675;
    float _2677;
    if (_2292)
    {
        _2673 = _2615;
        _2675 = _2616;
        _2677 = _2617;
    }
    else
    {
        uint _2679 = _2216 + 2u;
        uint _2683 = _2216 + 10u;
        float _2697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2679].w)) * _773) * 0.949999988079071044921875);
        float _2698 = _2697 * _2697;
        float _2699 = cbLight._m0[_2679].x + _848;
        float _2700 = cbLight._m0[_2679].y + _849;
        float _2701 = cbLight._m0[_2679].z + _850;
        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
        float _2706 = _2705 * _2699;
        float _2707 = _2705 * _2700;
        float _2708 = _2705 * _2701;
        float _2709 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2679].xyz));
        float _4617 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2713 = dot(vec3(_770, _771, _772), vec3(_2706, _2707, _2708));
        float _4628 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2717 = dot(vec3(cbLight._m0[_2679].xyz), vec3(_2706, _2707, _2708));
        float _4639 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2721 = _2698 * _2698;
        float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
        float _2734 = (exp2(log2(1.0 - (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2735 = 1.0 - _2698;
        float _2745 = (0.5 / (((_2492 * ((_2712 * _2735) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2735) + _2698) * _2712))) * _2712;
        float _4650 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2747 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
        float _2748 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2673 = (((_2734 * cbLight._m0[_2683].x) * _2747) * _2748) + _2615;
        _2675 = (((_2734 * cbLight._m0[_2683].y) * _2747) * _2748) + _2616;
        _2677 = (((_2734 * cbLight._m0[_2683].z) * _2747) * _2748) + _2617;
    }
    float _2779;
    float _2781;
    float _2783;
    if (_2401)
    {
        _2779 = _2673;
        _2781 = _2675;
        _2783 = _2677;
    }
    else
    {
        uint _2790 = _2216 + 3u;
        uint _2794 = _2216 + 11u;
        float _2808 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2790].w)) * _773) * 0.949999988079071044921875);
        float _2809 = _2808 * _2808;
        float _2810 = cbLight._m0[_2790].x + _848;
        float _2811 = cbLight._m0[_2790].y + _849;
        float _2812 = cbLight._m0[_2790].z + _850;
        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
        float _2817 = _2816 * _2810;
        float _2818 = _2816 * _2811;
        float _2819 = _2816 * _2812;
        float _2820 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2790].xyz));
        float _4666 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2824 = dot(vec3(_770, _771, _772), vec3(_2817, _2818, _2819));
        float _4677 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2827 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2828 = dot(vec3(cbLight._m0[_2790].xyz), vec3(_2817, _2818, _2819));
        float _4688 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2832 = _2809 * _2809;
        float _2836 = ((_2827 * _2827) * (_2832 + (-1.0))) + 1.0;
        float _2845 = (exp2(log2(1.0 - (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2846 = 1.0 - _2809;
        float _2856 = (0.5 / (((_2492 * ((_2823 * _2846) + _2809)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2846) + _2809) * _2823))) * _2823;
        float _4699 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2858 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2832 / ((_2836 * _2836) * 3.141590118408203125));
        float _2859 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2779 = (((_2845 * cbLight._m0[_2794].x) * _2858) * _2859) + _2673;
        _2781 = (((_2845 * cbLight._m0[_2794].y) * _2858) * _2859) + _2675;
        _2783 = (((_2845 * cbLight._m0[_2794].z) * _2858) * _2859) + _2677;
    }
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    float _2935;
    if (_2214.y == 0u)
    {
        uvec4 _2880 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2881 = _2880.x;
        uint _2892 = uint((float(_2880.y) * floor(float(uint(cbSceneParam._m0[85u].y * _857) / _2881))) + floor(float(uint(cbSceneParam._m0[85u].x * _856) / _2881)));
        float _2902 = (log2(_1992 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2903 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        uint _2906 = uint(isnan(14.0) ? _2903 : (isnan(_2903) ? 14.0 : min(_2903, 14.0)));
        uvec4 _2911 = texelFetch(g_lightClusterGridBuffer, int(((_2906 << 2u) + (_2892 << 6u)) >> 2u));
        uint _2912 = _2911.x;
        uint _2913 = _2880.z;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        if (((((1u << ((_2913 >> 4u) & 15u)) + 4294967295u) & _2912) == 0u) || ((_2913 & 240u) == 0u))
        {
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
        }
        else
        {
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            uint _3142 = 0u;
            uint _3151;
            bool _3152;
            for (;;)
            {
                _3151 = texelFetch(g_lightClassification, int((((_2906 << 5u) + (_2892 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                _3152 = _3151 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3152)
                {
                    frontier_phi_66_pred = _3141;
                    frontier_phi_66_pred_1 = _3140;
                    frontier_phi_66_pred_2 = _3139;
                    frontier_phi_66_pred_3 = _3138;
                    frontier_phi_66_pred_4 = _3137;
                    frontier_phi_66_pred_5 = _3136;
                }
                else
                {
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    uint _3266;
                    _3260 = _3136;
                    _3261 = _3137;
                    _3262 = _3138;
                    _3263 = _3139;
                    _3264 = _3140;
                    _3265 = _3141;
                    _3266 = _3151;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    for (;;)
                    {
                        uint _3270 = uint(findLSB(_3266)) + (_3142 << 5u);
                        uint _3267 = (_3266 + 4294967295u) & _3266;
                        uint _3272 = _3270 * 48u;
                        vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3272)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 3u)).x));
                        uint _3292 = (_3270 * 48u) + 4u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3311 = (_3270 * 48u) + 8u;
                        vec3 _3322 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x));
                        float _3326 = _3286.x - _1990;
                        float _3327 = _3286.y - _1991;
                        float _3328 = _3286.z - _1992;
                        float _3329 = dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328));
                        float _3332 = inversesqrt(_3329);
                        float _3333 = _3332 * _3326;
                        float _3334 = _3332 * _3327;
                        float _3335 = _3332 * _3328;
                        float _3336 = dot(vec3(_875, _878, _881), vec3(_3333, _3334, _3335));
                        float _3341 = 1.0 - (_3329 * _3286.w);
                        float _4725 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3343 = sqrt(_3329) * _3305.w;
                        float _3346 = 1.39999997615814208984375 / (_3343 + 1.39999997615814208984375);
                        float _3347 = _3346 * _3346;
                        float _3350 = ((1.0 - _3347) * _3336) + _3347;
                        float _3353 = _3343 * _3343;
                        float _3357 = ((isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0))) * _3342) / ((_3353 * 0.699999988079071044921875) + 1.0);
                        float _3361 = (-0.0) - _1990;
                        float _3362 = (-0.0) - _1991;
                        float _3363 = (-0.0) - _1992;
                        float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                        float _3368 = _3367 * _3361;
                        float _3369 = _3367 * _3362;
                        float _3370 = _3367 * _3363;
                        float _3377 = exp2(log2(1.0 / ((_3353 * 3.5) + 5.0)) * 0.25);
                        float _3378 = 1.0 - _935;
                        float _3385 = sqrt(1.0 - ((1.0 - (_3378 * _3378)) * (1.0 - (_3377 * _3377))));
                        float _3386 = _3385 * _3385;
                        float _3387 = _3386 * _3386;
                        float _3388 = _3368 + _3333;
                        float _3389 = _3369 + _3334;
                        float _3390 = _3370 + _3335;
                        float _3394 = inversesqrt(dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390)));
                        float _3398 = dot(vec3(_875, _878, _881), vec3(_3368, _3369, _3370));
                        float _4741 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3401 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3402 = dot(vec3(_875, _878, _881), vec3(_3394 * _3388, _3394 * _3389, _3394 * _3390));
                        float _4752 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3405 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3409 = ((_3405 * _3405) * (_3387 + (-1.0))) + 1.0;
                        float _3410 = _3346 * _3386;
                        float _3411 = _3410 * _3410;
                        float _3414 = ((1.0 - _3411) * _3336) + _3411;
                        float _4763 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3415 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3416 = 1.0 - _3386;
                        float _3426 = (0.5 / (((_3415 * ((_3401 * _3416) + _3386)) + 9.9999999392252902907785028219223e-09) + (((_3415 * _3416) + _3386) * _3401))) * _3415;
                        float _4774 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3437 = (((_3387 * 3.1415927410125732421875) * (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) / ((_3409 * _3409) * ((_3353 * 2.1991131305694580078125) + 3.141590118408203125))) * _3342;
                        _3195 = (_3357 * _3305.x) + _3263;
                        _3196 = (_3357 * _3305.y) + _3264;
                        _3197 = (_3357 * _3305.z) + _3265;
                        _3192 = (_3437 * _3322.x) + _3260;
                        _3193 = (_3437 * _3322.y) + _3261;
                        _3194 = (_3437 * _3322.z) + _3262;
                        if (_3267 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3260 = _3192;
                            _3261 = _3193;
                            _3262 = _3194;
                            _3263 = _3195;
                            _3264 = _3196;
                            _3265 = _3197;
                            _3266 = _3267;
                        }
                    }
                    frontier_phi_66_pred = _3197;
                    frontier_phi_66_pred_1 = _3196;
                    frontier_phi_66_pred_2 = _3195;
                    frontier_phi_66_pred_3 = _3194;
                    frontier_phi_66_pred_4 = _3193;
                    frontier_phi_66_pred_5 = _3192;
                }
                _3003 = frontier_phi_66_pred;
                _3001 = frontier_phi_66_pred_1;
                _2999 = frontier_phi_66_pred_2;
                _2997 = frontier_phi_66_pred_3;
                _2995 = frontier_phi_66_pred_4;
                _2993 = frontier_phi_66_pred_5;
                uint _3143 = _3142 + 1u;
                if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3136 = _2993;
                    _3137 = _2995;
                    _3138 = _2997;
                    _3139 = _2999;
                    _3140 = _3001;
                    _3141 = _3003;
                    _3142 = _3143;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
        }
        uvec4 _3006 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3007 = _3006.z;
        uint _3009 = (_3007 >> 8u) & 15u;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        if (((4294967295u << _3009) & _2912) == 0u)
        {
            _3104 = _2992;
            _3106 = _2994;
            _3108 = _2996;
            _3110 = _2998;
            _3112 = _3000;
            _3114 = _3002;
        }
        else
        {
            float _3129 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
            float _3130 = _3129 * _1990;
            float _3131 = _3129 * _1991;
            float _3132 = _3129 * _1992;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3009 < ((_3007 >> 12u) & 15u))
            {
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3243 = _2992;
                float _3244 = _2994;
                float _3245 = _2996;
                float _3246 = _2998;
                float _3247 = _3000;
                float _3248 = _3002;
                uint _3249 = _3009;
                uint _3258;
                bool _3259;
                for (;;)
                {
                    _3258 = texelFetch(g_lightClassification, int((((_2906 << 5u) + (_2892 << 9u)) + (_3249 << 2u)) >> 2u)).x;
                    _3259 = _3258 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3259)
                    {
                        frontier_phi_72_pred = _3248;
                        frontier_phi_72_pred_1 = _3247;
                        frontier_phi_72_pred_2 = _3246;
                        frontier_phi_72_pred_3 = _3245;
                        frontier_phi_72_pred_4 = _3244;
                        frontier_phi_72_pred_5 = _3243;
                    }
                    else
                    {
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3455 = _3243;
                        float _3456 = _3244;
                        float _3457 = _3245;
                        float _3458 = _3246;
                        float _3459 = _3247;
                        float _3460 = _3248;
                        uint _3461 = _3258;
                        uint _3462;
                        vec4 _3487;
                        float _3488;
                        vec4 _3503;
                        vec3 _3515;
                        vec4 _3530;
                        vec4 _3546;
                        float _3592;
                        bool _3593;
                        for (;;)
                        {
                            uint _3472 = ((_3249 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3461));
                            _3462 = (_3461 + 4294967295u) & _3461;
                            uint _3474 = _3472 * 40u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3488 = _3487.w;
                            uint _3490 = (_3472 * 40u) + 4u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3472 * 40u) + 8u;
                            _3515 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x));
                            uint _3517 = (_3472 * 40u) + 16u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3533 = (_3472 * 40u) + 20u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3548 = (_3472 * 40u) + 24u;
                            vec4 _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3567 = (_3472 * 40u) + 28u;
                            vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            _3592 = fma(_1992, _3580.z, fma(_1991, _3580.y, _3580.x * _1990)) + _3580.w;
                            _3593 = !((fma(_1992, _3561.z, fma(_1991, _3561.y, _3561.x * _1990)) + _3561.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3593)
                            {
                                float _3620 = _3487.x - _1990;
                                float _3621 = _3487.y - _1991;
                                float _3622 = _3487.z - _1992;
                                float _3623 = dot(vec3(_3620, _3621, _3622), vec3(_3620, _3621, _3622));
                                float _3626 = inversesqrt(_3623);
                                float _3627 = _3626 * _3620;
                                float _3628 = _3626 * _3621;
                                float _3629 = _3626 * _3622;
                                float _3633 = 1.0 - (_3623 / (_3488 * _3488));
                                float _4785 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3638 = sqrt(_3623) * _3503.w;
                                float _3640 = 1.39999997615814208984375 / (_3638 + 1.39999997615814208984375);
                                float _3641 = _3640 * _3640;
                                float _3644 = ((1.0 - _3641) * dot(vec3(_3627, _3628, _3629), vec3(_875, _878, _881))) + _3641;
                                float _3647 = _3638 * _3638;
                                float _3651 = (fma(_1992, _3530.z, fma(_1991, _3530.y, _3530.x * _1990)) + _3530.w) / _3592;
                                float _3652 = (fma(_1992, _3546.z, fma(_1991, _3546.y, _3546.x * _1990)) + _3546.w) / _3592;
                                float _3656 = 1.0 - dot(vec2(_3651, _3652), vec2(_3651, _3652));
                                float _4801 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3658 = _3657 * (((isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0))) * _3634) / ((_3647 * 0.699999988079071044921875) + 1.0));
                                float _3670 = exp2(log2(1.0 / ((_3647 * 3.5) + 5.0)) * 0.25);
                                float _3671 = 1.0 - _935;
                                float _3678 = sqrt(1.0 - ((1.0 - (_3671 * _3671)) * (1.0 - (_3670 * _3670))));
                                float _3679 = _3678 * _3678;
                                float _3680 = _3679 * _3679;
                                float _3681 = _3627 - _3130;
                                float _3682 = _3628 - _3131;
                                float _3683 = _3629 - _3132;
                                float _3687 = inversesqrt(dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683)));
                                float _3691 = dot(vec3(_875, _878, _881), vec3((-0.0) - _3130, (-0.0) - _3131, (-0.0) - _3132));
                                float _4812 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3694 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3695 = dot(vec3(_875, _878, _881), vec3(_3687 * _3681, _3687 * _3682, _3687 * _3683));
                                float _4823 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3698 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3702 = ((_3698 * _3698) * (_3680 + (-1.0))) + 1.0;
                                float _3703 = _3640 * _3679;
                                float _3704 = _3703 * _3703;
                                float _3710 = ((1.0 - _3704) * dot(vec3(_875, _878, _881), vec3(_3627, _3628, _3629))) + _3704;
                                float _4834 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3712 = 1.0 - _3679;
                                float _3722 = (0.5 / (((_3711 * ((_3694 * _3712) + _3679)) + 9.9999999392252902907785028219223e-09) + (((_3711 * _3712) + _3679) * _3694))) * _3711;
                                float _4845 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3732 = (_3657 * _3634) * (((_3680 * 3.1415927410125732421875) * (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) / ((_3702 * _3702) * ((_3647 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3658 * _3503.y;
                                frontier_phi_78_pred_1 = _3658 * _3503.x;
                                frontier_phi_78_pred_2 = _3732 * _3515.z;
                                frontier_phi_78_pred_3 = _3732 * _3515.y;
                                frontier_phi_78_pred_4 = _3732 * _3515.x;
                                frontier_phi_78_pred_5 = _3658 * _3503.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3740 = frontier_phi_78_pred;
                            _3739 = frontier_phi_78_pred_1;
                            _3738 = frontier_phi_78_pred_2;
                            _3737 = frontier_phi_78_pred_3;
                            _3736 = frontier_phi_78_pred_4;
                            _3741 = frontier_phi_78_pred_5;
                            _3445 = _3739 + _3458;
                            _3446 = _3740 + _3459;
                            _3447 = _3741 + _3460;
                            _3442 = _3736 + _3455;
                            _3443 = _3737 + _3456;
                            _3444 = _3738 + _3457;
                            if (_3462 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3462;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3447;
                        frontier_phi_72_pred_1 = _3446;
                        frontier_phi_72_pred_2 = _3445;
                        frontier_phi_72_pred_3 = _3444;
                        frontier_phi_72_pred_4 = _3443;
                        frontier_phi_72_pred_5 = _3442;
                    }
                    _3115 = frontier_phi_72_pred;
                    _3113 = frontier_phi_72_pred_1;
                    _3111 = frontier_phi_72_pred_2;
                    _3109 = frontier_phi_72_pred_3;
                    _3107 = frontier_phi_72_pred_4;
                    _3105 = frontier_phi_72_pred_5;
                    uint _3250 = _3249 + 1u;
                    if (_3250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3243 = _3105;
                        _3244 = _3107;
                        _3245 = _3109;
                        _3246 = _3111;
                        _3247 = _3113;
                        _3248 = _3115;
                        _3249 = _3250;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3115;
                frontier_phi_60_61_ladder_1 = _3113;
                frontier_phi_60_61_ladder_2 = _3109;
                frontier_phi_60_61_ladder_3 = _3107;
                frontier_phi_60_61_ladder_4 = _3105;
                frontier_phi_60_61_ladder_5 = _3111;
            }
            else
            {
                frontier_phi_60_61_ladder = _3002;
                frontier_phi_60_61_ladder_1 = _3000;
                frontier_phi_60_61_ladder_2 = _2996;
                frontier_phi_60_61_ladder_3 = _2994;
                frontier_phi_60_61_ladder_4 = _2992;
                frontier_phi_60_61_ladder_5 = _2998;
            }
            _3104 = frontier_phi_60_61_ladder_4;
            _3106 = frontier_phi_60_61_ladder_3;
            _3108 = frontier_phi_60_61_ladder_2;
            _3110 = frontier_phi_60_61_ladder_5;
            _3112 = frontier_phi_60_61_ladder_1;
            _3114 = frontier_phi_60_61_ladder;
        }
        float _3119 = isnan(1.0) ? _919 : (isnan(_919) ? 1.0 : min(_919, 1.0));
        _2925 = (_3119 * _3110) + _2456;
        _2927 = (_3119 * _3112) + _2458;
        _2929 = (_3119 * _3114) + _2460;
        _2931 = ((_3104 * 0.039999999105930328369140625) * _3119) + _2779;
        _2933 = ((_3106 * 0.039999999105930328369140625) * _3119) + _2781;
        _2935 = ((_3108 * 0.039999999105930328369140625) * _3119) + _2783;
    }
    else
    {
        _2925 = _2456;
        _2927 = _2458;
        _2929 = _2460;
        _2931 = _2779;
        _2933 = _2781;
        _2935 = _2783;
    }
    float _4861 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4872 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4883 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    uint _2955 = _249 + 6u;
    float _2963 = _856 / cbSceneParam._m0[86u].x;
    float _2964 = _857 / cbSceneParam._m0[86u].y;
    vec4 _2978 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2963, _2964, (log2((isnan(cbSceneParam._m0[77u].w) ? _791 : (isnan(_791) ? cbSceneParam._m0[77u].w : min(_791, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2980 = _2978.x;
    float _2981 = _2978.y;
    float _2982 = _2978.z;
    float _2983 = _2978.w;
    float _3054;
    float _3056;
    float _3058;
    float _3060;
    if (_791 > cbSceneParam._m0[78u].w)
    {
        float _3017 = isnan(_791) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _791 : min(cbSceneParam._m0[80u].w, _791));
        float _3018 = _3017 / _791;
        float _3029 = _3018 * _841;
        float _3030 = _842 * _3018;
        float _3031 = (-0.0) - _3030;
        float _3032 = _3018 * _843;
        float _3034 = (cbSceneParam._m0[77u].w * _3031) / _3017;
        float _3035 = _3034 + cbSceneParam._m0[79u].w;
        float _3036 = cbSceneParam._m0[79u].w - _3030;
        float _3042 = sqrt(((_3029 * _3029) + (_3030 * _3030)) + (_3032 * _3032));
        float _3045 = (1.0 - (cbSceneParam._m0[77u].w / _3017)) * _3042;
        float _3050 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3052 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3205;
        if (abs((_3031 - _3034) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3205 = ((((_3035 > 0.0) ? exp2(_3050 * _3035) : (2.0 - exp2(_3052 * _3035))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3045;
        }
        else
        {
            float _3165 = 1.0 / cbSceneParam._m0[80u].x;
            float _3166 = isnan(_3036) ? _3035 : (isnan(_3035) ? _3036 : max(_3035, _3036));
            float _3167 = isnan(_3036) ? _3035 : (isnan(_3035) ? _3036 : min(_3035, _3036));
            float _3176 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : min(_3166, 0.0));
            float _3177 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : min(_3167, 0.0));
            _3205 = ((abs(_3042 / _3031) * cbSceneParam._m0[80u].y) * ((((_3176 - _3177) * 2.0) - ((exp2(_3050 * (isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0)))) - exp2(_3050 * (isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))))) * _3165)) - ((exp2(_3052 * _3176) - exp2(_3052 * _3177)) * _3165))) + (_3045 * cbSceneParam._m0[80u].z);
        }
        vec4 _3207 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2963, _2964, 1.0), 0.0);
        float _3216 = exp2((_3205 * (-1.44269502162933349609375)) * (1.0 - _3207.w));
        float _3217 = log2(_3216);
        float _3233 = log2(_2983);
        _3054 = (exp2(_3233 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].x)) * _3207.x) / cbSceneParam._m0[78u].x)) + _2980;
        _3056 = (exp2(_3233 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].y)) * _3207.y) / cbSceneParam._m0[78u].y)) + _2981;
        _3058 = (exp2(_3233 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].z)) * _3207.z) / cbSceneParam._m0[78u].z)) + _2982;
        _3060 = _3216 * _2983;
    }
    else
    {
        _3054 = _2980;
        _3056 = _2981;
        _3058 = _2982;
        _3060 = _2983;
    }
    float _3072 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3073 = _3072 == 3.0;
    float _3074 = log2(_3060);
    float _3081 = exp2(_3074 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2925 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _919))) + ((_2931 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1724)) * cbPerFrame._m0[3u].x));
    float _3082 = exp2(_3074 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2927 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _919))) + ((_2933 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1724)) * cbPerFrame._m0[3u].x));
    float _3083 = exp2(_3074 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2929 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _919))) + ((_2935 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1724)) * cbPerFrame._m0[3u].x));
    float _3092 = (_3072 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3092 * (_3073 ? _3081 : (_3081 + (cbSceneParam._m0[72u].w * _3054)));
    SV_Target.y = _3092 * (_3073 ? _3082 : (_3082 + (cbSceneParam._m0[72u].w * _3056)));
    SV_Target.z = _3092 * (_3073 ? _3083 : (_3083 + (cbSceneParam._m0[72u].w * _3058)));
    SV_Target.w = cbInstanceData._m0[_2955].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2955].w;
}


