#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1510;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3836 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3847 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3858 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _372 = _367.x * cbMtdParam._m0[11u].x;
    float _373 = _367.y * cbMtdParam._m0[11u].y;
    float _374 = _367.z * cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _461 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _478 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _412.x) * 2.0) - ((((_449 - _461) * cbMtdParam._m0[24u].z) + _461) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3869 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _486 = (_479 * ((_393.x * cbMtdParam._m0[12u].x) - _372)) + _372;
    float _487 = (_479 * ((_393.y * cbMtdParam._m0[12u].y) - _373)) + _373;
    float _488 = (_479 * ((_393.z * cbMtdParam._m0[12u].z) - _374)) + _374;
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _527 = _525.x;
    float _537 = dot(vec4(_527, _525.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _551 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _412.y) * 2.0) - ((((_527 - _537) * cbMtdParam._m0[24u].z) + _537) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3880 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _562 = (_341.x * cbMtdParam._m0[9u].x) * ((_552 * ((_505.x * cbMtdParam._m0[13u].x) - _486)) + _486);
    float _563 = (_341.y * cbMtdParam._m0[9u].y) * ((_552 * ((_505.y * cbMtdParam._m0[13u].y) - _487)) + _487);
    float _564 = (_341.z * cbMtdParam._m0[9u].z) * ((_552 * ((_505.z * cbMtdParam._m0[13u].z) - _488)) + _488);
    float _568 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _562;
    float _571 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _563;
    float _574 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _564;
    float _582 = (((_562 - _568) * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) + _568) * 4.55000019073486328125;
    float _584 = (((_563 - _571) * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) + _571) * 4.55000019073486328125;
    float _586 = (((_564 - _574) * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) + _574) * 4.55000019073486328125;
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _304) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _305) + cbTextureTilingScale._m0[14u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _668 = _666.x;
    float _669 = _666.y;
    float _670 = _666.z;
    float _677 = ((_649.x - _668) * _479) + _668;
    float _678 = ((_649.y - _669) * _479) + _669;
    float _679 = ((_649.z - _670) * _479) + _670;
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _704 = ((_691.z - _679) * _552) + _679;
    float _707 = ((((_691.x - _677) * _552) + _677) * 2.0) + (-1.0);
    float _708 = ((((_691.y - _678) * _552) + _678) * 2.0) + (-1.0);
    float _709 = dot(vec2(_707, _708), vec2(_707, _708));
    float _3891 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _714 = sqrt(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))));
    vec4 _732 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _744 = (_707 + ((((_624.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_732.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _745 = (_708 + ((((_624.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_732.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _748 = fma(_714, _254, fma(_745, _261, _744 * _247));
    float _751 = fma(_714, _255, fma(_745, _262, _744 * _248));
    float _754 = fma(_714, _256, fma(_745, _263, _744 * _249));
    float _758 = inversesqrt(dot(vec3(_748, _751, _754), vec3(_748, _751, _754)));
    vec4 _785 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _787 = _785.x;
    float _788 = 1.0 - _787;
    float _794 = (cbMtdParam._m0[19u].x + dot(vec4(_758 * _748, _758 * _751, _758 * _754, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_787 - _788) * cbMtdParam._m0[24u].w) + _788) * cbMtdParam._m0[21u].z);
    float _3902 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _795 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _797 = (-0.0) - cbMtdParam._m0[24u].x;
    float _799 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _799 : (isnan(_799) ? 1.0 : min(_799, 1.0));
    float _807 = _795 - ((_795 * TEXCOORD_8.x) * _800);
    float _808 = _795 - ((_795 * TEXCOORD_8.y) * _800);
    float _809 = _795 - ((_795 * TEXCOORD_8.z) * _800);
    float _816 = (_807 * ((_605.x * cbMtdParam._m0[18u].x) - _582)) + _582;
    float _817 = (_808 * ((_605.y * cbMtdParam._m0[18u].y) - _584)) + _584;
    float _818 = (_809 * ((_605.z * cbMtdParam._m0[18u].z) - _586)) + _586;
    vec4 _830 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _832 = _830.x;
    float _833 = 1.0 - _832;
    float _861 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_832 - _833) * cbMtdParam._m0[24u].y) + _833) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3923 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _862 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _870 = ((((cbMtdParam._m0[10u].x - _816) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _862) + _816;
    float _871 = ((((cbMtdParam._m0[10u].y - _817) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _862) + _817;
    float _872 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _818)) * _862) + _818;
    float _877 = (((_624.z - _704) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _704;
    float _881 = ((_732.z - _877) * cbMtdParam._m0[19u].w) + _877;
    vec4 _895 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _902 = (_895.x * 2.0) + (-1.0);
    float _903 = (_895.y * 2.0) + (-1.0);
    float _904 = dot(vec2(_902, _903), vec2(_902, _903));
    float _3934 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _912 = ((_895.z - _881) * _807) + _881;
    float _915 = ((cbMtdParam._m0[23u].y - _912) * _862) + _912;
    vec4 _934 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _940 = (_934.x * 2.0) + (-1.0);
    float _941 = (_934.y * 2.0) + (-1.0);
    float _942 = dot(vec2(_940, _941), vec2(_940, _941));
    float _3945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _957 = ((sqrt(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) - _714) * _809) + _714;
    float _960 = (((_902 - _744) * _807) + _744) + (cbMtdParam._m0[21u].x * _744);
    float _961 = (((_903 - _745) * _808) + _745) + (cbMtdParam._m0[21u].x * _745);
    float _972 = (((_940 - _960) + (_960 * cbMtdParam._m0[22u].z)) * _862) + _960;
    float _973 = (((_941 - _961) + (_961 * cbMtdParam._m0[22u].z)) * _862) + _961;
    float _974 = (_862 * (sqrt(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) - _957)) + _957;
    float _976 = cbMtdParam._m0[22u].x + _732.w;
    float _979 = fma(_974, _254, fma(_973, _261, _972 * _247));
    float _982 = fma(_974, _255, fma(_973, _262, _972 * _248));
    float _985 = fma(_974, _256, fma(_973, _263, _972 * _249));
    float _989 = inversesqrt(dot(vec3(_979, _982, _985), vec3(_979, _982, _985)));
    float _990 = _989 * _979;
    float _991 = _989 * _982;
    float _992 = _989 * _985;
    float _3956 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _993 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _3978 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _3989 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4000 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _1011 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1061 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1051);
    float _1062 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1051);
    float _1063 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1051);
    float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
    float _1068 = _1061 * _1067;
    float _1069 = _1062 * _1067;
    float _1070 = _1063 * _1067;
    float _1076 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1077 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1095 = fma(_992, cbSceneParam._m0[5u].z, fma(_991, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _990));
    float _1098 = fma(_992, cbSceneParam._m0[6u].z, fma(_991, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _990));
    float _1101 = fma(_992, cbSceneParam._m0[7u].z, fma(_991, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _990));
    uint _1115 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1121 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * cbInstanceData._m0[_1115].x;
    float _1122 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * cbInstanceData._m0[_1115].y;
    float _1123 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * cbInstanceData._m0[_1115].z;
    float _4011 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1124 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1125 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1126 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    vec4 _1135 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1076, cbSceneParam._m0[86u].y * _1077));
    float _1139 = ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * TEXCOORD_5.w) * _1135.x;
    float _1140 = dot(vec3(_990, _991, _992), vec3(_1068, _1069, _1070));
    float _1143 = _1140 * 2.0;
    float _1147 = (_1143 * _990) - _1068;
    float _1148 = (_1143 * _991) - _1069;
    float _1149 = (_1143 * _992) - _1070;
    float _1153 = abs(dot(vec3(_1068, _1069, _1070), vec3(_990, _991, _992)));
    float _4044 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _1155 = sqrt(_993);
    float _1168 = exp2((_1155 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1155 * 3.0));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1204 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1208 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1509;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1234 = fma(_1208, cbModelParam._m0[26u].z, fma(_1204, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1200));
        float _1238 = fma(_1208, cbModelParam._m0[27u].z, fma(_1204, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1200));
        float _1242 = fma(_1208, cbModelParam._m0[28u].z, fma(_1204, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1200));
        float _1267 = _1200 + _990;
        float _1268 = _1204 + _991;
        float _1269 = _1208 + _992;
        float _1279 = fma(_1269, cbModelParam._m0[26u].z, fma(_1268, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1267)) - _1234;
        float _1280 = fma(_1269, cbModelParam._m0[27u].z, fma(_1268, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1267)) - _1238;
        float _1281 = fma(_1269, cbModelParam._m0[28u].z, fma(_1268, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1267)) - _1242;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1234 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1238 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[34u].z) + ((((((_1242 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1337 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1303.x + (-0.5));
        float _1339 = _1337 * (_1303.y + (-0.5));
        float _1340 = _1337 * (_1303.z + (-0.5));
        float _1347 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1310.x + (-0.5));
        float _1349 = _1347 * (_1310.y + (-0.5));
        float _1350 = _1347 * (_1310.z + (-0.5));
        float _1357 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1317.x + (-0.5));
        float _1359 = _1357 * (_1317.y + (-0.5));
        float _1360 = _1357 * (_1317.z + (-0.5));
        float _1367 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1324.x + (-0.5));
        float _1369 = _1367 * (_1324.y + (-0.5));
        float _1370 = _1367 * (_1324.z + (-0.5));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = _1338 * 0.5;
        float _1375 = _1348 * 0.5;
        float _1376 = _1358 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1391 = (dot(vec3(_990, _991, _992), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1401 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4092 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1403 + 1.0))) + _1408) * _1371;
        float _1418 = _1339 * 0.5;
        float _1419 = _1349 * 0.5;
        float _1420 = _1359 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_990, _991, _992), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4125 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1445 + 1.0))) + _1450) * _1372;
        float _1460 = _1340 * 0.5;
        float _1461 = _1350 * 0.5;
        float _1462 = _1360 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_990, _991, _992), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4158 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1487 + 1.0))) + _1492) * _1373;
        _1509 = _1340;
        _1511 = _1339;
        _1512 = _1338;
        _1513 = _1350;
        _1514 = _1349;
        _1515 = _1348;
        _1516 = _1360;
        _1517 = _1359;
        _1518 = _1358;
        _1519 = _1373;
        _1520 = _1372;
        _1521 = _1371;
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1524 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1510;
        _1511 = _1510;
        _1512 = _1510;
        _1513 = _1510;
        _1514 = _1510;
        _1515 = _1510;
        _1516 = _1510;
        _1517 = _1510;
        _1518 = _1510;
        _1519 = _1510;
        _1520 = _1510;
        _1521 = _1510;
        _1522 = 0.0;
        _1523 = 0.0;
        _1524 = 0.0;
    }
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1548 = fma(_1208, cbModelParam._m0[30u].z, fma(_1204, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1200));
        float _1552 = fma(_1208, cbModelParam._m0[31u].z, fma(_1204, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1200));
        float _1556 = fma(_1208, cbModelParam._m0[32u].z, fma(_1204, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1200));
        float _1579 = _1200 + _990;
        float _1580 = _1204 + _991;
        float _1581 = _1208 + _992;
        float _1591 = fma(_1581, cbModelParam._m0[30u].z, fma(_1580, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1579)) - _1548;
        float _1592 = fma(_1581, cbModelParam._m0[31u].z, fma(_1580, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1579)) - _1552;
        float _1593 = fma(_1581, cbModelParam._m0[32u].z, fma(_1580, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1579)) - _1556;
        float _1597 = inversesqrt(dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593)));
        float _1610 = ((_1597 * _1591) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1548 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1597 * _1592) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1552 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1597 * _1593) / cbModelParam._m0[35u].z) + ((((((_1556 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        float _1647 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1614.x + (-0.5));
        float _1649 = _1647 * (_1614.y + (-0.5));
        float _1650 = _1647 * (_1614.z + (-0.5));
        float _1657 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1621.x + (-0.5));
        float _1659 = _1657 * (_1621.y + (-0.5));
        float _1660 = _1657 * (_1621.z + (-0.5));
        float _1667 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1628.x + (-0.5));
        float _1669 = _1667 * (_1628.y + (-0.5));
        float _1670 = _1667 * (_1628.z + (-0.5));
        float _1677 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1678 = _1677 * (_1635.x + (-0.5));
        float _1679 = _1677 * (_1635.y + (-0.5));
        float _1680 = _1677 * (_1635.z + (-0.5));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = _1648 * 0.5;
        float _1685 = _1658 * 0.5;
        float _1686 = _1668 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_990, _991, _992), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4221 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1711 + 1.0))) + _1716) * _1681;
        float _1726 = _1649 * 0.5;
        float _1727 = _1659 * 0.5;
        float _1728 = _1669 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_990, _991, _992), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4254 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1753 + 1.0))) + _1758) * _1682;
        float _1768 = _1650 * 0.5;
        float _1769 = _1660 * 0.5;
        float _1770 = _1670 * 0.5;
        float _1771 = dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770));
        float _1776 = (_1771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1771);
        float _1784 = (dot(vec3(_990, _991, _992), vec3(_1776 * _1768, _1776 * _1769, _1776 * _1770)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1795 = _1794 * 2.0;
        float _1799 = (1.0 - _1794) / (_1794 + 1.0);
        float _4287 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1809 = ((((1.0 - _1800) * (_1795 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1795 + 1.0))) + _1800) * _1683;
        _1817 = _1650;
        _1818 = _1649;
        _1819 = _1648;
        _1820 = _1660;
        _1821 = _1659;
        _1822 = _1658;
        _1823 = _1670;
        _1824 = _1669;
        _1825 = _1668;
        _1826 = _1683;
        _1827 = _1682;
        _1828 = _1681;
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)));
    }
    else
    {
        _1817 = _1510;
        _1818 = _1510;
        _1819 = _1510;
        _1820 = _1510;
        _1821 = _1510;
        _1822 = _1510;
        _1823 = _1510;
        _1824 = _1510;
        _1825 = _1510;
        _1826 = _1510;
        _1827 = _1510;
        _1828 = _1510;
        _1829 = 0.0;
        _1830 = 0.0;
        _1831 = 0.0;
    }
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1522)) + _1522;
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1523)) + _1523;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1524)) + _1524;
    float _1864 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1842, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1842, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1842, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1841));
    float _1885 = _1147 * 0.5;
    float _1886 = _1148 * 0.5;
    float _1887 = _1149 * 0.5;
    float _1888 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1891 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1894 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1928;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1901 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1509, _1513, _1516, _1519));
        float _1905 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1909 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1512, _1515, _1518, _1521));
        float _1916 = dot(vec4(cbModelParam._m0[39u]), vec4(_1885, _1886, _1887, 1.0));
        _1928 = dot(vec3(isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1916) ? 0.0 : (isnan(0.0) ? _1916 : max(0.0, _1916))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1928 = 1.0;
    }
    float _1939;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1930 = dot(vec4(cbModelParam._m0[40u]), vec4(_1885, _1886, _1887, 1.0));
        _1939 = dot(vec3(isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1930) ? 0.0 : (isnan(0.0) ? _1930 : max(0.0, _1930))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1939 = 1.0;
    }
    float _1943 = (_1939 * cbModelParam._m0[1u].x) + (_1928 * (1.0 - cbModelParam._m0[1u].x));
    float _1953 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _993);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1953 : min(cbModelParam._m0[25u].z, _1953));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2001 = fma(_1208, cbModelParam._m0[13u].z, fma(_1204, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1200)) + cbModelParam._m0[13u].w;
        float _2005 = fma(_1208, cbModelParam._m0[14u].z, fma(_1204, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1200)) + cbModelParam._m0[14u].w;
        float _2009 = fma(_1208, cbModelParam._m0[15u].z, fma(_1204, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1200)) + cbModelParam._m0[15u].w;
        float _2012 = fma(_1149, cbModelParam._m0[13u].z, fma(_1148, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1147));
        float _2015 = fma(_1149, cbModelParam._m0[14u].z, fma(_1148, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1147));
        float _2018 = fma(_1149, cbModelParam._m0[15u].z, fma(_1148, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1147));
        float _2046;
        if (_2012 > 0.0)
        {
            _2046 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2046 = frontier_phi_14_12_ladder;
        }
        float _2267;
        if (_2015 > 0.0)
        {
            _2267 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2267 = frontier_phi_23_19_ladder;
        }
        float _2513;
        if (_2018 > 0.0)
        {
            _2513 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2513 = frontier_phi_35_30_ladder;
        }
        float _2515 = isnan(_2267) ? _2046 : (isnan(_2046) ? _2267 : min(_2046, _2267));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _2012) + _2001;
        float _2521 = (_2516 * _2015) + _2005;
        float _2522 = (_2516 * _2018) + _2009;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2523;
        float _2527 = _2523 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 > _2527) || ((_2521 < _2525) || ((_2520 < _2525) || (_2520 > _2527))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2522, cbModelParam._m0[9u].z, fma(_2521, cbModelParam._m0[9u].y, _2520 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2522, cbModelParam._m0[10u].z, fma(_2521, cbModelParam._m0[10u].y, _2520 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2522, cbModelParam._m0[11u].z, fma(_2521, cbModelParam._m0[11u].y, _2520 * cbModelParam._m0[11u].x))), _1954);
            frontier_phi_13_35_ladder = _2646.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2646.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2646.x * cbModelParam._m0[1u].y;
        }
        _2034 = frontier_phi_13_35_ladder_2;
        _2036 = frontier_phi_13_35_ladder_1;
        _2038 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2022 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1147, _1148, _1149), _1954);
        _2034 = _2022.x * cbModelParam._m0[1u].y;
        _2036 = _2022.y * cbModelParam._m0[1u].y;
        _2038 = _2022.z * cbModelParam._m0[1u].y;
    }
    float _2042 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _993);
    float _2043 = isnan(_2042) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2042 : min(cbModelParam._m0[25u].w, _2042));
    float _2132;
    float _2134;
    float _2136;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2096 = fma(_1208, cbModelParam._m0[21u].z, fma(_1204, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1200)) + cbModelParam._m0[21u].w;
        float _2100 = fma(_1208, cbModelParam._m0[22u].z, fma(_1204, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1200)) + cbModelParam._m0[22u].w;
        float _2104 = fma(_1208, cbModelParam._m0[23u].z, fma(_1204, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1200)) + cbModelParam._m0[23u].w;
        float _2107 = fma(_1149, cbModelParam._m0[21u].z, fma(_1148, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1147));
        float _2110 = fma(_1149, cbModelParam._m0[22u].z, fma(_1148, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1147));
        float _2113 = fma(_1149, cbModelParam._m0[23u].z, fma(_1148, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1147));
        float _2272;
        if (_2107 > 0.0)
        {
            _2272 = abs((1.0 - _2096) / _2107);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2096 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2272 = frontier_phi_25_21_ladder;
        }
        float _2540;
        if (_2110 > 0.0)
        {
            _2540 = abs((1.0 - _2100) / _2110);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2100 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2540 = frontier_phi_37_32_ladder;
        }
        float _2745;
        if (_2113 > 0.0)
        {
            _2745 = abs((1.0 - _2104) / _2113);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2104 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2745 = frontier_phi_46_43_ladder;
        }
        float _2747 = isnan(_2540) ? _2272 : (isnan(_2272) ? _2540 : min(_2272, _2540));
        float _2748 = isnan(_2745) ? _2747 : (isnan(_2747) ? _2745 : min(_2747, _2745));
        float _2752 = (_2748 * _2107) + _2096;
        float _2753 = (_2748 * _2110) + _2100;
        float _2754 = (_2748 * _2113) + _2104;
        float _2755 = _2748 * 9.9999997473787516355514526367188e-05;
        float _2756 = (-1.0) - _2755;
        float _2758 = _2755 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2754 > _2758) || ((_2754 < _2756) || ((_2753 > _2758) || ((_2753 < _2756) || ((_2752 < _2756) || (_2752 > _2758))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2754, cbModelParam._m0[17u].z, fma(_2753, cbModelParam._m0[17u].y, _2752 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2754, cbModelParam._m0[18u].z, fma(_2753, cbModelParam._m0[18u].y, _2752 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2754, cbModelParam._m0[19u].z, fma(_2753, cbModelParam._m0[19u].y, _2752 * cbModelParam._m0[19u].x))), _2043);
            frontier_phi_22_46_ladder = _2953.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2953.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2953.x * cbModelParam._m0[1u].z;
        }
        _2132 = frontier_phi_22_46_ladder_2;
        _2134 = frontier_phi_22_46_ladder_1;
        _2136 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2116 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1147, _1148, _1149), _2043);
        _2132 = _2116.x * cbModelParam._m0[1u].z;
        _2134 = _2116.y * cbModelParam._m0[1u].z;
        _2136 = _2116.z * cbModelParam._m0[1u].z;
    }
    float _2148 = ((((1.0 - _1168) * ((_1155 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1168 * _1155)) * _1139;
    float _2149 = _2148 * ((cbModelParam._m0[1u].w * (_2132 - _2034)) + _2034);
    float _2150 = _2148 * ((cbModelParam._m0[1u].w * (_2134 - _2036)) + _2036);
    float _2151 = _2148 * ((cbModelParam._m0[1u].w * (_2136 - _2038)) + _2038);
    float _2154 = fma(_2151, cbSceneParam._m0[89u].z, fma(_2150, cbSceneParam._m0[89u].y, _2149 * cbSceneParam._m0[89u].x));
    float _2157 = fma(_2151, cbSceneParam._m0[90u].z, fma(_2150, cbSceneParam._m0[90u].y, _2149 * cbSceneParam._m0[90u].x));
    float _2160 = fma(_2151, cbSceneParam._m0[91u].z, fma(_2150, cbSceneParam._m0[91u].y, _2149 * cbSceneParam._m0[91u].x));
    vec4 _2168 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1076, _1077));
    float _2170 = _2168.w;
    float _2182 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2170);
    float _2183 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2170);
    float _2184 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2170);
    uvec4 _2188 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2190 = _2188.x * 14u;
    uint _2191 = _2190 + 13u;
    float _2198 = _1139 + (-1.0);
    float _2203 = (cbLight._m0[_2191].x * _2198) + 1.0;
    float _2204 = (cbLight._m0[_2191].y * _2198) + 1.0;
    float _2205 = (cbLight._m0[_2191].z * _2198) + 1.0;
    float _2206 = (cbLight._m0[_2191].w * _2198) + 1.0;
    uint _2207 = _2190 + 5u;
    float _2213 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2217 = _2190 + 4u;
    float _2226 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2230 = _2190 | 1u;
    float _2241 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_990, _991, _992));
    float _2244 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_990, _991, _992));
    float _4423 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _4434 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2249 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * 0.3183098733425140380859375;
    float _2251 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * 0.3183098733425140380859375;
    float _2258 = ((cbLight._m0[_2207].x * _2213) * _2251) + (((cbLight._m0[_2217].x * _2182) * _2226) * _2249);
    float _2259 = ((_2213 * cbLight._m0[_2207].y) * _2251) + (((cbLight._m0[_2217].y * _2183) * _2226) * _2249);
    float _2260 = ((_2213 * cbLight._m0[_2207].z) * _2251) + (((cbLight._m0[_2217].z * _2184) * _2226) * _2249);
    uvec4 _2264 = floatBitsToUint(cbLight._m0[_2190 + 12u]);
    bool _2266 = _2264.x == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2266)
    {
        _2277 = _2258;
        _2279 = _2259;
        _2281 = _2260;
    }
    else
    {
        uint _2285 = _2190 + 6u;
        float _2301 = (dot(vec3(cbLight._m0[_2190 + 2u].xyz), vec3(_990, _991, _992)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4445 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2304 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2277 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2258;
        _2279 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2259;
        _2281 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2260;
    }
    bool _2284 = _2264.y == 0u;
    float _2322;
    float _2324;
    float _2326;
    if (_2284)
    {
        _2322 = _2277;
        _2324 = _2279;
        _2326 = _2281;
    }
    else
    {
        uint _2484 = _2190 + 7u;
        float _2500 = (dot(vec3(cbLight._m0[_2190 + 3u].xyz), vec3(_990, _991, _992)) * 0.5) + 0.5;
        float _2501 = _2500 * _2500;
        float _4461 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2502 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2503 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2322 = (((cbLight._m0[_2484].x * 0.3183098733425140380859375) * _2502) * _2503) + _2277;
        _2324 = (((cbLight._m0[_2484].y * 0.3183098733425140380859375) * _2502) * _2503) + _2279;
        _2326 = (((cbLight._m0[_2484].z * 0.3183098733425140380859375) * _2502) * _2503) + _2281;
    }
    uint _2329 = _2190 + 8u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _993) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2190].x + _1068;
    float _2345 = cbLight._m0[_2190].y + _1069;
    float _2346 = cbLight._m0[_2190].z + _1070;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2190].xyz));
    float _4477 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _4488 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _2358 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2359 = dot(vec3(_990, _991, _992), vec3(_2351, _2352, _2353));
    float _4499 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2351, _2352, _2353));
    float _4510 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2343 * _2343;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2382 = (exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2383 = 1.0 - _2343;
    float _2394 = (0.5 / (((_2358 * ((_2357 * _2383) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2383) + _2343) * _2357))) * _2357;
    float _4521 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    uint _2410 = _2190 + 9u;
    float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _993) * 0.949999988079071044921875);
    float _2422 = _2421 * _2421;
    float _2423 = cbLight._m0[_2230].x + _1068;
    float _2424 = cbLight._m0[_2230].y + _1069;
    float _2425 = cbLight._m0[_2230].z + _1070;
    float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
    float _2430 = _2429 * _2423;
    float _2431 = _2429 * _2424;
    float _2432 = _2429 * _2425;
    float _2433 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2230].xyz));
    float _4532 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2436 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2437 = dot(vec3(_990, _991, _992), vec3(_2430, _2431, _2432));
    float _4543 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2441 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2430, _2431, _2432));
    float _4554 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2445 = _2422 * _2422;
    float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
    float _2458 = (exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2459 = 1.0 - _2422;
    float _2469 = (0.5 / (((_2358 * ((_2436 * _2459) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2459) + _2422) * _2436))) * _2436;
    float _4565 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2471 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
    float _2481 = (((_2458 * cbLight._m0[_2410].x) * _2471) * _2213) + ((((cbLight._m0[_2329].x * _2182) * _2382) * _2396) * _2226);
    float _2482 = (((_2458 * cbLight._m0[_2410].y) * _2471) * _2213) + ((((cbLight._m0[_2329].y * _2183) * _2382) * _2396) * _2226);
    float _2483 = (((_2458 * cbLight._m0[_2410].z) * _2471) * _2213) + ((((cbLight._m0[_2329].z * _2184) * _2382) * _2396) * _2226);
    float _2545;
    float _2547;
    float _2549;
    if (_2266)
    {
        _2545 = _2481;
        _2547 = _2482;
        _2549 = _2483;
    }
    else
    {
        uint _2551 = _2190 + 2u;
        uint _2555 = _2190 + 10u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _993) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _1068;
        float _2572 = cbLight._m0[_2551].y + _1069;
        float _2573 = cbLight._m0[_2551].z + _1070;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2551].xyz));
        float _4576 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2585 = dot(vec3(_990, _991, _992), vec3(_2578, _2579, _2580));
        float _4587 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4598 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2606 = (exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2607 = 1.0 - _2570;
        float _2617 = (0.5 / (((_2358 * ((_2584 * _2607) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2607) + _2570) * _2584))) * _2584;
        float _4609 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2619 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2620 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2545 = (((_2606 * cbLight._m0[_2555].x) * _2619) * _2620) + _2481;
        _2547 = (((_2606 * cbLight._m0[_2555].y) * _2619) * _2620) + _2482;
        _2549 = (((_2606 * cbLight._m0[_2555].z) * _2619) * _2620) + _2483;
    }
    float _2655;
    float _2657;
    float _2659;
    if (_2284)
    {
        _2655 = _2545;
        _2657 = _2547;
        _2659 = _2549;
    }
    else
    {
        uint _2666 = _2190 + 3u;
        uint _2670 = _2190 + 11u;
        float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2666].w)) * _993) * 0.949999988079071044921875);
        float _2685 = _2684 * _2684;
        float _2686 = cbLight._m0[_2666].x + _1068;
        float _2687 = cbLight._m0[_2666].y + _1069;
        float _2688 = cbLight._m0[_2666].z + _1070;
        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
        float _2693 = _2692 * _2686;
        float _2694 = _2692 * _2687;
        float _2695 = _2692 * _2688;
        float _2696 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2666].xyz));
        float _4625 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2700 = dot(vec3(_990, _991, _992), vec3(_2693, _2694, _2695));
        float _4636 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2704 = dot(vec3(cbLight._m0[_2666].xyz), vec3(_2693, _2694, _2695));
        float _4647 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2708 = _2685 * _2685;
        float _2712 = ((_2703 * _2703) * (_2708 + (-1.0))) + 1.0;
        float _2721 = (exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2722 = 1.0 - _2685;
        float _2732 = (0.5 / (((_2358 * ((_2699 * _2722) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2722) + _2685) * _2699))) * _2699;
        float _4658 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2734 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2708 / ((_2712 * _2712) * 3.141590118408203125));
        float _2735 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2655 = (((_2721 * cbLight._m0[_2670].x) * _2734) * _2735) + _2545;
        _2657 = (((_2721 * cbLight._m0[_2670].y) * _2734) * _2735) + _2547;
        _2659 = (((_2721 * cbLight._m0[_2670].z) * _2734) * _2735) + _2549;
    }
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    if (_2188.y == 0u)
    {
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2810;
        float _2812 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2810;
        float _2813 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2810;
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.x;
        uint _2837 = uint((float(_2825.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1077) / _2826))) + floor(float(uint(cbSceneParam._m0[85u].x * _1076) / _2826)));
        float _2847 = (log2(_2813 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2848 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        uint _2851 = uint(isnan(14.0) ? _2848 : (isnan(_2848) ? 14.0 : min(_2848, 14.0)));
        uvec4 _2856 = texelFetch(g_lightClusterGridBuffer, int(((_2851 << 2u) + (_2837 << 6u)) >> 2u));
        uint _2857 = _2856.x;
        uint _2858 = _2825.z;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((((1u << ((_2858 >> 4u) & 15u)) + 4294967295u) & _2857) == 0u) || ((_2858 & 240u) == 0u))
        {
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
        }
        else
        {
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            uint _3108 = 0u;
            uint _3117;
            bool _3118;
            for (;;)
            {
                _3117 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3108 << 2u)) >> 2u)).x;
                _3118 = _3117 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3118)
                {
                    frontier_phi_61_pred = _3102;
                    frontier_phi_61_pred_1 = _3107;
                    frontier_phi_61_pred_2 = _3106;
                    frontier_phi_61_pred_3 = _3105;
                    frontier_phi_61_pred_4 = _3104;
                    frontier_phi_61_pred_5 = _3103;
                }
                else
                {
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    uint _3232;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3107;
                    _3232 = _3117;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    for (;;)
                    {
                        uint _3236 = uint(findLSB(_3232)) + (_3108 << 5u);
                        uint _3233 = (_3232 + 4294967295u) & _3232;
                        uint _3238 = _3236 * 48u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 3u)).x));
                        uint _3258 = (_3236 * 48u) + 4u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3277 = (_3236 * 48u) + 8u;
                        vec3 _3288 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x));
                        float _3292 = _3252.x - _2811;
                        float _3293 = _3252.y - _2812;
                        float _3294 = _3252.z - _2813;
                        float _3295 = dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294));
                        float _3298 = inversesqrt(_3295);
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3302 = dot(vec3(_1095, _1098, _1101), vec3(_3299, _3300, _3301));
                        float _3307 = 1.0 - (_3295 * _3252.w);
                        float _4684 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3309 = sqrt(_3295) * _3271.w;
                        float _3312 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3302) + _3313;
                        float _3319 = _3309 * _3309;
                        float _3323 = ((isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))) * _3308) / ((_3319 * 0.699999988079071044921875) + 1.0);
                        float _3327 = (-0.0) - _2811;
                        float _3328 = (-0.0) - _2812;
                        float _3329 = (-0.0) - _2813;
                        float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                        float _3334 = _3333 * _3327;
                        float _3335 = _3333 * _3328;
                        float _3336 = _3333 * _3329;
                        float _3344 = exp2(log2(1.0 / ((_3319 * 3.5) + 5.0)) * 0.25);
                        float _3345 = 1.0 - _1155;
                        float _3352 = sqrt(1.0 - ((1.0 - (_3345 * _3345)) * (1.0 - (_3344 * _3344))));
                        float _3353 = _3352 * _3352;
                        float _3354 = _3353 * _3353;
                        float _3355 = _3334 + _3299;
                        float _3356 = _3335 + _3300;
                        float _3357 = _3336 + _3301;
                        float _3361 = inversesqrt(dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357)));
                        float _3365 = dot(vec3(_1095, _1098, _1101), vec3(_3334, _3335, _3336));
                        float _4700 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3369 = dot(vec3(_1095, _1098, _1101), vec3(_3361 * _3355, _3361 * _3356, _3361 * _3357));
                        float _4711 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                        float _3376 = ((_3372 * _3372) * (_3354 + (-1.0))) + 1.0;
                        float _3377 = _3312 * _3353;
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3302) + _3378;
                        float _4722 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                        float _3383 = 1.0 - _3353;
                        float _3393 = (0.5 / (((_3382 * ((_3368 * _3383) + _3353)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3353) * _3368))) * _3382;
                        float _4733 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3404 = (((_3354 * 3.1415927410125732421875) * (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) / ((_3376 * _3376) * ((_3319 * 2.1991131305694580078125) + 3.141590118408203125))) * _3308;
                        _3161 = (_3323 * _3271.x) + _3229;
                        _3162 = (_3323 * _3271.y) + _3230;
                        _3163 = (_3323 * _3271.z) + _3231;
                        _3158 = (_3404 * _3288.x) + _3226;
                        _3159 = (_3404 * _3288.y) + _3227;
                        _3160 = (_3404 * _3288.z) + _3228;
                        if (_3233 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3163;
                            _3232 = _3233;
                        }
                    }
                    frontier_phi_61_pred = _3158;
                    frontier_phi_61_pred_1 = _3163;
                    frontier_phi_61_pred_2 = _3162;
                    frontier_phi_61_pred_3 = _3161;
                    frontier_phi_61_pred_4 = _3160;
                    frontier_phi_61_pred_5 = _3159;
                }
                _2959 = frontier_phi_61_pred;
                _2969 = frontier_phi_61_pred_1;
                _2967 = frontier_phi_61_pred_2;
                _2965 = frontier_phi_61_pred_3;
                _2963 = frontier_phi_61_pred_4;
                _2961 = frontier_phi_61_pred_5;
                uint _3109 = _3108 + 1u;
                if (_3109 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3102 = _2959;
                    _3103 = _2961;
                    _3104 = _2963;
                    _3105 = _2965;
                    _3106 = _2967;
                    _3107 = _2969;
                    _3108 = _3109;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
        }
        uvec4 _2972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2973 = _2972.z;
        uint _2975 = (_2973 >> 8u) & 15u;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((4294967295u << _2975) & _2857) == 0u)
        {
            _3070 = _2958;
            _3072 = _2960;
            _3074 = _2962;
            _3076 = _2964;
            _3078 = _2966;
            _3080 = _2968;
        }
        else
        {
            float _3095 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
            float _3096 = _3095 * _2811;
            float _3097 = _3095 * _2812;
            float _3098 = _3095 * _2813;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2975 < ((_2973 >> 12u) & 15u))
            {
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3209 = _2958;
                float _3210 = _2960;
                float _3211 = _2962;
                float _3212 = _2964;
                float _3213 = _2966;
                float _3214 = _2968;
                uint _3215 = _2975;
                uint _3224;
                bool _3225;
                for (;;)
                {
                    _3224 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                    _3225 = _3224 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3225)
                    {
                        frontier_phi_67_pred = _3212;
                        frontier_phi_67_pred_1 = _3213;
                        frontier_phi_67_pred_2 = _3214;
                        frontier_phi_67_pred_3 = _3211;
                        frontier_phi_67_pred_4 = _3210;
                        frontier_phi_67_pred_5 = _3209;
                    }
                    else
                    {
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3422 = _3209;
                        float _3423 = _3210;
                        float _3424 = _3211;
                        float _3425 = _3212;
                        float _3426 = _3213;
                        float _3427 = _3214;
                        uint _3428 = _3224;
                        uint _3429;
                        vec4 _3454;
                        float _3455;
                        vec4 _3470;
                        vec3 _3482;
                        vec4 _3497;
                        vec4 _3512;
                        float _3558;
                        bool _3559;
                        for (;;)
                        {
                            uint _3439 = ((_3215 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3428));
                            _3429 = (_3428 + 4294967295u) & _3428;
                            uint _3441 = _3439 * 40u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3455 = _3454.w;
                            uint _3457 = (_3439 * 40u) + 4u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3439 * 40u) + 8u;
                            _3482 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x));
                            uint _3484 = (_3439 * 40u) + 16u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3439 * 40u) + 20u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3439 * 40u) + 24u;
                            vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3533 = (_3439 * 40u) + 28u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3558 = fma(_2813, _3546.z, fma(_2812, _3546.y, _3546.x * _2811)) + _3546.w;
                            _3559 = !((fma(_2813, _3527.z, fma(_2812, _3527.y, _3527.x * _2811)) + _3527.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3559)
                            {
                                float _3586 = _3454.x - _2811;
                                float _3587 = _3454.y - _2812;
                                float _3588 = _3454.z - _2813;
                                float _3589 = dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588));
                                float _3592 = inversesqrt(_3589);
                                float _3593 = _3592 * _3586;
                                float _3594 = _3592 * _3587;
                                float _3595 = _3592 * _3588;
                                float _3599 = 1.0 - (_3589 / (_3455 * _3455));
                                float _4744 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3604 = sqrt(_3589) * _3470.w;
                                float _3606 = 1.39999997615814208984375 / (_3604 + 1.39999997615814208984375);
                                float _3607 = _3606 * _3606;
                                float _3610 = ((1.0 - _3607) * dot(vec3(_3593, _3594, _3595), vec3(_1095, _1098, _1101))) + _3607;
                                float _3613 = _3604 * _3604;
                                float _3617 = (fma(_2813, _3497.z, fma(_2812, _3497.y, _3497.x * _2811)) + _3497.w) / _3558;
                                float _3618 = (fma(_2813, _3512.z, fma(_2812, _3512.y, _3512.x * _2811)) + _3512.w) / _3558;
                                float _3622 = 1.0 - dot(vec2(_3617, _3618), vec2(_3617, _3618));
                                float _4760 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3624 = _3623 * (((isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0))) * _3600) / ((_3613 * 0.699999988079071044921875) + 1.0));
                                float _3636 = exp2(log2(1.0 / ((_3613 * 3.5) + 5.0)) * 0.25);
                                float _3637 = 1.0 - _1155;
                                float _3644 = sqrt(1.0 - ((1.0 - (_3637 * _3637)) * (1.0 - (_3636 * _3636))));
                                float _3645 = _3644 * _3644;
                                float _3646 = _3645 * _3645;
                                float _3647 = _3593 - _3096;
                                float _3648 = _3594 - _3097;
                                float _3649 = _3595 - _3098;
                                float _3653 = inversesqrt(dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649)));
                                float _3657 = dot(vec3(_1095, _1098, _1101), vec3((-0.0) - _3096, (-0.0) - _3097, (-0.0) - _3098));
                                float _4771 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3660 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3661 = dot(vec3(_1095, _1098, _1101), vec3(_3653 * _3647, _3653 * _3648, _3653 * _3649));
                                float _4782 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3664 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3668 = ((_3664 * _3664) * (_3646 + (-1.0))) + 1.0;
                                float _3669 = _3606 * _3645;
                                float _3670 = _3669 * _3669;
                                float _3676 = ((1.0 - _3670) * dot(vec3(_1095, _1098, _1101), vec3(_3593, _3594, _3595))) + _3670;
                                float _4793 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3678 = 1.0 - _3645;
                                float _3688 = (0.5 / (((_3677 * ((_3660 * _3678) + _3645)) + 9.9999999392252902907785028219223e-09) + (((_3677 * _3678) + _3645) * _3660))) * _3677;
                                float _4804 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3698 = (_3623 * _3600) * (((_3646 * 3.1415927410125732421875) * (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) / ((_3668 * _3668) * ((_3613 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3698 * _3482.x;
                                frontier_phi_73_pred_1 = _3698 * _3482.y;
                                frontier_phi_73_pred_2 = _3624 * _3470.z;
                                frontier_phi_73_pred_3 = _3624 * _3470.y;
                                frontier_phi_73_pred_4 = _3624 * _3470.x;
                                frontier_phi_73_pred_5 = _3698 * _3482.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3702 = frontier_phi_73_pred;
                            _3703 = frontier_phi_73_pred_1;
                            _3707 = frontier_phi_73_pred_2;
                            _3706 = frontier_phi_73_pred_3;
                            _3705 = frontier_phi_73_pred_4;
                            _3704 = frontier_phi_73_pred_5;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            if (_3429 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3429;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3412;
                        frontier_phi_67_pred_1 = _3413;
                        frontier_phi_67_pred_2 = _3414;
                        frontier_phi_67_pred_3 = _3411;
                        frontier_phi_67_pred_4 = _3410;
                        frontier_phi_67_pred_5 = _3409;
                    }
                    _3077 = frontier_phi_67_pred;
                    _3079 = frontier_phi_67_pred_1;
                    _3081 = frontier_phi_67_pred_2;
                    _3075 = frontier_phi_67_pred_3;
                    _3073 = frontier_phi_67_pred_4;
                    _3071 = frontier_phi_67_pred_5;
                    uint _3216 = _3215 + 1u;
                    if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3209 = _3071;
                        _3210 = _3073;
                        _3211 = _3075;
                        _3212 = _3077;
                        _3213 = _3079;
                        _3214 = _3081;
                        _3215 = _3216;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3079;
                frontier_phi_55_56_ladder_1 = _3081;
                frontier_phi_55_56_ladder_2 = _3077;
                frontier_phi_55_56_ladder_3 = _3075;
                frontier_phi_55_56_ladder_4 = _3073;
                frontier_phi_55_56_ladder_5 = _3071;
            }
            else
            {
                frontier_phi_55_56_ladder = _2966;
                frontier_phi_55_56_ladder_1 = _2968;
                frontier_phi_55_56_ladder_2 = _2964;
                frontier_phi_55_56_ladder_3 = _2962;
                frontier_phi_55_56_ladder_4 = _2960;
                frontier_phi_55_56_ladder_5 = _2958;
            }
            _3070 = frontier_phi_55_56_ladder_5;
            _3072 = frontier_phi_55_56_ladder_4;
            _3074 = frontier_phi_55_56_ladder_3;
            _3076 = frontier_phi_55_56_ladder_2;
            _3078 = frontier_phi_55_56_ladder;
            _3080 = frontier_phi_55_56_ladder_1;
        }
        float _3085 = isnan(1.0) ? _1139 : (isnan(_1139) ? 1.0 : min(_1139, 1.0));
        _2870 = (_3085 * _3076) + _2322;
        _2872 = (_3085 * _3078) + _2324;
        _2874 = (_3085 * _3080) + _2326;
        _2876 = ((_3070 * 0.039999999105930328369140625) * _3085) + _2655;
        _2878 = ((_3072 * 0.039999999105930328369140625) * _3085) + _2657;
        _2880 = ((_3074 * 0.039999999105930328369140625) * _3085) + _2659;
    }
    else
    {
        _2870 = _2322;
        _2872 = _2324;
        _2874 = _2326;
        _2876 = _2655;
        _2878 = _2657;
        _2880 = _2659;
    }
    float _4820 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _4831 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _4842 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    uint _2900 = _285 + 6u;
    float _2908 = _1076 / cbSceneParam._m0[86u].x;
    float _2909 = _1077 / cbSceneParam._m0[86u].y;
    vec4 _2923 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, (log2((isnan(cbSceneParam._m0[77u].w) ? _1011 : (isnan(_1011) ? cbSceneParam._m0[77u].w : min(_1011, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2925 = _2923.x;
    float _2926 = _2923.y;
    float _2927 = _2923.z;
    float _2928 = _2923.w;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_1011 > cbSceneParam._m0[78u].w)
    {
        float _2983 = isnan(_1011) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1011 : min(cbSceneParam._m0[80u].w, _1011));
        float _2984 = _2983 / _1011;
        float _2995 = _2984 * _1061;
        float _2996 = _1062 * _2984;
        float _2997 = (-0.0) - _2996;
        float _2998 = _2984 * _1063;
        float _3000 = (cbSceneParam._m0[77u].w * _2997) / _2983;
        float _3001 = _3000 + cbSceneParam._m0[79u].w;
        float _3002 = cbSceneParam._m0[79u].w - _2996;
        float _3008 = sqrt(((_2995 * _2995) + (_2996 * _2996)) + (_2998 * _2998));
        float _3011 = (1.0 - (cbSceneParam._m0[77u].w / _2983)) * _3008;
        float _3016 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3018 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3171;
        if (abs((_2997 - _3000) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3171 = ((((_3001 > 0.0) ? exp2(_3016 * _3001) : (2.0 - exp2(_3018 * _3001))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3011;
        }
        else
        {
            float _3131 = 1.0 / cbSceneParam._m0[80u].x;
            float _3132 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : max(_3001, _3002));
            float _3133 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : min(_3001, _3002));
            float _3142 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : min(_3132, 0.0));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            _3171 = ((abs(_3008 / _2997) * cbSceneParam._m0[80u].y) * ((((_3142 - _3143) * 2.0) - ((exp2(_3016 * (isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0)))) - exp2(_3016 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0))))) * _3131)) - ((exp2(_3018 * _3142) - exp2(_3018 * _3143)) * _3131))) + (_3011 * cbSceneParam._m0[80u].z);
        }
        vec4 _3173 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, 1.0), 0.0);
        float _3182 = exp2((_3171 * (-1.44269502162933349609375)) * (1.0 - _3173.w));
        float _3183 = log2(_3182);
        float _3199 = log2(_2928);
        _3020 = (exp2(_3199 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].x)) * _3173.x) / cbSceneParam._m0[78u].x)) + _2925;
        _3022 = (exp2(_3199 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].y)) * _3173.y) / cbSceneParam._m0[78u].y)) + _2926;
        _3024 = (exp2(_3199 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].z)) * _3173.z) / cbSceneParam._m0[78u].z)) + _2927;
        _3026 = _3182 * _2928;
    }
    else
    {
        _3020 = _2925;
        _3022 = _2926;
        _3024 = _2927;
        _3026 = _2928;
    }
    float _3038 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3039 = _3038 == 3.0;
    float _3040 = log2(_3026);
    float _3047 = exp2(_3040 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2870 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1139))) + ((_2876 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1943)) * cbPerFrame._m0[3u].x));
    float _3048 = exp2(_3040 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2872 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1139))) + ((_2878 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1943)) * cbPerFrame._m0[3u].x));
    float _3049 = exp2(_3040 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2874 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1139))) + ((_2880 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1943)) * cbPerFrame._m0[3u].x));
    float _3058 = (_3038 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3058 * (_3039 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3020)));
    SV_Target.y = _3058 * (_3039 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3022)));
    SV_Target.z = _3058 * (_3039 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3024)));
    SV_Target.w = cbInstanceData._m0[_2900].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2900].w;
}


