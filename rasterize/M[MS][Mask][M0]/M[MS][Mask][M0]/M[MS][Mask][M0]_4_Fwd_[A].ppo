#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1187;
float _3549;
float _3550;
float _3551;
float _3552;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3561 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3572 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3583 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _281) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _282) + cbTextureTilingScale._m0[5u].w));
    vec4 _421 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _435 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _452 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_423 - _435) * cbMtdParam._m0[24u].z) + _435) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3594 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _463 = (_318.x * cbMtdParam._m0[9u].x) * ((_453 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349);
    float _464 = (_318.y * cbMtdParam._m0[9u].y) * ((_453 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350);
    float _465 = (_318.z * cbMtdParam._m0[9u].z) * ((_453 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351);
    float _469 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _463;
    float _472 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _464;
    float _475 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _465;
    float _483 = (((_463 - _469) * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) + _469) * 4.55000019073486328125;
    float _485 = (((_464 - _472) * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) + _472) * 4.55000019073486328125;
    float _487 = (((_465 - _475) * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) + _475) * 4.55000019073486328125;
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _544 = _542.x;
    float _545 = _542.y;
    float _546 = _542.z;
    float _555 = ((_525.z - _546) * _453) + _546;
    float _558 = ((((_525.x - _544) * _453) + _544) * 2.0) + (-1.0);
    float _559 = ((((_525.y - _545) * _453) + _545) * 2.0) + (-1.0);
    float _560 = dot(vec2(_558, _559), vec2(_558, _559));
    float _3605 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = sqrt(1.0 - (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))));
    vec4 _587 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _599 = (_558 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_500.x * 2.0) + (-1.0)))) + (((_587.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _600 = (_559 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_500.y * 2.0) + (-1.0)))) + (((_587.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _605 = (((_500.z - _555) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _555;
    float _609 = ((_587.z - _605) * cbMtdParam._m0[19u].w) + _605;
    float _611 = cbMtdParam._m0[22u].x + _587.w;
    float _614 = fma(_565, _228 * NORMAL.x, fma(_600, _235 * TANGENT.x, (_221 * _213) * _599));
    float _617 = fma(_565, _228 * NORMAL.y, fma(_600, _235 * TANGENT.y, (_221 * _214) * _599));
    float _620 = fma(_565, _228 * NORMAL.z, fma(_600, _235 * TANGENT.z, (_221 * _215) * _599));
    float _624 = inversesqrt(dot(vec3(_614, _617, _620), vec3(_614, _617, _620)));
    float _625 = _624 * _614;
    float _626 = _624 * _617;
    float _627 = _624 * _620;
    float _3616 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _628 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3638 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3649 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3660 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _646 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _697 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _687);
    float _698 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _687);
    float _699 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _687);
    float _703 = inversesqrt(dot(vec3(_697, _698, _699), vec3(_697, _698, _699)));
    float _704 = _697 * _703;
    float _705 = _698 * _703;
    float _706 = _699 * _703;
    vec4 _711 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _713 = _711.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _867 = sqrt(((_697 * _697) + (_698 * _698)) + (_699 * _699));
        float _873 = (cbMatDynParam._m0[5u].x * _867) + cbMatDynParam._m0[5u].y;
        float _3671 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _878 = (cbMatDynParam._m0[5u].z * _867) + cbMatDynParam._m0[5u].w;
        float _3682 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) - _874)) + _874) < ((_713 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _724 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _725 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _743 = fma(_627, cbSceneParam._m0[5u].z, fma(_626, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _625));
    float _746 = fma(_627, cbSceneParam._m0[6u].z, fma(_626, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _625));
    float _749 = fma(_627, cbSceneParam._m0[7u].z, fma(_626, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _625));
    uint _762 = _262 + 9u;
    uint _763 = _762 + uint(cbMatDynParam._m0[0u].w);
    float _769 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * cbInstanceData._m0[_763].x;
    float _770 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * cbInstanceData._m0[_763].y;
    float _771 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) * cbInstanceData._m0[_763].z;
    float _3693 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    vec4 _783 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _724, cbSceneParam._m0[86u].y * _725));
    float _787 = ((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * TEXCOORD_5.w) * _783.x;
    float _788 = dot(vec3(_625, _626, _627), vec3(_704, _705, _706));
    float _791 = _788 * 2.0;
    float _795 = (_791 * _625) - _704;
    float _796 = (_791 * _626) - _705;
    float _797 = (_791 * _627) - _706;
    float _801 = abs(dot(vec3(_704, _705, _706), vec3(_625, _626, _627)));
    float _3726 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _803 = sqrt(_628);
    float _816 = exp2((_803 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_803 * 3.0));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1186;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _911 = fma(_856, cbModelParam._m0[26u].z, fma(_852, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _848));
        float _915 = fma(_856, cbModelParam._m0[27u].z, fma(_852, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _848));
        float _919 = fma(_856, cbModelParam._m0[28u].z, fma(_852, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _848));
        float _944 = _848 + _625;
        float _945 = _852 + _626;
        float _946 = _856 + _627;
        float _956 = fma(_946, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _944)) - _911;
        float _957 = fma(_946, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _944)) - _915;
        float _958 = fma(_946, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _944)) - _919;
        float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
        float _975 = ((_962 * _956) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_911 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_962 * _957) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_915 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_962 * _958) / cbModelParam._m0[34u].z) + ((((((_919 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        float _1014 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_980.x + (-0.5));
        float _1016 = _1014 * (_980.y + (-0.5));
        float _1017 = _1014 * (_980.z + (-0.5));
        float _1024 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_987.x + (-0.5));
        float _1026 = _1024 * (_987.y + (-0.5));
        float _1027 = _1024 * (_987.z + (-0.5));
        float _1034 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_994.x + (-0.5));
        float _1036 = _1034 * (_994.y + (-0.5));
        float _1037 = _1034 * (_994.z + (-0.5));
        float _1044 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1001.x + (-0.5));
        float _1046 = _1044 * (_1001.y + (-0.5));
        float _1047 = _1044 * (_1001.z + (-0.5));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = _1015 * 0.5;
        float _1052 = _1025 * 0.5;
        float _1053 = _1035 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1068 = (dot(vec3(_625, _626, _627), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1078 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3774 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1080 + 1.0))) + _1085) * _1048;
        float _1095 = _1016 * 0.5;
        float _1096 = _1026 * 0.5;
        float _1097 = _1036 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_625, _626, _627), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3807 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1122 + 1.0))) + _1127) * _1049;
        float _1137 = _1017 * 0.5;
        float _1138 = _1027 * 0.5;
        float _1139 = _1037 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_625, _626, _627), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3840 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1164 + 1.0))) + _1169) * _1050;
        _1186 = _1017;
        _1188 = _1016;
        _1189 = _1015;
        _1190 = _1027;
        _1191 = _1026;
        _1192 = _1025;
        _1193 = _1037;
        _1194 = _1036;
        _1195 = _1035;
        _1196 = _1050;
        _1197 = _1049;
        _1198 = _1048;
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
    }
    else
    {
        _1186 = _1187;
        _1188 = _1187;
        _1189 = _1187;
        _1190 = _1187;
        _1191 = _1187;
        _1192 = _1187;
        _1193 = _1187;
        _1194 = _1187;
        _1195 = _1187;
        _1196 = _1187;
        _1197 = _1187;
        _1198 = _1187;
        _1199 = 0.0;
        _1200 = 0.0;
        _1201 = 0.0;
    }
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1229 = fma(_856, cbModelParam._m0[30u].z, fma(_852, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _848));
        float _1233 = fma(_856, cbModelParam._m0[31u].z, fma(_852, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _848));
        float _1237 = fma(_856, cbModelParam._m0[32u].z, fma(_852, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _848));
        float _1260 = _848 + _625;
        float _1261 = _852 + _626;
        float _1262 = _856 + _627;
        float _1272 = fma(_1262, cbModelParam._m0[30u].z, fma(_1261, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1260)) - _1229;
        float _1273 = fma(_1262, cbModelParam._m0[31u].z, fma(_1261, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1260)) - _1233;
        float _1274 = fma(_1262, cbModelParam._m0[32u].z, fma(_1261, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1260)) - _1237;
        float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
        float _1291 = ((_1278 * _1272) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1229 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1278 * _1273) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1233 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1278 * _1274) / cbModelParam._m0[35u].z) + ((((((_1237 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        float _1328 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1295.x + (-0.5));
        float _1330 = _1328 * (_1295.y + (-0.5));
        float _1331 = _1328 * (_1295.z + (-0.5));
        float _1338 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1302.x + (-0.5));
        float _1340 = _1338 * (_1302.y + (-0.5));
        float _1341 = _1338 * (_1302.z + (-0.5));
        float _1348 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1309.x + (-0.5));
        float _1350 = _1348 * (_1309.y + (-0.5));
        float _1351 = _1348 * (_1309.z + (-0.5));
        float _1358 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1316.x + (-0.5));
        float _1360 = _1358 * (_1316.y + (-0.5));
        float _1361 = _1358 * (_1316.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_625, _626, _627), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _3903 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1392 + 1.0))) + _1397) * _1362;
        float _1407 = _1330 * 0.5;
        float _1408 = _1340 * 0.5;
        float _1409 = _1350 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_625, _626, _627), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _3936 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1434 + 1.0))) + _1439) * _1363;
        float _1449 = _1331 * 0.5;
        float _1450 = _1341 * 0.5;
        float _1451 = _1351 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_625, _626, _627), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _3969 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1476 + 1.0))) + _1481) * _1364;
        _1498 = _1331;
        _1499 = _1330;
        _1500 = _1329;
        _1501 = _1341;
        _1502 = _1340;
        _1503 = _1339;
        _1504 = _1351;
        _1505 = _1350;
        _1506 = _1349;
        _1507 = _1364;
        _1508 = _1363;
        _1509 = _1362;
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1187;
        _1499 = _1187;
        _1500 = _1187;
        _1501 = _1187;
        _1502 = _1187;
        _1503 = _1187;
        _1504 = _1187;
        _1505 = _1187;
        _1506 = _1187;
        _1507 = _1187;
        _1508 = _1187;
        _1509 = _1187;
        _1510 = 0.0;
        _1511 = 0.0;
        _1512 = 0.0;
    }
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1199)) + _1199;
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1200)) + _1200;
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1201)) + _1201;
    float _1545 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1548 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1551 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1522));
    float _1566 = _795 * 0.5;
    float _1567 = _796 * 0.5;
    float _1568 = _797 * 0.5;
    float _1569 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1572 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1575 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1609;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1582 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1186, _1190, _1193, _1196));
        float _1586 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1188, _1191, _1194, _1197));
        float _1590 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1189, _1192, _1195, _1198));
        float _1597 = dot(vec4(cbModelParam._m0[39u]), vec4(_1566, _1567, _1568, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1620;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1611 = dot(vec4(cbModelParam._m0[40u]), vec4(_1566, _1567, _1568, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1624 = (_1620 * cbModelParam._m0[1u].x) + (_1609 * (1.0 - cbModelParam._m0[1u].x));
    float _1634 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _628);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1634 : min(cbModelParam._m0[25u].z, _1634));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1684 = fma(_856, cbModelParam._m0[13u].z, fma(_852, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _848)) + cbModelParam._m0[13u].w;
        float _1688 = fma(_856, cbModelParam._m0[14u].z, fma(_852, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _848)) + cbModelParam._m0[14u].w;
        float _1692 = fma(_856, cbModelParam._m0[15u].z, fma(_852, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _848)) + cbModelParam._m0[15u].w;
        float _1695 = fma(_797, cbModelParam._m0[13u].z, fma(_796, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _795));
        float _1698 = fma(_797, cbModelParam._m0[14u].z, fma(_796, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _795));
        float _1701 = fma(_797, cbModelParam._m0[15u].z, fma(_796, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _795));
        float _1729;
        if (_1695 > 0.0)
        {
            _1729 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1729 = frontier_phi_17_15_ladder;
        }
        float _1931;
        if (_1698 > 0.0)
        {
            _1931 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1931 = frontier_phi_26_22_ladder;
        }
        float _2174;
        if (_1701 > 0.0)
        {
            _2174 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2174 = frontier_phi_38_33_ladder;
        }
        float _2176 = isnan(_1931) ? _1729 : (isnan(_1729) ? _1931 : min(_1729, _1931));
        float _2177 = isnan(_2174) ? _2176 : (isnan(_2176) ? _2174 : min(_2176, _2174));
        float _2181 = (_2177 * _1695) + _1684;
        float _2182 = (_2177 * _1698) + _1688;
        float _2183 = (_2177 * _1701) + _1692;
        float _2184 = _2177 * 9.9999997473787516355514526367188e-05;
        float _2186 = (-1.0) - _2184;
        float _2188 = _2184 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2183 > _2188) || ((_2183 < _2186) || ((_2182 > _2188) || ((_2182 < _2186) || ((_2181 < _2186) || (_2181 > _2188))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2307 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2183, cbModelParam._m0[9u].z, fma(_2182, cbModelParam._m0[9u].y, _2181 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2183, cbModelParam._m0[10u].z, fma(_2182, cbModelParam._m0[10u].y, _2181 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2183, cbModelParam._m0[11u].z, fma(_2182, cbModelParam._m0[11u].y, _2181 * cbModelParam._m0[11u].x))), _1635);
            frontier_phi_16_38_ladder = _2307.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2307.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2307.x * cbModelParam._m0[1u].y;
        }
        _1717 = frontier_phi_16_38_ladder_2;
        _1719 = frontier_phi_16_38_ladder_1;
        _1721 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_795, _796, _797), _1635);
        _1717 = _1705.x * cbModelParam._m0[1u].y;
        _1719 = _1705.y * cbModelParam._m0[1u].y;
        _1721 = _1705.z * cbModelParam._m0[1u].y;
    }
    float _1725 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _628);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1725 : min(cbModelParam._m0[25u].w, _1725));
    float _1817;
    float _1819;
    float _1821;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1781 = fma(_856, cbModelParam._m0[21u].z, fma(_852, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _848)) + cbModelParam._m0[21u].w;
        float _1785 = fma(_856, cbModelParam._m0[22u].z, fma(_852, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _848)) + cbModelParam._m0[22u].w;
        float _1789 = fma(_856, cbModelParam._m0[23u].z, fma(_852, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _848)) + cbModelParam._m0[23u].w;
        float _1792 = fma(_797, cbModelParam._m0[21u].z, fma(_796, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _795));
        float _1795 = fma(_797, cbModelParam._m0[22u].z, fma(_796, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _795));
        float _1798 = fma(_797, cbModelParam._m0[23u].z, fma(_796, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _795));
        float _1936;
        if (_1792 > 0.0)
        {
            _1936 = abs((1.0 - _1781) / _1792);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1781 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1936 = frontier_phi_28_24_ladder;
        }
        float _2201;
        if (_1795 > 0.0)
        {
            _2201 = abs((1.0 - _1785) / _1795);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1785 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2201 = frontier_phi_40_35_ladder;
        }
        float _2406;
        if (_1798 > 0.0)
        {
            _2406 = abs((1.0 - _1789) / _1798);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1789 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2406 = frontier_phi_49_46_ladder;
        }
        float _2408 = isnan(_2201) ? _1936 : (isnan(_1936) ? _2201 : min(_1936, _2201));
        float _2409 = isnan(_2406) ? _2408 : (isnan(_2408) ? _2406 : min(_2408, _2406));
        float _2413 = (_2409 * _1792) + _1781;
        float _2414 = (_2409 * _1795) + _1785;
        float _2415 = (_2409 * _1798) + _1789;
        float _2416 = _2409 * 9.9999997473787516355514526367188e-05;
        float _2417 = (-1.0) - _2416;
        float _2419 = _2416 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2415 > _2419) || ((_2415 < _2417) || ((_2414 > _2419) || ((_2414 < _2417) || ((_2413 < _2417) || (_2413 > _2419))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2415, cbModelParam._m0[17u].z, fma(_2414, cbModelParam._m0[17u].y, _2413 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2415, cbModelParam._m0[18u].z, fma(_2414, cbModelParam._m0[18u].y, _2413 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2415, cbModelParam._m0[19u].z, fma(_2414, cbModelParam._m0[19u].y, _2413 * cbModelParam._m0[19u].x))), _1726);
            frontier_phi_25_49_ladder = _2614.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2614.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2614.x * cbModelParam._m0[1u].z;
        }
        _1817 = frontier_phi_25_49_ladder_2;
        _1819 = frontier_phi_25_49_ladder_1;
        _1821 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_795, _796, _797), _1726);
        _1817 = _1801.x * cbModelParam._m0[1u].z;
        _1819 = _1801.y * cbModelParam._m0[1u].z;
        _1821 = _1801.z * cbModelParam._m0[1u].z;
    }
    float _1833 = ((((1.0 - _816) * ((_803 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_816 * _803)) * _787;
    float _1834 = _1833 * ((cbModelParam._m0[1u].w * (_1817 - _1717)) + _1717);
    float _1835 = _1833 * ((cbModelParam._m0[1u].w * (_1819 - _1719)) + _1719);
    float _1836 = _1833 * ((cbModelParam._m0[1u].w * (_1821 - _1721)) + _1721);
    float _1839 = fma(_1836, cbSceneParam._m0[89u].z, fma(_1835, cbSceneParam._m0[89u].y, _1834 * cbSceneParam._m0[89u].x));
    float _1842 = fma(_1836, cbSceneParam._m0[90u].z, fma(_1835, cbSceneParam._m0[90u].y, _1834 * cbSceneParam._m0[90u].x));
    float _1845 = fma(_1836, cbSceneParam._m0[91u].z, fma(_1835, cbSceneParam._m0[91u].y, _1834 * cbSceneParam._m0[91u].x));
    uvec4 _1855 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _1857 = _1855.x * 14u;
    uint _1858 = _1857 + 13u;
    float _1865 = _787 + (-1.0);
    float _1870 = (cbLight._m0[_1858].x * _1865) + 1.0;
    float _1871 = (cbLight._m0[_1858].y * _1865) + 1.0;
    float _1872 = (cbLight._m0[_1858].z * _1865) + 1.0;
    float _1873 = (cbLight._m0[_1858].w * _1865) + 1.0;
    uint _1874 = _1857 + 5u;
    float _1880 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
    uint _1884 = _1857 + 4u;
    float _1890 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1894 = _1857 | 1u;
    float _1905 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_625, _626, _627));
    float _1908 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_625, _626, _627));
    float _4105 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _4116 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1913 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.3183098733425140380859375;
    float _1915 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.3183098733425140380859375;
    float _1922 = ((cbLight._m0[_1874].x * _1880) * _1915) + ((cbLight._m0[_1884].x * _1890) * _1913);
    float _1923 = ((_1880 * cbLight._m0[_1874].y) * _1915) + ((_1890 * cbLight._m0[_1884].y) * _1913);
    float _1924 = ((_1880 * cbLight._m0[_1874].z) * _1915) + ((_1890 * cbLight._m0[_1884].z) * _1913);
    uvec4 _1928 = floatBitsToUint(cbLight._m0[_1857 + 12u]);
    bool _1930 = _1928.x == 0u;
    float _1941;
    float _1943;
    float _1945;
    if (_1930)
    {
        _1941 = _1922;
        _1943 = _1923;
        _1945 = _1924;
    }
    else
    {
        uint _1949 = _1857 + 6u;
        float _1965 = (dot(vec3(cbLight._m0[_1857 + 2u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _1966 = _1965 * _1965;
        float _4127 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1968 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _1941 = (((cbLight._m0[_1949].x * 0.3183098733425140380859375) * _1967) * _1968) + _1922;
        _1943 = (((cbLight._m0[_1949].y * 0.3183098733425140380859375) * _1967) * _1968) + _1923;
        _1945 = (((cbLight._m0[_1949].z * 0.3183098733425140380859375) * _1967) * _1968) + _1924;
    }
    bool _1948 = _1928.y == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1948)
    {
        _1986 = _1941;
        _1988 = _1943;
        _1990 = _1945;
    }
    else
    {
        uint _2145 = _1857 + 7u;
        float _2161 = (dot(vec3(cbLight._m0[_1857 + 3u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _2162 = _2161 * _2161;
        float _4143 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2163 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2164 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _1986 = (((cbLight._m0[_2145].x * 0.3183098733425140380859375) * _2163) * _2164) + _1941;
        _1988 = (((cbLight._m0[_2145].y * 0.3183098733425140380859375) * _2163) * _2164) + _1943;
        _1990 = (((cbLight._m0[_2145].z * 0.3183098733425140380859375) * _2163) * _2164) + _1945;
    }
    uint _1993 = _1857 + 8u;
    float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _628) * 0.949999988079071044921875);
    float _2007 = _2006 * _2006;
    float _2008 = cbLight._m0[_1857].x + _704;
    float _2009 = cbLight._m0[_1857].y + _705;
    float _2010 = cbLight._m0[_1857].z + _706;
    float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
    float _2015 = _2014 * _2008;
    float _2016 = _2014 * _2009;
    float _2017 = _2014 * _2010;
    float _2018 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_1857].xyz));
    float _4159 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _4170 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _2022 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2023 = dot(vec3(_625, _626, _627), vec3(_2015, _2016, _2017));
    float _4181 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_2015, _2016, _2017));
    float _4192 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2007 * _2007;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2047 = 1.0 - _2007;
    float _2058 = (0.5 / (((_2022 * ((_2021 * _2047) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2047) + _2007) * _2021))) * _2021;
    float _4203 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    uint _2071 = _1857 + 9u;
    float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _628) * 0.949999988079071044921875);
    float _2083 = _2082 * _2082;
    float _2084 = cbLight._m0[_1894].x + _704;
    float _2085 = cbLight._m0[_1894].y + _705;
    float _2086 = cbLight._m0[_1894].z + _706;
    float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
    float _2091 = _2090 * _2084;
    float _2092 = _2090 * _2085;
    float _2093 = _2090 * _2086;
    float _2094 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_1894].xyz));
    float _4214 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2098 = dot(vec3(_625, _626, _627), vec3(_2091, _2092, _2093));
    float _4225 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2102 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_2091, _2092, _2093));
    float _4236 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2106 = _2083 * _2083;
    float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
    float _2119 = (exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2120 = 1.0 - _2083;
    float _2130 = (0.5 / (((_2022 * ((_2097 * _2120) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2120) + _2083) * _2097))) * _2097;
    float _4247 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2132 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
    float _2142 = (((_2119 * cbLight._m0[_2071].x) * _2132) * _1880) + (((_2046 * cbLight._m0[_1993].x) * _2060) * _1890);
    float _2143 = (((_2119 * cbLight._m0[_2071].y) * _2132) * _1880) + (((_2046 * cbLight._m0[_1993].y) * _2060) * _1890);
    float _2144 = (((_2119 * cbLight._m0[_2071].z) * _2132) * _1880) + (((_2046 * cbLight._m0[_1993].z) * _2060) * _1890);
    float _2206;
    float _2208;
    float _2210;
    if (_1930)
    {
        _2206 = _2142;
        _2208 = _2143;
        _2210 = _2144;
    }
    else
    {
        uint _2212 = _1857 + 2u;
        uint _2216 = _1857 + 10u;
        float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _628) * 0.949999988079071044921875);
        float _2231 = _2230 * _2230;
        float _2232 = cbLight._m0[_2212].x + _704;
        float _2233 = cbLight._m0[_2212].y + _705;
        float _2234 = cbLight._m0[_2212].z + _706;
        float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
        float _2239 = _2238 * _2232;
        float _2240 = _2238 * _2233;
        float _2241 = _2238 * _2234;
        float _2242 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2212].xyz));
        float _4258 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2246 = dot(vec3(_625, _626, _627), vec3(_2239, _2240, _2241));
        float _4269 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2250 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2239, _2240, _2241));
        float _4280 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2254 = _2231 * _2231;
        float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
        float _2267 = (exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2268 = 1.0 - _2231;
        float _2278 = (0.5 / (((_2022 * ((_2245 * _2268) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2268) + _2231) * _2245))) * _2245;
        float _4291 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2280 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
        float _2281 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2206 = (((_2267 * cbLight._m0[_2216].x) * _2280) * _2281) + _2142;
        _2208 = (((_2267 * cbLight._m0[_2216].y) * _2280) * _2281) + _2143;
        _2210 = (((_2267 * cbLight._m0[_2216].z) * _2280) * _2281) + _2144;
    }
    float _2316;
    float _2318;
    float _2320;
    if (_1948)
    {
        _2316 = _2206;
        _2318 = _2208;
        _2320 = _2210;
    }
    else
    {
        uint _2327 = _1857 + 3u;
        uint _2331 = _1857 + 11u;
        float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _628) * 0.949999988079071044921875);
        float _2346 = _2345 * _2345;
        float _2347 = cbLight._m0[_2327].x + _704;
        float _2348 = cbLight._m0[_2327].y + _705;
        float _2349 = cbLight._m0[_2327].z + _706;
        float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
        float _2354 = _2353 * _2347;
        float _2355 = _2353 * _2348;
        float _2356 = _2353 * _2349;
        float _2357 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2327].xyz));
        float _4307 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2361 = dot(vec3(_625, _626, _627), vec3(_2354, _2355, _2356));
        float _4318 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2365 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2354, _2355, _2356));
        float _4329 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2369 = _2346 * _2346;
        float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
        float _2382 = (exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2383 = 1.0 - _2346;
        float _2393 = (0.5 / (((_2022 * ((_2360 * _2383) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2383) + _2346) * _2360))) * _2360;
        float _4340 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2395 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
        float _2396 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2316 = (((_2382 * cbLight._m0[_2331].x) * _2395) * _2396) + _2206;
        _2318 = (((_2382 * cbLight._m0[_2331].y) * _2395) * _2396) + _2208;
        _2320 = (((_2382 * cbLight._m0[_2331].z) * _2395) * _2396) + _2210;
    }
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    if (_1855.y == 0u)
    {
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2471;
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2471;
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2471;
        uvec4 _2486 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2487 = _2486.x;
        uint _2498 = uint((float(_2486.y) * floor(float(uint(cbSceneParam._m0[85u].y * _725) / _2487))) + floor(float(uint(cbSceneParam._m0[85u].x * _724) / _2487)));
        float _2508 = (log2(_2474 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2509 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        uint _2512 = uint(isnan(14.0) ? _2509 : (isnan(_2509) ? 14.0 : min(_2509, 14.0)));
        uvec4 _2517 = texelFetch(g_lightClusterGridBuffer, int(((_2512 << 2u) + (_2498 << 6u)) >> 2u));
        uint _2518 = _2517.x;
        uint _2519 = _2486.z;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((((1u << ((_2519 >> 4u) & 15u)) + 4294967295u) & _2518) == 0u) || ((_2519 & 240u) == 0u))
        {
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
        }
        else
        {
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            uint _2778 = 0u;
            uint _2787;
            bool _2788;
            for (;;)
            {
                _2787 = texelFetch(g_lightClassification, int((((_2512 << 5u) + (_2498 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                _2788 = _2787 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2788)
                {
                    frontier_phi_66_pred = _2772;
                    frontier_phi_66_pred_1 = _2777;
                    frontier_phi_66_pred_2 = _2776;
                    frontier_phi_66_pred_3 = _2775;
                    frontier_phi_66_pred_4 = _2774;
                    frontier_phi_66_pred_5 = _2773;
                }
                else
                {
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    uint _2923;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2775;
                    _2921 = _2776;
                    _2922 = _2777;
                    _2923 = _2787;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    for (;;)
                    {
                        uint _2927 = uint(findLSB(_2923)) + (_2778 << 5u);
                        uint _2924 = (_2923 + 4294967295u) & _2923;
                        uint _2929 = _2927 * 48u;
                        vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 3u)).x));
                        uint _2949 = (_2927 * 48u) + 4u;
                        vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 3u)).x));
                        uint _2968 = (_2927 * 48u) + 8u;
                        vec3 _2979 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x));
                        float _2983 = _2943.x - _2472;
                        float _2984 = _2943.y - _2473;
                        float _2985 = _2943.z - _2474;
                        float _2986 = dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985));
                        float _2989 = inversesqrt(_2986);
                        float _2990 = _2989 * _2983;
                        float _2991 = _2989 * _2984;
                        float _2992 = _2989 * _2985;
                        float _2993 = dot(vec3(_743, _746, _749), vec3(_2990, _2991, _2992));
                        float _2998 = 1.0 - (_2986 * _2943.w);
                        float _4366 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _2999 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3000 = sqrt(_2986) * _2962.w;
                        float _3003 = 1.39999997615814208984375 / (_3000 + 1.39999997615814208984375);
                        float _3004 = _3003 * _3003;
                        float _3007 = ((1.0 - _3004) * _2993) + _3004;
                        float _3010 = _3000 * _3000;
                        float _3014 = ((isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0))) * _2999) / ((_3010 * 0.699999988079071044921875) + 1.0);
                        float _3018 = (-0.0) - _2472;
                        float _3019 = (-0.0) - _2473;
                        float _3020 = (-0.0) - _2474;
                        float _3024 = inversesqrt(dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020)));
                        float _3025 = _3024 * _3018;
                        float _3026 = _3024 * _3019;
                        float _3027 = _3024 * _3020;
                        float _3035 = exp2(log2(1.0 / ((_3010 * 3.5) + 5.0)) * 0.25);
                        float _3036 = 1.0 - _803;
                        float _3043 = sqrt(1.0 - ((1.0 - (_3036 * _3036)) * (1.0 - (_3035 * _3035))));
                        float _3044 = _3043 * _3043;
                        float _3045 = _3044 * _3044;
                        float _3046 = _3025 + _2990;
                        float _3047 = _3026 + _2991;
                        float _3048 = _3027 + _2992;
                        float _3052 = inversesqrt(dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048)));
                        float _3056 = dot(vec3(_743, _746, _749), vec3(_3025, _3026, _3027));
                        float _4382 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                        float _3060 = dot(vec3(_743, _746, _749), vec3(_3052 * _3046, _3052 * _3047, _3052 * _3048));
                        float _4393 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3063 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3067 = ((_3063 * _3063) * (_3045 + (-1.0))) + 1.0;
                        float _3068 = _3003 * _3044;
                        float _3069 = _3068 * _3068;
                        float _3072 = ((1.0 - _3069) * _2993) + _3069;
                        float _4404 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3073 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3074 = 1.0 - _3044;
                        float _3084 = (0.5 / (((_3073 * ((_3059 * _3074) + _3044)) + 9.9999999392252902907785028219223e-09) + (((_3073 * _3074) + _3044) * _3059))) * _3073;
                        float _4415 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3095 = (((_3045 * 3.1415927410125732421875) * (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) / ((_3067 * _3067) * ((_3010 * 2.1991131305694580078125) + 3.141590118408203125))) * _2999;
                        _2847 = (_3014 * _2962.x) + _2920;
                        _2848 = (_3014 * _2962.y) + _2921;
                        _2849 = (_3014 * _2962.z) + _2922;
                        _2844 = (_3095 * _2979.x) + _2917;
                        _2845 = (_3095 * _2979.y) + _2918;
                        _2846 = (_3095 * _2979.z) + _2919;
                        if (_2924 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2847;
                            _2921 = _2848;
                            _2922 = _2849;
                            _2923 = _2924;
                        }
                    }
                    frontier_phi_66_pred = _2844;
                    frontier_phi_66_pred_1 = _2849;
                    frontier_phi_66_pred_2 = _2848;
                    frontier_phi_66_pred_3 = _2847;
                    frontier_phi_66_pred_4 = _2846;
                    frontier_phi_66_pred_5 = _2845;
                }
                _2620 = frontier_phi_66_pred;
                _2630 = frontier_phi_66_pred_1;
                _2628 = frontier_phi_66_pred_2;
                _2626 = frontier_phi_66_pred_3;
                _2624 = frontier_phi_66_pred_4;
                _2622 = frontier_phi_66_pred_5;
                uint _2779 = _2778 + 1u;
                if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2772 = _2620;
                    _2773 = _2622;
                    _2774 = _2624;
                    _2775 = _2626;
                    _2776 = _2628;
                    _2777 = _2630;
                    _2778 = _2779;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
        }
        uvec4 _2633 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2634 = _2633.z;
        uint _2636 = (_2634 >> 8u) & 15u;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        if (((4294967295u << _2636) & _2518) == 0u)
        {
            _2740 = _2619;
            _2742 = _2621;
            _2744 = _2623;
            _2746 = _2625;
            _2748 = _2627;
            _2750 = _2629;
        }
        else
        {
            float _2765 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
            float _2766 = _2765 * _2472;
            float _2767 = _2765 * _2473;
            float _2768 = _2765 * _2474;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2636 < ((_2634 >> 12u) & 15u))
            {
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2900 = _2619;
                float _2901 = _2621;
                float _2902 = _2623;
                float _2903 = _2625;
                float _2904 = _2627;
                float _2905 = _2629;
                uint _2906 = _2636;
                uint _2915;
                bool _2916;
                for (;;)
                {
                    _2915 = texelFetch(g_lightClassification, int((((_2512 << 5u) + (_2498 << 9u)) + (_2906 << 2u)) >> 2u)).x;
                    _2916 = _2915 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2916)
                    {
                        frontier_phi_77_pred = _2905;
                        frontier_phi_77_pred_1 = _2904;
                        frontier_phi_77_pred_2 = _2903;
                        frontier_phi_77_pred_3 = _2902;
                        frontier_phi_77_pred_4 = _2901;
                        frontier_phi_77_pred_5 = _2900;
                    }
                    else
                    {
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3122 = _2900;
                        float _3123 = _2901;
                        float _3124 = _2902;
                        float _3125 = _2903;
                        float _3126 = _2904;
                        float _3127 = _2905;
                        uint _3128 = _2915;
                        uint _3129;
                        vec4 _3154;
                        float _3155;
                        vec4 _3170;
                        vec3 _3182;
                        vec4 _3197;
                        vec4 _3212;
                        float _3258;
                        bool _3259;
                        for (;;)
                        {
                            uint _3139 = ((_2906 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3128));
                            _3129 = (_3128 + 4294967295u) & _3128;
                            uint _3141 = _3139 * 40u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            _3155 = _3154.w;
                            uint _3157 = (_3139 * 40u) + 4u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3172 = (_3139 * 40u) + 8u;
                            _3182 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x));
                            uint _3184 = (_3139 * 40u) + 16u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3199 = (_3139 * 40u) + 20u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3214 = (_3139 * 40u) + 24u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3233 = (_3139 * 40u) + 28u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3258 = fma(_2474, _3246.z, fma(_2473, _3246.y, _3246.x * _2472)) + _3246.w;
                            _3259 = !((fma(_2474, _3227.z, fma(_2473, _3227.y, _3227.x * _2472)) + _3227.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3259)
                            {
                                float _3286 = _3154.x - _2472;
                                float _3287 = _3154.y - _2473;
                                float _3288 = _3154.z - _2474;
                                float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                                float _3292 = inversesqrt(_3289);
                                float _3293 = _3292 * _3286;
                                float _3294 = _3292 * _3287;
                                float _3295 = _3292 * _3288;
                                float _3299 = 1.0 - (_3289 / (_3155 * _3155));
                                float _4426 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3304 = sqrt(_3289) * _3170.w;
                                float _3306 = 1.39999997615814208984375 / (_3304 + 1.39999997615814208984375);
                                float _3307 = _3306 * _3306;
                                float _3310 = ((1.0 - _3307) * dot(vec3(_3293, _3294, _3295), vec3(_743, _746, _749))) + _3307;
                                float _3313 = _3304 * _3304;
                                float _3317 = (fma(_2474, _3197.z, fma(_2473, _3197.y, _3197.x * _2472)) + _3197.w) / _3258;
                                float _3318 = (fma(_2474, _3212.z, fma(_2473, _3212.y, _3212.x * _2472)) + _3212.w) / _3258;
                                float _3322 = 1.0 - dot(vec2(_3317, _3318), vec2(_3317, _3318));
                                float _4442 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                                float _3324 = _3323 * (((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3300) / ((_3313 * 0.699999988079071044921875) + 1.0));
                                float _3336 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                                float _3337 = 1.0 - _803;
                                float _3344 = sqrt(1.0 - ((1.0 - (_3337 * _3337)) * (1.0 - (_3336 * _3336))));
                                float _3345 = _3344 * _3344;
                                float _3346 = _3345 * _3345;
                                float _3347 = _3293 - _2766;
                                float _3348 = _3294 - _2767;
                                float _3349 = _3295 - _2768;
                                float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                                float _3357 = dot(vec3(_743, _746, _749), vec3((-0.0) - _2766, (-0.0) - _2767, (-0.0) - _2768));
                                float _4453 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3361 = dot(vec3(_743, _746, _749), vec3(_3353 * _3347, _3353 * _3348, _3353 * _3349));
                                float _4464 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3368 = ((_3364 * _3364) * (_3346 + (-1.0))) + 1.0;
                                float _3369 = _3306 * _3345;
                                float _3370 = _3369 * _3369;
                                float _3376 = ((1.0 - _3370) * dot(vec3(_743, _746, _749), vec3(_3293, _3294, _3295))) + _3370;
                                float _4475 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3378 = 1.0 - _3345;
                                float _3388 = (0.5 / (((_3377 * ((_3360 * _3378) + _3345)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3345) * _3360))) * _3377;
                                float _4486 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3398 = (_3323 * _3300) * (((_3346 * 3.1415927410125732421875) * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) / ((_3368 * _3368) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3324 * _3170.y;
                                frontier_phi_83_pred_1 = _3324 * _3170.x;
                                frontier_phi_83_pred_2 = _3398 * _3182.z;
                                frontier_phi_83_pred_3 = _3398 * _3182.y;
                                frontier_phi_83_pred_4 = _3398 * _3182.x;
                                frontier_phi_83_pred_5 = _3324 * _3170.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3406 = frontier_phi_83_pred;
                            _3405 = frontier_phi_83_pred_1;
                            _3404 = frontier_phi_83_pred_2;
                            _3403 = frontier_phi_83_pred_3;
                            _3402 = frontier_phi_83_pred_4;
                            _3407 = frontier_phi_83_pred_5;
                            _3112 = _3405 + _3125;
                            _3113 = _3406 + _3126;
                            _3114 = _3407 + _3127;
                            _3109 = _3402 + _3122;
                            _3110 = _3403 + _3123;
                            _3111 = _3404 + _3124;
                            if (_3129 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3129;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3114;
                        frontier_phi_77_pred_1 = _3113;
                        frontier_phi_77_pred_2 = _3112;
                        frontier_phi_77_pred_3 = _3111;
                        frontier_phi_77_pred_4 = _3110;
                        frontier_phi_77_pred_5 = _3109;
                    }
                    _2751 = frontier_phi_77_pred;
                    _2749 = frontier_phi_77_pred_1;
                    _2747 = frontier_phi_77_pred_2;
                    _2745 = frontier_phi_77_pred_3;
                    _2743 = frontier_phi_77_pred_4;
                    _2741 = frontier_phi_77_pred_5;
                    uint _2907 = _2906 + 1u;
                    if (_2907 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2900 = _2741;
                        _2901 = _2743;
                        _2902 = _2745;
                        _2903 = _2747;
                        _2904 = _2749;
                        _2905 = _2751;
                        _2906 = _2907;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2745;
                frontier_phi_58_59_ladder_1 = _2751;
                frontier_phi_58_59_ladder_2 = _2749;
                frontier_phi_58_59_ladder_3 = _2747;
                frontier_phi_58_59_ladder_4 = _2743;
                frontier_phi_58_59_ladder_5 = _2741;
            }
            else
            {
                frontier_phi_58_59_ladder = _2623;
                frontier_phi_58_59_ladder_1 = _2629;
                frontier_phi_58_59_ladder_2 = _2627;
                frontier_phi_58_59_ladder_3 = _2625;
                frontier_phi_58_59_ladder_4 = _2621;
                frontier_phi_58_59_ladder_5 = _2619;
            }
            _2740 = frontier_phi_58_59_ladder_5;
            _2742 = frontier_phi_58_59_ladder_4;
            _2744 = frontier_phi_58_59_ladder;
            _2746 = frontier_phi_58_59_ladder_3;
            _2748 = frontier_phi_58_59_ladder_2;
            _2750 = frontier_phi_58_59_ladder_1;
        }
        float _2755 = isnan(1.0) ? _787 : (isnan(_787) ? 1.0 : min(_787, 1.0));
        _2531 = (_2755 * _2746) + _1986;
        _2533 = (_2755 * _2748) + _1988;
        _2535 = (_2755 * _2750) + _1990;
        _2537 = ((_2740 * 0.039999999105930328369140625) * _2755) + _2316;
        _2539 = ((_2742 * 0.039999999105930328369140625) * _2755) + _2318;
        _2541 = ((_2744 * 0.039999999105930328369140625) * _2755) + _2320;
    }
    else
    {
        _2531 = _1986;
        _2533 = _1988;
        _2535 = _1990;
        _2537 = _2316;
        _2539 = _2318;
        _2541 = _2320;
    }
    float _4502 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4513 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4524 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2558 = ((isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2531 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _787))) + ((_2537 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1624)) * cbPerFrame._m0[3u].x);
    float _2559 = ((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2533 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _787))) + ((_2539 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1624)) * cbPerFrame._m0[3u].x);
    float _2560 = ((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2535 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _787))) + ((_2541 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1624)) * cbPerFrame._m0[3u].x);
    uint _2561 = _262 + 6u;
    float _2569 = _724 / cbSceneParam._m0[86u].x;
    float _2570 = _725 / cbSceneParam._m0[86u].y;
    vec4 _2584 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2569, _2570, (log2((isnan(cbSceneParam._m0[77u].w) ? _646 : (isnan(_646) ? cbSceneParam._m0[77u].w : min(_646, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2586 = _2584.x;
    float _2587 = _2584.y;
    float _2588 = _2584.z;
    float _2589 = _2584.w;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    if (_646 > cbSceneParam._m0[78u].w)
    {
        float _2644 = isnan(_646) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _646 : min(cbSceneParam._m0[80u].w, _646));
        float _2645 = _2644 / _646;
        float _2656 = _2645 * _697;
        float _2657 = _698 * _2645;
        float _2658 = (-0.0) - _2657;
        float _2660 = _2645 * _699;
        float _2662 = (cbSceneParam._m0[77u].w * _2658) / _2644;
        float _2663 = _2662 + cbSceneParam._m0[79u].w;
        float _2664 = cbSceneParam._m0[79u].w - _2657;
        float _2670 = sqrt(((_2656 * _2656) + (_2657 * _2657)) + (_2660 * _2660));
        float _2673 = (1.0 - (cbSceneParam._m0[77u].w / _2644)) * _2670;
        float _2678 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2680 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2857;
        if (abs((_2658 - _2662) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2857 = ((((_2663 > 0.0) ? exp2(_2678 * _2663) : (2.0 - exp2(_2680 * _2663))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2673;
        }
        else
        {
            float _2801 = 1.0 / cbSceneParam._m0[80u].x;
            float _2802 = isnan(_2664) ? _2663 : (isnan(_2663) ? _2664 : max(_2663, _2664));
            float _2803 = isnan(_2664) ? _2663 : (isnan(_2663) ? _2664 : min(_2663, _2664));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            float _2813 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : min(_2803, 0.0));
            _2857 = ((abs(_2670 / _2658) * cbSceneParam._m0[80u].y) * ((((_2812 - _2813) * 2.0) - ((exp2(_2678 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0)))) - exp2(_2678 * (isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0))))) * _2801)) - ((exp2(_2680 * _2812) - exp2(_2680 * _2813)) * _2801))) + (_2673 * cbSceneParam._m0[80u].z);
        }
        vec4 _2859 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2569, _2570, 1.0), 0.0);
        float _2868 = exp2((_2857 * (-1.44269502162933349609375)) * (1.0 - _2859.w));
        float _2869 = log2(_2868);
        float _2885 = log2(_2589);
        _2682 = (exp2(_2885 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2869 * cbSceneParam._m0[78u].x)) * _2859.x) / cbSceneParam._m0[78u].x)) + _2586;
        _2684 = (exp2(_2885 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2869 * cbSceneParam._m0[78u].y)) * _2859.y) / cbSceneParam._m0[78u].y)) + _2587;
        _2686 = (exp2(_2885 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2869 * cbSceneParam._m0[78u].z)) * _2859.z) / cbSceneParam._m0[78u].z)) + _2588;
        _2688 = _2868 * _2589;
    }
    else
    {
        _2682 = _2586;
        _2684 = _2587;
        _2686 = _2588;
        _2688 = _2589;
    }
    bool _2895;
    vec4 _2698;
    vec4 _2720;
    float _2722;
    float _2726;
    float _2727;
    float _2728;
    float _2729;
    bool _2739;
    for (;;)
    {
        _2698 = cbMatDynParam._m0[0u];
        float _2700 = roundEven(_2698.y);
        bool _2701 = _2700 == 3.0;
        float _2702 = log2(_2688);
        float _2709 = exp2(_2702 * cbSceneParam._m0[78u].x) * _2558;
        float _2710 = exp2(_2702 * cbSceneParam._m0[78u].y) * _2559;
        float _2711 = exp2(_2702 * cbSceneParam._m0[78u].z) * _2560;
        float _2718 = _713 + (-0.5);
        _2720 = cbMtdParam._m0[1u];
        _2722 = _2720.y * _2718;
        float _2725 = (_2700 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2726 = _2725 * (_2701 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2682)));
        _2727 = _2725 * (_2701 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2684)));
        _2728 = _2725 * (_2701 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2686)));
        _2729 = _2718 * 0.999000012874603271484375;
        _2739 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2739)
        {
            if ((cbInstanceData._m0[_262 + 7u].x + _2729) < 0.5)
            {
                _2895 = true;
                break;
            }
        }
        uint _2836 = _762 + uint(_2698.w);
        if ((cbInstanceData._m0[_2836].w < 1.0) && ((cbInstanceData._m0[_2836].w + _2729) < 0.5))
        {
            _2895 = true;
            break;
        }
        if ((_2722 + 1.0) < _2720.x)
        {
            _2895 = true;
            break;
        }
        _2895 = false;
        break;
    }
    float _3100;
    if (_2895)
    {
        discard_state = true;
        _3100 = 0.0;
    }
    else
    {
        _3100 = cbInstanceData._m0[_2561].w;
    }
    SV_Target.x = _2726;
    SV_Target.y = _2727;
    SV_Target.z = _2728;
    SV_Target.w = _3100;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2561].w;
    discard_exit();
}


