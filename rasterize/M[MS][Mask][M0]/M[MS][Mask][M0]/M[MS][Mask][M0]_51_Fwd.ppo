#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1119;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _369 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _318.x) * 2.0) - ((((_357 - _369) * cbMtdParam._m0[24u].z) + _369) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3426 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _394 = (_387 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _395 = (_387 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _396 = (_387 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _250) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _251) + cbTextureTilingScale._m0[3u].w));
    vec4 _433 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _445 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _459 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _318.y) * 2.0) - ((((_435 - _445) * cbMtdParam._m0[24u].z) + _445) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3437 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _467 = (_460 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _468 = (_460 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _469 = (_460 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _482 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _499 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _501 = _499.x;
    float _502 = _499.y;
    float _503 = _499.z;
    float _510 = ((_482.x - _501) * _387) + _501;
    float _511 = ((_482.y - _502) * _387) + _502;
    float _512 = ((_482.z - _503) * _387) + _503;
    vec4 _524 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _250) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _251) + cbTextureTilingScale._m0[2u].w));
    float _537 = ((_524.z - _512) * _460) + _512;
    float _540 = ((((_524.x - _510) * _460) + _510) * 2.0) + (-1.0);
    float _542 = ((((_524.y - _511) * _460) + _511) * 2.0) + (-1.0);
    float _543 = dot(vec2(_540, _542), vec2(_540, _542));
    float _3448 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _548 = sqrt(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))));
    vec4 _562 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _574 = (((_562.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _540;
    float _575 = (((_562.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _542;
    float _579 = (cbMtdParam._m0[19u].w * (_562.z - _537)) + _537;
    float _583 = cbMtdParam._m0[22u].x + _562.w;
    float _586 = fma(_548, _217 * NORMAL.x, fma(_575, _224 * TANGENT.x, (_210 * _202) * _574));
    float _589 = fma(_548, _217 * NORMAL.y, fma(_575, _224 * TANGENT.y, (_210 * _203) * _574));
    float _592 = fma(_548, _217 * NORMAL.z, fma(_575, _224 * TANGENT.z, (_210 * _204) * _574));
    float _596 = inversesqrt(dot(vec3(_586, _589, _592), vec3(_586, _589, _592)));
    float _597 = _596 * _586;
    float _598 = _596 * _589;
    float _599 = _596 * _592;
    float _3459 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _600 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3481 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3492 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3503 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _618 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _670 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _660);
    float _671 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _660);
    float _672 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _660);
    float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
    float _677 = _670 * _676;
    float _678 = _671 * _676;
    float _679 = _672 * _676;
    float _685 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _686 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _704 = fma(_599, cbSceneParam._m0[5u].z, fma(_598, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _597));
    float _707 = fma(_599, cbSceneParam._m0[6u].z, fma(_598, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _597));
    float _710 = fma(_599, cbSceneParam._m0[7u].z, fma(_598, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _597));
    uint _724 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _730 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_724].x;
    float _731 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_724].y;
    float _732 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_724].z;
    float _3514 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    vec4 _744 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _685, cbSceneParam._m0[86u].y * _686));
    float _748 = ((isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * TEXCOORD_5.w) * _744.x;
    float _749 = dot(vec3(_597, _598, _599), vec3(_677, _678, _679));
    float _752 = _749 * 2.0;
    float _756 = (_752 * _597) - _677;
    float _757 = (_752 * _598) - _678;
    float _758 = (_752 * _599) - _679;
    float _762 = abs(dot(vec3(_677, _678, _679), vec3(_597, _598, _599)));
    float _3547 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _764 = sqrt(_600);
    float _777 = exp2((_764 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_764 * 3.0));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1118;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _843 = fma(_817, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809));
        float _847 = fma(_817, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809));
        float _851 = fma(_817, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809));
        float _876 = _809 + _597;
        float _877 = _813 + _598;
        float _878 = _817 + _599;
        float _888 = fma(_878, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876)) - _843;
        float _889 = fma(_878, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876)) - _847;
        float _890 = fma(_878, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876)) - _851;
        float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
        float _907 = ((_894 * _888) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_843 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_894 * _889) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_847 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_894 * _890) / cbModelParam._m0[34u].z) + ((((((_851 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        float _946 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_912.x + (-0.5));
        float _948 = _946 * (_912.y + (-0.5));
        float _949 = _946 * (_912.z + (-0.5));
        float _956 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_919.x + (-0.5));
        float _958 = _956 * (_919.y + (-0.5));
        float _959 = _956 * (_919.z + (-0.5));
        float _966 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_926.x + (-0.5));
        float _968 = _966 * (_926.y + (-0.5));
        float _969 = _966 * (_926.z + (-0.5));
        float _976 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_933.x + (-0.5));
        float _978 = _976 * (_933.y + (-0.5));
        float _979 = _976 * (_933.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _1000 = (dot(vec3(_597, _598, _599), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1010 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3595 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_1012 + 1.0))) + _1017) * _980;
        float _1027 = _948 * 0.5;
        float _1028 = _958 * 0.5;
        float _1029 = _968 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_597, _598, _599), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3628 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1054 + 1.0))) + _1059) * _981;
        float _1069 = _949 * 0.5;
        float _1070 = _959 * 0.5;
        float _1071 = _969 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_597, _598, _599), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3661 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1096 + 1.0))) + _1101) * _982;
        _1118 = _949;
        _1120 = _948;
        _1121 = _947;
        _1122 = _959;
        _1123 = _958;
        _1124 = _957;
        _1125 = _969;
        _1126 = _968;
        _1127 = _967;
        _1128 = _982;
        _1129 = _981;
        _1130 = _980;
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
    }
    else
    {
        _1118 = _1119;
        _1120 = _1119;
        _1121 = _1119;
        _1122 = _1119;
        _1123 = _1119;
        _1124 = _1119;
        _1125 = _1119;
        _1126 = _1119;
        _1127 = _1119;
        _1128 = _1119;
        _1129 = _1119;
        _1130 = _1119;
        _1131 = 0.0;
        _1132 = 0.0;
        _1133 = 0.0;
    }
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1157 = fma(_817, cbModelParam._m0[30u].z, fma(_813, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _809));
        float _1161 = fma(_817, cbModelParam._m0[31u].z, fma(_813, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _809));
        float _1165 = fma(_817, cbModelParam._m0[32u].z, fma(_813, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _809));
        float _1188 = _809 + _597;
        float _1189 = _813 + _598;
        float _1190 = _817 + _599;
        float _1200 = fma(_1190, cbModelParam._m0[30u].z, fma(_1189, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1188)) - _1157;
        float _1201 = fma(_1190, cbModelParam._m0[31u].z, fma(_1189, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1188)) - _1161;
        float _1202 = fma(_1190, cbModelParam._m0[32u].z, fma(_1189, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1188)) - _1165;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1157 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1161 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[35u].z) + ((((((_1165 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1256 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1223.x + (-0.5));
        float _1258 = _1256 * (_1223.y + (-0.5));
        float _1259 = _1256 * (_1223.z + (-0.5));
        float _1266 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1230.x + (-0.5));
        float _1268 = _1266 * (_1230.y + (-0.5));
        float _1269 = _1266 * (_1230.z + (-0.5));
        float _1276 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1237.x + (-0.5));
        float _1278 = _1276 * (_1237.y + (-0.5));
        float _1279 = _1276 * (_1237.z + (-0.5));
        float _1286 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1244.x + (-0.5));
        float _1288 = _1286 * (_1244.y + (-0.5));
        float _1289 = _1286 * (_1244.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_597, _598, _599), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3724 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1320 + 1.0))) + _1325) * _1290;
        float _1335 = _1258 * 0.5;
        float _1336 = _1268 * 0.5;
        float _1337 = _1278 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_597, _598, _599), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3757 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1362 + 1.0))) + _1367) * _1291;
        float _1377 = _1259 * 0.5;
        float _1378 = _1269 * 0.5;
        float _1379 = _1279 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_597, _598, _599), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3790 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1404 + 1.0))) + _1409) * _1292;
        _1426 = _1259;
        _1427 = _1258;
        _1428 = _1257;
        _1429 = _1269;
        _1430 = _1268;
        _1431 = _1267;
        _1432 = _1279;
        _1433 = _1278;
        _1434 = _1277;
        _1435 = _1292;
        _1436 = _1291;
        _1437 = _1290;
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1119;
        _1427 = _1119;
        _1428 = _1119;
        _1429 = _1119;
        _1430 = _1119;
        _1431 = _1119;
        _1432 = _1119;
        _1433 = _1119;
        _1434 = _1119;
        _1435 = _1119;
        _1436 = _1119;
        _1437 = _1119;
        _1438 = 0.0;
        _1439 = 0.0;
        _1440 = 0.0;
    }
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1131)) + _1131;
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1132)) + _1132;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1133)) + _1133;
    float _1473 = fma(_1452, cbSceneParam._m0[89u].z, fma(_1451, cbSceneParam._m0[89u].y, _1450 * cbSceneParam._m0[89u].x));
    float _1476 = fma(_1452, cbSceneParam._m0[90u].z, fma(_1451, cbSceneParam._m0[90u].y, _1450 * cbSceneParam._m0[90u].x));
    float _1479 = fma(_1452, cbSceneParam._m0[91u].z, fma(_1451, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1450));
    float _1494 = _756 * 0.5;
    float _1495 = _757 * 0.5;
    float _1496 = _758 * 0.5;
    float _1497 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1500 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1503 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1537;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1510 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1118, _1122, _1125, _1128));
        float _1514 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1518 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1525 = dot(vec4(cbModelParam._m0[39u]), vec4(_1494, _1495, _1496, 1.0));
        _1537 = dot(vec3(isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1525) ? 0.0 : (isnan(0.0) ? _1525 : max(0.0, _1525))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1537 = 1.0;
    }
    float _1548;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1539 = dot(vec4(cbModelParam._m0[40u]), vec4(_1494, _1495, _1496, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1552 = (_1548 * cbModelParam._m0[1u].x) + (_1537 * (1.0 - cbModelParam._m0[1u].x));
    float _1562 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _600);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1562 : min(cbModelParam._m0[25u].z, _1562));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1612 = fma(_817, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809)) + cbModelParam._m0[13u].w;
        float _1616 = fma(_817, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809)) + cbModelParam._m0[14u].w;
        float _1620 = fma(_817, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809)) + cbModelParam._m0[15u].w;
        float _1623 = fma(_758, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756));
        float _1626 = fma(_758, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756));
        float _1629 = fma(_758, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756));
        float _1657;
        if (_1623 > 0.0)
        {
            _1657 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1657 = frontier_phi_14_12_ladder;
        }
        float _1859;
        if (_1626 > 0.0)
        {
            _1859 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1859 = frontier_phi_23_19_ladder;
        }
        float _2102;
        if (_1629 > 0.0)
        {
            _2102 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2102 = frontier_phi_35_30_ladder;
        }
        float _2104 = isnan(_1859) ? _1657 : (isnan(_1657) ? _1859 : min(_1657, _1859));
        float _2105 = isnan(_2102) ? _2104 : (isnan(_2104) ? _2102 : min(_2104, _2102));
        float _2109 = (_2105 * _1623) + _1612;
        float _2110 = (_2105 * _1626) + _1616;
        float _2111 = (_2105 * _1629) + _1620;
        float _2112 = _2105 * 9.9999997473787516355514526367188e-05;
        float _2114 = (-1.0) - _2112;
        float _2116 = _2112 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2111 > _2116) || ((_2111 < _2114) || ((_2110 > _2116) || ((_2110 < _2114) || ((_2109 < _2114) || (_2109 > _2116))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2235 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2111, cbModelParam._m0[9u].z, fma(_2110, cbModelParam._m0[9u].y, _2109 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2111, cbModelParam._m0[10u].z, fma(_2110, cbModelParam._m0[10u].y, _2109 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2111, cbModelParam._m0[11u].z, fma(_2110, cbModelParam._m0[11u].y, _2109 * cbModelParam._m0[11u].x))), _1563);
            frontier_phi_13_35_ladder = _2235.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2235.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2235.x * cbModelParam._m0[1u].y;
        }
        _1645 = frontier_phi_13_35_ladder_2;
        _1647 = frontier_phi_13_35_ladder_1;
        _1649 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_756, _757, _758), _1563);
        _1645 = _1633.x * cbModelParam._m0[1u].y;
        _1647 = _1633.y * cbModelParam._m0[1u].y;
        _1649 = _1633.z * cbModelParam._m0[1u].y;
    }
    float _1653 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _600);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1653 : min(cbModelParam._m0[25u].w, _1653));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1709 = fma(_817, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809)) + cbModelParam._m0[21u].w;
        float _1713 = fma(_817, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809)) + cbModelParam._m0[22u].w;
        float _1717 = fma(_817, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809)) + cbModelParam._m0[23u].w;
        float _1720 = fma(_758, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756));
        float _1723 = fma(_758, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756));
        float _1726 = fma(_758, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756));
        float _1864;
        if (_1720 > 0.0)
        {
            _1864 = abs((1.0 - _1709) / _1720);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1709 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1864 = frontier_phi_25_21_ladder;
        }
        float _2129;
        if (_1723 > 0.0)
        {
            _2129 = abs((1.0 - _1713) / _1723);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1713 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2129 = frontier_phi_37_32_ladder;
        }
        float _2334;
        if (_1726 > 0.0)
        {
            _2334 = abs((1.0 - _1717) / _1726);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1717 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2334 = frontier_phi_46_43_ladder;
        }
        float _2336 = isnan(_2129) ? _1864 : (isnan(_1864) ? _2129 : min(_1864, _2129));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1720) + _1709;
        float _2342 = (_2337 * _1723) + _1713;
        float _2343 = (_2337 * _1726) + _1717;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2344;
        float _2347 = _2344 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2343 > _2347) || ((_2343 < _2345) || ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 < _2345) || (_2341 > _2347))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2343, cbModelParam._m0[17u].z, fma(_2342, cbModelParam._m0[17u].y, _2341 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2343, cbModelParam._m0[18u].z, fma(_2342, cbModelParam._m0[18u].y, _2341 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2343, cbModelParam._m0[19u].z, fma(_2342, cbModelParam._m0[19u].y, _2341 * cbModelParam._m0[19u].x))), _1654);
            frontier_phi_22_46_ladder = _2542.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2542.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2542.x * cbModelParam._m0[1u].z;
        }
        _1745 = frontier_phi_22_46_ladder_2;
        _1747 = frontier_phi_22_46_ladder_1;
        _1749 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1729 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_756, _757, _758), _1654);
        _1745 = _1729.x * cbModelParam._m0[1u].z;
        _1747 = _1729.y * cbModelParam._m0[1u].z;
        _1749 = _1729.z * cbModelParam._m0[1u].z;
    }
    float _1761 = ((((1.0 - _777) * ((_764 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_777 * _764)) * _748;
    float _1762 = _1761 * ((cbModelParam._m0[1u].w * (_1745 - _1645)) + _1645);
    float _1763 = _1761 * ((cbModelParam._m0[1u].w * (_1747 - _1647)) + _1647);
    float _1764 = _1761 * ((cbModelParam._m0[1u].w * (_1749 - _1649)) + _1649);
    float _1767 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1762 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1762 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, _1762 * cbSceneParam._m0[91u].x));
    uvec4 _1783 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1785 = _1783.x * 14u;
    uint _1786 = _1785 + 13u;
    float _1793 = _748 + (-1.0);
    float _1798 = (cbLight._m0[_1786].x * _1793) + 1.0;
    float _1799 = (cbLight._m0[_1786].y * _1793) + 1.0;
    float _1800 = (cbLight._m0[_1786].z * _1793) + 1.0;
    float _1801 = (cbLight._m0[_1786].w * _1793) + 1.0;
    uint _1802 = _1785 + 5u;
    float _1808 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1812 = _1785 + 4u;
    float _1818 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1822 = _1785 | 1u;
    float _1833 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_597, _598, _599));
    float _1836 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_597, _598, _599));
    float _3926 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _3937 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1841 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _1843 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.3183098733425140380859375;
    float _1850 = ((cbLight._m0[_1802].x * _1808) * _1843) + ((cbLight._m0[_1812].x * _1818) * _1841);
    float _1851 = ((_1808 * cbLight._m0[_1802].y) * _1843) + ((_1818 * cbLight._m0[_1812].y) * _1841);
    float _1852 = ((_1808 * cbLight._m0[_1802].z) * _1843) + ((_1818 * cbLight._m0[_1812].z) * _1841);
    uvec4 _1856 = floatBitsToUint(cbLight._m0[_1785 + 12u]);
    bool _1858 = _1856.x == 0u;
    float _1869;
    float _1871;
    float _1873;
    if (_1858)
    {
        _1869 = _1850;
        _1871 = _1851;
        _1873 = _1852;
    }
    else
    {
        uint _1877 = _1785 + 6u;
        float _1893 = (dot(vec3(cbLight._m0[_1785 + 2u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _1894 = _1893 * _1893;
        float _3948 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1896 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _1869 = (((cbLight._m0[_1877].x * 0.3183098733425140380859375) * _1895) * _1896) + _1850;
        _1871 = (((cbLight._m0[_1877].y * 0.3183098733425140380859375) * _1895) * _1896) + _1851;
        _1873 = (((cbLight._m0[_1877].z * 0.3183098733425140380859375) * _1895) * _1896) + _1852;
    }
    bool _1876 = _1856.y == 0u;
    float _1914;
    float _1916;
    float _1918;
    if (_1876)
    {
        _1914 = _1869;
        _1916 = _1871;
        _1918 = _1873;
    }
    else
    {
        uint _2073 = _1785 + 7u;
        float _2089 = (dot(vec3(cbLight._m0[_1785 + 3u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _2090 = _2089 * _2089;
        float _3964 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2091 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _2092 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1914 = (((cbLight._m0[_2073].x * 0.3183098733425140380859375) * _2091) * _2092) + _1869;
        _1916 = (((cbLight._m0[_2073].y * 0.3183098733425140380859375) * _2091) * _2092) + _1871;
        _1918 = (((cbLight._m0[_2073].z * 0.3183098733425140380859375) * _2091) * _2092) + _1873;
    }
    uint _1921 = _1785 + 8u;
    float _1934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _600) * 0.949999988079071044921875);
    float _1935 = _1934 * _1934;
    float _1936 = cbLight._m0[_1785].x + _677;
    float _1937 = cbLight._m0[_1785].y + _678;
    float _1938 = cbLight._m0[_1785].z + _679;
    float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
    float _1943 = _1942 * _1936;
    float _1944 = _1942 * _1937;
    float _1945 = _1942 * _1938;
    float _1946 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_1785].xyz));
    float _3980 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _1950 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1951 = dot(vec3(_597, _598, _599), vec3(_1943, _1944, _1945));
    float _4002 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1955 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1943, _1944, _1945));
    float _4013 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1959 = _1935 * _1935;
    float _1963 = ((_1954 * _1954) * (_1959 + (-1.0))) + 1.0;
    float _1974 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1975 = 1.0 - _1935;
    float _1986 = (0.5 / (((_1950 * ((_1949 * _1975) + _1935)) + 9.9999999392252902907785028219223e-09) + (((_1950 * _1975) + _1935) * _1949))) * _1949;
    float _4024 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1959 / ((_1963 * _1963) * 3.141590118408203125));
    uint _1999 = _1785 + 9u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1822].w)) * _600) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1822].x + _677;
    float _2013 = cbLight._m0[_1822].y + _678;
    float _2014 = cbLight._m0[_1822].z + _679;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_1822].xyz));
    float _4035 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _2026 = dot(vec3(_597, _598, _599), vec3(_2019, _2020, _2021));
    float _4046 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_2019, _2020, _2021));
    float _4057 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2034 = _2011 * _2011;
    float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
    float _2047 = (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2048 = 1.0 - _2011;
    float _2058 = (0.5 / (((_1950 * ((_2025 * _2048) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_1950 * _2048) + _2011) * _2025))) * _2025;
    float _4068 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
    float _2070 = (((_2047 * cbLight._m0[_1999].x) * _2060) * _1808) + (((_1974 * cbLight._m0[_1921].x) * _1988) * _1818);
    float _2071 = (((_2047 * cbLight._m0[_1999].y) * _2060) * _1808) + (((_1974 * cbLight._m0[_1921].y) * _1988) * _1818);
    float _2072 = (((_2047 * cbLight._m0[_1999].z) * _2060) * _1808) + (((_1974 * cbLight._m0[_1921].z) * _1988) * _1818);
    float _2134;
    float _2136;
    float _2138;
    if (_1858)
    {
        _2134 = _2070;
        _2136 = _2071;
        _2138 = _2072;
    }
    else
    {
        uint _2140 = _1785 + 2u;
        uint _2144 = _1785 + 10u;
        float _2158 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _600) * 0.949999988079071044921875);
        float _2159 = _2158 * _2158;
        float _2160 = cbLight._m0[_2140].x + _677;
        float _2161 = cbLight._m0[_2140].y + _678;
        float _2162 = cbLight._m0[_2140].z + _679;
        float _2166 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
        float _2167 = _2166 * _2160;
        float _2168 = _2166 * _2161;
        float _2169 = _2166 * _2162;
        float _2170 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2140].xyz));
        float _4079 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2174 = dot(vec3(_597, _598, _599), vec3(_2167, _2168, _2169));
        float _4090 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2177 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2178 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2167, _2168, _2169));
        float _4101 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2182 = _2159 * _2159;
        float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
        float _2195 = (exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2196 = 1.0 - _2159;
        float _2206 = (0.5 / (((_1950 * ((_2173 * _2196) + _2159)) + 9.9999999392252902907785028219223e-09) + (((_1950 * _2196) + _2159) * _2173))) * _2173;
        float _4112 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2208 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
        float _2209 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2134 = (((_2195 * cbLight._m0[_2144].x) * _2208) * _2209) + _2070;
        _2136 = (((_2195 * cbLight._m0[_2144].y) * _2208) * _2209) + _2071;
        _2138 = (((_2195 * cbLight._m0[_2144].z) * _2208) * _2209) + _2072;
    }
    float _2244;
    float _2246;
    float _2248;
    if (_1876)
    {
        _2244 = _2134;
        _2246 = _2136;
        _2248 = _2138;
    }
    else
    {
        uint _2255 = _1785 + 3u;
        uint _2259 = _1785 + 11u;
        float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _600) * 0.949999988079071044921875);
        float _2274 = _2273 * _2273;
        float _2275 = cbLight._m0[_2255].x + _677;
        float _2276 = cbLight._m0[_2255].y + _678;
        float _2277 = cbLight._m0[_2255].z + _679;
        float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
        float _2282 = _2281 * _2275;
        float _2283 = _2281 * _2276;
        float _2284 = _2281 * _2277;
        float _2285 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2255].xyz));
        float _4128 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2289 = dot(vec3(_597, _598, _599), vec3(_2282, _2283, _2284));
        float _4139 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2293 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2282, _2283, _2284));
        float _4150 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2297 = _2274 * _2274;
        float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
        float _2310 = (exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2311 = 1.0 - _2274;
        float _2321 = (0.5 / (((_1950 * ((_2288 * _2311) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_1950 * _2311) + _2274) * _2288))) * _2288;
        float _4161 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2323 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
        float _2324 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2244 = (((_2310 * cbLight._m0[_2259].x) * _2323) * _2324) + _2134;
        _2246 = (((_2310 * cbLight._m0[_2259].y) * _2323) * _2324) + _2136;
        _2248 = (((_2310 * cbLight._m0[_2259].z) * _2323) * _2324) + _2138;
    }
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    if (_1783.y == 0u)
    {
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2399;
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2399;
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2399;
        uvec4 _2414 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2415 = _2414.x;
        uint _2426 = uint((float(_2414.y) * floor(float(uint(cbSceneParam._m0[85u].y * _686) / _2415))) + floor(float(uint(cbSceneParam._m0[85u].x * _685) / _2415)));
        float _2436 = (log2(_2402 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2437 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        uint _2440 = uint(isnan(14.0) ? _2437 : (isnan(_2437) ? 14.0 : min(_2437, 14.0)));
        uvec4 _2445 = texelFetch(g_lightClusterGridBuffer, int(((_2440 << 2u) + (_2426 << 6u)) >> 2u));
        uint _2446 = _2445.x;
        uint _2447 = _2414.z;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        if (((((1u << ((_2447 >> 4u) & 15u)) + 4294967295u) & _2446) == 0u) || ((_2447 & 240u) == 0u))
        {
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
        }
        else
        {
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2556;
            float _2558;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            uint _2698 = 0u;
            uint _2707;
            bool _2708;
            for (;;)
            {
                _2707 = texelFetch(g_lightClassification, int((((_2440 << 5u) + (_2426 << 9u)) + (_2698 << 2u)) >> 2u)).x;
                _2708 = _2707 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2708)
                {
                    frontier_phi_61_pred = _2692;
                    frontier_phi_61_pred_1 = _2697;
                    frontier_phi_61_pred_2 = _2696;
                    frontier_phi_61_pred_3 = _2695;
                    frontier_phi_61_pred_4 = _2694;
                    frontier_phi_61_pred_5 = _2693;
                }
                else
                {
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    uint _2822;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2697;
                    _2822 = _2707;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    for (;;)
                    {
                        uint _2826 = uint(findLSB(_2822)) + (_2698 << 5u);
                        uint _2823 = (_2822 + 4294967295u) & _2822;
                        uint _2828 = _2826 * 48u;
                        vec4 _2842 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 3u)).x));
                        uint _2848 = (_2826 * 48u) + 4u;
                        vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 3u)).x));
                        uint _2867 = (_2826 * 48u) + 8u;
                        vec3 _2878 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 2u)).x));
                        float _2882 = _2842.x - _2400;
                        float _2883 = _2842.y - _2401;
                        float _2884 = _2842.z - _2402;
                        float _2885 = dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884));
                        float _2888 = inversesqrt(_2885);
                        float _2889 = _2888 * _2882;
                        float _2890 = _2888 * _2883;
                        float _2891 = _2888 * _2884;
                        float _2892 = dot(vec3(_704, _707, _710), vec3(_2889, _2890, _2891));
                        float _2897 = 1.0 - (_2885 * _2842.w);
                        float _4187 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2898 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2899 = sqrt(_2885) * _2861.w;
                        float _2902 = 1.39999997615814208984375 / (_2899 + 1.39999997615814208984375);
                        float _2903 = _2902 * _2902;
                        float _2906 = ((1.0 - _2903) * _2892) + _2903;
                        float _2909 = _2899 * _2899;
                        float _2913 = ((isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0))) * _2898) / ((_2909 * 0.699999988079071044921875) + 1.0);
                        float _2917 = (-0.0) - _2400;
                        float _2918 = (-0.0) - _2401;
                        float _2919 = (-0.0) - _2402;
                        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
                        float _2924 = _2923 * _2917;
                        float _2925 = _2923 * _2918;
                        float _2926 = _2923 * _2919;
                        float _2934 = exp2(log2(1.0 / ((_2909 * 3.5) + 5.0)) * 0.25);
                        float _2935 = 1.0 - _764;
                        float _2942 = sqrt(1.0 - ((1.0 - (_2935 * _2935)) * (1.0 - (_2934 * _2934))));
                        float _2943 = _2942 * _2942;
                        float _2944 = _2943 * _2943;
                        float _2945 = _2924 + _2889;
                        float _2946 = _2925 + _2890;
                        float _2947 = _2926 + _2891;
                        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
                        float _2955 = dot(vec3(_704, _707, _710), vec3(_2924, _2925, _2926));
                        float _4203 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2958 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2959 = dot(vec3(_704, _707, _710), vec3(_2951 * _2945, _2951 * _2946, _2951 * _2947));
                        float _4214 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2962 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2966 = ((_2962 * _2962) * (_2944 + (-1.0))) + 1.0;
                        float _2967 = _2902 * _2943;
                        float _2968 = _2967 * _2967;
                        float _2971 = ((1.0 - _2968) * _2892) + _2968;
                        float _4225 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2973 = 1.0 - _2943;
                        float _2983 = (0.5 / (((_2972 * ((_2958 * _2973) + _2943)) + 9.9999999392252902907785028219223e-09) + (((_2972 * _2973) + _2943) * _2958))) * _2972;
                        float _4236 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2994 = (((_2944 * 3.1415927410125732421875) * (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) / ((_2966 * _2966) * ((_2909 * 2.1991131305694580078125) + 3.141590118408203125))) * _2898;
                        _2751 = (_2913 * _2861.x) + _2819;
                        _2752 = (_2913 * _2861.y) + _2820;
                        _2753 = (_2913 * _2861.z) + _2821;
                        _2748 = (_2994 * _2878.x) + _2816;
                        _2749 = (_2994 * _2878.y) + _2817;
                        _2750 = (_2994 * _2878.z) + _2818;
                        if (_2823 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2753;
                            _2822 = _2823;
                        }
                    }
                    frontier_phi_61_pred = _2748;
                    frontier_phi_61_pred_1 = _2753;
                    frontier_phi_61_pred_2 = _2752;
                    frontier_phi_61_pred_3 = _2751;
                    frontier_phi_61_pred_4 = _2750;
                    frontier_phi_61_pred_5 = _2749;
                }
                _2548 = frontier_phi_61_pred;
                _2558 = frontier_phi_61_pred_1;
                _2556 = frontier_phi_61_pred_2;
                _2554 = frontier_phi_61_pred_3;
                _2552 = frontier_phi_61_pred_4;
                _2550 = frontier_phi_61_pred_5;
                uint _2699 = _2698 + 1u;
                if (_2699 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2692 = _2548;
                    _2693 = _2550;
                    _2694 = _2552;
                    _2695 = _2554;
                    _2696 = _2556;
                    _2697 = _2558;
                    _2698 = _2699;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
        }
        uvec4 _2561 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2562 = _2561.z;
        uint _2564 = (_2562 >> 8u) & 15u;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((4294967295u << _2564) & _2446) == 0u)
        {
            _2660 = _2547;
            _2662 = _2549;
            _2664 = _2551;
            _2666 = _2553;
            _2668 = _2555;
            _2670 = _2557;
        }
        else
        {
            float _2685 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
            float _2686 = _2685 * _2400;
            float _2687 = _2685 * _2401;
            float _2688 = _2685 * _2402;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2564 < ((_2562 >> 12u) & 15u))
            {
                float _2661;
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2671;
                float _2799 = _2547;
                float _2800 = _2549;
                float _2801 = _2551;
                float _2802 = _2553;
                float _2803 = _2555;
                float _2804 = _2557;
                uint _2805 = _2564;
                uint _2814;
                bool _2815;
                for (;;)
                {
                    _2814 = texelFetch(g_lightClassification, int((((_2440 << 5u) + (_2426 << 9u)) + (_2805 << 2u)) >> 2u)).x;
                    _2815 = _2814 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2815)
                    {
                        frontier_phi_67_pred = _2802;
                        frontier_phi_67_pred_1 = _2803;
                        frontier_phi_67_pred_2 = _2804;
                        frontier_phi_67_pred_3 = _2801;
                        frontier_phi_67_pred_4 = _2800;
                        frontier_phi_67_pred_5 = _2799;
                    }
                    else
                    {
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        float _3017 = _2804;
                        uint _3018 = _2814;
                        uint _3019;
                        vec4 _3044;
                        float _3045;
                        vec4 _3060;
                        vec3 _3072;
                        vec4 _3087;
                        vec4 _3102;
                        float _3148;
                        bool _3149;
                        for (;;)
                        {
                            uint _3029 = ((_2805 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3018));
                            _3019 = (_3018 + 4294967295u) & _3018;
                            uint _3031 = _3029 * 40u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            _3045 = _3044.w;
                            uint _3047 = (_3029 * 40u) + 4u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3062 = (_3029 * 40u) + 8u;
                            _3072 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x));
                            uint _3074 = (_3029 * 40u) + 16u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3089 = (_3029 * 40u) + 20u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3104 = (_3029 * 40u) + 24u;
                            vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3123 = (_3029 * 40u) + 28u;
                            vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            _3148 = fma(_2402, _3136.z, fma(_2401, _3136.y, _3136.x * _2400)) + _3136.w;
                            _3149 = !((fma(_2402, _3117.z, fma(_2401, _3117.y, _3117.x * _2400)) + _3117.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3149)
                            {
                                float _3176 = _3044.x - _2400;
                                float _3177 = _3044.y - _2401;
                                float _3178 = _3044.z - _2402;
                                float _3179 = dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178));
                                float _3182 = inversesqrt(_3179);
                                float _3183 = _3182 * _3176;
                                float _3184 = _3182 * _3177;
                                float _3185 = _3182 * _3178;
                                float _3189 = 1.0 - (_3179 / (_3045 * _3045));
                                float _4247 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3190 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3194 = sqrt(_3179) * _3060.w;
                                float _3196 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                                float _3197 = _3196 * _3196;
                                float _3200 = ((1.0 - _3197) * dot(vec3(_3183, _3184, _3185), vec3(_704, _707, _710))) + _3197;
                                float _3203 = _3194 * _3194;
                                float _3207 = (fma(_2402, _3087.z, fma(_2401, _3087.y, _3087.x * _2400)) + _3087.w) / _3148;
                                float _3208 = (fma(_2402, _3102.z, fma(_2401, _3102.y, _3102.x * _2400)) + _3102.w) / _3148;
                                float _3212 = 1.0 - dot(vec2(_3207, _3208), vec2(_3207, _3208));
                                float _4263 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3214 = _3213 * (((isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0))) * _3190) / ((_3203 * 0.699999988079071044921875) + 1.0));
                                float _3226 = exp2(log2(1.0 / ((_3203 * 3.5) + 5.0)) * 0.25);
                                float _3227 = 1.0 - _764;
                                float _3234 = sqrt(1.0 - ((1.0 - (_3227 * _3227)) * (1.0 - (_3226 * _3226))));
                                float _3235 = _3234 * _3234;
                                float _3236 = _3235 * _3235;
                                float _3237 = _3183 - _2686;
                                float _3238 = _3184 - _2687;
                                float _3239 = _3185 - _2688;
                                float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                                float _3247 = dot(vec3(_704, _707, _710), vec3((-0.0) - _2686, (-0.0) - _2687, (-0.0) - _2688));
                                float _4274 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3250 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3251 = dot(vec3(_704, _707, _710), vec3(_3243 * _3237, _3243 * _3238, _3243 * _3239));
                                float _4285 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3254 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3258 = ((_3254 * _3254) * (_3236 + (-1.0))) + 1.0;
                                float _3259 = _3196 * _3235;
                                float _3260 = _3259 * _3259;
                                float _3266 = ((1.0 - _3260) * dot(vec3(_704, _707, _710), vec3(_3183, _3184, _3185))) + _3260;
                                float _4296 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3268 = 1.0 - _3235;
                                float _3278 = (0.5 / (((_3267 * ((_3250 * _3268) + _3235)) + 9.9999999392252902907785028219223e-09) + (((_3267 * _3268) + _3235) * _3250))) * _3267;
                                float _4307 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3288 = (_3213 * _3190) * (((_3236 * 3.1415927410125732421875) * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) / ((_3258 * _3258) * ((_3203 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3288 * _3072.x;
                                frontier_phi_73_pred_1 = _3288 * _3072.y;
                                frontier_phi_73_pred_2 = _3214 * _3060.z;
                                frontier_phi_73_pred_3 = _3214 * _3060.y;
                                frontier_phi_73_pred_4 = _3214 * _3060.x;
                                frontier_phi_73_pred_5 = _3288 * _3072.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3292 = frontier_phi_73_pred;
                            _3293 = frontier_phi_73_pred_1;
                            _3297 = frontier_phi_73_pred_2;
                            _3296 = frontier_phi_73_pred_3;
                            _3295 = frontier_phi_73_pred_4;
                            _3294 = frontier_phi_73_pred_5;
                            _3002 = _3295 + _3015;
                            _3003 = _3296 + _3016;
                            _3004 = _3297 + _3017;
                            _2999 = _3292 + _3012;
                            _3000 = _3293 + _3013;
                            _3001 = _3294 + _3014;
                            if (_3019 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3019;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3002;
                        frontier_phi_67_pred_1 = _3003;
                        frontier_phi_67_pred_2 = _3004;
                        frontier_phi_67_pred_3 = _3001;
                        frontier_phi_67_pred_4 = _3000;
                        frontier_phi_67_pred_5 = _2999;
                    }
                    _2667 = frontier_phi_67_pred;
                    _2669 = frontier_phi_67_pred_1;
                    _2671 = frontier_phi_67_pred_2;
                    _2665 = frontier_phi_67_pred_3;
                    _2663 = frontier_phi_67_pred_4;
                    _2661 = frontier_phi_67_pred_5;
                    uint _2806 = _2805 + 1u;
                    if (_2806 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2799 = _2661;
                        _2800 = _2663;
                        _2801 = _2665;
                        _2802 = _2667;
                        _2803 = _2669;
                        _2804 = _2671;
                        _2805 = _2806;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2669;
                frontier_phi_55_56_ladder_1 = _2671;
                frontier_phi_55_56_ladder_2 = _2667;
                frontier_phi_55_56_ladder_3 = _2665;
                frontier_phi_55_56_ladder_4 = _2663;
                frontier_phi_55_56_ladder_5 = _2661;
            }
            else
            {
                frontier_phi_55_56_ladder = _2555;
                frontier_phi_55_56_ladder_1 = _2557;
                frontier_phi_55_56_ladder_2 = _2553;
                frontier_phi_55_56_ladder_3 = _2551;
                frontier_phi_55_56_ladder_4 = _2549;
                frontier_phi_55_56_ladder_5 = _2547;
            }
            _2660 = frontier_phi_55_56_ladder_5;
            _2662 = frontier_phi_55_56_ladder_4;
            _2664 = frontier_phi_55_56_ladder_3;
            _2666 = frontier_phi_55_56_ladder_2;
            _2668 = frontier_phi_55_56_ladder;
            _2670 = frontier_phi_55_56_ladder_1;
        }
        float _2675 = isnan(1.0) ? _748 : (isnan(_748) ? 1.0 : min(_748, 1.0));
        _2459 = (_2675 * _2666) + _1914;
        _2461 = (_2675 * _2668) + _1916;
        _2463 = (_2675 * _2670) + _1918;
        _2465 = ((_2660 * 0.039999999105930328369140625) * _2675) + _2244;
        _2467 = ((_2662 * 0.039999999105930328369140625) * _2675) + _2246;
        _2469 = ((_2664 * 0.039999999105930328369140625) * _2675) + _2248;
    }
    else
    {
        _2459 = _1914;
        _2461 = _1916;
        _2463 = _1918;
        _2465 = _2244;
        _2467 = _2246;
        _2469 = _2248;
    }
    float _4323 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4334 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4345 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    uint _2489 = _230 + 6u;
    float _2497 = _685 / cbSceneParam._m0[86u].x;
    float _2498 = _686 / cbSceneParam._m0[86u].y;
    vec4 _2512 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, (log2((isnan(cbSceneParam._m0[77u].w) ? _618 : (isnan(_618) ? cbSceneParam._m0[77u].w : min(_618, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2514 = _2512.x;
    float _2515 = _2512.y;
    float _2516 = _2512.z;
    float _2517 = _2512.w;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    if (_618 > cbSceneParam._m0[78u].w)
    {
        float _2572 = isnan(_618) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _618 : min(cbSceneParam._m0[80u].w, _618));
        float _2573 = _2572 / _618;
        float _2584 = _2573 * _670;
        float _2585 = _671 * _2573;
        float _2586 = (-0.0) - _2585;
        float _2588 = _2573 * _672;
        float _2590 = (cbSceneParam._m0[77u].w * _2586) / _2572;
        float _2591 = _2590 + cbSceneParam._m0[79u].w;
        float _2592 = cbSceneParam._m0[79u].w - _2585;
        float _2598 = sqrt(((_2584 * _2584) + (_2585 * _2585)) + (_2588 * _2588));
        float _2601 = (1.0 - (cbSceneParam._m0[77u].w / _2572)) * _2598;
        float _2606 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2608 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2761;
        if (abs((_2586 - _2590) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2761 = ((((_2591 > 0.0) ? exp2(_2606 * _2591) : (2.0 - exp2(_2608 * _2591))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2601;
        }
        else
        {
            float _2721 = 1.0 / cbSceneParam._m0[80u].x;
            float _2722 = isnan(_2592) ? _2591 : (isnan(_2591) ? _2592 : max(_2591, _2592));
            float _2723 = isnan(_2592) ? _2591 : (isnan(_2591) ? _2592 : min(_2591, _2592));
            float _2732 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : min(_2722, 0.0));
            float _2733 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : min(_2723, 0.0));
            _2761 = ((abs(_2598 / _2586) * cbSceneParam._m0[80u].y) * ((((_2732 - _2733) * 2.0) - ((exp2(_2606 * (isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0)))) - exp2(_2606 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0))))) * _2721)) - ((exp2(_2608 * _2732) - exp2(_2608 * _2733)) * _2721))) + (_2601 * cbSceneParam._m0[80u].z);
        }
        vec4 _2763 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, 1.0), 0.0);
        float _2772 = exp2((_2761 * (-1.44269502162933349609375)) * (1.0 - _2763.w));
        float _2773 = log2(_2772);
        float _2789 = log2(_2517);
        _2610 = (exp2(_2789 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2773 * cbSceneParam._m0[78u].x)) * _2763.x) / cbSceneParam._m0[78u].x)) + _2514;
        _2612 = (exp2(_2789 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2773 * cbSceneParam._m0[78u].y)) * _2763.y) / cbSceneParam._m0[78u].y)) + _2515;
        _2614 = (exp2(_2789 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2773 * cbSceneParam._m0[78u].z)) * _2763.z) / cbSceneParam._m0[78u].z)) + _2516;
        _2616 = _2772 * _2517;
    }
    else
    {
        _2610 = _2514;
        _2612 = _2515;
        _2614 = _2516;
        _2616 = _2517;
    }
    float _2628 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2629 = _2628 == 3.0;
    float _2630 = log2(_2616);
    float _2637 = exp2(_2630 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2459 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _748))) + ((_2465 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1552)) * cbPerFrame._m0[3u].x));
    float _2638 = exp2(_2630 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2461 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _748))) + ((_2467 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1552)) * cbPerFrame._m0[3u].x));
    float _2639 = exp2(_2630 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2463 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _748))) + ((_2469 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1552)) * cbPerFrame._m0[3u].x));
    float _2648 = (_2628 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2648 * (_2629 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2610)));
    SV_Target.y = _2648 * (_2629 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2612)));
    SV_Target.z = _2648 * (_2629 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2614)));
    SV_Target.w = cbInstanceData._m0[_2489].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2489].w;
}


