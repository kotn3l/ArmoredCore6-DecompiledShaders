#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1517;
float _4157;
float _4158;
float _4159;
float _4160;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _417 = _415.x;
    float _429 = dot(vec4(_417, _415.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _446 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _375.x) * 2.0) - ((((_417 - _429) * cbMtdParam._m0[24u].z) + _429) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4169 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _454 = (_447 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _455 = (_447 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _456 = (_447 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _473 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _493 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _495 = _493.x;
    float _505 = dot(vec4(_495, _493.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _519 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _375.y) * 2.0) - ((((_495 - _505) * cbMtdParam._m0[24u].z) + _505) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4180 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _527 = (_520 * ((_473.x * cbMtdParam._m0[13u].x) - _454)) + _454;
    float _528 = (_520 * ((_473.y * cbMtdParam._m0[13u].y) - _455)) + _455;
    float _529 = (_520 * ((_473.z * cbMtdParam._m0[13u].z) - _456)) + _456;
    vec4 _547 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _286) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _287) + cbTextureTilingScale._m0[24u].w));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _566 = _564.x;
    float _576 = dot(vec4(_566, _564.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _588 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _375.z) * 2.0) - ((((_566 - _576) * cbMtdParam._m0[24u].z) + _576) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4191 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _602 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _306.x) * ((_589 * ((_547.x * cbMtdParam._m0[14u].x) - _527)) + _527);
    float _605 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _306.y) * ((_589 * ((_547.y * cbMtdParam._m0[14u].y) - _528)) + _528);
    float _608 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _306.z) * ((_589 * ((_547.z * cbMtdParam._m0[14u].z) - _529)) + _529);
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _645 = _643.x;
    float _646 = _643.y;
    float _647 = _643.z;
    float _654 = ((_626.x - _645) * _447) + _645;
    float _655 = ((_626.y - _646) * _447) + _646;
    float _656 = ((_626.z - _647) * _447) + _647;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _679 = ((_668.x - _654) * _520) + _654;
    float _680 = ((_668.y - _655) * _520) + _655;
    float _681 = ((_668.z - _656) * _520) + _656;
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _286) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _287) + cbTextureTilingScale._m0[23u].w));
    float _706 = ((_693.z - _681) * _589) + _681;
    float _709 = ((((_693.x - _679) * _589) + _679) * 2.0) + (-1.0);
    float _711 = ((((_693.y - _680) * _589) + _680) * 2.0) + (-1.0);
    float _712 = dot(vec2(_709, _711), vec2(_709, _711));
    float _4202 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _717 = sqrt(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))));
    vec4 _731 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _756 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _758 = _756.x;
    float _759 = 1.0 - _758;
    float _765 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _768 = ((isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : min(_765, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _777 = (_768 - ((((((_758 - _759) * cbMtdParam._m0[24u].w) + _759) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _768))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4223 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _778 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _785 = (_778 * (cbMtdParam._m0[17u].x - _602)) + _602;
    float _786 = (_778 * (cbMtdParam._m0[17u].y - _605)) + _605;
    float _787 = (_778 * (cbMtdParam._m0[17u].z - _608)) + _608;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _801 = _799.x;
    float _802 = 1.0 - _801;
    float _829 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_801 - _802) * cbMtdParam._m0[24u].y) + _802) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4234 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _830 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _838 = ((((cbMtdParam._m0[10u].x - _785) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _830) + _785;
    float _839 = ((((cbMtdParam._m0[10u].y - _786) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _830) + _786;
    float _840 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _787)) * _830) + _787;
    float _844 = (cbMtdParam._m0[19u].w * (_731.z - _706)) + _706;
    vec4 _858 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _865 = (_858.x * 2.0) + (-1.0);
    float _866 = (_858.y * 2.0) + (-1.0);
    float _867 = dot(vec2(_865, _866), vec2(_865, _866));
    float _4245 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _875 = (_778 * (_858.z - _844)) + _844;
    float _878 = ((cbMtdParam._m0[23u].y - _875) * _830) + _875;
    vec4 _897 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _903 = (_897.x * 2.0) + (-1.0);
    float _904 = (_897.y * 2.0) + (-1.0);
    float _905 = dot(vec2(_903, _904), vec2(_903, _904));
    float _4256 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _913 = (((_731.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _709;
    float _914 = (((_731.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _711;
    float _926 = (((_865 - _913) + (cbMtdParam._m0[21u].x * _913)) * _778) + _913;
    float _927 = (((_866 - _914) + (cbMtdParam._m0[21u].x * _914)) * _778) + _914;
    float _928 = (_778 * (sqrt(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) - _717)) + _717;
    float _939 = (((_903 - _926) + (_926 * cbMtdParam._m0[22u].z)) * _830) + _926;
    float _940 = (((_904 - _927) + (_927 * cbMtdParam._m0[22u].z)) * _830) + _927;
    float _941 = ((sqrt(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) - _928) * _830) + _928;
    float _943 = cbMtdParam._m0[22u].x + _731.w;
    float _946 = fma(_941, _254 * NORMAL.x, fma(_940, _261 * TANGENT.x, (_247 * _239) * _939));
    float _949 = fma(_941, _254 * NORMAL.y, fma(_940, _261 * TANGENT.y, (_247 * _240) * _939));
    float _952 = fma(_941, _254 * NORMAL.z, fma(_940, _261 * TANGENT.z, (_247 * _241) * _939));
    float _956 = inversesqrt(dot(vec3(_946, _949, _952), vec3(_946, _949, _952)));
    float _957 = _956 * _946;
    float _958 = _956 * _949;
    float _959 = _956 * _952;
    float _4267 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _960 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4289 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4300 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4311 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _978 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1028 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1018);
    float _1029 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1018);
    float _1030 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1018);
    float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
    float _1035 = _1028 * _1034;
    float _1036 = _1029 * _1034;
    float _1037 = _1030 * _1034;
    vec4 _1042 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1044 = _1042.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1198 = sqrt(((_1028 * _1028) + (_1029 * _1029)) + (_1030 * _1030));
        float _1204 = (cbMatDynParam._m0[5u].x * _1198) + cbMatDynParam._m0[5u].y;
        float _4322 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1209 = (cbMatDynParam._m0[5u].z * _1198) + cbMatDynParam._m0[5u].w;
        float _4333 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) - _1205)) + _1205) < ((_1044 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1055 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1056 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1074 = fma(_959, cbSceneParam._m0[5u].z, fma(_958, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _957));
    float _1077 = fma(_959, cbSceneParam._m0[6u].z, fma(_958, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _957));
    float _1080 = fma(_959, cbSceneParam._m0[7u].z, fma(_958, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _957));
    uint _1093 = _267 + 9u;
    uint _1094 = _1093 + uint(cbMatDynParam._m0[0u].w);
    float _1100 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * cbInstanceData._m0[_1094].x;
    float _1101 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * cbInstanceData._m0[_1094].y;
    float _1102 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * cbInstanceData._m0[_1094].z;
    float _4344 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _4355 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _4366 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    vec4 _1114 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1055, cbSceneParam._m0[86u].y * _1056));
    float _1118 = ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * TEXCOORD_5.w) * _1114.x;
    float _1119 = dot(vec3(_957, _958, _959), vec3(_1035, _1036, _1037));
    float _1122 = _1119 * 2.0;
    float _1126 = (_1122 * _957) - _1035;
    float _1127 = (_1122 * _958) - _1036;
    float _1128 = (_1122 * _959) - _1037;
    float _1132 = abs(dot(vec3(_1035, _1036, _1037), vec3(_957, _958, _959)));
    float _4377 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _1134 = sqrt(_960);
    float _1147 = exp2((_1134 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1134 * 3.0));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1183 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1187 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1516;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1241 = fma(_1187, cbModelParam._m0[26u].z, fma(_1183, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1179));
        float _1245 = fma(_1187, cbModelParam._m0[27u].z, fma(_1183, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1179));
        float _1249 = fma(_1187, cbModelParam._m0[28u].z, fma(_1183, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1179));
        float _1274 = _1179 + _957;
        float _1275 = _1183 + _958;
        float _1276 = _1187 + _959;
        float _1286 = fma(_1276, cbModelParam._m0[26u].z, fma(_1275, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1274)) - _1241;
        float _1287 = fma(_1276, cbModelParam._m0[27u].z, fma(_1275, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1274)) - _1245;
        float _1288 = fma(_1276, cbModelParam._m0[28u].z, fma(_1275, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1274)) - _1249;
        float _1292 = inversesqrt(dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288)));
        float _1305 = ((_1292 * _1286) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1241 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1292 * _1287) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1245 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1292 * _1288) / cbModelParam._m0[34u].z) + ((((((_1249 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        float _1344 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1310.x + (-0.5));
        float _1346 = _1344 * (_1310.y + (-0.5));
        float _1347 = _1344 * (_1310.z + (-0.5));
        float _1354 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1317.x + (-0.5));
        float _1356 = _1354 * (_1317.y + (-0.5));
        float _1357 = _1354 * (_1317.z + (-0.5));
        float _1364 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1324.x + (-0.5));
        float _1366 = _1364 * (_1324.y + (-0.5));
        float _1367 = _1364 * (_1324.z + (-0.5));
        float _1374 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1331.x + (-0.5));
        float _1376 = _1374 * (_1331.y + (-0.5));
        float _1377 = _1374 * (_1331.z + (-0.5));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = _1345 * 0.5;
        float _1382 = _1355 * 0.5;
        float _1383 = _1365 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1398 = (dot(vec3(_957, _958, _959), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4403 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1408 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4414 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4425 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_1410 + 1.0))) + _1415) * _1378;
        float _1425 = _1346 * 0.5;
        float _1426 = _1356 * 0.5;
        float _1427 = _1366 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_957, _958, _959), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4458 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1452 + 1.0))) + _1457) * _1379;
        float _1467 = _1347 * 0.5;
        float _1468 = _1357 * 0.5;
        float _1469 = _1367 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_957, _958, _959), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _4469 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4480 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4491 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_1494 + 1.0))) + _1499) * _1380;
        _1516 = _1347;
        _1518 = _1346;
        _1519 = _1345;
        _1520 = _1357;
        _1521 = _1356;
        _1522 = _1355;
        _1523 = _1367;
        _1524 = _1366;
        _1525 = _1365;
        _1526 = _1380;
        _1527 = _1379;
        _1528 = _1378;
        _1529 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1530 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1531 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
    }
    else
    {
        _1516 = _1517;
        _1518 = _1517;
        _1519 = _1517;
        _1520 = _1517;
        _1521 = _1517;
        _1522 = _1517;
        _1523 = _1517;
        _1524 = _1517;
        _1525 = _1517;
        _1526 = _1517;
        _1527 = _1517;
        _1528 = _1517;
        _1529 = 0.0;
        _1530 = 0.0;
        _1531 = 0.0;
    }
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1557 = fma(_1187, cbModelParam._m0[30u].z, fma(_1183, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1179));
        float _1561 = fma(_1187, cbModelParam._m0[31u].z, fma(_1183, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1179));
        float _1565 = fma(_1187, cbModelParam._m0[32u].z, fma(_1183, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1179));
        float _1588 = _1179 + _957;
        float _1589 = _1183 + _958;
        float _1590 = _1187 + _959;
        float _1600 = fma(_1590, cbModelParam._m0[30u].z, fma(_1589, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1588)) - _1557;
        float _1601 = fma(_1590, cbModelParam._m0[31u].z, fma(_1589, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1588)) - _1561;
        float _1602 = fma(_1590, cbModelParam._m0[32u].z, fma(_1589, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1588)) - _1565;
        float _1606 = inversesqrt(dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602)));
        float _1619 = ((_1606 * _1600) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1557 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1620 = ((_1606 * _1601) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1561 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1621 = ((_1606 * _1602) / cbModelParam._m0[35u].z) + ((((((_1565 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        float _1656 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1623.x + (-0.5));
        float _1658 = _1656 * (_1623.y + (-0.5));
        float _1659 = _1656 * (_1623.z + (-0.5));
        float _1666 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1630.x + (-0.5));
        float _1668 = _1666 * (_1630.y + (-0.5));
        float _1669 = _1666 * (_1630.z + (-0.5));
        float _1676 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1637.x + (-0.5));
        float _1678 = _1676 * (_1637.y + (-0.5));
        float _1679 = _1676 * (_1637.z + (-0.5));
        float _1686 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1644.x + (-0.5));
        float _1688 = _1686 * (_1644.y + (-0.5));
        float _1689 = _1686 * (_1644.z + (-0.5));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1692 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1693 = _1657 * 0.5;
        float _1694 = _1667 * 0.5;
        float _1695 = _1677 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_957, _958, _959), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4532 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4543 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4554 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_1720 + 1.0))) + _1725) * _1690;
        float _1735 = _1658 * 0.5;
        float _1736 = _1668 * 0.5;
        float _1737 = _1678 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_957, _958, _959), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4565 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1691 + 9.9999997473787516355514526367188e-06);
        float _4576 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4587 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_1762 + 1.0))) + _1767) * _1691;
        float _1777 = _1659 * 0.5;
        float _1778 = _1669 * 0.5;
        float _1779 = _1679 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_957, _958, _959), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4598 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1692 + 9.9999997473787516355514526367188e-06);
        float _4609 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4620 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_1804 + 1.0))) + _1809) * _1692;
        _1826 = _1659;
        _1827 = _1658;
        _1828 = _1657;
        _1829 = _1669;
        _1830 = _1668;
        _1831 = _1667;
        _1832 = _1679;
        _1833 = _1678;
        _1834 = _1677;
        _1835 = _1692;
        _1836 = _1691;
        _1837 = _1690;
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
        _1839 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
        _1840 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
    }
    else
    {
        _1826 = _1517;
        _1827 = _1517;
        _1828 = _1517;
        _1829 = _1517;
        _1830 = _1517;
        _1831 = _1517;
        _1832 = _1517;
        _1833 = _1517;
        _1834 = _1517;
        _1835 = _1517;
        _1836 = _1517;
        _1837 = _1517;
        _1838 = 0.0;
        _1839 = 0.0;
        _1840 = 0.0;
    }
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1529)) + _1529;
    float _1851 = (cbModelParam._m0[1u].x * (_1839 - _1530)) + _1530;
    float _1852 = (cbModelParam._m0[1u].x * (_1840 - _1531)) + _1531;
    float _1873 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1850));
    float _1894 = _1126 * 0.5;
    float _1895 = _1127 * 0.5;
    float _1896 = _1128 * 0.5;
    float _1897 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1828, _1831, _1834, _1837));
    float _1900 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1827, _1830, _1833, _1836));
    float _1903 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1937;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1910 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1516, _1520, _1523, _1526));
        float _1914 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1518, _1521, _1524, _1527));
        float _1918 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1519, _1522, _1525, _1528));
        float _1925 = dot(vec4(cbModelParam._m0[39u]), vec4(_1894, _1895, _1896, 1.0));
        _1937 = dot(vec3(isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1925) ? 0.0 : (isnan(0.0) ? _1925 : max(0.0, _1925))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1937 = 1.0;
    }
    float _1948;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1939 = dot(vec4(cbModelParam._m0[40u]), vec4(_1894, _1895, _1896, 1.0));
        _1948 = dot(vec3(isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1939) ? 0.0 : (isnan(0.0) ? _1939 : max(0.0, _1939))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1948 = 1.0;
    }
    float _1952 = (_1948 * cbModelParam._m0[1u].x) + (_1937 * (1.0 - cbModelParam._m0[1u].x));
    float _1962 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _960);
    float _1963 = isnan(_1962) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1962 : min(cbModelParam._m0[25u].z, _1962));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2010 = fma(_1187, cbModelParam._m0[13u].z, fma(_1183, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1179)) + cbModelParam._m0[13u].w;
        float _2014 = fma(_1187, cbModelParam._m0[14u].z, fma(_1183, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1179)) + cbModelParam._m0[14u].w;
        float _2018 = fma(_1187, cbModelParam._m0[15u].z, fma(_1183, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1179)) + cbModelParam._m0[15u].w;
        float _2021 = fma(_1128, cbModelParam._m0[13u].z, fma(_1127, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1126));
        float _2024 = fma(_1128, cbModelParam._m0[14u].z, fma(_1127, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1126));
        float _2027 = fma(_1128, cbModelParam._m0[15u].z, fma(_1127, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1126));
        float _2055;
        if (_2021 > 0.0)
        {
            _2055 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2055 = frontier_phi_17_15_ladder;
        }
        float _2225;
        if (_2024 > 0.0)
        {
            _2225 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2225 = frontier_phi_26_22_ladder;
        }
        float _2520;
        if (_2027 > 0.0)
        {
            _2520 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2520 = frontier_phi_38_33_ladder;
        }
        float _2522 = isnan(_2225) ? _2055 : (isnan(_2055) ? _2225 : min(_2055, _2225));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _2021) + _2010;
        float _2528 = (_2523 * _2024) + _2014;
        float _2529 = (_2523 * _2027) + _2018;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2530;
        float _2534 = _2530 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 > _2534) || ((_2528 < _2532) || ((_2527 < _2532) || (_2527 > _2534))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2529, cbModelParam._m0[9u].z, fma(_2528, cbModelParam._m0[9u].y, _2527 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2529, cbModelParam._m0[10u].z, fma(_2528, cbModelParam._m0[10u].y, _2527 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2529, cbModelParam._m0[11u].z, fma(_2528, cbModelParam._m0[11u].y, _2527 * cbModelParam._m0[11u].x))), _1963);
            frontier_phi_16_38_ladder = _2674.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2674.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2674.x * cbModelParam._m0[1u].y;
        }
        _2043 = frontier_phi_16_38_ladder_2;
        _2045 = frontier_phi_16_38_ladder_1;
        _2047 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2031 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1126, _1127, _1128), _1963);
        _2043 = _2031.x * cbModelParam._m0[1u].y;
        _2045 = _2031.y * cbModelParam._m0[1u].y;
        _2047 = _2031.z * cbModelParam._m0[1u].y;
    }
    float _2051 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _960);
    float _2052 = isnan(_2051) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2051 : min(cbModelParam._m0[25u].w, _2051));
    float _2142;
    float _2144;
    float _2146;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2106 = fma(_1187, cbModelParam._m0[21u].z, fma(_1183, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1179)) + cbModelParam._m0[21u].w;
        float _2110 = fma(_1187, cbModelParam._m0[22u].z, fma(_1183, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1179)) + cbModelParam._m0[22u].w;
        float _2114 = fma(_1187, cbModelParam._m0[23u].z, fma(_1183, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1179)) + cbModelParam._m0[23u].w;
        float _2117 = fma(_1128, cbModelParam._m0[21u].z, fma(_1127, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1126));
        float _2120 = fma(_1128, cbModelParam._m0[22u].z, fma(_1127, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1126));
        float _2123 = fma(_1128, cbModelParam._m0[23u].z, fma(_1127, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1126));
        float _2230;
        if (_2117 > 0.0)
        {
            _2230 = abs((1.0 - _2106) / _2117);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2106 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2230 = frontier_phi_28_24_ladder;
        }
        float _2547;
        if (_2120 > 0.0)
        {
            _2547 = abs((1.0 - _2110) / _2120);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2110 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2547 = frontier_phi_40_35_ladder;
        }
        float _2874;
        if (_2123 > 0.0)
        {
            _2874 = abs((1.0 - _2114) / _2123);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2123 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2114 + 1.0) / _2123);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2874 = frontier_phi_50_47_ladder;
        }
        float _2876 = isnan(_2547) ? _2230 : (isnan(_2230) ? _2547 : min(_2230, _2547));
        float _2877 = isnan(_2874) ? _2876 : (isnan(_2876) ? _2874 : min(_2876, _2874));
        float _2881 = (_2877 * _2117) + _2106;
        float _2882 = (_2877 * _2120) + _2110;
        float _2883 = (_2877 * _2123) + _2114;
        float _2884 = _2877 * 9.9999997473787516355514526367188e-05;
        float _2885 = (-1.0) - _2884;
        float _2887 = _2884 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2883 > _2887) || ((_2883 < _2885) || ((_2882 > _2887) || ((_2882 < _2885) || ((_2881 < _2885) || (_2881 > _2887))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3001 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2883, cbModelParam._m0[17u].z, fma(_2882, cbModelParam._m0[17u].y, _2881 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2883, cbModelParam._m0[18u].z, fma(_2882, cbModelParam._m0[18u].y, _2881 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2883, cbModelParam._m0[19u].z, fma(_2882, cbModelParam._m0[19u].y, _2881 * cbModelParam._m0[19u].x))), _2052);
            frontier_phi_25_50_ladder = _3001.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3001.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3001.x * cbModelParam._m0[1u].z;
        }
        _2142 = frontier_phi_25_50_ladder_2;
        _2144 = frontier_phi_25_50_ladder_1;
        _2146 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2126 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1126, _1127, _1128), _2052);
        _2142 = _2126.x * cbModelParam._m0[1u].z;
        _2144 = _2126.y * cbModelParam._m0[1u].z;
        _2146 = _2126.z * cbModelParam._m0[1u].z;
    }
    float _2158 = ((((1.0 - _1147) * ((_1134 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1147 * _1134)) * _1118;
    float _2159 = _2158 * ((cbModelParam._m0[1u].w * (_2142 - _2043)) + _2043);
    float _2160 = _2158 * ((cbModelParam._m0[1u].w * (_2144 - _2045)) + _2045);
    float _2161 = _2158 * ((cbModelParam._m0[1u].w * (_2146 - _2047)) + _2047);
    float _2164 = fma(_2161, cbSceneParam._m0[89u].z, fma(_2160, cbSceneParam._m0[89u].y, _2159 * cbSceneParam._m0[89u].x));
    float _2167 = fma(_2161, cbSceneParam._m0[90u].z, fma(_2160, cbSceneParam._m0[90u].y, _2159 * cbSceneParam._m0[90u].x));
    float _2170 = fma(_2161, cbSceneParam._m0[91u].z, fma(_2160, cbSceneParam._m0[91u].y, _2159 * cbSceneParam._m0[91u].x));
    float _2204 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2208 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2212 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2216 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2217 = _2204 / _2216;
    float _2218 = _2208 / _2216;
    float _2219 = _2212 / _2216;
    float _2366;
    float _2367;
    float _2368;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2246 = ((uint(_2219 > cbSceneParam._m0[59u].y) + uint(_2219 > cbSceneParam._m0[59u].x)) + uint(_2219 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2247 = _2246 + 43u;
        uint _2255 = _2246 + 44u;
        uint _2263 = _2246 + 45u;
        uint _2271 = _2246 + 46u;
        float _2282 = fma(_2216, cbSceneParam._m0[_2247].w, fma(_2212, cbSceneParam._m0[_2247].z, fma(_2208, cbSceneParam._m0[_2247].y, _2204 * cbSceneParam._m0[_2247].x)));
        float _2286 = fma(_2216, cbSceneParam._m0[_2255].w, fma(_2212, cbSceneParam._m0[_2255].z, fma(_2208, cbSceneParam._m0[_2255].y, _2204 * cbSceneParam._m0[_2255].x)));
        float _2294 = fma(_2216, cbSceneParam._m0[_2271].w, fma(_2212, cbSceneParam._m0[_2271].z, fma(_2208, cbSceneParam._m0[_2271].y, _2204 * cbSceneParam._m0[_2271].x)));
        float _2299 = cbSceneParam._m0[33u].z * _2294;
        float _2301 = cbSceneParam._m0[33u].w * _2294;
        float _2304 = fma(_2216, cbSceneParam._m0[_2263].w, fma(_2212, cbSceneParam._m0[_2263].z, fma(_2208, cbSceneParam._m0[_2263].y, _2204 * cbSceneParam._m0[_2263].x))) / _2294;
        float _2352 = (cbSceneParam._m0[33u].x - sqrt(((_2218 * _2218) + (_2217 * _2217)) + (_2219 * _2219))) * cbSceneParam._m0[33u].y;
        float _4746 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2359 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2299 + _2282) / _2294, (_2301 + _2286) / _2294), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2301 + _2282) / _2294, (_2286 - _2299) / _2294), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2282 - _2299) / _2294, (_2286 - _2301) / _2294), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2282 - _2301) / _2294, (_2299 + _2286) / _2294), _2304), 0.0)).x), vec4(0.25)));
        _2366 = 1.0 - (_2359 * cbSceneParam._m0[34u].x);
        _2367 = 1.0 - (_2359 * cbSceneParam._m0[34u].y);
        _2368 = 1.0 - (_2359 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2366 = 1.0;
        _2367 = 1.0;
        _2368 = 1.0;
    }
    float _2432;
    float _2434;
    float _2436;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2420 = fma(_2216, cbSceneParam._m0[63u].w, fma(_2212, cbSceneParam._m0[63u].z, fma(_2208, cbSceneParam._m0[63u].y, _2204 * cbSceneParam._m0[63u].x)));
        float _2421 = fma(_2216, cbSceneParam._m0[60u].w, fma(_2212, cbSceneParam._m0[60u].z, fma(_2208, cbSceneParam._m0[60u].y, _2204 * cbSceneParam._m0[60u].x))) / _2420;
        float _2422 = fma(_2216, cbSceneParam._m0[61u].w, fma(_2212, cbSceneParam._m0[61u].z, fma(_2208, cbSceneParam._m0[61u].y, _2204 * cbSceneParam._m0[61u].x))) / _2420;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2421 >= cbSceneParam._m0[64u].x) && (_2422 >= cbSceneParam._m0[64u].y)) && (_2421 <= cbSceneParam._m0[64u].z)) && (_2422 <= cbSceneParam._m0[64u].w))
        {
            float _2560 = fma(_2216, cbSceneParam._m0[62u].w, fma(_2212, cbSceneParam._m0[62u].z, fma(_2208, cbSceneParam._m0[62u].y, _2204 * cbSceneParam._m0[62u].x))) / _2420;
            float _2564 = isnan(cbSceneParam._m0[41u].w) ? _2560 : (isnan(_2560) ? cbSceneParam._m0[41u].w : max(_2560, cbSceneParam._m0[41u].w));
            float _2607 = (cbSceneParam._m0[33u].x - sqrt(((_2218 * _2218) + (_2217 * _2217)) + (_2219 * _2219))) * cbSceneParam._m0[33u].y;
            float _4762 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
            float _2614 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2421, cbSceneParam._m0[33u].w + _2422), _2564), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2421, _2422 - cbSceneParam._m0[33u].z), _2564), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2421 - cbSceneParam._m0[33u].z, _2422 - cbSceneParam._m0[33u].w), _2564), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2421 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2422), _2564), 0.0)).x), vec4(0.25)));
            float _2618 = 1.0 - (_2614 * cbSceneParam._m0[34u].x);
            float _2619 = 1.0 - (_2614 * cbSceneParam._m0[34u].y);
            float _2620 = 1.0 - (_2614 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2620) ? _2368 : (isnan(_2368) ? _2620 : min(_2368, _2620));
            frontier_phi_37_36_ladder_1 = isnan(_2619) ? _2367 : (isnan(_2367) ? _2619 : min(_2367, _2619));
            frontier_phi_37_36_ladder_2 = isnan(_2618) ? _2366 : (isnan(_2366) ? _2618 : min(_2366, _2618));
        }
        else
        {
            frontier_phi_37_36_ladder = _2368;
            frontier_phi_37_36_ladder_1 = _2367;
            frontier_phi_37_36_ladder_2 = _2366;
        }
        _2432 = frontier_phi_37_36_ladder_2;
        _2434 = frontier_phi_37_36_ladder_1;
        _2436 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2432 = _2366;
        _2434 = _2367;
        _2436 = _2368;
    }
    uvec4 _2441 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2443 = _2441.x * 14u;
    uint _2444 = _2443 + 13u;
    float _2451 = _1118 + (-1.0);
    float _2456 = (cbLight._m0[_2444].x * _2451) + 1.0;
    float _2457 = (cbLight._m0[_2444].y * _2451) + 1.0;
    float _2458 = (cbLight._m0[_2444].z * _2451) + 1.0;
    float _2459 = (cbLight._m0[_2444].w * _2451) + 1.0;
    uint _2460 = _2443 + 5u;
    float _2466 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
    uint _2470 = _2443 + 4u;
    float _2479 = isnan(1.0) ? _2456 : (isnan(_2456) ? 1.0 : min(_2456, 1.0));
    uint _2483 = _2443 | 1u;
    float _2494 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_957, _958, _959));
    float _2497 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_957, _958, _959));
    float _4798 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _4809 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2502 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * 0.3183098733425140380859375;
    float _2504 = (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * 0.3183098733425140380859375;
    float _2511 = ((cbLight._m0[_2460].x * _2466) * _2504) + (((cbLight._m0[_2470].x * _2432) * _2479) * _2502);
    float _2512 = ((_2466 * cbLight._m0[_2460].y) * _2504) + (((cbLight._m0[_2470].y * _2434) * _2479) * _2502);
    float _2513 = ((_2466 * cbLight._m0[_2460].z) * _2504) + (((cbLight._m0[_2470].z * _2436) * _2479) * _2502);
    uvec4 _2517 = floatBitsToUint(cbLight._m0[_2443 + 12u]);
    bool _2519 = _2517.x == 0u;
    float _2621;
    float _2623;
    float _2625;
    if (_2519)
    {
        _2621 = _2511;
        _2623 = _2512;
        _2625 = _2513;
    }
    else
    {
        uint _2629 = _2443 + 6u;
        float _2645 = (dot(vec3(cbLight._m0[_2443 + 2u].xyz), vec3(_957, _958, _959)) * 0.5) + 0.5;
        float _2646 = _2645 * _2645;
        float _4820 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2647 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2648 = isnan(1.0) ? _2458 : (isnan(_2458) ? 1.0 : min(_2458, 1.0));
        _2621 = (((cbLight._m0[_2629].x * 0.3183098733425140380859375) * _2647) * _2648) + _2511;
        _2623 = (((cbLight._m0[_2629].y * 0.3183098733425140380859375) * _2647) * _2648) + _2512;
        _2625 = (((cbLight._m0[_2629].z * 0.3183098733425140380859375) * _2647) * _2648) + _2513;
    }
    bool _2628 = _2517.y == 0u;
    float _2683;
    float _2685;
    float _2687;
    if (_2628)
    {
        _2683 = _2621;
        _2685 = _2623;
        _2687 = _2625;
    }
    else
    {
        uint _2845 = _2443 + 7u;
        float _2861 = (dot(vec3(cbLight._m0[_2443 + 3u].xyz), vec3(_957, _958, _959)) * 0.5) + 0.5;
        float _2862 = _2861 * _2861;
        float _4836 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2863 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2864 = isnan(1.0) ? _2459 : (isnan(_2459) ? 1.0 : min(_2459, 1.0));
        _2683 = (((cbLight._m0[_2845].x * 0.3183098733425140380859375) * _2863) * _2864) + _2621;
        _2685 = (((cbLight._m0[_2845].y * 0.3183098733425140380859375) * _2863) * _2864) + _2623;
        _2687 = (((cbLight._m0[_2845].z * 0.3183098733425140380859375) * _2863) * _2864) + _2625;
    }
    uint _2690 = _2443 + 8u;
    float _2703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2443].w)) * _960) * 0.949999988079071044921875);
    float _2704 = _2703 * _2703;
    float _2705 = cbLight._m0[_2443].x + _1035;
    float _2706 = cbLight._m0[_2443].y + _1036;
    float _2707 = cbLight._m0[_2443].z + _1037;
    float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
    float _2712 = _2711 * _2705;
    float _2713 = _2711 * _2706;
    float _2714 = _2711 * _2707;
    float _2715 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2443].xyz));
    float _4852 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2718 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
    float _4863 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _2719 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
    float _2720 = dot(vec3(_957, _958, _959), vec3(_2712, _2713, _2714));
    float _4874 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2723 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
    float _2724 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_2712, _2713, _2714));
    float _4885 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2728 = _2704 * _2704;
    float _2732 = ((_2723 * _2723) * (_2728 + (-1.0))) + 1.0;
    float _2743 = (exp2(log2(1.0 - (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2744 = 1.0 - _2704;
    float _2755 = (0.5 / (((_2719 * ((_2718 * _2744) + _2704)) + 9.9999999392252902907785028219223e-09) + (((_2719 * _2744) + _2704) * _2718))) * _2718;
    float _4896 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2757 = (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2728 / ((_2732 * _2732) * 3.141590118408203125));
    uint _2771 = _2443 + 9u;
    float _2782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _960) * 0.949999988079071044921875);
    float _2783 = _2782 * _2782;
    float _2784 = cbLight._m0[_2483].x + _1035;
    float _2785 = cbLight._m0[_2483].y + _1036;
    float _2786 = cbLight._m0[_2483].z + _1037;
    float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
    float _2791 = _2790 * _2784;
    float _2792 = _2790 * _2785;
    float _2793 = _2790 * _2786;
    float _2794 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2483].xyz));
    float _4907 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2797 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
    float _2798 = dot(vec3(_957, _958, _959), vec3(_2791, _2792, _2793));
    float _4918 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
    float _2801 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
    float _2802 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2791, _2792, _2793));
    float _4929 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
    float _2806 = _2783 * _2783;
    float _2810 = ((_2801 * _2801) * (_2806 + (-1.0))) + 1.0;
    float _2819 = (exp2(log2(1.0 - (isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2820 = 1.0 - _2783;
    float _2830 = (0.5 / (((_2719 * ((_2797 * _2820) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2719 * _2820) + _2783) * _2797))) * _2797;
    float _4940 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2832 = (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2806 / ((_2810 * _2810) * 3.141590118408203125));
    float _2842 = (((_2819 * cbLight._m0[_2771].x) * _2832) * _2466) + ((((cbLight._m0[_2690].x * _2432) * _2743) * _2757) * _2479);
    float _2843 = (((_2819 * cbLight._m0[_2771].y) * _2832) * _2466) + ((((cbLight._m0[_2690].y * _2434) * _2743) * _2757) * _2479);
    float _2844 = (((_2819 * cbLight._m0[_2771].z) * _2832) * _2466) + ((((cbLight._m0[_2690].z * _2436) * _2743) * _2757) * _2479);
    float _2900;
    float _2902;
    float _2904;
    if (_2519)
    {
        _2900 = _2842;
        _2902 = _2843;
        _2904 = _2844;
    }
    else
    {
        uint _2906 = _2443 + 2u;
        uint _2910 = _2443 + 10u;
        float _2924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2906].w)) * _960) * 0.949999988079071044921875);
        float _2925 = _2924 * _2924;
        float _2926 = cbLight._m0[_2906].x + _1035;
        float _2927 = cbLight._m0[_2906].y + _1036;
        float _2928 = cbLight._m0[_2906].z + _1037;
        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
        float _2933 = _2932 * _2926;
        float _2934 = _2932 * _2927;
        float _2935 = _2932 * _2928;
        float _2936 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2906].xyz));
        float _4951 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2939 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
        float _2940 = dot(vec3(_957, _958, _959), vec3(_2933, _2934, _2935));
        float _4962 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2943 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
        float _2944 = dot(vec3(cbLight._m0[_2906].xyz), vec3(_2933, _2934, _2935));
        float _4973 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2948 = _2925 * _2925;
        float _2952 = ((_2943 * _2943) * (_2948 + (-1.0))) + 1.0;
        float _2961 = (exp2(log2(1.0 - (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2962 = 1.0 - _2925;
        float _2972 = (0.5 / (((_2719 * ((_2939 * _2962) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2719 * _2962) + _2925) * _2939))) * _2939;
        float _4984 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2974 = (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_2948 / ((_2952 * _2952) * 3.141590118408203125));
        float _2975 = isnan(1.0) ? _2458 : (isnan(_2458) ? 1.0 : min(_2458, 1.0));
        _2900 = (((_2961 * cbLight._m0[_2910].x) * _2974) * _2975) + _2842;
        _2902 = (((_2961 * cbLight._m0[_2910].y) * _2974) * _2975) + _2843;
        _2904 = (((_2961 * cbLight._m0[_2910].z) * _2974) * _2975) + _2844;
    }
    float _3006;
    float _3008;
    float _3010;
    if (_2628)
    {
        _3006 = _2900;
        _3008 = _2902;
        _3010 = _2904;
    }
    else
    {
        uint _3017 = _2443 + 3u;
        uint _3021 = _2443 + 11u;
        float _3035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3017].w)) * _960) * 0.949999988079071044921875);
        float _3036 = _3035 * _3035;
        float _3037 = cbLight._m0[_3017].x + _1035;
        float _3038 = cbLight._m0[_3017].y + _1036;
        float _3039 = cbLight._m0[_3017].z + _1037;
        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
        float _3044 = _3043 * _3037;
        float _3045 = _3043 * _3038;
        float _3046 = _3043 * _3039;
        float _3047 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_3017].xyz));
        float _5000 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
        float _3050 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
        float _3051 = dot(vec3(_957, _958, _959), vec3(_3044, _3045, _3046));
        float _5011 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
        float _3054 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
        float _3055 = dot(vec3(cbLight._m0[_3017].xyz), vec3(_3044, _3045, _3046));
        float _5022 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
        float _3059 = _3036 * _3036;
        float _3063 = ((_3054 * _3054) * (_3059 + (-1.0))) + 1.0;
        float _3072 = (exp2(log2(1.0 - (isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3073 = 1.0 - _3036;
        float _3083 = (0.5 / (((_2719 * ((_3050 * _3073) + _3036)) + 9.9999999392252902907785028219223e-09) + (((_2719 * _3073) + _3036) * _3050))) * _3050;
        float _5033 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        float _3085 = (isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_3059 / ((_3063 * _3063) * 3.141590118408203125));
        float _3086 = isnan(1.0) ? _2459 : (isnan(_2459) ? 1.0 : min(_2459, 1.0));
        _3006 = (((_3072 * cbLight._m0[_3021].x) * _3085) * _3086) + _2900;
        _3008 = (((_3072 * cbLight._m0[_3021].y) * _3085) * _3086) + _2902;
        _3010 = (((_3072 * cbLight._m0[_3021].z) * _3085) * _3086) + _2904;
    }
    float _3152;
    float _3154;
    float _3156;
    float _3158;
    float _3160;
    float _3162;
    if (_2441.y == 0u)
    {
        uvec4 _3107 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3108 = _3107.x;
        uint _3119 = uint((float(_3107.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1056) / _3108))) + floor(float(uint(cbSceneParam._m0[85u].x * _1055) / _3108)));
        float _3129 = (log2(_2219 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3130 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
        uint _3133 = uint(isnan(14.0) ? _3130 : (isnan(_3130) ? 14.0 : min(_3130, 14.0)));
        uvec4 _3138 = texelFetch(g_lightClusterGridBuffer, int(((_3133 << 2u) + (_3119 << 6u)) >> 2u));
        uint _3139 = _3138.x;
        uint _3140 = _3107.z;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        if (((((1u << ((_3140 >> 4u) & 15u)) + 4294967295u) & _3139) == 0u) || ((_3140 & 240u) == 0u))
        {
            _3219 = 0.0;
            _3221 = 0.0;
            _3223 = 0.0;
            _3225 = 0.0;
            _3227 = 0.0;
            _3229 = 0.0;
        }
        else
        {
            float _3220;
            float _3222;
            float _3224;
            float _3226;
            float _3228;
            float _3230;
            float _3372 = 0.0;
            float _3373 = 0.0;
            float _3374 = 0.0;
            float _3375 = 0.0;
            float _3376 = 0.0;
            float _3377 = 0.0;
            uint _3378 = 0u;
            uint _3387;
            bool _3388;
            for (;;)
            {
                _3387 = texelFetch(g_lightClassification, int((((_3133 << 5u) + (_3119 << 9u)) + (_3378 << 2u)) >> 2u)).x;
                _3388 = _3387 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3388)
                {
                    frontier_phi_71_pred = _3377;
                    frontier_phi_71_pred_1 = _3376;
                    frontier_phi_71_pred_2 = _3375;
                    frontier_phi_71_pred_3 = _3374;
                    frontier_phi_71_pred_4 = _3373;
                    frontier_phi_71_pred_5 = _3372;
                }
                else
                {
                    float _3517;
                    float _3518;
                    float _3519;
                    float _3520;
                    float _3521;
                    float _3522;
                    uint _3523;
                    _3517 = _3372;
                    _3518 = _3373;
                    _3519 = _3374;
                    _3520 = _3375;
                    _3521 = _3376;
                    _3522 = _3377;
                    _3523 = _3387;
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    for (;;)
                    {
                        uint _3527 = uint(findLSB(_3523)) + (_3378 << 5u);
                        uint _3524 = (_3523 + 4294967295u) & _3523;
                        uint _3529 = _3527 * 48u;
                        vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3529)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 3u)).x));
                        uint _3549 = (_3527 * 48u) + 4u;
                        vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3549)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 3u)).x));
                        uint _3568 = (_3527 * 48u) + 8u;
                        vec3 _3579 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3568)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 2u)).x));
                        float _3583 = _3543.x - _2217;
                        float _3584 = _3543.y - _2218;
                        float _3585 = _3543.z - _2219;
                        float _3586 = dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585));
                        float _3589 = inversesqrt(_3586);
                        float _3590 = _3589 * _3583;
                        float _3591 = _3589 * _3584;
                        float _3592 = _3589 * _3585;
                        float _3593 = dot(vec3(_1074, _1077, _1080), vec3(_3590, _3591, _3592));
                        float _3598 = 1.0 - (_3586 * _3543.w);
                        float _5059 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3599 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                        float _3600 = sqrt(_3586) * _3562.w;
                        float _3603 = 1.39999997615814208984375 / (_3600 + 1.39999997615814208984375);
                        float _3604 = _3603 * _3603;
                        float _3607 = ((1.0 - _3604) * _3593) + _3604;
                        float _3610 = _3600 * _3600;
                        float _3614 = ((isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0))) * _3599) / ((_3610 * 0.699999988079071044921875) + 1.0);
                        float _3618 = (-0.0) - _2217;
                        float _3619 = (-0.0) - _2218;
                        float _3620 = (-0.0) - _2219;
                        float _3624 = inversesqrt(dot(vec3(_3618, _3619, _3620), vec3(_3618, _3619, _3620)));
                        float _3625 = _3624 * _3618;
                        float _3626 = _3624 * _3619;
                        float _3627 = _3624 * _3620;
                        float _3634 = exp2(log2(1.0 / ((_3610 * 3.5) + 5.0)) * 0.25);
                        float _3635 = 1.0 - _1134;
                        float _3642 = sqrt(1.0 - ((1.0 - (_3635 * _3635)) * (1.0 - (_3634 * _3634))));
                        float _3643 = _3642 * _3642;
                        float _3644 = _3643 * _3643;
                        float _3645 = _3625 + _3590;
                        float _3646 = _3626 + _3591;
                        float _3647 = _3627 + _3592;
                        float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                        float _3655 = dot(vec3(_1074, _1077, _1080), vec3(_3625, _3626, _3627));
                        float _5075 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3658 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
                        float _3659 = dot(vec3(_1074, _1077, _1080), vec3(_3651 * _3645, _3651 * _3646, _3651 * _3647));
                        float _5086 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                        float _3662 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
                        float _3666 = ((_3662 * _3662) * (_3644 + (-1.0))) + 1.0;
                        float _3667 = _3603 * _3643;
                        float _3668 = _3667 * _3667;
                        float _3671 = ((1.0 - _3668) * _3593) + _3668;
                        float _5097 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                        float _3672 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
                        float _3673 = 1.0 - _3643;
                        float _3683 = (0.5 / (((_3672 * ((_3658 * _3673) + _3643)) + 9.9999999392252902907785028219223e-09) + (((_3672 * _3673) + _3643) * _3658))) * _3672;
                        float _5108 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                        float _3694 = (((_3644 * 3.1415927410125732421875) * (isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0)))) / ((_3666 * _3666) * ((_3610 * 2.1991131305694580078125) + 3.141590118408203125))) * _3599;
                        _3447 = (_3614 * _3562.x) + _3520;
                        _3448 = (_3614 * _3562.y) + _3521;
                        _3449 = (_3614 * _3562.z) + _3522;
                        _3444 = (_3694 * _3579.x) + _3517;
                        _3445 = (_3694 * _3579.y) + _3518;
                        _3446 = (_3694 * _3579.z) + _3519;
                        if (_3524 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3517 = _3444;
                            _3518 = _3445;
                            _3519 = _3446;
                            _3520 = _3447;
                            _3521 = _3448;
                            _3522 = _3449;
                            _3523 = _3524;
                        }
                    }
                    frontier_phi_71_pred = _3449;
                    frontier_phi_71_pred_1 = _3448;
                    frontier_phi_71_pred_2 = _3447;
                    frontier_phi_71_pred_3 = _3446;
                    frontier_phi_71_pred_4 = _3445;
                    frontier_phi_71_pred_5 = _3444;
                }
                _3230 = frontier_phi_71_pred;
                _3228 = frontier_phi_71_pred_1;
                _3226 = frontier_phi_71_pred_2;
                _3224 = frontier_phi_71_pred_3;
                _3222 = frontier_phi_71_pred_4;
                _3220 = frontier_phi_71_pred_5;
                uint _3379 = _3378 + 1u;
                if (_3379 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3372 = _3220;
                    _3373 = _3222;
                    _3374 = _3224;
                    _3375 = _3226;
                    _3376 = _3228;
                    _3377 = _3230;
                    _3378 = _3379;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3219 = _3220;
            _3221 = _3222;
            _3223 = _3224;
            _3225 = _3226;
            _3227 = _3228;
            _3229 = _3230;
        }
        uvec4 _3233 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3234 = _3233.z;
        uint _3236 = (_3234 >> 8u) & 15u;
        float _3340;
        float _3342;
        float _3344;
        float _3346;
        float _3348;
        float _3350;
        if (((4294967295u << _3236) & _3139) == 0u)
        {
            _3340 = _3219;
            _3342 = _3221;
            _3344 = _3223;
            _3346 = _3225;
            _3348 = _3227;
            _3350 = _3229;
        }
        else
        {
            float _3365 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
            float _3366 = _3365 * _2217;
            float _3367 = _3365 * _2218;
            float _3368 = _3365 * _2219;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3236 < ((_3234 >> 12u) & 15u))
            {
                float _3341;
                float _3343;
                float _3345;
                float _3347;
                float _3349;
                float _3351;
                float _3500 = _3219;
                float _3501 = _3221;
                float _3502 = _3223;
                float _3503 = _3225;
                float _3504 = _3227;
                float _3505 = _3229;
                uint _3506 = _3236;
                uint _3515;
                bool _3516;
                for (;;)
                {
                    _3515 = texelFetch(g_lightClassification, int((((_3133 << 5u) + (_3119 << 9u)) + (_3506 << 2u)) >> 2u)).x;
                    _3516 = _3515 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3516)
                    {
                        frontier_phi_82_pred = _3505;
                        frontier_phi_82_pred_1 = _3504;
                        frontier_phi_82_pred_2 = _3503;
                        frontier_phi_82_pred_3 = _3502;
                        frontier_phi_82_pred_4 = _3501;
                        frontier_phi_82_pred_5 = _3500;
                    }
                    else
                    {
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _4001;
                        float _4002;
                        float _4003;
                        float _4004;
                        float _4005;
                        float _4006;
                        float _3721 = _3500;
                        float _3722 = _3501;
                        float _3723 = _3502;
                        float _3724 = _3503;
                        float _3725 = _3504;
                        float _3726 = _3505;
                        uint _3727 = _3515;
                        uint _3728;
                        vec4 _3753;
                        float _3754;
                        vec4 _3769;
                        vec3 _3781;
                        vec4 _3796;
                        vec4 _3811;
                        float _3857;
                        bool _3858;
                        for (;;)
                        {
                            uint _3738 = ((_3506 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3727));
                            _3728 = (_3727 + 4294967295u) & _3727;
                            uint _3740 = _3738 * 40u;
                            _3753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 3u)).x));
                            _3754 = _3753.w;
                            uint _3756 = (_3738 * 40u) + 4u;
                            _3769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 3u)).x));
                            uint _3771 = (_3738 * 40u) + 8u;
                            _3781 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 2u)).x));
                            uint _3783 = (_3738 * 40u) + 16u;
                            _3796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 3u)).x));
                            uint _3798 = (_3738 * 40u) + 20u;
                            _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            uint _3813 = (_3738 * 40u) + 24u;
                            vec4 _3826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 3u)).x));
                            uint _3832 = (_3738 * 40u) + 28u;
                            vec4 _3845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 3u)).x));
                            _3857 = fma(_2219, _3845.z, fma(_2218, _3845.y, _3845.x * _2217)) + _3845.w;
                            _3858 = !((fma(_2219, _3826.z, fma(_2218, _3826.y, _3826.x * _2217)) + _3826.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3858)
                            {
                                float _3885 = _3753.x - _2217;
                                float _3886 = _3753.y - _2218;
                                float _3887 = _3753.z - _2219;
                                float _3888 = dot(vec3(_3885, _3886, _3887), vec3(_3885, _3886, _3887));
                                float _3891 = inversesqrt(_3888);
                                float _3892 = _3891 * _3885;
                                float _3893 = _3891 * _3886;
                                float _3894 = _3891 * _3887;
                                float _3898 = 1.0 - (_3888 / (_3754 * _3754));
                                float _5119 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3899 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3903 = sqrt(_3888) * _3769.w;
                                float _3905 = 1.39999997615814208984375 / (_3903 + 1.39999997615814208984375);
                                float _3906 = _3905 * _3905;
                                float _3909 = ((1.0 - _3906) * dot(vec3(_3892, _3893, _3894), vec3(_1074, _1077, _1080))) + _3906;
                                float _3912 = _3903 * _3903;
                                float _3916 = (fma(_2219, _3796.z, fma(_2218, _3796.y, _3796.x * _2217)) + _3796.w) / _3857;
                                float _3917 = (fma(_2219, _3811.z, fma(_2218, _3811.y, _3811.x * _2217)) + _3811.w) / _3857;
                                float _3921 = 1.0 - dot(vec2(_3916, _3917), vec2(_3916, _3917));
                                float _5135 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3922 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
                                float _3923 = _3922 * (((isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0))) * _3899) / ((_3912 * 0.699999988079071044921875) + 1.0));
                                float _3935 = exp2(log2(1.0 / ((_3912 * 3.5) + 5.0)) * 0.25);
                                float _3936 = 1.0 - _1134;
                                float _3943 = sqrt(1.0 - ((1.0 - (_3936 * _3936)) * (1.0 - (_3935 * _3935))));
                                float _3944 = _3943 * _3943;
                                float _3945 = _3944 * _3944;
                                float _3946 = _3892 - _3366;
                                float _3947 = _3893 - _3367;
                                float _3948 = _3894 - _3368;
                                float _3952 = inversesqrt(dot(vec3(_3946, _3947, _3948), vec3(_3946, _3947, _3948)));
                                float _3956 = dot(vec3(_1074, _1077, _1080), vec3((-0.0) - _3366, (-0.0) - _3367, (-0.0) - _3368));
                                float _5146 = isnan(0.0) ? _3956 : (isnan(_3956) ? 0.0 : max(_3956, 0.0));
                                float _3959 = isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0));
                                float _3960 = dot(vec3(_1074, _1077, _1080), vec3(_3952 * _3946, _3952 * _3947, _3952 * _3948));
                                float _5157 = isnan(0.0) ? _3960 : (isnan(_3960) ? 0.0 : max(_3960, 0.0));
                                float _3963 = isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0));
                                float _3967 = ((_3963 * _3963) * (_3945 + (-1.0))) + 1.0;
                                float _3968 = _3905 * _3944;
                                float _3969 = _3968 * _3968;
                                float _3975 = ((1.0 - _3969) * dot(vec3(_1074, _1077, _1080), vec3(_3892, _3893, _3894))) + _3969;
                                float _5168 = isnan(0.0) ? _3975 : (isnan(_3975) ? 0.0 : max(_3975, 0.0));
                                float _3976 = isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0));
                                float _3977 = 1.0 - _3944;
                                float _3987 = (0.5 / (((_3976 * ((_3959 * _3977) + _3944)) + 9.9999999392252902907785028219223e-09) + (((_3976 * _3977) + _3944) * _3959))) * _3976;
                                float _5179 = isnan(0.0) ? _3987 : (isnan(_3987) ? 0.0 : max(_3987, 0.0));
                                float _3997 = (_3922 * _3899) * (((_3945 * 3.1415927410125732421875) * (isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0)))) / ((_3967 * _3967) * ((_3912 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3923 * _3769.z;
                                frontier_phi_88_pred_1 = _3923 * _3769.y;
                                frontier_phi_88_pred_2 = _3923 * _3769.x;
                                frontier_phi_88_pred_3 = _3997 * _3781.z;
                                frontier_phi_88_pred_4 = _3997 * _3781.y;
                                frontier_phi_88_pred_5 = _3997 * _3781.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4006 = frontier_phi_88_pred;
                            _4005 = frontier_phi_88_pred_1;
                            _4004 = frontier_phi_88_pred_2;
                            _4003 = frontier_phi_88_pred_3;
                            _4002 = frontier_phi_88_pred_4;
                            _4001 = frontier_phi_88_pred_5;
                            _3711 = _4004 + _3724;
                            _3712 = _4005 + _3725;
                            _3713 = _4006 + _3726;
                            _3708 = _4001 + _3721;
                            _3709 = _4002 + _3722;
                            _3710 = _4003 + _3723;
                            if (_3728 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3721 = _3708;
                                _3722 = _3709;
                                _3723 = _3710;
                                _3724 = _3711;
                                _3725 = _3712;
                                _3726 = _3713;
                                _3727 = _3728;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3713;
                        frontier_phi_82_pred_1 = _3712;
                        frontier_phi_82_pred_2 = _3711;
                        frontier_phi_82_pred_3 = _3710;
                        frontier_phi_82_pred_4 = _3709;
                        frontier_phi_82_pred_5 = _3708;
                    }
                    _3351 = frontier_phi_82_pred;
                    _3349 = frontier_phi_82_pred_1;
                    _3347 = frontier_phi_82_pred_2;
                    _3345 = frontier_phi_82_pred_3;
                    _3343 = frontier_phi_82_pred_4;
                    _3341 = frontier_phi_82_pred_5;
                    uint _3507 = _3506 + 1u;
                    if (_3507 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3500 = _3341;
                        _3501 = _3343;
                        _3502 = _3345;
                        _3503 = _3347;
                        _3504 = _3349;
                        _3505 = _3351;
                        _3506 = _3507;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3347;
                frontier_phi_63_64_ladder_1 = _3351;
                frontier_phi_63_64_ladder_2 = _3349;
                frontier_phi_63_64_ladder_3 = _3345;
                frontier_phi_63_64_ladder_4 = _3343;
                frontier_phi_63_64_ladder_5 = _3341;
            }
            else
            {
                frontier_phi_63_64_ladder = _3225;
                frontier_phi_63_64_ladder_1 = _3229;
                frontier_phi_63_64_ladder_2 = _3227;
                frontier_phi_63_64_ladder_3 = _3223;
                frontier_phi_63_64_ladder_4 = _3221;
                frontier_phi_63_64_ladder_5 = _3219;
            }
            _3340 = frontier_phi_63_64_ladder_5;
            _3342 = frontier_phi_63_64_ladder_4;
            _3344 = frontier_phi_63_64_ladder_3;
            _3346 = frontier_phi_63_64_ladder;
            _3348 = frontier_phi_63_64_ladder_2;
            _3350 = frontier_phi_63_64_ladder_1;
        }
        float _3355 = isnan(1.0) ? _1118 : (isnan(_1118) ? 1.0 : min(_1118, 1.0));
        _3152 = (_3355 * _3346) + _2683;
        _3154 = (_3355 * _3348) + _2685;
        _3156 = (_3355 * _3350) + _2687;
        _3158 = ((_3340 * 0.039999999105930328369140625) * _3355) + _3006;
        _3160 = ((_3342 * 0.039999999105930328369140625) * _3355) + _3008;
        _3162 = ((_3344 * 0.039999999105930328369140625) * _3355) + _3010;
    }
    else
    {
        _3152 = _2683;
        _3154 = _2685;
        _3156 = _2687;
        _3158 = _3006;
        _3160 = _3008;
        _3162 = _3010;
    }
    float _5195 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _5206 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _5217 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _3179 = ((isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0))) * (_3152 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1118))) + ((_3158 + ((isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))) * _1952)) * cbPerFrame._m0[3u].x);
    float _3180 = ((isnan(1.0) ? _5206 : (isnan(_5206) ? 1.0 : min(_5206, 1.0))) * (_3154 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1118))) + ((_3160 + ((isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0))) * _1952)) * cbPerFrame._m0[3u].x);
    float _3181 = ((isnan(1.0) ? _5217 : (isnan(_5217) ? 1.0 : min(_5217, 1.0))) * (_3156 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1118))) + ((_3162 + ((isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0))) * _1952)) * cbPerFrame._m0[3u].x);
    uint _3182 = _267 + 6u;
    float _3190 = _1055 / cbSceneParam._m0[86u].x;
    float _3191 = _1056 / cbSceneParam._m0[86u].y;
    vec4 _3205 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3190, _3191, (log2((isnan(cbSceneParam._m0[77u].w) ? _978 : (isnan(_978) ? cbSceneParam._m0[77u].w : min(_978, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3207 = _3205.x;
    float _3208 = _3205.y;
    float _3209 = _3205.z;
    float _3210 = _3205.w;
    float _3282;
    float _3284;
    float _3286;
    float _3288;
    if (_978 > cbSceneParam._m0[78u].w)
    {
        float _3244 = isnan(_978) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _978 : min(cbSceneParam._m0[80u].w, _978));
        float _3245 = _3244 / _978;
        float _3256 = _3245 * _1028;
        float _3257 = _1029 * _3245;
        float _3258 = (-0.0) - _3257;
        float _3260 = _3245 * _1030;
        float _3262 = (cbSceneParam._m0[77u].w * _3258) / _3244;
        float _3263 = _3262 + cbSceneParam._m0[79u].w;
        float _3264 = cbSceneParam._m0[79u].w - _3257;
        float _3270 = sqrt(((_3256 * _3256) + (_3257 * _3257)) + (_3260 * _3260));
        float _3273 = (1.0 - (cbSceneParam._m0[77u].w / _3244)) * _3270;
        float _3278 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3280 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3457;
        if (abs((_3258 - _3262) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3457 = ((((_3263 > 0.0) ? exp2(_3278 * _3263) : (2.0 - exp2(_3280 * _3263))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3273;
        }
        else
        {
            float _3401 = 1.0 / cbSceneParam._m0[80u].x;
            float _3402 = isnan(_3264) ? _3263 : (isnan(_3263) ? _3264 : max(_3263, _3264));
            float _3403 = isnan(_3264) ? _3263 : (isnan(_3263) ? _3264 : min(_3263, _3264));
            float _3412 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : min(_3402, 0.0));
            float _3413 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : min(_3403, 0.0));
            _3457 = ((abs(_3270 / _3258) * cbSceneParam._m0[80u].y) * ((((_3412 - _3413) * 2.0) - ((exp2(_3278 * (isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0)))) - exp2(_3278 * (isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0))))) * _3401)) - ((exp2(_3280 * _3412) - exp2(_3280 * _3413)) * _3401))) + (_3273 * cbSceneParam._m0[80u].z);
        }
        vec4 _3459 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3190, _3191, 1.0), 0.0);
        float _3468 = exp2((_3457 * (-1.44269502162933349609375)) * (1.0 - _3459.w));
        float _3469 = log2(_3468);
        float _3485 = log2(_3210);
        _3282 = (exp2(_3485 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3469 * cbSceneParam._m0[78u].x)) * _3459.x) / cbSceneParam._m0[78u].x)) + _3207;
        _3284 = (exp2(_3485 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3469 * cbSceneParam._m0[78u].y)) * _3459.y) / cbSceneParam._m0[78u].y)) + _3208;
        _3286 = (exp2(_3485 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3469 * cbSceneParam._m0[78u].z)) * _3459.z) / cbSceneParam._m0[78u].z)) + _3209;
        _3288 = _3468 * _3210;
    }
    else
    {
        _3282 = _3207;
        _3284 = _3208;
        _3286 = _3209;
        _3288 = _3210;
    }
    bool _3495;
    vec4 _3298;
    vec4 _3320;
    float _3322;
    float _3326;
    float _3327;
    float _3328;
    float _3329;
    bool _3339;
    for (;;)
    {
        _3298 = cbMatDynParam._m0[0u];
        float _3300 = roundEven(_3298.y);
        bool _3301 = _3300 == 3.0;
        float _3302 = log2(_3288);
        float _3309 = exp2(_3302 * cbSceneParam._m0[78u].x) * _3179;
        float _3310 = exp2(_3302 * cbSceneParam._m0[78u].y) * _3180;
        float _3311 = exp2(_3302 * cbSceneParam._m0[78u].z) * _3181;
        float _3318 = _1044 + (-0.5);
        _3320 = cbMtdParam._m0[1u];
        _3322 = _3320.y * _3318;
        float _3325 = (_3300 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3326 = _3325 * (_3301 ? _3309 : (_3309 + (cbSceneParam._m0[72u].w * _3282)));
        _3327 = _3325 * (_3301 ? _3310 : (_3310 + (cbSceneParam._m0[72u].w * _3284)));
        _3328 = _3325 * (_3301 ? _3311 : (_3311 + (cbSceneParam._m0[72u].w * _3286)));
        _3329 = _3318 * 0.999000012874603271484375;
        _3339 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3339)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3329) < 0.5)
            {
                _3495 = true;
                break;
            }
        }
        uint _3436 = _1093 + uint(_3298.w);
        if ((cbInstanceData._m0[_3436].w < 1.0) && ((cbInstanceData._m0[_3436].w + _3329) < 0.5))
        {
            _3495 = true;
            break;
        }
        if ((_3322 + 1.0) < _3320.x)
        {
            _3495 = true;
            break;
        }
        _3495 = false;
        break;
    }
    float _3699;
    if (_3495)
    {
        discard_state = true;
        _3699 = 0.0;
    }
    else
    {
        _3699 = cbInstanceData._m0[_3182].w;
    }
    SV_Target.x = _3326;
    SV_Target.y = _3327;
    SV_Target.z = _3328;
    SV_Target.w = _3699;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3182].w;
    discard_exit();
}


