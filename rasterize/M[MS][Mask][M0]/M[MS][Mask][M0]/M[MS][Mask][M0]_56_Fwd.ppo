#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1232;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _331 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _370 = _368.x;
    float _382 = dot(vec4(_370, _368.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _399 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _331.x) * 2.0) - ((((_370 - _382) * cbMtdParam._m0[24u].z) + _382) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3539 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _407 = (_400 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _408 = (_400 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _409 = (_400 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _426 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _446 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _448 = _446.x;
    float _458 = dot(vec4(_448, _446.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _472 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _331.y) * 2.0) - ((((_448 - _458) * cbMtdParam._m0[24u].z) + _458) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3550 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _480 = (_473 * ((_426.x * cbMtdParam._m0[13u].x) - _407)) + _407;
    float _481 = (_473 * ((_426.y * cbMtdParam._m0[13u].y) - _408)) + _408;
    float _482 = (_473 * ((_426.z * cbMtdParam._m0[13u].z) - _409)) + _409;
    vec4 _495 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _514 = _512.x;
    float _515 = _512.y;
    float _516 = _512.z;
    float _523 = ((_495.x - _514) * _400) + _514;
    float _524 = ((_495.y - _515) * _400) + _515;
    float _525 = ((_495.z - _516) * _400) + _516;
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _550 = ((_537.z - _525) * _473) + _525;
    float _553 = ((((_537.x - _523) * _473) + _523) * 2.0) + (-1.0);
    float _555 = ((((_537.y - _524) * _473) + _524) * 2.0) + (-1.0);
    float _556 = dot(vec2(_553, _555), vec2(_553, _555));
    float _3561 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = sqrt(1.0 - (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _587 = (((_575.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _553;
    float _588 = (((_575.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _555;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _602 = _600.x;
    float _603 = 1.0 - _602;
    float _631 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_602 - _603) * cbMtdParam._m0[24u].y) + _603) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3572 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _640 = ((((cbMtdParam._m0[10u].x - _480) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _632) + _480;
    float _641 = ((((cbMtdParam._m0[10u].y - _481) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _632) + _481;
    float _642 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _482)) * _632) + _482;
    float _646 = (cbMtdParam._m0[19u].w * (_575.z - _550)) + _550;
    float _650 = ((cbMtdParam._m0[23u].y - _646) * _632) + _646;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _675 = (_669.x * 2.0) + (-1.0);
    float _676 = (_669.y * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _3583 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _693 = (_632 * (((cbMtdParam._m0[22u].z * _587) - _587) + _675)) + _587;
    float _694 = (_632 * (((cbMtdParam._m0[22u].z * _588) - _588) + _676)) + _588;
    float _695 = (_632 * (sqrt(1.0 - (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) - _561)) + _561;
    float _697 = cbMtdParam._m0[22u].x + _575.w;
    float _700 = fma(_695, _232 * NORMAL.x, fma(_694, _239 * TANGENT.x, (_225 * _217) * _693));
    float _703 = fma(_695, _232 * NORMAL.y, fma(_694, _239 * TANGENT.y, (_225 * _218) * _693));
    float _706 = fma(_695, _232 * NORMAL.z, fma(_694, _239 * TANGENT.z, (_225 * _219) * _693));
    float _710 = inversesqrt(dot(vec3(_700, _703, _706), vec3(_700, _703, _706)));
    float _711 = _710 * _700;
    float _712 = _710 * _703;
    float _713 = _710 * _706;
    float _3594 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _714 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _3616 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3627 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3638 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _732 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _783 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _773);
    float _784 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _773);
    float _785 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _773);
    float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
    float _790 = _783 * _789;
    float _791 = _784 * _789;
    float _792 = _785 * _789;
    float _798 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _799 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _817 = fma(_713, cbSceneParam._m0[5u].z, fma(_712, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _711));
    float _820 = fma(_713, cbSceneParam._m0[6u].z, fma(_712, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _711));
    float _823 = fma(_713, cbSceneParam._m0[7u].z, fma(_712, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _711));
    uint _837 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _843 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_837].x;
    float _844 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_837].y;
    float _845 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * cbInstanceData._m0[_837].z;
    float _3649 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    vec4 _857 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _798, cbSceneParam._m0[86u].y * _799));
    float _861 = ((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * TEXCOORD_5.w) * _857.x;
    float _862 = dot(vec3(_711, _712, _713), vec3(_790, _791, _792));
    float _865 = _862 * 2.0;
    float _869 = (_865 * _711) - _790;
    float _870 = (_865 * _712) - _791;
    float _871 = (_865 * _713) - _792;
    float _875 = abs(dot(vec3(_790, _791, _792), vec3(_711, _712, _713)));
    float _3682 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _877 = sqrt(_714);
    float _890 = exp2((_877 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_877 * 3.0));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1231;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _956 = fma(_930, cbModelParam._m0[26u].z, fma(_926, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _922));
        float _960 = fma(_930, cbModelParam._m0[27u].z, fma(_926, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _922));
        float _964 = fma(_930, cbModelParam._m0[28u].z, fma(_926, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _922));
        float _989 = _922 + _711;
        float _990 = _926 + _712;
        float _991 = _930 + _713;
        float _1001 = fma(_991, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989)) - _956;
        float _1002 = fma(_991, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989)) - _960;
        float _1003 = fma(_991, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989)) - _964;
        float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
        float _1020 = ((_1007 * _1001) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_956 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1007 * _1002) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_960 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1007 * _1003) / cbModelParam._m0[34u].z) + ((((((_964 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        float _1059 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1025.x + (-0.5));
        float _1061 = _1059 * (_1025.y + (-0.5));
        float _1062 = _1059 * (_1025.z + (-0.5));
        float _1069 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1032.x + (-0.5));
        float _1071 = _1069 * (_1032.y + (-0.5));
        float _1072 = _1069 * (_1032.z + (-0.5));
        float _1079 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1039.x + (-0.5));
        float _1081 = _1079 * (_1039.y + (-0.5));
        float _1082 = _1079 * (_1039.z + (-0.5));
        float _1089 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1046.x + (-0.5));
        float _1091 = _1089 * (_1046.y + (-0.5));
        float _1092 = _1089 * (_1046.z + (-0.5));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = _1060 * 0.5;
        float _1097 = _1070 * 0.5;
        float _1098 = _1080 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1113 = (dot(vec3(_711, _712, _713), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1123 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3730 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1125 + 1.0))) + _1130) * _1093;
        float _1140 = _1061 * 0.5;
        float _1141 = _1071 * 0.5;
        float _1142 = _1081 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_711, _712, _713), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3763 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1167 + 1.0))) + _1172) * _1094;
        float _1182 = _1062 * 0.5;
        float _1183 = _1072 * 0.5;
        float _1184 = _1082 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_711, _712, _713), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3796 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1209 + 1.0))) + _1214) * _1095;
        _1231 = _1062;
        _1233 = _1061;
        _1234 = _1060;
        _1235 = _1072;
        _1236 = _1071;
        _1237 = _1070;
        _1238 = _1082;
        _1239 = _1081;
        _1240 = _1080;
        _1241 = _1095;
        _1242 = _1094;
        _1243 = _1093;
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
    }
    else
    {
        _1231 = _1232;
        _1233 = _1232;
        _1234 = _1232;
        _1235 = _1232;
        _1236 = _1232;
        _1237 = _1232;
        _1238 = _1232;
        _1239 = _1232;
        _1240 = _1232;
        _1241 = _1232;
        _1242 = _1232;
        _1243 = _1232;
        _1244 = 0.0;
        _1245 = 0.0;
        _1246 = 0.0;
    }
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1270 = fma(_930, cbModelParam._m0[30u].z, fma(_926, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922));
        float _1274 = fma(_930, cbModelParam._m0[31u].z, fma(_926, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922));
        float _1278 = fma(_930, cbModelParam._m0[32u].z, fma(_926, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922));
        float _1301 = _922 + _711;
        float _1302 = _926 + _712;
        float _1303 = _930 + _713;
        float _1313 = fma(_1303, cbModelParam._m0[30u].z, fma(_1302, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1301)) - _1270;
        float _1314 = fma(_1303, cbModelParam._m0[31u].z, fma(_1302, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1301)) - _1274;
        float _1315 = fma(_1303, cbModelParam._m0[32u].z, fma(_1302, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1301)) - _1278;
        float _1319 = inversesqrt(dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315)));
        float _1332 = ((_1319 * _1313) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1270 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1319 * _1314) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1274 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1319 * _1315) / cbModelParam._m0[35u].z) + ((((((_1278 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        float _1369 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1336.x + (-0.5));
        float _1371 = _1369 * (_1336.y + (-0.5));
        float _1372 = _1369 * (_1336.z + (-0.5));
        float _1379 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1343.x + (-0.5));
        float _1381 = _1379 * (_1343.y + (-0.5));
        float _1382 = _1379 * (_1343.z + (-0.5));
        float _1389 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1350.x + (-0.5));
        float _1391 = _1389 * (_1350.y + (-0.5));
        float _1392 = _1389 * (_1350.z + (-0.5));
        float _1399 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1357.x + (-0.5));
        float _1401 = _1399 * (_1357.y + (-0.5));
        float _1402 = _1399 * (_1357.z + (-0.5));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = _1370 * 0.5;
        float _1407 = _1380 * 0.5;
        float _1408 = _1390 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_711, _712, _713), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _3859 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1433 + 1.0))) + _1438) * _1403;
        float _1448 = _1371 * 0.5;
        float _1449 = _1381 * 0.5;
        float _1450 = _1391 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_711, _712, _713), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _3892 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1475 + 1.0))) + _1480) * _1404;
        float _1490 = _1372 * 0.5;
        float _1491 = _1382 * 0.5;
        float _1492 = _1392 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_711, _712, _713), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _3925 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1517 + 1.0))) + _1522) * _1405;
        _1539 = _1372;
        _1540 = _1371;
        _1541 = _1370;
        _1542 = _1382;
        _1543 = _1381;
        _1544 = _1380;
        _1545 = _1392;
        _1546 = _1391;
        _1547 = _1390;
        _1548 = _1405;
        _1549 = _1404;
        _1550 = _1403;
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
    }
    else
    {
        _1539 = _1232;
        _1540 = _1232;
        _1541 = _1232;
        _1542 = _1232;
        _1543 = _1232;
        _1544 = _1232;
        _1545 = _1232;
        _1546 = _1232;
        _1547 = _1232;
        _1548 = _1232;
        _1549 = _1232;
        _1550 = _1232;
        _1551 = 0.0;
        _1552 = 0.0;
        _1553 = 0.0;
    }
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1244)) + _1244;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1245)) + _1245;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1246)) + _1246;
    float _1586 = fma(_1565, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1563 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1565, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1563 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1565, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1563));
    float _1607 = _869 * 0.5;
    float _1608 = _870 * 0.5;
    float _1609 = _871 * 0.5;
    float _1610 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1613 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1616 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1650;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1623 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1231, _1235, _1238, _1241));
        float _1627 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1233, _1236, _1239, _1242));
        float _1631 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1234, _1237, _1240, _1243));
        float _1638 = dot(vec4(cbModelParam._m0[39u]), vec4(_1607, _1608, _1609, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1661;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1652 = dot(vec4(cbModelParam._m0[40u]), vec4(_1607, _1608, _1609, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1665 = (_1661 * cbModelParam._m0[1u].x) + (_1650 * (1.0 - cbModelParam._m0[1u].x));
    float _1675 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _714);
    float _1676 = isnan(_1675) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1675 : min(cbModelParam._m0[25u].z, _1675));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1725 = fma(_930, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _922)) + cbModelParam._m0[13u].w;
        float _1729 = fma(_930, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _922)) + cbModelParam._m0[14u].w;
        float _1733 = fma(_930, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _922)) + cbModelParam._m0[15u].w;
        float _1736 = fma(_871, cbModelParam._m0[13u].z, fma(_870, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _869));
        float _1739 = fma(_871, cbModelParam._m0[14u].z, fma(_870, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _869));
        float _1742 = fma(_871, cbModelParam._m0[15u].z, fma(_870, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _869));
        float _1770;
        if (_1736 > 0.0)
        {
            _1770 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1770 = frontier_phi_14_12_ladder;
        }
        float _1972;
        if (_1739 > 0.0)
        {
            _1972 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1972 = frontier_phi_23_19_ladder;
        }
        float _2215;
        if (_1742 > 0.0)
        {
            _2215 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2215 = frontier_phi_35_30_ladder;
        }
        float _2217 = isnan(_1972) ? _1770 : (isnan(_1770) ? _1972 : min(_1770, _1972));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1736) + _1725;
        float _2223 = (_2218 * _1739) + _1729;
        float _2224 = (_2218 * _1742) + _1733;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2227 = (-1.0) - _2225;
        float _2229 = _2225 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2224 > _2229) || ((_2224 < _2227) || ((_2223 > _2229) || ((_2223 < _2227) || ((_2222 < _2227) || (_2222 > _2229))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2348 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2224, cbModelParam._m0[9u].z, fma(_2223, cbModelParam._m0[9u].y, _2222 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2224, cbModelParam._m0[10u].z, fma(_2223, cbModelParam._m0[10u].y, _2222 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2224, cbModelParam._m0[11u].z, fma(_2223, cbModelParam._m0[11u].y, _2222 * cbModelParam._m0[11u].x))), _1676);
            frontier_phi_13_35_ladder = _2348.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2348.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2348.x * cbModelParam._m0[1u].y;
        }
        _1758 = frontier_phi_13_35_ladder_2;
        _1760 = frontier_phi_13_35_ladder_1;
        _1762 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1746 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_869, _870, _871), _1676);
        _1758 = _1746.x * cbModelParam._m0[1u].y;
        _1760 = _1746.y * cbModelParam._m0[1u].y;
        _1762 = _1746.z * cbModelParam._m0[1u].y;
    }
    float _1766 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _714);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1766 : min(cbModelParam._m0[25u].w, _1766));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1822 = fma(_930, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _922)) + cbModelParam._m0[21u].w;
        float _1826 = fma(_930, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _922)) + cbModelParam._m0[22u].w;
        float _1830 = fma(_930, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _922)) + cbModelParam._m0[23u].w;
        float _1833 = fma(_871, cbModelParam._m0[21u].z, fma(_870, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _869));
        float _1836 = fma(_871, cbModelParam._m0[22u].z, fma(_870, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _869));
        float _1839 = fma(_871, cbModelParam._m0[23u].z, fma(_870, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _869));
        float _1977;
        if (_1833 > 0.0)
        {
            _1977 = abs((1.0 - _1822) / _1833);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1822 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1977 = frontier_phi_25_21_ladder;
        }
        float _2242;
        if (_1836 > 0.0)
        {
            _2242 = abs((1.0 - _1826) / _1836);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1826 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2242 = frontier_phi_37_32_ladder;
        }
        float _2447;
        if (_1839 > 0.0)
        {
            _2447 = abs((1.0 - _1830) / _1839);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1830 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2447 = frontier_phi_46_43_ladder;
        }
        float _2449 = isnan(_2242) ? _1977 : (isnan(_1977) ? _2242 : min(_1977, _2242));
        float _2450 = isnan(_2447) ? _2449 : (isnan(_2449) ? _2447 : min(_2449, _2447));
        float _2454 = (_2450 * _1833) + _1822;
        float _2455 = (_2450 * _1836) + _1826;
        float _2456 = (_2450 * _1839) + _1830;
        float _2457 = _2450 * 9.9999997473787516355514526367188e-05;
        float _2458 = (-1.0) - _2457;
        float _2460 = _2457 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2456 > _2460) || ((_2456 < _2458) || ((_2455 > _2460) || ((_2455 < _2458) || ((_2454 < _2458) || (_2454 > _2460))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2655 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2456, cbModelParam._m0[17u].z, fma(_2455, cbModelParam._m0[17u].y, _2454 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2456, cbModelParam._m0[18u].z, fma(_2455, cbModelParam._m0[18u].y, _2454 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2456, cbModelParam._m0[19u].z, fma(_2455, cbModelParam._m0[19u].y, _2454 * cbModelParam._m0[19u].x))), _1767);
            frontier_phi_22_46_ladder = _2655.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2655.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2655.x * cbModelParam._m0[1u].z;
        }
        _1858 = frontier_phi_22_46_ladder_2;
        _1860 = frontier_phi_22_46_ladder_1;
        _1862 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1842 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_869, _870, _871), _1767);
        _1858 = _1842.x * cbModelParam._m0[1u].z;
        _1860 = _1842.y * cbModelParam._m0[1u].z;
        _1862 = _1842.z * cbModelParam._m0[1u].z;
    }
    float _1874 = ((((1.0 - _890) * ((_877 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_890 * _877)) * _861;
    float _1875 = _1874 * ((cbModelParam._m0[1u].w * (_1858 - _1758)) + _1758);
    float _1876 = _1874 * ((cbModelParam._m0[1u].w * (_1860 - _1760)) + _1760);
    float _1877 = _1874 * ((cbModelParam._m0[1u].w * (_1862 - _1762)) + _1762);
    float _1880 = fma(_1877, cbSceneParam._m0[89u].z, fma(_1876, cbSceneParam._m0[89u].y, _1875 * cbSceneParam._m0[89u].x));
    float _1883 = fma(_1877, cbSceneParam._m0[90u].z, fma(_1876, cbSceneParam._m0[90u].y, _1875 * cbSceneParam._m0[90u].x));
    float _1886 = fma(_1877, cbSceneParam._m0[91u].z, fma(_1876, cbSceneParam._m0[91u].y, _1875 * cbSceneParam._m0[91u].x));
    uvec4 _1896 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1898 = _1896.x * 14u;
    uint _1899 = _1898 + 13u;
    float _1906 = _861 + (-1.0);
    float _1911 = (cbLight._m0[_1899].x * _1906) + 1.0;
    float _1912 = (cbLight._m0[_1899].y * _1906) + 1.0;
    float _1913 = (cbLight._m0[_1899].z * _1906) + 1.0;
    float _1914 = (cbLight._m0[_1899].w * _1906) + 1.0;
    uint _1915 = _1898 + 5u;
    float _1921 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
    uint _1925 = _1898 + 4u;
    float _1931 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
    uint _1935 = _1898 | 1u;
    float _1946 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_711, _712, _713));
    float _1949 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_711, _712, _713));
    float _4061 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _4072 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1954 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
    float _1956 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.3183098733425140380859375;
    float _1963 = ((cbLight._m0[_1915].x * _1921) * _1956) + ((cbLight._m0[_1925].x * _1931) * _1954);
    float _1964 = ((_1921 * cbLight._m0[_1915].y) * _1956) + ((_1931 * cbLight._m0[_1925].y) * _1954);
    float _1965 = ((_1921 * cbLight._m0[_1915].z) * _1956) + ((_1931 * cbLight._m0[_1925].z) * _1954);
    uvec4 _1969 = floatBitsToUint(cbLight._m0[_1898 + 12u]);
    bool _1971 = _1969.x == 0u;
    float _1982;
    float _1984;
    float _1986;
    if (_1971)
    {
        _1982 = _1963;
        _1984 = _1964;
        _1986 = _1965;
    }
    else
    {
        uint _1990 = _1898 + 6u;
        float _2006 = (dot(vec3(cbLight._m0[_1898 + 2u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2007 = _2006 * _2006;
        float _4083 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2008 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2009 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
        _1982 = (((cbLight._m0[_1990].x * 0.3183098733425140380859375) * _2008) * _2009) + _1963;
        _1984 = (((cbLight._m0[_1990].y * 0.3183098733425140380859375) * _2008) * _2009) + _1964;
        _1986 = (((cbLight._m0[_1990].z * 0.3183098733425140380859375) * _2008) * _2009) + _1965;
    }
    bool _1989 = _1969.y == 0u;
    float _2027;
    float _2029;
    float _2031;
    if (_1989)
    {
        _2027 = _1982;
        _2029 = _1984;
        _2031 = _1986;
    }
    else
    {
        uint _2186 = _1898 + 7u;
        float _2202 = (dot(vec3(cbLight._m0[_1898 + 3u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4099 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2205 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _2027 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _1982;
        _2029 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _1984;
        _2031 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _1986;
    }
    uint _2034 = _1898 + 8u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _714) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1898].x + _790;
    float _2050 = cbLight._m0[_1898].y + _791;
    float _2051 = cbLight._m0[_1898].z + _792;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_1898].xyz));
    float _4115 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _2063 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _2064 = dot(vec3(_711, _712, _713), vec3(_2056, _2057, _2058));
    float _4137 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_2056, _2057, _2058));
    float _4148 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2048 * _2048;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2087 = (exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2088 = 1.0 - _2048;
    float _2099 = (0.5 / (((_2063 * ((_2062 * _2088) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2088) + _2048) * _2062))) * _2062;
    float _4159 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2101 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    uint _2112 = _1898 + 9u;
    float _2123 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _714) * 0.949999988079071044921875);
    float _2124 = _2123 * _2123;
    float _2125 = cbLight._m0[_1935].x + _790;
    float _2126 = cbLight._m0[_1935].y + _791;
    float _2127 = cbLight._m0[_1935].z + _792;
    float _2131 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
    float _2132 = _2131 * _2125;
    float _2133 = _2131 * _2126;
    float _2134 = _2131 * _2127;
    float _2135 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_1935].xyz));
    float _4170 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2139 = dot(vec3(_711, _712, _713), vec3(_2132, _2133, _2134));
    float _4181 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2143 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_2132, _2133, _2134));
    float _4192 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2147 = _2124 * _2124;
    float _2151 = ((_2142 * _2142) * (_2147 + (-1.0))) + 1.0;
    float _2160 = (exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2161 = 1.0 - _2124;
    float _2171 = (0.5 / (((_2063 * ((_2138 * _2161) + _2124)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2161) + _2124) * _2138))) * _2138;
    float _4203 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2147 / ((_2151 * _2151) * 3.141590118408203125));
    float _2183 = (((_2160 * cbLight._m0[_2112].x) * _2173) * _1921) + (((_2087 * cbLight._m0[_2034].x) * _2101) * _1931);
    float _2184 = (((_2160 * cbLight._m0[_2112].y) * _2173) * _1921) + (((_2087 * cbLight._m0[_2034].y) * _2101) * _1931);
    float _2185 = (((_2160 * cbLight._m0[_2112].z) * _2173) * _1921) + (((_2087 * cbLight._m0[_2034].z) * _2101) * _1931);
    float _2247;
    float _2249;
    float _2251;
    if (_1971)
    {
        _2247 = _2183;
        _2249 = _2184;
        _2251 = _2185;
    }
    else
    {
        uint _2253 = _1898 + 2u;
        uint _2257 = _1898 + 10u;
        float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _714) * 0.949999988079071044921875);
        float _2272 = _2271 * _2271;
        float _2273 = cbLight._m0[_2253].x + _790;
        float _2274 = cbLight._m0[_2253].y + _791;
        float _2275 = cbLight._m0[_2253].z + _792;
        float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
        float _2280 = _2279 * _2273;
        float _2281 = _2279 * _2274;
        float _2282 = _2279 * _2275;
        float _2283 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2253].xyz));
        float _4214 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2287 = dot(vec3(_711, _712, _713), vec3(_2280, _2281, _2282));
        float _4225 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2291 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2280, _2281, _2282));
        float _4236 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2295 = _2272 * _2272;
        float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
        float _2308 = (exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2309 = 1.0 - _2272;
        float _2319 = (0.5 / (((_2063 * ((_2286 * _2309) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2309) + _2272) * _2286))) * _2286;
        float _4247 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2321 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
        float _2322 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
        _2247 = (((_2308 * cbLight._m0[_2257].x) * _2321) * _2322) + _2183;
        _2249 = (((_2308 * cbLight._m0[_2257].y) * _2321) * _2322) + _2184;
        _2251 = (((_2308 * cbLight._m0[_2257].z) * _2321) * _2322) + _2185;
    }
    float _2357;
    float _2359;
    float _2361;
    if (_1989)
    {
        _2357 = _2247;
        _2359 = _2249;
        _2361 = _2251;
    }
    else
    {
        uint _2368 = _1898 + 3u;
        uint _2372 = _1898 + 11u;
        float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _714) * 0.949999988079071044921875);
        float _2387 = _2386 * _2386;
        float _2388 = cbLight._m0[_2368].x + _790;
        float _2389 = cbLight._m0[_2368].y + _791;
        float _2390 = cbLight._m0[_2368].z + _792;
        float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
        float _2395 = _2394 * _2388;
        float _2396 = _2394 * _2389;
        float _2397 = _2394 * _2390;
        float _2398 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2368].xyz));
        float _4263 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2402 = dot(vec3(_711, _712, _713), vec3(_2395, _2396, _2397));
        float _4274 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2406 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2395, _2396, _2397));
        float _4285 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2410 = _2387 * _2387;
        float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
        float _2423 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2424 = 1.0 - _2387;
        float _2434 = (0.5 / (((_2063 * ((_2401 * _2424) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2424) + _2387) * _2401))) * _2401;
        float _4296 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2436 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
        float _2437 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _2357 = (((_2423 * cbLight._m0[_2372].x) * _2436) * _2437) + _2247;
        _2359 = (((_2423 * cbLight._m0[_2372].y) * _2436) * _2437) + _2249;
        _2361 = (((_2423 * cbLight._m0[_2372].z) * _2436) * _2437) + _2251;
    }
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    if (_1896.y == 0u)
    {
        float _2512 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2513 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2512;
        float _2514 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2512;
        float _2515 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2512;
        uvec4 _2527 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2528 = _2527.x;
        uint _2539 = uint((float(_2527.y) * floor(float(uint(cbSceneParam._m0[85u].y * _799) / _2528))) + floor(float(uint(cbSceneParam._m0[85u].x * _798) / _2528)));
        float _2549 = (log2(_2515 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2550 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        uint _2553 = uint(isnan(14.0) ? _2550 : (isnan(_2550) ? 14.0 : min(_2550, 14.0)));
        uvec4 _2558 = texelFetch(g_lightClusterGridBuffer, int(((_2553 << 2u) + (_2539 << 6u)) >> 2u));
        uint _2559 = _2558.x;
        uint _2560 = _2527.z;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((((1u << ((_2560 >> 4u) & 15u)) + 4294967295u) & _2559) == 0u) || ((_2560 & 240u) == 0u))
        {
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
        }
        else
        {
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            uint _2811 = 0u;
            uint _2820;
            bool _2821;
            for (;;)
            {
                _2820 = texelFetch(g_lightClassification, int((((_2553 << 5u) + (_2539 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                _2821 = _2820 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2821)
                {
                    frontier_phi_61_pred = _2805;
                    frontier_phi_61_pred_1 = _2810;
                    frontier_phi_61_pred_2 = _2809;
                    frontier_phi_61_pred_3 = _2808;
                    frontier_phi_61_pred_4 = _2807;
                    frontier_phi_61_pred_5 = _2806;
                }
                else
                {
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    uint _2935;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2820;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    for (;;)
                    {
                        uint _2939 = uint(findLSB(_2935)) + (_2811 << 5u);
                        uint _2936 = (_2935 + 4294967295u) & _2935;
                        uint _2941 = _2939 * 48u;
                        vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 3u)).x));
                        uint _2961 = (_2939 * 48u) + 4u;
                        vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 3u)).x));
                        uint _2980 = (_2939 * 48u) + 8u;
                        vec3 _2991 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2980)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 2u)).x));
                        float _2995 = _2955.x - _2513;
                        float _2996 = _2955.y - _2514;
                        float _2997 = _2955.z - _2515;
                        float _2998 = dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997));
                        float _3001 = inversesqrt(_2998);
                        float _3002 = _3001 * _2995;
                        float _3003 = _3001 * _2996;
                        float _3004 = _3001 * _2997;
                        float _3005 = dot(vec3(_817, _820, _823), vec3(_3002, _3003, _3004));
                        float _3010 = 1.0 - (_2998 * _2955.w);
                        float _4322 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3011 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3012 = sqrt(_2998) * _2974.w;
                        float _3015 = 1.39999997615814208984375 / (_3012 + 1.39999997615814208984375);
                        float _3016 = _3015 * _3015;
                        float _3019 = ((1.0 - _3016) * _3005) + _3016;
                        float _3022 = _3012 * _3012;
                        float _3026 = ((isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0))) * _3011) / ((_3022 * 0.699999988079071044921875) + 1.0);
                        float _3030 = (-0.0) - _2513;
                        float _3031 = (-0.0) - _2514;
                        float _3032 = (-0.0) - _2515;
                        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
                        float _3037 = _3036 * _3030;
                        float _3038 = _3036 * _3031;
                        float _3039 = _3036 * _3032;
                        float _3047 = exp2(log2(1.0 / ((_3022 * 3.5) + 5.0)) * 0.25);
                        float _3048 = 1.0 - _877;
                        float _3055 = sqrt(1.0 - ((1.0 - (_3048 * _3048)) * (1.0 - (_3047 * _3047))));
                        float _3056 = _3055 * _3055;
                        float _3057 = _3056 * _3056;
                        float _3058 = _3037 + _3002;
                        float _3059 = _3038 + _3003;
                        float _3060 = _3039 + _3004;
                        float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
                        float _3068 = dot(vec3(_817, _820, _823), vec3(_3037, _3038, _3039));
                        float _4338 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3072 = dot(vec3(_817, _820, _823), vec3(_3064 * _3058, _3064 * _3059, _3064 * _3060));
                        float _4349 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3079 = ((_3075 * _3075) * (_3057 + (-1.0))) + 1.0;
                        float _3080 = _3015 * _3056;
                        float _3081 = _3080 * _3080;
                        float _3084 = ((1.0 - _3081) * _3005) + _3081;
                        float _4360 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3085 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3086 = 1.0 - _3056;
                        float _3096 = (0.5 / (((_3085 * ((_3071 * _3086) + _3056)) + 9.9999999392252902907785028219223e-09) + (((_3085 * _3086) + _3056) * _3071))) * _3085;
                        float _4371 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3107 = (((_3057 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3079 * _3079) * ((_3022 * 2.1991131305694580078125) + 3.141590118408203125))) * _3011;
                        _2864 = (_3026 * _2974.x) + _2932;
                        _2865 = (_3026 * _2974.y) + _2933;
                        _2866 = (_3026 * _2974.z) + _2934;
                        _2861 = (_3107 * _2991.x) + _2929;
                        _2862 = (_3107 * _2991.y) + _2930;
                        _2863 = (_3107 * _2991.z) + _2931;
                        if (_2936 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2936;
                        }
                    }
                    frontier_phi_61_pred = _2861;
                    frontier_phi_61_pred_1 = _2866;
                    frontier_phi_61_pred_2 = _2865;
                    frontier_phi_61_pred_3 = _2864;
                    frontier_phi_61_pred_4 = _2863;
                    frontier_phi_61_pred_5 = _2862;
                }
                _2661 = frontier_phi_61_pred;
                _2671 = frontier_phi_61_pred_1;
                _2669 = frontier_phi_61_pred_2;
                _2667 = frontier_phi_61_pred_3;
                _2665 = frontier_phi_61_pred_4;
                _2663 = frontier_phi_61_pred_5;
                uint _2812 = _2811 + 1u;
                if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2805 = _2661;
                    _2806 = _2663;
                    _2807 = _2665;
                    _2808 = _2667;
                    _2809 = _2669;
                    _2810 = _2671;
                    _2811 = _2812;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
        }
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.z;
        uint _2677 = (_2675 >> 8u) & 15u;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        if (((4294967295u << _2677) & _2559) == 0u)
        {
            _2773 = _2660;
            _2775 = _2662;
            _2777 = _2664;
            _2779 = _2666;
            _2781 = _2668;
            _2783 = _2670;
        }
        else
        {
            float _2798 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
            float _2799 = _2798 * _2513;
            float _2800 = _2798 * _2514;
            float _2801 = _2798 * _2515;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2677 < ((_2675 >> 12u) & 15u))
            {
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2912 = _2660;
                float _2913 = _2662;
                float _2914 = _2664;
                float _2915 = _2666;
                float _2916 = _2668;
                float _2917 = _2670;
                uint _2918 = _2677;
                uint _2927;
                bool _2928;
                for (;;)
                {
                    _2927 = texelFetch(g_lightClassification, int((((_2553 << 5u) + (_2539 << 9u)) + (_2918 << 2u)) >> 2u)).x;
                    _2928 = _2927 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2928)
                    {
                        frontier_phi_67_pred = _2915;
                        frontier_phi_67_pred_1 = _2916;
                        frontier_phi_67_pred_2 = _2917;
                        frontier_phi_67_pred_3 = _2914;
                        frontier_phi_67_pred_4 = _2913;
                        frontier_phi_67_pred_5 = _2912;
                    }
                    else
                    {
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        float _3127 = _2914;
                        float _3128 = _2915;
                        float _3129 = _2916;
                        float _3130 = _2917;
                        uint _3131 = _2927;
                        uint _3132;
                        vec4 _3157;
                        float _3158;
                        vec4 _3173;
                        vec3 _3185;
                        vec4 _3200;
                        vec4 _3215;
                        float _3261;
                        bool _3262;
                        for (;;)
                        {
                            uint _3142 = ((_2918 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3131));
                            _3132 = (_3131 + 4294967295u) & _3131;
                            uint _3144 = _3142 * 40u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            _3158 = _3157.w;
                            uint _3160 = (_3142 * 40u) + 4u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3175 = (_3142 * 40u) + 8u;
                            _3185 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x));
                            uint _3187 = (_3142 * 40u) + 16u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3202 = (_3142 * 40u) + 20u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3217 = (_3142 * 40u) + 24u;
                            vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3236 = (_3142 * 40u) + 28u;
                            vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            _3261 = fma(_2515, _3249.z, fma(_2514, _3249.y, _3249.x * _2513)) + _3249.w;
                            _3262 = !((fma(_2515, _3230.z, fma(_2514, _3230.y, _3230.x * _2513)) + _3230.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3262)
                            {
                                float _3289 = _3157.x - _2513;
                                float _3290 = _3157.y - _2514;
                                float _3291 = _3157.z - _2515;
                                float _3292 = dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291));
                                float _3295 = inversesqrt(_3292);
                                float _3296 = _3295 * _3289;
                                float _3297 = _3295 * _3290;
                                float _3298 = _3295 * _3291;
                                float _3302 = 1.0 - (_3292 / (_3158 * _3158));
                                float _4382 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3303 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3307 = sqrt(_3292) * _3173.w;
                                float _3309 = 1.39999997615814208984375 / (_3307 + 1.39999997615814208984375);
                                float _3310 = _3309 * _3309;
                                float _3313 = ((1.0 - _3310) * dot(vec3(_3296, _3297, _3298), vec3(_817, _820, _823))) + _3310;
                                float _3316 = _3307 * _3307;
                                float _3320 = (fma(_2515, _3200.z, fma(_2514, _3200.y, _3200.x * _2513)) + _3200.w) / _3261;
                                float _3321 = (fma(_2515, _3215.z, fma(_2514, _3215.y, _3215.x * _2513)) + _3215.w) / _3261;
                                float _3325 = 1.0 - dot(vec2(_3320, _3321), vec2(_3320, _3321));
                                float _4398 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3327 = _3326 * (((isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))) * _3303) / ((_3316 * 0.699999988079071044921875) + 1.0));
                                float _3339 = exp2(log2(1.0 / ((_3316 * 3.5) + 5.0)) * 0.25);
                                float _3340 = 1.0 - _877;
                                float _3347 = sqrt(1.0 - ((1.0 - (_3340 * _3340)) * (1.0 - (_3339 * _3339))));
                                float _3348 = _3347 * _3347;
                                float _3349 = _3348 * _3348;
                                float _3350 = _3296 - _2799;
                                float _3351 = _3297 - _2800;
                                float _3352 = _3298 - _2801;
                                float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                                float _3360 = dot(vec3(_817, _820, _823), vec3((-0.0) - _2799, (-0.0) - _2800, (-0.0) - _2801));
                                float _4409 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3363 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3364 = dot(vec3(_817, _820, _823), vec3(_3356 * _3350, _3356 * _3351, _3356 * _3352));
                                float _4420 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3367 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3371 = ((_3367 * _3367) * (_3349 + (-1.0))) + 1.0;
                                float _3372 = _3309 * _3348;
                                float _3373 = _3372 * _3372;
                                float _3379 = ((1.0 - _3373) * dot(vec3(_817, _820, _823), vec3(_3296, _3297, _3298))) + _3373;
                                float _4431 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3380 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3381 = 1.0 - _3348;
                                float _3391 = (0.5 / (((_3380 * ((_3363 * _3381) + _3348)) + 9.9999999392252902907785028219223e-09) + (((_3380 * _3381) + _3348) * _3363))) * _3380;
                                float _4442 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3401 = (_3326 * _3303) * (((_3349 * 3.1415927410125732421875) * (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) / ((_3371 * _3371) * ((_3316 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3401 * _3185.x;
                                frontier_phi_73_pred_1 = _3401 * _3185.y;
                                frontier_phi_73_pred_2 = _3327 * _3173.z;
                                frontier_phi_73_pred_3 = _3327 * _3173.y;
                                frontier_phi_73_pred_4 = _3327 * _3173.x;
                                frontier_phi_73_pred_5 = _3401 * _3185.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3405 = frontier_phi_73_pred;
                            _3406 = frontier_phi_73_pred_1;
                            _3410 = frontier_phi_73_pred_2;
                            _3409 = frontier_phi_73_pred_3;
                            _3408 = frontier_phi_73_pred_4;
                            _3407 = frontier_phi_73_pred_5;
                            _3115 = _3408 + _3128;
                            _3116 = _3409 + _3129;
                            _3117 = _3410 + _3130;
                            _3112 = _3405 + _3125;
                            _3113 = _3406 + _3126;
                            _3114 = _3407 + _3127;
                            if (_3132 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3132;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3115;
                        frontier_phi_67_pred_1 = _3116;
                        frontier_phi_67_pred_2 = _3117;
                        frontier_phi_67_pred_3 = _3114;
                        frontier_phi_67_pred_4 = _3113;
                        frontier_phi_67_pred_5 = _3112;
                    }
                    _2780 = frontier_phi_67_pred;
                    _2782 = frontier_phi_67_pred_1;
                    _2784 = frontier_phi_67_pred_2;
                    _2778 = frontier_phi_67_pred_3;
                    _2776 = frontier_phi_67_pred_4;
                    _2774 = frontier_phi_67_pred_5;
                    uint _2919 = _2918 + 1u;
                    if (_2919 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2912 = _2774;
                        _2913 = _2776;
                        _2914 = _2778;
                        _2915 = _2780;
                        _2916 = _2782;
                        _2917 = _2784;
                        _2918 = _2919;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2782;
                frontier_phi_55_56_ladder_1 = _2784;
                frontier_phi_55_56_ladder_2 = _2780;
                frontier_phi_55_56_ladder_3 = _2778;
                frontier_phi_55_56_ladder_4 = _2776;
                frontier_phi_55_56_ladder_5 = _2774;
            }
            else
            {
                frontier_phi_55_56_ladder = _2668;
                frontier_phi_55_56_ladder_1 = _2670;
                frontier_phi_55_56_ladder_2 = _2666;
                frontier_phi_55_56_ladder_3 = _2664;
                frontier_phi_55_56_ladder_4 = _2662;
                frontier_phi_55_56_ladder_5 = _2660;
            }
            _2773 = frontier_phi_55_56_ladder_5;
            _2775 = frontier_phi_55_56_ladder_4;
            _2777 = frontier_phi_55_56_ladder_3;
            _2779 = frontier_phi_55_56_ladder_2;
            _2781 = frontier_phi_55_56_ladder;
            _2783 = frontier_phi_55_56_ladder_1;
        }
        float _2788 = isnan(1.0) ? _861 : (isnan(_861) ? 1.0 : min(_861, 1.0));
        _2572 = (_2788 * _2779) + _2027;
        _2574 = (_2788 * _2781) + _2029;
        _2576 = (_2788 * _2783) + _2031;
        _2578 = ((_2773 * 0.039999999105930328369140625) * _2788) + _2357;
        _2580 = ((_2775 * 0.039999999105930328369140625) * _2788) + _2359;
        _2582 = ((_2777 * 0.039999999105930328369140625) * _2788) + _2361;
    }
    else
    {
        _2572 = _2027;
        _2574 = _2029;
        _2576 = _2031;
        _2578 = _2357;
        _2580 = _2359;
        _2582 = _2361;
    }
    float _4458 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4469 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4480 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    uint _2602 = _245 + 6u;
    float _2610 = _798 / cbSceneParam._m0[86u].x;
    float _2611 = _799 / cbSceneParam._m0[86u].y;
    vec4 _2625 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2610, _2611, (log2((isnan(cbSceneParam._m0[77u].w) ? _732 : (isnan(_732) ? cbSceneParam._m0[77u].w : min(_732, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2627 = _2625.x;
    float _2628 = _2625.y;
    float _2629 = _2625.z;
    float _2630 = _2625.w;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    if (_732 > cbSceneParam._m0[78u].w)
    {
        float _2685 = isnan(_732) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _732 : min(cbSceneParam._m0[80u].w, _732));
        float _2686 = _2685 / _732;
        float _2697 = _2686 * _783;
        float _2698 = _784 * _2686;
        float _2699 = (-0.0) - _2698;
        float _2701 = _2686 * _785;
        float _2703 = (cbSceneParam._m0[77u].w * _2699) / _2685;
        float _2704 = _2703 + cbSceneParam._m0[79u].w;
        float _2705 = cbSceneParam._m0[79u].w - _2698;
        float _2711 = sqrt(((_2697 * _2697) + (_2698 * _2698)) + (_2701 * _2701));
        float _2714 = (1.0 - (cbSceneParam._m0[77u].w / _2685)) * _2711;
        float _2719 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2721 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2874;
        if (abs((_2699 - _2703) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2874 = ((((_2704 > 0.0) ? exp2(_2719 * _2704) : (2.0 - exp2(_2721 * _2704))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2714;
        }
        else
        {
            float _2834 = 1.0 / cbSceneParam._m0[80u].x;
            float _2835 = isnan(_2705) ? _2704 : (isnan(_2704) ? _2705 : max(_2704, _2705));
            float _2836 = isnan(_2705) ? _2704 : (isnan(_2704) ? _2705 : min(_2704, _2705));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            float _2846 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : min(_2836, 0.0));
            _2874 = ((abs(_2711 / _2699) * cbSceneParam._m0[80u].y) * ((((_2845 - _2846) * 2.0) - ((exp2(_2719 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0)))) - exp2(_2719 * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0))))) * _2834)) - ((exp2(_2721 * _2845) - exp2(_2721 * _2846)) * _2834))) + (_2714 * cbSceneParam._m0[80u].z);
        }
        vec4 _2876 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2610, _2611, 1.0), 0.0);
        float _2885 = exp2((_2874 * (-1.44269502162933349609375)) * (1.0 - _2876.w));
        float _2886 = log2(_2885);
        float _2902 = log2(_2630);
        _2723 = (exp2(_2902 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].x)) * _2876.x) / cbSceneParam._m0[78u].x)) + _2627;
        _2725 = (exp2(_2902 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].y)) * _2876.y) / cbSceneParam._m0[78u].y)) + _2628;
        _2727 = (exp2(_2902 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].z)) * _2876.z) / cbSceneParam._m0[78u].z)) + _2629;
        _2729 = _2885 * _2630;
    }
    else
    {
        _2723 = _2627;
        _2725 = _2628;
        _2727 = _2629;
        _2729 = _2630;
    }
    float _2741 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2742 = _2741 == 3.0;
    float _2743 = log2(_2729);
    float _2750 = exp2(_2743 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2572 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _861))) + ((_2578 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1665)) * cbPerFrame._m0[3u].x));
    float _2751 = exp2(_2743 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2574 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _861))) + ((_2580 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1665)) * cbPerFrame._m0[3u].x));
    float _2752 = exp2(_2743 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2576 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _861))) + ((_2582 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1665)) * cbPerFrame._m0[3u].x));
    float _2761 = (_2741 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2761 * (_2742 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2723)));
    SV_Target.y = _2761 * (_2742 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2725)));
    SV_Target.z = _2761 * (_2742 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2727)));
    SV_Target.w = cbInstanceData._m0[_2602].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2602].w;
}


