#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1171;
float _3532;
float _3533;
float _3534;
float _3535;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].z) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3544 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _393 = (_386 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _394 = (_386 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _395 = (_386 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _434 = _430.z;
    float _443 = ((_413.z - _434) * _386) + _434;
    float _446 = ((((_413.x - _432) * _386) + _432) * 2.0) + (-1.0);
    float _448 = ((((_413.y - _433) * _386) + _433) * 2.0) + (-1.0);
    float _449 = dot(vec2(_446, _448), vec2(_446, _448));
    float _3555 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _454 = sqrt(1.0 - (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _482 = (((_470.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _446;
    float _483 = (((_470.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _448;
    float _486 = fma(_454, _220, fma(_483, _227, _482 * _213));
    float _489 = fma(_454, _221, fma(_483, _228, _482 * _214));
    float _492 = fma(_454, _222, fma(_483, _229, _482 * _215));
    float _496 = inversesqrt(dot(vec3(_486, _489, _492), vec3(_486, _489, _492)));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _525 = _523.x;
    float _526 = 1.0 - _525;
    float _532 = (cbMtdParam._m0[19u].x + dot(vec4(_496 * _486, _496 * _489, _496 * _492, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_525 - _526) * cbMtdParam._m0[24u].w) + _526) * cbMtdParam._m0[21u].z);
    float _3566 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _540 = (_533 * (cbMtdParam._m0[17u].x - _393)) + _393;
    float _541 = (_533 * (cbMtdParam._m0[17u].y - _394)) + _394;
    float _542 = (_533 * (cbMtdParam._m0[17u].z - _395)) + _395;
    float _546 = (cbMtdParam._m0[19u].w * (_470.z - _443)) + _443;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _566 = (_559.x * 2.0) + (-1.0);
    float _567 = (_559.y * 2.0) + (-1.0);
    float _568 = dot(vec2(_566, _567), vec2(_566, _567));
    float _3577 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _576 = ((_559.z - _546) * _533) + _546;
    float _586 = ((sqrt(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) - _454) * _533) + _454;
    float _589 = (((_566 - _482) * _533) + _482) + (cbMtdParam._m0[21u].x * _482);
    float _590 = (((_567 - _483) * _533) + _483) + (cbMtdParam._m0[21u].x * _483);
    float _594 = cbMtdParam._m0[22u].x + _470.w;
    float _597 = fma(_586, _220, fma(_590, _227, _589 * _213));
    float _600 = fma(_586, _221, fma(_590, _228, _589 * _214));
    float _603 = fma(_586, _222, fma(_590, _229, _589 * _215));
    float _607 = inversesqrt(dot(vec3(_597, _600, _603), vec3(_597, _600, _603)));
    float _608 = _607 * _597;
    float _609 = _607 * _600;
    float _610 = _607 * _603;
    float _3588 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _611 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3610 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3621 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3632 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _629 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _681 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _671);
    float _682 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _671);
    float _683 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _671);
    float _687 = inversesqrt(dot(vec3(_681, _682, _683), vec3(_681, _682, _683)));
    float _688 = _681 * _687;
    float _689 = _682 * _687;
    float _690 = _683 * _687;
    vec4 _695 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _697 = _695.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _851 = sqrt(((_681 * _681) + (_682 * _682)) + (_683 * _683));
        float _857 = (cbMatDynParam._m0[5u].x * _851) + cbMatDynParam._m0[5u].y;
        float _3643 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _862 = (cbMatDynParam._m0[5u].z * _851) + cbMatDynParam._m0[5u].w;
        float _3654 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) - _858)) + _858) < ((_697 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _708 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _709 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _727 = fma(_610, cbSceneParam._m0[5u].z, fma(_609, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _608));
    float _730 = fma(_610, cbSceneParam._m0[6u].z, fma(_609, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _608));
    float _733 = fma(_610, cbSceneParam._m0[7u].z, fma(_609, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _608));
    uint _746 = _232 + 9u;
    uint _747 = _746 + uint(cbMatDynParam._m0[0u].w);
    float _753 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_747].x;
    float _754 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_747].y;
    float _755 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_747].z;
    float _3665 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    vec4 _767 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _708, cbSceneParam._m0[86u].y * _709));
    float _771 = ((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * TEXCOORD_5.w) * _767.x;
    float _772 = dot(vec3(_608, _609, _610), vec3(_688, _689, _690));
    float _775 = _772 * 2.0;
    float _779 = (_775 * _608) - _688;
    float _780 = (_775 * _609) - _689;
    float _781 = (_775 * _610) - _690;
    float _785 = abs(dot(vec3(_688, _689, _690), vec3(_608, _609, _610)));
    float _3698 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _787 = sqrt(_611);
    float _800 = exp2((_787 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_787 * 3.0));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1170;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _895 = fma(_840, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _832));
        float _899 = fma(_840, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _832));
        float _903 = fma(_840, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _832));
        float _928 = _832 + _608;
        float _929 = _836 + _609;
        float _930 = _840 + _610;
        float _940 = fma(_930, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928)) - _895;
        float _941 = fma(_930, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928)) - _899;
        float _942 = fma(_930, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928)) - _903;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_895 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_899 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[34u].z) + ((((((_903 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _998 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_964.x + (-0.5));
        float _1000 = _998 * (_964.y + (-0.5));
        float _1001 = _998 * (_964.z + (-0.5));
        float _1008 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_971.x + (-0.5));
        float _1010 = _1008 * (_971.y + (-0.5));
        float _1011 = _1008 * (_971.z + (-0.5));
        float _1018 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_978.x + (-0.5));
        float _1020 = _1018 * (_978.y + (-0.5));
        float _1021 = _1018 * (_978.z + (-0.5));
        float _1028 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_985.x + (-0.5));
        float _1030 = _1028 * (_985.y + (-0.5));
        float _1031 = _1028 * (_985.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1052 = (dot(vec3(_608, _609, _610), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1062 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3746 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1064 + 1.0))) + _1069) * _1032;
        float _1079 = _1000 * 0.5;
        float _1080 = _1010 * 0.5;
        float _1081 = _1020 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_608, _609, _610), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3779 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1106 + 1.0))) + _1111) * _1033;
        float _1121 = _1001 * 0.5;
        float _1122 = _1011 * 0.5;
        float _1123 = _1021 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_608, _609, _610), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3812 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1148 + 1.0))) + _1153) * _1034;
        _1170 = _1001;
        _1172 = _1000;
        _1173 = _999;
        _1174 = _1011;
        _1175 = _1010;
        _1176 = _1009;
        _1177 = _1021;
        _1178 = _1020;
        _1179 = _1019;
        _1180 = _1034;
        _1181 = _1033;
        _1182 = _1032;
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _1171;
        _1172 = _1171;
        _1173 = _1171;
        _1174 = _1171;
        _1175 = _1171;
        _1176 = _1171;
        _1177 = _1171;
        _1178 = _1171;
        _1179 = _1171;
        _1180 = _1171;
        _1181 = _1171;
        _1182 = _1171;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1213 = fma(_840, cbModelParam._m0[30u].z, fma(_836, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _832));
        float _1217 = fma(_840, cbModelParam._m0[31u].z, fma(_836, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _832));
        float _1221 = fma(_840, cbModelParam._m0[32u].z, fma(_836, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _832));
        float _1244 = _832 + _608;
        float _1245 = _836 + _609;
        float _1246 = _840 + _610;
        float _1256 = fma(_1246, cbModelParam._m0[30u].z, fma(_1245, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1244)) - _1213;
        float _1257 = fma(_1246, cbModelParam._m0[31u].z, fma(_1245, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1244)) - _1217;
        float _1258 = fma(_1246, cbModelParam._m0[32u].z, fma(_1245, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1244)) - _1221;
        float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
        float _1275 = ((_1262 * _1256) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1213 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1262 * _1257) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1217 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1262 * _1258) / cbModelParam._m0[35u].z) + ((((((_1221 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        float _1312 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1279.x + (-0.5));
        float _1314 = _1312 * (_1279.y + (-0.5));
        float _1315 = _1312 * (_1279.z + (-0.5));
        float _1322 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1286.x + (-0.5));
        float _1324 = _1322 * (_1286.y + (-0.5));
        float _1325 = _1322 * (_1286.z + (-0.5));
        float _1332 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1293.x + (-0.5));
        float _1334 = _1332 * (_1293.y + (-0.5));
        float _1335 = _1332 * (_1293.z + (-0.5));
        float _1342 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1300.x + (-0.5));
        float _1344 = _1342 * (_1300.y + (-0.5));
        float _1345 = _1342 * (_1300.z + (-0.5));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = _1313 * 0.5;
        float _1350 = _1323 * 0.5;
        float _1351 = _1333 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_608, _609, _610), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3875 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1376 + 1.0))) + _1381) * _1346;
        float _1391 = _1314 * 0.5;
        float _1392 = _1324 * 0.5;
        float _1393 = _1334 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_608, _609, _610), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _3908 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1418 + 1.0))) + _1423) * _1347;
        float _1433 = _1315 * 0.5;
        float _1434 = _1325 * 0.5;
        float _1435 = _1335 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_608, _609, _610), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _3941 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1460 + 1.0))) + _1465) * _1348;
        _1482 = _1315;
        _1483 = _1314;
        _1484 = _1313;
        _1485 = _1325;
        _1486 = _1324;
        _1487 = _1323;
        _1488 = _1335;
        _1489 = _1334;
        _1490 = _1333;
        _1491 = _1348;
        _1492 = _1347;
        _1493 = _1346;
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1171;
        _1483 = _1171;
        _1484 = _1171;
        _1485 = _1171;
        _1486 = _1171;
        _1487 = _1171;
        _1488 = _1171;
        _1489 = _1171;
        _1490 = _1171;
        _1491 = _1171;
        _1492 = _1171;
        _1493 = _1171;
        _1494 = 0.0;
        _1495 = 0.0;
        _1496 = 0.0;
    }
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1183)) + _1183;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1184)) + _1184;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1185)) + _1185;
    float _1529 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1507, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1532 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1507, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1535 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1507, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1506));
    float _1550 = _779 * 0.5;
    float _1551 = _780 * 0.5;
    float _1552 = _781 * 0.5;
    float _1553 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1556 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1559 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1593;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1566 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1170, _1174, _1177, _1180));
        float _1570 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1574 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1581 = dot(vec4(cbModelParam._m0[39u]), vec4(_1550, _1551, _1552, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1604;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1595 = dot(vec4(cbModelParam._m0[40u]), vec4(_1550, _1551, _1552, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1608 = (_1604 * cbModelParam._m0[1u].x) + (_1593 * (1.0 - cbModelParam._m0[1u].x));
    float _1618 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _611);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1618 : min(cbModelParam._m0[25u].z, _1618));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1667 = fma(_840, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _832)) + cbModelParam._m0[13u].w;
        float _1671 = fma(_840, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _832)) + cbModelParam._m0[14u].w;
        float _1675 = fma(_840, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _832)) + cbModelParam._m0[15u].w;
        float _1678 = fma(_781, cbModelParam._m0[13u].z, fma(_780, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779));
        float _1681 = fma(_781, cbModelParam._m0[14u].z, fma(_780, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779));
        float _1684 = fma(_781, cbModelParam._m0[15u].z, fma(_780, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779));
        float _1712;
        if (_1678 > 0.0)
        {
            _1712 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1712 = frontier_phi_17_15_ladder;
        }
        float _1913;
        if (_1681 > 0.0)
        {
            _1913 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1913 = frontier_phi_26_22_ladder;
        }
        float _2156;
        if (_1684 > 0.0)
        {
            _2156 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2156 = frontier_phi_38_33_ladder;
        }
        float _2158 = isnan(_1913) ? _1712 : (isnan(_1712) ? _1913 : min(_1712, _1913));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1678) + _1667;
        float _2164 = (_2159 * _1681) + _1671;
        float _2165 = (_2159 * _1684) + _1675;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2166;
        float _2170 = _2166 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 > _2170) || ((_2164 < _2168) || ((_2163 < _2168) || (_2163 > _2170))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2289 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2165, cbModelParam._m0[9u].z, fma(_2164, cbModelParam._m0[9u].y, _2163 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2165, cbModelParam._m0[10u].z, fma(_2164, cbModelParam._m0[10u].y, _2163 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2165, cbModelParam._m0[11u].z, fma(_2164, cbModelParam._m0[11u].y, _2163 * cbModelParam._m0[11u].x))), _1619);
            frontier_phi_16_38_ladder = _2289.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2289.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2289.x * cbModelParam._m0[1u].y;
        }
        _1700 = frontier_phi_16_38_ladder_2;
        _1702 = frontier_phi_16_38_ladder_1;
        _1704 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_779, _780, _781), _1619);
        _1700 = _1688.x * cbModelParam._m0[1u].y;
        _1702 = _1688.y * cbModelParam._m0[1u].y;
        _1704 = _1688.z * cbModelParam._m0[1u].y;
    }
    float _1708 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _611);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1708 : min(cbModelParam._m0[25u].w, _1708));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1763 = fma(_840, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _832)) + cbModelParam._m0[21u].w;
        float _1767 = fma(_840, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _832)) + cbModelParam._m0[22u].w;
        float _1771 = fma(_840, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _832)) + cbModelParam._m0[23u].w;
        float _1774 = fma(_781, cbModelParam._m0[21u].z, fma(_780, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779));
        float _1777 = fma(_781, cbModelParam._m0[22u].z, fma(_780, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779));
        float _1780 = fma(_781, cbModelParam._m0[23u].z, fma(_780, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779));
        float _1918;
        if (_1774 > 0.0)
        {
            _1918 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1918 = frontier_phi_28_24_ladder;
        }
        float _2183;
        if (_1777 > 0.0)
        {
            _2183 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2183 = frontier_phi_40_35_ladder;
        }
        float _2388;
        if (_1780 > 0.0)
        {
            _2388 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2388 = frontier_phi_49_46_ladder;
        }
        float _2390 = isnan(_2183) ? _1918 : (isnan(_1918) ? _2183 : min(_1918, _2183));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1774) + _1763;
        float _2396 = (_2391 * _1777) + _1767;
        float _2397 = (_2391 * _1780) + _1771;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2398;
        float _2401 = _2398 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2397 > _2401) || ((_2397 < _2399) || ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 < _2399) || (_2395 > _2401))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2596 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2397, cbModelParam._m0[17u].z, fma(_2396, cbModelParam._m0[17u].y, _2395 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2397, cbModelParam._m0[18u].z, fma(_2396, cbModelParam._m0[18u].y, _2395 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2397, cbModelParam._m0[19u].z, fma(_2396, cbModelParam._m0[19u].y, _2395 * cbModelParam._m0[19u].x))), _1709);
            frontier_phi_25_49_ladder = _2596.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2596.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2596.x * cbModelParam._m0[1u].z;
        }
        _1799 = frontier_phi_25_49_ladder_2;
        _1801 = frontier_phi_25_49_ladder_1;
        _1803 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_779, _780, _781), _1709);
        _1799 = _1783.x * cbModelParam._m0[1u].z;
        _1801 = _1783.y * cbModelParam._m0[1u].z;
        _1803 = _1783.z * cbModelParam._m0[1u].z;
    }
    float _1815 = ((((1.0 - _800) * ((_787 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_800 * _787)) * _771;
    float _1816 = _1815 * ((cbModelParam._m0[1u].w * (_1799 - _1700)) + _1700);
    float _1817 = _1815 * ((cbModelParam._m0[1u].w * (_1801 - _1702)) + _1702);
    float _1818 = _1815 * ((cbModelParam._m0[1u].w * (_1803 - _1704)) + _1704);
    float _1821 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1817, cbSceneParam._m0[89u].y, _1816 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1817, cbSceneParam._m0[90u].y, _1816 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1817, cbSceneParam._m0[91u].y, _1816 * cbSceneParam._m0[91u].x));
    uvec4 _1837 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1839 = _1837.x * 14u;
    uint _1840 = _1839 + 13u;
    float _1847 = _771 + (-1.0);
    float _1852 = (cbLight._m0[_1840].x * _1847) + 1.0;
    float _1853 = (cbLight._m0[_1840].y * _1847) + 1.0;
    float _1854 = (cbLight._m0[_1840].z * _1847) + 1.0;
    float _1855 = (cbLight._m0[_1840].w * _1847) + 1.0;
    uint _1856 = _1839 + 5u;
    float _1862 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1866 = _1839 + 4u;
    float _1872 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
    uint _1876 = _1839 | 1u;
    float _1887 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_608, _609, _610));
    float _1890 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_608, _609, _610));
    float _4077 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _4088 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1895 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.3183098733425140380859375;
    float _1897 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * 0.3183098733425140380859375;
    float _1904 = ((cbLight._m0[_1856].x * _1862) * _1897) + ((cbLight._m0[_1866].x * _1872) * _1895);
    float _1905 = ((_1862 * cbLight._m0[_1856].y) * _1897) + ((_1872 * cbLight._m0[_1866].y) * _1895);
    float _1906 = ((_1862 * cbLight._m0[_1856].z) * _1897) + ((_1872 * cbLight._m0[_1866].z) * _1895);
    uvec4 _1910 = floatBitsToUint(cbLight._m0[_1839 + 12u]);
    bool _1912 = _1910.x == 0u;
    float _1923;
    float _1925;
    float _1927;
    if (_1912)
    {
        _1923 = _1904;
        _1925 = _1905;
        _1927 = _1906;
    }
    else
    {
        uint _1931 = _1839 + 6u;
        float _1947 = (dot(vec3(cbLight._m0[_1839 + 2u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _1948 = _1947 * _1947;
        float _4099 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1950 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _1923 = (((cbLight._m0[_1931].x * 0.3183098733425140380859375) * _1949) * _1950) + _1904;
        _1925 = (((cbLight._m0[_1931].y * 0.3183098733425140380859375) * _1949) * _1950) + _1905;
        _1927 = (((cbLight._m0[_1931].z * 0.3183098733425140380859375) * _1949) * _1950) + _1906;
    }
    bool _1930 = _1910.y == 0u;
    float _1968;
    float _1970;
    float _1972;
    if (_1930)
    {
        _1968 = _1923;
        _1970 = _1925;
        _1972 = _1927;
    }
    else
    {
        uint _2127 = _1839 + 7u;
        float _2143 = (dot(vec3(cbLight._m0[_1839 + 3u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _2144 = _2143 * _2143;
        float _4115 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2145 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2146 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _1968 = (((cbLight._m0[_2127].x * 0.3183098733425140380859375) * _2145) * _2146) + _1923;
        _1970 = (((cbLight._m0[_2127].y * 0.3183098733425140380859375) * _2145) * _2146) + _1925;
        _1972 = (((cbLight._m0[_2127].z * 0.3183098733425140380859375) * _2145) * _2146) + _1927;
    }
    uint _1975 = _1839 + 8u;
    float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _611) * 0.949999988079071044921875);
    float _1989 = _1988 * _1988;
    float _1990 = cbLight._m0[_1839].x + _688;
    float _1991 = cbLight._m0[_1839].y + _689;
    float _1992 = cbLight._m0[_1839].z + _690;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _1997 = _1996 * _1990;
    float _1998 = _1996 * _1991;
    float _1999 = _1996 * _1992;
    float _2000 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_1839].xyz));
    float _4131 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _2004 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2005 = dot(vec3(_608, _609, _610), vec3(_1997, _1998, _1999));
    float _4153 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_1997, _1998, _1999));
    float _4164 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2013 = _1989 * _1989;
    float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
    float _2028 = (exp2(log2(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2029 = 1.0 - _1989;
    float _2040 = (0.5 / (((_2004 * ((_2003 * _2029) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2029) + _1989) * _2003))) * _2003;
    float _4175 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2042 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
    uint _2053 = _1839 + 9u;
    float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _611) * 0.949999988079071044921875);
    float _2065 = _2064 * _2064;
    float _2066 = cbLight._m0[_1876].x + _688;
    float _2067 = cbLight._m0[_1876].y + _689;
    float _2068 = cbLight._m0[_1876].z + _690;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2073 = _2072 * _2066;
    float _2074 = _2072 * _2067;
    float _2075 = _2072 * _2068;
    float _2076 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_1876].xyz));
    float _4186 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2080 = dot(vec3(_608, _609, _610), vec3(_2073, _2074, _2075));
    float _4197 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2084 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_2073, _2074, _2075));
    float _4208 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2088 = _2065 * _2065;
    float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
    float _2101 = (exp2(log2(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2102 = 1.0 - _2065;
    float _2112 = (0.5 / (((_2004 * ((_2079 * _2102) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2102) + _2065) * _2079))) * _2079;
    float _4219 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
    float _2124 = (((_2101 * cbLight._m0[_2053].x) * _2114) * _1862) + (((_2028 * cbLight._m0[_1975].x) * _2042) * _1872);
    float _2125 = (((_2101 * cbLight._m0[_2053].y) * _2114) * _1862) + (((_2028 * cbLight._m0[_1975].y) * _2042) * _1872);
    float _2126 = (((_2101 * cbLight._m0[_2053].z) * _2114) * _1862) + (((_2028 * cbLight._m0[_1975].z) * _2042) * _1872);
    float _2188;
    float _2190;
    float _2192;
    if (_1912)
    {
        _2188 = _2124;
        _2190 = _2125;
        _2192 = _2126;
    }
    else
    {
        uint _2194 = _1839 + 2u;
        uint _2198 = _1839 + 10u;
        float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2194].w)) * _611) * 0.949999988079071044921875);
        float _2213 = _2212 * _2212;
        float _2214 = cbLight._m0[_2194].x + _688;
        float _2215 = cbLight._m0[_2194].y + _689;
        float _2216 = cbLight._m0[_2194].z + _690;
        float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
        float _2221 = _2220 * _2214;
        float _2222 = _2220 * _2215;
        float _2223 = _2220 * _2216;
        float _2224 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2194].xyz));
        float _4230 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2228 = dot(vec3(_608, _609, _610), vec3(_2221, _2222, _2223));
        float _4241 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2232 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2221, _2222, _2223));
        float _4252 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2236 = _2213 * _2213;
        float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
        float _2249 = (exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2250 = 1.0 - _2213;
        float _2260 = (0.5 / (((_2004 * ((_2227 * _2250) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2250) + _2213) * _2227))) * _2227;
        float _4263 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2262 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
        float _2263 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2188 = (((_2249 * cbLight._m0[_2198].x) * _2262) * _2263) + _2124;
        _2190 = (((_2249 * cbLight._m0[_2198].y) * _2262) * _2263) + _2125;
        _2192 = (((_2249 * cbLight._m0[_2198].z) * _2262) * _2263) + _2126;
    }
    float _2298;
    float _2300;
    float _2302;
    if (_1930)
    {
        _2298 = _2188;
        _2300 = _2190;
        _2302 = _2192;
    }
    else
    {
        uint _2309 = _1839 + 3u;
        uint _2313 = _1839 + 11u;
        float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _611) * 0.949999988079071044921875);
        float _2328 = _2327 * _2327;
        float _2329 = cbLight._m0[_2309].x + _688;
        float _2330 = cbLight._m0[_2309].y + _689;
        float _2331 = cbLight._m0[_2309].z + _690;
        float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
        float _2336 = _2335 * _2329;
        float _2337 = _2335 * _2330;
        float _2338 = _2335 * _2331;
        float _2339 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2309].xyz));
        float _4279 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2343 = dot(vec3(_608, _609, _610), vec3(_2336, _2337, _2338));
        float _4290 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2347 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2336, _2337, _2338));
        float _4301 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2351 = _2328 * _2328;
        float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
        float _2364 = (exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2365 = 1.0 - _2328;
        float _2375 = (0.5 / (((_2004 * ((_2342 * _2365) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2365) + _2328) * _2342))) * _2342;
        float _4312 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2377 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
        float _2378 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2298 = (((_2364 * cbLight._m0[_2313].x) * _2377) * _2378) + _2188;
        _2300 = (((_2364 * cbLight._m0[_2313].y) * _2377) * _2378) + _2190;
        _2302 = (((_2364 * cbLight._m0[_2313].z) * _2377) * _2378) + _2192;
    }
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_1837.y == 0u)
    {
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2453;
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2453;
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2453;
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.x;
        uint _2480 = uint((float(_2468.y) * floor(float(uint(cbSceneParam._m0[85u].y * _709) / _2469))) + floor(float(uint(cbSceneParam._m0[85u].x * _708) / _2469)));
        float _2490 = (log2(_2456 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2491 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        uint _2494 = uint(isnan(14.0) ? _2491 : (isnan(_2491) ? 14.0 : min(_2491, 14.0)));
        uvec4 _2499 = texelFetch(g_lightClusterGridBuffer, int(((_2494 << 2u) + (_2480 << 6u)) >> 2u));
        uint _2500 = _2499.x;
        uint _2501 = _2468.z;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        if (((((1u << ((_2501 >> 4u) & 15u)) + 4294967295u) & _2500) == 0u) || ((_2501 & 240u) == 0u))
        {
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
        }
        else
        {
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2610;
            float _2612;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            uint _2760 = 0u;
            uint _2769;
            bool _2770;
            for (;;)
            {
                _2769 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2760 << 2u)) >> 2u)).x;
                _2770 = _2769 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2770)
                {
                    frontier_phi_66_pred = _2754;
                    frontier_phi_66_pred_1 = _2759;
                    frontier_phi_66_pred_2 = _2758;
                    frontier_phi_66_pred_3 = _2757;
                    frontier_phi_66_pred_4 = _2756;
                    frontier_phi_66_pred_5 = _2755;
                }
                else
                {
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    uint _2905;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2769;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    for (;;)
                    {
                        uint _2909 = uint(findLSB(_2905)) + (_2760 << 5u);
                        uint _2906 = (_2905 + 4294967295u) & _2905;
                        uint _2911 = _2909 * 48u;
                        vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2931 = (_2909 * 48u) + 4u;
                        vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2931)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 3u)).x));
                        uint _2950 = (_2909 * 48u) + 8u;
                        vec3 _2961 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x));
                        float _2965 = _2925.x - _2454;
                        float _2966 = _2925.y - _2455;
                        float _2967 = _2925.z - _2456;
                        float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                        float _2971 = inversesqrt(_2968);
                        float _2972 = _2971 * _2965;
                        float _2973 = _2971 * _2966;
                        float _2974 = _2971 * _2967;
                        float _2975 = dot(vec3(_727, _730, _733), vec3(_2972, _2973, _2974));
                        float _2980 = 1.0 - (_2968 * _2925.w);
                        float _4338 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2981 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _2982 = sqrt(_2968) * _2944.w;
                        float _2985 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2975) + _2986;
                        float _2992 = _2982 * _2982;
                        float _2996 = ((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2981) / ((_2992 * 0.699999988079071044921875) + 1.0);
                        float _3000 = (-0.0) - _2454;
                        float _3001 = (-0.0) - _2455;
                        float _3002 = (-0.0) - _2456;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3017 = exp2(log2(1.0 / ((_2992 * 3.5) + 5.0)) * 0.25);
                        float _3018 = 1.0 - _787;
                        float _3025 = sqrt(1.0 - ((1.0 - (_3018 * _3018)) * (1.0 - (_3017 * _3017))));
                        float _3026 = _3025 * _3025;
                        float _3027 = _3026 * _3026;
                        float _3028 = _3007 + _2972;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3038 = dot(vec3(_727, _730, _733), vec3(_3007, _3008, _3009));
                        float _4354 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3042 = dot(vec3(_727, _730, _733), vec3(_3034 * _3028, _3034 * _3029, _3034 * _3030));
                        float _4365 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3049 = ((_3045 * _3045) * (_3027 + (-1.0))) + 1.0;
                        float _3050 = _2985 * _3026;
                        float _3051 = _3050 * _3050;
                        float _3054 = ((1.0 - _3051) * _2975) + _3051;
                        float _4376 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3055 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3056 = 1.0 - _3026;
                        float _3066 = (0.5 / (((_3055 * ((_3041 * _3056) + _3026)) + 9.9999999392252902907785028219223e-09) + (((_3055 * _3056) + _3026) * _3041))) * _3055;
                        float _4387 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3077 = (((_3027 * 3.1415927410125732421875) * (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) / ((_3049 * _3049) * ((_2992 * 2.1991131305694580078125) + 3.141590118408203125))) * _2981;
                        _2829 = (_2996 * _2944.x) + _2902;
                        _2830 = (_2996 * _2944.y) + _2903;
                        _2831 = (_2996 * _2944.z) + _2904;
                        _2826 = (_3077 * _2961.x) + _2899;
                        _2827 = (_3077 * _2961.y) + _2900;
                        _2828 = (_3077 * _2961.z) + _2901;
                        if (_2906 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2899 = _2826;
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2906;
                        }
                    }
                    frontier_phi_66_pred = _2826;
                    frontier_phi_66_pred_1 = _2831;
                    frontier_phi_66_pred_2 = _2830;
                    frontier_phi_66_pred_3 = _2829;
                    frontier_phi_66_pred_4 = _2828;
                    frontier_phi_66_pred_5 = _2827;
                }
                _2602 = frontier_phi_66_pred;
                _2612 = frontier_phi_66_pred_1;
                _2610 = frontier_phi_66_pred_2;
                _2608 = frontier_phi_66_pred_3;
                _2606 = frontier_phi_66_pred_4;
                _2604 = frontier_phi_66_pred_5;
                uint _2761 = _2760 + 1u;
                if (_2761 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2754 = _2602;
                    _2755 = _2604;
                    _2756 = _2606;
                    _2757 = _2608;
                    _2758 = _2610;
                    _2759 = _2612;
                    _2760 = _2761;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
        }
        uvec4 _2615 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2616 = _2615.z;
        uint _2618 = (_2616 >> 8u) & 15u;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((4294967295u << _2618) & _2500) == 0u)
        {
            _2722 = _2601;
            _2724 = _2603;
            _2726 = _2605;
            _2728 = _2607;
            _2730 = _2609;
            _2732 = _2611;
        }
        else
        {
            float _2747 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
            float _2748 = _2747 * _2454;
            float _2749 = _2747 * _2455;
            float _2750 = _2747 * _2456;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2618 < ((_2616 >> 12u) & 15u))
            {
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2882 = _2601;
                float _2883 = _2603;
                float _2884 = _2605;
                float _2885 = _2607;
                float _2886 = _2609;
                float _2887 = _2611;
                uint _2888 = _2618;
                uint _2897;
                bool _2898;
                for (;;)
                {
                    _2897 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2888 << 2u)) >> 2u)).x;
                    _2898 = _2897 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2898)
                    {
                        frontier_phi_77_pred = _2887;
                        frontier_phi_77_pred_1 = _2886;
                        frontier_phi_77_pred_2 = _2885;
                        frontier_phi_77_pred_3 = _2884;
                        frontier_phi_77_pred_4 = _2883;
                        frontier_phi_77_pred_5 = _2882;
                    }
                    else
                    {
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3104 = _2882;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        uint _3110 = _2897;
                        uint _3111;
                        vec4 _3136;
                        float _3137;
                        vec4 _3152;
                        vec3 _3164;
                        vec4 _3179;
                        vec4 _3195;
                        float _3241;
                        bool _3242;
                        for (;;)
                        {
                            uint _3121 = ((_2888 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3110));
                            _3111 = (_3110 + 4294967295u) & _3110;
                            uint _3123 = _3121 * 40u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            _3137 = _3136.w;
                            uint _3139 = (_3121 * 40u) + 4u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3154 = (_3121 * 40u) + 8u;
                            _3164 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x));
                            uint _3166 = (_3121 * 40u) + 16u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3182 = (_3121 * 40u) + 20u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3121 * 40u) + 24u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3216 = (_3121 * 40u) + 28u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3241 = fma(_2456, _3229.z, fma(_2455, _3229.y, _3229.x * _2454)) + _3229.w;
                            _3242 = !((fma(_2456, _3210.z, fma(_2455, _3210.y, _3210.x * _2454)) + _3210.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3242)
                            {
                                float _3269 = _3136.x - _2454;
                                float _3270 = _3136.y - _2455;
                                float _3271 = _3136.z - _2456;
                                float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                                float _3275 = inversesqrt(_3272);
                                float _3276 = _3275 * _3269;
                                float _3277 = _3275 * _3270;
                                float _3278 = _3275 * _3271;
                                float _3282 = 1.0 - (_3272 / (_3137 * _3137));
                                float _4398 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3287 = sqrt(_3272) * _3152.w;
                                float _3289 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                                float _3290 = _3289 * _3289;
                                float _3293 = ((1.0 - _3290) * dot(vec3(_3276, _3277, _3278), vec3(_727, _730, _733))) + _3290;
                                float _3296 = _3287 * _3287;
                                float _3300 = (fma(_2456, _3179.z, fma(_2455, _3179.y, _3179.x * _2454)) + _3179.w) / _3241;
                                float _3301 = (fma(_2456, _3195.z, fma(_2455, _3195.y, _3195.x * _2454)) + _3195.w) / _3241;
                                float _3305 = 1.0 - dot(vec2(_3300, _3301), vec2(_3300, _3301));
                                float _4414 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3307 = _3306 * (((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3283) / ((_3296 * 0.699999988079071044921875) + 1.0));
                                float _3319 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                                float _3320 = 1.0 - _787;
                                float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                                float _3328 = _3327 * _3327;
                                float _3329 = _3328 * _3328;
                                float _3330 = _3276 - _2748;
                                float _3331 = _3277 - _2749;
                                float _3332 = _3278 - _2750;
                                float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                                float _3340 = dot(vec3(_727, _730, _733), vec3((-0.0) - _2748, (-0.0) - _2749, (-0.0) - _2750));
                                float _4425 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3344 = dot(vec3(_727, _730, _733), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                                float _4436 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                                float _3352 = _3289 * _3328;
                                float _3353 = _3352 * _3352;
                                float _3359 = ((1.0 - _3353) * dot(vec3(_727, _730, _733), vec3(_3276, _3277, _3278))) + _3353;
                                float _4447 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3361 = 1.0 - _3328;
                                float _3371 = (0.5 / (((_3360 * ((_3343 * _3361) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3328) * _3343))) * _3360;
                                float _4458 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3381 = (_3306 * _3283) * (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3351 * _3351) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3307 * _3152.y;
                                frontier_phi_83_pred_1 = _3307 * _3152.x;
                                frontier_phi_83_pred_2 = _3381 * _3164.z;
                                frontier_phi_83_pred_3 = _3381 * _3164.y;
                                frontier_phi_83_pred_4 = _3381 * _3164.x;
                                frontier_phi_83_pred_5 = _3307 * _3152.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3389 = frontier_phi_83_pred;
                            _3388 = frontier_phi_83_pred_1;
                            _3387 = frontier_phi_83_pred_2;
                            _3386 = frontier_phi_83_pred_3;
                            _3385 = frontier_phi_83_pred_4;
                            _3390 = frontier_phi_83_pred_5;
                            _3094 = _3388 + _3107;
                            _3095 = _3389 + _3108;
                            _3096 = _3390 + _3109;
                            _3091 = _3385 + _3104;
                            _3092 = _3386 + _3105;
                            _3093 = _3387 + _3106;
                            if (_3111 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3111;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3096;
                        frontier_phi_77_pred_1 = _3095;
                        frontier_phi_77_pred_2 = _3094;
                        frontier_phi_77_pred_3 = _3093;
                        frontier_phi_77_pred_4 = _3092;
                        frontier_phi_77_pred_5 = _3091;
                    }
                    _2733 = frontier_phi_77_pred;
                    _2731 = frontier_phi_77_pred_1;
                    _2729 = frontier_phi_77_pred_2;
                    _2727 = frontier_phi_77_pred_3;
                    _2725 = frontier_phi_77_pred_4;
                    _2723 = frontier_phi_77_pred_5;
                    uint _2889 = _2888 + 1u;
                    if (_2889 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2882 = _2723;
                        _2883 = _2725;
                        _2884 = _2727;
                        _2885 = _2729;
                        _2886 = _2731;
                        _2887 = _2733;
                        _2888 = _2889;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2727;
                frontier_phi_58_59_ladder_1 = _2733;
                frontier_phi_58_59_ladder_2 = _2731;
                frontier_phi_58_59_ladder_3 = _2729;
                frontier_phi_58_59_ladder_4 = _2725;
                frontier_phi_58_59_ladder_5 = _2723;
            }
            else
            {
                frontier_phi_58_59_ladder = _2605;
                frontier_phi_58_59_ladder_1 = _2611;
                frontier_phi_58_59_ladder_2 = _2609;
                frontier_phi_58_59_ladder_3 = _2607;
                frontier_phi_58_59_ladder_4 = _2603;
                frontier_phi_58_59_ladder_5 = _2601;
            }
            _2722 = frontier_phi_58_59_ladder_5;
            _2724 = frontier_phi_58_59_ladder_4;
            _2726 = frontier_phi_58_59_ladder;
            _2728 = frontier_phi_58_59_ladder_3;
            _2730 = frontier_phi_58_59_ladder_2;
            _2732 = frontier_phi_58_59_ladder_1;
        }
        float _2737 = isnan(1.0) ? _771 : (isnan(_771) ? 1.0 : min(_771, 1.0));
        _2513 = (_2737 * _2728) + _1968;
        _2515 = (_2737 * _2730) + _1970;
        _2517 = (_2737 * _2732) + _1972;
        _2519 = ((_2722 * 0.039999999105930328369140625) * _2737) + _2298;
        _2521 = ((_2724 * 0.039999999105930328369140625) * _2737) + _2300;
        _2523 = ((_2726 * 0.039999999105930328369140625) * _2737) + _2302;
    }
    else
    {
        _2513 = _1968;
        _2515 = _1970;
        _2517 = _1972;
        _2519 = _2298;
        _2521 = _2300;
        _2523 = _2302;
    }
    float _4474 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4485 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4496 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2540 = ((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2513 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _771))) + ((_2519 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1608)) * cbPerFrame._m0[3u].x);
    float _2541 = ((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2515 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _771))) + ((_2521 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1608)) * cbPerFrame._m0[3u].x);
    float _2542 = ((isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2517 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _771))) + ((_2523 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1608)) * cbPerFrame._m0[3u].x);
    uint _2543 = _232 + 6u;
    float _2551 = _708 / cbSceneParam._m0[86u].x;
    float _2552 = _709 / cbSceneParam._m0[86u].y;
    vec4 _2566 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, (log2((isnan(cbSceneParam._m0[77u].w) ? _629 : (isnan(_629) ? cbSceneParam._m0[77u].w : min(_629, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2568 = _2566.x;
    float _2569 = _2566.y;
    float _2570 = _2566.z;
    float _2571 = _2566.w;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    if (_629 > cbSceneParam._m0[78u].w)
    {
        float _2626 = isnan(_629) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _629 : min(cbSceneParam._m0[80u].w, _629));
        float _2627 = _2626 / _629;
        float _2638 = _2627 * _681;
        float _2639 = _682 * _2627;
        float _2640 = (-0.0) - _2639;
        float _2642 = _2627 * _683;
        float _2644 = (cbSceneParam._m0[77u].w * _2640) / _2626;
        float _2645 = _2644 + cbSceneParam._m0[79u].w;
        float _2646 = cbSceneParam._m0[79u].w - _2639;
        float _2652 = sqrt(((_2638 * _2638) + (_2639 * _2639)) + (_2642 * _2642));
        float _2655 = (1.0 - (cbSceneParam._m0[77u].w / _2626)) * _2652;
        float _2660 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2662 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2839;
        if (abs((_2640 - _2644) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2839 = ((((_2645 > 0.0) ? exp2(_2660 * _2645) : (2.0 - exp2(_2662 * _2645))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2655;
        }
        else
        {
            float _2783 = 1.0 / cbSceneParam._m0[80u].x;
            float _2784 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : max(_2645, _2646));
            float _2785 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : min(_2645, _2646));
            float _2794 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : min(_2784, 0.0));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            _2839 = ((abs(_2652 / _2640) * cbSceneParam._m0[80u].y) * ((((_2794 - _2795) * 2.0) - ((exp2(_2660 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0)))) - exp2(_2660 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0))))) * _2783)) - ((exp2(_2662 * _2794) - exp2(_2662 * _2795)) * _2783))) + (_2655 * cbSceneParam._m0[80u].z);
        }
        vec4 _2841 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, 1.0), 0.0);
        float _2850 = exp2((_2839 * (-1.44269502162933349609375)) * (1.0 - _2841.w));
        float _2851 = log2(_2850);
        float _2867 = log2(_2571);
        _2664 = (exp2(_2867 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].x)) * _2841.x) / cbSceneParam._m0[78u].x)) + _2568;
        _2666 = (exp2(_2867 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].y)) * _2841.y) / cbSceneParam._m0[78u].y)) + _2569;
        _2668 = (exp2(_2867 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].z)) * _2841.z) / cbSceneParam._m0[78u].z)) + _2570;
        _2670 = _2850 * _2571;
    }
    else
    {
        _2664 = _2568;
        _2666 = _2569;
        _2668 = _2570;
        _2670 = _2571;
    }
    bool _2877;
    vec4 _2680;
    vec4 _2702;
    float _2704;
    float _2708;
    float _2709;
    float _2710;
    float _2711;
    bool _2721;
    for (;;)
    {
        _2680 = cbMatDynParam._m0[0u];
        float _2682 = roundEven(_2680.y);
        bool _2683 = _2682 == 3.0;
        float _2684 = log2(_2670);
        float _2691 = exp2(_2684 * cbSceneParam._m0[78u].x) * _2540;
        float _2692 = exp2(_2684 * cbSceneParam._m0[78u].y) * _2541;
        float _2693 = exp2(_2684 * cbSceneParam._m0[78u].z) * _2542;
        float _2700 = _697 + (-0.5);
        _2702 = cbMtdParam._m0[1u];
        _2704 = _2702.y * _2700;
        float _2707 = (_2682 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2708 = _2707 * (_2683 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2664)));
        _2709 = _2707 * (_2683 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2666)));
        _2710 = _2707 * (_2683 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2668)));
        _2711 = _2700 * 0.999000012874603271484375;
        _2721 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2721)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2711) < 0.5)
            {
                _2877 = true;
                break;
            }
        }
        uint _2818 = _746 + uint(_2680.w);
        if ((cbInstanceData._m0[_2818].w < 1.0) && ((cbInstanceData._m0[_2818].w + _2711) < 0.5))
        {
            _2877 = true;
            break;
        }
        if ((_2704 + 1.0) < _2702.x)
        {
            _2877 = true;
            break;
        }
        _2877 = false;
        break;
    }
    float _3082;
    if (_2877)
    {
        discard_state = true;
        _3082 = 0.0;
    }
    else
    {
        _3082 = cbInstanceData._m0[_2543].w;
    }
    SV_Target.x = _2708;
    SV_Target.y = _2709;
    SV_Target.z = _2710;
    SV_Target.w = _3082;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2543].w;
    discard_exit();
}


