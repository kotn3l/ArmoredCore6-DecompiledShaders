#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1343;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3672 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3683 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3694 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _436 = _434.x;
    float _448 = dot(vec4(_436, _434.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _465 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _399.x) * 2.0) - ((((_436 - _448) * cbMtdParam._m0[24u].z) + _448) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3705 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _473 = (_466 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _474 = (_466 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _475 = (_466 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _492 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _291) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _292) + cbTextureTilingScale._m0[3u].w));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _514 = _512.x;
    float _524 = dot(vec4(_514, _512.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _538 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _399.y) * 2.0) - ((((_514 - _524) * cbMtdParam._m0[24u].z) + _524) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3716 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _549 = (_328.x * cbMtdParam._m0[9u].x) * ((_539 * ((_492.x * cbMtdParam._m0[13u].x) - _473)) + _473);
    float _550 = (_328.y * cbMtdParam._m0[9u].y) * ((_539 * ((_492.y * cbMtdParam._m0[13u].y) - _474)) + _474);
    float _551 = (_328.z * cbMtdParam._m0[9u].z) * ((_539 * ((_492.z * cbMtdParam._m0[13u].z) - _475)) + _475);
    float _555 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _549;
    float _558 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _550;
    float _561 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _551;
    float _569 = (((_549 - _555) * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) + _555) * 4.55000019073486328125;
    float _571 = (((_550 - _558) * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) + _558) * 4.55000019073486328125;
    float _573 = (((_551 - _561) * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) + _561) * 4.55000019073486328125;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _632 = _630.x;
    float _633 = _630.y;
    float _634 = _630.z;
    float _641 = ((_613.x - _632) * _466) + _632;
    float _642 = ((_613.y - _633) * _466) + _633;
    float _643 = ((_613.z - _634) * _466) + _634;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _291) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _292) + cbTextureTilingScale._m0[2u].w));
    float _668 = ((_655.z - _643) * _539) + _643;
    float _671 = ((((_655.x - _641) * _539) + _641) * 2.0) + (-1.0);
    float _672 = ((((_655.y - _642) * _539) + _642) * 2.0) + (-1.0);
    float _673 = dot(vec2(_671, _672), vec2(_671, _672));
    float _3727 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _678 = sqrt(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _717 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _719 = _717.x;
    float _720 = 1.0 - _719;
    float _733 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_719 - _720) * cbMtdParam._m0[24u].w) + _720) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3738 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _734 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _741 = (_734 * (cbMtdParam._m0[17u].x - _569)) + _569;
    float _742 = (_734 * (cbMtdParam._m0[17u].y - _571)) + _571;
    float _743 = (_734 * (cbMtdParam._m0[17u].z - _573)) + _573;
    float _748 = (((_590.z - _668) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _668;
    float _752 = ((_692.z - _748) * cbMtdParam._m0[19u].w) + _748;
    vec4 _765 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _772 = (_765.x * 2.0) + (-1.0);
    float _773 = (_765.y * 2.0) + (-1.0);
    float _774 = dot(vec2(_772, _773), vec2(_772, _773));
    float _3749 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _782 = (_734 * (_765.z - _752)) + _752;
    float _791 = (_671 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_590.x * 2.0) + (-1.0)))) + (((_692.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _792 = (_672 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_590.y * 2.0) + (-1.0)))) + (((_692.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _804 = (((_772 - _791) + (cbMtdParam._m0[21u].x * _791)) * _734) + _791;
    float _805 = (((_773 - _792) + (cbMtdParam._m0[21u].x * _792)) * _734) + _792;
    float _806 = (_734 * (sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) - _678)) + _678;
    float _808 = cbMtdParam._m0[22u].x + _692.w;
    float _811 = fma(_806, _238 * NORMAL.x, fma(_805, _245 * TANGENT.x, (_231 * _223) * _804));
    float _814 = fma(_806, _238 * NORMAL.y, fma(_805, _245 * TANGENT.y, (_231 * _224) * _804));
    float _817 = fma(_806, _238 * NORMAL.z, fma(_805, _245 * TANGENT.z, (_231 * _225) * _804));
    float _821 = inversesqrt(dot(vec3(_811, _814, _817), vec3(_811, _814, _817)));
    float _822 = _821 * _811;
    float _823 = _821 * _814;
    float _824 = _821 * _817;
    float _3760 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _825 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _3782 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3793 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3804 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _843 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _894 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _884);
    float _895 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _884);
    float _896 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _884);
    float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
    float _901 = _894 * _900;
    float _902 = _895 * _900;
    float _903 = _896 * _900;
    float _909 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _910 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _928 = fma(_824, cbSceneParam._m0[5u].z, fma(_823, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _822));
    float _931 = fma(_824, cbSceneParam._m0[6u].z, fma(_823, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _822));
    float _934 = fma(_824, cbSceneParam._m0[7u].z, fma(_823, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _822));
    uint _948 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _954 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_948].x;
    float _955 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_948].y;
    float _956 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_948].z;
    float _3815 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    vec4 _968 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _909, cbSceneParam._m0[86u].y * _910));
    float _972 = ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * TEXCOORD_5.w) * _968.x;
    float _973 = dot(vec3(_822, _823, _824), vec3(_901, _902, _903));
    float _976 = _973 * 2.0;
    float _980 = (_976 * _822) - _901;
    float _981 = (_976 * _823) - _902;
    float _982 = (_976 * _824) - _903;
    float _986 = abs(dot(vec3(_901, _902, _903), vec3(_822, _823, _824)));
    float _3848 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _988 = sqrt(_825);
    float _1001 = exp2((_988 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_988 * 3.0));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1342;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1067 = fma(_1041, cbModelParam._m0[26u].z, fma(_1037, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033));
        float _1071 = fma(_1041, cbModelParam._m0[27u].z, fma(_1037, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033));
        float _1075 = fma(_1041, cbModelParam._m0[28u].z, fma(_1037, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033));
        float _1100 = _1033 + _822;
        float _1101 = _1037 + _823;
        float _1102 = _1041 + _824;
        float _1112 = fma(_1102, cbModelParam._m0[26u].z, fma(_1101, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1100)) - _1067;
        float _1113 = fma(_1102, cbModelParam._m0[27u].z, fma(_1101, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1100)) - _1071;
        float _1114 = fma(_1102, cbModelParam._m0[28u].z, fma(_1101, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1100)) - _1075;
        float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
        float _1131 = ((_1118 * _1112) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1067 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1118 * _1113) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1071 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1118 * _1114) / cbModelParam._m0[34u].z) + ((((((_1075 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        float _1170 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1136.x + (-0.5));
        float _1172 = _1170 * (_1136.y + (-0.5));
        float _1173 = _1170 * (_1136.z + (-0.5));
        float _1180 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1143.x + (-0.5));
        float _1182 = _1180 * (_1143.y + (-0.5));
        float _1183 = _1180 * (_1143.z + (-0.5));
        float _1190 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1150.x + (-0.5));
        float _1192 = _1190 * (_1150.y + (-0.5));
        float _1193 = _1190 * (_1150.z + (-0.5));
        float _1200 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1157.x + (-0.5));
        float _1202 = _1200 * (_1157.y + (-0.5));
        float _1203 = _1200 * (_1157.z + (-0.5));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = _1171 * 0.5;
        float _1208 = _1181 * 0.5;
        float _1209 = _1191 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1224 = (dot(vec3(_822, _823, _824), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1234 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3896 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1236 + 1.0))) + _1241) * _1204;
        float _1251 = _1172 * 0.5;
        float _1252 = _1182 * 0.5;
        float _1253 = _1192 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_822, _823, _824), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3929 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1278 + 1.0))) + _1283) * _1205;
        float _1293 = _1173 * 0.5;
        float _1294 = _1183 * 0.5;
        float _1295 = _1193 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_822, _823, _824), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3962 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1320 + 1.0))) + _1325) * _1206;
        _1342 = _1173;
        _1344 = _1172;
        _1345 = _1171;
        _1346 = _1183;
        _1347 = _1182;
        _1348 = _1181;
        _1349 = _1193;
        _1350 = _1192;
        _1351 = _1191;
        _1352 = _1206;
        _1353 = _1205;
        _1354 = _1204;
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
    }
    else
    {
        _1342 = _1343;
        _1344 = _1343;
        _1345 = _1343;
        _1346 = _1343;
        _1347 = _1343;
        _1348 = _1343;
        _1349 = _1343;
        _1350 = _1343;
        _1351 = _1343;
        _1352 = _1343;
        _1353 = _1343;
        _1354 = _1343;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1381 = fma(_1041, cbModelParam._m0[30u].z, fma(_1037, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1033));
        float _1385 = fma(_1041, cbModelParam._m0[31u].z, fma(_1037, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1033));
        float _1389 = fma(_1041, cbModelParam._m0[32u].z, fma(_1037, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1033));
        float _1412 = _1033 + _822;
        float _1413 = _1037 + _823;
        float _1414 = _1041 + _824;
        float _1424 = fma(_1414, cbModelParam._m0[30u].z, fma(_1413, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1412)) - _1381;
        float _1425 = fma(_1414, cbModelParam._m0[31u].z, fma(_1413, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1412)) - _1385;
        float _1426 = fma(_1414, cbModelParam._m0[32u].z, fma(_1413, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1412)) - _1389;
        float _1430 = inversesqrt(dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426)));
        float _1443 = ((_1430 * _1424) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1381 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1430 * _1425) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1385 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1445 = ((_1430 * _1426) / cbModelParam._m0[35u].z) + ((((((_1389 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        float _1480 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1447.x + (-0.5));
        float _1482 = _1480 * (_1447.y + (-0.5));
        float _1483 = _1480 * (_1447.z + (-0.5));
        float _1490 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1454.x + (-0.5));
        float _1492 = _1490 * (_1454.y + (-0.5));
        float _1493 = _1490 * (_1454.z + (-0.5));
        float _1500 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1461.x + (-0.5));
        float _1502 = _1500 * (_1461.y + (-0.5));
        float _1503 = _1500 * (_1461.z + (-0.5));
        float _1510 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1468.x + (-0.5));
        float _1512 = _1510 * (_1468.y + (-0.5));
        float _1513 = _1510 * (_1468.z + (-0.5));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = _1481 * 0.5;
        float _1518 = _1491 * 0.5;
        float _1519 = _1501 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_822, _823, _824), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4025 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1544 + 1.0))) + _1549) * _1514;
        float _1559 = _1482 * 0.5;
        float _1560 = _1492 * 0.5;
        float _1561 = _1502 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_822, _823, _824), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4058 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1586 + 1.0))) + _1591) * _1515;
        float _1601 = _1483 * 0.5;
        float _1602 = _1493 * 0.5;
        float _1603 = _1503 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_822, _823, _824), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4091 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1628 + 1.0))) + _1633) * _1516;
        _1650 = _1483;
        _1651 = _1482;
        _1652 = _1481;
        _1653 = _1493;
        _1654 = _1492;
        _1655 = _1491;
        _1656 = _1503;
        _1657 = _1502;
        _1658 = _1501;
        _1659 = _1516;
        _1660 = _1515;
        _1661 = _1514;
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
    }
    else
    {
        _1650 = _1343;
        _1651 = _1343;
        _1652 = _1343;
        _1653 = _1343;
        _1654 = _1343;
        _1655 = _1343;
        _1656 = _1343;
        _1657 = _1343;
        _1658 = _1343;
        _1659 = _1343;
        _1660 = _1343;
        _1661 = _1343;
        _1662 = 0.0;
        _1663 = 0.0;
        _1664 = 0.0;
    }
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1355)) + _1355;
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1356)) + _1356;
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1357)) + _1357;
    float _1697 = fma(_1676, cbSceneParam._m0[89u].z, fma(_1675, cbSceneParam._m0[89u].y, _1674 * cbSceneParam._m0[89u].x));
    float _1700 = fma(_1676, cbSceneParam._m0[90u].z, fma(_1675, cbSceneParam._m0[90u].y, _1674 * cbSceneParam._m0[90u].x));
    float _1703 = fma(_1676, cbSceneParam._m0[91u].z, fma(_1675, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1674));
    float _1718 = _980 * 0.5;
    float _1719 = _981 * 0.5;
    float _1720 = _982 * 0.5;
    float _1721 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1724 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1727 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1761;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1734 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1342, _1346, _1349, _1352));
        float _1738 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1344, _1347, _1350, _1353));
        float _1742 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1345, _1348, _1351, _1354));
        float _1749 = dot(vec4(cbModelParam._m0[39u]), vec4(_1718, _1719, _1720, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1772;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1763 = dot(vec4(cbModelParam._m0[40u]), vec4(_1718, _1719, _1720, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1763) ? 0.0 : (isnan(0.0) ? _1763 : max(0.0, _1763))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1776 = (_1772 * cbModelParam._m0[1u].x) + (_1761 * (1.0 - cbModelParam._m0[1u].x));
    float _1786 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _825);
    float _1787 = isnan(_1786) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1786 : min(cbModelParam._m0[25u].z, _1786));
    float _1868;
    float _1870;
    float _1872;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1835 = fma(_1041, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1033)) + cbModelParam._m0[13u].w;
        float _1839 = fma(_1041, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1033)) + cbModelParam._m0[14u].w;
        float _1843 = fma(_1041, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1033)) + cbModelParam._m0[15u].w;
        float _1846 = fma(_982, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980));
        float _1849 = fma(_982, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980));
        float _1852 = fma(_982, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980));
        float _1880;
        if (_1846 > 0.0)
        {
            _1880 = abs((1.0 - _1835) / _1846);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1835 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1880 = frontier_phi_14_12_ladder;
        }
        float _2102;
        if (_1849 > 0.0)
        {
            _2102 = abs((1.0 - _1839) / _1849);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1839 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2102 = frontier_phi_23_19_ladder;
        }
        float _2348;
        if (_1852 > 0.0)
        {
            _2348 = abs((1.0 - _1843) / _1852);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1843 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2348 = frontier_phi_35_30_ladder;
        }
        float _2350 = isnan(_2102) ? _1880 : (isnan(_1880) ? _2102 : min(_1880, _2102));
        float _2351 = isnan(_2348) ? _2350 : (isnan(_2350) ? _2348 : min(_2350, _2348));
        float _2355 = (_2351 * _1846) + _1835;
        float _2356 = (_2351 * _1849) + _1839;
        float _2357 = (_2351 * _1852) + _1843;
        float _2358 = _2351 * 9.9999997473787516355514526367188e-05;
        float _2360 = (-1.0) - _2358;
        float _2362 = _2358 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2357 > _2362) || ((_2357 < _2360) || ((_2356 > _2362) || ((_2356 < _2360) || ((_2355 < _2360) || (_2355 > _2362))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2481 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2357, cbModelParam._m0[9u].z, fma(_2356, cbModelParam._m0[9u].y, _2355 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2357, cbModelParam._m0[10u].z, fma(_2356, cbModelParam._m0[10u].y, _2355 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2357, cbModelParam._m0[11u].z, fma(_2356, cbModelParam._m0[11u].y, _2355 * cbModelParam._m0[11u].x))), _1787);
            frontier_phi_13_35_ladder = _2481.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2481.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2481.x * cbModelParam._m0[1u].y;
        }
        _1868 = frontier_phi_13_35_ladder_2;
        _1870 = frontier_phi_13_35_ladder_1;
        _1872 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1856 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_980, _981, _982), _1787);
        _1868 = _1856.x * cbModelParam._m0[1u].y;
        _1870 = _1856.y * cbModelParam._m0[1u].y;
        _1872 = _1856.z * cbModelParam._m0[1u].y;
    }
    float _1876 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _825);
    float _1877 = isnan(_1876) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1876 : min(cbModelParam._m0[25u].w, _1876));
    float _1967;
    float _1969;
    float _1971;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1931 = fma(_1041, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1033)) + cbModelParam._m0[21u].w;
        float _1935 = fma(_1041, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1033)) + cbModelParam._m0[22u].w;
        float _1939 = fma(_1041, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1033)) + cbModelParam._m0[23u].w;
        float _1942 = fma(_982, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980));
        float _1945 = fma(_982, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980));
        float _1948 = fma(_982, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980));
        float _2107;
        if (_1942 > 0.0)
        {
            _2107 = abs((1.0 - _1931) / _1942);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1931 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2107 = frontier_phi_25_21_ladder;
        }
        float _2375;
        if (_1945 > 0.0)
        {
            _2375 = abs((1.0 - _1935) / _1945);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1935 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2375 = frontier_phi_37_32_ladder;
        }
        float _2580;
        if (_1948 > 0.0)
        {
            _2580 = abs((1.0 - _1939) / _1948);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1939 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2580 = frontier_phi_46_43_ladder;
        }
        float _2582 = isnan(_2375) ? _2107 : (isnan(_2107) ? _2375 : min(_2107, _2375));
        float _2583 = isnan(_2580) ? _2582 : (isnan(_2582) ? _2580 : min(_2582, _2580));
        float _2587 = (_2583 * _1942) + _1931;
        float _2588 = (_2583 * _1945) + _1935;
        float _2589 = (_2583 * _1948) + _1939;
        float _2590 = _2583 * 9.9999997473787516355514526367188e-05;
        float _2591 = (-1.0) - _2590;
        float _2593 = _2590 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2589 > _2593) || ((_2589 < _2591) || ((_2588 > _2593) || ((_2588 < _2591) || ((_2587 < _2591) || (_2587 > _2593))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2788 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2589, cbModelParam._m0[17u].z, fma(_2588, cbModelParam._m0[17u].y, _2587 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2589, cbModelParam._m0[18u].z, fma(_2588, cbModelParam._m0[18u].y, _2587 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2589, cbModelParam._m0[19u].z, fma(_2588, cbModelParam._m0[19u].y, _2587 * cbModelParam._m0[19u].x))), _1877);
            frontier_phi_22_46_ladder = _2788.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2788.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2788.x * cbModelParam._m0[1u].z;
        }
        _1967 = frontier_phi_22_46_ladder_2;
        _1969 = frontier_phi_22_46_ladder_1;
        _1971 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1951 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_980, _981, _982), _1877);
        _1967 = _1951.x * cbModelParam._m0[1u].z;
        _1969 = _1951.y * cbModelParam._m0[1u].z;
        _1971 = _1951.z * cbModelParam._m0[1u].z;
    }
    float _1983 = ((((1.0 - _1001) * ((_988 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1001 * _988)) * _972;
    float _1984 = _1983 * ((cbModelParam._m0[1u].w * (_1967 - _1868)) + _1868);
    float _1985 = _1983 * ((cbModelParam._m0[1u].w * (_1969 - _1870)) + _1870);
    float _1986 = _1983 * ((cbModelParam._m0[1u].w * (_1971 - _1872)) + _1872);
    float _1989 = fma(_1986, cbSceneParam._m0[89u].z, fma(_1985, cbSceneParam._m0[89u].y, _1984 * cbSceneParam._m0[89u].x));
    float _1992 = fma(_1986, cbSceneParam._m0[90u].z, fma(_1985, cbSceneParam._m0[90u].y, _1984 * cbSceneParam._m0[90u].x));
    float _1995 = fma(_1986, cbSceneParam._m0[91u].z, fma(_1985, cbSceneParam._m0[91u].y, _1984 * cbSceneParam._m0[91u].x));
    vec4 _2003 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_909, _910));
    float _2005 = _2003.w;
    float _2017 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2005);
    float _2018 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2005);
    float _2019 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2005);
    uvec4 _2023 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2025 = _2023.x * 14u;
    uint _2026 = _2025 + 13u;
    float _2033 = _972 + (-1.0);
    float _2038 = (cbLight._m0[_2026].x * _2033) + 1.0;
    float _2039 = (cbLight._m0[_2026].y * _2033) + 1.0;
    float _2040 = (cbLight._m0[_2026].z * _2033) + 1.0;
    float _2041 = (cbLight._m0[_2026].w * _2033) + 1.0;
    uint _2042 = _2025 + 5u;
    float _2048 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
    uint _2052 = _2025 + 4u;
    float _2061 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    uint _2065 = _2025 | 1u;
    float _2076 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_822, _823, _824));
    float _2079 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_822, _823, _824));
    float _4227 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _4238 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2084 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * 0.3183098733425140380859375;
    float _2086 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * 0.3183098733425140380859375;
    float _2093 = ((cbLight._m0[_2042].x * _2048) * _2086) + (((cbLight._m0[_2052].x * _2017) * _2061) * _2084);
    float _2094 = ((_2048 * cbLight._m0[_2042].y) * _2086) + (((cbLight._m0[_2052].y * _2018) * _2061) * _2084);
    float _2095 = ((_2048 * cbLight._m0[_2042].z) * _2086) + (((cbLight._m0[_2052].z * _2019) * _2061) * _2084);
    uvec4 _2099 = floatBitsToUint(cbLight._m0[_2025 + 12u]);
    bool _2101 = _2099.x == 0u;
    float _2112;
    float _2114;
    float _2116;
    if (_2101)
    {
        _2112 = _2093;
        _2114 = _2094;
        _2116 = _2095;
    }
    else
    {
        uint _2120 = _2025 + 6u;
        float _2136 = (dot(vec3(cbLight._m0[_2025 + 2u].xyz), vec3(_822, _823, _824)) * 0.5) + 0.5;
        float _2137 = _2136 * _2136;
        float _4249 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2138 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2139 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2112 = (((cbLight._m0[_2120].x * 0.3183098733425140380859375) * _2138) * _2139) + _2093;
        _2114 = (((cbLight._m0[_2120].y * 0.3183098733425140380859375) * _2138) * _2139) + _2094;
        _2116 = (((cbLight._m0[_2120].z * 0.3183098733425140380859375) * _2138) * _2139) + _2095;
    }
    bool _2119 = _2099.y == 0u;
    float _2157;
    float _2159;
    float _2161;
    if (_2119)
    {
        _2157 = _2112;
        _2159 = _2114;
        _2161 = _2116;
    }
    else
    {
        uint _2319 = _2025 + 7u;
        float _2335 = (dot(vec3(cbLight._m0[_2025 + 3u].xyz), vec3(_822, _823, _824)) * 0.5) + 0.5;
        float _2336 = _2335 * _2335;
        float _4265 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2337 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2338 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2157 = (((cbLight._m0[_2319].x * 0.3183098733425140380859375) * _2337) * _2338) + _2112;
        _2159 = (((cbLight._m0[_2319].y * 0.3183098733425140380859375) * _2337) * _2338) + _2114;
        _2161 = (((cbLight._m0[_2319].z * 0.3183098733425140380859375) * _2337) * _2338) + _2116;
    }
    uint _2164 = _2025 + 8u;
    float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _825) * 0.949999988079071044921875);
    float _2178 = _2177 * _2177;
    float _2179 = cbLight._m0[_2025].x + _901;
    float _2180 = cbLight._m0[_2025].y + _902;
    float _2181 = cbLight._m0[_2025].z + _903;
    float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
    float _2186 = _2185 * _2179;
    float _2187 = _2185 * _2180;
    float _2188 = _2185 * _2181;
    float _2189 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2025].xyz));
    float _4281 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _4292 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _2193 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2194 = dot(vec3(_822, _823, _824), vec3(_2186, _2187, _2188));
    float _4303 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2198 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2186, _2187, _2188));
    float _4314 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2202 = _2178 * _2178;
    float _2206 = ((_2197 * _2197) * (_2202 + (-1.0))) + 1.0;
    float _2217 = (exp2(log2(1.0 - (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2218 = 1.0 - _2178;
    float _2229 = (0.5 / (((_2193 * ((_2192 * _2218) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_2193 * _2218) + _2178) * _2192))) * _2192;
    float _4325 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2202 / ((_2206 * _2206) * 3.141590118408203125));
    uint _2245 = _2025 + 9u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _825) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_2065].x + _901;
    float _2259 = cbLight._m0[_2065].y + _902;
    float _2260 = cbLight._m0[_2065].z + _903;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2065].xyz));
    float _4336 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2272 = dot(vec3(_822, _823, _824), vec3(_2265, _2266, _2267));
    float _4347 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2276 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2265, _2266, _2267));
    float _4358 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2280 = _2257 * _2257;
    float _2284 = ((_2275 * _2275) * (_2280 + (-1.0))) + 1.0;
    float _2293 = (exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2294 = 1.0 - _2257;
    float _2304 = (0.5 / (((_2193 * ((_2271 * _2294) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2193 * _2294) + _2257) * _2271))) * _2271;
    float _4369 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2306 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2280 / ((_2284 * _2284) * 3.141590118408203125));
    float _2316 = (((_2293 * cbLight._m0[_2245].x) * _2306) * _2048) + ((((cbLight._m0[_2164].x * _2017) * _2217) * _2231) * _2061);
    float _2317 = (((_2293 * cbLight._m0[_2245].y) * _2306) * _2048) + ((((cbLight._m0[_2164].y * _2018) * _2217) * _2231) * _2061);
    float _2318 = (((_2293 * cbLight._m0[_2245].z) * _2306) * _2048) + ((((cbLight._m0[_2164].z * _2019) * _2217) * _2231) * _2061);
    float _2380;
    float _2382;
    float _2384;
    if (_2101)
    {
        _2380 = _2316;
        _2382 = _2317;
        _2384 = _2318;
    }
    else
    {
        uint _2386 = _2025 + 2u;
        uint _2390 = _2025 + 10u;
        float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _825) * 0.949999988079071044921875);
        float _2405 = _2404 * _2404;
        float _2406 = cbLight._m0[_2386].x + _901;
        float _2407 = cbLight._m0[_2386].y + _902;
        float _2408 = cbLight._m0[_2386].z + _903;
        float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
        float _2413 = _2412 * _2406;
        float _2414 = _2412 * _2407;
        float _2415 = _2412 * _2408;
        float _2416 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2386].xyz));
        float _4380 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2420 = dot(vec3(_822, _823, _824), vec3(_2413, _2414, _2415));
        float _4391 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2424 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2413, _2414, _2415));
        float _4402 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2428 = _2405 * _2405;
        float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
        float _2441 = (exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2442 = 1.0 - _2405;
        float _2452 = (0.5 / (((_2193 * ((_2419 * _2442) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2193 * _2442) + _2405) * _2419))) * _2419;
        float _4413 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2454 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
        float _2455 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2380 = (((_2441 * cbLight._m0[_2390].x) * _2454) * _2455) + _2316;
        _2382 = (((_2441 * cbLight._m0[_2390].y) * _2454) * _2455) + _2317;
        _2384 = (((_2441 * cbLight._m0[_2390].z) * _2454) * _2455) + _2318;
    }
    float _2490;
    float _2492;
    float _2494;
    if (_2119)
    {
        _2490 = _2380;
        _2492 = _2382;
        _2494 = _2384;
    }
    else
    {
        uint _2501 = _2025 + 3u;
        uint _2505 = _2025 + 11u;
        float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2501].w)) * _825) * 0.949999988079071044921875);
        float _2520 = _2519 * _2519;
        float _2521 = cbLight._m0[_2501].x + _901;
        float _2522 = cbLight._m0[_2501].y + _902;
        float _2523 = cbLight._m0[_2501].z + _903;
        float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
        float _2528 = _2527 * _2521;
        float _2529 = _2527 * _2522;
        float _2530 = _2527 * _2523;
        float _2531 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2501].xyz));
        float _4429 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2535 = dot(vec3(_822, _823, _824), vec3(_2528, _2529, _2530));
        float _4440 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2539 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_2528, _2529, _2530));
        float _4451 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2543 = _2520 * _2520;
        float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
        float _2556 = (exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2557 = 1.0 - _2520;
        float _2567 = (0.5 / (((_2193 * ((_2534 * _2557) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2193 * _2557) + _2520) * _2534))) * _2534;
        float _4462 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2569 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
        float _2570 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2490 = (((_2556 * cbLight._m0[_2505].x) * _2569) * _2570) + _2380;
        _2492 = (((_2556 * cbLight._m0[_2505].y) * _2569) * _2570) + _2382;
        _2494 = (((_2556 * cbLight._m0[_2505].z) * _2569) * _2570) + _2384;
    }
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    if (_2023.y == 0u)
    {
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2645;
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2645;
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2645;
        uvec4 _2660 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2661 = _2660.x;
        uint _2672 = uint((float(_2660.y) * floor(float(uint(cbSceneParam._m0[85u].y * _910) / _2661))) + floor(float(uint(cbSceneParam._m0[85u].x * _909) / _2661)));
        float _2682 = (log2(_2648 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2683 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        uint _2686 = uint(isnan(14.0) ? _2683 : (isnan(_2683) ? 14.0 : min(_2683, 14.0)));
        uvec4 _2691 = texelFetch(g_lightClusterGridBuffer, int(((_2686 << 2u) + (_2672 << 6u)) >> 2u));
        uint _2692 = _2691.x;
        uint _2693 = _2660.z;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((((1u << ((_2693 >> 4u) & 15u)) + 4294967295u) & _2692) == 0u) || ((_2693 & 240u) == 0u))
        {
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
        }
        else
        {
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            uint _2944 = 0u;
            uint _2953;
            bool _2954;
            for (;;)
            {
                _2953 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_2944 << 2u)) >> 2u)).x;
                _2954 = _2953 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2954)
                {
                    frontier_phi_61_pred = _2938;
                    frontier_phi_61_pred_1 = _2943;
                    frontier_phi_61_pred_2 = _2942;
                    frontier_phi_61_pred_3 = _2941;
                    frontier_phi_61_pred_4 = _2940;
                    frontier_phi_61_pred_5 = _2939;
                }
                else
                {
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    uint _3068;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2943;
                    _3068 = _2953;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    for (;;)
                    {
                        uint _3072 = uint(findLSB(_3068)) + (_2944 << 5u);
                        uint _3069 = (_3068 + 4294967295u) & _3068;
                        uint _3074 = _3072 * 48u;
                        vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 3u)).x));
                        uint _3094 = (_3072 * 48u) + 4u;
                        vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 3u)).x));
                        uint _3113 = (_3072 * 48u) + 8u;
                        vec3 _3124 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x));
                        float _3128 = _3088.x - _2646;
                        float _3129 = _3088.y - _2647;
                        float _3130 = _3088.z - _2648;
                        float _3131 = dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130));
                        float _3134 = inversesqrt(_3131);
                        float _3135 = _3134 * _3128;
                        float _3136 = _3134 * _3129;
                        float _3137 = _3134 * _3130;
                        float _3138 = dot(vec3(_928, _931, _934), vec3(_3135, _3136, _3137));
                        float _3143 = 1.0 - (_3131 * _3088.w);
                        float _4488 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3144 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3145 = sqrt(_3131) * _3107.w;
                        float _3148 = 1.39999997615814208984375 / (_3145 + 1.39999997615814208984375);
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3138) + _3149;
                        float _3155 = _3145 * _3145;
                        float _3159 = ((isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0))) * _3144) / ((_3155 * 0.699999988079071044921875) + 1.0);
                        float _3163 = (-0.0) - _2646;
                        float _3164 = (-0.0) - _2647;
                        float _3165 = (-0.0) - _2648;
                        float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                        float _3170 = _3169 * _3163;
                        float _3171 = _3169 * _3164;
                        float _3172 = _3169 * _3165;
                        float _3180 = exp2(log2(1.0 / ((_3155 * 3.5) + 5.0)) * 0.25);
                        float _3181 = 1.0 - _988;
                        float _3188 = sqrt(1.0 - ((1.0 - (_3181 * _3181)) * (1.0 - (_3180 * _3180))));
                        float _3189 = _3188 * _3188;
                        float _3190 = _3189 * _3189;
                        float _3191 = _3170 + _3135;
                        float _3192 = _3171 + _3136;
                        float _3193 = _3172 + _3137;
                        float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                        float _3201 = dot(vec3(_928, _931, _934), vec3(_3170, _3171, _3172));
                        float _4504 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3205 = dot(vec3(_928, _931, _934), vec3(_3197 * _3191, _3197 * _3192, _3197 * _3193));
                        float _4515 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3212 = ((_3208 * _3208) * (_3190 + (-1.0))) + 1.0;
                        float _3213 = _3148 * _3189;
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3138) + _3214;
                        float _4526 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3219 = 1.0 - _3189;
                        float _3229 = (0.5 / (((_3218 * ((_3204 * _3219) + _3189)) + 9.9999999392252902907785028219223e-09) + (((_3218 * _3219) + _3189) * _3204))) * _3218;
                        float _4537 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3240 = (((_3190 * 3.1415927410125732421875) * (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) / ((_3212 * _3212) * ((_3155 * 2.1991131305694580078125) + 3.141590118408203125))) * _3144;
                        _2997 = (_3159 * _3107.x) + _3065;
                        _2998 = (_3159 * _3107.y) + _3066;
                        _2999 = (_3159 * _3107.z) + _3067;
                        _2994 = (_3240 * _3124.x) + _3062;
                        _2995 = (_3240 * _3124.y) + _3063;
                        _2996 = (_3240 * _3124.z) + _3064;
                        if (_3069 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _2999;
                            _3068 = _3069;
                        }
                    }
                    frontier_phi_61_pred = _2994;
                    frontier_phi_61_pred_1 = _2999;
                    frontier_phi_61_pred_2 = _2998;
                    frontier_phi_61_pred_3 = _2997;
                    frontier_phi_61_pred_4 = _2996;
                    frontier_phi_61_pred_5 = _2995;
                }
                _2794 = frontier_phi_61_pred;
                _2804 = frontier_phi_61_pred_1;
                _2802 = frontier_phi_61_pred_2;
                _2800 = frontier_phi_61_pred_3;
                _2798 = frontier_phi_61_pred_4;
                _2796 = frontier_phi_61_pred_5;
                uint _2945 = _2944 + 1u;
                if (_2945 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2938 = _2794;
                    _2939 = _2796;
                    _2940 = _2798;
                    _2941 = _2800;
                    _2942 = _2802;
                    _2943 = _2804;
                    _2944 = _2945;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
        }
        uvec4 _2807 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2808 = _2807.z;
        uint _2810 = (_2808 >> 8u) & 15u;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        if (((4294967295u << _2810) & _2692) == 0u)
        {
            _2906 = _2793;
            _2908 = _2795;
            _2910 = _2797;
            _2912 = _2799;
            _2914 = _2801;
            _2916 = _2803;
        }
        else
        {
            float _2931 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
            float _2932 = _2931 * _2646;
            float _2933 = _2931 * _2647;
            float _2934 = _2931 * _2648;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2810 < ((_2808 >> 12u) & 15u))
            {
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _3045 = _2793;
                float _3046 = _2795;
                float _3047 = _2797;
                float _3048 = _2799;
                float _3049 = _2801;
                float _3050 = _2803;
                uint _3051 = _2810;
                uint _3060;
                bool _3061;
                for (;;)
                {
                    _3060 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_3051 << 2u)) >> 2u)).x;
                    _3061 = _3060 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3061)
                    {
                        frontier_phi_67_pred = _3048;
                        frontier_phi_67_pred_1 = _3049;
                        frontier_phi_67_pred_2 = _3050;
                        frontier_phi_67_pred_3 = _3047;
                        frontier_phi_67_pred_4 = _3046;
                        frontier_phi_67_pred_5 = _3045;
                    }
                    else
                    {
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3258 = _3045;
                        float _3259 = _3046;
                        float _3260 = _3047;
                        float _3261 = _3048;
                        float _3262 = _3049;
                        float _3263 = _3050;
                        uint _3264 = _3060;
                        uint _3265;
                        vec4 _3290;
                        float _3291;
                        vec4 _3306;
                        vec3 _3318;
                        vec4 _3333;
                        vec4 _3348;
                        float _3394;
                        bool _3395;
                        for (;;)
                        {
                            uint _3275 = ((_3051 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3264));
                            _3265 = (_3264 + 4294967295u) & _3264;
                            uint _3277 = _3275 * 40u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            _3291 = _3290.w;
                            uint _3293 = (_3275 * 40u) + 4u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3308 = (_3275 * 40u) + 8u;
                            _3318 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x));
                            uint _3320 = (_3275 * 40u) + 16u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3275 * 40u) + 20u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3275 * 40u) + 24u;
                            vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3369 = (_3275 * 40u) + 28u;
                            vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3394 = fma(_2648, _3382.z, fma(_2647, _3382.y, _3382.x * _2646)) + _3382.w;
                            _3395 = !((fma(_2648, _3363.z, fma(_2647, _3363.y, _3363.x * _2646)) + _3363.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3395)
                            {
                                float _3422 = _3290.x - _2646;
                                float _3423 = _3290.y - _2647;
                                float _3424 = _3290.z - _2648;
                                float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                                float _3428 = inversesqrt(_3425);
                                float _3429 = _3428 * _3422;
                                float _3430 = _3428 * _3423;
                                float _3431 = _3428 * _3424;
                                float _3435 = 1.0 - (_3425 / (_3291 * _3291));
                                float _4548 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3440 = sqrt(_3425) * _3306.w;
                                float _3442 = 1.39999997615814208984375 / (_3440 + 1.39999997615814208984375);
                                float _3443 = _3442 * _3442;
                                float _3446 = ((1.0 - _3443) * dot(vec3(_3429, _3430, _3431), vec3(_928, _931, _934))) + _3443;
                                float _3449 = _3440 * _3440;
                                float _3453 = (fma(_2648, _3333.z, fma(_2647, _3333.y, _3333.x * _2646)) + _3333.w) / _3394;
                                float _3454 = (fma(_2648, _3348.z, fma(_2647, _3348.y, _3348.x * _2646)) + _3348.w) / _3394;
                                float _3458 = 1.0 - dot(vec2(_3453, _3454), vec2(_3453, _3454));
                                float _4564 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3460 = _3459 * (((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3436) / ((_3449 * 0.699999988079071044921875) + 1.0));
                                float _3472 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                                float _3473 = 1.0 - _988;
                                float _3480 = sqrt(1.0 - ((1.0 - (_3473 * _3473)) * (1.0 - (_3472 * _3472))));
                                float _3481 = _3480 * _3480;
                                float _3482 = _3481 * _3481;
                                float _3483 = _3429 - _2932;
                                float _3484 = _3430 - _2933;
                                float _3485 = _3431 - _2934;
                                float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                                float _3493 = dot(vec3(_928, _931, _934), vec3((-0.0) - _2932, (-0.0) - _2933, (-0.0) - _2934));
                                float _4575 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3496 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3497 = dot(vec3(_928, _931, _934), vec3(_3489 * _3483, _3489 * _3484, _3489 * _3485));
                                float _4586 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3500 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3504 = ((_3500 * _3500) * (_3482 + (-1.0))) + 1.0;
                                float _3505 = _3442 * _3481;
                                float _3506 = _3505 * _3505;
                                float _3512 = ((1.0 - _3506) * dot(vec3(_928, _931, _934), vec3(_3429, _3430, _3431))) + _3506;
                                float _4597 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3514 = 1.0 - _3481;
                                float _3524 = (0.5 / (((_3513 * ((_3496 * _3514) + _3481)) + 9.9999999392252902907785028219223e-09) + (((_3513 * _3514) + _3481) * _3496))) * _3513;
                                float _4608 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3534 = (_3459 * _3436) * (((_3482 * 3.1415927410125732421875) * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) / ((_3504 * _3504) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3534 * _3318.x;
                                frontier_phi_73_pred_1 = _3534 * _3318.y;
                                frontier_phi_73_pred_2 = _3460 * _3306.z;
                                frontier_phi_73_pred_3 = _3460 * _3306.y;
                                frontier_phi_73_pred_4 = _3460 * _3306.x;
                                frontier_phi_73_pred_5 = _3534 * _3318.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3538 = frontier_phi_73_pred;
                            _3539 = frontier_phi_73_pred_1;
                            _3543 = frontier_phi_73_pred_2;
                            _3542 = frontier_phi_73_pred_3;
                            _3541 = frontier_phi_73_pred_4;
                            _3540 = frontier_phi_73_pred_5;
                            _3248 = _3541 + _3261;
                            _3249 = _3542 + _3262;
                            _3250 = _3543 + _3263;
                            _3245 = _3538 + _3258;
                            _3246 = _3539 + _3259;
                            _3247 = _3540 + _3260;
                            if (_3265 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3265;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3248;
                        frontier_phi_67_pred_1 = _3249;
                        frontier_phi_67_pred_2 = _3250;
                        frontier_phi_67_pred_3 = _3247;
                        frontier_phi_67_pred_4 = _3246;
                        frontier_phi_67_pred_5 = _3245;
                    }
                    _2913 = frontier_phi_67_pred;
                    _2915 = frontier_phi_67_pred_1;
                    _2917 = frontier_phi_67_pred_2;
                    _2911 = frontier_phi_67_pred_3;
                    _2909 = frontier_phi_67_pred_4;
                    _2907 = frontier_phi_67_pred_5;
                    uint _3052 = _3051 + 1u;
                    if (_3052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3045 = _2907;
                        _3046 = _2909;
                        _3047 = _2911;
                        _3048 = _2913;
                        _3049 = _2915;
                        _3050 = _2917;
                        _3051 = _3052;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2915;
                frontier_phi_55_56_ladder_1 = _2917;
                frontier_phi_55_56_ladder_2 = _2913;
                frontier_phi_55_56_ladder_3 = _2911;
                frontier_phi_55_56_ladder_4 = _2909;
                frontier_phi_55_56_ladder_5 = _2907;
            }
            else
            {
                frontier_phi_55_56_ladder = _2801;
                frontier_phi_55_56_ladder_1 = _2803;
                frontier_phi_55_56_ladder_2 = _2799;
                frontier_phi_55_56_ladder_3 = _2797;
                frontier_phi_55_56_ladder_4 = _2795;
                frontier_phi_55_56_ladder_5 = _2793;
            }
            _2906 = frontier_phi_55_56_ladder_5;
            _2908 = frontier_phi_55_56_ladder_4;
            _2910 = frontier_phi_55_56_ladder_3;
            _2912 = frontier_phi_55_56_ladder_2;
            _2914 = frontier_phi_55_56_ladder;
            _2916 = frontier_phi_55_56_ladder_1;
        }
        float _2921 = isnan(1.0) ? _972 : (isnan(_972) ? 1.0 : min(_972, 1.0));
        _2705 = (_2921 * _2912) + _2157;
        _2707 = (_2921 * _2914) + _2159;
        _2709 = (_2921 * _2916) + _2161;
        _2711 = ((_2906 * 0.039999999105930328369140625) * _2921) + _2490;
        _2713 = ((_2908 * 0.039999999105930328369140625) * _2921) + _2492;
        _2715 = ((_2910 * 0.039999999105930328369140625) * _2921) + _2494;
    }
    else
    {
        _2705 = _2157;
        _2707 = _2159;
        _2709 = _2161;
        _2711 = _2490;
        _2713 = _2492;
        _2715 = _2494;
    }
    float _4624 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4635 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4646 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    uint _2735 = _272 + 6u;
    float _2743 = _909 / cbSceneParam._m0[86u].x;
    float _2744 = _910 / cbSceneParam._m0[86u].y;
    vec4 _2758 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2743, _2744, (log2((isnan(cbSceneParam._m0[77u].w) ? _843 : (isnan(_843) ? cbSceneParam._m0[77u].w : min(_843, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2760 = _2758.x;
    float _2761 = _2758.y;
    float _2762 = _2758.z;
    float _2763 = _2758.w;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    if (_843 > cbSceneParam._m0[78u].w)
    {
        float _2818 = isnan(_843) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _843 : min(cbSceneParam._m0[80u].w, _843));
        float _2819 = _2818 / _843;
        float _2830 = _2819 * _894;
        float _2831 = _895 * _2819;
        float _2832 = (-0.0) - _2831;
        float _2834 = _2819 * _896;
        float _2836 = (cbSceneParam._m0[77u].w * _2832) / _2818;
        float _2837 = _2836 + cbSceneParam._m0[79u].w;
        float _2838 = cbSceneParam._m0[79u].w - _2831;
        float _2844 = sqrt(((_2830 * _2830) + (_2831 * _2831)) + (_2834 * _2834));
        float _2847 = (1.0 - (cbSceneParam._m0[77u].w / _2818)) * _2844;
        float _2852 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2854 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3007;
        if (abs((_2832 - _2836) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3007 = ((((_2837 > 0.0) ? exp2(_2852 * _2837) : (2.0 - exp2(_2854 * _2837))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2847;
        }
        else
        {
            float _2967 = 1.0 / cbSceneParam._m0[80u].x;
            float _2968 = isnan(_2838) ? _2837 : (isnan(_2837) ? _2838 : max(_2837, _2838));
            float _2969 = isnan(_2838) ? _2837 : (isnan(_2837) ? _2838 : min(_2837, _2838));
            float _2978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : min(_2968, 0.0));
            float _2979 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : min(_2969, 0.0));
            _3007 = ((abs(_2844 / _2832) * cbSceneParam._m0[80u].y) * ((((_2978 - _2979) * 2.0) - ((exp2(_2852 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0)))) - exp2(_2852 * (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))))) * _2967)) - ((exp2(_2854 * _2978) - exp2(_2854 * _2979)) * _2967))) + (_2847 * cbSceneParam._m0[80u].z);
        }
        vec4 _3009 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2743, _2744, 1.0), 0.0);
        float _3018 = exp2((_3007 * (-1.44269502162933349609375)) * (1.0 - _3009.w));
        float _3019 = log2(_3018);
        float _3035 = log2(_2763);
        _2856 = (exp2(_3035 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3019 * cbSceneParam._m0[78u].x)) * _3009.x) / cbSceneParam._m0[78u].x)) + _2760;
        _2858 = (exp2(_3035 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3019 * cbSceneParam._m0[78u].y)) * _3009.y) / cbSceneParam._m0[78u].y)) + _2761;
        _2860 = (exp2(_3035 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3019 * cbSceneParam._m0[78u].z)) * _3009.z) / cbSceneParam._m0[78u].z)) + _2762;
        _2862 = _3018 * _2763;
    }
    else
    {
        _2856 = _2760;
        _2858 = _2761;
        _2860 = _2762;
        _2862 = _2763;
    }
    float _2874 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2875 = _2874 == 3.0;
    float _2876 = log2(_2862);
    float _2883 = exp2(_2876 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2705 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _972))) + ((_2711 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1776)) * cbPerFrame._m0[3u].x));
    float _2884 = exp2(_2876 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2707 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _972))) + ((_2713 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1776)) * cbPerFrame._m0[3u].x));
    float _2885 = exp2(_2876 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2709 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _972))) + ((_2715 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1776)) * cbPerFrame._m0[3u].x));
    float _2894 = (_2874 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2894 * (_2875 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2856)));
    SV_Target.y = _2894 * (_2875 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2858)));
    SV_Target.z = _2894 * (_2875 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2860)));
    SV_Target.w = cbInstanceData._m0[_2735].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2735].w;
}


