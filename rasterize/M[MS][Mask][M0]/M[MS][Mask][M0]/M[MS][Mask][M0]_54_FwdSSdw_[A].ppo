#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1291;
float _3676;
float _3677;
float _3678;
float _3679;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3688 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3699 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3710 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _434 = _432.x;
    float _446 = dot(vec4(_434, _432.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _463 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _397.x) * 2.0) - ((((_434 - _446) * cbMtdParam._m0[24u].z) + _446) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3721 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _471 = (_464 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _472 = (_464 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _473 = (_464 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _490 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _289) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _290) + cbTextureTilingScale._m0[3u].w));
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _512 = _510.x;
    float _522 = dot(vec4(_512, _510.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _536 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _397.y) * 2.0) - ((((_512 - _522) * cbMtdParam._m0[24u].z) + _522) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3732 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _547 = (_326.x * cbMtdParam._m0[9u].x) * ((_537 * ((_490.x * cbMtdParam._m0[13u].x) - _471)) + _471);
    float _548 = (_326.y * cbMtdParam._m0[9u].y) * ((_537 * ((_490.y * cbMtdParam._m0[13u].y) - _472)) + _472);
    float _549 = (_326.z * cbMtdParam._m0[9u].z) * ((_537 * ((_490.z * cbMtdParam._m0[13u].z) - _473)) + _473);
    float _553 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _547;
    float _556 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _548;
    float _559 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _549;
    float _567 = (((_547 - _553) * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) + _553) * 4.55000019073486328125;
    float _569 = (((_548 - _556) * (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) + _556) * 4.55000019073486328125;
    float _571 = (((_549 - _559) * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) + _559) * 4.55000019073486328125;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _623 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _625 = _623.x;
    float _626 = _623.y;
    float _627 = _623.z;
    float _634 = ((_606.x - _625) * _464) + _625;
    float _635 = ((_606.y - _626) * _464) + _626;
    float _636 = ((_606.z - _627) * _464) + _627;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _289) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _290) + cbTextureTilingScale._m0[2u].w));
    float _661 = ((_648.z - _636) * _537) + _636;
    float _664 = ((((_648.x - _634) * _537) + _634) * 2.0) + (-1.0);
    float _665 = ((((_648.y - _635) * _537) + _635) * 2.0) + (-1.0);
    float _666 = dot(vec2(_664, _665), vec2(_664, _665));
    float _3743 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _671 = sqrt(1.0 - (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _703 = (_664 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_583.x * 2.0) + (-1.0)))) + (((_691.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _704 = (_665 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_583.y * 2.0) + (-1.0)))) + (((_691.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _709 = (((_583.z - _661) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _661;
    float _713 = ((_691.z - _709) * cbMtdParam._m0[19u].w) + _709;
    float _715 = cbMtdParam._m0[22u].x + _691.w;
    float _718 = fma(_671, _236 * NORMAL.x, fma(_704, _243 * TANGENT.x, (_229 * _221) * _703));
    float _721 = fma(_671, _236 * NORMAL.y, fma(_704, _243 * TANGENT.y, (_229 * _222) * _703));
    float _724 = fma(_671, _236 * NORMAL.z, fma(_704, _243 * TANGENT.z, (_229 * _223) * _703));
    float _728 = inversesqrt(dot(vec3(_718, _721, _724), vec3(_718, _721, _724)));
    float _729 = _728 * _718;
    float _730 = _728 * _721;
    float _731 = _728 * _724;
    float _3754 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _732 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _3776 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3787 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3798 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _750 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _801 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _791);
    float _802 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _791);
    float _803 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _791);
    float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
    float _808 = _801 * _807;
    float _809 = _802 * _807;
    float _810 = _803 * _807;
    vec4 _815 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _817 = _815.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _971 = sqrt(((_801 * _801) + (_802 * _802)) + (_803 * _803));
        float _977 = (cbMatDynParam._m0[5u].x * _971) + cbMatDynParam._m0[5u].y;
        float _3809 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _982 = (cbMatDynParam._m0[5u].z * _971) + cbMatDynParam._m0[5u].w;
        float _3820 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) - _978)) + _978) < ((_817 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _828 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _829 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _847 = fma(_731, cbSceneParam._m0[5u].z, fma(_730, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _729));
    float _850 = fma(_731, cbSceneParam._m0[6u].z, fma(_730, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _729));
    float _853 = fma(_731, cbSceneParam._m0[7u].z, fma(_730, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _729));
    uint _866 = _270 + 9u;
    uint _867 = _866 + uint(cbMatDynParam._m0[0u].w);
    float _873 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) * cbInstanceData._m0[_867].x;
    float _874 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbInstanceData._m0[_867].y;
    float _875 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * cbInstanceData._m0[_867].z;
    float _3831 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    vec4 _887 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _828, cbSceneParam._m0[86u].y * _829));
    float _891 = ((isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * TEXCOORD_5.w) * _887.x;
    float _892 = dot(vec3(_729, _730, _731), vec3(_808, _809, _810));
    float _895 = _892 * 2.0;
    float _899 = (_895 * _729) - _808;
    float _900 = (_895 * _730) - _809;
    float _901 = (_895 * _731) - _810;
    float _905 = abs(dot(vec3(_808, _809, _810), vec3(_729, _730, _731)));
    float _3864 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _907 = sqrt(_732);
    float _920 = exp2((_907 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_907 * 3.0));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1290;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1015 = fma(_960, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952));
        float _1019 = fma(_960, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952));
        float _1023 = fma(_960, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952));
        float _1048 = _952 + _729;
        float _1049 = _956 + _730;
        float _1050 = _960 + _731;
        float _1060 = fma(_1050, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048)) - _1015;
        float _1061 = fma(_1050, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048)) - _1019;
        float _1062 = fma(_1050, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048)) - _1023;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1015 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1019 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[34u].z) + ((((((_1023 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1118 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1084.x + (-0.5));
        float _1120 = _1118 * (_1084.y + (-0.5));
        float _1121 = _1118 * (_1084.z + (-0.5));
        float _1128 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1091.x + (-0.5));
        float _1130 = _1128 * (_1091.y + (-0.5));
        float _1131 = _1128 * (_1091.z + (-0.5));
        float _1138 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1098.x + (-0.5));
        float _1140 = _1138 * (_1098.y + (-0.5));
        float _1141 = _1138 * (_1098.z + (-0.5));
        float _1148 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1105.x + (-0.5));
        float _1150 = _1148 * (_1105.y + (-0.5));
        float _1151 = _1148 * (_1105.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1172 = (dot(vec3(_729, _730, _731), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1182 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3912 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1184 + 1.0))) + _1189) * _1152;
        float _1199 = _1120 * 0.5;
        float _1200 = _1130 * 0.5;
        float _1201 = _1140 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_729, _730, _731), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3945 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1226 + 1.0))) + _1231) * _1153;
        float _1241 = _1121 * 0.5;
        float _1242 = _1131 * 0.5;
        float _1243 = _1141 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_729, _730, _731), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3978 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1268 + 1.0))) + _1273) * _1154;
        _1290 = _1121;
        _1292 = _1120;
        _1293 = _1119;
        _1294 = _1131;
        _1295 = _1130;
        _1296 = _1129;
        _1297 = _1141;
        _1298 = _1140;
        _1299 = _1139;
        _1300 = _1154;
        _1301 = _1153;
        _1302 = _1152;
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _1291;
        _1292 = _1291;
        _1293 = _1291;
        _1294 = _1291;
        _1295 = _1291;
        _1296 = _1291;
        _1297 = _1291;
        _1298 = _1291;
        _1299 = _1291;
        _1300 = _1291;
        _1301 = _1291;
        _1302 = _1291;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1332 = fma(_960, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952));
        float _1336 = fma(_960, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952));
        float _1340 = fma(_960, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952));
        float _1363 = _952 + _729;
        float _1364 = _956 + _730;
        float _1365 = _960 + _731;
        float _1375 = fma(_1365, cbModelParam._m0[30u].z, fma(_1364, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1363)) - _1332;
        float _1376 = fma(_1365, cbModelParam._m0[31u].z, fma(_1364, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1363)) - _1336;
        float _1377 = fma(_1365, cbModelParam._m0[32u].z, fma(_1364, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1363)) - _1340;
        float _1381 = inversesqrt(dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377)));
        float _1394 = ((_1381 * _1375) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1332 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1395 = ((_1381 * _1376) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1336 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1381 * _1377) / cbModelParam._m0[35u].z) + ((((((_1340 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        float _1431 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1398.x + (-0.5));
        float _1433 = _1431 * (_1398.y + (-0.5));
        float _1434 = _1431 * (_1398.z + (-0.5));
        float _1441 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1405.x + (-0.5));
        float _1443 = _1441 * (_1405.y + (-0.5));
        float _1444 = _1441 * (_1405.z + (-0.5));
        float _1451 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1412.x + (-0.5));
        float _1453 = _1451 * (_1412.y + (-0.5));
        float _1454 = _1451 * (_1412.z + (-0.5));
        float _1461 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1419.x + (-0.5));
        float _1463 = _1461 * (_1419.y + (-0.5));
        float _1464 = _1461 * (_1419.z + (-0.5));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = _1432 * 0.5;
        float _1469 = _1442 * 0.5;
        float _1470 = _1452 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_729, _730, _731), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4041 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1495 + 1.0))) + _1500) * _1465;
        float _1510 = _1433 * 0.5;
        float _1511 = _1443 * 0.5;
        float _1512 = _1453 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_729, _730, _731), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4074 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1537 + 1.0))) + _1542) * _1466;
        float _1552 = _1434 * 0.5;
        float _1553 = _1444 * 0.5;
        float _1554 = _1454 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_729, _730, _731), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4107 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1579 + 1.0))) + _1584) * _1467;
        _1601 = _1434;
        _1602 = _1433;
        _1603 = _1432;
        _1604 = _1444;
        _1605 = _1443;
        _1606 = _1442;
        _1607 = _1454;
        _1608 = _1453;
        _1609 = _1452;
        _1610 = _1467;
        _1611 = _1466;
        _1612 = _1465;
        _1613 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
    }
    else
    {
        _1601 = _1291;
        _1602 = _1291;
        _1603 = _1291;
        _1604 = _1291;
        _1605 = _1291;
        _1606 = _1291;
        _1607 = _1291;
        _1608 = _1291;
        _1609 = _1291;
        _1610 = _1291;
        _1611 = _1291;
        _1612 = _1291;
        _1613 = 0.0;
        _1614 = 0.0;
        _1615 = 0.0;
    }
    float _1625 = (cbModelParam._m0[1u].x * (_1613 - _1303)) + _1303;
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1304)) + _1304;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1305)) + _1305;
    float _1648 = fma(_1627, cbSceneParam._m0[89u].z, fma(_1626, cbSceneParam._m0[89u].y, _1625 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1627, cbSceneParam._m0[90u].z, fma(_1626, cbSceneParam._m0[90u].y, _1625 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1627, cbSceneParam._m0[91u].z, fma(_1626, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1625));
    float _1669 = _899 * 0.5;
    float _1670 = _900 * 0.5;
    float _1671 = _901 * 0.5;
    float _1672 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1675 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1678 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1601, _1604, _1607, _1610));
    float _1712;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1685 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1290, _1294, _1297, _1300));
        float _1689 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1693 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1700 = dot(vec4(cbModelParam._m0[39u]), vec4(_1669, _1670, _1671, 1.0));
        _1712 = dot(vec3(isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1712 = 1.0;
    }
    float _1723;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1714 = dot(vec4(cbModelParam._m0[40u]), vec4(_1669, _1670, _1671, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1714) ? 0.0 : (isnan(0.0) ? _1714 : max(0.0, _1714))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1727 = (_1723 * cbModelParam._m0[1u].x) + (_1712 * (1.0 - cbModelParam._m0[1u].x));
    float _1737 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _732);
    float _1738 = isnan(_1737) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1737 : min(cbModelParam._m0[25u].z, _1737));
    float _1820;
    float _1822;
    float _1824;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1787 = fma(_960, cbModelParam._m0[13u].z, fma(_956, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952)) + cbModelParam._m0[13u].w;
        float _1791 = fma(_960, cbModelParam._m0[14u].z, fma(_956, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952)) + cbModelParam._m0[14u].w;
        float _1795 = fma(_960, cbModelParam._m0[15u].z, fma(_956, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952)) + cbModelParam._m0[15u].w;
        float _1798 = fma(_901, cbModelParam._m0[13u].z, fma(_900, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _899));
        float _1801 = fma(_901, cbModelParam._m0[14u].z, fma(_900, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _899));
        float _1804 = fma(_901, cbModelParam._m0[15u].z, fma(_900, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _899));
        float _1832;
        if (_1798 > 0.0)
        {
            _1832 = abs((1.0 - _1787) / _1798);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1787 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1832 = frontier_phi_17_15_ladder;
        }
        float _2055;
        if (_1801 > 0.0)
        {
            _2055 = abs((1.0 - _1791) / _1801);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1791 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2055 = frontier_phi_26_22_ladder;
        }
        float _2301;
        if (_1804 > 0.0)
        {
            _2301 = abs((1.0 - _1795) / _1804);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1795 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2301 = frontier_phi_38_33_ladder;
        }
        float _2303 = isnan(_2055) ? _1832 : (isnan(_1832) ? _2055 : min(_1832, _2055));
        float _2304 = isnan(_2301) ? _2303 : (isnan(_2303) ? _2301 : min(_2303, _2301));
        float _2308 = (_2304 * _1798) + _1787;
        float _2309 = (_2304 * _1801) + _1791;
        float _2310 = (_2304 * _1804) + _1795;
        float _2311 = _2304 * 9.9999997473787516355514526367188e-05;
        float _2313 = (-1.0) - _2311;
        float _2315 = _2311 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2310 > _2315) || ((_2310 < _2313) || ((_2309 > _2315) || ((_2309 < _2313) || ((_2308 < _2313) || (_2308 > _2315))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2434 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2310, cbModelParam._m0[9u].z, fma(_2309, cbModelParam._m0[9u].y, _2308 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2310, cbModelParam._m0[10u].z, fma(_2309, cbModelParam._m0[10u].y, _2308 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2310, cbModelParam._m0[11u].z, fma(_2309, cbModelParam._m0[11u].y, _2308 * cbModelParam._m0[11u].x))), _1738);
            frontier_phi_16_38_ladder = _2434.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2434.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2434.x * cbModelParam._m0[1u].y;
        }
        _1820 = frontier_phi_16_38_ladder_2;
        _1822 = frontier_phi_16_38_ladder_1;
        _1824 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_899, _900, _901), _1738);
        _1820 = _1808.x * cbModelParam._m0[1u].y;
        _1822 = _1808.y * cbModelParam._m0[1u].y;
        _1824 = _1808.z * cbModelParam._m0[1u].y;
    }
    float _1828 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _732);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1828 : min(cbModelParam._m0[25u].w, _1828));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1884 = fma(_960, cbModelParam._m0[21u].z, fma(_956, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952)) + cbModelParam._m0[21u].w;
        float _1888 = fma(_960, cbModelParam._m0[22u].z, fma(_956, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952)) + cbModelParam._m0[22u].w;
        float _1892 = fma(_960, cbModelParam._m0[23u].z, fma(_956, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952)) + cbModelParam._m0[23u].w;
        float _1895 = fma(_901, cbModelParam._m0[21u].z, fma(_900, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _899));
        float _1898 = fma(_901, cbModelParam._m0[22u].z, fma(_900, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _899));
        float _1901 = fma(_901, cbModelParam._m0[23u].z, fma(_900, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _899));
        float _2060;
        if (_1895 > 0.0)
        {
            _2060 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2060 = frontier_phi_28_24_ladder;
        }
        float _2328;
        if (_1898 > 0.0)
        {
            _2328 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2328 = frontier_phi_40_35_ladder;
        }
        float _2533;
        if (_1901 > 0.0)
        {
            _2533 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2533 = frontier_phi_49_46_ladder;
        }
        float _2535 = isnan(_2328) ? _2060 : (isnan(_2060) ? _2328 : min(_2060, _2328));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _1895) + _1884;
        float _2541 = (_2536 * _1898) + _1888;
        float _2542 = (_2536 * _1901) + _1892;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2544 = (-1.0) - _2543;
        float _2546 = _2543 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2542 > _2546) || ((_2542 < _2544) || ((_2541 > _2546) || ((_2541 < _2544) || ((_2540 < _2544) || (_2540 > _2546))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2542, cbModelParam._m0[17u].z, fma(_2541, cbModelParam._m0[17u].y, _2540 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2542, cbModelParam._m0[18u].z, fma(_2541, cbModelParam._m0[18u].y, _2540 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2542, cbModelParam._m0[19u].z, fma(_2541, cbModelParam._m0[19u].y, _2540 * cbModelParam._m0[19u].x))), _1829);
            frontier_phi_25_49_ladder = _2741.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2741.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2741.x * cbModelParam._m0[1u].z;
        }
        _1920 = frontier_phi_25_49_ladder_2;
        _1922 = frontier_phi_25_49_ladder_1;
        _1924 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_899, _900, _901), _1829);
        _1920 = _1904.x * cbModelParam._m0[1u].z;
        _1922 = _1904.y * cbModelParam._m0[1u].z;
        _1924 = _1904.z * cbModelParam._m0[1u].z;
    }
    float _1936 = ((((1.0 - _920) * ((_907 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_920 * _907)) * _891;
    float _1937 = _1936 * ((cbModelParam._m0[1u].w * (_1920 - _1820)) + _1820);
    float _1938 = _1936 * ((cbModelParam._m0[1u].w * (_1922 - _1822)) + _1822);
    float _1939 = _1936 * ((cbModelParam._m0[1u].w * (_1924 - _1824)) + _1824);
    float _1942 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1937 * cbSceneParam._m0[89u].x));
    float _1945 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1937 * cbSceneParam._m0[90u].x));
    float _1948 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, _1937 * cbSceneParam._m0[91u].x));
    vec4 _1956 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_828, _829));
    float _1958 = _1956.w;
    float _1970 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1958);
    float _1971 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1958);
    float _1972 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1958);
    uvec4 _1976 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1978 = _1976.x * 14u;
    uint _1979 = _1978 + 13u;
    float _1986 = _891 + (-1.0);
    float _1991 = (cbLight._m0[_1979].x * _1986) + 1.0;
    float _1992 = (cbLight._m0[_1979].y * _1986) + 1.0;
    float _1993 = (cbLight._m0[_1979].z * _1986) + 1.0;
    float _1994 = (cbLight._m0[_1979].w * _1986) + 1.0;
    uint _1995 = _1978 + 5u;
    float _2001 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2005 = _1978 + 4u;
    float _2014 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
    uint _2018 = _1978 | 1u;
    float _2029 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_729, _730, _731));
    float _2032 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_729, _730, _731));
    float _4243 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _4254 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2037 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.3183098733425140380859375;
    float _2039 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.3183098733425140380859375;
    float _2046 = ((cbLight._m0[_1995].x * _2001) * _2039) + (((cbLight._m0[_2005].x * _1970) * _2014) * _2037);
    float _2047 = ((_2001 * cbLight._m0[_1995].y) * _2039) + (((cbLight._m0[_2005].y * _1971) * _2014) * _2037);
    float _2048 = ((_2001 * cbLight._m0[_1995].z) * _2039) + (((cbLight._m0[_2005].z * _1972) * _2014) * _2037);
    uvec4 _2052 = floatBitsToUint(cbLight._m0[_1978 + 12u]);
    bool _2054 = _2052.x == 0u;
    float _2065;
    float _2067;
    float _2069;
    if (_2054)
    {
        _2065 = _2046;
        _2067 = _2047;
        _2069 = _2048;
    }
    else
    {
        uint _2073 = _1978 + 6u;
        float _2089 = (dot(vec3(cbLight._m0[_1978 + 2u].xyz), vec3(_729, _730, _731)) * 0.5) + 0.5;
        float _2090 = _2089 * _2089;
        float _4265 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2091 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2092 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2065 = (((cbLight._m0[_2073].x * 0.3183098733425140380859375) * _2091) * _2092) + _2046;
        _2067 = (((cbLight._m0[_2073].y * 0.3183098733425140380859375) * _2091) * _2092) + _2047;
        _2069 = (((cbLight._m0[_2073].z * 0.3183098733425140380859375) * _2091) * _2092) + _2048;
    }
    bool _2072 = _2052.y == 0u;
    float _2110;
    float _2112;
    float _2114;
    if (_2072)
    {
        _2110 = _2065;
        _2112 = _2067;
        _2114 = _2069;
    }
    else
    {
        uint _2272 = _1978 + 7u;
        float _2288 = (dot(vec3(cbLight._m0[_1978 + 3u].xyz), vec3(_729, _730, _731)) * 0.5) + 0.5;
        float _2289 = _2288 * _2288;
        float _4281 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2290 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2291 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2110 = (((cbLight._m0[_2272].x * 0.3183098733425140380859375) * _2290) * _2291) + _2065;
        _2112 = (((cbLight._m0[_2272].y * 0.3183098733425140380859375) * _2290) * _2291) + _2067;
        _2114 = (((cbLight._m0[_2272].z * 0.3183098733425140380859375) * _2290) * _2291) + _2069;
    }
    uint _2117 = _1978 + 8u;
    float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _732) * 0.949999988079071044921875);
    float _2131 = _2130 * _2130;
    float _2132 = cbLight._m0[_1978].x + _808;
    float _2133 = cbLight._m0[_1978].y + _809;
    float _2134 = cbLight._m0[_1978].z + _810;
    float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
    float _2139 = _2138 * _2132;
    float _2140 = _2138 * _2133;
    float _2141 = _2138 * _2134;
    float _2142 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_1978].xyz));
    float _4297 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _4308 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _2146 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2147 = dot(vec3(_729, _730, _731), vec3(_2139, _2140, _2141));
    float _4319 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2151 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2139, _2140, _2141));
    float _4330 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2155 = _2131 * _2131;
    float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
    float _2170 = (exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2171 = 1.0 - _2131;
    float _2182 = (0.5 / (((_2146 * ((_2145 * _2171) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2171) + _2131) * _2145))) * _2145;
    float _4341 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2184 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
    uint _2198 = _1978 + 9u;
    float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _732) * 0.949999988079071044921875);
    float _2210 = _2209 * _2209;
    float _2211 = cbLight._m0[_2018].x + _808;
    float _2212 = cbLight._m0[_2018].y + _809;
    float _2213 = cbLight._m0[_2018].z + _810;
    float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
    float _2218 = _2217 * _2211;
    float _2219 = _2217 * _2212;
    float _2220 = _2217 * _2213;
    float _2221 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2018].xyz));
    float _4352 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2225 = dot(vec3(_729, _730, _731), vec3(_2218, _2219, _2220));
    float _4363 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2229 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2218, _2219, _2220));
    float _4374 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2233 = _2210 * _2210;
    float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
    float _2246 = (exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2247 = 1.0 - _2210;
    float _2257 = (0.5 / (((_2146 * ((_2224 * _2247) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2247) + _2210) * _2224))) * _2224;
    float _4385 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2259 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
    float _2269 = (((_2246 * cbLight._m0[_2198].x) * _2259) * _2001) + ((((cbLight._m0[_2117].x * _1970) * _2170) * _2184) * _2014);
    float _2270 = (((_2246 * cbLight._m0[_2198].y) * _2259) * _2001) + ((((cbLight._m0[_2117].y * _1971) * _2170) * _2184) * _2014);
    float _2271 = (((_2246 * cbLight._m0[_2198].z) * _2259) * _2001) + ((((cbLight._m0[_2117].z * _1972) * _2170) * _2184) * _2014);
    float _2333;
    float _2335;
    float _2337;
    if (_2054)
    {
        _2333 = _2269;
        _2335 = _2270;
        _2337 = _2271;
    }
    else
    {
        uint _2339 = _1978 + 2u;
        uint _2343 = _1978 + 10u;
        float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _732) * 0.949999988079071044921875);
        float _2358 = _2357 * _2357;
        float _2359 = cbLight._m0[_2339].x + _808;
        float _2360 = cbLight._m0[_2339].y + _809;
        float _2361 = cbLight._m0[_2339].z + _810;
        float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
        float _2366 = _2365 * _2359;
        float _2367 = _2365 * _2360;
        float _2368 = _2365 * _2361;
        float _2369 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2339].xyz));
        float _4396 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2373 = dot(vec3(_729, _730, _731), vec3(_2366, _2367, _2368));
        float _4407 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2377 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2366, _2367, _2368));
        float _4418 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _2358 * _2358;
        float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
        float _2394 = (exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2395 = 1.0 - _2358;
        float _2405 = (0.5 / (((_2146 * ((_2372 * _2395) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2395) + _2358) * _2372))) * _2372;
        float _4429 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2407 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
        float _2408 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2333 = (((_2394 * cbLight._m0[_2343].x) * _2407) * _2408) + _2269;
        _2335 = (((_2394 * cbLight._m0[_2343].y) * _2407) * _2408) + _2270;
        _2337 = (((_2394 * cbLight._m0[_2343].z) * _2407) * _2408) + _2271;
    }
    float _2443;
    float _2445;
    float _2447;
    if (_2072)
    {
        _2443 = _2333;
        _2445 = _2335;
        _2447 = _2337;
    }
    else
    {
        uint _2454 = _1978 + 3u;
        uint _2458 = _1978 + 11u;
        float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2454].w)) * _732) * 0.949999988079071044921875);
        float _2473 = _2472 * _2472;
        float _2474 = cbLight._m0[_2454].x + _808;
        float _2475 = cbLight._m0[_2454].y + _809;
        float _2476 = cbLight._m0[_2454].z + _810;
        float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
        float _2481 = _2480 * _2474;
        float _2482 = _2480 * _2475;
        float _2483 = _2480 * _2476;
        float _2484 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2454].xyz));
        float _4445 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2488 = dot(vec3(_729, _730, _731), vec3(_2481, _2482, _2483));
        float _4456 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2492 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_2481, _2482, _2483));
        float _4467 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2496 = _2473 * _2473;
        float _2500 = ((_2491 * _2491) * (_2496 + (-1.0))) + 1.0;
        float _2509 = (exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2510 = 1.0 - _2473;
        float _2520 = (0.5 / (((_2146 * ((_2487 * _2510) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2510) + _2473) * _2487))) * _2487;
        float _4478 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2522 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2496 / ((_2500 * _2500) * 3.141590118408203125));
        float _2523 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2443 = (((_2509 * cbLight._m0[_2458].x) * _2522) * _2523) + _2333;
        _2445 = (((_2509 * cbLight._m0[_2458].y) * _2522) * _2523) + _2335;
        _2447 = (((_2509 * cbLight._m0[_2458].z) * _2522) * _2523) + _2337;
    }
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    if (_1976.y == 0u)
    {
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2598;
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2598;
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2598;
        uvec4 _2613 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2614 = _2613.x;
        uint _2625 = uint((float(_2613.y) * floor(float(uint(cbSceneParam._m0[85u].y * _829) / _2614))) + floor(float(uint(cbSceneParam._m0[85u].x * _828) / _2614)));
        float _2635 = (log2(_2601 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2636 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        uint _2639 = uint(isnan(14.0) ? _2636 : (isnan(_2636) ? 14.0 : min(_2636, 14.0)));
        uvec4 _2644 = texelFetch(g_lightClusterGridBuffer, int(((_2639 << 2u) + (_2625 << 6u)) >> 2u));
        uint _2645 = _2644.x;
        uint _2646 = _2613.z;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        if (((((1u << ((_2646 >> 4u) & 15u)) + 4294967295u) & _2645) == 0u) || ((_2646 & 240u) == 0u))
        {
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
        }
        else
        {
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            uint _2905 = 0u;
            uint _2914;
            bool _2915;
            for (;;)
            {
                _2914 = texelFetch(g_lightClassification, int((((_2639 << 5u) + (_2625 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                _2915 = _2914 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2915)
                {
                    frontier_phi_66_pred = _2899;
                    frontier_phi_66_pred_1 = _2904;
                    frontier_phi_66_pred_2 = _2903;
                    frontier_phi_66_pred_3 = _2902;
                    frontier_phi_66_pred_4 = _2901;
                    frontier_phi_66_pred_5 = _2900;
                }
                else
                {
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    uint _3050;
                    _3044 = _2899;
                    _3045 = _2900;
                    _3046 = _2901;
                    _3047 = _2902;
                    _3048 = _2903;
                    _3049 = _2904;
                    _3050 = _2914;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    for (;;)
                    {
                        uint _3054 = uint(findLSB(_3050)) + (_2905 << 5u);
                        uint _3051 = (_3050 + 4294967295u) & _3050;
                        uint _3056 = _3054 * 48u;
                        vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 3u)).x));
                        uint _3076 = (_3054 * 48u) + 4u;
                        vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 3u)).x));
                        uint _3095 = (_3054 * 48u) + 8u;
                        vec3 _3106 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3095)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 2u)).x));
                        float _3110 = _3070.x - _2599;
                        float _3111 = _3070.y - _2600;
                        float _3112 = _3070.z - _2601;
                        float _3113 = dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112));
                        float _3116 = inversesqrt(_3113);
                        float _3117 = _3116 * _3110;
                        float _3118 = _3116 * _3111;
                        float _3119 = _3116 * _3112;
                        float _3120 = dot(vec3(_847, _850, _853), vec3(_3117, _3118, _3119));
                        float _3125 = 1.0 - (_3113 * _3070.w);
                        float _4504 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3126 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3127 = sqrt(_3113) * _3089.w;
                        float _3130 = 1.39999997615814208984375 / (_3127 + 1.39999997615814208984375);
                        float _3131 = _3130 * _3130;
                        float _3134 = ((1.0 - _3131) * _3120) + _3131;
                        float _3137 = _3127 * _3127;
                        float _3141 = ((isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))) * _3126) / ((_3137 * 0.699999988079071044921875) + 1.0);
                        float _3145 = (-0.0) - _2599;
                        float _3146 = (-0.0) - _2600;
                        float _3147 = (-0.0) - _2601;
                        float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                        float _3152 = _3151 * _3145;
                        float _3153 = _3151 * _3146;
                        float _3154 = _3151 * _3147;
                        float _3162 = exp2(log2(1.0 / ((_3137 * 3.5) + 5.0)) * 0.25);
                        float _3163 = 1.0 - _907;
                        float _3170 = sqrt(1.0 - ((1.0 - (_3163 * _3163)) * (1.0 - (_3162 * _3162))));
                        float _3171 = _3170 * _3170;
                        float _3172 = _3171 * _3171;
                        float _3173 = _3152 + _3117;
                        float _3174 = _3153 + _3118;
                        float _3175 = _3154 + _3119;
                        float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
                        float _3183 = dot(vec3(_847, _850, _853), vec3(_3152, _3153, _3154));
                        float _4520 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3186 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3187 = dot(vec3(_847, _850, _853), vec3(_3179 * _3173, _3179 * _3174, _3179 * _3175));
                        float _4531 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3194 = ((_3190 * _3190) * (_3172 + (-1.0))) + 1.0;
                        float _3195 = _3130 * _3171;
                        float _3196 = _3195 * _3195;
                        float _3199 = ((1.0 - _3196) * _3120) + _3196;
                        float _4542 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3200 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3201 = 1.0 - _3171;
                        float _3211 = (0.5 / (((_3200 * ((_3186 * _3201) + _3171)) + 9.9999999392252902907785028219223e-09) + (((_3200 * _3201) + _3171) * _3186))) * _3200;
                        float _4553 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3222 = (((_3172 * 3.1415927410125732421875) * (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) / ((_3194 * _3194) * ((_3137 * 2.1991131305694580078125) + 3.141590118408203125))) * _3126;
                        _2974 = (_3141 * _3089.x) + _3047;
                        _2975 = (_3141 * _3089.y) + _3048;
                        _2976 = (_3141 * _3089.z) + _3049;
                        _2971 = (_3222 * _3106.x) + _3044;
                        _2972 = (_3222 * _3106.y) + _3045;
                        _2973 = (_3222 * _3106.z) + _3046;
                        if (_3051 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3044 = _2971;
                            _3045 = _2972;
                            _3046 = _2973;
                            _3047 = _2974;
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _3051;
                        }
                    }
                    frontier_phi_66_pred = _2971;
                    frontier_phi_66_pred_1 = _2976;
                    frontier_phi_66_pred_2 = _2975;
                    frontier_phi_66_pred_3 = _2974;
                    frontier_phi_66_pred_4 = _2973;
                    frontier_phi_66_pred_5 = _2972;
                }
                _2747 = frontier_phi_66_pred;
                _2757 = frontier_phi_66_pred_1;
                _2755 = frontier_phi_66_pred_2;
                _2753 = frontier_phi_66_pred_3;
                _2751 = frontier_phi_66_pred_4;
                _2749 = frontier_phi_66_pred_5;
                uint _2906 = _2905 + 1u;
                if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2899 = _2747;
                    _2900 = _2749;
                    _2901 = _2751;
                    _2902 = _2753;
                    _2903 = _2755;
                    _2904 = _2757;
                    _2905 = _2906;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
        }
        uvec4 _2760 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2761 = _2760.z;
        uint _2763 = (_2761 >> 8u) & 15u;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        if (((4294967295u << _2763) & _2645) == 0u)
        {
            _2867 = _2746;
            _2869 = _2748;
            _2871 = _2750;
            _2873 = _2752;
            _2875 = _2754;
            _2877 = _2756;
        }
        else
        {
            float _2892 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
            float _2893 = _2892 * _2599;
            float _2894 = _2892 * _2600;
            float _2895 = _2892 * _2601;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2763 < ((_2761 >> 12u) & 15u))
            {
                float _2868;
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _3027 = _2746;
                float _3028 = _2748;
                float _3029 = _2750;
                float _3030 = _2752;
                float _3031 = _2754;
                float _3032 = _2756;
                uint _3033 = _2763;
                uint _3042;
                bool _3043;
                for (;;)
                {
                    _3042 = texelFetch(g_lightClassification, int((((_2639 << 5u) + (_2625 << 9u)) + (_3033 << 2u)) >> 2u)).x;
                    _3043 = _3042 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3043)
                    {
                        frontier_phi_77_pred = _3032;
                        frontier_phi_77_pred_1 = _3031;
                        frontier_phi_77_pred_2 = _3030;
                        frontier_phi_77_pred_3 = _3029;
                        frontier_phi_77_pred_4 = _3028;
                        frontier_phi_77_pred_5 = _3027;
                    }
                    else
                    {
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3249 = _3027;
                        float _3250 = _3028;
                        float _3251 = _3029;
                        float _3252 = _3030;
                        float _3253 = _3031;
                        float _3254 = _3032;
                        uint _3255 = _3042;
                        uint _3256;
                        vec4 _3281;
                        float _3282;
                        vec4 _3297;
                        vec3 _3309;
                        vec4 _3324;
                        vec4 _3339;
                        float _3385;
                        bool _3386;
                        for (;;)
                        {
                            uint _3266 = ((_3033 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3255));
                            _3256 = (_3255 + 4294967295u) & _3255;
                            uint _3268 = _3266 * 40u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3282 = _3281.w;
                            uint _3284 = (_3266 * 40u) + 4u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3266 * 40u) + 8u;
                            _3309 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x));
                            uint _3311 = (_3266 * 40u) + 16u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3326 = (_3266 * 40u) + 20u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3341 = (_3266 * 40u) + 24u;
                            vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3360 = (_3266 * 40u) + 28u;
                            vec4 _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            _3385 = fma(_2601, _3373.z, fma(_2600, _3373.y, _3373.x * _2599)) + _3373.w;
                            _3386 = !((fma(_2601, _3354.z, fma(_2600, _3354.y, _3354.x * _2599)) + _3354.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3386)
                            {
                                float _3413 = _3281.x - _2599;
                                float _3414 = _3281.y - _2600;
                                float _3415 = _3281.z - _2601;
                                float _3416 = dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415));
                                float _3419 = inversesqrt(_3416);
                                float _3420 = _3419 * _3413;
                                float _3421 = _3419 * _3414;
                                float _3422 = _3419 * _3415;
                                float _3426 = 1.0 - (_3416 / (_3282 * _3282));
                                float _4564 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3427 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3431 = sqrt(_3416) * _3297.w;
                                float _3433 = 1.39999997615814208984375 / (_3431 + 1.39999997615814208984375);
                                float _3434 = _3433 * _3433;
                                float _3437 = ((1.0 - _3434) * dot(vec3(_3420, _3421, _3422), vec3(_847, _850, _853))) + _3434;
                                float _3440 = _3431 * _3431;
                                float _3444 = (fma(_2601, _3324.z, fma(_2600, _3324.y, _3324.x * _2599)) + _3324.w) / _3385;
                                float _3445 = (fma(_2601, _3339.z, fma(_2600, _3339.y, _3339.x * _2599)) + _3339.w) / _3385;
                                float _3449 = 1.0 - dot(vec2(_3444, _3445), vec2(_3444, _3445));
                                float _4580 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3451 = _3450 * (((isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0))) * _3427) / ((_3440 * 0.699999988079071044921875) + 1.0));
                                float _3463 = exp2(log2(1.0 / ((_3440 * 3.5) + 5.0)) * 0.25);
                                float _3464 = 1.0 - _907;
                                float _3471 = sqrt(1.0 - ((1.0 - (_3464 * _3464)) * (1.0 - (_3463 * _3463))));
                                float _3472 = _3471 * _3471;
                                float _3473 = _3472 * _3472;
                                float _3474 = _3420 - _2893;
                                float _3475 = _3421 - _2894;
                                float _3476 = _3422 - _2895;
                                float _3480 = inversesqrt(dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476)));
                                float _3484 = dot(vec3(_847, _850, _853), vec3((-0.0) - _2893, (-0.0) - _2894, (-0.0) - _2895));
                                float _4591 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3487 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3488 = dot(vec3(_847, _850, _853), vec3(_3480 * _3474, _3480 * _3475, _3480 * _3476));
                                float _4602 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3491 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3495 = ((_3491 * _3491) * (_3473 + (-1.0))) + 1.0;
                                float _3496 = _3433 * _3472;
                                float _3497 = _3496 * _3496;
                                float _3503 = ((1.0 - _3497) * dot(vec3(_847, _850, _853), vec3(_3420, _3421, _3422))) + _3497;
                                float _4613 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3505 = 1.0 - _3472;
                                float _3515 = (0.5 / (((_3504 * ((_3487 * _3505) + _3472)) + 9.9999999392252902907785028219223e-09) + (((_3504 * _3505) + _3472) * _3487))) * _3504;
                                float _4624 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3525 = (_3450 * _3427) * (((_3473 * 3.1415927410125732421875) * (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) / ((_3495 * _3495) * ((_3440 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3451 * _3297.y;
                                frontier_phi_83_pred_1 = _3451 * _3297.x;
                                frontier_phi_83_pred_2 = _3525 * _3309.z;
                                frontier_phi_83_pred_3 = _3525 * _3309.y;
                                frontier_phi_83_pred_4 = _3525 * _3309.x;
                                frontier_phi_83_pred_5 = _3451 * _3297.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3533 = frontier_phi_83_pred;
                            _3532 = frontier_phi_83_pred_1;
                            _3531 = frontier_phi_83_pred_2;
                            _3530 = frontier_phi_83_pred_3;
                            _3529 = frontier_phi_83_pred_4;
                            _3534 = frontier_phi_83_pred_5;
                            _3239 = _3532 + _3252;
                            _3240 = _3533 + _3253;
                            _3241 = _3534 + _3254;
                            _3236 = _3529 + _3249;
                            _3237 = _3530 + _3250;
                            _3238 = _3531 + _3251;
                            if (_3256 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3256;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3241;
                        frontier_phi_77_pred_1 = _3240;
                        frontier_phi_77_pred_2 = _3239;
                        frontier_phi_77_pred_3 = _3238;
                        frontier_phi_77_pred_4 = _3237;
                        frontier_phi_77_pred_5 = _3236;
                    }
                    _2878 = frontier_phi_77_pred;
                    _2876 = frontier_phi_77_pred_1;
                    _2874 = frontier_phi_77_pred_2;
                    _2872 = frontier_phi_77_pred_3;
                    _2870 = frontier_phi_77_pred_4;
                    _2868 = frontier_phi_77_pred_5;
                    uint _3034 = _3033 + 1u;
                    if (_3034 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3027 = _2868;
                        _3028 = _2870;
                        _3029 = _2872;
                        _3030 = _2874;
                        _3031 = _2876;
                        _3032 = _2878;
                        _3033 = _3034;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2872;
                frontier_phi_58_59_ladder_1 = _2878;
                frontier_phi_58_59_ladder_2 = _2876;
                frontier_phi_58_59_ladder_3 = _2874;
                frontier_phi_58_59_ladder_4 = _2870;
                frontier_phi_58_59_ladder_5 = _2868;
            }
            else
            {
                frontier_phi_58_59_ladder = _2750;
                frontier_phi_58_59_ladder_1 = _2756;
                frontier_phi_58_59_ladder_2 = _2754;
                frontier_phi_58_59_ladder_3 = _2752;
                frontier_phi_58_59_ladder_4 = _2748;
                frontier_phi_58_59_ladder_5 = _2746;
            }
            _2867 = frontier_phi_58_59_ladder_5;
            _2869 = frontier_phi_58_59_ladder_4;
            _2871 = frontier_phi_58_59_ladder;
            _2873 = frontier_phi_58_59_ladder_3;
            _2875 = frontier_phi_58_59_ladder_2;
            _2877 = frontier_phi_58_59_ladder_1;
        }
        float _2882 = isnan(1.0) ? _891 : (isnan(_891) ? 1.0 : min(_891, 1.0));
        _2658 = (_2882 * _2873) + _2110;
        _2660 = (_2882 * _2875) + _2112;
        _2662 = (_2882 * _2877) + _2114;
        _2664 = ((_2867 * 0.039999999105930328369140625) * _2882) + _2443;
        _2666 = ((_2869 * 0.039999999105930328369140625) * _2882) + _2445;
        _2668 = ((_2871 * 0.039999999105930328369140625) * _2882) + _2447;
    }
    else
    {
        _2658 = _2110;
        _2660 = _2112;
        _2662 = _2114;
        _2664 = _2443;
        _2666 = _2445;
        _2668 = _2447;
    }
    float _4640 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4651 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4662 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2685 = ((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2658 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _891))) + ((_2664 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1727)) * cbPerFrame._m0[3u].x);
    float _2686 = ((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2660 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _891))) + ((_2666 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1727)) * cbPerFrame._m0[3u].x);
    float _2687 = ((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2662 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _891))) + ((_2668 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1727)) * cbPerFrame._m0[3u].x);
    uint _2688 = _270 + 6u;
    float _2696 = _828 / cbSceneParam._m0[86u].x;
    float _2697 = _829 / cbSceneParam._m0[86u].y;
    vec4 _2711 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2696, _2697, (log2((isnan(cbSceneParam._m0[77u].w) ? _750 : (isnan(_750) ? cbSceneParam._m0[77u].w : min(_750, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2713 = _2711.x;
    float _2714 = _2711.y;
    float _2715 = _2711.z;
    float _2716 = _2711.w;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    if (_750 > cbSceneParam._m0[78u].w)
    {
        float _2771 = isnan(_750) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _750 : min(cbSceneParam._m0[80u].w, _750));
        float _2772 = _2771 / _750;
        float _2783 = _2772 * _801;
        float _2784 = _802 * _2772;
        float _2785 = (-0.0) - _2784;
        float _2787 = _2772 * _803;
        float _2789 = (cbSceneParam._m0[77u].w * _2785) / _2771;
        float _2790 = _2789 + cbSceneParam._m0[79u].w;
        float _2791 = cbSceneParam._m0[79u].w - _2784;
        float _2797 = sqrt(((_2783 * _2783) + (_2784 * _2784)) + (_2787 * _2787));
        float _2800 = (1.0 - (cbSceneParam._m0[77u].w / _2771)) * _2797;
        float _2805 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2807 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2984;
        if (abs((_2785 - _2789) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2984 = ((((_2790 > 0.0) ? exp2(_2805 * _2790) : (2.0 - exp2(_2807 * _2790))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2800;
        }
        else
        {
            float _2928 = 1.0 / cbSceneParam._m0[80u].x;
            float _2929 = isnan(_2791) ? _2790 : (isnan(_2790) ? _2791 : max(_2790, _2791));
            float _2930 = isnan(_2791) ? _2790 : (isnan(_2790) ? _2791 : min(_2790, _2791));
            float _2939 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : min(_2929, 0.0));
            float _2940 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : min(_2930, 0.0));
            _2984 = ((abs(_2797 / _2785) * cbSceneParam._m0[80u].y) * ((((_2939 - _2940) * 2.0) - ((exp2(_2805 * (isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0)))) - exp2(_2805 * (isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0))))) * _2928)) - ((exp2(_2807 * _2939) - exp2(_2807 * _2940)) * _2928))) + (_2800 * cbSceneParam._m0[80u].z);
        }
        vec4 _2986 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2696, _2697, 1.0), 0.0);
        float _2995 = exp2((_2984 * (-1.44269502162933349609375)) * (1.0 - _2986.w));
        float _2996 = log2(_2995);
        float _3012 = log2(_2716);
        _2809 = (exp2(_3012 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2996 * cbSceneParam._m0[78u].x)) * _2986.x) / cbSceneParam._m0[78u].x)) + _2713;
        _2811 = (exp2(_3012 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2996 * cbSceneParam._m0[78u].y)) * _2986.y) / cbSceneParam._m0[78u].y)) + _2714;
        _2813 = (exp2(_3012 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2996 * cbSceneParam._m0[78u].z)) * _2986.z) / cbSceneParam._m0[78u].z)) + _2715;
        _2815 = _2995 * _2716;
    }
    else
    {
        _2809 = _2713;
        _2811 = _2714;
        _2813 = _2715;
        _2815 = _2716;
    }
    bool _3022;
    vec4 _2825;
    vec4 _2847;
    float _2849;
    float _2853;
    float _2854;
    float _2855;
    float _2856;
    bool _2866;
    for (;;)
    {
        _2825 = cbMatDynParam._m0[0u];
        float _2827 = roundEven(_2825.y);
        bool _2828 = _2827 == 3.0;
        float _2829 = log2(_2815);
        float _2836 = exp2(_2829 * cbSceneParam._m0[78u].x) * _2685;
        float _2837 = exp2(_2829 * cbSceneParam._m0[78u].y) * _2686;
        float _2838 = exp2(_2829 * cbSceneParam._m0[78u].z) * _2687;
        float _2845 = _817 + (-0.5);
        _2847 = cbMtdParam._m0[1u];
        _2849 = _2847.y * _2845;
        float _2852 = (_2827 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2853 = _2852 * (_2828 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2809)));
        _2854 = _2852 * (_2828 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2811)));
        _2855 = _2852 * (_2828 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2813)));
        _2856 = _2845 * 0.999000012874603271484375;
        _2866 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2866)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _2856) < 0.5)
            {
                _3022 = true;
                break;
            }
        }
        uint _2963 = _866 + uint(_2825.w);
        if ((cbInstanceData._m0[_2963].w < 1.0) && ((cbInstanceData._m0[_2963].w + _2856) < 0.5))
        {
            _3022 = true;
            break;
        }
        if ((_2849 + 1.0) < _2847.x)
        {
            _3022 = true;
            break;
        }
        _3022 = false;
        break;
    }
    float _3227;
    if (_3022)
    {
        discard_state = true;
        _3227 = 0.0;
    }
    else
    {
        _3227 = cbInstanceData._m0[_2688].w;
    }
    SV_Target.x = _2853;
    SV_Target.y = _2854;
    SV_Target.z = _2855;
    SV_Target.w = _3227;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2688].w;
    discard_exit();
}


