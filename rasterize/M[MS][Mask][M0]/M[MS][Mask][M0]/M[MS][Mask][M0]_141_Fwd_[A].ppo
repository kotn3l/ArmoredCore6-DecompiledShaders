#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1401;
float _3757;
float _3758;
float _3759;
float _3760;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _334.x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[24u].z) + _388) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3769 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _413 = (_406 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _414 = (_406 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _415 = (_406 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _432 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _464 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _478 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _334.y) * 2.0) - ((((_454 - _464) * cbMtdParam._m0[24u].z) + _464) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3780 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _486 = (_479 * ((_432.x * cbMtdParam._m0[13u].x) - _413)) + _413;
    float _487 = (_479 * ((_432.y * cbMtdParam._m0[13u].y) - _414)) + _414;
    float _488 = (_479 * ((_432.z * cbMtdParam._m0[13u].z) - _415)) + _415;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _266) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _267) + cbTextureTilingScale._m0[24u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _547 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _334.z) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[24u].z) + _535) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3791 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _555 = (_548 * ((_506.x * cbMtdParam._m0[14u].x) - _486)) + _486;
    float _556 = (_548 * ((_506.y * cbMtdParam._m0[14u].y) - _487)) + _487;
    float _557 = (_548 * ((_506.z * cbMtdParam._m0[14u].z) - _488)) + _488;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _614 = _612.x;
    float _615 = _612.y;
    float _616 = _612.z;
    float _623 = ((_595.x - _614) * _406) + _614;
    float _624 = ((_595.y - _615) * _406) + _615;
    float _625 = ((_595.z - _616) * _406) + _616;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _648 = ((_637.x - _623) * _479) + _623;
    float _649 = ((_637.y - _624) * _479) + _624;
    float _650 = ((_637.z - _625) * _479) + _625;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _266) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _267) + cbTextureTilingScale._m0[23u].w));
    float _675 = ((_662.z - _650) * _548) + _650;
    float _678 = ((((_662.x - _648) * _548) + _648) * 2.0) + (-1.0);
    float _680 = ((((_662.y - _649) * _548) + _649) * 2.0) + (-1.0);
    float _681 = dot(vec2(_678, _680), vec2(_678, _680));
    float _3802 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _686 = sqrt(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))));
    vec4 _700 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _712 = (((_700.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _678;
    float _713 = (((_700.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _680;
    float _716 = fma(_686, _234, fma(_713, _241, _712 * _227));
    float _719 = fma(_686, _235, fma(_713, _242, _712 * _228));
    float _722 = fma(_686, _236, fma(_713, _243, _712 * _229));
    float _726 = inversesqrt(dot(vec3(_716, _719, _722), vec3(_716, _719, _722)));
    vec4 _753 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _755 = _753.x;
    float _756 = 1.0 - _755;
    float _762 = (cbMtdParam._m0[19u].x + dot(vec4(_726 * _716, _726 * _719, _726 * _722, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_755 - _756) * cbMtdParam._m0[24u].w) + _756) * cbMtdParam._m0[21u].z);
    float _3813 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _763 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _770 = (_763 * ((_575.x * cbMtdParam._m0[18u].x) - _555)) + _555;
    float _771 = (_763 * ((_575.y * cbMtdParam._m0[18u].y) - _556)) + _556;
    float _772 = (_763 * ((_575.z * cbMtdParam._m0[18u].z) - _557)) + _557;
    float _776 = (cbMtdParam._m0[19u].w * (_700.z - _675)) + _675;
    vec4 _789 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _796 = (_789.x * 2.0) + (-1.0);
    float _797 = (_789.y * 2.0) + (-1.0);
    float _798 = dot(vec2(_796, _797), vec2(_796, _797));
    float _3824 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _806 = ((_789.z - _776) * _763) + _776;
    float _816 = ((sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) - _686) * _763) + _686;
    float _819 = (((_796 - _712) * _763) + _712) + (cbMtdParam._m0[21u].x * _712);
    float _820 = (((_797 - _713) * _763) + _713) + (cbMtdParam._m0[21u].x * _713);
    float _824 = cbMtdParam._m0[22u].x + _700.w;
    float _827 = fma(_816, _234, fma(_820, _241, _819 * _227));
    float _830 = fma(_816, _235, fma(_820, _242, _819 * _228));
    float _833 = fma(_816, _236, fma(_820, _243, _819 * _229));
    float _837 = inversesqrt(dot(vec3(_827, _830, _833), vec3(_827, _830, _833)));
    float _838 = _837 * _827;
    float _839 = _837 * _830;
    float _840 = _837 * _833;
    float _3835 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _841 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _3857 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _3868 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _3879 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _859 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _911 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _901);
    float _912 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _901);
    float _913 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _901);
    float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
    float _918 = _911 * _917;
    float _919 = _912 * _917;
    float _920 = _913 * _917;
    vec4 _925 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _927 = _925.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1081 = sqrt(((_911 * _911) + (_912 * _912)) + (_913 * _913));
        float _1087 = (cbMatDynParam._m0[5u].x * _1081) + cbMatDynParam._m0[5u].y;
        float _3890 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1092 = (cbMatDynParam._m0[5u].z * _1081) + cbMatDynParam._m0[5u].w;
        float _3901 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) - _1088)) + _1088) < ((_927 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _938 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _939 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _957 = fma(_840, cbSceneParam._m0[5u].z, fma(_839, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _838));
    float _960 = fma(_840, cbSceneParam._m0[6u].z, fma(_839, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _838));
    float _963 = fma(_840, cbSceneParam._m0[7u].z, fma(_839, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _838));
    uint _976 = _246 + 9u;
    uint _977 = _976 + uint(cbMatDynParam._m0[0u].w);
    float _983 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_977].x;
    float _984 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_977].y;
    float _985 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_977].z;
    float _3912 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _987 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    vec4 _997 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _938, cbSceneParam._m0[86u].y * _939));
    float _1001 = ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * TEXCOORD_5.w) * _997.x;
    float _1002 = dot(vec3(_838, _839, _840), vec3(_918, _919, _920));
    float _1005 = _1002 * 2.0;
    float _1009 = (_1005 * _838) - _918;
    float _1010 = (_1005 * _839) - _919;
    float _1011 = (_1005 * _840) - _920;
    float _1015 = abs(dot(vec3(_918, _919, _920), vec3(_838, _839, _840)));
    float _3945 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1017 = sqrt(_841);
    float _1030 = exp2((_1017 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1017 * 3.0));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1400;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1125 = fma(_1070, cbModelParam._m0[26u].z, fma(_1066, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1062));
        float _1129 = fma(_1070, cbModelParam._m0[27u].z, fma(_1066, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1062));
        float _1133 = fma(_1070, cbModelParam._m0[28u].z, fma(_1066, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1062));
        float _1158 = _1062 + _838;
        float _1159 = _1066 + _839;
        float _1160 = _1070 + _840;
        float _1170 = fma(_1160, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158)) - _1125;
        float _1171 = fma(_1160, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158)) - _1129;
        float _1172 = fma(_1160, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158)) - _1133;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1125 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1129 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[34u].z) + ((((((_1133 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1228 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1194.x + (-0.5));
        float _1230 = _1228 * (_1194.y + (-0.5));
        float _1231 = _1228 * (_1194.z + (-0.5));
        float _1238 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1201.x + (-0.5));
        float _1240 = _1238 * (_1201.y + (-0.5));
        float _1241 = _1238 * (_1201.z + (-0.5));
        float _1248 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1208.x + (-0.5));
        float _1250 = _1248 * (_1208.y + (-0.5));
        float _1251 = _1248 * (_1208.z + (-0.5));
        float _1258 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1215.x + (-0.5));
        float _1260 = _1258 * (_1215.y + (-0.5));
        float _1261 = _1258 * (_1215.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1282 = (dot(vec3(_838, _839, _840), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1292 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3993 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1294 + 1.0))) + _1299) * _1262;
        float _1309 = _1230 * 0.5;
        float _1310 = _1240 * 0.5;
        float _1311 = _1250 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_838, _839, _840), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4026 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1336 + 1.0))) + _1341) * _1263;
        float _1351 = _1231 * 0.5;
        float _1352 = _1241 * 0.5;
        float _1353 = _1251 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_838, _839, _840), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4059 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1378 + 1.0))) + _1383) * _1264;
        _1400 = _1231;
        _1402 = _1230;
        _1403 = _1229;
        _1404 = _1241;
        _1405 = _1240;
        _1406 = _1239;
        _1407 = _1251;
        _1408 = _1250;
        _1409 = _1249;
        _1410 = _1264;
        _1411 = _1263;
        _1412 = _1262;
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1401;
        _1402 = _1401;
        _1403 = _1401;
        _1404 = _1401;
        _1405 = _1401;
        _1406 = _1401;
        _1407 = _1401;
        _1408 = _1401;
        _1409 = _1401;
        _1410 = _1401;
        _1411 = _1401;
        _1412 = _1401;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1441 = fma(_1070, cbModelParam._m0[30u].z, fma(_1066, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1062));
        float _1445 = fma(_1070, cbModelParam._m0[31u].z, fma(_1066, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1062));
        float _1449 = fma(_1070, cbModelParam._m0[32u].z, fma(_1066, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1062));
        float _1472 = _1062 + _838;
        float _1473 = _1066 + _839;
        float _1474 = _1070 + _840;
        float _1484 = fma(_1474, cbModelParam._m0[30u].z, fma(_1473, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1472)) - _1441;
        float _1485 = fma(_1474, cbModelParam._m0[31u].z, fma(_1473, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1472)) - _1445;
        float _1486 = fma(_1474, cbModelParam._m0[32u].z, fma(_1473, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1472)) - _1449;
        float _1490 = inversesqrt(dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486)));
        float _1503 = ((_1490 * _1484) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1441 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1490 * _1485) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1445 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1490 * _1486) / cbModelParam._m0[35u].z) + ((((((_1449 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        float _1540 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1507.x + (-0.5));
        float _1542 = _1540 * (_1507.y + (-0.5));
        float _1543 = _1540 * (_1507.z + (-0.5));
        float _1550 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1514.x + (-0.5));
        float _1552 = _1550 * (_1514.y + (-0.5));
        float _1553 = _1550 * (_1514.z + (-0.5));
        float _1560 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1521.x + (-0.5));
        float _1562 = _1560 * (_1521.y + (-0.5));
        float _1563 = _1560 * (_1521.z + (-0.5));
        float _1570 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1528.x + (-0.5));
        float _1572 = _1570 * (_1528.y + (-0.5));
        float _1573 = _1570 * (_1528.z + (-0.5));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = _1541 * 0.5;
        float _1578 = _1551 * 0.5;
        float _1579 = _1561 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_838, _839, _840), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4122 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1604 + 1.0))) + _1609) * _1574;
        float _1619 = _1542 * 0.5;
        float _1620 = _1552 * 0.5;
        float _1621 = _1562 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_838, _839, _840), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4155 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1646 + 1.0))) + _1651) * _1575;
        float _1661 = _1543 * 0.5;
        float _1662 = _1553 * 0.5;
        float _1663 = _1563 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_838, _839, _840), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4188 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1688 + 1.0))) + _1693) * _1576;
        _1710 = _1543;
        _1711 = _1542;
        _1712 = _1541;
        _1713 = _1553;
        _1714 = _1552;
        _1715 = _1551;
        _1716 = _1563;
        _1717 = _1562;
        _1718 = _1561;
        _1719 = _1576;
        _1720 = _1575;
        _1721 = _1574;
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
    }
    else
    {
        _1710 = _1401;
        _1711 = _1401;
        _1712 = _1401;
        _1713 = _1401;
        _1714 = _1401;
        _1715 = _1401;
        _1716 = _1401;
        _1717 = _1401;
        _1718 = _1401;
        _1719 = _1401;
        _1720 = _1401;
        _1721 = _1401;
        _1722 = 0.0;
        _1723 = 0.0;
        _1724 = 0.0;
    }
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1413)) + _1413;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1414)) + _1414;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1415)) + _1415;
    float _1757 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1735, cbSceneParam._m0[89u].y, _1734 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1735, cbSceneParam._m0[90u].y, _1734 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1735, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1734));
    float _1778 = _1009 * 0.5;
    float _1779 = _1010 * 0.5;
    float _1780 = _1011 * 0.5;
    float _1781 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1784 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1787 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1821;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1794 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1400, _1404, _1407, _1410));
        float _1798 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1802 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1809 = dot(vec4(cbModelParam._m0[39u]), vec4(_1778, _1779, _1780, 1.0));
        _1821 = dot(vec3(isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1809) ? 0.0 : (isnan(0.0) ? _1809 : max(0.0, _1809))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1821 = 1.0;
    }
    float _1832;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1823 = dot(vec4(cbModelParam._m0[40u]), vec4(_1778, _1779, _1780, 1.0));
        _1832 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1823) ? 0.0 : (isnan(0.0) ? _1823 : max(0.0, _1823))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1832 = 1.0;
    }
    float _1836 = (_1832 * cbModelParam._m0[1u].x) + (_1821 * (1.0 - cbModelParam._m0[1u].x));
    float _1846 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _841);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1846 : min(cbModelParam._m0[25u].z, _1846));
    float _1927;
    float _1929;
    float _1931;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1894 = fma(_1070, cbModelParam._m0[13u].z, fma(_1066, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1062)) + cbModelParam._m0[13u].w;
        float _1898 = fma(_1070, cbModelParam._m0[14u].z, fma(_1066, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1062)) + cbModelParam._m0[14u].w;
        float _1902 = fma(_1070, cbModelParam._m0[15u].z, fma(_1066, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1062)) + cbModelParam._m0[15u].w;
        float _1905 = fma(_1011, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009));
        float _1908 = fma(_1011, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009));
        float _1911 = fma(_1011, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009));
        float _1939;
        if (_1905 > 0.0)
        {
            _1939 = abs((1.0 - _1894) / _1905);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1894 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1939 = frontier_phi_17_15_ladder;
        }
        float _2139;
        if (_1908 > 0.0)
        {
            _2139 = abs((1.0 - _1898) / _1908);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1898 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2139 = frontier_phi_26_22_ladder;
        }
        float _2382;
        if (_1911 > 0.0)
        {
            _2382 = abs((1.0 - _1902) / _1911);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1902 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2382 = frontier_phi_38_33_ladder;
        }
        float _2384 = isnan(_2139) ? _1939 : (isnan(_1939) ? _2139 : min(_1939, _2139));
        float _2385 = isnan(_2382) ? _2384 : (isnan(_2384) ? _2382 : min(_2384, _2382));
        float _2389 = (_2385 * _1905) + _1894;
        float _2390 = (_2385 * _1908) + _1898;
        float _2391 = (_2385 * _1911) + _1902;
        float _2392 = _2385 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2392;
        float _2396 = _2392 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 > _2396) || ((_2390 < _2394) || ((_2389 < _2394) || (_2389 > _2396))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2391, cbModelParam._m0[9u].z, fma(_2390, cbModelParam._m0[9u].y, _2389 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2391, cbModelParam._m0[10u].z, fma(_2390, cbModelParam._m0[10u].y, _2389 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2391, cbModelParam._m0[11u].z, fma(_2390, cbModelParam._m0[11u].y, _2389 * cbModelParam._m0[11u].x))), _1847);
            frontier_phi_16_38_ladder = _2515.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2515.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2515.x * cbModelParam._m0[1u].y;
        }
        _1927 = frontier_phi_16_38_ladder_2;
        _1929 = frontier_phi_16_38_ladder_1;
        _1931 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1915 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1009, _1010, _1011), _1847);
        _1927 = _1915.x * cbModelParam._m0[1u].y;
        _1929 = _1915.y * cbModelParam._m0[1u].y;
        _1931 = _1915.z * cbModelParam._m0[1u].y;
    }
    float _1935 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _841);
    float _1936 = isnan(_1935) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1935 : min(cbModelParam._m0[25u].w, _1935));
    float _2025;
    float _2027;
    float _2029;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1989 = fma(_1070, cbModelParam._m0[21u].z, fma(_1066, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1062)) + cbModelParam._m0[21u].w;
        float _1993 = fma(_1070, cbModelParam._m0[22u].z, fma(_1066, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1062)) + cbModelParam._m0[22u].w;
        float _1997 = fma(_1070, cbModelParam._m0[23u].z, fma(_1066, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1062)) + cbModelParam._m0[23u].w;
        float _2000 = fma(_1011, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009));
        float _2003 = fma(_1011, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009));
        float _2006 = fma(_1011, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009));
        float _2144;
        if (_2000 > 0.0)
        {
            _2144 = abs((1.0 - _1989) / _2000);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1989 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2144 = frontier_phi_28_24_ladder;
        }
        float _2409;
        if (_2003 > 0.0)
        {
            _2409 = abs((1.0 - _1993) / _2003);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1993 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2409 = frontier_phi_40_35_ladder;
        }
        float _2614;
        if (_2006 > 0.0)
        {
            _2614 = abs((1.0 - _1997) / _2006);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1997 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2614 = frontier_phi_49_46_ladder;
        }
        float _2616 = isnan(_2409) ? _2144 : (isnan(_2144) ? _2409 : min(_2144, _2409));
        float _2617 = isnan(_2614) ? _2616 : (isnan(_2616) ? _2614 : min(_2616, _2614));
        float _2621 = (_2617 * _2000) + _1989;
        float _2622 = (_2617 * _2003) + _1993;
        float _2623 = (_2617 * _2006) + _1997;
        float _2624 = _2617 * 9.9999997473787516355514526367188e-05;
        float _2625 = (-1.0) - _2624;
        float _2627 = _2624 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2623 > _2627) || ((_2623 < _2625) || ((_2622 > _2627) || ((_2622 < _2625) || ((_2621 < _2625) || (_2621 > _2627))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2822 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2623, cbModelParam._m0[17u].z, fma(_2622, cbModelParam._m0[17u].y, _2621 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2623, cbModelParam._m0[18u].z, fma(_2622, cbModelParam._m0[18u].y, _2621 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2623, cbModelParam._m0[19u].z, fma(_2622, cbModelParam._m0[19u].y, _2621 * cbModelParam._m0[19u].x))), _1936);
            frontier_phi_25_49_ladder = _2822.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2822.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2822.x * cbModelParam._m0[1u].z;
        }
        _2025 = frontier_phi_25_49_ladder_2;
        _2027 = frontier_phi_25_49_ladder_1;
        _2029 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2009 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1009, _1010, _1011), _1936);
        _2025 = _2009.x * cbModelParam._m0[1u].z;
        _2027 = _2009.y * cbModelParam._m0[1u].z;
        _2029 = _2009.z * cbModelParam._m0[1u].z;
    }
    float _2041 = ((((1.0 - _1030) * ((_1017 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1030 * _1017)) * _1001;
    float _2042 = _2041 * ((cbModelParam._m0[1u].w * (_2025 - _1927)) + _1927);
    float _2043 = _2041 * ((cbModelParam._m0[1u].w * (_2027 - _1929)) + _1929);
    float _2044 = _2041 * ((cbModelParam._m0[1u].w * (_2029 - _1931)) + _1931);
    float _2047 = fma(_2044, cbSceneParam._m0[89u].z, fma(_2043, cbSceneParam._m0[89u].y, _2042 * cbSceneParam._m0[89u].x));
    float _2050 = fma(_2044, cbSceneParam._m0[90u].z, fma(_2043, cbSceneParam._m0[90u].y, _2042 * cbSceneParam._m0[90u].x));
    float _2053 = fma(_2044, cbSceneParam._m0[91u].z, fma(_2043, cbSceneParam._m0[91u].y, _2042 * cbSceneParam._m0[91u].x));
    uvec4 _2063 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2065 = _2063.x * 14u;
    uint _2066 = _2065 + 13u;
    float _2073 = _1001 + (-1.0);
    float _2078 = (cbLight._m0[_2066].x * _2073) + 1.0;
    float _2079 = (cbLight._m0[_2066].y * _2073) + 1.0;
    float _2080 = (cbLight._m0[_2066].z * _2073) + 1.0;
    float _2081 = (cbLight._m0[_2066].w * _2073) + 1.0;
    uint _2082 = _2065 + 5u;
    float _2088 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2092 = _2065 + 4u;
    float _2098 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
    uint _2102 = _2065 | 1u;
    float _2113 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_838, _839, _840));
    float _2116 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_838, _839, _840));
    float _4324 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _4335 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2121 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.3183098733425140380859375;
    float _2123 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2130 = ((cbLight._m0[_2082].x * _2088) * _2123) + ((cbLight._m0[_2092].x * _2098) * _2121);
    float _2131 = ((_2088 * cbLight._m0[_2082].y) * _2123) + ((_2098 * cbLight._m0[_2092].y) * _2121);
    float _2132 = ((_2088 * cbLight._m0[_2082].z) * _2123) + ((_2098 * cbLight._m0[_2092].z) * _2121);
    uvec4 _2136 = floatBitsToUint(cbLight._m0[_2065 + 12u]);
    bool _2138 = _2136.x == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2138)
    {
        _2149 = _2130;
        _2151 = _2131;
        _2153 = _2132;
    }
    else
    {
        uint _2157 = _2065 + 6u;
        float _2173 = (dot(vec3(cbLight._m0[_2065 + 2u].xyz), vec3(_838, _839, _840)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _4346 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2176 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2149 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _2130;
        _2151 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _2131;
        _2153 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _2132;
    }
    bool _2156 = _2136.y == 0u;
    float _2194;
    float _2196;
    float _2198;
    if (_2156)
    {
        _2194 = _2149;
        _2196 = _2151;
        _2198 = _2153;
    }
    else
    {
        uint _2353 = _2065 + 7u;
        float _2369 = (dot(vec3(cbLight._m0[_2065 + 3u].xyz), vec3(_838, _839, _840)) * 0.5) + 0.5;
        float _2370 = _2369 * _2369;
        float _4362 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2371 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2372 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2194 = (((cbLight._m0[_2353].x * 0.3183098733425140380859375) * _2371) * _2372) + _2149;
        _2196 = (((cbLight._m0[_2353].y * 0.3183098733425140380859375) * _2371) * _2372) + _2151;
        _2198 = (((cbLight._m0[_2353].z * 0.3183098733425140380859375) * _2371) * _2372) + _2153;
    }
    uint _2201 = _2065 + 8u;
    float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _841) * 0.949999988079071044921875);
    float _2215 = _2214 * _2214;
    float _2216 = cbLight._m0[_2065].x + _918;
    float _2217 = cbLight._m0[_2065].y + _919;
    float _2218 = cbLight._m0[_2065].z + _920;
    float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
    float _2223 = _2222 * _2216;
    float _2224 = _2222 * _2217;
    float _2225 = _2222 * _2218;
    float _2226 = dot(vec3(_838, _839, _840), vec3(cbLight._m0[_2065].xyz));
    float _4378 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _4389 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _2230 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2231 = dot(vec3(_838, _839, _840), vec3(_2223, _2224, _2225));
    float _4400 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2235 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2223, _2224, _2225));
    float _4411 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2239 = _2215 * _2215;
    float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
    float _2254 = (exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2255 = 1.0 - _2215;
    float _2266 = (0.5 / (((_2230 * ((_2229 * _2255) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2255) + _2215) * _2229))) * _2229;
    float _4422 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2268 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
    uint _2279 = _2065 + 9u;
    float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _841) * 0.949999988079071044921875);
    float _2291 = _2290 * _2290;
    float _2292 = cbLight._m0[_2102].x + _918;
    float _2293 = cbLight._m0[_2102].y + _919;
    float _2294 = cbLight._m0[_2102].z + _920;
    float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
    float _2299 = _2298 * _2292;
    float _2300 = _2298 * _2293;
    float _2301 = _2298 * _2294;
    float _2302 = dot(vec3(_838, _839, _840), vec3(cbLight._m0[_2102].xyz));
    float _4433 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2306 = dot(vec3(_838, _839, _840), vec3(_2299, _2300, _2301));
    float _4444 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2310 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2299, _2300, _2301));
    float _4455 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2314 = _2291 * _2291;
    float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
    float _2327 = (exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2328 = 1.0 - _2291;
    float _2338 = (0.5 / (((_2230 * ((_2305 * _2328) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2328) + _2291) * _2305))) * _2305;
    float _4466 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2340 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
    float _2350 = (((_2327 * cbLight._m0[_2279].x) * _2340) * _2088) + (((_2254 * cbLight._m0[_2201].x) * _2268) * _2098);
    float _2351 = (((_2327 * cbLight._m0[_2279].y) * _2340) * _2088) + (((_2254 * cbLight._m0[_2201].y) * _2268) * _2098);
    float _2352 = (((_2327 * cbLight._m0[_2279].z) * _2340) * _2088) + (((_2254 * cbLight._m0[_2201].z) * _2268) * _2098);
    float _2414;
    float _2416;
    float _2418;
    if (_2138)
    {
        _2414 = _2350;
        _2416 = _2351;
        _2418 = _2352;
    }
    else
    {
        uint _2420 = _2065 + 2u;
        uint _2424 = _2065 + 10u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _841) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _918;
        float _2441 = cbLight._m0[_2420].y + _919;
        float _2442 = cbLight._m0[_2420].z + _920;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_838, _839, _840), vec3(cbLight._m0[_2420].xyz));
        float _4477 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2454 = dot(vec3(_838, _839, _840), vec3(_2447, _2448, _2449));
        float _4488 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4499 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2475 = (exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2476 = 1.0 - _2439;
        float _2486 = (0.5 / (((_2230 * ((_2453 * _2476) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2476) + _2439) * _2453))) * _2453;
        float _4510 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2488 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2489 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2414 = (((_2475 * cbLight._m0[_2424].x) * _2488) * _2489) + _2350;
        _2416 = (((_2475 * cbLight._m0[_2424].y) * _2488) * _2489) + _2351;
        _2418 = (((_2475 * cbLight._m0[_2424].z) * _2488) * _2489) + _2352;
    }
    float _2524;
    float _2526;
    float _2528;
    if (_2156)
    {
        _2524 = _2414;
        _2526 = _2416;
        _2528 = _2418;
    }
    else
    {
        uint _2535 = _2065 + 3u;
        uint _2539 = _2065 + 11u;
        float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2535].w)) * _841) * 0.949999988079071044921875);
        float _2554 = _2553 * _2553;
        float _2555 = cbLight._m0[_2535].x + _918;
        float _2556 = cbLight._m0[_2535].y + _919;
        float _2557 = cbLight._m0[_2535].z + _920;
        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
        float _2562 = _2561 * _2555;
        float _2563 = _2561 * _2556;
        float _2564 = _2561 * _2557;
        float _2565 = dot(vec3(_838, _839, _840), vec3(cbLight._m0[_2535].xyz));
        float _4526 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2569 = dot(vec3(_838, _839, _840), vec3(_2562, _2563, _2564));
        float _4537 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2573 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_2562, _2563, _2564));
        float _4548 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2577 = _2554 * _2554;
        float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
        float _2590 = (exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2591 = 1.0 - _2554;
        float _2601 = (0.5 / (((_2230 * ((_2568 * _2591) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2591) + _2554) * _2568))) * _2568;
        float _4559 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2603 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
        float _2604 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2524 = (((_2590 * cbLight._m0[_2539].x) * _2603) * _2604) + _2414;
        _2526 = (((_2590 * cbLight._m0[_2539].y) * _2603) * _2604) + _2416;
        _2528 = (((_2590 * cbLight._m0[_2539].z) * _2603) * _2604) + _2418;
    }
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    if (_2063.y == 0u)
    {
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2679;
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2679;
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2679;
        uvec4 _2694 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2695 = _2694.x;
        uint _2706 = uint((float(_2694.y) * floor(float(uint(cbSceneParam._m0[85u].y * _939) / _2695))) + floor(float(uint(cbSceneParam._m0[85u].x * _938) / _2695)));
        float _2716 = (log2(_2682 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2717 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        uint _2720 = uint(isnan(14.0) ? _2717 : (isnan(_2717) ? 14.0 : min(_2717, 14.0)));
        uvec4 _2725 = texelFetch(g_lightClusterGridBuffer, int(((_2720 << 2u) + (_2706 << 6u)) >> 2u));
        uint _2726 = _2725.x;
        uint _2727 = _2694.z;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((((1u << ((_2727 >> 4u) & 15u)) + 4294967295u) & _2726) == 0u) || ((_2727 & 240u) == 0u))
        {
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
        }
        else
        {
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            uint _2986 = 0u;
            uint _2995;
            bool _2996;
            for (;;)
            {
                _2995 = texelFetch(g_lightClassification, int((((_2720 << 5u) + (_2706 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                _2996 = _2995 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2996)
                {
                    frontier_phi_66_pred = _2980;
                    frontier_phi_66_pred_1 = _2985;
                    frontier_phi_66_pred_2 = _2984;
                    frontier_phi_66_pred_3 = _2983;
                    frontier_phi_66_pred_4 = _2982;
                    frontier_phi_66_pred_5 = _2981;
                }
                else
                {
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    uint _3131;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2995;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    for (;;)
                    {
                        uint _3135 = uint(findLSB(_3131)) + (_2986 << 5u);
                        uint _3132 = (_3131 + 4294967295u) & _3131;
                        uint _3137 = _3135 * 48u;
                        vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3157 = (_3135 * 48u) + 4u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 3u)).x));
                        uint _3176 = (_3135 * 48u) + 8u;
                        vec3 _3187 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x));
                        float _3191 = _3151.x - _2680;
                        float _3192 = _3151.y - _2681;
                        float _3193 = _3151.z - _2682;
                        float _3194 = dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193));
                        float _3197 = inversesqrt(_3194);
                        float _3198 = _3197 * _3191;
                        float _3199 = _3197 * _3192;
                        float _3200 = _3197 * _3193;
                        float _3201 = dot(vec3(_957, _960, _963), vec3(_3198, _3199, _3200));
                        float _3206 = 1.0 - (_3194 * _3151.w);
                        float _4585 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3208 = sqrt(_3194) * _3170.w;
                        float _3211 = 1.39999997615814208984375 / (_3208 + 1.39999997615814208984375);
                        float _3212 = _3211 * _3211;
                        float _3215 = ((1.0 - _3212) * _3201) + _3212;
                        float _3218 = _3208 * _3208;
                        float _3222 = ((isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * _3207) / ((_3218 * 0.699999988079071044921875) + 1.0);
                        float _3226 = (-0.0) - _2680;
                        float _3227 = (-0.0) - _2681;
                        float _3228 = (-0.0) - _2682;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3243 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                        float _3244 = 1.0 - _1017;
                        float _3251 = sqrt(1.0 - ((1.0 - (_3244 * _3244)) * (1.0 - (_3243 * _3243))));
                        float _3252 = _3251 * _3251;
                        float _3253 = _3252 * _3252;
                        float _3254 = _3233 + _3198;
                        float _3255 = _3234 + _3199;
                        float _3256 = _3235 + _3200;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3264 = dot(vec3(_957, _960, _963), vec3(_3233, _3234, _3235));
                        float _4601 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3267 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3268 = dot(vec3(_957, _960, _963), vec3(_3260 * _3254, _3260 * _3255, _3260 * _3256));
                        float _4612 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3271 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3275 = ((_3271 * _3271) * (_3253 + (-1.0))) + 1.0;
                        float _3276 = _3211 * _3252;
                        float _3277 = _3276 * _3276;
                        float _3280 = ((1.0 - _3277) * _3201) + _3277;
                        float _4623 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3282 = 1.0 - _3252;
                        float _3292 = (0.5 / (((_3281 * ((_3267 * _3282) + _3252)) + 9.9999999392252902907785028219223e-09) + (((_3281 * _3282) + _3252) * _3267))) * _3281;
                        float _4634 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3303 = (((_3253 * 3.1415927410125732421875) * (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) / ((_3275 * _3275) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125))) * _3207;
                        _3055 = (_3222 * _3170.x) + _3128;
                        _3056 = (_3222 * _3170.y) + _3129;
                        _3057 = (_3222 * _3170.z) + _3130;
                        _3052 = (_3303 * _3187.x) + _3125;
                        _3053 = (_3303 * _3187.y) + _3126;
                        _3054 = (_3303 * _3187.z) + _3127;
                        if (_3132 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3132;
                        }
                    }
                    frontier_phi_66_pred = _3052;
                    frontier_phi_66_pred_1 = _3057;
                    frontier_phi_66_pred_2 = _3056;
                    frontier_phi_66_pred_3 = _3055;
                    frontier_phi_66_pred_4 = _3054;
                    frontier_phi_66_pred_5 = _3053;
                }
                _2828 = frontier_phi_66_pred;
                _2838 = frontier_phi_66_pred_1;
                _2836 = frontier_phi_66_pred_2;
                _2834 = frontier_phi_66_pred_3;
                _2832 = frontier_phi_66_pred_4;
                _2830 = frontier_phi_66_pred_5;
                uint _2987 = _2986 + 1u;
                if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2980 = _2828;
                    _2981 = _2830;
                    _2982 = _2832;
                    _2983 = _2834;
                    _2984 = _2836;
                    _2985 = _2838;
                    _2986 = _2987;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
        }
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.z;
        uint _2844 = (_2842 >> 8u) & 15u;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        if (((4294967295u << _2844) & _2726) == 0u)
        {
            _2948 = _2827;
            _2950 = _2829;
            _2952 = _2831;
            _2954 = _2833;
            _2956 = _2835;
            _2958 = _2837;
        }
        else
        {
            float _2973 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
            float _2974 = _2973 * _2680;
            float _2975 = _2973 * _2681;
            float _2976 = _2973 * _2682;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2844 < ((_2842 >> 12u) & 15u))
            {
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _3108 = _2827;
                float _3109 = _2829;
                float _3110 = _2831;
                float _3111 = _2833;
                float _3112 = _2835;
                float _3113 = _2837;
                uint _3114 = _2844;
                uint _3123;
                bool _3124;
                for (;;)
                {
                    _3123 = texelFetch(g_lightClassification, int((((_2720 << 5u) + (_2706 << 9u)) + (_3114 << 2u)) >> 2u)).x;
                    _3124 = _3123 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3124)
                    {
                        frontier_phi_77_pred = _3113;
                        frontier_phi_77_pred_1 = _3112;
                        frontier_phi_77_pred_2 = _3111;
                        frontier_phi_77_pred_3 = _3110;
                        frontier_phi_77_pred_4 = _3109;
                        frontier_phi_77_pred_5 = _3108;
                    }
                    else
                    {
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3330 = _3108;
                        float _3331 = _3109;
                        float _3332 = _3110;
                        float _3333 = _3111;
                        float _3334 = _3112;
                        float _3335 = _3113;
                        uint _3336 = _3123;
                        uint _3337;
                        vec4 _3362;
                        float _3363;
                        vec4 _3378;
                        vec3 _3390;
                        vec4 _3405;
                        vec4 _3420;
                        float _3466;
                        bool _3467;
                        for (;;)
                        {
                            uint _3347 = ((_3114 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3336));
                            _3337 = (_3336 + 4294967295u) & _3336;
                            uint _3349 = _3347 * 40u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            _3363 = _3362.w;
                            uint _3365 = (_3347 * 40u) + 4u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3347 * 40u) + 8u;
                            _3390 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x));
                            uint _3392 = (_3347 * 40u) + 16u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3347 * 40u) + 20u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3422 = (_3347 * 40u) + 24u;
                            vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3441 = (_3347 * 40u) + 28u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3466 = fma(_2682, _3454.z, fma(_2681, _3454.y, _3454.x * _2680)) + _3454.w;
                            _3467 = !((fma(_2682, _3435.z, fma(_2681, _3435.y, _3435.x * _2680)) + _3435.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3467)
                            {
                                float _3494 = _3362.x - _2680;
                                float _3495 = _3362.y - _2681;
                                float _3496 = _3362.z - _2682;
                                float _3497 = dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496));
                                float _3500 = inversesqrt(_3497);
                                float _3501 = _3500 * _3494;
                                float _3502 = _3500 * _3495;
                                float _3503 = _3500 * _3496;
                                float _3507 = 1.0 - (_3497 / (_3363 * _3363));
                                float _4645 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3512 = sqrt(_3497) * _3378.w;
                                float _3514 = 1.39999997615814208984375 / (_3512 + 1.39999997615814208984375);
                                float _3515 = _3514 * _3514;
                                float _3518 = ((1.0 - _3515) * dot(vec3(_3501, _3502, _3503), vec3(_957, _960, _963))) + _3515;
                                float _3521 = _3512 * _3512;
                                float _3525 = (fma(_2682, _3405.z, fma(_2681, _3405.y, _3405.x * _2680)) + _3405.w) / _3466;
                                float _3526 = (fma(_2682, _3420.z, fma(_2681, _3420.y, _3420.x * _2680)) + _3420.w) / _3466;
                                float _3530 = 1.0 - dot(vec2(_3525, _3526), vec2(_3525, _3526));
                                float _4661 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3532 = _3531 * (((isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0))) * _3508) / ((_3521 * 0.699999988079071044921875) + 1.0));
                                float _3544 = exp2(log2(1.0 / ((_3521 * 3.5) + 5.0)) * 0.25);
                                float _3545 = 1.0 - _1017;
                                float _3552 = sqrt(1.0 - ((1.0 - (_3545 * _3545)) * (1.0 - (_3544 * _3544))));
                                float _3553 = _3552 * _3552;
                                float _3554 = _3553 * _3553;
                                float _3555 = _3501 - _2974;
                                float _3556 = _3502 - _2975;
                                float _3557 = _3503 - _2976;
                                float _3561 = inversesqrt(dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557)));
                                float _3565 = dot(vec3(_957, _960, _963), vec3((-0.0) - _2974, (-0.0) - _2975, (-0.0) - _2976));
                                float _4672 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3568 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3569 = dot(vec3(_957, _960, _963), vec3(_3561 * _3555, _3561 * _3556, _3561 * _3557));
                                float _4683 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3572 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3576 = ((_3572 * _3572) * (_3554 + (-1.0))) + 1.0;
                                float _3577 = _3514 * _3553;
                                float _3578 = _3577 * _3577;
                                float _3584 = ((1.0 - _3578) * dot(vec3(_957, _960, _963), vec3(_3501, _3502, _3503))) + _3578;
                                float _4694 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3586 = 1.0 - _3553;
                                float _3596 = (0.5 / (((_3585 * ((_3568 * _3586) + _3553)) + 9.9999999392252902907785028219223e-09) + (((_3585 * _3586) + _3553) * _3568))) * _3585;
                                float _4705 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3606 = (_3531 * _3508) * (((_3554 * 3.1415927410125732421875) * (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) / ((_3576 * _3576) * ((_3521 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3532 * _3378.y;
                                frontier_phi_83_pred_1 = _3532 * _3378.x;
                                frontier_phi_83_pred_2 = _3606 * _3390.z;
                                frontier_phi_83_pred_3 = _3606 * _3390.y;
                                frontier_phi_83_pred_4 = _3606 * _3390.x;
                                frontier_phi_83_pred_5 = _3532 * _3378.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3614 = frontier_phi_83_pred;
                            _3613 = frontier_phi_83_pred_1;
                            _3612 = frontier_phi_83_pred_2;
                            _3611 = frontier_phi_83_pred_3;
                            _3610 = frontier_phi_83_pred_4;
                            _3615 = frontier_phi_83_pred_5;
                            _3320 = _3613 + _3333;
                            _3321 = _3614 + _3334;
                            _3322 = _3615 + _3335;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            _3319 = _3612 + _3332;
                            if (_3337 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3337;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3322;
                        frontier_phi_77_pred_1 = _3321;
                        frontier_phi_77_pred_2 = _3320;
                        frontier_phi_77_pred_3 = _3319;
                        frontier_phi_77_pred_4 = _3318;
                        frontier_phi_77_pred_5 = _3317;
                    }
                    _2959 = frontier_phi_77_pred;
                    _2957 = frontier_phi_77_pred_1;
                    _2955 = frontier_phi_77_pred_2;
                    _2953 = frontier_phi_77_pred_3;
                    _2951 = frontier_phi_77_pred_4;
                    _2949 = frontier_phi_77_pred_5;
                    uint _3115 = _3114 + 1u;
                    if (_3115 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3108 = _2949;
                        _3109 = _2951;
                        _3110 = _2953;
                        _3111 = _2955;
                        _3112 = _2957;
                        _3113 = _2959;
                        _3114 = _3115;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2953;
                frontier_phi_58_59_ladder_1 = _2959;
                frontier_phi_58_59_ladder_2 = _2957;
                frontier_phi_58_59_ladder_3 = _2955;
                frontier_phi_58_59_ladder_4 = _2951;
                frontier_phi_58_59_ladder_5 = _2949;
            }
            else
            {
                frontier_phi_58_59_ladder = _2831;
                frontier_phi_58_59_ladder_1 = _2837;
                frontier_phi_58_59_ladder_2 = _2835;
                frontier_phi_58_59_ladder_3 = _2833;
                frontier_phi_58_59_ladder_4 = _2829;
                frontier_phi_58_59_ladder_5 = _2827;
            }
            _2948 = frontier_phi_58_59_ladder_5;
            _2950 = frontier_phi_58_59_ladder_4;
            _2952 = frontier_phi_58_59_ladder;
            _2954 = frontier_phi_58_59_ladder_3;
            _2956 = frontier_phi_58_59_ladder_2;
            _2958 = frontier_phi_58_59_ladder_1;
        }
        float _2963 = isnan(1.0) ? _1001 : (isnan(_1001) ? 1.0 : min(_1001, 1.0));
        _2739 = (_2963 * _2954) + _2194;
        _2741 = (_2963 * _2956) + _2196;
        _2743 = (_2963 * _2958) + _2198;
        _2745 = ((_2948 * 0.039999999105930328369140625) * _2963) + _2524;
        _2747 = ((_2950 * 0.039999999105930328369140625) * _2963) + _2526;
        _2749 = ((_2952 * 0.039999999105930328369140625) * _2963) + _2528;
    }
    else
    {
        _2739 = _2194;
        _2741 = _2196;
        _2743 = _2198;
        _2745 = _2524;
        _2747 = _2526;
        _2749 = _2528;
    }
    float _4721 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4732 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _4743 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _2766 = ((isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2739 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1001))) + ((_2745 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1836)) * cbPerFrame._m0[3u].x);
    float _2767 = ((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2741 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1001))) + ((_2747 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1836)) * cbPerFrame._m0[3u].x);
    float _2768 = ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2743 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1001))) + ((_2749 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1836)) * cbPerFrame._m0[3u].x);
    uint _2769 = _246 + 6u;
    float _2777 = _938 / cbSceneParam._m0[86u].x;
    float _2778 = _939 / cbSceneParam._m0[86u].y;
    vec4 _2792 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2777, _2778, (log2((isnan(cbSceneParam._m0[77u].w) ? _859 : (isnan(_859) ? cbSceneParam._m0[77u].w : min(_859, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2794 = _2792.x;
    float _2795 = _2792.y;
    float _2796 = _2792.z;
    float _2797 = _2792.w;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_859 > cbSceneParam._m0[78u].w)
    {
        float _2852 = isnan(_859) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _859 : min(cbSceneParam._m0[80u].w, _859));
        float _2853 = _2852 / _859;
        float _2864 = _2853 * _911;
        float _2865 = _912 * _2853;
        float _2866 = (-0.0) - _2865;
        float _2868 = _2853 * _913;
        float _2870 = (cbSceneParam._m0[77u].w * _2866) / _2852;
        float _2871 = _2870 + cbSceneParam._m0[79u].w;
        float _2872 = cbSceneParam._m0[79u].w - _2865;
        float _2878 = sqrt(((_2864 * _2864) + (_2865 * _2865)) + (_2868 * _2868));
        float _2881 = (1.0 - (cbSceneParam._m0[77u].w / _2852)) * _2878;
        float _2886 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2888 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3065;
        if (abs((_2866 - _2870) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3065 = ((((_2871 > 0.0) ? exp2(_2886 * _2871) : (2.0 - exp2(_2888 * _2871))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2881;
        }
        else
        {
            float _3009 = 1.0 / cbSceneParam._m0[80u].x;
            float _3010 = isnan(_2872) ? _2871 : (isnan(_2871) ? _2872 : max(_2871, _2872));
            float _3011 = isnan(_2872) ? _2871 : (isnan(_2871) ? _2872 : min(_2871, _2872));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            float _3021 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : min(_3011, 0.0));
            _3065 = ((abs(_2878 / _2866) * cbSceneParam._m0[80u].y) * ((((_3020 - _3021) * 2.0) - ((exp2(_2886 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0)))) - exp2(_2886 * (isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))))) * _3009)) - ((exp2(_2888 * _3020) - exp2(_2888 * _3021)) * _3009))) + (_2881 * cbSceneParam._m0[80u].z);
        }
        vec4 _3067 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2777, _2778, 1.0), 0.0);
        float _3076 = exp2((_3065 * (-1.44269502162933349609375)) * (1.0 - _3067.w));
        float _3077 = log2(_3076);
        float _3093 = log2(_2797);
        _2890 = (exp2(_3093 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].x)) * _3067.x) / cbSceneParam._m0[78u].x)) + _2794;
        _2892 = (exp2(_3093 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].y)) * _3067.y) / cbSceneParam._m0[78u].y)) + _2795;
        _2894 = (exp2(_3093 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].z)) * _3067.z) / cbSceneParam._m0[78u].z)) + _2796;
        _2896 = _3076 * _2797;
    }
    else
    {
        _2890 = _2794;
        _2892 = _2795;
        _2894 = _2796;
        _2896 = _2797;
    }
    bool _3103;
    vec4 _2906;
    vec4 _2928;
    float _2930;
    float _2934;
    float _2935;
    float _2936;
    float _2937;
    bool _2947;
    for (;;)
    {
        _2906 = cbMatDynParam._m0[0u];
        float _2908 = roundEven(_2906.y);
        bool _2909 = _2908 == 3.0;
        float _2910 = log2(_2896);
        float _2917 = exp2(_2910 * cbSceneParam._m0[78u].x) * _2766;
        float _2918 = exp2(_2910 * cbSceneParam._m0[78u].y) * _2767;
        float _2919 = exp2(_2910 * cbSceneParam._m0[78u].z) * _2768;
        float _2926 = _927 + (-0.5);
        _2928 = cbMtdParam._m0[1u];
        _2930 = _2928.y * _2926;
        float _2933 = (_2908 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2934 = _2933 * (_2909 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2890)));
        _2935 = _2933 * (_2909 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2892)));
        _2936 = _2933 * (_2909 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2894)));
        _2937 = _2926 * 0.999000012874603271484375;
        _2947 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2947)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _2937) < 0.5)
            {
                _3103 = true;
                break;
            }
        }
        uint _3044 = _976 + uint(_2906.w);
        if ((cbInstanceData._m0[_3044].w < 1.0) && ((cbInstanceData._m0[_3044].w + _2937) < 0.5))
        {
            _3103 = true;
            break;
        }
        if ((_2930 + 1.0) < _2928.x)
        {
            _3103 = true;
            break;
        }
        _3103 = false;
        break;
    }
    float _3308;
    if (_3103)
    {
        discard_state = true;
        _3308 = 0.0;
    }
    else
    {
        _3308 = cbInstanceData._m0[_2769].w;
    }
    SV_Target.x = _2934;
    SV_Target.y = _2935;
    SV_Target.z = _2936;
    SV_Target.w = _3308;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2769].w;
    discard_exit();
}


