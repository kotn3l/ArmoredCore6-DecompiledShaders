#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1359;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3666 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3677 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3688 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _364 = _359.x * cbMtdParam._m0[11u].x;
    float _365 = _359.y * cbMtdParam._m0[11u].y;
    float _366 = _359.z * cbMtdParam._m0[11u].z;
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _439 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _453 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _470 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _404.x) * 2.0) - ((((_441 - _453) * cbMtdParam._m0[24u].z) + _453) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3699 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _478 = (_471 * ((_385.x * cbMtdParam._m0[12u].x) - _364)) + _364;
    float _479 = (_471 * ((_385.y * cbMtdParam._m0[12u].y) - _365)) + _365;
    float _480 = (_471 * ((_385.z * cbMtdParam._m0[12u].z) - _366)) + _366;
    vec4 _497 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _296) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _297) + cbTextureTilingScale._m0[3u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _519 = _517.x;
    float _529 = dot(vec4(_519, _517.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _543 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _404.y) * 2.0) - ((((_519 - _529) * cbMtdParam._m0[24u].z) + _529) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3710 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _554 = (_333.x * cbMtdParam._m0[9u].x) * ((_544 * ((_497.x * cbMtdParam._m0[13u].x) - _478)) + _478);
    float _555 = (_333.y * cbMtdParam._m0[9u].y) * ((_544 * ((_497.y * cbMtdParam._m0[13u].y) - _479)) + _479);
    float _556 = (_333.z * cbMtdParam._m0[9u].z) * ((_544 * ((_497.z * cbMtdParam._m0[13u].z) - _480)) + _480);
    float _560 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _554;
    float _563 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _555;
    float _566 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _556;
    float _574 = (((_554 - _560) * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) + _560) * 4.55000019073486328125;
    float _576 = (((_555 - _563) * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) + _563) * 4.55000019073486328125;
    float _578 = (((_556 - _566) * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) + _566) * 4.55000019073486328125;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _632 = _630.x;
    float _633 = _630.y;
    float _634 = _630.z;
    float _641 = ((_613.x - _632) * _471) + _632;
    float _642 = ((_613.y - _633) * _471) + _633;
    float _643 = ((_613.z - _634) * _471) + _634;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _296) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _297) + cbTextureTilingScale._m0[2u].w));
    float _668 = ((_655.z - _643) * _544) + _643;
    float _671 = ((((_655.x - _641) * _544) + _641) * 2.0) + (-1.0);
    float _672 = ((((_655.y - _642) * _544) + _642) * 2.0) + (-1.0);
    float _673 = dot(vec2(_671, _672), vec2(_671, _672));
    float _3721 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _678 = sqrt(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _710 = (_671 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_590.x * 2.0) + (-1.0)))) + (((_698.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _711 = (_672 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_590.y * 2.0) + (-1.0)))) + (((_698.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _723 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _725 = _723.x;
    float _726 = 1.0 - _725;
    float _752 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_725 - _726) * cbMtdParam._m0[24u].y) + _726) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3732 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _753 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _761 = ((((cbMtdParam._m0[10u].x - _574) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _753) + _574;
    float _762 = ((((cbMtdParam._m0[10u].y - _576) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _753) + _576;
    float _763 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _578)) * _753) + _578;
    float _768 = (((_590.z - _668) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _668;
    float _772 = ((_698.z - _768) * cbMtdParam._m0[19u].w) + _768;
    float _776 = ((cbMtdParam._m0[23u].y - _772) * _753) + _772;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _801 = (_795.x * 2.0) + (-1.0);
    float _802 = (_795.y * 2.0) + (-1.0);
    float _803 = dot(vec2(_801, _802), vec2(_801, _802));
    float _3743 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _819 = (_753 * (((cbMtdParam._m0[22u].z * _710) - _710) + _801)) + _710;
    float _820 = (_753 * (((cbMtdParam._m0[22u].z * _711) - _711) + _802)) + _711;
    float _821 = (_753 * (sqrt(1.0 - (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) - _678)) + _678;
    float _825 = cbMtdParam._m0[22u].x + _698.w;
    float _828 = fma(_821, _245 * NORMAL.x, fma(_820, _252 * TANGENT.x, (_238 * _230) * _819));
    float _831 = fma(_821, _245 * NORMAL.y, fma(_820, _252 * TANGENT.y, (_238 * _231) * _819));
    float _834 = fma(_821, _245 * NORMAL.z, fma(_820, _252 * TANGENT.z, (_238 * _232) * _819));
    float _838 = inversesqrt(dot(vec3(_828, _831, _834), vec3(_828, _831, _834)));
    float _839 = _838 * _828;
    float _840 = _838 * _831;
    float _841 = _838 * _834;
    float _3754 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _842 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _3776 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _3787 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _3798 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _860 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _910 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _900);
    float _911 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _900);
    float _912 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _900);
    float _916 = inversesqrt(dot(vec3(_910, _911, _912), vec3(_910, _911, _912)));
    float _917 = _910 * _916;
    float _918 = _911 * _916;
    float _919 = _912 * _916;
    float _925 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _926 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _944 = fma(_841, cbSceneParam._m0[5u].z, fma(_840, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _839));
    float _947 = fma(_841, cbSceneParam._m0[6u].z, fma(_840, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _839));
    float _950 = fma(_841, cbSceneParam._m0[7u].z, fma(_840, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _839));
    uint _964 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _970 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) * cbInstanceData._m0[_964].x;
    float _971 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbInstanceData._m0[_964].y;
    float _972 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * cbInstanceData._m0[_964].z;
    float _3809 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _973 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _974 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _975 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    vec4 _984 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _925, cbSceneParam._m0[86u].y * _926));
    float _988 = ((isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * TEXCOORD_5.w) * _984.x;
    float _989 = dot(vec3(_839, _840, _841), vec3(_917, _918, _919));
    float _992 = _989 * 2.0;
    float _996 = (_992 * _839) - _917;
    float _997 = (_992 * _840) - _918;
    float _998 = (_992 * _841) - _919;
    float _1002 = abs(dot(vec3(_917, _918, _919), vec3(_839, _840, _841)));
    float _3842 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1004 = sqrt(_842);
    float _1017 = exp2((_1004 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1004 * 3.0));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1358;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1083 = fma(_1057, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1049));
        float _1087 = fma(_1057, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1049));
        float _1091 = fma(_1057, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1049));
        float _1116 = _1049 + _839;
        float _1117 = _1053 + _840;
        float _1118 = _1057 + _841;
        float _1128 = fma(_1118, cbModelParam._m0[26u].z, fma(_1117, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116)) - _1083;
        float _1129 = fma(_1118, cbModelParam._m0[27u].z, fma(_1117, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116)) - _1087;
        float _1130 = fma(_1118, cbModelParam._m0[28u].z, fma(_1117, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116)) - _1091;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1083 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1087 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[34u].z) + ((((((_1091 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1186 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1152.x + (-0.5));
        float _1188 = _1186 * (_1152.y + (-0.5));
        float _1189 = _1186 * (_1152.z + (-0.5));
        float _1196 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1159.x + (-0.5));
        float _1198 = _1196 * (_1159.y + (-0.5));
        float _1199 = _1196 * (_1159.z + (-0.5));
        float _1206 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1166.x + (-0.5));
        float _1208 = _1206 * (_1166.y + (-0.5));
        float _1209 = _1206 * (_1166.z + (-0.5));
        float _1216 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1173.x + (-0.5));
        float _1218 = _1216 * (_1173.y + (-0.5));
        float _1219 = _1216 * (_1173.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1240 = (dot(vec3(_839, _840, _841), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1250 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3890 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1252 + 1.0))) + _1257) * _1220;
        float _1267 = _1188 * 0.5;
        float _1268 = _1198 * 0.5;
        float _1269 = _1208 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_839, _840, _841), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3923 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1294 + 1.0))) + _1299) * _1221;
        float _1309 = _1189 * 0.5;
        float _1310 = _1199 * 0.5;
        float _1311 = _1209 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_839, _840, _841), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3956 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1336 + 1.0))) + _1341) * _1222;
        _1358 = _1189;
        _1360 = _1188;
        _1361 = _1187;
        _1362 = _1199;
        _1363 = _1198;
        _1364 = _1197;
        _1365 = _1209;
        _1366 = _1208;
        _1367 = _1207;
        _1368 = _1222;
        _1369 = _1221;
        _1370 = _1220;
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1359;
        _1360 = _1359;
        _1361 = _1359;
        _1362 = _1359;
        _1363 = _1359;
        _1364 = _1359;
        _1365 = _1359;
        _1366 = _1359;
        _1367 = _1359;
        _1368 = _1359;
        _1369 = _1359;
        _1370 = _1359;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1397 = fma(_1057, cbModelParam._m0[30u].z, fma(_1053, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049));
        float _1401 = fma(_1057, cbModelParam._m0[31u].z, fma(_1053, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049));
        float _1405 = fma(_1057, cbModelParam._m0[32u].z, fma(_1053, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049));
        float _1428 = _1049 + _839;
        float _1429 = _1053 + _840;
        float _1430 = _1057 + _841;
        float _1440 = fma(_1430, cbModelParam._m0[30u].z, fma(_1429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1428)) - _1397;
        float _1441 = fma(_1430, cbModelParam._m0[31u].z, fma(_1429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1428)) - _1401;
        float _1442 = fma(_1430, cbModelParam._m0[32u].z, fma(_1429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1428)) - _1405;
        float _1446 = inversesqrt(dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442)));
        float _1459 = ((_1446 * _1440) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1397 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1446 * _1441) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1401 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1446 * _1442) / cbModelParam._m0[35u].z) + ((((((_1405 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        float _1496 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1463.x + (-0.5));
        float _1498 = _1496 * (_1463.y + (-0.5));
        float _1499 = _1496 * (_1463.z + (-0.5));
        float _1506 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1470.x + (-0.5));
        float _1508 = _1506 * (_1470.y + (-0.5));
        float _1509 = _1506 * (_1470.z + (-0.5));
        float _1516 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1477.x + (-0.5));
        float _1518 = _1516 * (_1477.y + (-0.5));
        float _1519 = _1516 * (_1477.z + (-0.5));
        float _1526 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1484.x + (-0.5));
        float _1528 = _1526 * (_1484.y + (-0.5));
        float _1529 = _1526 * (_1484.z + (-0.5));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = _1497 * 0.5;
        float _1534 = _1507 * 0.5;
        float _1535 = _1517 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_839, _840, _841), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4019 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1560 + 1.0))) + _1565) * _1530;
        float _1575 = _1498 * 0.5;
        float _1576 = _1508 * 0.5;
        float _1577 = _1518 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_839, _840, _841), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4052 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1602 + 1.0))) + _1607) * _1531;
        float _1617 = _1499 * 0.5;
        float _1618 = _1509 * 0.5;
        float _1619 = _1519 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_839, _840, _841), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4085 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1644 + 1.0))) + _1649) * _1532;
        _1666 = _1499;
        _1667 = _1498;
        _1668 = _1497;
        _1669 = _1509;
        _1670 = _1508;
        _1671 = _1507;
        _1672 = _1519;
        _1673 = _1518;
        _1674 = _1517;
        _1675 = _1532;
        _1676 = _1531;
        _1677 = _1530;
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
    }
    else
    {
        _1666 = _1359;
        _1667 = _1359;
        _1668 = _1359;
        _1669 = _1359;
        _1670 = _1359;
        _1671 = _1359;
        _1672 = _1359;
        _1673 = _1359;
        _1674 = _1359;
        _1675 = _1359;
        _1676 = _1359;
        _1677 = _1359;
        _1678 = 0.0;
        _1679 = 0.0;
        _1680 = 0.0;
    }
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1371)) + _1371;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1372)) + _1372;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1373)) + _1373;
    float _1713 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1690));
    float _1734 = _996 * 0.5;
    float _1735 = _997 * 0.5;
    float _1736 = _998 * 0.5;
    float _1737 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1740 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1743 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1777;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1750 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1358, _1362, _1365, _1368));
        float _1754 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1758 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1765 = dot(vec4(cbModelParam._m0[39u]), vec4(_1734, _1735, _1736, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1788;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1779 = dot(vec4(cbModelParam._m0[40u]), vec4(_1734, _1735, _1736, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1792 = (_1788 * cbModelParam._m0[1u].x) + (_1777 * (1.0 - cbModelParam._m0[1u].x));
    float _1802 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _842);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1802 : min(cbModelParam._m0[25u].z, _1802));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1852 = fma(_1057, cbModelParam._m0[13u].z, fma(_1053, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1049)) + cbModelParam._m0[13u].w;
        float _1856 = fma(_1057, cbModelParam._m0[14u].z, fma(_1053, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1049)) + cbModelParam._m0[14u].w;
        float _1860 = fma(_1057, cbModelParam._m0[15u].z, fma(_1053, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1049)) + cbModelParam._m0[15u].w;
        float _1863 = fma(_998, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996));
        float _1866 = fma(_998, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996));
        float _1869 = fma(_998, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996));
        float _1897;
        if (_1863 > 0.0)
        {
            _1897 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1897 = frontier_phi_14_12_ladder;
        }
        float _2099;
        if (_1866 > 0.0)
        {
            _2099 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2099 = frontier_phi_23_19_ladder;
        }
        float _2342;
        if (_1869 > 0.0)
        {
            _2342 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2342 = frontier_phi_35_30_ladder;
        }
        float _2344 = isnan(_2099) ? _1897 : (isnan(_1897) ? _2099 : min(_1897, _2099));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1863) + _1852;
        float _2350 = (_2345 * _1866) + _1856;
        float _2351 = (_2345 * _1869) + _1860;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2354 = (-1.0) - _2352;
        float _2356 = _2352 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2351 > _2356) || ((_2351 < _2354) || ((_2350 > _2356) || ((_2350 < _2354) || ((_2349 < _2354) || (_2349 > _2356))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2351, cbModelParam._m0[9u].z, fma(_2350, cbModelParam._m0[9u].y, _2349 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2351, cbModelParam._m0[10u].z, fma(_2350, cbModelParam._m0[10u].y, _2349 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2351, cbModelParam._m0[11u].z, fma(_2350, cbModelParam._m0[11u].y, _2349 * cbModelParam._m0[11u].x))), _1803);
            frontier_phi_13_35_ladder = _2475.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2475.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2475.x * cbModelParam._m0[1u].y;
        }
        _1885 = frontier_phi_13_35_ladder_2;
        _1887 = frontier_phi_13_35_ladder_1;
        _1889 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1873 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_996, _997, _998), _1803);
        _1885 = _1873.x * cbModelParam._m0[1u].y;
        _1887 = _1873.y * cbModelParam._m0[1u].y;
        _1889 = _1873.z * cbModelParam._m0[1u].y;
    }
    float _1893 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _842);
    float _1894 = isnan(_1893) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1893 : min(cbModelParam._m0[25u].w, _1893));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1949 = fma(_1057, cbModelParam._m0[21u].z, fma(_1053, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1049)) + cbModelParam._m0[21u].w;
        float _1953 = fma(_1057, cbModelParam._m0[22u].z, fma(_1053, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1049)) + cbModelParam._m0[22u].w;
        float _1957 = fma(_1057, cbModelParam._m0[23u].z, fma(_1053, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1049)) + cbModelParam._m0[23u].w;
        float _1960 = fma(_998, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996));
        float _1963 = fma(_998, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996));
        float _1966 = fma(_998, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996));
        float _2104;
        if (_1960 > 0.0)
        {
            _2104 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2104 = frontier_phi_25_21_ladder;
        }
        float _2369;
        if (_1963 > 0.0)
        {
            _2369 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2369 = frontier_phi_37_32_ladder;
        }
        float _2574;
        if (_1966 > 0.0)
        {
            _2574 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2574 = frontier_phi_46_43_ladder;
        }
        float _2576 = isnan(_2369) ? _2104 : (isnan(_2104) ? _2369 : min(_2104, _2369));
        float _2577 = isnan(_2574) ? _2576 : (isnan(_2576) ? _2574 : min(_2576, _2574));
        float _2581 = (_2577 * _1960) + _1949;
        float _2582 = (_2577 * _1963) + _1953;
        float _2583 = (_2577 * _1966) + _1957;
        float _2584 = _2577 * 9.9999997473787516355514526367188e-05;
        float _2585 = (-1.0) - _2584;
        float _2587 = _2584 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2583 > _2587) || ((_2583 < _2585) || ((_2582 > _2587) || ((_2582 < _2585) || ((_2581 < _2585) || (_2581 > _2587))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2583, cbModelParam._m0[17u].z, fma(_2582, cbModelParam._m0[17u].y, _2581 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2583, cbModelParam._m0[18u].z, fma(_2582, cbModelParam._m0[18u].y, _2581 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2583, cbModelParam._m0[19u].z, fma(_2582, cbModelParam._m0[19u].y, _2581 * cbModelParam._m0[19u].x))), _1894);
            frontier_phi_22_46_ladder = _2782.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2782.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2782.x * cbModelParam._m0[1u].z;
        }
        _1985 = frontier_phi_22_46_ladder_2;
        _1987 = frontier_phi_22_46_ladder_1;
        _1989 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_996, _997, _998), _1894);
        _1985 = _1969.x * cbModelParam._m0[1u].z;
        _1987 = _1969.y * cbModelParam._m0[1u].z;
        _1989 = _1969.z * cbModelParam._m0[1u].z;
    }
    float _2001 = ((((1.0 - _1017) * ((_1004 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1017 * _1004)) * _988;
    float _2002 = _2001 * ((cbModelParam._m0[1u].w * (_1985 - _1885)) + _1885);
    float _2003 = _2001 * ((cbModelParam._m0[1u].w * (_1987 - _1887)) + _1887);
    float _2004 = _2001 * ((cbModelParam._m0[1u].w * (_1989 - _1889)) + _1889);
    float _2007 = fma(_2004, cbSceneParam._m0[89u].z, fma(_2003, cbSceneParam._m0[89u].y, _2002 * cbSceneParam._m0[89u].x));
    float _2010 = fma(_2004, cbSceneParam._m0[90u].z, fma(_2003, cbSceneParam._m0[90u].y, _2002 * cbSceneParam._m0[90u].x));
    float _2013 = fma(_2004, cbSceneParam._m0[91u].z, fma(_2003, cbSceneParam._m0[91u].y, _2002 * cbSceneParam._m0[91u].x));
    uvec4 _2023 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2025 = _2023.x * 14u;
    uint _2026 = _2025 + 13u;
    float _2033 = _988 + (-1.0);
    float _2038 = (cbLight._m0[_2026].x * _2033) + 1.0;
    float _2039 = (cbLight._m0[_2026].y * _2033) + 1.0;
    float _2040 = (cbLight._m0[_2026].z * _2033) + 1.0;
    float _2041 = (cbLight._m0[_2026].w * _2033) + 1.0;
    uint _2042 = _2025 + 5u;
    float _2048 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
    uint _2052 = _2025 + 4u;
    float _2058 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    uint _2062 = _2025 | 1u;
    float _2073 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_839, _840, _841));
    float _2076 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_839, _840, _841));
    float _4221 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _4232 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2081 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _2083 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.3183098733425140380859375;
    float _2090 = ((cbLight._m0[_2042].x * _2048) * _2083) + ((cbLight._m0[_2052].x * _2058) * _2081);
    float _2091 = ((_2048 * cbLight._m0[_2042].y) * _2083) + ((_2058 * cbLight._m0[_2052].y) * _2081);
    float _2092 = ((_2048 * cbLight._m0[_2042].z) * _2083) + ((_2058 * cbLight._m0[_2052].z) * _2081);
    uvec4 _2096 = floatBitsToUint(cbLight._m0[_2025 + 12u]);
    bool _2098 = _2096.x == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2098)
    {
        _2109 = _2090;
        _2111 = _2091;
        _2113 = _2092;
    }
    else
    {
        uint _2117 = _2025 + 6u;
        float _2133 = (dot(vec3(cbLight._m0[_2025 + 2u].xyz), vec3(_839, _840, _841)) * 0.5) + 0.5;
        float _2134 = _2133 * _2133;
        float _4243 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2135 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2136 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2109 = (((cbLight._m0[_2117].x * 0.3183098733425140380859375) * _2135) * _2136) + _2090;
        _2111 = (((cbLight._m0[_2117].y * 0.3183098733425140380859375) * _2135) * _2136) + _2091;
        _2113 = (((cbLight._m0[_2117].z * 0.3183098733425140380859375) * _2135) * _2136) + _2092;
    }
    bool _2116 = _2096.y == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2116)
    {
        _2154 = _2109;
        _2156 = _2111;
        _2158 = _2113;
    }
    else
    {
        uint _2313 = _2025 + 7u;
        float _2329 = (dot(vec3(cbLight._m0[_2025 + 3u].xyz), vec3(_839, _840, _841)) * 0.5) + 0.5;
        float _2330 = _2329 * _2329;
        float _4259 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2331 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2332 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2154 = (((cbLight._m0[_2313].x * 0.3183098733425140380859375) * _2331) * _2332) + _2109;
        _2156 = (((cbLight._m0[_2313].y * 0.3183098733425140380859375) * _2331) * _2332) + _2111;
        _2158 = (((cbLight._m0[_2313].z * 0.3183098733425140380859375) * _2331) * _2332) + _2113;
    }
    uint _2161 = _2025 + 8u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _842) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_2025].x + _917;
    float _2177 = cbLight._m0[_2025].y + _918;
    float _2178 = cbLight._m0[_2025].z + _919;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2025].xyz));
    float _4275 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _4286 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _2190 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2191 = dot(vec3(_839, _840, _841), vec3(_2183, _2184, _2185));
    float _4297 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2183, _2184, _2185));
    float _4308 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2175 * _2175;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2214 = (exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2215 = 1.0 - _2175;
    float _2226 = (0.5 / (((_2190 * ((_2189 * _2215) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2215) + _2175) * _2189))) * _2189;
    float _4319 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    uint _2239 = _2025 + 9u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _842) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_2062].x + _917;
    float _2253 = cbLight._m0[_2062].y + _918;
    float _2254 = cbLight._m0[_2062].z + _919;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2062].xyz));
    float _4330 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2266 = dot(vec3(_839, _840, _841), vec3(_2259, _2260, _2261));
    float _4341 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2270 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2259, _2260, _2261));
    float _4352 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2274 = _2251 * _2251;
    float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
    float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2288 = 1.0 - _2251;
    float _2298 = (0.5 / (((_2190 * ((_2265 * _2288) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2288) + _2251) * _2265))) * _2265;
    float _4363 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
    float _2310 = (((_2287 * cbLight._m0[_2239].x) * _2300) * _2048) + (((_2214 * cbLight._m0[_2161].x) * _2228) * _2058);
    float _2311 = (((_2287 * cbLight._m0[_2239].y) * _2300) * _2048) + (((_2214 * cbLight._m0[_2161].y) * _2228) * _2058);
    float _2312 = (((_2287 * cbLight._m0[_2239].z) * _2300) * _2048) + (((_2214 * cbLight._m0[_2161].z) * _2228) * _2058);
    float _2374;
    float _2376;
    float _2378;
    if (_2098)
    {
        _2374 = _2310;
        _2376 = _2311;
        _2378 = _2312;
    }
    else
    {
        uint _2380 = _2025 + 2u;
        uint _2384 = _2025 + 10u;
        float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _842) * 0.949999988079071044921875);
        float _2399 = _2398 * _2398;
        float _2400 = cbLight._m0[_2380].x + _917;
        float _2401 = cbLight._m0[_2380].y + _918;
        float _2402 = cbLight._m0[_2380].z + _919;
        float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
        float _2407 = _2406 * _2400;
        float _2408 = _2406 * _2401;
        float _2409 = _2406 * _2402;
        float _2410 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2380].xyz));
        float _4374 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2414 = dot(vec3(_839, _840, _841), vec3(_2407, _2408, _2409));
        float _4385 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2418 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2407, _2408, _2409));
        float _4396 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2422 = _2399 * _2399;
        float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
        float _2435 = (exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2436 = 1.0 - _2399;
        float _2446 = (0.5 / (((_2190 * ((_2413 * _2436) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2436) + _2399) * _2413))) * _2413;
        float _4407 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2448 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
        float _2449 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2374 = (((_2435 * cbLight._m0[_2384].x) * _2448) * _2449) + _2310;
        _2376 = (((_2435 * cbLight._m0[_2384].y) * _2448) * _2449) + _2311;
        _2378 = (((_2435 * cbLight._m0[_2384].z) * _2448) * _2449) + _2312;
    }
    float _2484;
    float _2486;
    float _2488;
    if (_2116)
    {
        _2484 = _2374;
        _2486 = _2376;
        _2488 = _2378;
    }
    else
    {
        uint _2495 = _2025 + 3u;
        uint _2499 = _2025 + 11u;
        float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2495].w)) * _842) * 0.949999988079071044921875);
        float _2514 = _2513 * _2513;
        float _2515 = cbLight._m0[_2495].x + _917;
        float _2516 = cbLight._m0[_2495].y + _918;
        float _2517 = cbLight._m0[_2495].z + _919;
        float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
        float _2522 = _2521 * _2515;
        float _2523 = _2521 * _2516;
        float _2524 = _2521 * _2517;
        float _2525 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2495].xyz));
        float _4423 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2529 = dot(vec3(_839, _840, _841), vec3(_2522, _2523, _2524));
        float _4434 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2533 = dot(vec3(cbLight._m0[_2495].xyz), vec3(_2522, _2523, _2524));
        float _4445 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2537 = _2514 * _2514;
        float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
        float _2550 = (exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2551 = 1.0 - _2514;
        float _2561 = (0.5 / (((_2190 * ((_2528 * _2551) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2551) + _2514) * _2528))) * _2528;
        float _4456 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2563 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
        float _2564 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2484 = (((_2550 * cbLight._m0[_2499].x) * _2563) * _2564) + _2374;
        _2486 = (((_2550 * cbLight._m0[_2499].y) * _2563) * _2564) + _2376;
        _2488 = (((_2550 * cbLight._m0[_2499].z) * _2563) * _2564) + _2378;
    }
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    if (_2023.y == 0u)
    {
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2639;
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2639;
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2639;
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.x;
        uint _2666 = uint((float(_2654.y) * floor(float(uint(cbSceneParam._m0[85u].y * _926) / _2655))) + floor(float(uint(cbSceneParam._m0[85u].x * _925) / _2655)));
        float _2676 = (log2(_2642 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2677 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        uint _2680 = uint(isnan(14.0) ? _2677 : (isnan(_2677) ? 14.0 : min(_2677, 14.0)));
        uvec4 _2685 = texelFetch(g_lightClusterGridBuffer, int(((_2680 << 2u) + (_2666 << 6u)) >> 2u));
        uint _2686 = _2685.x;
        uint _2687 = _2654.z;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        if (((((1u << ((_2687 >> 4u) & 15u)) + 4294967295u) & _2686) == 0u) || ((_2687 & 240u) == 0u))
        {
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
        }
        else
        {
            float _2788;
            float _2790;
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            uint _2938 = 0u;
            uint _2947;
            bool _2948;
            for (;;)
            {
                _2947 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                _2948 = _2947 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2948)
                {
                    frontier_phi_61_pred = _2932;
                    frontier_phi_61_pred_1 = _2937;
                    frontier_phi_61_pred_2 = _2936;
                    frontier_phi_61_pred_3 = _2935;
                    frontier_phi_61_pred_4 = _2934;
                    frontier_phi_61_pred_5 = _2933;
                }
                else
                {
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    uint _3062;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2947;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    for (;;)
                    {
                        uint _3066 = uint(findLSB(_3062)) + (_2938 << 5u);
                        uint _3063 = (_3062 + 4294967295u) & _3062;
                        uint _3068 = _3066 * 48u;
                        vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 3u)).x));
                        uint _3088 = (_3066 * 48u) + 4u;
                        vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 3u)).x));
                        uint _3107 = (_3066 * 48u) + 8u;
                        vec3 _3118 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x));
                        float _3122 = _3082.x - _2640;
                        float _3123 = _3082.y - _2641;
                        float _3124 = _3082.z - _2642;
                        float _3125 = dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124));
                        float _3128 = inversesqrt(_3125);
                        float _3129 = _3128 * _3122;
                        float _3130 = _3128 * _3123;
                        float _3131 = _3128 * _3124;
                        float _3132 = dot(vec3(_944, _947, _950), vec3(_3129, _3130, _3131));
                        float _3137 = 1.0 - (_3125 * _3082.w);
                        float _4482 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3139 = sqrt(_3125) * _3101.w;
                        float _3142 = 1.39999997615814208984375 / (_3139 + 1.39999997615814208984375);
                        float _3143 = _3142 * _3142;
                        float _3146 = ((1.0 - _3143) * _3132) + _3143;
                        float _3149 = _3139 * _3139;
                        float _3153 = ((isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))) * _3138) / ((_3149 * 0.699999988079071044921875) + 1.0);
                        float _3157 = (-0.0) - _2640;
                        float _3158 = (-0.0) - _2641;
                        float _3159 = (-0.0) - _2642;
                        float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                        float _3164 = _3163 * _3157;
                        float _3165 = _3163 * _3158;
                        float _3166 = _3163 * _3159;
                        float _3174 = exp2(log2(1.0 / ((_3149 * 3.5) + 5.0)) * 0.25);
                        float _3175 = 1.0 - _1004;
                        float _3182 = sqrt(1.0 - ((1.0 - (_3175 * _3175)) * (1.0 - (_3174 * _3174))));
                        float _3183 = _3182 * _3182;
                        float _3184 = _3183 * _3183;
                        float _3185 = _3164 + _3129;
                        float _3186 = _3165 + _3130;
                        float _3187 = _3166 + _3131;
                        float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                        float _3195 = dot(vec3(_944, _947, _950), vec3(_3164, _3165, _3166));
                        float _4498 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3199 = dot(vec3(_944, _947, _950), vec3(_3191 * _3185, _3191 * _3186, _3191 * _3187));
                        float _4509 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3202 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3206 = ((_3202 * _3202) * (_3184 + (-1.0))) + 1.0;
                        float _3207 = _3142 * _3183;
                        float _3208 = _3207 * _3207;
                        float _3211 = ((1.0 - _3208) * _3132) + _3208;
                        float _4520 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3212 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3213 = 1.0 - _3183;
                        float _3223 = (0.5 / (((_3212 * ((_3198 * _3213) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_3212 * _3213) + _3183) * _3198))) * _3212;
                        float _4531 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3234 = (((_3184 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3206 * _3206) * ((_3149 * 2.1991131305694580078125) + 3.141590118408203125))) * _3138;
                        _2991 = (_3153 * _3101.x) + _3059;
                        _2992 = (_3153 * _3101.y) + _3060;
                        _2993 = (_3153 * _3101.z) + _3061;
                        _2988 = (_3234 * _3118.x) + _3056;
                        _2989 = (_3234 * _3118.y) + _3057;
                        _2990 = (_3234 * _3118.z) + _3058;
                        if (_3063 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _3063;
                        }
                    }
                    frontier_phi_61_pred = _2988;
                    frontier_phi_61_pred_1 = _2993;
                    frontier_phi_61_pred_2 = _2992;
                    frontier_phi_61_pred_3 = _2991;
                    frontier_phi_61_pred_4 = _2990;
                    frontier_phi_61_pred_5 = _2989;
                }
                _2788 = frontier_phi_61_pred;
                _2798 = frontier_phi_61_pred_1;
                _2796 = frontier_phi_61_pred_2;
                _2794 = frontier_phi_61_pred_3;
                _2792 = frontier_phi_61_pred_4;
                _2790 = frontier_phi_61_pred_5;
                uint _2939 = _2938 + 1u;
                if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2932 = _2788;
                    _2933 = _2790;
                    _2934 = _2792;
                    _2935 = _2794;
                    _2936 = _2796;
                    _2937 = _2798;
                    _2938 = _2939;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
        }
        uvec4 _2801 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2802 = _2801.z;
        uint _2804 = (_2802 >> 8u) & 15u;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((4294967295u << _2804) & _2686) == 0u)
        {
            _2900 = _2787;
            _2902 = _2789;
            _2904 = _2791;
            _2906 = _2793;
            _2908 = _2795;
            _2910 = _2797;
        }
        else
        {
            float _2925 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
            float _2926 = _2925 * _2640;
            float _2927 = _2925 * _2641;
            float _2928 = _2925 * _2642;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2804 < ((_2802 >> 12u) & 15u))
            {
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _3039 = _2787;
                float _3040 = _2789;
                float _3041 = _2791;
                float _3042 = _2793;
                float _3043 = _2795;
                float _3044 = _2797;
                uint _3045 = _2804;
                uint _3054;
                bool _3055;
                for (;;)
                {
                    _3054 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_3045 << 2u)) >> 2u)).x;
                    _3055 = _3054 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3055)
                    {
                        frontier_phi_67_pred = _3042;
                        frontier_phi_67_pred_1 = _3043;
                        frontier_phi_67_pred_2 = _3044;
                        frontier_phi_67_pred_3 = _3041;
                        frontier_phi_67_pred_4 = _3040;
                        frontier_phi_67_pred_5 = _3039;
                    }
                    else
                    {
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3252 = _3039;
                        float _3253 = _3040;
                        float _3254 = _3041;
                        float _3255 = _3042;
                        float _3256 = _3043;
                        float _3257 = _3044;
                        uint _3258 = _3054;
                        uint _3259;
                        vec4 _3284;
                        float _3285;
                        vec4 _3300;
                        vec3 _3312;
                        vec4 _3327;
                        vec4 _3342;
                        float _3388;
                        bool _3389;
                        for (;;)
                        {
                            uint _3269 = ((_3045 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3258));
                            _3259 = (_3258 + 4294967295u) & _3258;
                            uint _3271 = _3269 * 40u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3285 = _3284.w;
                            uint _3287 = (_3269 * 40u) + 4u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3269 * 40u) + 8u;
                            _3312 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x));
                            uint _3314 = (_3269 * 40u) + 16u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3329 = (_3269 * 40u) + 20u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3344 = (_3269 * 40u) + 24u;
                            vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3363 = (_3269 * 40u) + 28u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3388 = fma(_2642, _3376.z, fma(_2641, _3376.y, _3376.x * _2640)) + _3376.w;
                            _3389 = !((fma(_2642, _3357.z, fma(_2641, _3357.y, _3357.x * _2640)) + _3357.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3389)
                            {
                                float _3416 = _3284.x - _2640;
                                float _3417 = _3284.y - _2641;
                                float _3418 = _3284.z - _2642;
                                float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                                float _3422 = inversesqrt(_3419);
                                float _3423 = _3422 * _3416;
                                float _3424 = _3422 * _3417;
                                float _3425 = _3422 * _3418;
                                float _3429 = 1.0 - (_3419 / (_3285 * _3285));
                                float _4542 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3434 = sqrt(_3419) * _3300.w;
                                float _3436 = 1.39999997615814208984375 / (_3434 + 1.39999997615814208984375);
                                float _3437 = _3436 * _3436;
                                float _3440 = ((1.0 - _3437) * dot(vec3(_3423, _3424, _3425), vec3(_944, _947, _950))) + _3437;
                                float _3443 = _3434 * _3434;
                                float _3447 = (fma(_2642, _3327.z, fma(_2641, _3327.y, _3327.x * _2640)) + _3327.w) / _3388;
                                float _3448 = (fma(_2642, _3342.z, fma(_2641, _3342.y, _3342.x * _2640)) + _3342.w) / _3388;
                                float _3452 = 1.0 - dot(vec2(_3447, _3448), vec2(_3447, _3448));
                                float _4558 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3454 = _3453 * (((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3430) / ((_3443 * 0.699999988079071044921875) + 1.0));
                                float _3466 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                                float _3467 = 1.0 - _1004;
                                float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                                float _3475 = _3474 * _3474;
                                float _3476 = _3475 * _3475;
                                float _3477 = _3423 - _2926;
                                float _3478 = _3424 - _2927;
                                float _3479 = _3425 - _2928;
                                float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                                float _3487 = dot(vec3(_944, _947, _950), vec3((-0.0) - _2926, (-0.0) - _2927, (-0.0) - _2928));
                                float _4569 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3491 = dot(vec3(_944, _947, _950), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                                float _4580 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                                float _3499 = _3436 * _3475;
                                float _3500 = _3499 * _3499;
                                float _3506 = ((1.0 - _3500) * dot(vec3(_944, _947, _950), vec3(_3423, _3424, _3425))) + _3500;
                                float _4591 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3508 = 1.0 - _3475;
                                float _3518 = (0.5 / (((_3507 * ((_3490 * _3508) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3507 * _3508) + _3475) * _3490))) * _3507;
                                float _4602 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3528 = (_3453 * _3430) * (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) / ((_3498 * _3498) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3528 * _3312.x;
                                frontier_phi_73_pred_1 = _3528 * _3312.y;
                                frontier_phi_73_pred_2 = _3454 * _3300.z;
                                frontier_phi_73_pred_3 = _3454 * _3300.y;
                                frontier_phi_73_pred_4 = _3454 * _3300.x;
                                frontier_phi_73_pred_5 = _3528 * _3312.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3532 = frontier_phi_73_pred;
                            _3533 = frontier_phi_73_pred_1;
                            _3537 = frontier_phi_73_pred_2;
                            _3536 = frontier_phi_73_pred_3;
                            _3535 = frontier_phi_73_pred_4;
                            _3534 = frontier_phi_73_pred_5;
                            _3242 = _3535 + _3255;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            _3239 = _3532 + _3252;
                            _3240 = _3533 + _3253;
                            _3241 = _3534 + _3254;
                            if (_3259 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3259;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3242;
                        frontier_phi_67_pred_1 = _3243;
                        frontier_phi_67_pred_2 = _3244;
                        frontier_phi_67_pred_3 = _3241;
                        frontier_phi_67_pred_4 = _3240;
                        frontier_phi_67_pred_5 = _3239;
                    }
                    _2907 = frontier_phi_67_pred;
                    _2909 = frontier_phi_67_pred_1;
                    _2911 = frontier_phi_67_pred_2;
                    _2905 = frontier_phi_67_pred_3;
                    _2903 = frontier_phi_67_pred_4;
                    _2901 = frontier_phi_67_pred_5;
                    uint _3046 = _3045 + 1u;
                    if (_3046 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3039 = _2901;
                        _3040 = _2903;
                        _3041 = _2905;
                        _3042 = _2907;
                        _3043 = _2909;
                        _3044 = _2911;
                        _3045 = _3046;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2909;
                frontier_phi_55_56_ladder_1 = _2911;
                frontier_phi_55_56_ladder_2 = _2907;
                frontier_phi_55_56_ladder_3 = _2905;
                frontier_phi_55_56_ladder_4 = _2903;
                frontier_phi_55_56_ladder_5 = _2901;
            }
            else
            {
                frontier_phi_55_56_ladder = _2795;
                frontier_phi_55_56_ladder_1 = _2797;
                frontier_phi_55_56_ladder_2 = _2793;
                frontier_phi_55_56_ladder_3 = _2791;
                frontier_phi_55_56_ladder_4 = _2789;
                frontier_phi_55_56_ladder_5 = _2787;
            }
            _2900 = frontier_phi_55_56_ladder_5;
            _2902 = frontier_phi_55_56_ladder_4;
            _2904 = frontier_phi_55_56_ladder_3;
            _2906 = frontier_phi_55_56_ladder_2;
            _2908 = frontier_phi_55_56_ladder;
            _2910 = frontier_phi_55_56_ladder_1;
        }
        float _2915 = isnan(1.0) ? _988 : (isnan(_988) ? 1.0 : min(_988, 1.0));
        _2699 = (_2915 * _2906) + _2154;
        _2701 = (_2915 * _2908) + _2156;
        _2703 = (_2915 * _2910) + _2158;
        _2705 = ((_2900 * 0.039999999105930328369140625) * _2915) + _2484;
        _2707 = ((_2902 * 0.039999999105930328369140625) * _2915) + _2486;
        _2709 = ((_2904 * 0.039999999105930328369140625) * _2915) + _2488;
    }
    else
    {
        _2699 = _2154;
        _2701 = _2156;
        _2703 = _2158;
        _2705 = _2484;
        _2707 = _2486;
        _2709 = _2488;
    }
    float _4618 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4629 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4640 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    uint _2729 = _277 + 6u;
    float _2737 = _925 / cbSceneParam._m0[86u].x;
    float _2738 = _926 / cbSceneParam._m0[86u].y;
    vec4 _2752 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, (log2((isnan(cbSceneParam._m0[77u].w) ? _860 : (isnan(_860) ? cbSceneParam._m0[77u].w : min(_860, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2754 = _2752.x;
    float _2755 = _2752.y;
    float _2756 = _2752.z;
    float _2757 = _2752.w;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    if (_860 > cbSceneParam._m0[78u].w)
    {
        float _2812 = isnan(_860) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _860 : min(cbSceneParam._m0[80u].w, _860));
        float _2813 = _2812 / _860;
        float _2824 = _2813 * _910;
        float _2825 = _911 * _2813;
        float _2826 = (-0.0) - _2825;
        float _2828 = _2813 * _912;
        float _2830 = (cbSceneParam._m0[77u].w * _2826) / _2812;
        float _2831 = _2830 + cbSceneParam._m0[79u].w;
        float _2832 = cbSceneParam._m0[79u].w - _2825;
        float _2838 = sqrt(((_2824 * _2824) + (_2825 * _2825)) + (_2828 * _2828));
        float _2841 = (1.0 - (cbSceneParam._m0[77u].w / _2812)) * _2838;
        float _2846 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2848 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3001;
        if (abs((_2826 - _2830) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3001 = ((((_2831 > 0.0) ? exp2(_2846 * _2831) : (2.0 - exp2(_2848 * _2831))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2841;
        }
        else
        {
            float _2961 = 1.0 / cbSceneParam._m0[80u].x;
            float _2962 = isnan(_2832) ? _2831 : (isnan(_2831) ? _2832 : max(_2831, _2832));
            float _2963 = isnan(_2832) ? _2831 : (isnan(_2831) ? _2832 : min(_2831, _2832));
            float _2972 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : min(_2962, 0.0));
            float _2973 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : min(_2963, 0.0));
            _3001 = ((abs(_2838 / _2826) * cbSceneParam._m0[80u].y) * ((((_2972 - _2973) * 2.0) - ((exp2(_2846 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0)))) - exp2(_2846 * (isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))))) * _2961)) - ((exp2(_2848 * _2972) - exp2(_2848 * _2973)) * _2961))) + (_2841 * cbSceneParam._m0[80u].z);
        }
        vec4 _3003 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, 1.0), 0.0);
        float _3012 = exp2((_3001 * (-1.44269502162933349609375)) * (1.0 - _3003.w));
        float _3013 = log2(_3012);
        float _3029 = log2(_2757);
        _2850 = (exp2(_3029 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3013 * cbSceneParam._m0[78u].x)) * _3003.x) / cbSceneParam._m0[78u].x)) + _2754;
        _2852 = (exp2(_3029 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3013 * cbSceneParam._m0[78u].y)) * _3003.y) / cbSceneParam._m0[78u].y)) + _2755;
        _2854 = (exp2(_3029 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3013 * cbSceneParam._m0[78u].z)) * _3003.z) / cbSceneParam._m0[78u].z)) + _2756;
        _2856 = _3012 * _2757;
    }
    else
    {
        _2850 = _2754;
        _2852 = _2755;
        _2854 = _2756;
        _2856 = _2757;
    }
    float _2868 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2869 = _2868 == 3.0;
    float _2870 = log2(_2856);
    float _2877 = exp2(_2870 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2699 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _988))) + ((_2705 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _2878 = exp2(_2870 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2701 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _988))) + ((_2707 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _2879 = exp2(_2870 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2703 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _988))) + ((_2709 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _2888 = (_2868 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2888 * (_2869 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2850)));
    SV_Target.y = _2888 * (_2869 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2852)));
    SV_Target.z = _2888 * (_2869 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2854)));
    SV_Target.w = cbInstanceData._m0[_2729].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2729].w;
}


