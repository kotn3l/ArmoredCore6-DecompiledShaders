#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1452;
float _3833;
float _3834;
float _3835;
float _3836;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3845 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3856 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3867 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _370 = _365.x * cbMtdParam._m0[11u].x;
    float _371 = _365.y * cbMtdParam._m0[11u].y;
    float _372 = _365.z * cbMtdParam._m0[11u].z;
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _442 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _444 = _442.x;
    float _456 = dot(vec4(_444, _442.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _473 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_444 - _456) * cbMtdParam._m0[24u].z) + _456) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3878 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _484 = (_339.x * cbMtdParam._m0[9u].x) * ((_474 * ((_391.x * cbMtdParam._m0[12u].x) - _370)) + _370);
    float _485 = (_339.y * cbMtdParam._m0[9u].y) * ((_474 * ((_391.y * cbMtdParam._m0[12u].y) - _371)) + _371);
    float _486 = (_339.z * cbMtdParam._m0[9u].z) * ((_474 * ((_391.z * cbMtdParam._m0[12u].z) - _372)) + _372);
    float _490 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _484;
    float _493 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _485;
    float _496 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _486;
    float _504 = (((_484 - _490) * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) + _490) * 4.55000019073486328125;
    float _506 = (((_485 - _493) * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) + _493) * 4.55000019073486328125;
    float _508 = (((_486 - _496) * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) + _496) * 4.55000019073486328125;
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _593 = _591.x;
    float _594 = _591.y;
    float _595 = _591.z;
    float _604 = ((_574.z - _595) * _474) + _595;
    float _607 = ((((_574.x - _593) * _474) + _593) * 2.0) + (-1.0);
    float _608 = ((((_574.y - _594) * _474) + _594) * 2.0) + (-1.0);
    float _609 = dot(vec2(_607, _608), vec2(_607, _608));
    float _3889 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _614 = sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _646 = (_607 + ((((_547.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_634.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _647 = (_608 + ((((_547.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_634.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _650 = fma(_614, _252, fma(_647, _259, _646 * _245));
    float _653 = fma(_614, _253, fma(_647, _260, _646 * _246));
    float _656 = fma(_614, _254, fma(_647, _261, _646 * _247));
    float _660 = inversesqrt(dot(vec3(_650, _653, _656), vec3(_650, _653, _656)));
    vec4 _687 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _689 = _687.x;
    float _690 = 1.0 - _689;
    float _696 = (cbMtdParam._m0[19u].x + dot(vec4(_660 * _650, _660 * _653, _660 * _656, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_689 - _690) * cbMtdParam._m0[24u].w) + _690) * cbMtdParam._m0[21u].z);
    float _3900 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _699 = (-0.0) - cbMtdParam._m0[24u].x;
    float _701 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _702 = isnan(1.0) ? _701 : (isnan(_701) ? 1.0 : min(_701, 1.0));
    float _709 = _697 - ((_697 * TEXCOORD_8.x) * _702);
    float _710 = _697 - ((_697 * TEXCOORD_8.y) * _702);
    float _711 = _697 - ((_697 * TEXCOORD_8.z) * _702);
    float _718 = (_709 * ((_527.x * cbMtdParam._m0[18u].x) - _504)) + _504;
    float _719 = (_710 * ((_527.y * cbMtdParam._m0[18u].y) - _506)) + _506;
    float _720 = (_711 * ((_527.z * cbMtdParam._m0[18u].z) - _508)) + _508;
    vec4 _732 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _734 = _732.x;
    float _735 = 1.0 - _734;
    float _761 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_734 - _735) * cbMtdParam._m0[24u].y) + _735) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3921 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _762 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _770 = ((((cbMtdParam._m0[10u].x - _718) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _762) + _718;
    float _771 = ((((cbMtdParam._m0[10u].y - _719) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _762) + _719;
    float _772 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _720)) * _762) + _720;
    float _777 = (((_547.z - _604) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _604;
    float _781 = ((_634.z - _777) * cbMtdParam._m0[19u].w) + _777;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _802 = (_795.x * 2.0) + (-1.0);
    float _803 = (_795.y * 2.0) + (-1.0);
    float _804 = dot(vec2(_802, _803), vec2(_802, _803));
    float _3932 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _812 = ((_795.z - _781) * _709) + _781;
    float _815 = ((cbMtdParam._m0[23u].y - _812) * _762) + _812;
    vec4 _834 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _840 = (_834.x * 2.0) + (-1.0);
    float _841 = (_834.y * 2.0) + (-1.0);
    float _842 = dot(vec2(_840, _841), vec2(_840, _841));
    float _3943 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _857 = ((sqrt(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) - _614) * _711) + _614;
    float _860 = (((_802 - _646) * _709) + _646) + (cbMtdParam._m0[21u].x * _646);
    float _861 = (((_803 - _647) * _710) + _647) + (cbMtdParam._m0[21u].x * _647);
    float _872 = (((_840 - _860) + (_860 * cbMtdParam._m0[22u].z)) * _762) + _860;
    float _873 = (((_841 - _861) + (_861 * cbMtdParam._m0[22u].z)) * _762) + _861;
    float _874 = (_762 * (sqrt(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) - _857)) + _857;
    float _878 = cbMtdParam._m0[22u].x + _634.w;
    float _881 = fma(_874, _252, fma(_873, _259, _872 * _245));
    float _884 = fma(_874, _253, fma(_873, _260, _872 * _246));
    float _887 = fma(_874, _254, fma(_873, _261, _872 * _247));
    float _891 = inversesqrt(dot(vec3(_881, _884, _887), vec3(_881, _884, _887)));
    float _892 = _891 * _881;
    float _893 = _891 * _884;
    float _894 = _891 * _887;
    float _3954 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _895 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _3976 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _3987 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _3998 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _913 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _963 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _953);
    float _964 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _953);
    float _965 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _953);
    float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
    float _970 = _963 * _969;
    float _971 = _964 * _969;
    float _972 = _965 * _969;
    vec4 _977 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _979 = _977.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1133 = sqrt(((_963 * _963) + (_964 * _964)) + (_965 * _965));
        float _1139 = (cbMatDynParam._m0[5u].x * _1133) + cbMatDynParam._m0[5u].y;
        float _4009 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1144 = (cbMatDynParam._m0[5u].z * _1133) + cbMatDynParam._m0[5u].w;
        float _4020 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) - _1140)) + _1140) < ((_979 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _990 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _991 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1009 = fma(_894, cbSceneParam._m0[5u].z, fma(_893, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _892));
    float _1012 = fma(_894, cbSceneParam._m0[6u].z, fma(_893, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _892));
    float _1015 = fma(_894, cbSceneParam._m0[7u].z, fma(_893, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _892));
    uint _1028 = _283 + 9u;
    uint _1029 = _1028 + uint(cbMatDynParam._m0[0u].w);
    float _1035 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * cbInstanceData._m0[_1029].x;
    float _1036 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * cbInstanceData._m0[_1029].y;
    float _1037 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_1029].z;
    float _4031 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1038 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1039 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1040 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    vec4 _1049 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _990, cbSceneParam._m0[86u].y * _991));
    float _1053 = ((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * TEXCOORD_5.w) * _1049.x;
    float _1054 = dot(vec3(_892, _893, _894), vec3(_970, _971, _972));
    float _1057 = _1054 * 2.0;
    float _1061 = (_1057 * _892) - _970;
    float _1062 = (_1057 * _893) - _971;
    float _1063 = (_1057 * _894) - _972;
    float _1067 = abs(dot(vec3(_970, _971, _972), vec3(_892, _893, _894)));
    float _4064 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1069 = sqrt(_895);
    float _1082 = exp2((_1069 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1069 * 3.0));
    float _1114 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1451;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1176 = fma(_1122, cbModelParam._m0[26u].z, fma(_1118, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114));
        float _1180 = fma(_1122, cbModelParam._m0[27u].z, fma(_1118, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114));
        float _1184 = fma(_1122, cbModelParam._m0[28u].z, fma(_1118, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114));
        float _1209 = _1114 + _892;
        float _1210 = _1118 + _893;
        float _1211 = _1122 + _894;
        float _1221 = fma(_1211, cbModelParam._m0[26u].z, fma(_1210, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1209)) - _1176;
        float _1222 = fma(_1211, cbModelParam._m0[27u].z, fma(_1210, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1209)) - _1180;
        float _1223 = fma(_1211, cbModelParam._m0[28u].z, fma(_1210, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1209)) - _1184;
        float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
        float _1240 = ((_1227 * _1221) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1176 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1227 * _1222) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1180 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1227 * _1223) / cbModelParam._m0[34u].z) + ((((((_1184 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        float _1279 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1245.x + (-0.5));
        float _1281 = _1279 * (_1245.y + (-0.5));
        float _1282 = _1279 * (_1245.z + (-0.5));
        float _1289 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1252.x + (-0.5));
        float _1291 = _1289 * (_1252.y + (-0.5));
        float _1292 = _1289 * (_1252.z + (-0.5));
        float _1299 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1259.x + (-0.5));
        float _1301 = _1299 * (_1259.y + (-0.5));
        float _1302 = _1299 * (_1259.z + (-0.5));
        float _1309 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1266.x + (-0.5));
        float _1311 = _1309 * (_1266.y + (-0.5));
        float _1312 = _1309 * (_1266.z + (-0.5));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = _1280 * 0.5;
        float _1317 = _1290 * 0.5;
        float _1318 = _1300 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1333 = (dot(vec3(_892, _893, _894), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1343 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4112 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1345 + 1.0))) + _1350) * _1313;
        float _1360 = _1281 * 0.5;
        float _1361 = _1291 * 0.5;
        float _1362 = _1301 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_892, _893, _894), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4145 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1387 + 1.0))) + _1392) * _1314;
        float _1402 = _1282 * 0.5;
        float _1403 = _1292 * 0.5;
        float _1404 = _1302 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_892, _893, _894), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4178 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1429 + 1.0))) + _1434) * _1315;
        _1451 = _1282;
        _1453 = _1281;
        _1454 = _1280;
        _1455 = _1292;
        _1456 = _1291;
        _1457 = _1290;
        _1458 = _1302;
        _1459 = _1301;
        _1460 = _1300;
        _1461 = _1315;
        _1462 = _1314;
        _1463 = _1313;
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
    }
    else
    {
        _1451 = _1452;
        _1453 = _1452;
        _1454 = _1452;
        _1455 = _1452;
        _1456 = _1452;
        _1457 = _1452;
        _1458 = _1452;
        _1459 = _1452;
        _1460 = _1452;
        _1461 = _1452;
        _1462 = _1452;
        _1463 = _1452;
        _1464 = 0.0;
        _1465 = 0.0;
        _1466 = 0.0;
    }
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1494 = fma(_1122, cbModelParam._m0[30u].z, fma(_1118, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114));
        float _1498 = fma(_1122, cbModelParam._m0[31u].z, fma(_1118, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114));
        float _1502 = fma(_1122, cbModelParam._m0[32u].z, fma(_1118, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114));
        float _1525 = _1114 + _892;
        float _1526 = _1118 + _893;
        float _1527 = _1122 + _894;
        float _1537 = fma(_1527, cbModelParam._m0[30u].z, fma(_1526, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1525)) - _1494;
        float _1538 = fma(_1527, cbModelParam._m0[31u].z, fma(_1526, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1525)) - _1498;
        float _1539 = fma(_1527, cbModelParam._m0[32u].z, fma(_1526, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1525)) - _1502;
        float _1543 = inversesqrt(dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539)));
        float _1556 = ((_1543 * _1537) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1494 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1543 * _1538) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1498 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1558 = ((_1543 * _1539) / cbModelParam._m0[35u].z) + ((((((_1502 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        float _1593 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1560.x + (-0.5));
        float _1595 = _1593 * (_1560.y + (-0.5));
        float _1596 = _1593 * (_1560.z + (-0.5));
        float _1603 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1567.x + (-0.5));
        float _1605 = _1603 * (_1567.y + (-0.5));
        float _1606 = _1603 * (_1567.z + (-0.5));
        float _1613 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1574.x + (-0.5));
        float _1615 = _1613 * (_1574.y + (-0.5));
        float _1616 = _1613 * (_1574.z + (-0.5));
        float _1623 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1581.x + (-0.5));
        float _1625 = _1623 * (_1581.y + (-0.5));
        float _1626 = _1623 * (_1581.z + (-0.5));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = _1594 * 0.5;
        float _1631 = _1604 * 0.5;
        float _1632 = _1614 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_892, _893, _894), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4241 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1657 + 1.0))) + _1662) * _1627;
        float _1672 = _1595 * 0.5;
        float _1673 = _1605 * 0.5;
        float _1674 = _1615 * 0.5;
        float _1675 = dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674));
        float _1680 = (_1675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1675);
        float _1688 = (dot(vec3(_892, _893, _894), vec3(_1680 * _1672, _1680 * _1673, _1680 * _1674)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = sqrt(((_1673 * _1673) + (_1672 * _1672)) + (_1674 * _1674)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1699 = _1698 * 2.0;
        float _1703 = (1.0 - _1698) / (_1698 + 1.0);
        float _4274 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1713 = ((((1.0 - _1704) * (_1699 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1699 + 1.0))) + _1704) * _1628;
        float _1714 = _1596 * 0.5;
        float _1715 = _1606 * 0.5;
        float _1716 = _1616 * 0.5;
        float _1717 = dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716));
        float _1722 = (_1717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1717);
        float _1730 = (dot(vec3(_892, _893, _894), vec3(_1722 * _1714, _1722 * _1715, _1722 * _1716)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1739 = sqrt(((_1715 * _1715) + (_1714 * _1714)) + (_1716 * _1716)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1741 = _1740 * 2.0;
        float _1745 = (1.0 - _1740) / (_1740 + 1.0);
        float _4307 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1755 = ((((1.0 - _1746) * (_1741 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1741 + 1.0))) + _1746) * _1629;
        _1763 = _1596;
        _1764 = _1595;
        _1765 = _1594;
        _1766 = _1606;
        _1767 = _1605;
        _1768 = _1604;
        _1769 = _1616;
        _1770 = _1615;
        _1771 = _1614;
        _1772 = _1629;
        _1773 = _1628;
        _1774 = _1627;
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)));
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)));
    }
    else
    {
        _1763 = _1452;
        _1764 = _1452;
        _1765 = _1452;
        _1766 = _1452;
        _1767 = _1452;
        _1768 = _1452;
        _1769 = _1452;
        _1770 = _1452;
        _1771 = _1452;
        _1772 = _1452;
        _1773 = _1452;
        _1774 = _1452;
        _1775 = 0.0;
        _1776 = 0.0;
        _1777 = 0.0;
    }
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1464)) + _1464;
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1465)) + _1465;
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1466)) + _1466;
    float _1810 = fma(_1789, cbSceneParam._m0[89u].z, fma(_1788, cbSceneParam._m0[89u].y, _1787 * cbSceneParam._m0[89u].x));
    float _1813 = fma(_1789, cbSceneParam._m0[90u].z, fma(_1788, cbSceneParam._m0[90u].y, _1787 * cbSceneParam._m0[90u].x));
    float _1816 = fma(_1789, cbSceneParam._m0[91u].z, fma(_1788, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1787));
    float _1831 = _1061 * 0.5;
    float _1832 = _1062 * 0.5;
    float _1833 = _1063 * 0.5;
    float _1834 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1837 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1840 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1874;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1847 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1451, _1455, _1458, _1461));
        float _1851 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1453, _1456, _1459, _1462));
        float _1855 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1454, _1457, _1460, _1463));
        float _1862 = dot(vec4(cbModelParam._m0[39u]), vec4(_1831, _1832, _1833, 1.0));
        _1874 = dot(vec3(isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1862) ? 0.0 : (isnan(0.0) ? _1862 : max(0.0, _1862))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1874 = 1.0;
    }
    float _1885;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1876 = dot(vec4(cbModelParam._m0[40u]), vec4(_1831, _1832, _1833, 1.0));
        _1885 = dot(vec3(isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1876) ? 0.0 : (isnan(0.0) ? _1876 : max(0.0, _1876))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1885 = 1.0;
    }
    float _1889 = (_1885 * cbModelParam._m0[1u].x) + (_1874 * (1.0 - cbModelParam._m0[1u].x));
    float _1899 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _895);
    float _1900 = isnan(_1899) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1899 : min(cbModelParam._m0[25u].z, _1899));
    float _1980;
    float _1982;
    float _1984;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1947 = fma(_1122, cbModelParam._m0[13u].z, fma(_1118, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1114)) + cbModelParam._m0[13u].w;
        float _1951 = fma(_1122, cbModelParam._m0[14u].z, fma(_1118, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1114)) + cbModelParam._m0[14u].w;
        float _1955 = fma(_1122, cbModelParam._m0[15u].z, fma(_1118, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1114)) + cbModelParam._m0[15u].w;
        float _1958 = fma(_1063, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061));
        float _1961 = fma(_1063, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061));
        float _1964 = fma(_1063, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061));
        float _1992;
        if (_1958 > 0.0)
        {
            _1992 = abs((1.0 - _1947) / _1958);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1947 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1992 = frontier_phi_17_15_ladder;
        }
        float _2213;
        if (_1961 > 0.0)
        {
            _2213 = abs((1.0 - _1951) / _1961);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1951 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2213 = frontier_phi_26_22_ladder;
        }
        float _2459;
        if (_1964 > 0.0)
        {
            _2459 = abs((1.0 - _1955) / _1964);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1955 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2459 = frontier_phi_38_33_ladder;
        }
        float _2461 = isnan(_2213) ? _1992 : (isnan(_1992) ? _2213 : min(_1992, _2213));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1958) + _1947;
        float _2467 = (_2462 * _1961) + _1951;
        float _2468 = (_2462 * _1964) + _1955;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2469;
        float _2473 = _2469 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 > _2473) || ((_2467 < _2471) || ((_2466 < _2471) || (_2466 > _2473))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2468, cbModelParam._m0[9u].z, fma(_2467, cbModelParam._m0[9u].y, _2466 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2468, cbModelParam._m0[10u].z, fma(_2467, cbModelParam._m0[10u].y, _2466 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2468, cbModelParam._m0[11u].z, fma(_2467, cbModelParam._m0[11u].y, _2466 * cbModelParam._m0[11u].x))), _1900);
            frontier_phi_16_38_ladder = _2592.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2592.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2592.x * cbModelParam._m0[1u].y;
        }
        _1980 = frontier_phi_16_38_ladder_2;
        _1982 = frontier_phi_16_38_ladder_1;
        _1984 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1061, _1062, _1063), _1900);
        _1980 = _1968.x * cbModelParam._m0[1u].y;
        _1982 = _1968.y * cbModelParam._m0[1u].y;
        _1984 = _1968.z * cbModelParam._m0[1u].y;
    }
    float _1988 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _895);
    float _1989 = isnan(_1988) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1988 : min(cbModelParam._m0[25u].w, _1988));
    float _2078;
    float _2080;
    float _2082;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2042 = fma(_1122, cbModelParam._m0[21u].z, fma(_1118, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1114)) + cbModelParam._m0[21u].w;
        float _2046 = fma(_1122, cbModelParam._m0[22u].z, fma(_1118, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1114)) + cbModelParam._m0[22u].w;
        float _2050 = fma(_1122, cbModelParam._m0[23u].z, fma(_1118, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1114)) + cbModelParam._m0[23u].w;
        float _2053 = fma(_1063, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061));
        float _2056 = fma(_1063, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061));
        float _2059 = fma(_1063, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061));
        float _2218;
        if (_2053 > 0.0)
        {
            _2218 = abs((1.0 - _2042) / _2053);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2042 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2218 = frontier_phi_28_24_ladder;
        }
        float _2486;
        if (_2056 > 0.0)
        {
            _2486 = abs((1.0 - _2046) / _2056);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2046 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2486 = frontier_phi_40_35_ladder;
        }
        float _2691;
        if (_2059 > 0.0)
        {
            _2691 = abs((1.0 - _2050) / _2059);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2050 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2691 = frontier_phi_49_46_ladder;
        }
        float _2693 = isnan(_2486) ? _2218 : (isnan(_2218) ? _2486 : min(_2218, _2486));
        float _2694 = isnan(_2691) ? _2693 : (isnan(_2693) ? _2691 : min(_2693, _2691));
        float _2698 = (_2694 * _2053) + _2042;
        float _2699 = (_2694 * _2056) + _2046;
        float _2700 = (_2694 * _2059) + _2050;
        float _2701 = _2694 * 9.9999997473787516355514526367188e-05;
        float _2702 = (-1.0) - _2701;
        float _2704 = _2701 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2700 > _2704) || ((_2700 < _2702) || ((_2699 > _2704) || ((_2699 < _2702) || ((_2698 < _2702) || (_2698 > _2704))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2700, cbModelParam._m0[17u].z, fma(_2699, cbModelParam._m0[17u].y, _2698 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2700, cbModelParam._m0[18u].z, fma(_2699, cbModelParam._m0[18u].y, _2698 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2700, cbModelParam._m0[19u].z, fma(_2699, cbModelParam._m0[19u].y, _2698 * cbModelParam._m0[19u].x))), _1989);
            frontier_phi_25_49_ladder = _2899.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2899.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2899.x * cbModelParam._m0[1u].z;
        }
        _2078 = frontier_phi_25_49_ladder_2;
        _2080 = frontier_phi_25_49_ladder_1;
        _2082 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2062 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1061, _1062, _1063), _1989);
        _2078 = _2062.x * cbModelParam._m0[1u].z;
        _2080 = _2062.y * cbModelParam._m0[1u].z;
        _2082 = _2062.z * cbModelParam._m0[1u].z;
    }
    float _2094 = ((((1.0 - _1082) * ((_1069 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1082 * _1069)) * _1053;
    float _2095 = _2094 * ((cbModelParam._m0[1u].w * (_2078 - _1980)) + _1980);
    float _2096 = _2094 * ((cbModelParam._m0[1u].w * (_2080 - _1982)) + _1982);
    float _2097 = _2094 * ((cbModelParam._m0[1u].w * (_2082 - _1984)) + _1984);
    float _2100 = fma(_2097, cbSceneParam._m0[89u].z, fma(_2096, cbSceneParam._m0[89u].y, _2095 * cbSceneParam._m0[89u].x));
    float _2103 = fma(_2097, cbSceneParam._m0[90u].z, fma(_2096, cbSceneParam._m0[90u].y, _2095 * cbSceneParam._m0[90u].x));
    float _2106 = fma(_2097, cbSceneParam._m0[91u].z, fma(_2096, cbSceneParam._m0[91u].y, _2095 * cbSceneParam._m0[91u].x));
    vec4 _2114 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_990, _991));
    float _2116 = _2114.w;
    float _2128 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2116);
    float _2129 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2116);
    float _2130 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2116);
    uvec4 _2134 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2136 = _2134.x * 14u;
    uint _2137 = _2136 + 13u;
    float _2144 = _1053 + (-1.0);
    float _2149 = (cbLight._m0[_2137].x * _2144) + 1.0;
    float _2150 = (cbLight._m0[_2137].y * _2144) + 1.0;
    float _2151 = (cbLight._m0[_2137].z * _2144) + 1.0;
    float _2152 = (cbLight._m0[_2137].w * _2144) + 1.0;
    uint _2153 = _2136 + 5u;
    float _2159 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
    uint _2163 = _2136 + 4u;
    float _2172 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
    uint _2176 = _2136 | 1u;
    float _2187 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_892, _893, _894));
    float _2190 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_892, _893, _894));
    float _4443 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _4454 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2195 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * 0.3183098733425140380859375;
    float _2197 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * 0.3183098733425140380859375;
    float _2204 = ((cbLight._m0[_2153].x * _2159) * _2197) + (((cbLight._m0[_2163].x * _2128) * _2172) * _2195);
    float _2205 = ((_2159 * cbLight._m0[_2153].y) * _2197) + (((cbLight._m0[_2163].y * _2129) * _2172) * _2195);
    float _2206 = ((_2159 * cbLight._m0[_2153].z) * _2197) + (((cbLight._m0[_2163].z * _2130) * _2172) * _2195);
    uvec4 _2210 = floatBitsToUint(cbLight._m0[_2136 + 12u]);
    bool _2212 = _2210.x == 0u;
    float _2223;
    float _2225;
    float _2227;
    if (_2212)
    {
        _2223 = _2204;
        _2225 = _2205;
        _2227 = _2206;
    }
    else
    {
        uint _2231 = _2136 + 6u;
        float _2247 = (dot(vec3(cbLight._m0[_2136 + 2u].xyz), vec3(_892, _893, _894)) * 0.5) + 0.5;
        float _2248 = _2247 * _2247;
        float _4465 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2249 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2250 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2223 = (((cbLight._m0[_2231].x * 0.3183098733425140380859375) * _2249) * _2250) + _2204;
        _2225 = (((cbLight._m0[_2231].y * 0.3183098733425140380859375) * _2249) * _2250) + _2205;
        _2227 = (((cbLight._m0[_2231].z * 0.3183098733425140380859375) * _2249) * _2250) + _2206;
    }
    bool _2230 = _2210.y == 0u;
    float _2268;
    float _2270;
    float _2272;
    if (_2230)
    {
        _2268 = _2223;
        _2270 = _2225;
        _2272 = _2227;
    }
    else
    {
        uint _2430 = _2136 + 7u;
        float _2446 = (dot(vec3(cbLight._m0[_2136 + 3u].xyz), vec3(_892, _893, _894)) * 0.5) + 0.5;
        float _2447 = _2446 * _2446;
        float _4481 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2448 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2449 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2268 = (((cbLight._m0[_2430].x * 0.3183098733425140380859375) * _2448) * _2449) + _2223;
        _2270 = (((cbLight._m0[_2430].y * 0.3183098733425140380859375) * _2448) * _2449) + _2225;
        _2272 = (((cbLight._m0[_2430].z * 0.3183098733425140380859375) * _2448) * _2449) + _2227;
    }
    uint _2275 = _2136 + 8u;
    float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _895) * 0.949999988079071044921875);
    float _2289 = _2288 * _2288;
    float _2290 = cbLight._m0[_2136].x + _970;
    float _2291 = cbLight._m0[_2136].y + _971;
    float _2292 = cbLight._m0[_2136].z + _972;
    float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
    float _2297 = _2296 * _2290;
    float _2298 = _2296 * _2291;
    float _2299 = _2296 * _2292;
    float _2300 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2136].xyz));
    float _4497 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _4508 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _2304 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2305 = dot(vec3(_892, _893, _894), vec3(_2297, _2298, _2299));
    float _4519 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2297, _2298, _2299));
    float _4530 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2289 * _2289;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2328 = (exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2329 = 1.0 - _2289;
    float _2340 = (0.5 / (((_2304 * ((_2303 * _2329) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2329) + _2289) * _2303))) * _2303;
    float _4541 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2342 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    uint _2356 = _2136 + 9u;
    float _2367 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _895) * 0.949999988079071044921875);
    float _2368 = _2367 * _2367;
    float _2369 = cbLight._m0[_2176].x + _970;
    float _2370 = cbLight._m0[_2176].y + _971;
    float _2371 = cbLight._m0[_2176].z + _972;
    float _2375 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
    float _2376 = _2375 * _2369;
    float _2377 = _2375 * _2370;
    float _2378 = _2375 * _2371;
    float _2379 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2176].xyz));
    float _4552 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2383 = dot(vec3(_892, _893, _894), vec3(_2376, _2377, _2378));
    float _4563 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2387 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2376, _2377, _2378));
    float _4574 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2391 = _2368 * _2368;
    float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
    float _2404 = (exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2405 = 1.0 - _2368;
    float _2415 = (0.5 / (((_2304 * ((_2382 * _2405) + _2368)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2405) + _2368) * _2382))) * _2382;
    float _4585 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2417 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
    float _2427 = (((_2404 * cbLight._m0[_2356].x) * _2417) * _2159) + ((((cbLight._m0[_2275].x * _2128) * _2328) * _2342) * _2172);
    float _2428 = (((_2404 * cbLight._m0[_2356].y) * _2417) * _2159) + ((((cbLight._m0[_2275].y * _2129) * _2328) * _2342) * _2172);
    float _2429 = (((_2404 * cbLight._m0[_2356].z) * _2417) * _2159) + ((((cbLight._m0[_2275].z * _2130) * _2328) * _2342) * _2172);
    float _2491;
    float _2493;
    float _2495;
    if (_2212)
    {
        _2491 = _2427;
        _2493 = _2428;
        _2495 = _2429;
    }
    else
    {
        uint _2497 = _2136 + 2u;
        uint _2501 = _2136 + 10u;
        float _2515 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2497].w)) * _895) * 0.949999988079071044921875);
        float _2516 = _2515 * _2515;
        float _2517 = cbLight._m0[_2497].x + _970;
        float _2518 = cbLight._m0[_2497].y + _971;
        float _2519 = cbLight._m0[_2497].z + _972;
        float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
        float _2524 = _2523 * _2517;
        float _2525 = _2523 * _2518;
        float _2526 = _2523 * _2519;
        float _2527 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2497].xyz));
        float _4596 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2531 = dot(vec3(_892, _893, _894), vec3(_2524, _2525, _2526));
        float _4607 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2535 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_2524, _2525, _2526));
        float _4618 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2539 = _2516 * _2516;
        float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
        float _2552 = (exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2553 = 1.0 - _2516;
        float _2563 = (0.5 / (((_2304 * ((_2530 * _2553) + _2516)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2553) + _2516) * _2530))) * _2530;
        float _4629 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2565 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
        float _2566 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2491 = (((_2552 * cbLight._m0[_2501].x) * _2565) * _2566) + _2427;
        _2493 = (((_2552 * cbLight._m0[_2501].y) * _2565) * _2566) + _2428;
        _2495 = (((_2552 * cbLight._m0[_2501].z) * _2565) * _2566) + _2429;
    }
    float _2601;
    float _2603;
    float _2605;
    if (_2230)
    {
        _2601 = _2491;
        _2603 = _2493;
        _2605 = _2495;
    }
    else
    {
        uint _2612 = _2136 + 3u;
        uint _2616 = _2136 + 11u;
        float _2630 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2612].w)) * _895) * 0.949999988079071044921875);
        float _2631 = _2630 * _2630;
        float _2632 = cbLight._m0[_2612].x + _970;
        float _2633 = cbLight._m0[_2612].y + _971;
        float _2634 = cbLight._m0[_2612].z + _972;
        float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
        float _2639 = _2638 * _2632;
        float _2640 = _2638 * _2633;
        float _2641 = _2638 * _2634;
        float _2642 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2612].xyz));
        float _4645 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2646 = dot(vec3(_892, _893, _894), vec3(_2639, _2640, _2641));
        float _4656 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2650 = dot(vec3(cbLight._m0[_2612].xyz), vec3(_2639, _2640, _2641));
        float _4667 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2654 = _2631 * _2631;
        float _2658 = ((_2649 * _2649) * (_2654 + (-1.0))) + 1.0;
        float _2667 = (exp2(log2(1.0 - (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2668 = 1.0 - _2631;
        float _2678 = (0.5 / (((_2304 * ((_2645 * _2668) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2668) + _2631) * _2645))) * _2645;
        float _4678 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2680 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2654 / ((_2658 * _2658) * 3.141590118408203125));
        float _2681 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2601 = (((_2667 * cbLight._m0[_2616].x) * _2680) * _2681) + _2491;
        _2603 = (((_2667 * cbLight._m0[_2616].y) * _2680) * _2681) + _2493;
        _2605 = (((_2667 * cbLight._m0[_2616].z) * _2680) * _2681) + _2495;
    }
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    if (_2134.y == 0u)
    {
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2756;
        float _2758 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2756;
        float _2759 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2756;
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.x;
        uint _2783 = uint((float(_2771.y) * floor(float(uint(cbSceneParam._m0[85u].y * _991) / _2772))) + floor(float(uint(cbSceneParam._m0[85u].x * _990) / _2772)));
        float _2793 = (log2(_2759 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2794 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        uint _2797 = uint(isnan(14.0) ? _2794 : (isnan(_2794) ? 14.0 : min(_2794, 14.0)));
        uvec4 _2802 = texelFetch(g_lightClusterGridBuffer, int(((_2797 << 2u) + (_2783 << 6u)) >> 2u));
        uint _2803 = _2802.x;
        uint _2804 = _2771.z;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        if (((((1u << ((_2804 >> 4u) & 15u)) + 4294967295u) & _2803) == 0u) || ((_2804 & 240u) == 0u))
        {
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
        }
        else
        {
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            uint _3062 = 0u;
            uint _3071;
            bool _3072;
            for (;;)
            {
                _3071 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                _3072 = _3071 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3072)
                {
                    frontier_phi_66_pred = _3056;
                    frontier_phi_66_pred_1 = _3061;
                    frontier_phi_66_pred_2 = _3060;
                    frontier_phi_66_pred_3 = _3059;
                    frontier_phi_66_pred_4 = _3058;
                    frontier_phi_66_pred_5 = _3057;
                }
                else
                {
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    uint _3207;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3071;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    for (;;)
                    {
                        uint _3211 = uint(findLSB(_3207)) + (_3062 << 5u);
                        uint _3208 = (_3207 + 4294967295u) & _3207;
                        uint _3213 = _3211 * 48u;
                        vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 3u)).x));
                        uint _3233 = (_3211 * 48u) + 4u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3233)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 3u)).x));
                        uint _3252 = (_3211 * 48u) + 8u;
                        vec3 _3263 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x));
                        float _3267 = _3227.x - _2757;
                        float _3268 = _3227.y - _2758;
                        float _3269 = _3227.z - _2759;
                        float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                        float _3273 = inversesqrt(_3270);
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3277 = dot(vec3(_1009, _1012, _1015), vec3(_3274, _3275, _3276));
                        float _3282 = 1.0 - (_3270 * _3227.w);
                        float _4704 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3284 = sqrt(_3270) * _3246.w;
                        float _3287 = 1.39999997615814208984375 / (_3284 + 1.39999997615814208984375);
                        float _3288 = _3287 * _3287;
                        float _3291 = ((1.0 - _3288) * _3277) + _3288;
                        float _3294 = _3284 * _3284;
                        float _3298 = ((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3283) / ((_3294 * 0.699999988079071044921875) + 1.0);
                        float _3302 = (-0.0) - _2757;
                        float _3303 = (-0.0) - _2758;
                        float _3304 = (-0.0) - _2759;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3309 = _3308 * _3302;
                        float _3310 = _3308 * _3303;
                        float _3311 = _3308 * _3304;
                        float _3319 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                        float _3320 = 1.0 - _1069;
                        float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                        float _3328 = _3327 * _3327;
                        float _3329 = _3328 * _3328;
                        float _3330 = _3309 + _3274;
                        float _3331 = _3310 + _3275;
                        float _3332 = _3311 + _3276;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3340 = dot(vec3(_1009, _1012, _1015), vec3(_3309, _3310, _3311));
                        float _4720 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3343 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3344 = dot(vec3(_1009, _1012, _1015), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                        float _4731 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3347 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                        float _3352 = _3287 * _3328;
                        float _3353 = _3352 * _3352;
                        float _3356 = ((1.0 - _3353) * _3277) + _3353;
                        float _4742 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3357 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3358 = 1.0 - _3328;
                        float _3368 = (0.5 / (((_3357 * ((_3343 * _3358) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3357 * _3358) + _3328) * _3343))) * _3357;
                        float _4753 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3379 = (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) / ((_3351 * _3351) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125))) * _3283;
                        _3131 = (_3298 * _3246.x) + _3204;
                        _3132 = (_3298 * _3246.y) + _3205;
                        _3133 = (_3298 * _3246.z) + _3206;
                        _3128 = (_3379 * _3263.x) + _3201;
                        _3129 = (_3379 * _3263.y) + _3202;
                        _3130 = (_3379 * _3263.z) + _3203;
                        if (_3208 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3208;
                        }
                    }
                    frontier_phi_66_pred = _3128;
                    frontier_phi_66_pred_1 = _3133;
                    frontier_phi_66_pred_2 = _3132;
                    frontier_phi_66_pred_3 = _3131;
                    frontier_phi_66_pred_4 = _3130;
                    frontier_phi_66_pred_5 = _3129;
                }
                _2905 = frontier_phi_66_pred;
                _2915 = frontier_phi_66_pred_1;
                _2913 = frontier_phi_66_pred_2;
                _2911 = frontier_phi_66_pred_3;
                _2909 = frontier_phi_66_pred_4;
                _2907 = frontier_phi_66_pred_5;
                uint _3063 = _3062 + 1u;
                if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3056 = _2905;
                    _3057 = _2907;
                    _3058 = _2909;
                    _3059 = _2911;
                    _3060 = _2913;
                    _3061 = _2915;
                    _3062 = _3063;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
        }
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.z;
        uint _2921 = (_2919 >> 8u) & 15u;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        if (((4294967295u << _2921) & _2803) == 0u)
        {
            _3024 = _2904;
            _3026 = _2906;
            _3028 = _2908;
            _3030 = _2910;
            _3032 = _2912;
            _3034 = _2914;
        }
        else
        {
            float _3049 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
            float _3050 = _3049 * _2757;
            float _3051 = _3049 * _2758;
            float _3052 = _3049 * _2759;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2921 < ((_2919 >> 12u) & 15u))
            {
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3184 = _2904;
                float _3185 = _2906;
                float _3186 = _2908;
                float _3187 = _2910;
                float _3188 = _2912;
                float _3189 = _2914;
                uint _3190 = _2921;
                uint _3199;
                bool _3200;
                for (;;)
                {
                    _3199 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                    _3200 = _3199 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3200)
                    {
                        frontier_phi_77_pred = _3189;
                        frontier_phi_77_pred_1 = _3188;
                        frontier_phi_77_pred_2 = _3187;
                        frontier_phi_77_pred_3 = _3186;
                        frontier_phi_77_pred_4 = _3185;
                        frontier_phi_77_pred_5 = _3184;
                    }
                    else
                    {
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3406 = _3184;
                        float _3407 = _3185;
                        float _3408 = _3186;
                        float _3409 = _3187;
                        float _3410 = _3188;
                        float _3411 = _3189;
                        uint _3412 = _3199;
                        uint _3413;
                        vec4 _3438;
                        float _3439;
                        vec4 _3454;
                        vec3 _3466;
                        vec4 _3481;
                        vec4 _3496;
                        float _3542;
                        bool _3543;
                        for (;;)
                        {
                            uint _3423 = ((_3190 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3412));
                            _3413 = (_3412 + 4294967295u) & _3412;
                            uint _3425 = _3423 * 40u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            _3439 = _3438.w;
                            uint _3441 = (_3423 * 40u) + 4u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3423 * 40u) + 8u;
                            _3466 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x));
                            uint _3468 = (_3423 * 40u) + 16u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3423 * 40u) + 20u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3423 * 40u) + 24u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3517 = (_3423 * 40u) + 28u;
                            vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            _3542 = fma(_2759, _3530.z, fma(_2758, _3530.y, _3530.x * _2757)) + _3530.w;
                            _3543 = !((fma(_2759, _3511.z, fma(_2758, _3511.y, _3511.x * _2757)) + _3511.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3543)
                            {
                                float _3570 = _3438.x - _2757;
                                float _3571 = _3438.y - _2758;
                                float _3572 = _3438.z - _2759;
                                float _3573 = dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572));
                                float _3576 = inversesqrt(_3573);
                                float _3577 = _3576 * _3570;
                                float _3578 = _3576 * _3571;
                                float _3579 = _3576 * _3572;
                                float _3583 = 1.0 - (_3573 / (_3439 * _3439));
                                float _4764 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3588 = sqrt(_3573) * _3454.w;
                                float _3590 = 1.39999997615814208984375 / (_3588 + 1.39999997615814208984375);
                                float _3591 = _3590 * _3590;
                                float _3594 = ((1.0 - _3591) * dot(vec3(_3577, _3578, _3579), vec3(_1009, _1012, _1015))) + _3591;
                                float _3597 = _3588 * _3588;
                                float _3601 = (fma(_2759, _3481.z, fma(_2758, _3481.y, _3481.x * _2757)) + _3481.w) / _3542;
                                float _3602 = (fma(_2759, _3496.z, fma(_2758, _3496.y, _3496.x * _2757)) + _3496.w) / _3542;
                                float _3606 = 1.0 - dot(vec2(_3601, _3602), vec2(_3601, _3602));
                                float _4780 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3608 = _3607 * (((isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0))) * _3584) / ((_3597 * 0.699999988079071044921875) + 1.0));
                                float _3620 = exp2(log2(1.0 / ((_3597 * 3.5) + 5.0)) * 0.25);
                                float _3621 = 1.0 - _1069;
                                float _3628 = sqrt(1.0 - ((1.0 - (_3621 * _3621)) * (1.0 - (_3620 * _3620))));
                                float _3629 = _3628 * _3628;
                                float _3630 = _3629 * _3629;
                                float _3631 = _3577 - _3050;
                                float _3632 = _3578 - _3051;
                                float _3633 = _3579 - _3052;
                                float _3637 = inversesqrt(dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633)));
                                float _3641 = dot(vec3(_1009, _1012, _1015), vec3((-0.0) - _3050, (-0.0) - _3051, (-0.0) - _3052));
                                float _4791 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3644 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3645 = dot(vec3(_1009, _1012, _1015), vec3(_3637 * _3631, _3637 * _3632, _3637 * _3633));
                                float _4802 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3648 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3652 = ((_3648 * _3648) * (_3630 + (-1.0))) + 1.0;
                                float _3653 = _3590 * _3629;
                                float _3654 = _3653 * _3653;
                                float _3660 = ((1.0 - _3654) * dot(vec3(_1009, _1012, _1015), vec3(_3577, _3578, _3579))) + _3654;
                                float _4813 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3662 = 1.0 - _3629;
                                float _3672 = (0.5 / (((_3661 * ((_3644 * _3662) + _3629)) + 9.9999999392252902907785028219223e-09) + (((_3661 * _3662) + _3629) * _3644))) * _3661;
                                float _4824 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3682 = (_3607 * _3584) * (((_3630 * 3.1415927410125732421875) * (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) / ((_3652 * _3652) * ((_3597 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3608 * _3454.y;
                                frontier_phi_83_pred_1 = _3608 * _3454.x;
                                frontier_phi_83_pred_2 = _3682 * _3466.z;
                                frontier_phi_83_pred_3 = _3682 * _3466.y;
                                frontier_phi_83_pred_4 = _3682 * _3466.x;
                                frontier_phi_83_pred_5 = _3608 * _3454.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3690 = frontier_phi_83_pred;
                            _3689 = frontier_phi_83_pred_1;
                            _3688 = frontier_phi_83_pred_2;
                            _3687 = frontier_phi_83_pred_3;
                            _3686 = frontier_phi_83_pred_4;
                            _3691 = frontier_phi_83_pred_5;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            if (_3413 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3413;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3398;
                        frontier_phi_77_pred_1 = _3397;
                        frontier_phi_77_pred_2 = _3396;
                        frontier_phi_77_pred_3 = _3395;
                        frontier_phi_77_pred_4 = _3394;
                        frontier_phi_77_pred_5 = _3393;
                    }
                    _3035 = frontier_phi_77_pred;
                    _3033 = frontier_phi_77_pred_1;
                    _3031 = frontier_phi_77_pred_2;
                    _3029 = frontier_phi_77_pred_3;
                    _3027 = frontier_phi_77_pred_4;
                    _3025 = frontier_phi_77_pred_5;
                    uint _3191 = _3190 + 1u;
                    if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3184 = _3025;
                        _3185 = _3027;
                        _3186 = _3029;
                        _3187 = _3031;
                        _3188 = _3033;
                        _3189 = _3035;
                        _3190 = _3191;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3029;
                frontier_phi_58_59_ladder_1 = _3035;
                frontier_phi_58_59_ladder_2 = _3033;
                frontier_phi_58_59_ladder_3 = _3031;
                frontier_phi_58_59_ladder_4 = _3027;
                frontier_phi_58_59_ladder_5 = _3025;
            }
            else
            {
                frontier_phi_58_59_ladder = _2908;
                frontier_phi_58_59_ladder_1 = _2914;
                frontier_phi_58_59_ladder_2 = _2912;
                frontier_phi_58_59_ladder_3 = _2910;
                frontier_phi_58_59_ladder_4 = _2906;
                frontier_phi_58_59_ladder_5 = _2904;
            }
            _3024 = frontier_phi_58_59_ladder_5;
            _3026 = frontier_phi_58_59_ladder_4;
            _3028 = frontier_phi_58_59_ladder;
            _3030 = frontier_phi_58_59_ladder_3;
            _3032 = frontier_phi_58_59_ladder_2;
            _3034 = frontier_phi_58_59_ladder_1;
        }
        float _3039 = isnan(1.0) ? _1053 : (isnan(_1053) ? 1.0 : min(_1053, 1.0));
        _2816 = (_3039 * _3030) + _2268;
        _2818 = (_3039 * _3032) + _2270;
        _2820 = (_3039 * _3034) + _2272;
        _2822 = ((_3024 * 0.039999999105930328369140625) * _3039) + _2601;
        _2824 = ((_3026 * 0.039999999105930328369140625) * _3039) + _2603;
        _2826 = ((_3028 * 0.039999999105930328369140625) * _3039) + _2605;
    }
    else
    {
        _2816 = _2268;
        _2818 = _2270;
        _2820 = _2272;
        _2822 = _2601;
        _2824 = _2603;
        _2826 = _2605;
    }
    float _4840 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _4851 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _4862 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _2843 = ((isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2816 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1053))) + ((_2822 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1889)) * cbPerFrame._m0[3u].x);
    float _2844 = ((isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2818 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1053))) + ((_2824 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1889)) * cbPerFrame._m0[3u].x);
    float _2845 = ((isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2820 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1053))) + ((_2826 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1889)) * cbPerFrame._m0[3u].x);
    uint _2846 = _283 + 6u;
    float _2854 = _990 / cbSceneParam._m0[86u].x;
    float _2855 = _991 / cbSceneParam._m0[86u].y;
    vec4 _2869 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2854, _2855, (log2((isnan(cbSceneParam._m0[77u].w) ? _913 : (isnan(_913) ? cbSceneParam._m0[77u].w : min(_913, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2871 = _2869.x;
    float _2872 = _2869.y;
    float _2873 = _2869.z;
    float _2874 = _2869.w;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    if (_913 > cbSceneParam._m0[78u].w)
    {
        float _2929 = isnan(_913) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _913 : min(cbSceneParam._m0[80u].w, _913));
        float _2930 = _2929 / _913;
        float _2941 = _2930 * _963;
        float _2942 = _964 * _2930;
        float _2943 = (-0.0) - _2942;
        float _2944 = _2930 * _965;
        float _2946 = (cbSceneParam._m0[77u].w * _2943) / _2929;
        float _2947 = _2946 + cbSceneParam._m0[79u].w;
        float _2948 = cbSceneParam._m0[79u].w - _2942;
        float _2954 = sqrt(((_2941 * _2941) + (_2942 * _2942)) + (_2944 * _2944));
        float _2957 = (1.0 - (cbSceneParam._m0[77u].w / _2929)) * _2954;
        float _2962 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2964 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3141;
        if (abs((_2943 - _2946) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3141 = ((((_2947 > 0.0) ? exp2(_2962 * _2947) : (2.0 - exp2(_2964 * _2947))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2957;
        }
        else
        {
            float _3085 = 1.0 / cbSceneParam._m0[80u].x;
            float _3086 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : max(_2947, _2948));
            float _3087 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : min(_2947, _2948));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            _3141 = ((abs(_2954 / _2943) * cbSceneParam._m0[80u].y) * ((((_3096 - _3097) * 2.0) - ((exp2(_2962 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0)))) - exp2(_2962 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))))) * _3085)) - ((exp2(_2964 * _3096) - exp2(_2964 * _3097)) * _3085))) + (_2957 * cbSceneParam._m0[80u].z);
        }
        vec4 _3143 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2854, _2855, 1.0), 0.0);
        float _3152 = exp2((_3141 * (-1.44269502162933349609375)) * (1.0 - _3143.w));
        float _3153 = log2(_3152);
        float _3169 = log2(_2874);
        _2966 = (exp2(_3169 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].x)) * _3143.x) / cbSceneParam._m0[78u].x)) + _2871;
        _2968 = (exp2(_3169 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].y)) * _3143.y) / cbSceneParam._m0[78u].y)) + _2872;
        _2970 = (exp2(_3169 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].z)) * _3143.z) / cbSceneParam._m0[78u].z)) + _2873;
        _2972 = _3152 * _2874;
    }
    else
    {
        _2966 = _2871;
        _2968 = _2872;
        _2970 = _2873;
        _2972 = _2874;
    }
    bool _3179;
    vec4 _2982;
    vec4 _3004;
    float _3006;
    float _3010;
    float _3011;
    float _3012;
    float _3013;
    bool _3023;
    for (;;)
    {
        _2982 = cbMatDynParam._m0[0u];
        float _2984 = roundEven(_2982.y);
        bool _2985 = _2984 == 3.0;
        float _2986 = log2(_2972);
        float _2993 = exp2(_2986 * cbSceneParam._m0[78u].x) * _2843;
        float _2994 = exp2(_2986 * cbSceneParam._m0[78u].y) * _2844;
        float _2995 = exp2(_2986 * cbSceneParam._m0[78u].z) * _2845;
        float _3002 = _979 + (-0.5);
        _3004 = cbMtdParam._m0[1u];
        _3006 = _3004.y * _3002;
        float _3009 = (_2984 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3010 = _3009 * (_2985 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2966)));
        _3011 = _3009 * (_2985 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2968)));
        _3012 = _3009 * (_2985 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2970)));
        _3013 = _3002 * 0.999000012874603271484375;
        _3023 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3023)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3013) < 0.5)
            {
                _3179 = true;
                break;
            }
        }
        uint _3120 = _1028 + uint(_2982.w);
        if ((cbInstanceData._m0[_3120].w < 1.0) && ((cbInstanceData._m0[_3120].w + _3013) < 0.5))
        {
            _3179 = true;
            break;
        }
        if ((_3006 + 1.0) < _3004.x)
        {
            _3179 = true;
            break;
        }
        _3179 = false;
        break;
    }
    float _3384;
    if (_3179)
    {
        discard_state = true;
        _3384 = 0.0;
    }
    else
    {
        _3384 = cbInstanceData._m0[_2846].w;
    }
    SV_Target.x = _3010;
    SV_Target.y = _3011;
    SV_Target.z = _3012;
    SV_Target.w = _3384;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2846].w;
    discard_exit();
}


