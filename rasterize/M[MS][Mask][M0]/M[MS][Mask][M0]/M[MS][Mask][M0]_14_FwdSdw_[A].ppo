#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1287;
float _3930;
float _3931;
float _3932;
float _3933;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3942 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3953 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3964 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[24u].z) + _445) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3975 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _473 = (_328.x * cbMtdParam._m0[9u].x) * ((_463 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359);
    float _474 = (_328.y * cbMtdParam._m0[9u].y) * ((_463 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360);
    float _475 = (_328.z * cbMtdParam._m0[9u].z) * ((_463 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361);
    float _479 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _473;
    float _482 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _474;
    float _485 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _475;
    float _493 = (((_473 - _479) * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) + _479) * 4.55000019073486328125;
    float _495 = (((_474 - _482) * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) + _482) * 4.55000019073486328125;
    float _497 = (((_475 - _485) * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) + _485) * 4.55000019073486328125;
    vec4 _515 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _559 = _557.x;
    float _560 = _557.y;
    float _561 = _557.z;
    float _570 = ((_540.z - _561) * _463) + _561;
    float _573 = ((((_540.x - _559) * _463) + _559) * 2.0) + (-1.0);
    float _574 = ((((_540.y - _560) * _463) + _560) * 2.0) + (-1.0);
    float _575 = dot(vec2(_573, _574), vec2(_573, _574));
    float _3986 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _580 = sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _621 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _623 = _621.x;
    float _624 = 1.0 - _623;
    float _637 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_623 - _624) * cbMtdParam._m0[24u].w) + _624) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3997 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _645 = (_638 * (cbMtdParam._m0[17u].x - _493)) + _493;
    float _646 = (_638 * (cbMtdParam._m0[17u].y - _495)) + _495;
    float _647 = (_638 * (cbMtdParam._m0[17u].z - _497)) + _497;
    float _652 = (((_515.z - _570) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _570;
    float _656 = ((_596.z - _652) * cbMtdParam._m0[19u].w) + _652;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _676 = (_669.x * 2.0) + (-1.0);
    float _677 = (_669.y * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _4008 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _686 = (_638 * (_669.z - _656)) + _656;
    float _695 = (_573 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_515.x * 2.0) + (-1.0)))) + (((_596.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _696 = (_574 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_515.y * 2.0) + (-1.0)))) + (((_596.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _708 = (((_676 - _695) + (cbMtdParam._m0[21u].x * _695)) * _638) + _695;
    float _709 = (((_677 - _696) + (cbMtdParam._m0[21u].x * _696)) * _638) + _696;
    float _710 = (_638 * (sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) - _580)) + _580;
    float _712 = cbMtdParam._m0[22u].x + _596.w;
    float _715 = fma(_710, _238 * NORMAL.x, fma(_709, _245 * TANGENT.x, (_231 * _223) * _708));
    float _718 = fma(_710, _238 * NORMAL.y, fma(_709, _245 * TANGENT.y, (_231 * _224) * _708));
    float _721 = fma(_710, _238 * NORMAL.z, fma(_709, _245 * TANGENT.z, (_231 * _225) * _708));
    float _725 = inversesqrt(dot(vec3(_715, _718, _721), vec3(_715, _718, _721)));
    float _726 = _725 * _715;
    float _727 = _725 * _718;
    float _728 = _725 * _721;
    float _4019 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _729 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4041 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4052 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4063 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _747 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _798 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _788);
    float _799 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _788);
    float _800 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _788);
    float _804 = inversesqrt(dot(vec3(_798, _799, _800), vec3(_798, _799, _800)));
    float _805 = _798 * _804;
    float _806 = _799 * _804;
    float _807 = _800 * _804;
    vec4 _812 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _814 = _812.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _968 = sqrt(((_798 * _798) + (_799 * _799)) + (_800 * _800));
        float _974 = (cbMatDynParam._m0[5u].x * _968) + cbMatDynParam._m0[5u].y;
        float _4074 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _979 = (cbMatDynParam._m0[5u].z * _968) + cbMatDynParam._m0[5u].w;
        float _4085 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) - _975)) + _975) < ((_814 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _825 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _826 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _844 = fma(_728, cbSceneParam._m0[5u].z, fma(_727, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _726));
    float _847 = fma(_728, cbSceneParam._m0[6u].z, fma(_727, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _726));
    float _850 = fma(_728, cbSceneParam._m0[7u].z, fma(_727, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _726));
    uint _863 = _272 + 9u;
    uint _864 = _863 + uint(cbMatDynParam._m0[0u].w);
    float _870 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_864].x;
    float _871 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_864].y;
    float _872 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_864].z;
    float _4096 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    vec4 _884 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _825, cbSceneParam._m0[86u].y * _826));
    float _888 = ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * TEXCOORD_5.w) * _884.x;
    float _889 = dot(vec3(_726, _727, _728), vec3(_805, _806, _807));
    float _892 = _889 * 2.0;
    float _896 = (_892 * _726) - _805;
    float _897 = (_892 * _727) - _806;
    float _898 = (_892 * _728) - _807;
    float _902 = abs(dot(vec3(_805, _806, _807), vec3(_726, _727, _728)));
    float _4129 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _904 = sqrt(_729);
    float _917 = exp2((_904 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_904 * 3.0));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1286;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1011 = fma(_957, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949));
        float _1015 = fma(_957, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949));
        float _1019 = fma(_957, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949));
        float _1044 = _949 + _726;
        float _1045 = _953 + _727;
        float _1046 = _957 + _728;
        float _1056 = fma(_1046, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1044)) - _1011;
        float _1057 = fma(_1046, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1044)) - _1015;
        float _1058 = fma(_1046, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1044)) - _1019;
        float _1062 = inversesqrt(dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058)));
        float _1075 = ((_1062 * _1056) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1011 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1062 * _1057) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1015 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1062 * _1058) / cbModelParam._m0[34u].z) + ((((((_1019 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        float _1114 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1080.x + (-0.5));
        float _1116 = _1114 * (_1080.y + (-0.5));
        float _1117 = _1114 * (_1080.z + (-0.5));
        float _1124 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1087.x + (-0.5));
        float _1126 = _1124 * (_1087.y + (-0.5));
        float _1127 = _1124 * (_1087.z + (-0.5));
        float _1134 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1094.x + (-0.5));
        float _1136 = _1134 * (_1094.y + (-0.5));
        float _1137 = _1134 * (_1094.z + (-0.5));
        float _1144 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1101.x + (-0.5));
        float _1146 = _1144 * (_1101.y + (-0.5));
        float _1147 = _1144 * (_1101.z + (-0.5));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = _1115 * 0.5;
        float _1152 = _1125 * 0.5;
        float _1153 = _1135 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1168 = (dot(vec3(_726, _727, _728), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1178 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _4177 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1180 + 1.0))) + _1185) * _1148;
        float _1195 = _1116 * 0.5;
        float _1196 = _1126 * 0.5;
        float _1197 = _1136 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_726, _727, _728), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _4210 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1222 + 1.0))) + _1227) * _1149;
        float _1237 = _1117 * 0.5;
        float _1238 = _1127 * 0.5;
        float _1239 = _1137 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_726, _727, _728), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4243 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1264 + 1.0))) + _1269) * _1150;
        _1286 = _1117;
        _1288 = _1116;
        _1289 = _1115;
        _1290 = _1127;
        _1291 = _1126;
        _1292 = _1125;
        _1293 = _1137;
        _1294 = _1136;
        _1295 = _1135;
        _1296 = _1150;
        _1297 = _1149;
        _1298 = _1148;
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
    }
    else
    {
        _1286 = _1287;
        _1288 = _1287;
        _1289 = _1287;
        _1290 = _1287;
        _1291 = _1287;
        _1292 = _1287;
        _1293 = _1287;
        _1294 = _1287;
        _1295 = _1287;
        _1296 = _1287;
        _1297 = _1287;
        _1298 = _1287;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1329 = fma(_957, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949));
        float _1333 = fma(_957, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949));
        float _1337 = fma(_957, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949));
        float _1360 = _949 + _726;
        float _1361 = _953 + _727;
        float _1362 = _957 + _728;
        float _1372 = fma(_1362, cbModelParam._m0[30u].z, fma(_1361, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1360)) - _1329;
        float _1373 = fma(_1362, cbModelParam._m0[31u].z, fma(_1361, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1360)) - _1333;
        float _1374 = fma(_1362, cbModelParam._m0[32u].z, fma(_1361, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1360)) - _1337;
        float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
        float _1391 = ((_1378 * _1372) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1329 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1378 * _1373) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1333 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1378 * _1374) / cbModelParam._m0[35u].z) + ((((((_1337 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        float _1428 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1395.x + (-0.5));
        float _1430 = _1428 * (_1395.y + (-0.5));
        float _1431 = _1428 * (_1395.z + (-0.5));
        float _1438 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1402.x + (-0.5));
        float _1440 = _1438 * (_1402.y + (-0.5));
        float _1441 = _1438 * (_1402.z + (-0.5));
        float _1448 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1409.x + (-0.5));
        float _1450 = _1448 * (_1409.y + (-0.5));
        float _1451 = _1448 * (_1409.z + (-0.5));
        float _1458 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1416.x + (-0.5));
        float _1460 = _1458 * (_1416.y + (-0.5));
        float _1461 = _1458 * (_1416.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_726, _727, _728), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4306 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1492 + 1.0))) + _1497) * _1462;
        float _1507 = _1430 * 0.5;
        float _1508 = _1440 * 0.5;
        float _1509 = _1450 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_726, _727, _728), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4339 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1534 + 1.0))) + _1539) * _1463;
        float _1549 = _1431 * 0.5;
        float _1550 = _1441 * 0.5;
        float _1551 = _1451 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_726, _727, _728), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4372 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1576 + 1.0))) + _1581) * _1464;
        _1598 = _1431;
        _1599 = _1430;
        _1600 = _1429;
        _1601 = _1441;
        _1602 = _1440;
        _1603 = _1439;
        _1604 = _1451;
        _1605 = _1450;
        _1606 = _1449;
        _1607 = _1464;
        _1608 = _1463;
        _1609 = _1462;
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1287;
        _1599 = _1287;
        _1600 = _1287;
        _1601 = _1287;
        _1602 = _1287;
        _1603 = _1287;
        _1604 = _1287;
        _1605 = _1287;
        _1606 = _1287;
        _1607 = _1287;
        _1608 = _1287;
        _1609 = _1287;
        _1610 = 0.0;
        _1611 = 0.0;
        _1612 = 0.0;
    }
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1299)) + _1299;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1300)) + _1300;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1301)) + _1301;
    float _1645 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1622));
    float _1666 = _896 * 0.5;
    float _1667 = _897 * 0.5;
    float _1668 = _898 * 0.5;
    float _1669 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1672 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1675 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1709;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1682 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1286, _1290, _1293, _1296));
        float _1686 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1690 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1289, _1292, _1295, _1298));
        float _1697 = dot(vec4(cbModelParam._m0[39u]), vec4(_1666, _1667, _1668, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1720;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1711 = dot(vec4(cbModelParam._m0[40u]), vec4(_1666, _1667, _1668, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1724 = (_1720 * cbModelParam._m0[1u].x) + (_1709 * (1.0 - cbModelParam._m0[1u].x));
    float _1734 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _729);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1734 : min(cbModelParam._m0[25u].z, _1734));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1783 = fma(_957, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949)) + cbModelParam._m0[13u].w;
        float _1787 = fma(_957, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949)) + cbModelParam._m0[14u].w;
        float _1791 = fma(_957, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949)) + cbModelParam._m0[15u].w;
        float _1794 = fma(_898, cbModelParam._m0[13u].z, fma(_897, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896));
        float _1797 = fma(_898, cbModelParam._m0[14u].z, fma(_897, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896));
        float _1800 = fma(_898, cbModelParam._m0[15u].z, fma(_897, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896));
        float _1828;
        if (_1794 > 0.0)
        {
            _1828 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1828 = frontier_phi_17_15_ladder;
        }
        float _1998;
        if (_1797 > 0.0)
        {
            _1998 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1998 = frontier_phi_26_22_ladder;
        }
        float _2293;
        if (_1800 > 0.0)
        {
            _2293 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2293 = frontier_phi_38_33_ladder;
        }
        float _2295 = isnan(_1998) ? _1828 : (isnan(_1828) ? _1998 : min(_1828, _1998));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1794) + _1783;
        float _2301 = (_2296 * _1797) + _1787;
        float _2302 = (_2296 * _1800) + _1791;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2305 = (-1.0) - _2303;
        float _2307 = _2303 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2302 > _2307) || ((_2302 < _2305) || ((_2301 > _2307) || ((_2301 < _2305) || ((_2300 < _2305) || (_2300 > _2307))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2302, cbModelParam._m0[9u].z, fma(_2301, cbModelParam._m0[9u].y, _2300 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2302, cbModelParam._m0[10u].z, fma(_2301, cbModelParam._m0[10u].y, _2300 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2302, cbModelParam._m0[11u].z, fma(_2301, cbModelParam._m0[11u].y, _2300 * cbModelParam._m0[11u].x))), _1735);
            frontier_phi_16_38_ladder = _2447.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2447.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2447.x * cbModelParam._m0[1u].y;
        }
        _1816 = frontier_phi_16_38_ladder_2;
        _1818 = frontier_phi_16_38_ladder_1;
        _1820 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_896, _897, _898), _1735);
        _1816 = _1804.x * cbModelParam._m0[1u].y;
        _1818 = _1804.y * cbModelParam._m0[1u].y;
        _1820 = _1804.z * cbModelParam._m0[1u].y;
    }
    float _1824 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _729);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1824 : min(cbModelParam._m0[25u].w, _1824));
    float _1915;
    float _1917;
    float _1919;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1879 = fma(_957, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949)) + cbModelParam._m0[21u].w;
        float _1883 = fma(_957, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949)) + cbModelParam._m0[22u].w;
        float _1887 = fma(_957, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949)) + cbModelParam._m0[23u].w;
        float _1890 = fma(_898, cbModelParam._m0[21u].z, fma(_897, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896));
        float _1893 = fma(_898, cbModelParam._m0[22u].z, fma(_897, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896));
        float _1896 = fma(_898, cbModelParam._m0[23u].z, fma(_897, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896));
        float _2003;
        if (_1890 > 0.0)
        {
            _2003 = abs((1.0 - _1879) / _1890);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1879 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2003 = frontier_phi_28_24_ladder;
        }
        float _2320;
        if (_1893 > 0.0)
        {
            _2320 = abs((1.0 - _1883) / _1893);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1883 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2320 = frontier_phi_40_35_ladder;
        }
        float _2647;
        if (_1896 > 0.0)
        {
            _2647 = abs((1.0 - _1887) / _1896);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1887 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2647 = frontier_phi_50_47_ladder;
        }
        float _2649 = isnan(_2320) ? _2003 : (isnan(_2003) ? _2320 : min(_2003, _2320));
        float _2650 = isnan(_2647) ? _2649 : (isnan(_2649) ? _2647 : min(_2649, _2647));
        float _2654 = (_2650 * _1890) + _1879;
        float _2655 = (_2650 * _1893) + _1883;
        float _2656 = (_2650 * _1896) + _1887;
        float _2657 = _2650 * 9.9999997473787516355514526367188e-05;
        float _2658 = (-1.0) - _2657;
        float _2660 = _2657 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2656 > _2660) || ((_2656 < _2658) || ((_2655 > _2660) || ((_2655 < _2658) || ((_2654 < _2658) || (_2654 > _2660))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2656, cbModelParam._m0[17u].z, fma(_2655, cbModelParam._m0[17u].y, _2654 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2656, cbModelParam._m0[18u].z, fma(_2655, cbModelParam._m0[18u].y, _2654 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2656, cbModelParam._m0[19u].z, fma(_2655, cbModelParam._m0[19u].y, _2654 * cbModelParam._m0[19u].x))), _1825);
            frontier_phi_25_50_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1915 = frontier_phi_25_50_ladder_2;
        _1917 = frontier_phi_25_50_ladder_1;
        _1919 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_896, _897, _898), _1825);
        _1915 = _1899.x * cbModelParam._m0[1u].z;
        _1917 = _1899.y * cbModelParam._m0[1u].z;
        _1919 = _1899.z * cbModelParam._m0[1u].z;
    }
    float _1931 = ((((1.0 - _917) * ((_904 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_917 * _904)) * _888;
    float _1932 = _1931 * ((cbModelParam._m0[1u].w * (_1915 - _1816)) + _1816);
    float _1933 = _1931 * ((cbModelParam._m0[1u].w * (_1917 - _1818)) + _1818);
    float _1934 = _1931 * ((cbModelParam._m0[1u].w * (_1919 - _1820)) + _1820);
    float _1937 = fma(_1934, cbSceneParam._m0[89u].z, fma(_1933, cbSceneParam._m0[89u].y, _1932 * cbSceneParam._m0[89u].x));
    float _1940 = fma(_1934, cbSceneParam._m0[90u].z, fma(_1933, cbSceneParam._m0[90u].y, _1932 * cbSceneParam._m0[90u].x));
    float _1943 = fma(_1934, cbSceneParam._m0[91u].z, fma(_1933, cbSceneParam._m0[91u].y, _1932 * cbSceneParam._m0[91u].x));
    float _1977 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1981 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1985 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1990 = _1977 / _1989;
    float _1991 = _1981 / _1989;
    float _1992 = _1985 / _1989;
    float _2139;
    float _2140;
    float _2141;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2019 = ((uint(_1992 > cbSceneParam._m0[59u].y) + uint(_1992 > cbSceneParam._m0[59u].x)) + uint(_1992 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2020 = _2019 + 43u;
        uint _2028 = _2019 + 44u;
        uint _2036 = _2019 + 45u;
        uint _2044 = _2019 + 46u;
        float _2055 = fma(_1989, cbSceneParam._m0[_2020].w, fma(_1985, cbSceneParam._m0[_2020].z, fma(_1981, cbSceneParam._m0[_2020].y, _1977 * cbSceneParam._m0[_2020].x)));
        float _2059 = fma(_1989, cbSceneParam._m0[_2028].w, fma(_1985, cbSceneParam._m0[_2028].z, fma(_1981, cbSceneParam._m0[_2028].y, _1977 * cbSceneParam._m0[_2028].x)));
        float _2067 = fma(_1989, cbSceneParam._m0[_2044].w, fma(_1985, cbSceneParam._m0[_2044].z, fma(_1981, cbSceneParam._m0[_2044].y, _1977 * cbSceneParam._m0[_2044].x)));
        float _2072 = cbSceneParam._m0[33u].z * _2067;
        float _2074 = cbSceneParam._m0[33u].w * _2067;
        float _2077 = fma(_1989, cbSceneParam._m0[_2036].w, fma(_1985, cbSceneParam._m0[_2036].z, fma(_1981, cbSceneParam._m0[_2036].y, _1977 * cbSceneParam._m0[_2036].x))) / _2067;
        float _2125 = (cbSceneParam._m0[33u].x - sqrt(((_1991 * _1991) + (_1990 * _1990)) + (_1992 * _1992))) * cbSceneParam._m0[33u].y;
        float _4498 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2132 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2072 + _2055) / _2067, (_2074 + _2059) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 + _2055) / _2067, (_2059 - _2072) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 - _2072) / _2067, (_2059 - _2074) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 - _2074) / _2067, (_2072 + _2059) / _2067), _2077), 0.0)).x), vec4(0.25)));
        _2139 = 1.0 - (_2132 * cbSceneParam._m0[34u].x);
        _2140 = 1.0 - (_2132 * cbSceneParam._m0[34u].y);
        _2141 = 1.0 - (_2132 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2139 = 1.0;
        _2140 = 1.0;
        _2141 = 1.0;
    }
    float _2205;
    float _2207;
    float _2209;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2193 = fma(_1989, cbSceneParam._m0[63u].w, fma(_1985, cbSceneParam._m0[63u].z, fma(_1981, cbSceneParam._m0[63u].y, _1977 * cbSceneParam._m0[63u].x)));
        float _2194 = fma(_1989, cbSceneParam._m0[60u].w, fma(_1985, cbSceneParam._m0[60u].z, fma(_1981, cbSceneParam._m0[60u].y, _1977 * cbSceneParam._m0[60u].x))) / _2193;
        float _2195 = fma(_1989, cbSceneParam._m0[61u].w, fma(_1985, cbSceneParam._m0[61u].z, fma(_1981, cbSceneParam._m0[61u].y, _1977 * cbSceneParam._m0[61u].x))) / _2193;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2194 >= cbSceneParam._m0[64u].x) && (_2195 >= cbSceneParam._m0[64u].y)) && (_2194 <= cbSceneParam._m0[64u].z)) && (_2195 <= cbSceneParam._m0[64u].w))
        {
            float _2333 = fma(_1989, cbSceneParam._m0[62u].w, fma(_1985, cbSceneParam._m0[62u].z, fma(_1981, cbSceneParam._m0[62u].y, _1977 * cbSceneParam._m0[62u].x))) / _2193;
            float _2337 = isnan(cbSceneParam._m0[41u].w) ? _2333 : (isnan(_2333) ? cbSceneParam._m0[41u].w : max(_2333, cbSceneParam._m0[41u].w));
            float _2380 = (cbSceneParam._m0[33u].x - sqrt(((_1991 * _1991) + (_1990 * _1990)) + (_1992 * _1992))) * cbSceneParam._m0[33u].y;
            float _4514 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
            float _2387 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2194, cbSceneParam._m0[33u].w + _2195), _2337), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2194, _2195 - cbSceneParam._m0[33u].z), _2337), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2194 - cbSceneParam._m0[33u].z, _2195 - cbSceneParam._m0[33u].w), _2337), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2194 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2195), _2337), 0.0)).x), vec4(0.25)));
            float _2391 = 1.0 - (_2387 * cbSceneParam._m0[34u].x);
            float _2392 = 1.0 - (_2387 * cbSceneParam._m0[34u].y);
            float _2393 = 1.0 - (_2387 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2393) ? _2141 : (isnan(_2141) ? _2393 : min(_2141, _2393));
            frontier_phi_37_36_ladder_1 = isnan(_2392) ? _2140 : (isnan(_2140) ? _2392 : min(_2140, _2392));
            frontier_phi_37_36_ladder_2 = isnan(_2391) ? _2139 : (isnan(_2139) ? _2391 : min(_2139, _2391));
        }
        else
        {
            frontier_phi_37_36_ladder = _2141;
            frontier_phi_37_36_ladder_1 = _2140;
            frontier_phi_37_36_ladder_2 = _2139;
        }
        _2205 = frontier_phi_37_36_ladder_2;
        _2207 = frontier_phi_37_36_ladder_1;
        _2209 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2205 = _2139;
        _2207 = _2140;
        _2209 = _2141;
    }
    uvec4 _2214 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2216 = _2214.x * 14u;
    uint _2217 = _2216 + 13u;
    float _2224 = _888 + (-1.0);
    float _2229 = (cbLight._m0[_2217].x * _2224) + 1.0;
    float _2230 = (cbLight._m0[_2217].y * _2224) + 1.0;
    float _2231 = (cbLight._m0[_2217].z * _2224) + 1.0;
    float _2232 = (cbLight._m0[_2217].w * _2224) + 1.0;
    uint _2233 = _2216 + 5u;
    float _2239 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2243 = _2216 + 4u;
    float _2252 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
    uint _2256 = _2216 | 1u;
    float _2267 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_726, _727, _728));
    float _2270 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_726, _727, _728));
    float _4550 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _4561 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2275 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * 0.3183098733425140380859375;
    float _2277 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * 0.3183098733425140380859375;
    float _2284 = ((cbLight._m0[_2233].x * _2239) * _2277) + (((cbLight._m0[_2243].x * _2205) * _2252) * _2275);
    float _2285 = ((_2239 * cbLight._m0[_2233].y) * _2277) + (((cbLight._m0[_2243].y * _2207) * _2252) * _2275);
    float _2286 = ((_2239 * cbLight._m0[_2233].z) * _2277) + (((cbLight._m0[_2243].z * _2209) * _2252) * _2275);
    uvec4 _2290 = floatBitsToUint(cbLight._m0[_2216 + 12u]);
    bool _2292 = _2290.x == 0u;
    float _2394;
    float _2396;
    float _2398;
    if (_2292)
    {
        _2394 = _2284;
        _2396 = _2285;
        _2398 = _2286;
    }
    else
    {
        uint _2402 = _2216 + 6u;
        float _2418 = (dot(vec3(cbLight._m0[_2216 + 2u].xyz), vec3(_726, _727, _728)) * 0.5) + 0.5;
        float _2419 = _2418 * _2418;
        float _4572 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2420 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2421 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2394 = (((cbLight._m0[_2402].x * 0.3183098733425140380859375) * _2420) * _2421) + _2284;
        _2396 = (((cbLight._m0[_2402].y * 0.3183098733425140380859375) * _2420) * _2421) + _2285;
        _2398 = (((cbLight._m0[_2402].z * 0.3183098733425140380859375) * _2420) * _2421) + _2286;
    }
    bool _2401 = _2290.y == 0u;
    float _2456;
    float _2458;
    float _2460;
    if (_2401)
    {
        _2456 = _2394;
        _2458 = _2396;
        _2460 = _2398;
    }
    else
    {
        uint _2618 = _2216 + 7u;
        float _2634 = (dot(vec3(cbLight._m0[_2216 + 3u].xyz), vec3(_726, _727, _728)) * 0.5) + 0.5;
        float _2635 = _2634 * _2634;
        float _4588 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2636 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2637 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2456 = (((cbLight._m0[_2618].x * 0.3183098733425140380859375) * _2636) * _2637) + _2394;
        _2458 = (((cbLight._m0[_2618].y * 0.3183098733425140380859375) * _2636) * _2637) + _2396;
        _2460 = (((cbLight._m0[_2618].z * 0.3183098733425140380859375) * _2636) * _2637) + _2398;
    }
    uint _2463 = _2216 + 8u;
    float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _729) * 0.949999988079071044921875);
    float _2477 = _2476 * _2476;
    float _2478 = cbLight._m0[_2216].x + _805;
    float _2479 = cbLight._m0[_2216].y + _806;
    float _2480 = cbLight._m0[_2216].z + _807;
    float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
    float _2485 = _2484 * _2478;
    float _2486 = _2484 * _2479;
    float _2487 = _2484 * _2480;
    float _2488 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2216].xyz));
    float _4604 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _4615 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2492 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2493 = dot(vec3(_726, _727, _728), vec3(_2485, _2486, _2487));
    float _4626 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2497 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2485, _2486, _2487));
    float _4637 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2501 = _2477 * _2477;
    float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
    float _2516 = (exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2517 = 1.0 - _2477;
    float _2528 = (0.5 / (((_2492 * ((_2491 * _2517) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2517) + _2477) * _2491))) * _2491;
    float _4648 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2530 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
    uint _2544 = _2216 + 9u;
    float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _729) * 0.949999988079071044921875);
    float _2556 = _2555 * _2555;
    float _2557 = cbLight._m0[_2256].x + _805;
    float _2558 = cbLight._m0[_2256].y + _806;
    float _2559 = cbLight._m0[_2256].z + _807;
    float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
    float _2564 = _2563 * _2557;
    float _2565 = _2563 * _2558;
    float _2566 = _2563 * _2559;
    float _2567 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2256].xyz));
    float _4659 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _2571 = dot(vec3(_726, _727, _728), vec3(_2564, _2565, _2566));
    float _4670 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _2575 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2564, _2565, _2566));
    float _4681 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2579 = _2556 * _2556;
    float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
    float _2592 = (exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2593 = 1.0 - _2556;
    float _2603 = (0.5 / (((_2492 * ((_2570 * _2593) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2593) + _2556) * _2570))) * _2570;
    float _4692 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2605 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
    float _2615 = (((_2592 * cbLight._m0[_2544].x) * _2605) * _2239) + ((((cbLight._m0[_2463].x * _2205) * _2516) * _2530) * _2252);
    float _2616 = (((_2592 * cbLight._m0[_2544].y) * _2605) * _2239) + ((((cbLight._m0[_2463].y * _2207) * _2516) * _2530) * _2252);
    float _2617 = (((_2592 * cbLight._m0[_2544].z) * _2605) * _2239) + ((((cbLight._m0[_2463].z * _2209) * _2516) * _2530) * _2252);
    float _2673;
    float _2675;
    float _2677;
    if (_2292)
    {
        _2673 = _2615;
        _2675 = _2616;
        _2677 = _2617;
    }
    else
    {
        uint _2679 = _2216 + 2u;
        uint _2683 = _2216 + 10u;
        float _2697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2679].w)) * _729) * 0.949999988079071044921875);
        float _2698 = _2697 * _2697;
        float _2699 = cbLight._m0[_2679].x + _805;
        float _2700 = cbLight._m0[_2679].y + _806;
        float _2701 = cbLight._m0[_2679].z + _807;
        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
        float _2706 = _2705 * _2699;
        float _2707 = _2705 * _2700;
        float _2708 = _2705 * _2701;
        float _2709 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2679].xyz));
        float _4703 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2713 = dot(vec3(_726, _727, _728), vec3(_2706, _2707, _2708));
        float _4714 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2717 = dot(vec3(cbLight._m0[_2679].xyz), vec3(_2706, _2707, _2708));
        float _4725 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2721 = _2698 * _2698;
        float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
        float _2734 = (exp2(log2(1.0 - (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2735 = 1.0 - _2698;
        float _2745 = (0.5 / (((_2492 * ((_2712 * _2735) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2735) + _2698) * _2712))) * _2712;
        float _4736 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2747 = (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
        float _2748 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2673 = (((_2734 * cbLight._m0[_2683].x) * _2747) * _2748) + _2615;
        _2675 = (((_2734 * cbLight._m0[_2683].y) * _2747) * _2748) + _2616;
        _2677 = (((_2734 * cbLight._m0[_2683].z) * _2747) * _2748) + _2617;
    }
    float _2779;
    float _2781;
    float _2783;
    if (_2401)
    {
        _2779 = _2673;
        _2781 = _2675;
        _2783 = _2677;
    }
    else
    {
        uint _2790 = _2216 + 3u;
        uint _2794 = _2216 + 11u;
        float _2808 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2790].w)) * _729) * 0.949999988079071044921875);
        float _2809 = _2808 * _2808;
        float _2810 = cbLight._m0[_2790].x + _805;
        float _2811 = cbLight._m0[_2790].y + _806;
        float _2812 = cbLight._m0[_2790].z + _807;
        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
        float _2817 = _2816 * _2810;
        float _2818 = _2816 * _2811;
        float _2819 = _2816 * _2812;
        float _2820 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2790].xyz));
        float _4752 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2824 = dot(vec3(_726, _727, _728), vec3(_2817, _2818, _2819));
        float _4763 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2827 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2828 = dot(vec3(cbLight._m0[_2790].xyz), vec3(_2817, _2818, _2819));
        float _4774 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2832 = _2809 * _2809;
        float _2836 = ((_2827 * _2827) * (_2832 + (-1.0))) + 1.0;
        float _2845 = (exp2(log2(1.0 - (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2846 = 1.0 - _2809;
        float _2856 = (0.5 / (((_2492 * ((_2823 * _2846) + _2809)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2846) + _2809) * _2823))) * _2823;
        float _4785 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2858 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2832 / ((_2836 * _2836) * 3.141590118408203125));
        float _2859 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2779 = (((_2845 * cbLight._m0[_2794].x) * _2858) * _2859) + _2673;
        _2781 = (((_2845 * cbLight._m0[_2794].y) * _2858) * _2859) + _2675;
        _2783 = (((_2845 * cbLight._m0[_2794].z) * _2858) * _2859) + _2677;
    }
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    float _2935;
    if (_2214.y == 0u)
    {
        uvec4 _2880 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2881 = _2880.x;
        uint _2892 = uint((float(_2880.y) * floor(float(uint(cbSceneParam._m0[85u].y * _826) / _2881))) + floor(float(uint(cbSceneParam._m0[85u].x * _825) / _2881)));
        float _2902 = (log2(_1992 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2903 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        uint _2906 = uint(isnan(14.0) ? _2903 : (isnan(_2903) ? 14.0 : min(_2903, 14.0)));
        uvec4 _2911 = texelFetch(g_lightClusterGridBuffer, int(((_2906 << 2u) + (_2892 << 6u)) >> 2u));
        uint _2912 = _2911.x;
        uint _2913 = _2880.z;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        if (((((1u << ((_2913 >> 4u) & 15u)) + 4294967295u) & _2912) == 0u) || ((_2913 & 240u) == 0u))
        {
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
        }
        else
        {
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            uint _3151 = 0u;
            uint _3160;
            bool _3161;
            for (;;)
            {
                _3160 = texelFetch(g_lightClassification, int((((_2906 << 5u) + (_2892 << 9u)) + (_3151 << 2u)) >> 2u)).x;
                _3161 = _3160 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3161)
                {
                    frontier_phi_71_pred = _3150;
                    frontier_phi_71_pred_1 = _3149;
                    frontier_phi_71_pred_2 = _3148;
                    frontier_phi_71_pred_3 = _3147;
                    frontier_phi_71_pred_4 = _3146;
                    frontier_phi_71_pred_5 = _3145;
                }
                else
                {
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    uint _3296;
                    _3290 = _3145;
                    _3291 = _3146;
                    _3292 = _3147;
                    _3293 = _3148;
                    _3294 = _3149;
                    _3295 = _3150;
                    _3296 = _3160;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    for (;;)
                    {
                        uint _3300 = uint(findLSB(_3296)) + (_3151 << 5u);
                        uint _3297 = (_3296 + 4294967295u) & _3296;
                        uint _3302 = _3300 * 48u;
                        vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3302)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 3u)).x));
                        uint _3322 = (_3300 * 48u) + 4u;
                        vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3322)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 3u)).x));
                        uint _3341 = (_3300 * 48u) + 8u;
                        vec3 _3352 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x));
                        float _3356 = _3316.x - _1990;
                        float _3357 = _3316.y - _1991;
                        float _3358 = _3316.z - _1992;
                        float _3359 = dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358));
                        float _3362 = inversesqrt(_3359);
                        float _3363 = _3362 * _3356;
                        float _3364 = _3362 * _3357;
                        float _3365 = _3362 * _3358;
                        float _3366 = dot(vec3(_844, _847, _850), vec3(_3363, _3364, _3365));
                        float _3371 = 1.0 - (_3359 * _3316.w);
                        float _4811 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3372 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3373 = sqrt(_3359) * _3335.w;
                        float _3376 = 1.39999997615814208984375 / (_3373 + 1.39999997615814208984375);
                        float _3377 = _3376 * _3376;
                        float _3380 = ((1.0 - _3377) * _3366) + _3377;
                        float _3383 = _3373 * _3373;
                        float _3387 = ((isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0))) * _3372) / ((_3383 * 0.699999988079071044921875) + 1.0);
                        float _3391 = (-0.0) - _1990;
                        float _3392 = (-0.0) - _1991;
                        float _3393 = (-0.0) - _1992;
                        float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                        float _3398 = _3397 * _3391;
                        float _3399 = _3397 * _3392;
                        float _3400 = _3397 * _3393;
                        float _3407 = exp2(log2(1.0 / ((_3383 * 3.5) + 5.0)) * 0.25);
                        float _3408 = 1.0 - _904;
                        float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                        float _3416 = _3415 * _3415;
                        float _3417 = _3416 * _3416;
                        float _3418 = _3398 + _3363;
                        float _3419 = _3399 + _3364;
                        float _3420 = _3400 + _3365;
                        float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                        float _3428 = dot(vec3(_844, _847, _850), vec3(_3398, _3399, _3400));
                        float _4827 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3431 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3432 = dot(vec3(_844, _847, _850), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                        float _4838 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3435 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                        float _3440 = _3376 * _3416;
                        float _3441 = _3440 * _3440;
                        float _3444 = ((1.0 - _3441) * _3366) + _3441;
                        float _4849 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3445 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3446 = 1.0 - _3416;
                        float _3456 = (0.5 / (((_3445 * ((_3431 * _3446) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3445 * _3446) + _3416) * _3431))) * _3445;
                        float _4860 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3467 = (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3439 * _3439) * ((_3383 * 2.1991131305694580078125) + 3.141590118408203125))) * _3372;
                        _3220 = (_3387 * _3335.x) + _3293;
                        _3221 = (_3387 * _3335.y) + _3294;
                        _3222 = (_3387 * _3335.z) + _3295;
                        _3217 = (_3467 * _3352.x) + _3290;
                        _3218 = (_3467 * _3352.y) + _3291;
                        _3219 = (_3467 * _3352.z) + _3292;
                        if (_3297 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3290 = _3217;
                            _3291 = _3218;
                            _3292 = _3219;
                            _3293 = _3220;
                            _3294 = _3221;
                            _3295 = _3222;
                            _3296 = _3297;
                        }
                    }
                    frontier_phi_71_pred = _3222;
                    frontier_phi_71_pred_1 = _3221;
                    frontier_phi_71_pred_2 = _3220;
                    frontier_phi_71_pred_3 = _3219;
                    frontier_phi_71_pred_4 = _3218;
                    frontier_phi_71_pred_5 = _3217;
                }
                _3003 = frontier_phi_71_pred;
                _3001 = frontier_phi_71_pred_1;
                _2999 = frontier_phi_71_pred_2;
                _2997 = frontier_phi_71_pred_3;
                _2995 = frontier_phi_71_pred_4;
                _2993 = frontier_phi_71_pred_5;
                uint _3152 = _3151 + 1u;
                if (_3152 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3145 = _2993;
                    _3146 = _2995;
                    _3147 = _2997;
                    _3148 = _2999;
                    _3149 = _3001;
                    _3150 = _3003;
                    _3151 = _3152;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
        }
        uvec4 _3006 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3007 = _3006.z;
        uint _3009 = (_3007 >> 8u) & 15u;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        if (((4294967295u << _3009) & _2912) == 0u)
        {
            _3113 = _2992;
            _3115 = _2994;
            _3117 = _2996;
            _3119 = _2998;
            _3121 = _3000;
            _3123 = _3002;
        }
        else
        {
            float _3138 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
            float _3139 = _3138 * _1990;
            float _3140 = _3138 * _1991;
            float _3141 = _3138 * _1992;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3009 < ((_3007 >> 12u) & 15u))
            {
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3124;
                float _3273 = _2992;
                float _3274 = _2994;
                float _3275 = _2996;
                float _3276 = _2998;
                float _3277 = _3000;
                float _3278 = _3002;
                uint _3279 = _3009;
                uint _3288;
                bool _3289;
                for (;;)
                {
                    _3288 = texelFetch(g_lightClassification, int((((_2906 << 5u) + (_2892 << 9u)) + (_3279 << 2u)) >> 2u)).x;
                    _3289 = _3288 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3289)
                    {
                        frontier_phi_82_pred = _3278;
                        frontier_phi_82_pred_1 = _3277;
                        frontier_phi_82_pred_2 = _3276;
                        frontier_phi_82_pred_3 = _3275;
                        frontier_phi_82_pred_4 = _3274;
                        frontier_phi_82_pred_5 = _3273;
                    }
                    else
                    {
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3494 = _3273;
                        float _3495 = _3274;
                        float _3496 = _3275;
                        float _3497 = _3276;
                        float _3498 = _3277;
                        float _3499 = _3278;
                        uint _3500 = _3288;
                        uint _3501;
                        vec4 _3526;
                        float _3527;
                        vec4 _3542;
                        vec3 _3554;
                        vec4 _3569;
                        vec4 _3584;
                        float _3630;
                        bool _3631;
                        for (;;)
                        {
                            uint _3511 = ((_3279 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3500));
                            _3501 = (_3500 + 4294967295u) & _3500;
                            uint _3513 = _3511 * 40u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            _3527 = _3526.w;
                            uint _3529 = (_3511 * 40u) + 4u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3544 = (_3511 * 40u) + 8u;
                            _3554 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x));
                            uint _3556 = (_3511 * 40u) + 16u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3571 = (_3511 * 40u) + 20u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            uint _3586 = (_3511 * 40u) + 24u;
                            vec4 _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3605 = (_3511 * 40u) + 28u;
                            vec4 _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            _3630 = fma(_1992, _3618.z, fma(_1991, _3618.y, _3618.x * _1990)) + _3618.w;
                            _3631 = !((fma(_1992, _3599.z, fma(_1991, _3599.y, _3599.x * _1990)) + _3599.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3631)
                            {
                                float _3658 = _3526.x - _1990;
                                float _3659 = _3526.y - _1991;
                                float _3660 = _3526.z - _1992;
                                float _3661 = dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660));
                                float _3664 = inversesqrt(_3661);
                                float _3665 = _3664 * _3658;
                                float _3666 = _3664 * _3659;
                                float _3667 = _3664 * _3660;
                                float _3671 = 1.0 - (_3661 / (_3527 * _3527));
                                float _4871 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3676 = sqrt(_3661) * _3542.w;
                                float _3678 = 1.39999997615814208984375 / (_3676 + 1.39999997615814208984375);
                                float _3679 = _3678 * _3678;
                                float _3682 = ((1.0 - _3679) * dot(vec3(_3665, _3666, _3667), vec3(_844, _847, _850))) + _3679;
                                float _3685 = _3676 * _3676;
                                float _3689 = (fma(_1992, _3569.z, fma(_1991, _3569.y, _3569.x * _1990)) + _3569.w) / _3630;
                                float _3690 = (fma(_1992, _3584.z, fma(_1991, _3584.y, _3584.x * _1990)) + _3584.w) / _3630;
                                float _3694 = 1.0 - dot(vec2(_3689, _3690), vec2(_3689, _3690));
                                float _4887 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3695 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3696 = _3695 * (((isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0))) * _3672) / ((_3685 * 0.699999988079071044921875) + 1.0));
                                float _3708 = exp2(log2(1.0 / ((_3685 * 3.5) + 5.0)) * 0.25);
                                float _3709 = 1.0 - _904;
                                float _3716 = sqrt(1.0 - ((1.0 - (_3709 * _3709)) * (1.0 - (_3708 * _3708))));
                                float _3717 = _3716 * _3716;
                                float _3718 = _3717 * _3717;
                                float _3719 = _3665 - _3139;
                                float _3720 = _3666 - _3140;
                                float _3721 = _3667 - _3141;
                                float _3725 = inversesqrt(dot(vec3(_3719, _3720, _3721), vec3(_3719, _3720, _3721)));
                                float _3729 = dot(vec3(_844, _847, _850), vec3((-0.0) - _3139, (-0.0) - _3140, (-0.0) - _3141));
                                float _4898 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3732 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3733 = dot(vec3(_844, _847, _850), vec3(_3725 * _3719, _3725 * _3720, _3725 * _3721));
                                float _4909 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3736 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3740 = ((_3736 * _3736) * (_3718 + (-1.0))) + 1.0;
                                float _3741 = _3678 * _3717;
                                float _3742 = _3741 * _3741;
                                float _3748 = ((1.0 - _3742) * dot(vec3(_844, _847, _850), vec3(_3665, _3666, _3667))) + _3742;
                                float _4920 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3750 = 1.0 - _3717;
                                float _3760 = (0.5 / (((_3749 * ((_3732 * _3750) + _3717)) + 9.9999999392252902907785028219223e-09) + (((_3749 * _3750) + _3717) * _3732))) * _3749;
                                float _4931 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3770 = (_3695 * _3672) * (((_3718 * 3.1415927410125732421875) * (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0)))) / ((_3740 * _3740) * ((_3685 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3696 * _3542.z;
                                frontier_phi_88_pred_1 = _3696 * _3542.y;
                                frontier_phi_88_pred_2 = _3696 * _3542.x;
                                frontier_phi_88_pred_3 = _3770 * _3554.z;
                                frontier_phi_88_pred_4 = _3770 * _3554.y;
                                frontier_phi_88_pred_5 = _3770 * _3554.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3779 = frontier_phi_88_pred;
                            _3778 = frontier_phi_88_pred_1;
                            _3777 = frontier_phi_88_pred_2;
                            _3776 = frontier_phi_88_pred_3;
                            _3775 = frontier_phi_88_pred_4;
                            _3774 = frontier_phi_88_pred_5;
                            _3484 = _3777 + _3497;
                            _3485 = _3778 + _3498;
                            _3486 = _3779 + _3499;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            _3483 = _3776 + _3496;
                            if (_3501 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3501;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3486;
                        frontier_phi_82_pred_1 = _3485;
                        frontier_phi_82_pred_2 = _3484;
                        frontier_phi_82_pred_3 = _3483;
                        frontier_phi_82_pred_4 = _3482;
                        frontier_phi_82_pred_5 = _3481;
                    }
                    _3124 = frontier_phi_82_pred;
                    _3122 = frontier_phi_82_pred_1;
                    _3120 = frontier_phi_82_pred_2;
                    _3118 = frontier_phi_82_pred_3;
                    _3116 = frontier_phi_82_pred_4;
                    _3114 = frontier_phi_82_pred_5;
                    uint _3280 = _3279 + 1u;
                    if (_3280 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3273 = _3114;
                        _3274 = _3116;
                        _3275 = _3118;
                        _3276 = _3120;
                        _3277 = _3122;
                        _3278 = _3124;
                        _3279 = _3280;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3120;
                frontier_phi_63_64_ladder_1 = _3124;
                frontier_phi_63_64_ladder_2 = _3122;
                frontier_phi_63_64_ladder_3 = _3118;
                frontier_phi_63_64_ladder_4 = _3116;
                frontier_phi_63_64_ladder_5 = _3114;
            }
            else
            {
                frontier_phi_63_64_ladder = _2998;
                frontier_phi_63_64_ladder_1 = _3002;
                frontier_phi_63_64_ladder_2 = _3000;
                frontier_phi_63_64_ladder_3 = _2996;
                frontier_phi_63_64_ladder_4 = _2994;
                frontier_phi_63_64_ladder_5 = _2992;
            }
            _3113 = frontier_phi_63_64_ladder_5;
            _3115 = frontier_phi_63_64_ladder_4;
            _3117 = frontier_phi_63_64_ladder_3;
            _3119 = frontier_phi_63_64_ladder;
            _3121 = frontier_phi_63_64_ladder_2;
            _3123 = frontier_phi_63_64_ladder_1;
        }
        float _3128 = isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0));
        _2925 = (_3128 * _3119) + _2456;
        _2927 = (_3128 * _3121) + _2458;
        _2929 = (_3128 * _3123) + _2460;
        _2931 = ((_3113 * 0.039999999105930328369140625) * _3128) + _2779;
        _2933 = ((_3115 * 0.039999999105930328369140625) * _3128) + _2781;
        _2935 = ((_3117 * 0.039999999105930328369140625) * _3128) + _2783;
    }
    else
    {
        _2925 = _2456;
        _2927 = _2458;
        _2929 = _2460;
        _2931 = _2779;
        _2933 = _2781;
        _2935 = _2783;
    }
    float _4947 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4958 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4969 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2952 = ((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2925 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _888))) + ((_2931 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1724)) * cbPerFrame._m0[3u].x);
    float _2953 = ((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2927 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _888))) + ((_2933 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1724)) * cbPerFrame._m0[3u].x);
    float _2954 = ((isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0))) * (_2929 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _888))) + ((_2935 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1724)) * cbPerFrame._m0[3u].x);
    uint _2955 = _272 + 6u;
    float _2963 = _825 / cbSceneParam._m0[86u].x;
    float _2964 = _826 / cbSceneParam._m0[86u].y;
    vec4 _2978 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2963, _2964, (log2((isnan(cbSceneParam._m0[77u].w) ? _747 : (isnan(_747) ? cbSceneParam._m0[77u].w : min(_747, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2980 = _2978.x;
    float _2981 = _2978.y;
    float _2982 = _2978.z;
    float _2983 = _2978.w;
    float _3055;
    float _3057;
    float _3059;
    float _3061;
    if (_747 > cbSceneParam._m0[78u].w)
    {
        float _3017 = isnan(_747) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _747 : min(cbSceneParam._m0[80u].w, _747));
        float _3018 = _3017 / _747;
        float _3029 = _3018 * _798;
        float _3030 = _799 * _3018;
        float _3031 = (-0.0) - _3030;
        float _3033 = _3018 * _800;
        float _3035 = (cbSceneParam._m0[77u].w * _3031) / _3017;
        float _3036 = _3035 + cbSceneParam._m0[79u].w;
        float _3037 = cbSceneParam._m0[79u].w - _3030;
        float _3043 = sqrt(((_3029 * _3029) + (_3030 * _3030)) + (_3033 * _3033));
        float _3046 = (1.0 - (cbSceneParam._m0[77u].w / _3017)) * _3043;
        float _3051 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3053 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3230;
        if (abs((_3031 - _3035) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3230 = ((((_3036 > 0.0) ? exp2(_3051 * _3036) : (2.0 - exp2(_3053 * _3036))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3046;
        }
        else
        {
            float _3174 = 1.0 / cbSceneParam._m0[80u].x;
            float _3175 = isnan(_3037) ? _3036 : (isnan(_3036) ? _3037 : max(_3036, _3037));
            float _3176 = isnan(_3037) ? _3036 : (isnan(_3036) ? _3037 : min(_3036, _3037));
            float _3185 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : min(_3175, 0.0));
            float _3186 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : min(_3176, 0.0));
            _3230 = ((abs(_3043 / _3031) * cbSceneParam._m0[80u].y) * ((((_3185 - _3186) * 2.0) - ((exp2(_3051 * (isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0)))) - exp2(_3051 * (isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))))) * _3174)) - ((exp2(_3053 * _3185) - exp2(_3053 * _3186)) * _3174))) + (_3046 * cbSceneParam._m0[80u].z);
        }
        vec4 _3232 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2963, _2964, 1.0), 0.0);
        float _3241 = exp2((_3230 * (-1.44269502162933349609375)) * (1.0 - _3232.w));
        float _3242 = log2(_3241);
        float _3258 = log2(_2983);
        _3055 = (exp2(_3258 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3242 * cbSceneParam._m0[78u].x)) * _3232.x) / cbSceneParam._m0[78u].x)) + _2980;
        _3057 = (exp2(_3258 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3242 * cbSceneParam._m0[78u].y)) * _3232.y) / cbSceneParam._m0[78u].y)) + _2981;
        _3059 = (exp2(_3258 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3242 * cbSceneParam._m0[78u].z)) * _3232.z) / cbSceneParam._m0[78u].z)) + _2982;
        _3061 = _3241 * _2983;
    }
    else
    {
        _3055 = _2980;
        _3057 = _2981;
        _3059 = _2982;
        _3061 = _2983;
    }
    bool _3268;
    vec4 _3071;
    vec4 _3093;
    float _3095;
    float _3099;
    float _3100;
    float _3101;
    float _3102;
    bool _3112;
    for (;;)
    {
        _3071 = cbMatDynParam._m0[0u];
        float _3073 = roundEven(_3071.y);
        bool _3074 = _3073 == 3.0;
        float _3075 = log2(_3061);
        float _3082 = exp2(_3075 * cbSceneParam._m0[78u].x) * _2952;
        float _3083 = exp2(_3075 * cbSceneParam._m0[78u].y) * _2953;
        float _3084 = exp2(_3075 * cbSceneParam._m0[78u].z) * _2954;
        float _3091 = _814 + (-0.5);
        _3093 = cbMtdParam._m0[1u];
        _3095 = _3093.y * _3091;
        float _3098 = (_3073 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3099 = _3098 * (_3074 ? _3082 : (_3082 + (cbSceneParam._m0[72u].w * _3055)));
        _3100 = _3098 * (_3074 ? _3083 : (_3083 + (cbSceneParam._m0[72u].w * _3057)));
        _3101 = _3098 * (_3074 ? _3084 : (_3084 + (cbSceneParam._m0[72u].w * _3059)));
        _3102 = _3091 * 0.999000012874603271484375;
        _3112 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3112)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _3102) < 0.5)
            {
                _3268 = true;
                break;
            }
        }
        uint _3209 = _863 + uint(_3071.w);
        if ((cbInstanceData._m0[_3209].w < 1.0) && ((cbInstanceData._m0[_3209].w + _3102) < 0.5))
        {
            _3268 = true;
            break;
        }
        if ((_3095 + 1.0) < _3093.x)
        {
            _3268 = true;
            break;
        }
        _3268 = false;
        break;
    }
    float _3472;
    if (_3268)
    {
        discard_state = true;
        _3472 = 0.0;
    }
    else
    {
        _3472 = cbInstanceData._m0[_2955].w;
    }
    SV_Target.x = _3099;
    SV_Target.y = _3100;
    SV_Target.z = _3101;
    SV_Target.w = _3472;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2955].w;
    discard_exit();
}


