#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1175;
float _3819;
float _3820;
float _3821;
float _3822;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].z) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3831 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _397 = (_390 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _398 = (_390 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _399 = (_390 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _417 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    float _447 = ((_417.z - _438) * _390) + _438;
    float _450 = ((((_417.x - _436) * _390) + _436) * 2.0) + (-1.0);
    float _452 = ((((_417.y - _437) * _390) + _437) * 2.0) + (-1.0);
    float _453 = dot(vec2(_450, _452), vec2(_450, _452));
    float _3842 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _486 = (((_474.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _450;
    float _487 = (((_474.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _452;
    float _490 = fma(_458, _224, fma(_487, _231, _486 * _217));
    float _493 = fma(_458, _225, fma(_487, _232, _486 * _218));
    float _496 = fma(_458, _226, fma(_487, _233, _486 * _219));
    float _500 = inversesqrt(dot(vec3(_490, _493, _496), vec3(_490, _493, _496)));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _529 = _527.x;
    float _530 = 1.0 - _529;
    float _536 = (cbMtdParam._m0[19u].x + dot(vec4(_500 * _490, _500 * _493, _500 * _496, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_529 - _530) * cbMtdParam._m0[24u].w) + _530) * cbMtdParam._m0[21u].z);
    float _3853 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _544 = (_537 * (cbMtdParam._m0[17u].x - _397)) + _397;
    float _545 = (_537 * (cbMtdParam._m0[17u].y - _398)) + _398;
    float _546 = (_537 * (cbMtdParam._m0[17u].z - _399)) + _399;
    float _550 = (cbMtdParam._m0[19u].w * (_474.z - _447)) + _447;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _570 = (_563.x * 2.0) + (-1.0);
    float _571 = (_563.y * 2.0) + (-1.0);
    float _572 = dot(vec2(_570, _571), vec2(_570, _571));
    float _3864 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _580 = ((_563.z - _550) * _537) + _550;
    float _590 = ((sqrt(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) - _458) * _537) + _458;
    float _593 = (((_570 - _486) * _537) + _486) + (cbMtdParam._m0[21u].x * _486);
    float _594 = (((_571 - _487) * _537) + _487) + (cbMtdParam._m0[21u].x * _487);
    float _598 = cbMtdParam._m0[22u].x + _474.w;
    float _601 = fma(_590, _224, fma(_594, _231, _593 * _217));
    float _604 = fma(_590, _225, fma(_594, _232, _593 * _218));
    float _607 = fma(_590, _226, fma(_594, _233, _593 * _219));
    float _611 = inversesqrt(dot(vec3(_601, _604, _607), vec3(_601, _604, _607)));
    float _612 = _611 * _601;
    float _613 = _611 * _604;
    float _614 = _611 * _607;
    float _3875 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _615 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3897 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3908 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3919 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _633 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _685 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _675);
    float _686 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _675);
    float _687 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _675);
    float _691 = inversesqrt(dot(vec3(_685, _686, _687), vec3(_685, _686, _687)));
    float _692 = _685 * _691;
    float _693 = _686 * _691;
    float _694 = _687 * _691;
    vec4 _699 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _701 = _699.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _855 = sqrt(((_685 * _685) + (_686 * _686)) + (_687 * _687));
        float _861 = (cbMatDynParam._m0[5u].x * _855) + cbMatDynParam._m0[5u].y;
        float _3930 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _866 = (cbMatDynParam._m0[5u].z * _855) + cbMatDynParam._m0[5u].w;
        float _3941 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) - _862)) + _862) < ((_701 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _712 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _713 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _731 = fma(_614, cbSceneParam._m0[5u].z, fma(_613, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _612));
    float _734 = fma(_614, cbSceneParam._m0[6u].z, fma(_613, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _612));
    float _737 = fma(_614, cbSceneParam._m0[7u].z, fma(_613, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _612));
    uint _750 = _236 + 9u;
    uint _751 = _750 + uint(cbMatDynParam._m0[0u].w);
    float _757 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_751].x;
    float _758 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_751].y;
    float _759 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_751].z;
    float _3952 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _761 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    vec4 _771 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _712, cbSceneParam._m0[86u].y * _713));
    float _775 = ((isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * TEXCOORD_5.w) * _771.x;
    float _776 = dot(vec3(_612, _613, _614), vec3(_692, _693, _694));
    float _779 = _776 * 2.0;
    float _783 = (_779 * _612) - _692;
    float _784 = (_779 * _613) - _693;
    float _785 = (_779 * _614) - _694;
    float _789 = abs(dot(vec3(_692, _693, _694), vec3(_612, _613, _614)));
    float _3985 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _791 = sqrt(_615);
    float _804 = exp2((_791 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_791 * 3.0));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1174;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _899 = fma(_844, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _836));
        float _903 = fma(_844, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _836));
        float _907 = fma(_844, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _836));
        float _932 = _836 + _612;
        float _933 = _840 + _613;
        float _934 = _844 + _614;
        float _944 = fma(_934, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932)) - _899;
        float _945 = fma(_934, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932)) - _903;
        float _946 = fma(_934, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932)) - _907;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_899 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_903 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[34u].z) + ((((((_907 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1002 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_968.x + (-0.5));
        float _1004 = _1002 * (_968.y + (-0.5));
        float _1005 = _1002 * (_968.z + (-0.5));
        float _1012 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_975.x + (-0.5));
        float _1014 = _1012 * (_975.y + (-0.5));
        float _1015 = _1012 * (_975.z + (-0.5));
        float _1022 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_982.x + (-0.5));
        float _1024 = _1022 * (_982.y + (-0.5));
        float _1025 = _1022 * (_982.z + (-0.5));
        float _1032 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_989.x + (-0.5));
        float _1034 = _1032 * (_989.y + (-0.5));
        float _1035 = _1032 * (_989.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1056 = (dot(vec3(_612, _613, _614), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1066 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _4033 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1068 + 1.0))) + _1073) * _1036;
        float _1083 = _1004 * 0.5;
        float _1084 = _1014 * 0.5;
        float _1085 = _1024 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_612, _613, _614), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _4066 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1110 + 1.0))) + _1115) * _1037;
        float _1125 = _1005 * 0.5;
        float _1126 = _1015 * 0.5;
        float _1127 = _1025 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_612, _613, _614), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _4099 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1152 + 1.0))) + _1157) * _1038;
        _1174 = _1005;
        _1176 = _1004;
        _1177 = _1003;
        _1178 = _1015;
        _1179 = _1014;
        _1180 = _1013;
        _1181 = _1025;
        _1182 = _1024;
        _1183 = _1023;
        _1184 = _1038;
        _1185 = _1037;
        _1186 = _1036;
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _1175;
        _1176 = _1175;
        _1177 = _1175;
        _1178 = _1175;
        _1179 = _1175;
        _1180 = _1175;
        _1181 = _1175;
        _1182 = _1175;
        _1183 = _1175;
        _1184 = _1175;
        _1185 = _1175;
        _1186 = _1175;
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
    }
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1217 = fma(_844, cbModelParam._m0[30u].z, fma(_840, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _836));
        float _1221 = fma(_844, cbModelParam._m0[31u].z, fma(_840, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _836));
        float _1225 = fma(_844, cbModelParam._m0[32u].z, fma(_840, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _836));
        float _1248 = _836 + _612;
        float _1249 = _840 + _613;
        float _1250 = _844 + _614;
        float _1260 = fma(_1250, cbModelParam._m0[30u].z, fma(_1249, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1248)) - _1217;
        float _1261 = fma(_1250, cbModelParam._m0[31u].z, fma(_1249, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1248)) - _1221;
        float _1262 = fma(_1250, cbModelParam._m0[32u].z, fma(_1249, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1248)) - _1225;
        float _1266 = inversesqrt(dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262)));
        float _1279 = ((_1266 * _1260) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1217 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1266 * _1261) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1221 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1266 * _1262) / cbModelParam._m0[35u].z) + ((((((_1225 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        float _1316 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1283.x + (-0.5));
        float _1318 = _1316 * (_1283.y + (-0.5));
        float _1319 = _1316 * (_1283.z + (-0.5));
        float _1326 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1290.x + (-0.5));
        float _1328 = _1326 * (_1290.y + (-0.5));
        float _1329 = _1326 * (_1290.z + (-0.5));
        float _1336 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1297.x + (-0.5));
        float _1338 = _1336 * (_1297.y + (-0.5));
        float _1339 = _1336 * (_1297.z + (-0.5));
        float _1346 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1304.x + (-0.5));
        float _1348 = _1346 * (_1304.y + (-0.5));
        float _1349 = _1346 * (_1304.z + (-0.5));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = _1317 * 0.5;
        float _1354 = _1327 * 0.5;
        float _1355 = _1337 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_612, _613, _614), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4162 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1380 + 1.0))) + _1385) * _1350;
        float _1395 = _1318 * 0.5;
        float _1396 = _1328 * 0.5;
        float _1397 = _1338 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_612, _613, _614), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4195 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1422 + 1.0))) + _1427) * _1351;
        float _1437 = _1319 * 0.5;
        float _1438 = _1329 * 0.5;
        float _1439 = _1339 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_612, _613, _614), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4228 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1464 + 1.0))) + _1469) * _1352;
        _1486 = _1319;
        _1487 = _1318;
        _1488 = _1317;
        _1489 = _1329;
        _1490 = _1328;
        _1491 = _1327;
        _1492 = _1339;
        _1493 = _1338;
        _1494 = _1337;
        _1495 = _1352;
        _1496 = _1351;
        _1497 = _1350;
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
    }
    else
    {
        _1486 = _1175;
        _1487 = _1175;
        _1488 = _1175;
        _1489 = _1175;
        _1490 = _1175;
        _1491 = _1175;
        _1492 = _1175;
        _1493 = _1175;
        _1494 = _1175;
        _1495 = _1175;
        _1496 = _1175;
        _1497 = _1175;
        _1498 = 0.0;
        _1499 = 0.0;
        _1500 = 0.0;
    }
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1187)) + _1187;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1188)) + _1188;
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1189)) + _1189;
    float _1533 = fma(_1512, cbSceneParam._m0[89u].z, fma(_1511, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1536 = fma(_1512, cbSceneParam._m0[90u].z, fma(_1511, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1539 = fma(_1512, cbSceneParam._m0[91u].z, fma(_1511, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1510));
    float _1554 = _783 * 0.5;
    float _1555 = _784 * 0.5;
    float _1556 = _785 * 0.5;
    float _1557 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1560 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1563 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1597;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1570 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1174, _1178, _1181, _1184));
        float _1574 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1578 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1585 = dot(vec4(cbModelParam._m0[39u]), vec4(_1554, _1555, _1556, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1585) ? 0.0 : (isnan(0.0) ? _1585 : max(0.0, _1585))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1608;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1599 = dot(vec4(cbModelParam._m0[40u]), vec4(_1554, _1555, _1556, 1.0));
        _1608 = dot(vec3(isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1599) ? 0.0 : (isnan(0.0) ? _1599 : max(0.0, _1599))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1608 = 1.0;
    }
    float _1612 = (_1608 * cbModelParam._m0[1u].x) + (_1597 * (1.0 - cbModelParam._m0[1u].x));
    float _1622 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _615);
    float _1623 = isnan(_1622) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1622 : min(cbModelParam._m0[25u].z, _1622));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1671 = fma(_844, cbModelParam._m0[13u].z, fma(_840, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _836)) + cbModelParam._m0[13u].w;
        float _1675 = fma(_844, cbModelParam._m0[14u].z, fma(_840, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _836)) + cbModelParam._m0[14u].w;
        float _1679 = fma(_844, cbModelParam._m0[15u].z, fma(_840, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _836)) + cbModelParam._m0[15u].w;
        float _1682 = fma(_785, cbModelParam._m0[13u].z, fma(_784, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _783));
        float _1685 = fma(_785, cbModelParam._m0[14u].z, fma(_784, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _783));
        float _1688 = fma(_785, cbModelParam._m0[15u].z, fma(_784, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _783));
        float _1716;
        if (_1682 > 0.0)
        {
            _1716 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1716 = frontier_phi_17_15_ladder;
        }
        float _1886;
        if (_1685 > 0.0)
        {
            _1886 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1886 = frontier_phi_26_22_ladder;
        }
        float _2181;
        if (_1688 > 0.0)
        {
            _2181 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2181 = frontier_phi_38_33_ladder;
        }
        float _2183 = isnan(_1886) ? _1716 : (isnan(_1716) ? _1886 : min(_1716, _1886));
        float _2184 = isnan(_2181) ? _2183 : (isnan(_2183) ? _2181 : min(_2183, _2181));
        float _2188 = (_2184 * _1682) + _1671;
        float _2189 = (_2184 * _1685) + _1675;
        float _2190 = (_2184 * _1688) + _1679;
        float _2191 = _2184 * 9.9999997473787516355514526367188e-05;
        float _2193 = (-1.0) - _2191;
        float _2195 = _2191 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2190 > _2195) || ((_2190 < _2193) || ((_2189 > _2195) || ((_2189 < _2193) || ((_2188 < _2193) || (_2188 > _2195))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2335 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2190, cbModelParam._m0[9u].z, fma(_2189, cbModelParam._m0[9u].y, _2188 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2190, cbModelParam._m0[10u].z, fma(_2189, cbModelParam._m0[10u].y, _2188 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2190, cbModelParam._m0[11u].z, fma(_2189, cbModelParam._m0[11u].y, _2188 * cbModelParam._m0[11u].x))), _1623);
            frontier_phi_16_38_ladder = _2335.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2335.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2335.x * cbModelParam._m0[1u].y;
        }
        _1704 = frontier_phi_16_38_ladder_2;
        _1706 = frontier_phi_16_38_ladder_1;
        _1708 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1692 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_783, _784, _785), _1623);
        _1704 = _1692.x * cbModelParam._m0[1u].y;
        _1706 = _1692.y * cbModelParam._m0[1u].y;
        _1708 = _1692.z * cbModelParam._m0[1u].y;
    }
    float _1712 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _615);
    float _1713 = isnan(_1712) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1712 : min(cbModelParam._m0[25u].w, _1712));
    float _1803;
    float _1805;
    float _1807;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1767 = fma(_844, cbModelParam._m0[21u].z, fma(_840, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _836)) + cbModelParam._m0[21u].w;
        float _1771 = fma(_844, cbModelParam._m0[22u].z, fma(_840, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _836)) + cbModelParam._m0[22u].w;
        float _1775 = fma(_844, cbModelParam._m0[23u].z, fma(_840, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _836)) + cbModelParam._m0[23u].w;
        float _1778 = fma(_785, cbModelParam._m0[21u].z, fma(_784, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _783));
        float _1781 = fma(_785, cbModelParam._m0[22u].z, fma(_784, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _783));
        float _1784 = fma(_785, cbModelParam._m0[23u].z, fma(_784, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _783));
        float _1891;
        if (_1778 > 0.0)
        {
            _1891 = abs((1.0 - _1767) / _1778);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1767 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1891 = frontier_phi_28_24_ladder;
        }
        float _2208;
        if (_1781 > 0.0)
        {
            _2208 = abs((1.0 - _1771) / _1781);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1771 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2208 = frontier_phi_40_35_ladder;
        }
        float _2535;
        if (_1784 > 0.0)
        {
            _2535 = abs((1.0 - _1775) / _1784);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1775 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2535 = frontier_phi_50_47_ladder;
        }
        float _2537 = isnan(_2208) ? _1891 : (isnan(_1891) ? _2208 : min(_1891, _2208));
        float _2538 = isnan(_2535) ? _2537 : (isnan(_2537) ? _2535 : min(_2537, _2535));
        float _2542 = (_2538 * _1778) + _1767;
        float _2543 = (_2538 * _1781) + _1771;
        float _2544 = (_2538 * _1784) + _1775;
        float _2545 = _2538 * 9.9999997473787516355514526367188e-05;
        float _2546 = (-1.0) - _2545;
        float _2548 = _2545 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2544 > _2548) || ((_2544 < _2546) || ((_2543 > _2548) || ((_2543 < _2546) || ((_2542 < _2546) || (_2542 > _2548))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2544, cbModelParam._m0[17u].z, fma(_2543, cbModelParam._m0[17u].y, _2542 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2544, cbModelParam._m0[18u].z, fma(_2543, cbModelParam._m0[18u].y, _2542 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2544, cbModelParam._m0[19u].z, fma(_2543, cbModelParam._m0[19u].y, _2542 * cbModelParam._m0[19u].x))), _1713);
            frontier_phi_25_50_ladder = _2662.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2662.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2662.x * cbModelParam._m0[1u].z;
        }
        _1803 = frontier_phi_25_50_ladder_2;
        _1805 = frontier_phi_25_50_ladder_1;
        _1807 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_783, _784, _785), _1713);
        _1803 = _1787.x * cbModelParam._m0[1u].z;
        _1805 = _1787.y * cbModelParam._m0[1u].z;
        _1807 = _1787.z * cbModelParam._m0[1u].z;
    }
    float _1819 = ((((1.0 - _804) * ((_791 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_804 * _791)) * _775;
    float _1820 = _1819 * ((cbModelParam._m0[1u].w * (_1803 - _1704)) + _1704);
    float _1821 = _1819 * ((cbModelParam._m0[1u].w * (_1805 - _1706)) + _1706);
    float _1822 = _1819 * ((cbModelParam._m0[1u].w * (_1807 - _1708)) + _1708);
    float _1825 = fma(_1822, cbSceneParam._m0[89u].z, fma(_1821, cbSceneParam._m0[89u].y, _1820 * cbSceneParam._m0[89u].x));
    float _1828 = fma(_1822, cbSceneParam._m0[90u].z, fma(_1821, cbSceneParam._m0[90u].y, _1820 * cbSceneParam._m0[90u].x));
    float _1831 = fma(_1822, cbSceneParam._m0[91u].z, fma(_1821, cbSceneParam._m0[91u].y, _1820 * cbSceneParam._m0[91u].x));
    float _1865 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1869 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1873 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1877 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1878 = _1865 / _1877;
    float _1879 = _1869 / _1877;
    float _1880 = _1873 / _1877;
    float _2027;
    float _2028;
    float _2029;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1907 = ((uint(_1880 > cbSceneParam._m0[59u].y) + uint(_1880 > cbSceneParam._m0[59u].x)) + uint(_1880 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1908 = _1907 + 43u;
        uint _1916 = _1907 + 44u;
        uint _1924 = _1907 + 45u;
        uint _1932 = _1907 + 46u;
        float _1943 = fma(_1877, cbSceneParam._m0[_1908].w, fma(_1873, cbSceneParam._m0[_1908].z, fma(_1869, cbSceneParam._m0[_1908].y, _1865 * cbSceneParam._m0[_1908].x)));
        float _1947 = fma(_1877, cbSceneParam._m0[_1916].w, fma(_1873, cbSceneParam._m0[_1916].z, fma(_1869, cbSceneParam._m0[_1916].y, _1865 * cbSceneParam._m0[_1916].x)));
        float _1955 = fma(_1877, cbSceneParam._m0[_1932].w, fma(_1873, cbSceneParam._m0[_1932].z, fma(_1869, cbSceneParam._m0[_1932].y, _1865 * cbSceneParam._m0[_1932].x)));
        float _1960 = cbSceneParam._m0[33u].z * _1955;
        float _1962 = cbSceneParam._m0[33u].w * _1955;
        float _1965 = fma(_1877, cbSceneParam._m0[_1924].w, fma(_1873, cbSceneParam._m0[_1924].z, fma(_1869, cbSceneParam._m0[_1924].y, _1865 * cbSceneParam._m0[_1924].x))) / _1955;
        float _2013 = (cbSceneParam._m0[33u].x - sqrt(((_1879 * _1879) + (_1878 * _1878)) + (_1880 * _1880))) * cbSceneParam._m0[33u].y;
        float _4354 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2020 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1960 + _1943) / _1955, (_1962 + _1947) / _1955), _1965), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1962 + _1943) / _1955, (_1947 - _1960) / _1955), _1965), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1943 - _1960) / _1955, (_1947 - _1962) / _1955), _1965), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1943 - _1962) / _1955, (_1960 + _1947) / _1955), _1965), 0.0)).x), vec4(0.25)));
        _2027 = 1.0 - (_2020 * cbSceneParam._m0[34u].x);
        _2028 = 1.0 - (_2020 * cbSceneParam._m0[34u].y);
        _2029 = 1.0 - (_2020 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2027 = 1.0;
        _2028 = 1.0;
        _2029 = 1.0;
    }
    float _2093;
    float _2095;
    float _2097;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2081 = fma(_1877, cbSceneParam._m0[63u].w, fma(_1873, cbSceneParam._m0[63u].z, fma(_1869, cbSceneParam._m0[63u].y, _1865 * cbSceneParam._m0[63u].x)));
        float _2082 = fma(_1877, cbSceneParam._m0[60u].w, fma(_1873, cbSceneParam._m0[60u].z, fma(_1869, cbSceneParam._m0[60u].y, _1865 * cbSceneParam._m0[60u].x))) / _2081;
        float _2083 = fma(_1877, cbSceneParam._m0[61u].w, fma(_1873, cbSceneParam._m0[61u].z, fma(_1869, cbSceneParam._m0[61u].y, _1865 * cbSceneParam._m0[61u].x))) / _2081;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2082 >= cbSceneParam._m0[64u].x) && (_2083 >= cbSceneParam._m0[64u].y)) && (_2082 <= cbSceneParam._m0[64u].z)) && (_2083 <= cbSceneParam._m0[64u].w))
        {
            float _2221 = fma(_1877, cbSceneParam._m0[62u].w, fma(_1873, cbSceneParam._m0[62u].z, fma(_1869, cbSceneParam._m0[62u].y, _1865 * cbSceneParam._m0[62u].x))) / _2081;
            float _2225 = isnan(cbSceneParam._m0[41u].w) ? _2221 : (isnan(_2221) ? cbSceneParam._m0[41u].w : max(_2221, cbSceneParam._m0[41u].w));
            float _2268 = (cbSceneParam._m0[33u].x - sqrt(((_1879 * _1879) + (_1878 * _1878)) + (_1880 * _1880))) * cbSceneParam._m0[33u].y;
            float _4370 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
            float _2275 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2082, cbSceneParam._m0[33u].w + _2083), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2082, _2083 - cbSceneParam._m0[33u].z), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2082 - cbSceneParam._m0[33u].z, _2083 - cbSceneParam._m0[33u].w), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2082 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2083), _2225), 0.0)).x), vec4(0.25)));
            float _2279 = 1.0 - (_2275 * cbSceneParam._m0[34u].x);
            float _2280 = 1.0 - (_2275 * cbSceneParam._m0[34u].y);
            float _2281 = 1.0 - (_2275 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2281) ? _2029 : (isnan(_2029) ? _2281 : min(_2029, _2281));
            frontier_phi_37_36_ladder_1 = isnan(_2280) ? _2028 : (isnan(_2028) ? _2280 : min(_2028, _2280));
            frontier_phi_37_36_ladder_2 = isnan(_2279) ? _2027 : (isnan(_2027) ? _2279 : min(_2027, _2279));
        }
        else
        {
            frontier_phi_37_36_ladder = _2029;
            frontier_phi_37_36_ladder_1 = _2028;
            frontier_phi_37_36_ladder_2 = _2027;
        }
        _2093 = frontier_phi_37_36_ladder_2;
        _2095 = frontier_phi_37_36_ladder_1;
        _2097 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2093 = _2027;
        _2095 = _2028;
        _2097 = _2029;
    }
    uvec4 _2102 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _2104 = _2102.x * 14u;
    uint _2105 = _2104 + 13u;
    float _2112 = _775 + (-1.0);
    float _2117 = (cbLight._m0[_2105].x * _2112) + 1.0;
    float _2118 = (cbLight._m0[_2105].y * _2112) + 1.0;
    float _2119 = (cbLight._m0[_2105].z * _2112) + 1.0;
    float _2120 = (cbLight._m0[_2105].w * _2112) + 1.0;
    uint _2121 = _2104 + 5u;
    float _2127 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
    uint _2131 = _2104 + 4u;
    float _2140 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
    uint _2144 = _2104 | 1u;
    float _2155 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_612, _613, _614));
    float _2158 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_612, _613, _614));
    float _4406 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _4417 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2163 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * 0.3183098733425140380859375;
    float _2165 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * 0.3183098733425140380859375;
    float _2172 = ((cbLight._m0[_2121].x * _2127) * _2165) + (((cbLight._m0[_2131].x * _2093) * _2140) * _2163);
    float _2173 = ((_2127 * cbLight._m0[_2121].y) * _2165) + (((cbLight._m0[_2131].y * _2095) * _2140) * _2163);
    float _2174 = ((_2127 * cbLight._m0[_2121].z) * _2165) + (((cbLight._m0[_2131].z * _2097) * _2140) * _2163);
    uvec4 _2178 = floatBitsToUint(cbLight._m0[_2104 + 12u]);
    bool _2180 = _2178.x == 0u;
    float _2282;
    float _2284;
    float _2286;
    if (_2180)
    {
        _2282 = _2172;
        _2284 = _2173;
        _2286 = _2174;
    }
    else
    {
        uint _2290 = _2104 + 6u;
        float _2306 = (dot(vec3(cbLight._m0[_2104 + 2u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4428 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2309 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2282 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2172;
        _2284 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2173;
        _2286 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2174;
    }
    bool _2289 = _2178.y == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2289)
    {
        _2344 = _2282;
        _2346 = _2284;
        _2348 = _2286;
    }
    else
    {
        uint _2506 = _2104 + 7u;
        float _2522 = (dot(vec3(cbLight._m0[_2104 + 3u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2523 = _2522 * _2522;
        float _4444 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2524 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2525 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2344 = (((cbLight._m0[_2506].x * 0.3183098733425140380859375) * _2524) * _2525) + _2282;
        _2346 = (((cbLight._m0[_2506].y * 0.3183098733425140380859375) * _2524) * _2525) + _2284;
        _2348 = (((cbLight._m0[_2506].z * 0.3183098733425140380859375) * _2524) * _2525) + _2286;
    }
    uint _2351 = _2104 + 8u;
    float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _615) * 0.949999988079071044921875);
    float _2365 = _2364 * _2364;
    float _2366 = cbLight._m0[_2104].x + _692;
    float _2367 = cbLight._m0[_2104].y + _693;
    float _2368 = cbLight._m0[_2104].z + _694;
    float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
    float _2373 = _2372 * _2366;
    float _2374 = _2372 * _2367;
    float _2375 = _2372 * _2368;
    float _2376 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2104].xyz));
    float _4460 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _4471 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _2380 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2381 = dot(vec3(_612, _613, _614), vec3(_2373, _2374, _2375));
    float _4482 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2385 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2373, _2374, _2375));
    float _4493 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2389 = _2365 * _2365;
    float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
    float _2404 = (exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2405 = 1.0 - _2365;
    float _2416 = (0.5 / (((_2380 * ((_2379 * _2405) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2405) + _2365) * _2379))) * _2379;
    float _4504 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2418 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
    uint _2432 = _2104 + 9u;
    float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _615) * 0.949999988079071044921875);
    float _2444 = _2443 * _2443;
    float _2445 = cbLight._m0[_2144].x + _692;
    float _2446 = cbLight._m0[_2144].y + _693;
    float _2447 = cbLight._m0[_2144].z + _694;
    float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
    float _2452 = _2451 * _2445;
    float _2453 = _2451 * _2446;
    float _2454 = _2451 * _2447;
    float _2455 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2144].xyz));
    float _4515 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2459 = dot(vec3(_612, _613, _614), vec3(_2452, _2453, _2454));
    float _4526 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2463 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2452, _2453, _2454));
    float _4537 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2467 = _2444 * _2444;
    float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
    float _2480 = (exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2481 = 1.0 - _2444;
    float _2491 = (0.5 / (((_2380 * ((_2458 * _2481) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2481) + _2444) * _2458))) * _2458;
    float _4548 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2493 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
    float _2503 = (((_2480 * cbLight._m0[_2432].x) * _2493) * _2127) + ((((cbLight._m0[_2351].x * _2093) * _2404) * _2418) * _2140);
    float _2504 = (((_2480 * cbLight._m0[_2432].y) * _2493) * _2127) + ((((cbLight._m0[_2351].y * _2095) * _2404) * _2418) * _2140);
    float _2505 = (((_2480 * cbLight._m0[_2432].z) * _2493) * _2127) + ((((cbLight._m0[_2351].z * _2097) * _2404) * _2418) * _2140);
    float _2561;
    float _2563;
    float _2565;
    if (_2180)
    {
        _2561 = _2503;
        _2563 = _2504;
        _2565 = _2505;
    }
    else
    {
        uint _2567 = _2104 + 2u;
        uint _2571 = _2104 + 10u;
        float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2567].w)) * _615) * 0.949999988079071044921875);
        float _2586 = _2585 * _2585;
        float _2587 = cbLight._m0[_2567].x + _692;
        float _2588 = cbLight._m0[_2567].y + _693;
        float _2589 = cbLight._m0[_2567].z + _694;
        float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
        float _2594 = _2593 * _2587;
        float _2595 = _2593 * _2588;
        float _2596 = _2593 * _2589;
        float _2597 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2567].xyz));
        float _4559 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2601 = dot(vec3(_612, _613, _614), vec3(_2594, _2595, _2596));
        float _4570 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2605 = dot(vec3(cbLight._m0[_2567].xyz), vec3(_2594, _2595, _2596));
        float _4581 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2609 = _2586 * _2586;
        float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
        float _2622 = (exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2623 = 1.0 - _2586;
        float _2633 = (0.5 / (((_2380 * ((_2600 * _2623) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2623) + _2586) * _2600))) * _2600;
        float _4592 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2635 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
        float _2636 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2561 = (((_2622 * cbLight._m0[_2571].x) * _2635) * _2636) + _2503;
        _2563 = (((_2622 * cbLight._m0[_2571].y) * _2635) * _2636) + _2504;
        _2565 = (((_2622 * cbLight._m0[_2571].z) * _2635) * _2636) + _2505;
    }
    float _2667;
    float _2669;
    float _2671;
    if (_2289)
    {
        _2667 = _2561;
        _2669 = _2563;
        _2671 = _2565;
    }
    else
    {
        uint _2678 = _2104 + 3u;
        uint _2682 = _2104 + 11u;
        float _2696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2678].w)) * _615) * 0.949999988079071044921875);
        float _2697 = _2696 * _2696;
        float _2698 = cbLight._m0[_2678].x + _692;
        float _2699 = cbLight._m0[_2678].y + _693;
        float _2700 = cbLight._m0[_2678].z + _694;
        float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
        float _2705 = _2704 * _2698;
        float _2706 = _2704 * _2699;
        float _2707 = _2704 * _2700;
        float _2708 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2678].xyz));
        float _4608 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2711 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2712 = dot(vec3(_612, _613, _614), vec3(_2705, _2706, _2707));
        float _4619 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2715 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2716 = dot(vec3(cbLight._m0[_2678].xyz), vec3(_2705, _2706, _2707));
        float _4630 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2720 = _2697 * _2697;
        float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
        float _2733 = (exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2734 = 1.0 - _2697;
        float _2744 = (0.5 / (((_2380 * ((_2711 * _2734) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2734) + _2697) * _2711))) * _2711;
        float _4641 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2746 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
        float _2747 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2667 = (((_2733 * cbLight._m0[_2682].x) * _2746) * _2747) + _2561;
        _2669 = (((_2733 * cbLight._m0[_2682].y) * _2746) * _2747) + _2563;
        _2671 = (((_2733 * cbLight._m0[_2682].z) * _2746) * _2747) + _2565;
    }
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_2102.y == 0u)
    {
        uvec4 _2768 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2769 = _2768.x;
        uint _2780 = uint((float(_2768.y) * floor(float(uint(cbSceneParam._m0[85u].y * _713) / _2769))) + floor(float(uint(cbSceneParam._m0[85u].x * _712) / _2769)));
        float _2790 = (log2(_1880 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2791 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        uint _2794 = uint(isnan(14.0) ? _2791 : (isnan(_2791) ? 14.0 : min(_2791, 14.0)));
        uvec4 _2799 = texelFetch(g_lightClusterGridBuffer, int(((_2794 << 2u) + (_2780 << 6u)) >> 2u));
        uint _2800 = _2799.x;
        uint _2801 = _2768.z;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((((1u << ((_2801 >> 4u) & 15u)) + 4294967295u) & _2800) == 0u) || ((_2801 & 240u) == 0u))
        {
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
        }
        else
        {
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            uint _3039 = 0u;
            uint _3048;
            bool _3049;
            for (;;)
            {
                _3048 = texelFetch(g_lightClassification, int((((_2794 << 5u) + (_2780 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                _3049 = _3048 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3049)
                {
                    frontier_phi_71_pred = _3038;
                    frontier_phi_71_pred_1 = _3037;
                    frontier_phi_71_pred_2 = _3036;
                    frontier_phi_71_pred_3 = _3035;
                    frontier_phi_71_pred_4 = _3034;
                    frontier_phi_71_pred_5 = _3033;
                }
                else
                {
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    uint _3184;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3048;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    for (;;)
                    {
                        uint _3188 = uint(findLSB(_3184)) + (_3039 << 5u);
                        uint _3185 = (_3184 + 4294967295u) & _3184;
                        uint _3190 = _3188 * 48u;
                        vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 3u)).x));
                        uint _3210 = (_3188 * 48u) + 4u;
                        vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3210)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 3u)).x));
                        uint _3229 = (_3188 * 48u) + 8u;
                        vec3 _3240 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3229)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 2u)).x));
                        float _3244 = _3204.x - _1878;
                        float _3245 = _3204.y - _1879;
                        float _3246 = _3204.z - _1880;
                        float _3247 = dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246));
                        float _3250 = inversesqrt(_3247);
                        float _3251 = _3250 * _3244;
                        float _3252 = _3250 * _3245;
                        float _3253 = _3250 * _3246;
                        float _3254 = dot(vec3(_731, _734, _737), vec3(_3251, _3252, _3253));
                        float _3259 = 1.0 - (_3247 * _3204.w);
                        float _4667 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3260 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3261 = sqrt(_3247) * _3223.w;
                        float _3264 = 1.39999997615814208984375 / (_3261 + 1.39999997615814208984375);
                        float _3265 = _3264 * _3264;
                        float _3268 = ((1.0 - _3265) * _3254) + _3265;
                        float _3271 = _3261 * _3261;
                        float _3275 = ((isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))) * _3260) / ((_3271 * 0.699999988079071044921875) + 1.0);
                        float _3279 = (-0.0) - _1878;
                        float _3280 = (-0.0) - _1879;
                        float _3281 = (-0.0) - _1880;
                        float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                        float _3286 = _3285 * _3279;
                        float _3287 = _3285 * _3280;
                        float _3288 = _3285 * _3281;
                        float _3295 = exp2(log2(1.0 / ((_3271 * 3.5) + 5.0)) * 0.25);
                        float _3296 = 1.0 - _791;
                        float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                        float _3304 = _3303 * _3303;
                        float _3305 = _3304 * _3304;
                        float _3306 = _3286 + _3251;
                        float _3307 = _3287 + _3252;
                        float _3308 = _3288 + _3253;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3316 = dot(vec3(_731, _734, _737), vec3(_3286, _3287, _3288));
                        float _4683 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                        float _3320 = dot(vec3(_731, _734, _737), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                        float _4694 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3323 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                        float _3328 = _3264 * _3304;
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3254) + _3329;
                        float _4705 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3333 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                        float _3334 = 1.0 - _3304;
                        float _3344 = (0.5 / (((_3333 * ((_3319 * _3334) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3333 * _3334) + _3304) * _3319))) * _3333;
                        float _4716 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3355 = (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) / ((_3327 * _3327) * ((_3271 * 2.1991131305694580078125) + 3.141590118408203125))) * _3260;
                        _3108 = (_3275 * _3223.x) + _3181;
                        _3109 = (_3275 * _3223.y) + _3182;
                        _3110 = (_3275 * _3223.z) + _3183;
                        _3105 = (_3355 * _3240.x) + _3178;
                        _3106 = (_3355 * _3240.y) + _3179;
                        _3107 = (_3355 * _3240.z) + _3180;
                        if (_3185 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3185;
                        }
                    }
                    frontier_phi_71_pred = _3110;
                    frontier_phi_71_pred_1 = _3109;
                    frontier_phi_71_pred_2 = _3108;
                    frontier_phi_71_pred_3 = _3107;
                    frontier_phi_71_pred_4 = _3106;
                    frontier_phi_71_pred_5 = _3105;
                }
                _2891 = frontier_phi_71_pred;
                _2889 = frontier_phi_71_pred_1;
                _2887 = frontier_phi_71_pred_2;
                _2885 = frontier_phi_71_pred_3;
                _2883 = frontier_phi_71_pred_4;
                _2881 = frontier_phi_71_pred_5;
                uint _3040 = _3039 + 1u;
                if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3033 = _2881;
                    _3034 = _2883;
                    _3035 = _2885;
                    _3036 = _2887;
                    _3037 = _2889;
                    _3038 = _2891;
                    _3039 = _3040;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
        }
        uvec4 _2894 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2895 = _2894.z;
        uint _2897 = (_2895 >> 8u) & 15u;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        if (((4294967295u << _2897) & _2800) == 0u)
        {
            _3001 = _2880;
            _3003 = _2882;
            _3005 = _2884;
            _3007 = _2886;
            _3009 = _2888;
            _3011 = _2890;
        }
        else
        {
            float _3026 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
            float _3027 = _3026 * _1878;
            float _3028 = _3026 * _1879;
            float _3029 = _3026 * _1880;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2897 < ((_2895 >> 12u) & 15u))
            {
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3161 = _2880;
                float _3162 = _2882;
                float _3163 = _2884;
                float _3164 = _2886;
                float _3165 = _2888;
                float _3166 = _2890;
                uint _3167 = _2897;
                uint _3176;
                bool _3177;
                for (;;)
                {
                    _3176 = texelFetch(g_lightClassification, int((((_2794 << 5u) + (_2780 << 9u)) + (_3167 << 2u)) >> 2u)).x;
                    _3177 = _3176 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3177)
                    {
                        frontier_phi_82_pred = _3166;
                        frontier_phi_82_pred_1 = _3165;
                        frontier_phi_82_pred_2 = _3164;
                        frontier_phi_82_pred_3 = _3163;
                        frontier_phi_82_pred_4 = _3162;
                        frontier_phi_82_pred_5 = _3161;
                    }
                    else
                    {
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3382 = _3161;
                        float _3383 = _3162;
                        float _3384 = _3163;
                        float _3385 = _3164;
                        float _3386 = _3165;
                        float _3387 = _3166;
                        uint _3388 = _3176;
                        uint _3389;
                        vec4 _3414;
                        float _3415;
                        vec4 _3430;
                        vec3 _3442;
                        vec4 _3457;
                        vec4 _3473;
                        float _3519;
                        bool _3520;
                        for (;;)
                        {
                            uint _3399 = ((_3167 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3388));
                            _3389 = (_3388 + 4294967295u) & _3388;
                            uint _3401 = _3399 * 40u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3415 = _3414.w;
                            uint _3417 = (_3399 * 40u) + 4u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3399 * 40u) + 8u;
                            _3442 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x));
                            uint _3444 = (_3399 * 40u) + 16u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3460 = (_3399 * 40u) + 20u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3399 * 40u) + 24u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3494 = (_3399 * 40u) + 28u;
                            vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3519 = fma(_1880, _3507.z, fma(_1879, _3507.y, _3507.x * _1878)) + _3507.w;
                            _3520 = !((fma(_1880, _3488.z, fma(_1879, _3488.y, _3488.x * _1878)) + _3488.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3520)
                            {
                                float _3547 = _3414.x - _1878;
                                float _3548 = _3414.y - _1879;
                                float _3549 = _3414.z - _1880;
                                float _3550 = dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549));
                                float _3553 = inversesqrt(_3550);
                                float _3554 = _3553 * _3547;
                                float _3555 = _3553 * _3548;
                                float _3556 = _3553 * _3549;
                                float _3560 = 1.0 - (_3550 / (_3415 * _3415));
                                float _4727 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3565 = sqrt(_3550) * _3430.w;
                                float _3567 = 1.39999997615814208984375 / (_3565 + 1.39999997615814208984375);
                                float _3568 = _3567 * _3567;
                                float _3571 = ((1.0 - _3568) * dot(vec3(_3554, _3555, _3556), vec3(_731, _734, _737))) + _3568;
                                float _3574 = _3565 * _3565;
                                float _3578 = (fma(_1880, _3457.z, fma(_1879, _3457.y, _3457.x * _1878)) + _3457.w) / _3519;
                                float _3579 = (fma(_1880, _3473.z, fma(_1879, _3473.y, _3473.x * _1878)) + _3473.w) / _3519;
                                float _3583 = 1.0 - dot(vec2(_3578, _3579), vec2(_3578, _3579));
                                float _4743 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3585 = _3584 * (((isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0))) * _3561) / ((_3574 * 0.699999988079071044921875) + 1.0));
                                float _3597 = exp2(log2(1.0 / ((_3574 * 3.5) + 5.0)) * 0.25);
                                float _3598 = 1.0 - _791;
                                float _3605 = sqrt(1.0 - ((1.0 - (_3598 * _3598)) * (1.0 - (_3597 * _3597))));
                                float _3606 = _3605 * _3605;
                                float _3607 = _3606 * _3606;
                                float _3608 = _3554 - _3027;
                                float _3609 = _3555 - _3028;
                                float _3610 = _3556 - _3029;
                                float _3614 = inversesqrt(dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610)));
                                float _3618 = dot(vec3(_731, _734, _737), vec3((-0.0) - _3027, (-0.0) - _3028, (-0.0) - _3029));
                                float _4754 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3622 = dot(vec3(_731, _734, _737), vec3(_3614 * _3608, _3614 * _3609, _3614 * _3610));
                                float _4765 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3629 = ((_3625 * _3625) * (_3607 + (-1.0))) + 1.0;
                                float _3630 = _3567 * _3606;
                                float _3631 = _3630 * _3630;
                                float _3637 = ((1.0 - _3631) * dot(vec3(_731, _734, _737), vec3(_3554, _3555, _3556))) + _3631;
                                float _4776 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3639 = 1.0 - _3606;
                                float _3649 = (0.5 / (((_3638 * ((_3621 * _3639) + _3606)) + 9.9999999392252902907785028219223e-09) + (((_3638 * _3639) + _3606) * _3621))) * _3638;
                                float _4787 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3659 = (_3584 * _3561) * (((_3607 * 3.1415927410125732421875) * (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) / ((_3629 * _3629) * ((_3574 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3585 * _3430.z;
                                frontier_phi_88_pred_1 = _3585 * _3430.y;
                                frontier_phi_88_pred_2 = _3585 * _3430.x;
                                frontier_phi_88_pred_3 = _3659 * _3442.z;
                                frontier_phi_88_pred_4 = _3659 * _3442.y;
                                frontier_phi_88_pred_5 = _3659 * _3442.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3668 = frontier_phi_88_pred;
                            _3667 = frontier_phi_88_pred_1;
                            _3666 = frontier_phi_88_pred_2;
                            _3665 = frontier_phi_88_pred_3;
                            _3664 = frontier_phi_88_pred_4;
                            _3663 = frontier_phi_88_pred_5;
                            _3372 = _3666 + _3385;
                            _3373 = _3667 + _3386;
                            _3374 = _3668 + _3387;
                            _3369 = _3663 + _3382;
                            _3370 = _3664 + _3383;
                            _3371 = _3665 + _3384;
                            if (_3389 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3389;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3374;
                        frontier_phi_82_pred_1 = _3373;
                        frontier_phi_82_pred_2 = _3372;
                        frontier_phi_82_pred_3 = _3371;
                        frontier_phi_82_pred_4 = _3370;
                        frontier_phi_82_pred_5 = _3369;
                    }
                    _3012 = frontier_phi_82_pred;
                    _3010 = frontier_phi_82_pred_1;
                    _3008 = frontier_phi_82_pred_2;
                    _3006 = frontier_phi_82_pred_3;
                    _3004 = frontier_phi_82_pred_4;
                    _3002 = frontier_phi_82_pred_5;
                    uint _3168 = _3167 + 1u;
                    if (_3168 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3161 = _3002;
                        _3162 = _3004;
                        _3163 = _3006;
                        _3164 = _3008;
                        _3165 = _3010;
                        _3166 = _3012;
                        _3167 = _3168;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3008;
                frontier_phi_63_64_ladder_1 = _3012;
                frontier_phi_63_64_ladder_2 = _3010;
                frontier_phi_63_64_ladder_3 = _3006;
                frontier_phi_63_64_ladder_4 = _3004;
                frontier_phi_63_64_ladder_5 = _3002;
            }
            else
            {
                frontier_phi_63_64_ladder = _2886;
                frontier_phi_63_64_ladder_1 = _2890;
                frontier_phi_63_64_ladder_2 = _2888;
                frontier_phi_63_64_ladder_3 = _2884;
                frontier_phi_63_64_ladder_4 = _2882;
                frontier_phi_63_64_ladder_5 = _2880;
            }
            _3001 = frontier_phi_63_64_ladder_5;
            _3003 = frontier_phi_63_64_ladder_4;
            _3005 = frontier_phi_63_64_ladder_3;
            _3007 = frontier_phi_63_64_ladder;
            _3009 = frontier_phi_63_64_ladder_2;
            _3011 = frontier_phi_63_64_ladder_1;
        }
        float _3016 = isnan(1.0) ? _775 : (isnan(_775) ? 1.0 : min(_775, 1.0));
        _2813 = (_3016 * _3007) + _2344;
        _2815 = (_3016 * _3009) + _2346;
        _2817 = (_3016 * _3011) + _2348;
        _2819 = ((_3001 * 0.039999999105930328369140625) * _3016) + _2667;
        _2821 = ((_3003 * 0.039999999105930328369140625) * _3016) + _2669;
        _2823 = ((_3005 * 0.039999999105930328369140625) * _3016) + _2671;
    }
    else
    {
        _2813 = _2344;
        _2815 = _2346;
        _2817 = _2348;
        _2819 = _2667;
        _2821 = _2669;
        _2823 = _2671;
    }
    float _4803 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4814 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4825 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _2840 = ((isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2813 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _775))) + ((_2819 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1612)) * cbPerFrame._m0[3u].x);
    float _2841 = ((isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2815 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _775))) + ((_2821 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1612)) * cbPerFrame._m0[3u].x);
    float _2842 = ((isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2817 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _775))) + ((_2823 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1612)) * cbPerFrame._m0[3u].x);
    uint _2843 = _236 + 6u;
    float _2851 = _712 / cbSceneParam._m0[86u].x;
    float _2852 = _713 / cbSceneParam._m0[86u].y;
    vec4 _2866 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2851, _2852, (log2((isnan(cbSceneParam._m0[77u].w) ? _633 : (isnan(_633) ? cbSceneParam._m0[77u].w : min(_633, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2868 = _2866.x;
    float _2869 = _2866.y;
    float _2870 = _2866.z;
    float _2871 = _2866.w;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    if (_633 > cbSceneParam._m0[78u].w)
    {
        float _2905 = isnan(_633) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _633 : min(cbSceneParam._m0[80u].w, _633));
        float _2906 = _2905 / _633;
        float _2917 = _2906 * _685;
        float _2918 = _686 * _2906;
        float _2919 = (-0.0) - _2918;
        float _2921 = _2906 * _687;
        float _2923 = (cbSceneParam._m0[77u].w * _2919) / _2905;
        float _2924 = _2923 + cbSceneParam._m0[79u].w;
        float _2925 = cbSceneParam._m0[79u].w - _2918;
        float _2931 = sqrt(((_2917 * _2917) + (_2918 * _2918)) + (_2921 * _2921));
        float _2934 = (1.0 - (cbSceneParam._m0[77u].w / _2905)) * _2931;
        float _2939 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2941 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3118;
        if (abs((_2919 - _2923) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3118 = ((((_2924 > 0.0) ? exp2(_2939 * _2924) : (2.0 - exp2(_2941 * _2924))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2934;
        }
        else
        {
            float _3062 = 1.0 / cbSceneParam._m0[80u].x;
            float _3063 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : max(_2924, _2925));
            float _3064 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : min(_2924, _2925));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            float _3074 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : min(_3064, 0.0));
            _3118 = ((abs(_2931 / _2919) * cbSceneParam._m0[80u].y) * ((((_3073 - _3074) * 2.0) - ((exp2(_2939 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0)))) - exp2(_2939 * (isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))))) * _3062)) - ((exp2(_2941 * _3073) - exp2(_2941 * _3074)) * _3062))) + (_2934 * cbSceneParam._m0[80u].z);
        }
        vec4 _3120 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2851, _2852, 1.0), 0.0);
        float _3129 = exp2((_3118 * (-1.44269502162933349609375)) * (1.0 - _3120.w));
        float _3130 = log2(_3129);
        float _3146 = log2(_2871);
        _2943 = (exp2(_3146 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].x)) * _3120.x) / cbSceneParam._m0[78u].x)) + _2868;
        _2945 = (exp2(_3146 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].y)) * _3120.y) / cbSceneParam._m0[78u].y)) + _2869;
        _2947 = (exp2(_3146 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].z)) * _3120.z) / cbSceneParam._m0[78u].z)) + _2870;
        _2949 = _3129 * _2871;
    }
    else
    {
        _2943 = _2868;
        _2945 = _2869;
        _2947 = _2870;
        _2949 = _2871;
    }
    bool _3156;
    vec4 _2959;
    vec4 _2981;
    float _2983;
    float _2987;
    float _2988;
    float _2989;
    float _2990;
    bool _3000;
    for (;;)
    {
        _2959 = cbMatDynParam._m0[0u];
        float _2961 = roundEven(_2959.y);
        bool _2962 = _2961 == 3.0;
        float _2963 = log2(_2949);
        float _2970 = exp2(_2963 * cbSceneParam._m0[78u].x) * _2840;
        float _2971 = exp2(_2963 * cbSceneParam._m0[78u].y) * _2841;
        float _2972 = exp2(_2963 * cbSceneParam._m0[78u].z) * _2842;
        float _2979 = _701 + (-0.5);
        _2981 = cbMtdParam._m0[1u];
        _2983 = _2981.y * _2979;
        float _2986 = (_2961 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2987 = _2986 * (_2962 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2943)));
        _2988 = _2986 * (_2962 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2945)));
        _2989 = _2986 * (_2962 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2947)));
        _2990 = _2979 * 0.999000012874603271484375;
        _3000 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3000)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2990) < 0.5)
            {
                _3156 = true;
                break;
            }
        }
        uint _3097 = _750 + uint(_2959.w);
        if ((cbInstanceData._m0[_3097].w < 1.0) && ((cbInstanceData._m0[_3097].w + _2990) < 0.5))
        {
            _3156 = true;
            break;
        }
        if ((_2983 + 1.0) < _2981.x)
        {
            _3156 = true;
            break;
        }
        _3156 = false;
        break;
    }
    float _3360;
    if (_3156)
    {
        discard_state = true;
        _3360 = 0.0;
    }
    else
    {
        _3360 = cbInstanceData._m0[_2843].w;
    }
    SV_Target.x = _2987;
    SV_Target.y = _2988;
    SV_Target.z = _2989;
    SV_Target.w = _3360;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2843].w;
    discard_exit();
}


