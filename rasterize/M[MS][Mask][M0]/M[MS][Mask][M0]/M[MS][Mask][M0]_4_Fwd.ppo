#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1142;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3450 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3461 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3472 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _263 = _258 + 1u;
    uint _267 = _258 + 2u;
    float _276 = sqrt(((cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x));
    float _277 = _276 * TEXCOORD.z;
    float _278 = _276 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _277) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _278) + cbTextureTilingScale._m0[13u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _277) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _278) + cbTextureTilingScale._m0[5u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _419 = _417.x;
    float _431 = dot(vec4(_419, _417.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _448 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_419 - _431) * cbMtdParam._m0[24u].z) + _431) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3483 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _459 = (_314.x * cbMtdParam._m0[9u].x) * ((_449 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345);
    float _460 = (_314.y * cbMtdParam._m0[9u].y) * ((_449 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346);
    float _461 = (_314.z * cbMtdParam._m0[9u].z) * ((_449 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347);
    float _465 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _291.x) * _459;
    float _468 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _291.y) * _460;
    float _471 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _291.z) * _461;
    float _479 = (((_459 - _465) * (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) + _465) * 4.55000019073486328125;
    float _481 = (((_460 - _468) * (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0)))) + _468) * 4.55000019073486328125;
    float _483 = (((_461 - _471) * (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0)))) + _471) * 4.55000019073486328125;
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _277) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _278) + cbTextureTilingScale._m0[20u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _277) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _278) + cbTextureTilingScale._m0[4u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _540 = _538.x;
    float _541 = _538.y;
    float _542 = _538.z;
    float _551 = ((_521.z - _542) * _449) + _542;
    float _554 = ((((_521.x - _540) * _449) + _540) * 2.0) + (-1.0);
    float _555 = ((((_521.y - _541) * _449) + _541) * 2.0) + (-1.0);
    float _556 = dot(vec2(_554, _555), vec2(_554, _555));
    float _3494 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = sqrt(1.0 - (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))));
    vec4 _583 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _595 = (_554 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_496.x * 2.0) + (-1.0)))) + (((_583.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _596 = (_555 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_496.y * 2.0) + (-1.0)))) + (((_583.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _601 = (((_496.z - _551) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _551;
    float _605 = ((_583.z - _601) * cbMtdParam._m0[19u].w) + _601;
    float _607 = cbMtdParam._m0[22u].x + _583.w;
    float _610 = fma(_561, _224 * NORMAL.x, fma(_596, _231 * TANGENT.x, (_217 * _209) * _595));
    float _613 = fma(_561, _224 * NORMAL.y, fma(_596, _231 * TANGENT.y, (_217 * _210) * _595));
    float _616 = fma(_561, _224 * NORMAL.z, fma(_596, _231 * TANGENT.z, (_217 * _211) * _595));
    float _620 = inversesqrt(dot(vec3(_610, _613, _616), vec3(_610, _613, _616)));
    float _621 = _620 * _610;
    float _622 = _620 * _613;
    float _623 = _620 * _616;
    float _3505 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _624 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _3516 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3527 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3538 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3549 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _642 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _693 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _683);
    float _694 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _683);
    float _695 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _683);
    float _699 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
    float _700 = _693 * _699;
    float _701 = _694 * _699;
    float _702 = _695 * _699;
    float _708 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _709 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _727 = fma(_623, cbSceneParam._m0[5u].z, fma(_622, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _621));
    float _730 = fma(_623, cbSceneParam._m0[6u].z, fma(_622, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _621));
    float _733 = fma(_623, cbSceneParam._m0[7u].z, fma(_622, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _621));
    uint _747 = (_258 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _753 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * cbInstanceData._m0[_747].x;
    float _754 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * cbInstanceData._m0[_747].y;
    float _755 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) * cbInstanceData._m0[_747].z;
    float _3560 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _3582 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    vec4 _767 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _708, cbSceneParam._m0[86u].y * _709));
    float _771 = ((isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * TEXCOORD_5.w) * _767.x;
    float _772 = dot(vec3(_621, _622, _623), vec3(_700, _701, _702));
    float _775 = _772 * 2.0;
    float _779 = (_775 * _621) - _700;
    float _780 = (_775 * _622) - _701;
    float _781 = (_775 * _623) - _702;
    float _785 = abs(dot(vec3(_700, _701, _702), vec3(_621, _622, _623)));
    float _3593 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _787 = sqrt(_624);
    float _800 = exp2((_787 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_787 * 3.0));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1141;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _866 = fma(_840, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _832));
        float _870 = fma(_840, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _832));
        float _874 = fma(_840, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _832));
        float _899 = _832 + _621;
        float _900 = _836 + _622;
        float _901 = _840 + _623;
        float _911 = fma(_901, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _899)) - _866;
        float _912 = fma(_901, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _899)) - _870;
        float _913 = fma(_901, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _899)) - _874;
        float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
        float _930 = ((_917 * _911) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_866 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_917 * _912) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_870 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_917 * _913) / cbModelParam._m0[34u].z) + ((((((_874 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        float _969 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_935.x + (-0.5));
        float _971 = _969 * (_935.y + (-0.5));
        float _972 = _969 * (_935.z + (-0.5));
        float _979 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_942.x + (-0.5));
        float _981 = _979 * (_942.y + (-0.5));
        float _982 = _979 * (_942.z + (-0.5));
        float _989 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_949.x + (-0.5));
        float _991 = _989 * (_949.y + (-0.5));
        float _992 = _989 * (_949.z + (-0.5));
        float _999 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_956.x + (-0.5));
        float _1001 = _999 * (_956.y + (-0.5));
        float _1002 = _999 * (_956.z + (-0.5));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = _970 * 0.5;
        float _1007 = _980 * 0.5;
        float _1008 = _990 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1023 = (dot(vec3(_621, _622, _623), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1033 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3641 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1035 + 1.0))) + _1040) * _1003;
        float _1050 = _971 * 0.5;
        float _1051 = _981 * 0.5;
        float _1052 = _991 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_621, _622, _623), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3674 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1077 + 1.0))) + _1082) * _1004;
        float _1092 = _972 * 0.5;
        float _1093 = _982 * 0.5;
        float _1094 = _992 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_621, _622, _623), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3707 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1119 + 1.0))) + _1124) * _1005;
        _1141 = _972;
        _1143 = _971;
        _1144 = _970;
        _1145 = _982;
        _1146 = _981;
        _1147 = _980;
        _1148 = _992;
        _1149 = _991;
        _1150 = _990;
        _1151 = _1005;
        _1152 = _1004;
        _1153 = _1003;
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
    }
    else
    {
        _1141 = _1142;
        _1143 = _1142;
        _1144 = _1142;
        _1145 = _1142;
        _1146 = _1142;
        _1147 = _1142;
        _1148 = _1142;
        _1149 = _1142;
        _1150 = _1142;
        _1151 = _1142;
        _1152 = _1142;
        _1153 = _1142;
        _1154 = 0.0;
        _1155 = 0.0;
        _1156 = 0.0;
    }
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1181 = fma(_840, cbModelParam._m0[30u].z, fma(_836, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _832));
        float _1185 = fma(_840, cbModelParam._m0[31u].z, fma(_836, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _832));
        float _1189 = fma(_840, cbModelParam._m0[32u].z, fma(_836, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _832));
        float _1212 = _832 + _621;
        float _1213 = _836 + _622;
        float _1214 = _840 + _623;
        float _1224 = fma(_1214, cbModelParam._m0[30u].z, fma(_1213, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1212)) - _1181;
        float _1225 = fma(_1214, cbModelParam._m0[31u].z, fma(_1213, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1212)) - _1185;
        float _1226 = fma(_1214, cbModelParam._m0[32u].z, fma(_1213, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1212)) - _1189;
        float _1230 = inversesqrt(dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226)));
        float _1243 = ((_1230 * _1224) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1181 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1230 * _1225) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1185 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1230 * _1226) / cbModelParam._m0[35u].z) + ((((((_1189 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        float _1280 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1247.x + (-0.5));
        float _1282 = _1280 * (_1247.y + (-0.5));
        float _1283 = _1280 * (_1247.z + (-0.5));
        float _1290 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1254.x + (-0.5));
        float _1292 = _1290 * (_1254.y + (-0.5));
        float _1293 = _1290 * (_1254.z + (-0.5));
        float _1300 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1261.x + (-0.5));
        float _1302 = _1300 * (_1261.y + (-0.5));
        float _1303 = _1300 * (_1261.z + (-0.5));
        float _1310 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1268.x + (-0.5));
        float _1312 = _1310 * (_1268.y + (-0.5));
        float _1313 = _1310 * (_1268.z + (-0.5));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = _1281 * 0.5;
        float _1318 = _1291 * 0.5;
        float _1319 = _1301 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_621, _622, _623), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _3770 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1344 + 1.0))) + _1349) * _1314;
        float _1359 = _1282 * 0.5;
        float _1360 = _1292 * 0.5;
        float _1361 = _1302 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_621, _622, _623), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _3803 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1386 + 1.0))) + _1391) * _1315;
        float _1401 = _1283 * 0.5;
        float _1402 = _1293 * 0.5;
        float _1403 = _1303 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_621, _622, _623), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _3836 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1428 + 1.0))) + _1433) * _1316;
        _1450 = _1283;
        _1451 = _1282;
        _1452 = _1281;
        _1453 = _1293;
        _1454 = _1292;
        _1455 = _1291;
        _1456 = _1303;
        _1457 = _1302;
        _1458 = _1301;
        _1459 = _1316;
        _1460 = _1315;
        _1461 = _1314;
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
    }
    else
    {
        _1450 = _1142;
        _1451 = _1142;
        _1452 = _1142;
        _1453 = _1142;
        _1454 = _1142;
        _1455 = _1142;
        _1456 = _1142;
        _1457 = _1142;
        _1458 = _1142;
        _1459 = _1142;
        _1460 = _1142;
        _1461 = _1142;
        _1462 = 0.0;
        _1463 = 0.0;
        _1464 = 0.0;
    }
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1154)) + _1154;
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1155)) + _1155;
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1156)) + _1156;
    float _1497 = fma(_1476, cbSceneParam._m0[89u].z, fma(_1475, cbSceneParam._m0[89u].y, _1474 * cbSceneParam._m0[89u].x));
    float _1500 = fma(_1476, cbSceneParam._m0[90u].z, fma(_1475, cbSceneParam._m0[90u].y, _1474 * cbSceneParam._m0[90u].x));
    float _1503 = fma(_1476, cbSceneParam._m0[91u].z, fma(_1475, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1474));
    float _1518 = _779 * 0.5;
    float _1519 = _780 * 0.5;
    float _1520 = _781 * 0.5;
    float _1521 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1524 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1527 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1561;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1534 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1141, _1145, _1148, _1151));
        float _1538 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1143, _1146, _1149, _1152));
        float _1542 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1144, _1147, _1150, _1153));
        float _1549 = dot(vec4(cbModelParam._m0[39u]), vec4(_1518, _1519, _1520, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1549) ? 0.0 : (isnan(0.0) ? _1549 : max(0.0, _1549))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1572;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1563 = dot(vec4(cbModelParam._m0[40u]), vec4(_1518, _1519, _1520, 1.0));
        _1572 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1563) ? 0.0 : (isnan(0.0) ? _1563 : max(0.0, _1563))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1572 = 1.0;
    }
    float _1576 = (_1572 * cbModelParam._m0[1u].x) + (_1561 * (1.0 - cbModelParam._m0[1u].x));
    float _1586 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _624);
    float _1587 = isnan(_1586) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1586 : min(cbModelParam._m0[25u].z, _1586));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1636 = fma(_840, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _832)) + cbModelParam._m0[13u].w;
        float _1640 = fma(_840, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _832)) + cbModelParam._m0[14u].w;
        float _1644 = fma(_840, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _832)) + cbModelParam._m0[15u].w;
        float _1647 = fma(_781, cbModelParam._m0[13u].z, fma(_780, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779));
        float _1650 = fma(_781, cbModelParam._m0[14u].z, fma(_780, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779));
        float _1653 = fma(_781, cbModelParam._m0[15u].z, fma(_780, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779));
        float _1681;
        if (_1647 > 0.0)
        {
            _1681 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1681 = frontier_phi_14_12_ladder;
        }
        float _1883;
        if (_1650 > 0.0)
        {
            _1883 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1883 = frontier_phi_23_19_ladder;
        }
        float _2126;
        if (_1653 > 0.0)
        {
            _2126 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2126 = frontier_phi_35_30_ladder;
        }
        float _2128 = isnan(_1883) ? _1681 : (isnan(_1681) ? _1883 : min(_1681, _1883));
        float _2129 = isnan(_2126) ? _2128 : (isnan(_2128) ? _2126 : min(_2128, _2126));
        float _2133 = (_2129 * _1647) + _1636;
        float _2134 = (_2129 * _1650) + _1640;
        float _2135 = (_2129 * _1653) + _1644;
        float _2136 = _2129 * 9.9999997473787516355514526367188e-05;
        float _2138 = (-1.0) - _2136;
        float _2140 = _2136 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2135 > _2140) || ((_2135 < _2138) || ((_2134 > _2140) || ((_2134 < _2138) || ((_2133 < _2138) || (_2133 > _2140))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2259 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2135, cbModelParam._m0[9u].z, fma(_2134, cbModelParam._m0[9u].y, _2133 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2135, cbModelParam._m0[10u].z, fma(_2134, cbModelParam._m0[10u].y, _2133 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2135, cbModelParam._m0[11u].z, fma(_2134, cbModelParam._m0[11u].y, _2133 * cbModelParam._m0[11u].x))), _1587);
            frontier_phi_13_35_ladder = _2259.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2259.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2259.x * cbModelParam._m0[1u].y;
        }
        _1669 = frontier_phi_13_35_ladder_2;
        _1671 = frontier_phi_13_35_ladder_1;
        _1673 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_779, _780, _781), _1587);
        _1669 = _1657.x * cbModelParam._m0[1u].y;
        _1671 = _1657.y * cbModelParam._m0[1u].y;
        _1673 = _1657.z * cbModelParam._m0[1u].y;
    }
    float _1677 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _624);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1677 : min(cbModelParam._m0[25u].w, _1677));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1733 = fma(_840, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _832)) + cbModelParam._m0[21u].w;
        float _1737 = fma(_840, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _832)) + cbModelParam._m0[22u].w;
        float _1741 = fma(_840, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _832)) + cbModelParam._m0[23u].w;
        float _1744 = fma(_781, cbModelParam._m0[21u].z, fma(_780, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779));
        float _1747 = fma(_781, cbModelParam._m0[22u].z, fma(_780, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779));
        float _1750 = fma(_781, cbModelParam._m0[23u].z, fma(_780, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779));
        float _1888;
        if (_1744 > 0.0)
        {
            _1888 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1888 = frontier_phi_25_21_ladder;
        }
        float _2153;
        if (_1747 > 0.0)
        {
            _2153 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2153 = frontier_phi_37_32_ladder;
        }
        float _2358;
        if (_1750 > 0.0)
        {
            _2358 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2358 = frontier_phi_46_43_ladder;
        }
        float _2360 = isnan(_2153) ? _1888 : (isnan(_1888) ? _2153 : min(_1888, _2153));
        float _2361 = isnan(_2358) ? _2360 : (isnan(_2360) ? _2358 : min(_2360, _2358));
        float _2365 = (_2361 * _1744) + _1733;
        float _2366 = (_2361 * _1747) + _1737;
        float _2367 = (_2361 * _1750) + _1741;
        float _2368 = _2361 * 9.9999997473787516355514526367188e-05;
        float _2369 = (-1.0) - _2368;
        float _2371 = _2368 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2367 > _2371) || ((_2367 < _2369) || ((_2366 > _2371) || ((_2366 < _2369) || ((_2365 < _2369) || (_2365 > _2371))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2367, cbModelParam._m0[17u].z, fma(_2366, cbModelParam._m0[17u].y, _2365 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2367, cbModelParam._m0[18u].z, fma(_2366, cbModelParam._m0[18u].y, _2365 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2367, cbModelParam._m0[19u].z, fma(_2366, cbModelParam._m0[19u].y, _2365 * cbModelParam._m0[19u].x))), _1678);
            frontier_phi_22_46_ladder = _2566.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2566.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2566.x * cbModelParam._m0[1u].z;
        }
        _1769 = frontier_phi_22_46_ladder_2;
        _1771 = frontier_phi_22_46_ladder_1;
        _1773 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_779, _780, _781), _1678);
        _1769 = _1753.x * cbModelParam._m0[1u].z;
        _1771 = _1753.y * cbModelParam._m0[1u].z;
        _1773 = _1753.z * cbModelParam._m0[1u].z;
    }
    float _1785 = ((((1.0 - _800) * ((_787 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_800 * _787)) * _771;
    float _1786 = _1785 * ((cbModelParam._m0[1u].w * (_1769 - _1669)) + _1669);
    float _1787 = _1785 * ((cbModelParam._m0[1u].w * (_1771 - _1671)) + _1671);
    float _1788 = _1785 * ((cbModelParam._m0[1u].w * (_1773 - _1673)) + _1673);
    float _1791 = fma(_1788, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1794 = fma(_1788, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1797 = fma(_1788, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, _1786 * cbSceneParam._m0[91u].x));
    uvec4 _1807 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _1809 = _1807.x * 14u;
    uint _1810 = _1809 + 13u;
    float _1817 = _771 + (-1.0);
    float _1822 = (cbLight._m0[_1810].x * _1817) + 1.0;
    float _1823 = (cbLight._m0[_1810].y * _1817) + 1.0;
    float _1824 = (cbLight._m0[_1810].z * _1817) + 1.0;
    float _1825 = (cbLight._m0[_1810].w * _1817) + 1.0;
    uint _1826 = _1809 + 5u;
    float _1832 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
    uint _1836 = _1809 + 4u;
    float _1842 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1846 = _1809 | 1u;
    float _1857 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_621, _622, _623));
    float _1860 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_621, _622, _623));
    float _3972 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _3983 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1865 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * 0.3183098733425140380859375;
    float _1867 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.3183098733425140380859375;
    float _1874 = ((cbLight._m0[_1826].x * _1832) * _1867) + ((cbLight._m0[_1836].x * _1842) * _1865);
    float _1875 = ((_1832 * cbLight._m0[_1826].y) * _1867) + ((_1842 * cbLight._m0[_1836].y) * _1865);
    float _1876 = ((_1832 * cbLight._m0[_1826].z) * _1867) + ((_1842 * cbLight._m0[_1836].z) * _1865);
    uvec4 _1880 = floatBitsToUint(cbLight._m0[_1809 + 12u]);
    bool _1882 = _1880.x == 0u;
    float _1893;
    float _1895;
    float _1897;
    if (_1882)
    {
        _1893 = _1874;
        _1895 = _1875;
        _1897 = _1876;
    }
    else
    {
        uint _1901 = _1809 + 6u;
        float _1917 = (dot(vec3(cbLight._m0[_1809 + 2u].xyz), vec3(_621, _622, _623)) * 0.5) + 0.5;
        float _1918 = _1917 * _1917;
        float _3994 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1920 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _1893 = (((cbLight._m0[_1901].x * 0.3183098733425140380859375) * _1919) * _1920) + _1874;
        _1895 = (((cbLight._m0[_1901].y * 0.3183098733425140380859375) * _1919) * _1920) + _1875;
        _1897 = (((cbLight._m0[_1901].z * 0.3183098733425140380859375) * _1919) * _1920) + _1876;
    }
    bool _1900 = _1880.y == 0u;
    float _1938;
    float _1940;
    float _1942;
    if (_1900)
    {
        _1938 = _1893;
        _1940 = _1895;
        _1942 = _1897;
    }
    else
    {
        uint _2097 = _1809 + 7u;
        float _2113 = (dot(vec3(cbLight._m0[_1809 + 3u].xyz), vec3(_621, _622, _623)) * 0.5) + 0.5;
        float _2114 = _2113 * _2113;
        float _4010 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2115 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _2116 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
        _1938 = (((cbLight._m0[_2097].x * 0.3183098733425140380859375) * _2115) * _2116) + _1893;
        _1940 = (((cbLight._m0[_2097].y * 0.3183098733425140380859375) * _2115) * _2116) + _1895;
        _1942 = (((cbLight._m0[_2097].z * 0.3183098733425140380859375) * _2115) * _2116) + _1897;
    }
    uint _1945 = _1809 + 8u;
    float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1809].w)) * _624) * 0.949999988079071044921875);
    float _1959 = _1958 * _1958;
    float _1960 = cbLight._m0[_1809].x + _700;
    float _1961 = cbLight._m0[_1809].y + _701;
    float _1962 = cbLight._m0[_1809].z + _702;
    float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
    float _1967 = _1966 * _1960;
    float _1968 = _1966 * _1961;
    float _1969 = _1966 * _1962;
    float _1970 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_1809].xyz));
    float _4026 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _1974 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _1975 = dot(vec3(_621, _622, _623), vec3(_1967, _1968, _1969));
    float _4048 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _1979 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_1967, _1968, _1969));
    float _4059 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1983 = _1959 * _1959;
    float _1987 = ((_1978 * _1978) * (_1983 + (-1.0))) + 1.0;
    float _1998 = (exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1999 = 1.0 - _1959;
    float _2010 = (0.5 / (((_1974 * ((_1973 * _1999) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _1999) + _1959) * _1973))) * _1973;
    float _4070 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2012 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1983 / ((_1987 * _1987) * 3.141590118408203125));
    uint _2023 = _1809 + 9u;
    float _2034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _624) * 0.949999988079071044921875);
    float _2035 = _2034 * _2034;
    float _2036 = cbLight._m0[_1846].x + _700;
    float _2037 = cbLight._m0[_1846].y + _701;
    float _2038 = cbLight._m0[_1846].z + _702;
    float _2042 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
    float _2043 = _2042 * _2036;
    float _2044 = _2042 * _2037;
    float _2045 = _2042 * _2038;
    float _2046 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_1846].xyz));
    float _4081 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _2050 = dot(vec3(_621, _622, _623), vec3(_2043, _2044, _2045));
    float _4092 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _2054 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2043, _2044, _2045));
    float _4103 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2058 = _2035 * _2035;
    float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
    float _2071 = (exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2072 = 1.0 - _2035;
    float _2082 = (0.5 / (((_1974 * ((_2049 * _2072) + _2035)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2072) + _2035) * _2049))) * _2049;
    float _4114 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2084 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
    float _2094 = (((_2071 * cbLight._m0[_2023].x) * _2084) * _1832) + (((_1998 * cbLight._m0[_1945].x) * _2012) * _1842);
    float _2095 = (((_2071 * cbLight._m0[_2023].y) * _2084) * _1832) + (((_1998 * cbLight._m0[_1945].y) * _2012) * _1842);
    float _2096 = (((_2071 * cbLight._m0[_2023].z) * _2084) * _1832) + (((_1998 * cbLight._m0[_1945].z) * _2012) * _1842);
    float _2158;
    float _2160;
    float _2162;
    if (_1882)
    {
        _2158 = _2094;
        _2160 = _2095;
        _2162 = _2096;
    }
    else
    {
        uint _2164 = _1809 + 2u;
        uint _2168 = _1809 + 10u;
        float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _624) * 0.949999988079071044921875);
        float _2183 = _2182 * _2182;
        float _2184 = cbLight._m0[_2164].x + _700;
        float _2185 = cbLight._m0[_2164].y + _701;
        float _2186 = cbLight._m0[_2164].z + _702;
        float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
        float _2191 = _2190 * _2184;
        float _2192 = _2190 * _2185;
        float _2193 = _2190 * _2186;
        float _2194 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_2164].xyz));
        float _4125 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2198 = dot(vec3(_621, _622, _623), vec3(_2191, _2192, _2193));
        float _4136 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2202 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2191, _2192, _2193));
        float _4147 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2206 = _2183 * _2183;
        float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
        float _2219 = (exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2220 = 1.0 - _2183;
        float _2230 = (0.5 / (((_1974 * ((_2197 * _2220) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2220) + _2183) * _2197))) * _2197;
        float _4158 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2232 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
        float _2233 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _2158 = (((_2219 * cbLight._m0[_2168].x) * _2232) * _2233) + _2094;
        _2160 = (((_2219 * cbLight._m0[_2168].y) * _2232) * _2233) + _2095;
        _2162 = (((_2219 * cbLight._m0[_2168].z) * _2232) * _2233) + _2096;
    }
    float _2268;
    float _2270;
    float _2272;
    if (_1900)
    {
        _2268 = _2158;
        _2270 = _2160;
        _2272 = _2162;
    }
    else
    {
        uint _2279 = _1809 + 3u;
        uint _2283 = _1809 + 11u;
        float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _624) * 0.949999988079071044921875);
        float _2298 = _2297 * _2297;
        float _2299 = cbLight._m0[_2279].x + _700;
        float _2300 = cbLight._m0[_2279].y + _701;
        float _2301 = cbLight._m0[_2279].z + _702;
        float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
        float _2306 = _2305 * _2299;
        float _2307 = _2305 * _2300;
        float _2308 = _2305 * _2301;
        float _2309 = dot(vec3(_621, _622, _623), vec3(cbLight._m0[_2279].xyz));
        float _4174 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2313 = dot(vec3(_621, _622, _623), vec3(_2306, _2307, _2308));
        float _4185 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2317 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2306, _2307, _2308));
        float _4196 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2321 = _2298 * _2298;
        float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
        float _2334 = (exp2(log2(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2335 = 1.0 - _2298;
        float _2345 = (0.5 / (((_1974 * ((_2312 * _2335) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2335) + _2298) * _2312))) * _2312;
        float _4207 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2347 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
        float _2348 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
        _2268 = (((_2334 * cbLight._m0[_2283].x) * _2347) * _2348) + _2158;
        _2270 = (((_2334 * cbLight._m0[_2283].y) * _2347) * _2348) + _2160;
        _2272 = (((_2334 * cbLight._m0[_2283].z) * _2347) * _2348) + _2162;
    }
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    if (_1807.y == 0u)
    {
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2423;
        float _2425 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2423;
        float _2426 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2423;
        uvec4 _2438 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2439 = _2438.x;
        uint _2450 = uint((float(_2438.y) * floor(float(uint(cbSceneParam._m0[85u].y * _709) / _2439))) + floor(float(uint(cbSceneParam._m0[85u].x * _708) / _2439)));
        float _2460 = (log2(_2426 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2461 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        uint _2464 = uint(isnan(14.0) ? _2461 : (isnan(_2461) ? 14.0 : min(_2461, 14.0)));
        uvec4 _2469 = texelFetch(g_lightClusterGridBuffer, int(((_2464 << 2u) + (_2450 << 6u)) >> 2u));
        uint _2470 = _2469.x;
        uint _2471 = _2438.z;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        if (((((1u << ((_2471 >> 4u) & 15u)) + 4294967295u) & _2470) == 0u) || ((_2471 & 240u) == 0u))
        {
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
        }
        else
        {
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2582;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            uint _2722 = 0u;
            uint _2731;
            bool _2732;
            for (;;)
            {
                _2731 = texelFetch(g_lightClassification, int((((_2464 << 5u) + (_2450 << 9u)) + (_2722 << 2u)) >> 2u)).x;
                _2732 = _2731 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2732)
                {
                    frontier_phi_61_pred = _2716;
                    frontier_phi_61_pred_1 = _2721;
                    frontier_phi_61_pred_2 = _2720;
                    frontier_phi_61_pred_3 = _2719;
                    frontier_phi_61_pred_4 = _2718;
                    frontier_phi_61_pred_5 = _2717;
                }
                else
                {
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    uint _2846;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2720;
                    _2845 = _2721;
                    _2846 = _2731;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    for (;;)
                    {
                        uint _2850 = uint(findLSB(_2846)) + (_2722 << 5u);
                        uint _2847 = (_2846 + 4294967295u) & _2846;
                        uint _2852 = _2850 * 48u;
                        vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2852)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 3u)).x));
                        uint _2872 = (_2850 * 48u) + 4u;
                        vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 3u)).x));
                        uint _2891 = (_2850 * 48u) + 8u;
                        vec3 _2902 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x));
                        float _2906 = _2866.x - _2424;
                        float _2907 = _2866.y - _2425;
                        float _2908 = _2866.z - _2426;
                        float _2909 = dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908));
                        float _2912 = inversesqrt(_2909);
                        float _2913 = _2912 * _2906;
                        float _2914 = _2912 * _2907;
                        float _2915 = _2912 * _2908;
                        float _2916 = dot(vec3(_727, _730, _733), vec3(_2913, _2914, _2915));
                        float _2921 = 1.0 - (_2909 * _2866.w);
                        float _4233 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2922 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2923 = sqrt(_2909) * _2885.w;
                        float _2926 = 1.39999997615814208984375 / (_2923 + 1.39999997615814208984375);
                        float _2927 = _2926 * _2926;
                        float _2930 = ((1.0 - _2927) * _2916) + _2927;
                        float _2933 = _2923 * _2923;
                        float _2937 = ((isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0))) * _2922) / ((_2933 * 0.699999988079071044921875) + 1.0);
                        float _2941 = (-0.0) - _2424;
                        float _2942 = (-0.0) - _2425;
                        float _2943 = (-0.0) - _2426;
                        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
                        float _2948 = _2947 * _2941;
                        float _2949 = _2947 * _2942;
                        float _2950 = _2947 * _2943;
                        float _2958 = exp2(log2(1.0 / ((_2933 * 3.5) + 5.0)) * 0.25);
                        float _2959 = 1.0 - _787;
                        float _2966 = sqrt(1.0 - ((1.0 - (_2959 * _2959)) * (1.0 - (_2958 * _2958))));
                        float _2967 = _2966 * _2966;
                        float _2968 = _2967 * _2967;
                        float _2969 = _2948 + _2913;
                        float _2970 = _2949 + _2914;
                        float _2971 = _2950 + _2915;
                        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
                        float _2979 = dot(vec3(_727, _730, _733), vec3(_2948, _2949, _2950));
                        float _4249 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2982 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2983 = dot(vec3(_727, _730, _733), vec3(_2975 * _2969, _2975 * _2970, _2975 * _2971));
                        float _4260 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2986 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                        float _2990 = ((_2986 * _2986) * (_2968 + (-1.0))) + 1.0;
                        float _2991 = _2926 * _2967;
                        float _2992 = _2991 * _2991;
                        float _2995 = ((1.0 - _2992) * _2916) + _2992;
                        float _4271 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2996 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                        float _2997 = 1.0 - _2967;
                        float _3007 = (0.5 / (((_2996 * ((_2982 * _2997) + _2967)) + 9.9999999392252902907785028219223e-09) + (((_2996 * _2997) + _2967) * _2982))) * _2996;
                        float _4282 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3018 = (((_2968 * 3.1415927410125732421875) * (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) / ((_2990 * _2990) * ((_2933 * 2.1991131305694580078125) + 3.141590118408203125))) * _2922;
                        _2775 = (_2937 * _2885.x) + _2843;
                        _2776 = (_2937 * _2885.y) + _2844;
                        _2777 = (_2937 * _2885.z) + _2845;
                        _2772 = (_3018 * _2902.x) + _2840;
                        _2773 = (_3018 * _2902.y) + _2841;
                        _2774 = (_3018 * _2902.z) + _2842;
                        if (_2847 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2777;
                            _2846 = _2847;
                        }
                    }
                    frontier_phi_61_pred = _2772;
                    frontier_phi_61_pred_1 = _2777;
                    frontier_phi_61_pred_2 = _2776;
                    frontier_phi_61_pred_3 = _2775;
                    frontier_phi_61_pred_4 = _2774;
                    frontier_phi_61_pred_5 = _2773;
                }
                _2572 = frontier_phi_61_pred;
                _2582 = frontier_phi_61_pred_1;
                _2580 = frontier_phi_61_pred_2;
                _2578 = frontier_phi_61_pred_3;
                _2576 = frontier_phi_61_pred_4;
                _2574 = frontier_phi_61_pred_5;
                uint _2723 = _2722 + 1u;
                if (_2723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2716 = _2572;
                    _2717 = _2574;
                    _2718 = _2576;
                    _2719 = _2578;
                    _2720 = _2580;
                    _2721 = _2582;
                    _2722 = _2723;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
        }
        uvec4 _2585 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2586 = _2585.z;
        uint _2588 = (_2586 >> 8u) & 15u;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        if (((4294967295u << _2588) & _2470) == 0u)
        {
            _2684 = _2571;
            _2686 = _2573;
            _2688 = _2575;
            _2690 = _2577;
            _2692 = _2579;
            _2694 = _2581;
        }
        else
        {
            float _2709 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
            float _2710 = _2709 * _2424;
            float _2711 = _2709 * _2425;
            float _2712 = _2709 * _2426;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2588 < ((_2586 >> 12u) & 15u))
            {
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2823 = _2571;
                float _2824 = _2573;
                float _2825 = _2575;
                float _2826 = _2577;
                float _2827 = _2579;
                float _2828 = _2581;
                uint _2829 = _2588;
                uint _2838;
                bool _2839;
                for (;;)
                {
                    _2838 = texelFetch(g_lightClassification, int((((_2464 << 5u) + (_2450 << 9u)) + (_2829 << 2u)) >> 2u)).x;
                    _2839 = _2838 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2839)
                    {
                        frontier_phi_67_pred = _2826;
                        frontier_phi_67_pred_1 = _2827;
                        frontier_phi_67_pred_2 = _2828;
                        frontier_phi_67_pred_3 = _2825;
                        frontier_phi_67_pred_4 = _2824;
                        frontier_phi_67_pred_5 = _2823;
                    }
                    else
                    {
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3036 = _2823;
                        float _3037 = _2824;
                        float _3038 = _2825;
                        float _3039 = _2826;
                        float _3040 = _2827;
                        float _3041 = _2828;
                        uint _3042 = _2838;
                        uint _3043;
                        vec4 _3068;
                        float _3069;
                        vec4 _3084;
                        vec3 _3096;
                        vec4 _3111;
                        vec4 _3126;
                        float _3172;
                        bool _3173;
                        for (;;)
                        {
                            uint _3053 = ((_2829 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3042));
                            _3043 = (_3042 + 4294967295u) & _3042;
                            uint _3055 = _3053 * 40u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            _3069 = _3068.w;
                            uint _3071 = (_3053 * 40u) + 4u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3053 * 40u) + 8u;
                            _3096 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x));
                            uint _3098 = (_3053 * 40u) + 16u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3113 = (_3053 * 40u) + 20u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3128 = (_3053 * 40u) + 24u;
                            vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3147 = (_3053 * 40u) + 28u;
                            vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            _3172 = fma(_2426, _3160.z, fma(_2425, _3160.y, _3160.x * _2424)) + _3160.w;
                            _3173 = !((fma(_2426, _3141.z, fma(_2425, _3141.y, _3141.x * _2424)) + _3141.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3173)
                            {
                                float _3200 = _3068.x - _2424;
                                float _3201 = _3068.y - _2425;
                                float _3202 = _3068.z - _2426;
                                float _3203 = dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202));
                                float _3206 = inversesqrt(_3203);
                                float _3207 = _3206 * _3200;
                                float _3208 = _3206 * _3201;
                                float _3209 = _3206 * _3202;
                                float _3213 = 1.0 - (_3203 / (_3069 * _3069));
                                float _4293 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3218 = sqrt(_3203) * _3084.w;
                                float _3220 = 1.39999997615814208984375 / (_3218 + 1.39999997615814208984375);
                                float _3221 = _3220 * _3220;
                                float _3224 = ((1.0 - _3221) * dot(vec3(_3207, _3208, _3209), vec3(_727, _730, _733))) + _3221;
                                float _3227 = _3218 * _3218;
                                float _3231 = (fma(_2426, _3111.z, fma(_2425, _3111.y, _3111.x * _2424)) + _3111.w) / _3172;
                                float _3232 = (fma(_2426, _3126.z, fma(_2425, _3126.y, _3126.x * _2424)) + _3126.w) / _3172;
                                float _3236 = 1.0 - dot(vec2(_3231, _3232), vec2(_3231, _3232));
                                float _4309 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3237 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3238 = _3237 * (((isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))) * _3214) / ((_3227 * 0.699999988079071044921875) + 1.0));
                                float _3250 = exp2(log2(1.0 / ((_3227 * 3.5) + 5.0)) * 0.25);
                                float _3251 = 1.0 - _787;
                                float _3258 = sqrt(1.0 - ((1.0 - (_3251 * _3251)) * (1.0 - (_3250 * _3250))));
                                float _3259 = _3258 * _3258;
                                float _3260 = _3259 * _3259;
                                float _3261 = _3207 - _2710;
                                float _3262 = _3208 - _2711;
                                float _3263 = _3209 - _2712;
                                float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                                float _3271 = dot(vec3(_727, _730, _733), vec3((-0.0) - _2710, (-0.0) - _2711, (-0.0) - _2712));
                                float _4320 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3274 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                                float _3275 = dot(vec3(_727, _730, _733), vec3(_3267 * _3261, _3267 * _3262, _3267 * _3263));
                                float _4331 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3278 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3282 = ((_3278 * _3278) * (_3260 + (-1.0))) + 1.0;
                                float _3283 = _3220 * _3259;
                                float _3284 = _3283 * _3283;
                                float _3290 = ((1.0 - _3284) * dot(vec3(_727, _730, _733), vec3(_3207, _3208, _3209))) + _3284;
                                float _4342 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3291 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3292 = 1.0 - _3259;
                                float _3302 = (0.5 / (((_3291 * ((_3274 * _3292) + _3259)) + 9.9999999392252902907785028219223e-09) + (((_3291 * _3292) + _3259) * _3274))) * _3291;
                                float _4353 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3312 = (_3237 * _3214) * (((_3260 * 3.1415927410125732421875) * (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) / ((_3282 * _3282) * ((_3227 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3312 * _3096.x;
                                frontier_phi_73_pred_1 = _3312 * _3096.y;
                                frontier_phi_73_pred_2 = _3238 * _3084.z;
                                frontier_phi_73_pred_3 = _3238 * _3084.y;
                                frontier_phi_73_pred_4 = _3238 * _3084.x;
                                frontier_phi_73_pred_5 = _3312 * _3096.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3316 = frontier_phi_73_pred;
                            _3317 = frontier_phi_73_pred_1;
                            _3321 = frontier_phi_73_pred_2;
                            _3320 = frontier_phi_73_pred_3;
                            _3319 = frontier_phi_73_pred_4;
                            _3318 = frontier_phi_73_pred_5;
                            _3026 = _3319 + _3039;
                            _3027 = _3320 + _3040;
                            _3028 = _3321 + _3041;
                            _3023 = _3316 + _3036;
                            _3024 = _3317 + _3037;
                            _3025 = _3318 + _3038;
                            if (_3043 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3043;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3026;
                        frontier_phi_67_pred_1 = _3027;
                        frontier_phi_67_pred_2 = _3028;
                        frontier_phi_67_pred_3 = _3025;
                        frontier_phi_67_pred_4 = _3024;
                        frontier_phi_67_pred_5 = _3023;
                    }
                    _2691 = frontier_phi_67_pred;
                    _2693 = frontier_phi_67_pred_1;
                    _2695 = frontier_phi_67_pred_2;
                    _2689 = frontier_phi_67_pred_3;
                    _2687 = frontier_phi_67_pred_4;
                    _2685 = frontier_phi_67_pred_5;
                    uint _2830 = _2829 + 1u;
                    if (_2830 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2823 = _2685;
                        _2824 = _2687;
                        _2825 = _2689;
                        _2826 = _2691;
                        _2827 = _2693;
                        _2828 = _2695;
                        _2829 = _2830;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2693;
                frontier_phi_55_56_ladder_1 = _2695;
                frontier_phi_55_56_ladder_2 = _2691;
                frontier_phi_55_56_ladder_3 = _2689;
                frontier_phi_55_56_ladder_4 = _2687;
                frontier_phi_55_56_ladder_5 = _2685;
            }
            else
            {
                frontier_phi_55_56_ladder = _2579;
                frontier_phi_55_56_ladder_1 = _2581;
                frontier_phi_55_56_ladder_2 = _2577;
                frontier_phi_55_56_ladder_3 = _2575;
                frontier_phi_55_56_ladder_4 = _2573;
                frontier_phi_55_56_ladder_5 = _2571;
            }
            _2684 = frontier_phi_55_56_ladder_5;
            _2686 = frontier_phi_55_56_ladder_4;
            _2688 = frontier_phi_55_56_ladder_3;
            _2690 = frontier_phi_55_56_ladder_2;
            _2692 = frontier_phi_55_56_ladder;
            _2694 = frontier_phi_55_56_ladder_1;
        }
        float _2699 = isnan(1.0) ? _771 : (isnan(_771) ? 1.0 : min(_771, 1.0));
        _2483 = (_2699 * _2690) + _1938;
        _2485 = (_2699 * _2692) + _1940;
        _2487 = (_2699 * _2694) + _1942;
        _2489 = ((_2684 * 0.039999999105930328369140625) * _2699) + _2268;
        _2491 = ((_2686 * 0.039999999105930328369140625) * _2699) + _2270;
        _2493 = ((_2688 * 0.039999999105930328369140625) * _2699) + _2272;
    }
    else
    {
        _2483 = _1938;
        _2485 = _1940;
        _2487 = _1942;
        _2489 = _2268;
        _2491 = _2270;
        _2493 = _2272;
    }
    float _4369 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4380 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4391 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    uint _2513 = _258 + 6u;
    float _2521 = _708 / cbSceneParam._m0[86u].x;
    float _2522 = _709 / cbSceneParam._m0[86u].y;
    vec4 _2536 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2521, _2522, (log2((isnan(cbSceneParam._m0[77u].w) ? _642 : (isnan(_642) ? cbSceneParam._m0[77u].w : min(_642, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2538 = _2536.x;
    float _2539 = _2536.y;
    float _2540 = _2536.z;
    float _2541 = _2536.w;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    if (_642 > cbSceneParam._m0[78u].w)
    {
        float _2596 = isnan(_642) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _642 : min(cbSceneParam._m0[80u].w, _642));
        float _2597 = _2596 / _642;
        float _2608 = _2597 * _693;
        float _2609 = _694 * _2597;
        float _2610 = (-0.0) - _2609;
        float _2612 = _2597 * _695;
        float _2614 = (cbSceneParam._m0[77u].w * _2610) / _2596;
        float _2615 = _2614 + cbSceneParam._m0[79u].w;
        float _2616 = cbSceneParam._m0[79u].w - _2609;
        float _2622 = sqrt(((_2608 * _2608) + (_2609 * _2609)) + (_2612 * _2612));
        float _2625 = (1.0 - (cbSceneParam._m0[77u].w / _2596)) * _2622;
        float _2630 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2632 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2785;
        if (abs((_2610 - _2614) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2785 = ((((_2615 > 0.0) ? exp2(_2630 * _2615) : (2.0 - exp2(_2632 * _2615))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2625;
        }
        else
        {
            float _2745 = 1.0 / cbSceneParam._m0[80u].x;
            float _2746 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : max(_2615, _2616));
            float _2747 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : min(_2615, _2616));
            float _2756 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : min(_2746, 0.0));
            float _2757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : min(_2747, 0.0));
            _2785 = ((abs(_2622 / _2610) * cbSceneParam._m0[80u].y) * ((((_2756 - _2757) * 2.0) - ((exp2(_2630 * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0)))) - exp2(_2630 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0))))) * _2745)) - ((exp2(_2632 * _2756) - exp2(_2632 * _2757)) * _2745))) + (_2625 * cbSceneParam._m0[80u].z);
        }
        vec4 _2787 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2521, _2522, 1.0), 0.0);
        float _2796 = exp2((_2785 * (-1.44269502162933349609375)) * (1.0 - _2787.w));
        float _2797 = log2(_2796);
        float _2813 = log2(_2541);
        _2634 = (exp2(_2813 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2797 * cbSceneParam._m0[78u].x)) * _2787.x) / cbSceneParam._m0[78u].x)) + _2538;
        _2636 = (exp2(_2813 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2797 * cbSceneParam._m0[78u].y)) * _2787.y) / cbSceneParam._m0[78u].y)) + _2539;
        _2638 = (exp2(_2813 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2797 * cbSceneParam._m0[78u].z)) * _2787.z) / cbSceneParam._m0[78u].z)) + _2540;
        _2640 = _2796 * _2541;
    }
    else
    {
        _2634 = _2538;
        _2636 = _2539;
        _2638 = _2540;
        _2640 = _2541;
    }
    float _2652 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2653 = _2652 == 3.0;
    float _2654 = log2(_2640);
    float _2661 = exp2(_2654 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2483 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _771))) + ((_2489 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1576)) * cbPerFrame._m0[3u].x));
    float _2662 = exp2(_2654 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2485 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _771))) + ((_2491 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1576)) * cbPerFrame._m0[3u].x));
    float _2663 = exp2(_2654 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2487 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _771))) + ((_2493 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1576)) * cbPerFrame._m0[3u].x));
    float _2672 = (_2652 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2672 * (_2653 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2634)));
    SV_Target.y = _2672 * (_2653 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2636)));
    SV_Target.z = _2672 * (_2653 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2638)));
    SV_Target.w = cbInstanceData._m0[_2513].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2513].w;
}


