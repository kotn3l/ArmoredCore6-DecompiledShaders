#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1478;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3804 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3815 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3826 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _385.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[24u].z) + _434) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3837 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _459 = (_452 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _460 = (_452 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _461 = (_452 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _385.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[24u].z) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3848 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    float _538 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _532;
    float _541 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _533;
    float _544 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _534;
    float _551 = ((_532 - _538) * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) + _538;
    float _552 = ((_533 - _541) * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) + _541;
    float _553 = ((_534 - _544) * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) + _544;
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _635 = _633.x;
    float _636 = _633.y;
    float _637 = _633.z;
    float _644 = ((_616.x - _635) * _452) + _635;
    float _645 = ((_616.y - _636) * _452) + _636;
    float _646 = ((_616.z - _637) * _452) + _637;
    vec4 _658 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _671 = ((_658.z - _646) * _525) + _646;
    float _674 = ((((_658.x - _644) * _525) + _644) * 2.0) + (-1.0);
    float _675 = ((((_658.y - _645) * _525) + _645) * 2.0) + (-1.0);
    float _676 = dot(vec2(_674, _675), vec2(_674, _675));
    float _3859 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _681 = sqrt(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _711 = (_674 + ((((_591.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_699.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _712 = (_675 + ((((_591.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_699.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _715 = fma(_681, _252, fma(_712, _259, _711 * _245));
    float _718 = fma(_681, _253, fma(_712, _260, _711 * _246));
    float _721 = fma(_681, _254, fma(_712, _261, _711 * _247));
    float _725 = inversesqrt(dot(vec3(_715, _718, _721), vec3(_715, _718, _721)));
    vec4 _752 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _754 = _752.x;
    float _755 = 1.0 - _754;
    float _761 = (cbMtdParam._m0[19u].x + dot(vec4(_725 * _715, _725 * _718, _725 * _721, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_754 - _755) * cbMtdParam._m0[24u].w) + _755) * cbMtdParam._m0[21u].z);
    float _3870 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _762 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _764 = (-0.0) - cbMtdParam._m0[24u].x;
    float _766 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _766 : (isnan(_766) ? 1.0 : min(_766, 1.0));
    float _774 = _762 - ((_762 * TEXCOORD_8.x) * _767);
    float _775 = _762 - ((_762 * TEXCOORD_8.y) * _767);
    float _776 = _762 - ((_762 * TEXCOORD_8.z) * _767);
    float _783 = (_774 * ((_572.x * cbMtdParam._m0[18u].x) - _551)) + _551;
    float _784 = (_775 * ((_572.y * cbMtdParam._m0[18u].y) - _552)) + _552;
    float _785 = (_776 * ((_572.z * cbMtdParam._m0[18u].z) - _553)) + _553;
    vec4 _797 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _799 = _797.x;
    float _800 = 1.0 - _799;
    float _826 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_799 - _800) * cbMtdParam._m0[24u].y) + _800) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3891 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _827 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _835 = ((((cbMtdParam._m0[10u].x - _783) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _827) + _783;
    float _836 = ((((cbMtdParam._m0[10u].y - _784) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _827) + _784;
    float _837 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _785)) * _827) + _785;
    float _842 = (((_591.z - _671) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _671;
    float _846 = ((_699.z - _842) * cbMtdParam._m0[19u].w) + _842;
    vec4 _860 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _867 = (_860.x * 2.0) + (-1.0);
    float _868 = (_860.y * 2.0) + (-1.0);
    float _869 = dot(vec2(_867, _868), vec2(_867, _868));
    float _3902 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _877 = ((_860.z - _846) * _774) + _846;
    float _880 = ((cbMtdParam._m0[23u].y - _877) * _827) + _877;
    vec4 _901 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _907 = (_901.x * 2.0) + (-1.0);
    float _908 = (_901.y * 2.0) + (-1.0);
    float _909 = dot(vec2(_907, _908), vec2(_907, _908));
    float _3913 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _924 = ((sqrt(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) - _681) * _776) + _681;
    float _927 = (((_867 - _711) * _774) + _711) + (cbMtdParam._m0[21u].x * _711);
    float _928 = (((_868 - _712) * _775) + _712) + (cbMtdParam._m0[21u].x * _712);
    float _939 = (((_907 - _927) + (_927 * cbMtdParam._m0[22u].z)) * _827) + _927;
    float _940 = (((_908 - _928) + (_928 * cbMtdParam._m0[22u].z)) * _827) + _928;
    float _941 = (_827 * (sqrt(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) - _924)) + _924;
    float _943 = cbMtdParam._m0[22u].x + _699.w;
    float _946 = fma(_941, _252, fma(_940, _259, _939 * _245));
    float _949 = fma(_941, _253, fma(_940, _260, _939 * _246));
    float _952 = fma(_941, _254, fma(_940, _261, _939 * _247));
    float _956 = inversesqrt(dot(vec3(_946, _949, _952), vec3(_946, _949, _952)));
    float _957 = _956 * _946;
    float _958 = _956 * _949;
    float _959 = _956 * _952;
    float _3924 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _960 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _3946 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _3957 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _3968 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _978 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1029 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1019);
    float _1030 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1019);
    float _1031 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1019);
    float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
    float _1036 = _1029 * _1035;
    float _1037 = _1030 * _1035;
    float _1038 = _1031 * _1035;
    float _1044 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1045 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1063 = fma(_959, cbSceneParam._m0[5u].z, fma(_958, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _957));
    float _1066 = fma(_959, cbSceneParam._m0[6u].z, fma(_958, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _957));
    float _1069 = fma(_959, cbSceneParam._m0[7u].z, fma(_958, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _957));
    uint _1083 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1089 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * cbInstanceData._m0[_1083].x;
    float _1090 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_1083].y;
    float _1091 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * cbInstanceData._m0[_1083].z;
    float _3979 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1093 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    vec4 _1103 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1044, cbSceneParam._m0[86u].y * _1045));
    float _1107 = ((isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * TEXCOORD_5.w) * _1103.x;
    float _1108 = dot(vec3(_957, _958, _959), vec3(_1036, _1037, _1038));
    float _1111 = _1108 * 2.0;
    float _1115 = (_1111 * _957) - _1036;
    float _1116 = (_1111 * _958) - _1037;
    float _1117 = (_1111 * _959) - _1038;
    float _1121 = abs(dot(vec3(_1036, _1037, _1038), vec3(_957, _958, _959)));
    float _4012 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1123 = sqrt(_960);
    float _1136 = exp2((_1123 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1123 * 3.0));
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1477;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1202 = fma(_1176, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168));
        float _1206 = fma(_1176, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168));
        float _1210 = fma(_1176, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168));
        float _1235 = _1168 + _957;
        float _1236 = _1172 + _958;
        float _1237 = _1176 + _959;
        float _1247 = fma(_1237, cbModelParam._m0[26u].z, fma(_1236, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1235)) - _1202;
        float _1248 = fma(_1237, cbModelParam._m0[27u].z, fma(_1236, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1235)) - _1206;
        float _1249 = fma(_1237, cbModelParam._m0[28u].z, fma(_1236, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1235)) - _1210;
        float _1253 = inversesqrt(dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249)));
        float _1266 = ((_1253 * _1247) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1202 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1253 * _1248) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1206 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1253 * _1249) / cbModelParam._m0[34u].z) + ((((((_1210 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        float _1305 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1271.x + (-0.5));
        float _1307 = _1305 * (_1271.y + (-0.5));
        float _1308 = _1305 * (_1271.z + (-0.5));
        float _1315 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1278.x + (-0.5));
        float _1317 = _1315 * (_1278.y + (-0.5));
        float _1318 = _1315 * (_1278.z + (-0.5));
        float _1325 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1285.x + (-0.5));
        float _1327 = _1325 * (_1285.y + (-0.5));
        float _1328 = _1325 * (_1285.z + (-0.5));
        float _1335 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1292.x + (-0.5));
        float _1337 = _1335 * (_1292.y + (-0.5));
        float _1338 = _1335 * (_1292.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1359 = (dot(vec3(_957, _958, _959), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1369 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4060 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1371 + 1.0))) + _1376) * _1339;
        float _1386 = _1307 * 0.5;
        float _1387 = _1317 * 0.5;
        float _1388 = _1327 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_957, _958, _959), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4093 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1413 + 1.0))) + _1418) * _1340;
        float _1428 = _1308 * 0.5;
        float _1429 = _1318 * 0.5;
        float _1430 = _1328 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_957, _958, _959), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4126 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1455 + 1.0))) + _1460) * _1341;
        _1477 = _1308;
        _1479 = _1307;
        _1480 = _1306;
        _1481 = _1318;
        _1482 = _1317;
        _1483 = _1316;
        _1484 = _1328;
        _1485 = _1327;
        _1486 = _1326;
        _1487 = _1341;
        _1488 = _1340;
        _1489 = _1339;
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1478;
        _1479 = _1478;
        _1480 = _1478;
        _1481 = _1478;
        _1482 = _1478;
        _1483 = _1478;
        _1484 = _1478;
        _1485 = _1478;
        _1486 = _1478;
        _1487 = _1478;
        _1488 = _1478;
        _1489 = _1478;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1516 = fma(_1176, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168));
        float _1520 = fma(_1176, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168));
        float _1524 = fma(_1176, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168));
        float _1547 = _1168 + _957;
        float _1548 = _1172 + _958;
        float _1549 = _1176 + _959;
        float _1559 = fma(_1549, cbModelParam._m0[30u].z, fma(_1548, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1547)) - _1516;
        float _1560 = fma(_1549, cbModelParam._m0[31u].z, fma(_1548, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1547)) - _1520;
        float _1561 = fma(_1549, cbModelParam._m0[32u].z, fma(_1548, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1547)) - _1524;
        float _1565 = inversesqrt(dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561)));
        float _1578 = ((_1565 * _1559) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1516 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1579 = ((_1565 * _1560) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1520 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1580 = ((_1565 * _1561) / cbModelParam._m0[35u].z) + ((((((_1524 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        float _1615 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1582.x + (-0.5));
        float _1617 = _1615 * (_1582.y + (-0.5));
        float _1618 = _1615 * (_1582.z + (-0.5));
        float _1625 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1589.x + (-0.5));
        float _1627 = _1625 * (_1589.y + (-0.5));
        float _1628 = _1625 * (_1589.z + (-0.5));
        float _1635 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1596.x + (-0.5));
        float _1637 = _1635 * (_1596.y + (-0.5));
        float _1638 = _1635 * (_1596.z + (-0.5));
        float _1645 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1603.x + (-0.5));
        float _1647 = _1645 * (_1603.y + (-0.5));
        float _1648 = _1645 * (_1603.z + (-0.5));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = _1616 * 0.5;
        float _1653 = _1626 * 0.5;
        float _1654 = _1636 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_957, _958, _959), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4189 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1679 + 1.0))) + _1684) * _1649;
        float _1694 = _1617 * 0.5;
        float _1695 = _1627 * 0.5;
        float _1696 = _1637 * 0.5;
        float _1697 = dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696));
        float _1702 = (_1697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1697);
        float _1710 = (dot(vec3(_957, _958, _959), vec3(_1702 * _1694, _1702 * _1695, _1702 * _1696)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1719 = sqrt(((_1695 * _1695) + (_1694 * _1694)) + (_1696 * _1696)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1721 = _1720 * 2.0;
        float _1725 = (1.0 - _1720) / (_1720 + 1.0);
        float _4222 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1735 = ((((1.0 - _1726) * (_1721 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1721 + 1.0))) + _1726) * _1650;
        float _1736 = _1618 * 0.5;
        float _1737 = _1628 * 0.5;
        float _1738 = _1638 * 0.5;
        float _1739 = dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738));
        float _1744 = (_1739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1739);
        float _1752 = (dot(vec3(_957, _958, _959), vec3(_1744 * _1736, _1744 * _1737, _1744 * _1738)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1761 = sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1763 = _1762 * 2.0;
        float _1767 = (1.0 - _1762) / (_1762 + 1.0);
        float _4255 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1777 = ((((1.0 - _1768) * (_1763 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1763 + 1.0))) + _1768) * _1651;
        _1785 = _1618;
        _1786 = _1617;
        _1787 = _1616;
        _1788 = _1628;
        _1789 = _1627;
        _1790 = _1626;
        _1791 = _1638;
        _1792 = _1637;
        _1793 = _1636;
        _1794 = _1651;
        _1795 = _1650;
        _1796 = _1649;
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)));
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)));
    }
    else
    {
        _1785 = _1478;
        _1786 = _1478;
        _1787 = _1478;
        _1788 = _1478;
        _1789 = _1478;
        _1790 = _1478;
        _1791 = _1478;
        _1792 = _1478;
        _1793 = _1478;
        _1794 = _1478;
        _1795 = _1478;
        _1796 = _1478;
        _1797 = 0.0;
        _1798 = 0.0;
        _1799 = 0.0;
    }
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1490)) + _1490;
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1491)) + _1491;
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1492)) + _1492;
    float _1832 = fma(_1811, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1809 * cbSceneParam._m0[89u].x));
    float _1835 = fma(_1811, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1809 * cbSceneParam._m0[90u].x));
    float _1838 = fma(_1811, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1809));
    float _1853 = _1115 * 0.5;
    float _1854 = _1116 * 0.5;
    float _1855 = _1117 * 0.5;
    float _1856 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1859 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1862 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1896;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1869 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1477, _1481, _1484, _1487));
        float _1873 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1479, _1482, _1485, _1488));
        float _1877 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1480, _1483, _1486, _1489));
        float _1884 = dot(vec4(cbModelParam._m0[39u]), vec4(_1853, _1854, _1855, 1.0));
        _1896 = dot(vec3(isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1884) ? 0.0 : (isnan(0.0) ? _1884 : max(0.0, _1884))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1896 = 1.0;
    }
    float _1907;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1898 = dot(vec4(cbModelParam._m0[40u]), vec4(_1853, _1854, _1855, 1.0));
        _1907 = dot(vec3(isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1898) ? 0.0 : (isnan(0.0) ? _1898 : max(0.0, _1898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1907 = 1.0;
    }
    float _1911 = (_1907 * cbModelParam._m0[1u].x) + (_1896 * (1.0 - cbModelParam._m0[1u].x));
    float _1921 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _960);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1921 : min(cbModelParam._m0[25u].z, _1921));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1969 = fma(_1176, cbModelParam._m0[13u].z, fma(_1172, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1168)) + cbModelParam._m0[13u].w;
        float _1973 = fma(_1176, cbModelParam._m0[14u].z, fma(_1172, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1168)) + cbModelParam._m0[14u].w;
        float _1977 = fma(_1176, cbModelParam._m0[15u].z, fma(_1172, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1168)) + cbModelParam._m0[15u].w;
        float _1980 = fma(_1117, cbModelParam._m0[13u].z, fma(_1116, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1115));
        float _1983 = fma(_1117, cbModelParam._m0[14u].z, fma(_1116, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1115));
        float _1986 = fma(_1117, cbModelParam._m0[15u].z, fma(_1116, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1115));
        float _2014;
        if (_1980 > 0.0)
        {
            _2014 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2014 = frontier_phi_14_12_ladder;
        }
        float _2235;
        if (_1983 > 0.0)
        {
            _2235 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2235 = frontier_phi_23_19_ladder;
        }
        float _2481;
        if (_1986 > 0.0)
        {
            _2481 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2481 = frontier_phi_35_30_ladder;
        }
        float _2483 = isnan(_2235) ? _2014 : (isnan(_2014) ? _2235 : min(_2014, _2235));
        float _2484 = isnan(_2481) ? _2483 : (isnan(_2483) ? _2481 : min(_2483, _2481));
        float _2488 = (_2484 * _1980) + _1969;
        float _2489 = (_2484 * _1983) + _1973;
        float _2490 = (_2484 * _1986) + _1977;
        float _2491 = _2484 * 9.9999997473787516355514526367188e-05;
        float _2493 = (-1.0) - _2491;
        float _2495 = _2491 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2490 > _2495) || ((_2490 < _2493) || ((_2489 > _2495) || ((_2489 < _2493) || ((_2488 < _2493) || (_2488 > _2495))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2490, cbModelParam._m0[9u].z, fma(_2489, cbModelParam._m0[9u].y, _2488 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2490, cbModelParam._m0[10u].z, fma(_2489, cbModelParam._m0[10u].y, _2488 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2490, cbModelParam._m0[11u].z, fma(_2489, cbModelParam._m0[11u].y, _2488 * cbModelParam._m0[11u].x))), _1922);
            frontier_phi_13_35_ladder = _2614.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2614.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2614.x * cbModelParam._m0[1u].y;
        }
        _2002 = frontier_phi_13_35_ladder_2;
        _2004 = frontier_phi_13_35_ladder_1;
        _2006 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1990 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1115, _1116, _1117), _1922);
        _2002 = _1990.x * cbModelParam._m0[1u].y;
        _2004 = _1990.y * cbModelParam._m0[1u].y;
        _2006 = _1990.z * cbModelParam._m0[1u].y;
    }
    float _2010 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _960);
    float _2011 = isnan(_2010) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2010 : min(cbModelParam._m0[25u].w, _2010));
    float _2100;
    float _2102;
    float _2104;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2064 = fma(_1176, cbModelParam._m0[21u].z, fma(_1172, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1168)) + cbModelParam._m0[21u].w;
        float _2068 = fma(_1176, cbModelParam._m0[22u].z, fma(_1172, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1168)) + cbModelParam._m0[22u].w;
        float _2072 = fma(_1176, cbModelParam._m0[23u].z, fma(_1172, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1168)) + cbModelParam._m0[23u].w;
        float _2075 = fma(_1117, cbModelParam._m0[21u].z, fma(_1116, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1115));
        float _2078 = fma(_1117, cbModelParam._m0[22u].z, fma(_1116, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1115));
        float _2081 = fma(_1117, cbModelParam._m0[23u].z, fma(_1116, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1115));
        float _2240;
        if (_2075 > 0.0)
        {
            _2240 = abs((1.0 - _2064) / _2075);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2064 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2240 = frontier_phi_25_21_ladder;
        }
        float _2508;
        if (_2078 > 0.0)
        {
            _2508 = abs((1.0 - _2068) / _2078);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2068 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2508 = frontier_phi_37_32_ladder;
        }
        float _2713;
        if (_2081 > 0.0)
        {
            _2713 = abs((1.0 - _2072) / _2081);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2072 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2713 = frontier_phi_46_43_ladder;
        }
        float _2715 = isnan(_2508) ? _2240 : (isnan(_2240) ? _2508 : min(_2240, _2508));
        float _2716 = isnan(_2713) ? _2715 : (isnan(_2715) ? _2713 : min(_2715, _2713));
        float _2720 = (_2716 * _2075) + _2064;
        float _2721 = (_2716 * _2078) + _2068;
        float _2722 = (_2716 * _2081) + _2072;
        float _2723 = _2716 * 9.9999997473787516355514526367188e-05;
        float _2724 = (-1.0) - _2723;
        float _2726 = _2723 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2722 > _2726) || ((_2722 < _2724) || ((_2721 > _2726) || ((_2721 < _2724) || ((_2720 < _2724) || (_2720 > _2726))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2921 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2722, cbModelParam._m0[17u].z, fma(_2721, cbModelParam._m0[17u].y, _2720 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2722, cbModelParam._m0[18u].z, fma(_2721, cbModelParam._m0[18u].y, _2720 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2722, cbModelParam._m0[19u].z, fma(_2721, cbModelParam._m0[19u].y, _2720 * cbModelParam._m0[19u].x))), _2011);
            frontier_phi_22_46_ladder = _2921.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2921.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2921.x * cbModelParam._m0[1u].z;
        }
        _2100 = frontier_phi_22_46_ladder_2;
        _2102 = frontier_phi_22_46_ladder_1;
        _2104 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2084 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1115, _1116, _1117), _2011);
        _2100 = _2084.x * cbModelParam._m0[1u].z;
        _2102 = _2084.y * cbModelParam._m0[1u].z;
        _2104 = _2084.z * cbModelParam._m0[1u].z;
    }
    float _2116 = ((((1.0 - _1136) * ((_1123 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1136 * _1123)) * _1107;
    float _2117 = _2116 * ((cbModelParam._m0[1u].w * (_2100 - _2002)) + _2002);
    float _2118 = _2116 * ((cbModelParam._m0[1u].w * (_2102 - _2004)) + _2004);
    float _2119 = _2116 * ((cbModelParam._m0[1u].w * (_2104 - _2006)) + _2006);
    float _2122 = fma(_2119, cbSceneParam._m0[89u].z, fma(_2118, cbSceneParam._m0[89u].y, _2117 * cbSceneParam._m0[89u].x));
    float _2125 = fma(_2119, cbSceneParam._m0[90u].z, fma(_2118, cbSceneParam._m0[90u].y, _2117 * cbSceneParam._m0[90u].x));
    float _2128 = fma(_2119, cbSceneParam._m0[91u].z, fma(_2118, cbSceneParam._m0[91u].y, _2117 * cbSceneParam._m0[91u].x));
    vec4 _2136 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1044, _1045));
    float _2138 = _2136.w;
    float _2150 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2138);
    float _2151 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2138);
    float _2152 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2138);
    uvec4 _2156 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2158 = _2156.x * 14u;
    uint _2159 = _2158 + 13u;
    float _2166 = _1107 + (-1.0);
    float _2171 = (cbLight._m0[_2159].x * _2166) + 1.0;
    float _2172 = (cbLight._m0[_2159].y * _2166) + 1.0;
    float _2173 = (cbLight._m0[_2159].z * _2166) + 1.0;
    float _2174 = (cbLight._m0[_2159].w * _2166) + 1.0;
    uint _2175 = _2158 + 5u;
    float _2181 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
    uint _2185 = _2158 + 4u;
    float _2194 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
    uint _2198 = _2158 | 1u;
    float _2209 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_957, _958, _959));
    float _2212 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_957, _958, _959));
    float _4391 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _4402 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2217 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * 0.3183098733425140380859375;
    float _2219 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.3183098733425140380859375;
    float _2226 = ((cbLight._m0[_2175].x * _2181) * _2219) + (((cbLight._m0[_2185].x * _2150) * _2194) * _2217);
    float _2227 = ((_2181 * cbLight._m0[_2175].y) * _2219) + (((cbLight._m0[_2185].y * _2151) * _2194) * _2217);
    float _2228 = ((_2181 * cbLight._m0[_2175].z) * _2219) + (((cbLight._m0[_2185].z * _2152) * _2194) * _2217);
    uvec4 _2232 = floatBitsToUint(cbLight._m0[_2158 + 12u]);
    bool _2234 = _2232.x == 0u;
    float _2245;
    float _2247;
    float _2249;
    if (_2234)
    {
        _2245 = _2226;
        _2247 = _2227;
        _2249 = _2228;
    }
    else
    {
        uint _2253 = _2158 + 6u;
        float _2269 = (dot(vec3(cbLight._m0[_2158 + 2u].xyz), vec3(_957, _958, _959)) * 0.5) + 0.5;
        float _2270 = _2269 * _2269;
        float _4413 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2271 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2272 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2245 = (((cbLight._m0[_2253].x * 0.3183098733425140380859375) * _2271) * _2272) + _2226;
        _2247 = (((cbLight._m0[_2253].y * 0.3183098733425140380859375) * _2271) * _2272) + _2227;
        _2249 = (((cbLight._m0[_2253].z * 0.3183098733425140380859375) * _2271) * _2272) + _2228;
    }
    bool _2252 = _2232.y == 0u;
    float _2290;
    float _2292;
    float _2294;
    if (_2252)
    {
        _2290 = _2245;
        _2292 = _2247;
        _2294 = _2249;
    }
    else
    {
        uint _2452 = _2158 + 7u;
        float _2468 = (dot(vec3(cbLight._m0[_2158 + 3u].xyz), vec3(_957, _958, _959)) * 0.5) + 0.5;
        float _2469 = _2468 * _2468;
        float _4429 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2470 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2471 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2290 = (((cbLight._m0[_2452].x * 0.3183098733425140380859375) * _2470) * _2471) + _2245;
        _2292 = (((cbLight._m0[_2452].y * 0.3183098733425140380859375) * _2470) * _2471) + _2247;
        _2294 = (((cbLight._m0[_2452].z * 0.3183098733425140380859375) * _2470) * _2471) + _2249;
    }
    uint _2297 = _2158 + 8u;
    float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _960) * 0.949999988079071044921875);
    float _2311 = _2310 * _2310;
    float _2312 = cbLight._m0[_2158].x + _1036;
    float _2313 = cbLight._m0[_2158].y + _1037;
    float _2314 = cbLight._m0[_2158].z + _1038;
    float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
    float _2319 = _2318 * _2312;
    float _2320 = _2318 * _2313;
    float _2321 = _2318 * _2314;
    float _2322 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2158].xyz));
    float _4445 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _4456 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2326 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2327 = dot(vec3(_957, _958, _959), vec3(_2319, _2320, _2321));
    float _4467 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2331 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2319, _2320, _2321));
    float _4478 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2335 = _2311 * _2311;
    float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
    float _2350 = (exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2351 = 1.0 - _2311;
    float _2362 = (0.5 / (((_2326 * ((_2325 * _2351) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2351) + _2311) * _2325))) * _2325;
    float _4489 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
    uint _2378 = _2158 + 9u;
    float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _960) * 0.949999988079071044921875);
    float _2390 = _2389 * _2389;
    float _2391 = cbLight._m0[_2198].x + _1036;
    float _2392 = cbLight._m0[_2198].y + _1037;
    float _2393 = cbLight._m0[_2198].z + _1038;
    float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
    float _2398 = _2397 * _2391;
    float _2399 = _2397 * _2392;
    float _2400 = _2397 * _2393;
    float _2401 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2198].xyz));
    float _4500 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _2405 = dot(vec3(_957, _958, _959), vec3(_2398, _2399, _2400));
    float _4511 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2398, _2399, _2400));
    float _4522 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2390 * _2390;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2427 = 1.0 - _2390;
    float _2437 = (0.5 / (((_2326 * ((_2404 * _2427) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2427) + _2390) * _2404))) * _2404;
    float _4533 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2439 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    float _2449 = (((_2426 * cbLight._m0[_2378].x) * _2439) * _2181) + ((((cbLight._m0[_2297].x * _2150) * _2350) * _2364) * _2194);
    float _2450 = (((_2426 * cbLight._m0[_2378].y) * _2439) * _2181) + ((((cbLight._m0[_2297].y * _2151) * _2350) * _2364) * _2194);
    float _2451 = (((_2426 * cbLight._m0[_2378].z) * _2439) * _2181) + ((((cbLight._m0[_2297].z * _2152) * _2350) * _2364) * _2194);
    float _2513;
    float _2515;
    float _2517;
    if (_2234)
    {
        _2513 = _2449;
        _2515 = _2450;
        _2517 = _2451;
    }
    else
    {
        uint _2519 = _2158 + 2u;
        uint _2523 = _2158 + 10u;
        float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2519].w)) * _960) * 0.949999988079071044921875);
        float _2538 = _2537 * _2537;
        float _2539 = cbLight._m0[_2519].x + _1036;
        float _2540 = cbLight._m0[_2519].y + _1037;
        float _2541 = cbLight._m0[_2519].z + _1038;
        float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
        float _2546 = _2545 * _2539;
        float _2547 = _2545 * _2540;
        float _2548 = _2545 * _2541;
        float _2549 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2519].xyz));
        float _4544 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2553 = dot(vec3(_957, _958, _959), vec3(_2546, _2547, _2548));
        float _4555 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2557 = dot(vec3(cbLight._m0[_2519].xyz), vec3(_2546, _2547, _2548));
        float _4566 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2561 = _2538 * _2538;
        float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
        float _2574 = (exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2575 = 1.0 - _2538;
        float _2585 = (0.5 / (((_2326 * ((_2552 * _2575) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2575) + _2538) * _2552))) * _2552;
        float _4577 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2587 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
        float _2588 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2513 = (((_2574 * cbLight._m0[_2523].x) * _2587) * _2588) + _2449;
        _2515 = (((_2574 * cbLight._m0[_2523].y) * _2587) * _2588) + _2450;
        _2517 = (((_2574 * cbLight._m0[_2523].z) * _2587) * _2588) + _2451;
    }
    float _2623;
    float _2625;
    float _2627;
    if (_2252)
    {
        _2623 = _2513;
        _2625 = _2515;
        _2627 = _2517;
    }
    else
    {
        uint _2634 = _2158 + 3u;
        uint _2638 = _2158 + 11u;
        float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2634].w)) * _960) * 0.949999988079071044921875);
        float _2653 = _2652 * _2652;
        float _2654 = cbLight._m0[_2634].x + _1036;
        float _2655 = cbLight._m0[_2634].y + _1037;
        float _2656 = cbLight._m0[_2634].z + _1038;
        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
        float _2661 = _2660 * _2654;
        float _2662 = _2660 * _2655;
        float _2663 = _2660 * _2656;
        float _2664 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2634].xyz));
        float _4593 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2668 = dot(vec3(_957, _958, _959), vec3(_2661, _2662, _2663));
        float _4604 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2672 = dot(vec3(cbLight._m0[_2634].xyz), vec3(_2661, _2662, _2663));
        float _4615 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2676 = _2653 * _2653;
        float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
        float _2689 = (exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2690 = 1.0 - _2653;
        float _2700 = (0.5 / (((_2326 * ((_2667 * _2690) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2690) + _2653) * _2667))) * _2667;
        float _4626 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2702 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
        float _2703 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2623 = (((_2689 * cbLight._m0[_2638].x) * _2702) * _2703) + _2513;
        _2625 = (((_2689 * cbLight._m0[_2638].y) * _2702) * _2703) + _2515;
        _2627 = (((_2689 * cbLight._m0[_2638].z) * _2702) * _2703) + _2517;
    }
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_2156.y == 0u)
    {
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2778;
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2778;
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2778;
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.x;
        uint _2805 = uint((float(_2793.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1045) / _2794))) + floor(float(uint(cbSceneParam._m0[85u].x * _1044) / _2794)));
        float _2815 = (log2(_2781 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2816 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        uint _2819 = uint(isnan(14.0) ? _2816 : (isnan(_2816) ? 14.0 : min(_2816, 14.0)));
        uvec4 _2824 = texelFetch(g_lightClusterGridBuffer, int(((_2819 << 2u) + (_2805 << 6u)) >> 2u));
        uint _2825 = _2824.x;
        uint _2826 = _2793.z;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((((1u << ((_2826 >> 4u) & 15u)) + 4294967295u) & _2825) == 0u) || ((_2826 & 240u) == 0u))
        {
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
        }
        else
        {
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            uint _3076 = 0u;
            uint _3085;
            bool _3086;
            for (;;)
            {
                _3085 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3076 << 2u)) >> 2u)).x;
                _3086 = _3085 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3086)
                {
                    frontier_phi_61_pred = _3070;
                    frontier_phi_61_pred_1 = _3075;
                    frontier_phi_61_pred_2 = _3074;
                    frontier_phi_61_pred_3 = _3073;
                    frontier_phi_61_pred_4 = _3072;
                    frontier_phi_61_pred_5 = _3071;
                }
                else
                {
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    uint _3200;
                    _3194 = _3070;
                    _3195 = _3071;
                    _3196 = _3072;
                    _3197 = _3073;
                    _3198 = _3074;
                    _3199 = _3075;
                    _3200 = _3085;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    for (;;)
                    {
                        uint _3204 = uint(findLSB(_3200)) + (_3076 << 5u);
                        uint _3201 = (_3200 + 4294967295u) & _3200;
                        uint _3206 = _3204 * 48u;
                        vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3226 = (_3204 * 48u) + 4u;
                        vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 3u)).x));
                        uint _3245 = (_3204 * 48u) + 8u;
                        vec3 _3256 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x));
                        float _3260 = _3220.x - _2779;
                        float _3261 = _3220.y - _2780;
                        float _3262 = _3220.z - _2781;
                        float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                        float _3266 = inversesqrt(_3263);
                        float _3267 = _3266 * _3260;
                        float _3268 = _3266 * _3261;
                        float _3269 = _3266 * _3262;
                        float _3270 = dot(vec3(_1063, _1066, _1069), vec3(_3267, _3268, _3269));
                        float _3275 = 1.0 - (_3263 * _3220.w);
                        float _4652 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3276 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3277 = sqrt(_3263) * _3239.w;
                        float _3280 = 1.39999997615814208984375 / (_3277 + 1.39999997615814208984375);
                        float _3281 = _3280 * _3280;
                        float _3284 = ((1.0 - _3281) * _3270) + _3281;
                        float _3287 = _3277 * _3277;
                        float _3291 = ((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3276) / ((_3287 * 0.699999988079071044921875) + 1.0);
                        float _3295 = (-0.0) - _2779;
                        float _3296 = (-0.0) - _2780;
                        float _3297 = (-0.0) - _2781;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3312 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                        float _3313 = 1.0 - _1123;
                        float _3320 = sqrt(1.0 - ((1.0 - (_3313 * _3313)) * (1.0 - (_3312 * _3312))));
                        float _3321 = _3320 * _3320;
                        float _3322 = _3321 * _3321;
                        float _3323 = _3302 + _3267;
                        float _3324 = _3303 + _3268;
                        float _3325 = _3304 + _3269;
                        float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                        float _3333 = dot(vec3(_1063, _1066, _1069), vec3(_3302, _3303, _3304));
                        float _4668 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3336 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3337 = dot(vec3(_1063, _1066, _1069), vec3(_3329 * _3323, _3329 * _3324, _3329 * _3325));
                        float _4679 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3340 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3344 = ((_3340 * _3340) * (_3322 + (-1.0))) + 1.0;
                        float _3345 = _3280 * _3321;
                        float _3346 = _3345 * _3345;
                        float _3349 = ((1.0 - _3346) * _3270) + _3346;
                        float _4690 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3350 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3351 = 1.0 - _3321;
                        float _3361 = (0.5 / (((_3350 * ((_3336 * _3351) + _3321)) + 9.9999999392252902907785028219223e-09) + (((_3350 * _3351) + _3321) * _3336))) * _3350;
                        float _4701 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3372 = (((_3322 * 3.1415927410125732421875) * (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) / ((_3344 * _3344) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125))) * _3276;
                        _3129 = (_3291 * _3239.x) + _3197;
                        _3130 = (_3291 * _3239.y) + _3198;
                        _3131 = (_3291 * _3239.z) + _3199;
                        _3126 = (_3372 * _3256.x) + _3194;
                        _3127 = (_3372 * _3256.y) + _3195;
                        _3128 = (_3372 * _3256.z) + _3196;
                        if (_3201 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3194 = _3126;
                            _3195 = _3127;
                            _3196 = _3128;
                            _3197 = _3129;
                            _3198 = _3130;
                            _3199 = _3131;
                            _3200 = _3201;
                        }
                    }
                    frontier_phi_61_pred = _3126;
                    frontier_phi_61_pred_1 = _3131;
                    frontier_phi_61_pred_2 = _3130;
                    frontier_phi_61_pred_3 = _3129;
                    frontier_phi_61_pred_4 = _3128;
                    frontier_phi_61_pred_5 = _3127;
                }
                _2927 = frontier_phi_61_pred;
                _2937 = frontier_phi_61_pred_1;
                _2935 = frontier_phi_61_pred_2;
                _2933 = frontier_phi_61_pred_3;
                _2931 = frontier_phi_61_pred_4;
                _2929 = frontier_phi_61_pred_5;
                uint _3077 = _3076 + 1u;
                if (_3077 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3070 = _2927;
                    _3071 = _2929;
                    _3072 = _2931;
                    _3073 = _2933;
                    _3074 = _2935;
                    _3075 = _2937;
                    _3076 = _3077;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
        }
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.z;
        uint _2943 = (_2941 >> 8u) & 15u;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        if (((4294967295u << _2943) & _2825) == 0u)
        {
            _3038 = _2926;
            _3040 = _2928;
            _3042 = _2930;
            _3044 = _2932;
            _3046 = _2934;
            _3048 = _2936;
        }
        else
        {
            float _3063 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
            float _3064 = _3063 * _2779;
            float _3065 = _3063 * _2780;
            float _3066 = _3063 * _2781;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2943 < ((_2941 >> 12u) & 15u))
            {
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3177 = _2926;
                float _3178 = _2928;
                float _3179 = _2930;
                float _3180 = _2932;
                float _3181 = _2934;
                float _3182 = _2936;
                uint _3183 = _2943;
                uint _3192;
                bool _3193;
                for (;;)
                {
                    _3192 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3183 << 2u)) >> 2u)).x;
                    _3193 = _3192 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3193)
                    {
                        frontier_phi_67_pred = _3180;
                        frontier_phi_67_pred_1 = _3181;
                        frontier_phi_67_pred_2 = _3182;
                        frontier_phi_67_pred_3 = _3179;
                        frontier_phi_67_pred_4 = _3178;
                        frontier_phi_67_pred_5 = _3177;
                    }
                    else
                    {
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3390 = _3177;
                        float _3391 = _3178;
                        float _3392 = _3179;
                        float _3393 = _3180;
                        float _3394 = _3181;
                        float _3395 = _3182;
                        uint _3396 = _3192;
                        uint _3397;
                        vec4 _3422;
                        float _3423;
                        vec4 _3438;
                        vec3 _3450;
                        vec4 _3465;
                        vec4 _3480;
                        float _3526;
                        bool _3527;
                        for (;;)
                        {
                            uint _3407 = ((_3183 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3396));
                            _3397 = (_3396 + 4294967295u) & _3396;
                            uint _3409 = _3407 * 40u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            _3423 = _3422.w;
                            uint _3425 = (_3407 * 40u) + 4u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3407 * 40u) + 8u;
                            _3450 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x));
                            uint _3452 = (_3407 * 40u) + 16u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3407 * 40u) + 20u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3407 * 40u) + 24u;
                            vec4 _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3501 = (_3407 * 40u) + 28u;
                            vec4 _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            _3526 = fma(_2781, _3514.z, fma(_2780, _3514.y, _3514.x * _2779)) + _3514.w;
                            _3527 = !((fma(_2781, _3495.z, fma(_2780, _3495.y, _3495.x * _2779)) + _3495.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3527)
                            {
                                float _3554 = _3422.x - _2779;
                                float _3555 = _3422.y - _2780;
                                float _3556 = _3422.z - _2781;
                                float _3557 = dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556));
                                float _3560 = inversesqrt(_3557);
                                float _3561 = _3560 * _3554;
                                float _3562 = _3560 * _3555;
                                float _3563 = _3560 * _3556;
                                float _3567 = 1.0 - (_3557 / (_3423 * _3423));
                                float _4712 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3572 = sqrt(_3557) * _3438.w;
                                float _3574 = 1.39999997615814208984375 / (_3572 + 1.39999997615814208984375);
                                float _3575 = _3574 * _3574;
                                float _3578 = ((1.0 - _3575) * dot(vec3(_3561, _3562, _3563), vec3(_1063, _1066, _1069))) + _3575;
                                float _3581 = _3572 * _3572;
                                float _3585 = (fma(_2781, _3465.z, fma(_2780, _3465.y, _3465.x * _2779)) + _3465.w) / _3526;
                                float _3586 = (fma(_2781, _3480.z, fma(_2780, _3480.y, _3480.x * _2779)) + _3480.w) / _3526;
                                float _3590 = 1.0 - dot(vec2(_3585, _3586), vec2(_3585, _3586));
                                float _4728 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3591 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3592 = _3591 * (((isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0))) * _3568) / ((_3581 * 0.699999988079071044921875) + 1.0));
                                float _3604 = exp2(log2(1.0 / ((_3581 * 3.5) + 5.0)) * 0.25);
                                float _3605 = 1.0 - _1123;
                                float _3612 = sqrt(1.0 - ((1.0 - (_3605 * _3605)) * (1.0 - (_3604 * _3604))));
                                float _3613 = _3612 * _3612;
                                float _3614 = _3613 * _3613;
                                float _3615 = _3561 - _3064;
                                float _3616 = _3562 - _3065;
                                float _3617 = _3563 - _3066;
                                float _3621 = inversesqrt(dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617)));
                                float _3625 = dot(vec3(_1063, _1066, _1069), vec3((-0.0) - _3064, (-0.0) - _3065, (-0.0) - _3066));
                                float _4739 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3628 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3629 = dot(vec3(_1063, _1066, _1069), vec3(_3621 * _3615, _3621 * _3616, _3621 * _3617));
                                float _4750 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3632 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3636 = ((_3632 * _3632) * (_3614 + (-1.0))) + 1.0;
                                float _3637 = _3574 * _3613;
                                float _3638 = _3637 * _3637;
                                float _3644 = ((1.0 - _3638) * dot(vec3(_1063, _1066, _1069), vec3(_3561, _3562, _3563))) + _3638;
                                float _4761 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3646 = 1.0 - _3613;
                                float _3656 = (0.5 / (((_3645 * ((_3628 * _3646) + _3613)) + 9.9999999392252902907785028219223e-09) + (((_3645 * _3646) + _3613) * _3628))) * _3645;
                                float _4772 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3666 = (_3591 * _3568) * (((_3614 * 3.1415927410125732421875) * (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) / ((_3636 * _3636) * ((_3581 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3666 * _3450.x;
                                frontier_phi_73_pred_1 = _3666 * _3450.y;
                                frontier_phi_73_pred_2 = _3592 * _3438.z;
                                frontier_phi_73_pred_3 = _3592 * _3438.y;
                                frontier_phi_73_pred_4 = _3592 * _3438.x;
                                frontier_phi_73_pred_5 = _3666 * _3450.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3670 = frontier_phi_73_pred;
                            _3671 = frontier_phi_73_pred_1;
                            _3675 = frontier_phi_73_pred_2;
                            _3674 = frontier_phi_73_pred_3;
                            _3673 = frontier_phi_73_pred_4;
                            _3672 = frontier_phi_73_pred_5;
                            _3380 = _3673 + _3393;
                            _3381 = _3674 + _3394;
                            _3382 = _3675 + _3395;
                            _3377 = _3670 + _3390;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            if (_3397 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3397;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3380;
                        frontier_phi_67_pred_1 = _3381;
                        frontier_phi_67_pred_2 = _3382;
                        frontier_phi_67_pred_3 = _3379;
                        frontier_phi_67_pred_4 = _3378;
                        frontier_phi_67_pred_5 = _3377;
                    }
                    _3045 = frontier_phi_67_pred;
                    _3047 = frontier_phi_67_pred_1;
                    _3049 = frontier_phi_67_pred_2;
                    _3043 = frontier_phi_67_pred_3;
                    _3041 = frontier_phi_67_pred_4;
                    _3039 = frontier_phi_67_pred_5;
                    uint _3184 = _3183 + 1u;
                    if (_3184 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3177 = _3039;
                        _3178 = _3041;
                        _3179 = _3043;
                        _3180 = _3045;
                        _3181 = _3047;
                        _3182 = _3049;
                        _3183 = _3184;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3047;
                frontier_phi_55_56_ladder_1 = _3049;
                frontier_phi_55_56_ladder_2 = _3045;
                frontier_phi_55_56_ladder_3 = _3043;
                frontier_phi_55_56_ladder_4 = _3041;
                frontier_phi_55_56_ladder_5 = _3039;
            }
            else
            {
                frontier_phi_55_56_ladder = _2934;
                frontier_phi_55_56_ladder_1 = _2936;
                frontier_phi_55_56_ladder_2 = _2932;
                frontier_phi_55_56_ladder_3 = _2930;
                frontier_phi_55_56_ladder_4 = _2928;
                frontier_phi_55_56_ladder_5 = _2926;
            }
            _3038 = frontier_phi_55_56_ladder_5;
            _3040 = frontier_phi_55_56_ladder_4;
            _3042 = frontier_phi_55_56_ladder_3;
            _3044 = frontier_phi_55_56_ladder_2;
            _3046 = frontier_phi_55_56_ladder;
            _3048 = frontier_phi_55_56_ladder_1;
        }
        float _3053 = isnan(1.0) ? _1107 : (isnan(_1107) ? 1.0 : min(_1107, 1.0));
        _2838 = (_3053 * _3044) + _2290;
        _2840 = (_3053 * _3046) + _2292;
        _2842 = (_3053 * _3048) + _2294;
        _2844 = ((_3038 * 0.039999999105930328369140625) * _3053) + _2623;
        _2846 = ((_3040 * 0.039999999105930328369140625) * _3053) + _2625;
        _2848 = ((_3042 * 0.039999999105930328369140625) * _3053) + _2627;
    }
    else
    {
        _2838 = _2290;
        _2840 = _2292;
        _2842 = _2294;
        _2844 = _2623;
        _2846 = _2625;
        _2848 = _2627;
    }
    float _4788 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _4799 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _4810 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    uint _2868 = _283 + 6u;
    float _2876 = _1044 / cbSceneParam._m0[86u].x;
    float _2877 = _1045 / cbSceneParam._m0[86u].y;
    vec4 _2891 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, (log2((isnan(cbSceneParam._m0[77u].w) ? _978 : (isnan(_978) ? cbSceneParam._m0[77u].w : min(_978, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2893 = _2891.x;
    float _2894 = _2891.y;
    float _2895 = _2891.z;
    float _2896 = _2891.w;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_978 > cbSceneParam._m0[78u].w)
    {
        float _2951 = isnan(_978) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _978 : min(cbSceneParam._m0[80u].w, _978));
        float _2952 = _2951 / _978;
        float _2963 = _2952 * _1029;
        float _2964 = _1030 * _2952;
        float _2965 = (-0.0) - _2964;
        float _2966 = _2952 * _1031;
        float _2968 = (cbSceneParam._m0[77u].w * _2965) / _2951;
        float _2969 = _2968 + cbSceneParam._m0[79u].w;
        float _2970 = cbSceneParam._m0[79u].w - _2964;
        float _2976 = sqrt(((_2963 * _2963) + (_2964 * _2964)) + (_2966 * _2966));
        float _2979 = (1.0 - (cbSceneParam._m0[77u].w / _2951)) * _2976;
        float _2984 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2986 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3139;
        if (abs((_2965 - _2968) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3139 = ((((_2969 > 0.0) ? exp2(_2984 * _2969) : (2.0 - exp2(_2986 * _2969))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2979;
        }
        else
        {
            float _3099 = 1.0 / cbSceneParam._m0[80u].x;
            float _3100 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : max(_2969, _2970));
            float _3101 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : min(_2969, _2970));
            float _3110 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : min(_3100, 0.0));
            float _3111 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : min(_3101, 0.0));
            _3139 = ((abs(_2976 / _2965) * cbSceneParam._m0[80u].y) * ((((_3110 - _3111) * 2.0) - ((exp2(_2984 * (isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0)))) - exp2(_2984 * (isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0))))) * _3099)) - ((exp2(_2986 * _3110) - exp2(_2986 * _3111)) * _3099))) + (_2979 * cbSceneParam._m0[80u].z);
        }
        vec4 _3141 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, 1.0), 0.0);
        float _3150 = exp2((_3139 * (-1.44269502162933349609375)) * (1.0 - _3141.w));
        float _3151 = log2(_3150);
        float _3167 = log2(_2896);
        _2988 = (exp2(_3167 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].x)) * _3141.x) / cbSceneParam._m0[78u].x)) + _2893;
        _2990 = (exp2(_3167 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].y)) * _3141.y) / cbSceneParam._m0[78u].y)) + _2894;
        _2992 = (exp2(_3167 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].z)) * _3141.z) / cbSceneParam._m0[78u].z)) + _2895;
        _2994 = _3150 * _2896;
    }
    else
    {
        _2988 = _2893;
        _2990 = _2894;
        _2992 = _2895;
        _2994 = _2896;
    }
    float _3006 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3007 = _3006 == 3.0;
    float _3008 = log2(_2994);
    float _3015 = exp2(_3008 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2838 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1107))) + ((_2844 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1911)) * cbPerFrame._m0[3u].x));
    float _3016 = exp2(_3008 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2840 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1107))) + ((_2846 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1911)) * cbPerFrame._m0[3u].x));
    float _3017 = exp2(_3008 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2842 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1107))) + ((_2848 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1911)) * cbPerFrame._m0[3u].x));
    float _3026 = (_3006 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3026 * (_3007 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2988)));
    SV_Target.y = _3026 * (_3007 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2990)));
    SV_Target.z = _3026 * (_3007 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2992)));
    SV_Target.w = cbInstanceData._m0[_2868].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2868].w;
}


