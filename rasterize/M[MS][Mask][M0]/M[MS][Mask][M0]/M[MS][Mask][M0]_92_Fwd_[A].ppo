#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1332;
float _3689;
float _3690;
float _3691;
float _3692;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _306.x * cbMtdParam._m0[11u].x;
    float _312 = _306.y * cbMtdParam._m0[11u].y;
    float _313 = _306.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _352.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].z) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3701 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _428 = (_421 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _429 = (_421 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _430 = (_421 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _479 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _493 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _352.y) * 2.0) - ((((_469 - _479) * cbMtdParam._m0[24u].z) + _479) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3712 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _507 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _282.x) * ((_494 * ((_447.x * cbMtdParam._m0[13u].x) - _428)) + _428);
    float _510 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _282.y) * ((_494 * ((_447.y * cbMtdParam._m0[13u].y) - _429)) + _429);
    float _513 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _282.z) * ((_494 * ((_447.z * cbMtdParam._m0[13u].z) - _430)) + _430);
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    float _580 = ((_552.x - _571) * _421) + _571;
    float _581 = ((_552.y - _572) * _421) + _572;
    float _582 = ((_552.z - _573) * _421) + _573;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _607 = ((_594.z - _582) * _494) + _582;
    float _610 = ((((_594.x - _580) * _494) + _580) * 2.0) + (-1.0);
    float _612 = ((((_594.y - _581) * _494) + _581) * 2.0) + (-1.0);
    float _613 = dot(vec2(_610, _612), vec2(_610, _612));
    float _3723 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _618 = sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _644 = (((_632.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _610;
    float _645 = (((_632.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _612;
    float _648 = fma(_618, _230, fma(_645, _237, _644 * _223));
    float _651 = fma(_618, _231, fma(_645, _238, _644 * _224));
    float _654 = fma(_618, _232, fma(_645, _239, _644 * _225));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _687 = _685.x;
    float _688 = 1.0 - _687;
    float _694 = (cbMtdParam._m0[19u].x + dot(vec4(_658 * _648, _658 * _651, _658 * _654, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_687 - _688) * cbMtdParam._m0[24u].w) + _688) * cbMtdParam._m0[21u].z);
    float _3734 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _702 = (_695 * ((_532.x * cbMtdParam._m0[18u].x) - _507)) + _507;
    float _703 = (_695 * ((_532.y * cbMtdParam._m0[18u].y) - _510)) + _510;
    float _704 = (_695 * ((_532.z * cbMtdParam._m0[18u].z) - _513)) + _513;
    float _708 = (cbMtdParam._m0[19u].w * (_632.z - _607)) + _607;
    vec4 _721 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _728 = (_721.x * 2.0) + (-1.0);
    float _729 = (_721.y * 2.0) + (-1.0);
    float _730 = dot(vec2(_728, _729), vec2(_728, _729));
    float _3745 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _738 = ((_721.z - _708) * _695) + _708;
    float _748 = ((sqrt(1.0 - (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) - _618) * _695) + _618;
    float _751 = (((_728 - _644) * _695) + _644) + (cbMtdParam._m0[21u].x * _644);
    float _752 = (((_729 - _645) * _695) + _645) + (cbMtdParam._m0[21u].x * _645);
    float _756 = cbMtdParam._m0[22u].x + _632.w;
    float _759 = fma(_748, _230, fma(_752, _237, _751 * _223));
    float _762 = fma(_748, _231, fma(_752, _238, _751 * _224));
    float _765 = fma(_748, _232, fma(_752, _239, _751 * _225));
    float _769 = inversesqrt(dot(vec3(_759, _762, _765), vec3(_759, _762, _765)));
    float _770 = _769 * _759;
    float _771 = _769 * _762;
    float _772 = _769 * _765;
    float _3756 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _773 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3778 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _3789 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3800 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _791 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _842 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _832);
    float _843 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _832);
    float _844 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _832);
    float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
    float _849 = _842 * _848;
    float _850 = _843 * _848;
    float _851 = _844 * _848;
    vec4 _856 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _858 = _856.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1012 = sqrt(((_842 * _842) + (_843 * _843)) + (_844 * _844));
        float _1018 = (cbMatDynParam._m0[5u].x * _1012) + cbMatDynParam._m0[5u].y;
        float _3811 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1023 = (cbMatDynParam._m0[5u].z * _1012) + cbMatDynParam._m0[5u].w;
        float _3822 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) - _1019)) + _1019) < ((_858 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _869 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _870 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _888 = fma(_772, cbSceneParam._m0[5u].z, fma(_771, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _770));
    float _891 = fma(_772, cbSceneParam._m0[6u].z, fma(_771, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _770));
    float _894 = fma(_772, cbSceneParam._m0[7u].z, fma(_771, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _770));
    uint _907 = _242 + 9u;
    uint _908 = _907 + uint(cbMatDynParam._m0[0u].w);
    float _914 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * cbInstanceData._m0[_908].x;
    float _915 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * cbInstanceData._m0[_908].y;
    float _916 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * cbInstanceData._m0[_908].z;
    float _3833 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    vec4 _928 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _869, cbSceneParam._m0[86u].y * _870));
    float _932 = ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * TEXCOORD_5.w) * _928.x;
    float _933 = dot(vec3(_770, _771, _772), vec3(_849, _850, _851));
    float _936 = _933 * 2.0;
    float _940 = (_936 * _770) - _849;
    float _941 = (_936 * _771) - _850;
    float _942 = (_936 * _772) - _851;
    float _946 = abs(dot(vec3(_849, _850, _851), vec3(_770, _771, _772)));
    float _3866 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _948 = sqrt(_773);
    float _961 = exp2((_948 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_948 * 3.0));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1331;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1056 = fma(_1001, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993));
        float _1060 = fma(_1001, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993));
        float _1064 = fma(_1001, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993));
        float _1089 = _993 + _770;
        float _1090 = _997 + _771;
        float _1091 = _1001 + _772;
        float _1101 = fma(_1091, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089)) - _1056;
        float _1102 = fma(_1091, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089)) - _1060;
        float _1103 = fma(_1091, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089)) - _1064;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1056 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1060 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[34u].z) + ((((((_1064 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1159 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1125.x + (-0.5));
        float _1161 = _1159 * (_1125.y + (-0.5));
        float _1162 = _1159 * (_1125.z + (-0.5));
        float _1169 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1132.x + (-0.5));
        float _1171 = _1169 * (_1132.y + (-0.5));
        float _1172 = _1169 * (_1132.z + (-0.5));
        float _1179 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1139.x + (-0.5));
        float _1181 = _1179 * (_1139.y + (-0.5));
        float _1182 = _1179 * (_1139.z + (-0.5));
        float _1189 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1146.x + (-0.5));
        float _1191 = _1189 * (_1146.y + (-0.5));
        float _1192 = _1189 * (_1146.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1213 = (dot(vec3(_770, _771, _772), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1223 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3914 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1225 + 1.0))) + _1230) * _1193;
        float _1240 = _1161 * 0.5;
        float _1241 = _1171 * 0.5;
        float _1242 = _1181 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_770, _771, _772), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3947 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1267 + 1.0))) + _1272) * _1194;
        float _1282 = _1162 * 0.5;
        float _1283 = _1172 * 0.5;
        float _1284 = _1182 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_770, _771, _772), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3980 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1309 + 1.0))) + _1314) * _1195;
        _1331 = _1162;
        _1333 = _1161;
        _1334 = _1160;
        _1335 = _1172;
        _1336 = _1171;
        _1337 = _1170;
        _1338 = _1182;
        _1339 = _1181;
        _1340 = _1180;
        _1341 = _1195;
        _1342 = _1194;
        _1343 = _1193;
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1332;
        _1333 = _1332;
        _1334 = _1332;
        _1335 = _1332;
        _1336 = _1332;
        _1337 = _1332;
        _1338 = _1332;
        _1339 = _1332;
        _1340 = _1332;
        _1341 = _1332;
        _1342 = _1332;
        _1343 = _1332;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1373 = fma(_1001, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993));
        float _1377 = fma(_1001, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993));
        float _1381 = fma(_1001, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993));
        float _1404 = _993 + _770;
        float _1405 = _997 + _771;
        float _1406 = _1001 + _772;
        float _1416 = fma(_1406, cbModelParam._m0[30u].z, fma(_1405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1404)) - _1373;
        float _1417 = fma(_1406, cbModelParam._m0[31u].z, fma(_1405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1404)) - _1377;
        float _1418 = fma(_1406, cbModelParam._m0[32u].z, fma(_1405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1404)) - _1381;
        float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
        float _1435 = ((_1422 * _1416) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1373 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1422 * _1417) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1377 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1422 * _1418) / cbModelParam._m0[35u].z) + ((((((_1381 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        float _1472 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1439.x + (-0.5));
        float _1474 = _1472 * (_1439.y + (-0.5));
        float _1475 = _1472 * (_1439.z + (-0.5));
        float _1482 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1446.x + (-0.5));
        float _1484 = _1482 * (_1446.y + (-0.5));
        float _1485 = _1482 * (_1446.z + (-0.5));
        float _1492 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1453.x + (-0.5));
        float _1494 = _1492 * (_1453.y + (-0.5));
        float _1495 = _1492 * (_1453.z + (-0.5));
        float _1502 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1460.x + (-0.5));
        float _1504 = _1502 * (_1460.y + (-0.5));
        float _1505 = _1502 * (_1460.z + (-0.5));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = _1473 * 0.5;
        float _1510 = _1483 * 0.5;
        float _1511 = _1493 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_770, _771, _772), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4043 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1536 + 1.0))) + _1541) * _1506;
        float _1551 = _1474 * 0.5;
        float _1552 = _1484 * 0.5;
        float _1553 = _1494 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_770, _771, _772), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4076 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1578 + 1.0))) + _1583) * _1507;
        float _1593 = _1475 * 0.5;
        float _1594 = _1485 * 0.5;
        float _1595 = _1495 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_770, _771, _772), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4109 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1620 + 1.0))) + _1625) * _1508;
        _1642 = _1475;
        _1643 = _1474;
        _1644 = _1473;
        _1645 = _1485;
        _1646 = _1484;
        _1647 = _1483;
        _1648 = _1495;
        _1649 = _1494;
        _1650 = _1493;
        _1651 = _1508;
        _1652 = _1507;
        _1653 = _1506;
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
    }
    else
    {
        _1642 = _1332;
        _1643 = _1332;
        _1644 = _1332;
        _1645 = _1332;
        _1646 = _1332;
        _1647 = _1332;
        _1648 = _1332;
        _1649 = _1332;
        _1650 = _1332;
        _1651 = _1332;
        _1652 = _1332;
        _1653 = _1332;
        _1654 = 0.0;
        _1655 = 0.0;
        _1656 = 0.0;
    }
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1344)) + _1344;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1345)) + _1345;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1346)) + _1346;
    float _1689 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1666));
    float _1710 = _940 * 0.5;
    float _1711 = _941 * 0.5;
    float _1712 = _942 * 0.5;
    float _1713 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1716 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1719 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1753;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1726 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1331, _1335, _1338, _1341));
        float _1730 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1734 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1741 = dot(vec4(cbModelParam._m0[39u]), vec4(_1710, _1711, _1712, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1764;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1755 = dot(vec4(cbModelParam._m0[40u]), vec4(_1710, _1711, _1712, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1768 = (_1764 * cbModelParam._m0[1u].x) + (_1753 * (1.0 - cbModelParam._m0[1u].x));
    float _1778 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _773);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1778 : min(cbModelParam._m0[25u].z, _1778));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1826 = fma(_1001, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993)) + cbModelParam._m0[13u].w;
        float _1830 = fma(_1001, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993)) + cbModelParam._m0[14u].w;
        float _1834 = fma(_1001, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993)) + cbModelParam._m0[15u].w;
        float _1837 = fma(_942, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940));
        float _1840 = fma(_942, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940));
        float _1843 = fma(_942, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940));
        float _1871;
        if (_1837 > 0.0)
        {
            _1871 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1871 = frontier_phi_17_15_ladder;
        }
        float _2071;
        if (_1840 > 0.0)
        {
            _2071 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2071 = frontier_phi_26_22_ladder;
        }
        float _2314;
        if (_1843 > 0.0)
        {
            _2314 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2314 = frontier_phi_38_33_ladder;
        }
        float _2316 = isnan(_2071) ? _1871 : (isnan(_1871) ? _2071 : min(_1871, _2071));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1837) + _1826;
        float _2322 = (_2317 * _1840) + _1830;
        float _2323 = (_2317 * _1843) + _1834;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2324;
        float _2328 = _2324 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 > _2328) || ((_2322 < _2326) || ((_2321 < _2326) || (_2321 > _2328))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2323, cbModelParam._m0[9u].z, fma(_2322, cbModelParam._m0[9u].y, _2321 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2323, cbModelParam._m0[10u].z, fma(_2322, cbModelParam._m0[10u].y, _2321 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2323, cbModelParam._m0[11u].z, fma(_2322, cbModelParam._m0[11u].y, _2321 * cbModelParam._m0[11u].x))), _1779);
            frontier_phi_16_38_ladder = _2447.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2447.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2447.x * cbModelParam._m0[1u].y;
        }
        _1859 = frontier_phi_16_38_ladder_2;
        _1861 = frontier_phi_16_38_ladder_1;
        _1863 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_940, _941, _942), _1779);
        _1859 = _1847.x * cbModelParam._m0[1u].y;
        _1861 = _1847.y * cbModelParam._m0[1u].y;
        _1863 = _1847.z * cbModelParam._m0[1u].y;
    }
    float _1867 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _773);
    float _1868 = isnan(_1867) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1867 : min(cbModelParam._m0[25u].w, _1867));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1921 = fma(_1001, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993)) + cbModelParam._m0[21u].w;
        float _1925 = fma(_1001, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993)) + cbModelParam._m0[22u].w;
        float _1929 = fma(_1001, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993)) + cbModelParam._m0[23u].w;
        float _1932 = fma(_942, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940));
        float _1935 = fma(_942, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940));
        float _1938 = fma(_942, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940));
        float _2076;
        if (_1932 > 0.0)
        {
            _2076 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2076 = frontier_phi_28_24_ladder;
        }
        float _2341;
        if (_1935 > 0.0)
        {
            _2341 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2341 = frontier_phi_40_35_ladder;
        }
        float _2546;
        if (_1938 > 0.0)
        {
            _2546 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2546 = frontier_phi_49_46_ladder;
        }
        float _2548 = isnan(_2341) ? _2076 : (isnan(_2076) ? _2341 : min(_2076, _2341));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _1932) + _1921;
        float _2554 = (_2549 * _1935) + _1925;
        float _2555 = (_2549 * _1938) + _1929;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2556;
        float _2559 = _2556 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2555 > _2559) || ((_2555 < _2557) || ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 < _2557) || (_2553 > _2559))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2754 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2555, cbModelParam._m0[17u].z, fma(_2554, cbModelParam._m0[17u].y, _2553 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2555, cbModelParam._m0[18u].z, fma(_2554, cbModelParam._m0[18u].y, _2553 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2555, cbModelParam._m0[19u].z, fma(_2554, cbModelParam._m0[19u].y, _2553 * cbModelParam._m0[19u].x))), _1868);
            frontier_phi_25_49_ladder = _2754.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2754.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2754.x * cbModelParam._m0[1u].z;
        }
        _1957 = frontier_phi_25_49_ladder_2;
        _1959 = frontier_phi_25_49_ladder_1;
        _1961 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_940, _941, _942), _1868);
        _1957 = _1941.x * cbModelParam._m0[1u].z;
        _1959 = _1941.y * cbModelParam._m0[1u].z;
        _1961 = _1941.z * cbModelParam._m0[1u].z;
    }
    float _1973 = ((((1.0 - _961) * ((_948 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_961 * _948)) * _932;
    float _1974 = _1973 * ((cbModelParam._m0[1u].w * (_1957 - _1859)) + _1859);
    float _1975 = _1973 * ((cbModelParam._m0[1u].w * (_1959 - _1861)) + _1861);
    float _1976 = _1973 * ((cbModelParam._m0[1u].w * (_1961 - _1863)) + _1863);
    float _1979 = fma(_1976, cbSceneParam._m0[89u].z, fma(_1975, cbSceneParam._m0[89u].y, _1974 * cbSceneParam._m0[89u].x));
    float _1982 = fma(_1976, cbSceneParam._m0[90u].z, fma(_1975, cbSceneParam._m0[90u].y, _1974 * cbSceneParam._m0[90u].x));
    float _1985 = fma(_1976, cbSceneParam._m0[91u].z, fma(_1975, cbSceneParam._m0[91u].y, _1974 * cbSceneParam._m0[91u].x));
    uvec4 _1995 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1997 = _1995.x * 14u;
    uint _1998 = _1997 + 13u;
    float _2005 = _932 + (-1.0);
    float _2010 = (cbLight._m0[_1998].x * _2005) + 1.0;
    float _2011 = (cbLight._m0[_1998].y * _2005) + 1.0;
    float _2012 = (cbLight._m0[_1998].z * _2005) + 1.0;
    float _2013 = (cbLight._m0[_1998].w * _2005) + 1.0;
    uint _2014 = _1997 + 5u;
    float _2020 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
    uint _2024 = _1997 + 4u;
    float _2030 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2034 = _1997 | 1u;
    float _2045 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_770, _771, _772));
    float _2048 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_770, _771, _772));
    float _4245 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _4256 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2053 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.3183098733425140380859375;
    float _2055 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.3183098733425140380859375;
    float _2062 = ((cbLight._m0[_2014].x * _2020) * _2055) + ((cbLight._m0[_2024].x * _2030) * _2053);
    float _2063 = ((_2020 * cbLight._m0[_2014].y) * _2055) + ((_2030 * cbLight._m0[_2024].y) * _2053);
    float _2064 = ((_2020 * cbLight._m0[_2014].z) * _2055) + ((_2030 * cbLight._m0[_2024].z) * _2053);
    uvec4 _2068 = floatBitsToUint(cbLight._m0[_1997 + 12u]);
    bool _2070 = _2068.x == 0u;
    float _2081;
    float _2083;
    float _2085;
    if (_2070)
    {
        _2081 = _2062;
        _2083 = _2063;
        _2085 = _2064;
    }
    else
    {
        uint _2089 = _1997 + 6u;
        float _2105 = (dot(vec3(cbLight._m0[_1997 + 2u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2106 = _2105 * _2105;
        float _4267 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2107 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2108 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2081 = (((cbLight._m0[_2089].x * 0.3183098733425140380859375) * _2107) * _2108) + _2062;
        _2083 = (((cbLight._m0[_2089].y * 0.3183098733425140380859375) * _2107) * _2108) + _2063;
        _2085 = (((cbLight._m0[_2089].z * 0.3183098733425140380859375) * _2107) * _2108) + _2064;
    }
    bool _2088 = _2068.y == 0u;
    float _2126;
    float _2128;
    float _2130;
    if (_2088)
    {
        _2126 = _2081;
        _2128 = _2083;
        _2130 = _2085;
    }
    else
    {
        uint _2285 = _1997 + 7u;
        float _2301 = (dot(vec3(cbLight._m0[_1997 + 3u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4283 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2304 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2126 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2081;
        _2128 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2083;
        _2130 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2085;
    }
    uint _2133 = _1997 + 8u;
    float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _773) * 0.949999988079071044921875);
    float _2147 = _2146 * _2146;
    float _2148 = cbLight._m0[_1997].x + _849;
    float _2149 = cbLight._m0[_1997].y + _850;
    float _2150 = cbLight._m0[_1997].z + _851;
    float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
    float _2155 = _2154 * _2148;
    float _2156 = _2154 * _2149;
    float _2157 = _2154 * _2150;
    float _2158 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_1997].xyz));
    float _4299 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _4310 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _2162 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2163 = dot(vec3(_770, _771, _772), vec3(_2155, _2156, _2157));
    float _4321 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2167 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2155, _2156, _2157));
    float _4332 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2171 = _2147 * _2147;
    float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
    float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2187 = 1.0 - _2147;
    float _2198 = (0.5 / (((_2162 * ((_2161 * _2187) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2187) + _2147) * _2161))) * _2161;
    float _4343 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2200 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
    uint _2211 = _1997 + 9u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _773) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_2034].x + _849;
    float _2225 = cbLight._m0[_2034].y + _850;
    float _2226 = cbLight._m0[_2034].z + _851;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2034].xyz));
    float _4354 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2238 = dot(vec3(_770, _771, _772), vec3(_2231, _2232, _2233));
    float _4365 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2242 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2231, _2232, _2233));
    float _4376 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2246 = _2223 * _2223;
    float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
    float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2260 = 1.0 - _2223;
    float _2270 = (0.5 / (((_2162 * ((_2237 * _2260) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2260) + _2223) * _2237))) * _2237;
    float _4387 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
    float _2282 = (((_2259 * cbLight._m0[_2211].x) * _2272) * _2020) + (((_2186 * cbLight._m0[_2133].x) * _2200) * _2030);
    float _2283 = (((_2259 * cbLight._m0[_2211].y) * _2272) * _2020) + (((_2186 * cbLight._m0[_2133].y) * _2200) * _2030);
    float _2284 = (((_2259 * cbLight._m0[_2211].z) * _2272) * _2020) + (((_2186 * cbLight._m0[_2133].z) * _2200) * _2030);
    float _2346;
    float _2348;
    float _2350;
    if (_2070)
    {
        _2346 = _2282;
        _2348 = _2283;
        _2350 = _2284;
    }
    else
    {
        uint _2352 = _1997 + 2u;
        uint _2356 = _1997 + 10u;
        float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _773) * 0.949999988079071044921875);
        float _2371 = _2370 * _2370;
        float _2372 = cbLight._m0[_2352].x + _849;
        float _2373 = cbLight._m0[_2352].y + _850;
        float _2374 = cbLight._m0[_2352].z + _851;
        float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
        float _2379 = _2378 * _2372;
        float _2380 = _2378 * _2373;
        float _2381 = _2378 * _2374;
        float _2382 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2352].xyz));
        float _4398 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2386 = dot(vec3(_770, _771, _772), vec3(_2379, _2380, _2381));
        float _4409 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2390 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2379, _2380, _2381));
        float _4420 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2394 = _2371 * _2371;
        float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
        float _2407 = (exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2408 = 1.0 - _2371;
        float _2418 = (0.5 / (((_2162 * ((_2385 * _2408) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2408) + _2371) * _2385))) * _2385;
        float _4431 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2346 = (((_2407 * cbLight._m0[_2356].x) * _2420) * _2421) + _2282;
        _2348 = (((_2407 * cbLight._m0[_2356].y) * _2420) * _2421) + _2283;
        _2350 = (((_2407 * cbLight._m0[_2356].z) * _2420) * _2421) + _2284;
    }
    float _2456;
    float _2458;
    float _2460;
    if (_2088)
    {
        _2456 = _2346;
        _2458 = _2348;
        _2460 = _2350;
    }
    else
    {
        uint _2467 = _1997 + 3u;
        uint _2471 = _1997 + 11u;
        float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _773) * 0.949999988079071044921875);
        float _2486 = _2485 * _2485;
        float _2487 = cbLight._m0[_2467].x + _849;
        float _2488 = cbLight._m0[_2467].y + _850;
        float _2489 = cbLight._m0[_2467].z + _851;
        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
        float _2494 = _2493 * _2487;
        float _2495 = _2493 * _2488;
        float _2496 = _2493 * _2489;
        float _2497 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2467].xyz));
        float _4447 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2501 = dot(vec3(_770, _771, _772), vec3(_2494, _2495, _2496));
        float _4458 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2505 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2494, _2495, _2496));
        float _4469 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2509 = _2486 * _2486;
        float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
        float _2522 = (exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2523 = 1.0 - _2486;
        float _2533 = (0.5 / (((_2162 * ((_2500 * _2523) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2523) + _2486) * _2500))) * _2500;
        float _4480 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2456 = (((_2522 * cbLight._m0[_2471].x) * _2535) * _2536) + _2346;
        _2458 = (((_2522 * cbLight._m0[_2471].y) * _2535) * _2536) + _2348;
        _2460 = (((_2522 * cbLight._m0[_2471].z) * _2535) * _2536) + _2350;
    }
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    if (_1995.y == 0u)
    {
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2611;
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2611;
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2611;
        uvec4 _2626 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2627 = _2626.x;
        uint _2638 = uint((float(_2626.y) * floor(float(uint(cbSceneParam._m0[85u].y * _870) / _2627))) + floor(float(uint(cbSceneParam._m0[85u].x * _869) / _2627)));
        float _2648 = (log2(_2614 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2649 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        uint _2652 = uint(isnan(14.0) ? _2649 : (isnan(_2649) ? 14.0 : min(_2649, 14.0)));
        uvec4 _2657 = texelFetch(g_lightClusterGridBuffer, int(((_2652 << 2u) + (_2638 << 6u)) >> 2u));
        uint _2658 = _2657.x;
        uint _2659 = _2626.z;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        if (((((1u << ((_2659 >> 4u) & 15u)) + 4294967295u) & _2658) == 0u) || ((_2659 & 240u) == 0u))
        {
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
        }
        else
        {
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            uint _2918 = 0u;
            uint _2927;
            bool _2928;
            for (;;)
            {
                _2927 = texelFetch(g_lightClassification, int((((_2652 << 5u) + (_2638 << 9u)) + (_2918 << 2u)) >> 2u)).x;
                _2928 = _2927 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2928)
                {
                    frontier_phi_66_pred = _2912;
                    frontier_phi_66_pred_1 = _2917;
                    frontier_phi_66_pred_2 = _2916;
                    frontier_phi_66_pred_3 = _2915;
                    frontier_phi_66_pred_4 = _2914;
                    frontier_phi_66_pred_5 = _2913;
                }
                else
                {
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    uint _3063;
                    _3057 = _2912;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2927;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    for (;;)
                    {
                        uint _3067 = uint(findLSB(_3063)) + (_2918 << 5u);
                        uint _3064 = (_3063 + 4294967295u) & _3063;
                        uint _3069 = _3067 * 48u;
                        vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3069)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 3u)).x));
                        uint _3089 = (_3067 * 48u) + 4u;
                        vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 3u)).x));
                        uint _3108 = (_3067 * 48u) + 8u;
                        vec3 _3119 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x));
                        float _3123 = _3083.x - _2612;
                        float _3124 = _3083.y - _2613;
                        float _3125 = _3083.z - _2614;
                        float _3126 = dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125));
                        float _3129 = inversesqrt(_3126);
                        float _3130 = _3129 * _3123;
                        float _3131 = _3129 * _3124;
                        float _3132 = _3129 * _3125;
                        float _3133 = dot(vec3(_888, _891, _894), vec3(_3130, _3131, _3132));
                        float _3138 = 1.0 - (_3126 * _3083.w);
                        float _4506 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3139 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3140 = sqrt(_3126) * _3102.w;
                        float _3143 = 1.39999997615814208984375 / (_3140 + 1.39999997615814208984375);
                        float _3144 = _3143 * _3143;
                        float _3147 = ((1.0 - _3144) * _3133) + _3144;
                        float _3150 = _3140 * _3140;
                        float _3154 = ((isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0))) * _3139) / ((_3150 * 0.699999988079071044921875) + 1.0);
                        float _3158 = (-0.0) - _2612;
                        float _3159 = (-0.0) - _2613;
                        float _3160 = (-0.0) - _2614;
                        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                        float _3165 = _3164 * _3158;
                        float _3166 = _3164 * _3159;
                        float _3167 = _3164 * _3160;
                        float _3175 = exp2(log2(1.0 / ((_3150 * 3.5) + 5.0)) * 0.25);
                        float _3176 = 1.0 - _948;
                        float _3183 = sqrt(1.0 - ((1.0 - (_3176 * _3176)) * (1.0 - (_3175 * _3175))));
                        float _3184 = _3183 * _3183;
                        float _3185 = _3184 * _3184;
                        float _3186 = _3165 + _3130;
                        float _3187 = _3166 + _3131;
                        float _3188 = _3167 + _3132;
                        float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                        float _3196 = dot(vec3(_888, _891, _894), vec3(_3165, _3166, _3167));
                        float _4522 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3199 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3200 = dot(vec3(_888, _891, _894), vec3(_3192 * _3186, _3192 * _3187, _3192 * _3188));
                        float _4533 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3203 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3207 = ((_3203 * _3203) * (_3185 + (-1.0))) + 1.0;
                        float _3208 = _3143 * _3184;
                        float _3209 = _3208 * _3208;
                        float _3212 = ((1.0 - _3209) * _3133) + _3209;
                        float _4544 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3213 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3214 = 1.0 - _3184;
                        float _3224 = (0.5 / (((_3213 * ((_3199 * _3214) + _3184)) + 9.9999999392252902907785028219223e-09) + (((_3213 * _3214) + _3184) * _3199))) * _3213;
                        float _4555 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3235 = (((_3185 * 3.1415927410125732421875) * (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) / ((_3207 * _3207) * ((_3150 * 2.1991131305694580078125) + 3.141590118408203125))) * _3139;
                        _2987 = (_3154 * _3102.x) + _3060;
                        _2988 = (_3154 * _3102.y) + _3061;
                        _2989 = (_3154 * _3102.z) + _3062;
                        _2984 = (_3235 * _3119.x) + _3057;
                        _2985 = (_3235 * _3119.y) + _3058;
                        _2986 = (_3235 * _3119.z) + _3059;
                        if (_3064 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3057 = _2984;
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _3064;
                        }
                    }
                    frontier_phi_66_pred = _2984;
                    frontier_phi_66_pred_1 = _2989;
                    frontier_phi_66_pred_2 = _2988;
                    frontier_phi_66_pred_3 = _2987;
                    frontier_phi_66_pred_4 = _2986;
                    frontier_phi_66_pred_5 = _2985;
                }
                _2760 = frontier_phi_66_pred;
                _2770 = frontier_phi_66_pred_1;
                _2768 = frontier_phi_66_pred_2;
                _2766 = frontier_phi_66_pred_3;
                _2764 = frontier_phi_66_pred_4;
                _2762 = frontier_phi_66_pred_5;
                uint _2919 = _2918 + 1u;
                if (_2919 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2912 = _2760;
                    _2913 = _2762;
                    _2914 = _2764;
                    _2915 = _2766;
                    _2916 = _2768;
                    _2917 = _2770;
                    _2918 = _2919;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
        }
        uvec4 _2773 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2774 = _2773.z;
        uint _2776 = (_2774 >> 8u) & 15u;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((4294967295u << _2776) & _2658) == 0u)
        {
            _2880 = _2759;
            _2882 = _2761;
            _2884 = _2763;
            _2886 = _2765;
            _2888 = _2767;
            _2890 = _2769;
        }
        else
        {
            float _2905 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
            float _2906 = _2905 * _2612;
            float _2907 = _2905 * _2613;
            float _2908 = _2905 * _2614;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2776 < ((_2774 >> 12u) & 15u))
            {
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _3040 = _2759;
                float _3041 = _2761;
                float _3042 = _2763;
                float _3043 = _2765;
                float _3044 = _2767;
                float _3045 = _2769;
                uint _3046 = _2776;
                uint _3055;
                bool _3056;
                for (;;)
                {
                    _3055 = texelFetch(g_lightClassification, int((((_2652 << 5u) + (_2638 << 9u)) + (_3046 << 2u)) >> 2u)).x;
                    _3056 = _3055 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3056)
                    {
                        frontier_phi_77_pred = _3045;
                        frontier_phi_77_pred_1 = _3044;
                        frontier_phi_77_pred_2 = _3043;
                        frontier_phi_77_pred_3 = _3042;
                        frontier_phi_77_pred_4 = _3041;
                        frontier_phi_77_pred_5 = _3040;
                    }
                    else
                    {
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3262 = _3040;
                        float _3263 = _3041;
                        float _3264 = _3042;
                        float _3265 = _3043;
                        float _3266 = _3044;
                        float _3267 = _3045;
                        uint _3268 = _3055;
                        uint _3269;
                        vec4 _3294;
                        float _3295;
                        vec4 _3310;
                        vec3 _3322;
                        vec4 _3337;
                        vec4 _3352;
                        float _3398;
                        bool _3399;
                        for (;;)
                        {
                            uint _3279 = ((_3046 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3268));
                            _3269 = (_3268 + 4294967295u) & _3268;
                            uint _3281 = _3279 * 40u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            _3295 = _3294.w;
                            uint _3297 = (_3279 * 40u) + 4u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3312 = (_3279 * 40u) + 8u;
                            _3322 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x));
                            uint _3324 = (_3279 * 40u) + 16u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3339 = (_3279 * 40u) + 20u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3279 * 40u) + 24u;
                            vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3373 = (_3279 * 40u) + 28u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            _3398 = fma(_2614, _3386.z, fma(_2613, _3386.y, _3386.x * _2612)) + _3386.w;
                            _3399 = !((fma(_2614, _3367.z, fma(_2613, _3367.y, _3367.x * _2612)) + _3367.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3399)
                            {
                                float _3426 = _3294.x - _2612;
                                float _3427 = _3294.y - _2613;
                                float _3428 = _3294.z - _2614;
                                float _3429 = dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428));
                                float _3432 = inversesqrt(_3429);
                                float _3433 = _3432 * _3426;
                                float _3434 = _3432 * _3427;
                                float _3435 = _3432 * _3428;
                                float _3439 = 1.0 - (_3429 / (_3295 * _3295));
                                float _4566 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3444 = sqrt(_3429) * _3310.w;
                                float _3446 = 1.39999997615814208984375 / (_3444 + 1.39999997615814208984375);
                                float _3447 = _3446 * _3446;
                                float _3450 = ((1.0 - _3447) * dot(vec3(_3433, _3434, _3435), vec3(_888, _891, _894))) + _3447;
                                float _3453 = _3444 * _3444;
                                float _3457 = (fma(_2614, _3337.z, fma(_2613, _3337.y, _3337.x * _2612)) + _3337.w) / _3398;
                                float _3458 = (fma(_2614, _3352.z, fma(_2613, _3352.y, _3352.x * _2612)) + _3352.w) / _3398;
                                float _3462 = 1.0 - dot(vec2(_3457, _3458), vec2(_3457, _3458));
                                float _4582 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3464 = _3463 * (((isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0))) * _3440) / ((_3453 * 0.699999988079071044921875) + 1.0));
                                float _3476 = exp2(log2(1.0 / ((_3453 * 3.5) + 5.0)) * 0.25);
                                float _3477 = 1.0 - _948;
                                float _3484 = sqrt(1.0 - ((1.0 - (_3477 * _3477)) * (1.0 - (_3476 * _3476))));
                                float _3485 = _3484 * _3484;
                                float _3486 = _3485 * _3485;
                                float _3487 = _3433 - _2906;
                                float _3488 = _3434 - _2907;
                                float _3489 = _3435 - _2908;
                                float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                                float _3497 = dot(vec3(_888, _891, _894), vec3((-0.0) - _2906, (-0.0) - _2907, (-0.0) - _2908));
                                float _4593 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3500 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3501 = dot(vec3(_888, _891, _894), vec3(_3493 * _3487, _3493 * _3488, _3493 * _3489));
                                float _4604 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3504 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3508 = ((_3504 * _3504) * (_3486 + (-1.0))) + 1.0;
                                float _3509 = _3446 * _3485;
                                float _3510 = _3509 * _3509;
                                float _3516 = ((1.0 - _3510) * dot(vec3(_888, _891, _894), vec3(_3433, _3434, _3435))) + _3510;
                                float _4615 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3518 = 1.0 - _3485;
                                float _3528 = (0.5 / (((_3517 * ((_3500 * _3518) + _3485)) + 9.9999999392252902907785028219223e-09) + (((_3517 * _3518) + _3485) * _3500))) * _3517;
                                float _4626 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3538 = (_3463 * _3440) * (((_3486 * 3.1415927410125732421875) * (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) / ((_3508 * _3508) * ((_3453 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3464 * _3310.y;
                                frontier_phi_83_pred_1 = _3464 * _3310.x;
                                frontier_phi_83_pred_2 = _3538 * _3322.z;
                                frontier_phi_83_pred_3 = _3538 * _3322.y;
                                frontier_phi_83_pred_4 = _3538 * _3322.x;
                                frontier_phi_83_pred_5 = _3464 * _3310.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3546 = frontier_phi_83_pred;
                            _3545 = frontier_phi_83_pred_1;
                            _3544 = frontier_phi_83_pred_2;
                            _3543 = frontier_phi_83_pred_3;
                            _3542 = frontier_phi_83_pred_4;
                            _3547 = frontier_phi_83_pred_5;
                            _3252 = _3545 + _3265;
                            _3253 = _3546 + _3266;
                            _3254 = _3547 + _3267;
                            _3249 = _3542 + _3262;
                            _3250 = _3543 + _3263;
                            _3251 = _3544 + _3264;
                            if (_3269 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3269;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3254;
                        frontier_phi_77_pred_1 = _3253;
                        frontier_phi_77_pred_2 = _3252;
                        frontier_phi_77_pred_3 = _3251;
                        frontier_phi_77_pred_4 = _3250;
                        frontier_phi_77_pred_5 = _3249;
                    }
                    _2891 = frontier_phi_77_pred;
                    _2889 = frontier_phi_77_pred_1;
                    _2887 = frontier_phi_77_pred_2;
                    _2885 = frontier_phi_77_pred_3;
                    _2883 = frontier_phi_77_pred_4;
                    _2881 = frontier_phi_77_pred_5;
                    uint _3047 = _3046 + 1u;
                    if (_3047 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3040 = _2881;
                        _3041 = _2883;
                        _3042 = _2885;
                        _3043 = _2887;
                        _3044 = _2889;
                        _3045 = _2891;
                        _3046 = _3047;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2885;
                frontier_phi_58_59_ladder_1 = _2891;
                frontier_phi_58_59_ladder_2 = _2889;
                frontier_phi_58_59_ladder_3 = _2887;
                frontier_phi_58_59_ladder_4 = _2883;
                frontier_phi_58_59_ladder_5 = _2881;
            }
            else
            {
                frontier_phi_58_59_ladder = _2763;
                frontier_phi_58_59_ladder_1 = _2769;
                frontier_phi_58_59_ladder_2 = _2767;
                frontier_phi_58_59_ladder_3 = _2765;
                frontier_phi_58_59_ladder_4 = _2761;
                frontier_phi_58_59_ladder_5 = _2759;
            }
            _2880 = frontier_phi_58_59_ladder_5;
            _2882 = frontier_phi_58_59_ladder_4;
            _2884 = frontier_phi_58_59_ladder;
            _2886 = frontier_phi_58_59_ladder_3;
            _2888 = frontier_phi_58_59_ladder_2;
            _2890 = frontier_phi_58_59_ladder_1;
        }
        float _2895 = isnan(1.0) ? _932 : (isnan(_932) ? 1.0 : min(_932, 1.0));
        _2671 = (_2895 * _2886) + _2126;
        _2673 = (_2895 * _2888) + _2128;
        _2675 = (_2895 * _2890) + _2130;
        _2677 = ((_2880 * 0.039999999105930328369140625) * _2895) + _2456;
        _2679 = ((_2882 * 0.039999999105930328369140625) * _2895) + _2458;
        _2681 = ((_2884 * 0.039999999105930328369140625) * _2895) + _2460;
    }
    else
    {
        _2671 = _2126;
        _2673 = _2128;
        _2675 = _2130;
        _2677 = _2456;
        _2679 = _2458;
        _2681 = _2460;
    }
    float _4642 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4653 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4664 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _2698 = ((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2671 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _932))) + ((_2677 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1768)) * cbPerFrame._m0[3u].x);
    float _2699 = ((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2673 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _932))) + ((_2679 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1768)) * cbPerFrame._m0[3u].x);
    float _2700 = ((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2675 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _932))) + ((_2681 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1768)) * cbPerFrame._m0[3u].x);
    uint _2701 = _242 + 6u;
    float _2709 = _869 / cbSceneParam._m0[86u].x;
    float _2710 = _870 / cbSceneParam._m0[86u].y;
    vec4 _2724 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2709, _2710, (log2((isnan(cbSceneParam._m0[77u].w) ? _791 : (isnan(_791) ? cbSceneParam._m0[77u].w : min(_791, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2726 = _2724.x;
    float _2727 = _2724.y;
    float _2728 = _2724.z;
    float _2729 = _2724.w;
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    if (_791 > cbSceneParam._m0[78u].w)
    {
        float _2784 = isnan(_791) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _791 : min(cbSceneParam._m0[80u].w, _791));
        float _2785 = _2784 / _791;
        float _2796 = _2785 * _842;
        float _2797 = _843 * _2785;
        float _2798 = (-0.0) - _2797;
        float _2800 = _2785 * _844;
        float _2802 = (cbSceneParam._m0[77u].w * _2798) / _2784;
        float _2803 = _2802 + cbSceneParam._m0[79u].w;
        float _2804 = cbSceneParam._m0[79u].w - _2797;
        float _2810 = sqrt(((_2796 * _2796) + (_2797 * _2797)) + (_2800 * _2800));
        float _2813 = (1.0 - (cbSceneParam._m0[77u].w / _2784)) * _2810;
        float _2818 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2820 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2997;
        if (abs((_2798 - _2802) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2997 = ((((_2803 > 0.0) ? exp2(_2818 * _2803) : (2.0 - exp2(_2820 * _2803))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2813;
        }
        else
        {
            float _2941 = 1.0 / cbSceneParam._m0[80u].x;
            float _2942 = isnan(_2804) ? _2803 : (isnan(_2803) ? _2804 : max(_2803, _2804));
            float _2943 = isnan(_2804) ? _2803 : (isnan(_2803) ? _2804 : min(_2803, _2804));
            float _2952 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : min(_2942, 0.0));
            float _2953 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : min(_2943, 0.0));
            _2997 = ((abs(_2810 / _2798) * cbSceneParam._m0[80u].y) * ((((_2952 - _2953) * 2.0) - ((exp2(_2818 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0)))) - exp2(_2818 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0))))) * _2941)) - ((exp2(_2820 * _2952) - exp2(_2820 * _2953)) * _2941))) + (_2813 * cbSceneParam._m0[80u].z);
        }
        vec4 _2999 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2709, _2710, 1.0), 0.0);
        float _3008 = exp2((_2997 * (-1.44269502162933349609375)) * (1.0 - _2999.w));
        float _3009 = log2(_3008);
        float _3025 = log2(_2729);
        _2822 = (exp2(_3025 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].x)) * _2999.x) / cbSceneParam._m0[78u].x)) + _2726;
        _2824 = (exp2(_3025 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].y)) * _2999.y) / cbSceneParam._m0[78u].y)) + _2727;
        _2826 = (exp2(_3025 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].z)) * _2999.z) / cbSceneParam._m0[78u].z)) + _2728;
        _2828 = _3008 * _2729;
    }
    else
    {
        _2822 = _2726;
        _2824 = _2727;
        _2826 = _2728;
        _2828 = _2729;
    }
    bool _3035;
    vec4 _2838;
    vec4 _2860;
    float _2862;
    float _2866;
    float _2867;
    float _2868;
    float _2869;
    bool _2879;
    for (;;)
    {
        _2838 = cbMatDynParam._m0[0u];
        float _2840 = roundEven(_2838.y);
        bool _2841 = _2840 == 3.0;
        float _2842 = log2(_2828);
        float _2849 = exp2(_2842 * cbSceneParam._m0[78u].x) * _2698;
        float _2850 = exp2(_2842 * cbSceneParam._m0[78u].y) * _2699;
        float _2851 = exp2(_2842 * cbSceneParam._m0[78u].z) * _2700;
        float _2858 = _858 + (-0.5);
        _2860 = cbMtdParam._m0[1u];
        _2862 = _2860.y * _2858;
        float _2865 = (_2840 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2866 = _2865 * (_2841 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2822)));
        _2867 = _2865 * (_2841 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2824)));
        _2868 = _2865 * (_2841 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2826)));
        _2869 = _2858 * 0.999000012874603271484375;
        _2879 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2879)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _2869) < 0.5)
            {
                _3035 = true;
                break;
            }
        }
        uint _2976 = _907 + uint(_2838.w);
        if ((cbInstanceData._m0[_2976].w < 1.0) && ((cbInstanceData._m0[_2976].w + _2869) < 0.5))
        {
            _3035 = true;
            break;
        }
        if ((_2862 + 1.0) < _2860.x)
        {
            _3035 = true;
            break;
        }
        _3035 = false;
        break;
    }
    float _3240;
    if (_3035)
    {
        discard_state = true;
        _3240 = 0.0;
    }
    else
    {
        _3240 = cbInstanceData._m0[_2701].w;
    }
    SV_Target.x = _2866;
    SV_Target.y = _2867;
    SV_Target.z = _2868;
    SV_Target.w = _3240;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2701].w;
    discard_exit();
}


