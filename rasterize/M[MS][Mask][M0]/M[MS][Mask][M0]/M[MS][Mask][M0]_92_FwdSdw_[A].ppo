#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1336;
float _3976;
float _3977;
float _3978;
float _3979;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _310.x * cbMtdParam._m0[11u].x;
    float _316 = _310.y * cbMtdParam._m0[11u].y;
    float _317 = _310.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _356.x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[24u].z) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3988 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _432 = (_425 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _433 = (_425 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _434 = (_425 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _471 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _473 = _471.x;
    float _483 = dot(vec4(_473, _471.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _497 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _356.y) * 2.0) - ((((_473 - _483) * cbMtdParam._m0[24u].z) + _483) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3999 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _498 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _511 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _286.x) * ((_498 * ((_451.x * cbMtdParam._m0[13u].x) - _432)) + _432);
    float _514 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _286.y) * ((_498 * ((_451.y * cbMtdParam._m0[13u].y) - _433)) + _433);
    float _517 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _286.z) * ((_498 * ((_451.z * cbMtdParam._m0[13u].z) - _434)) + _434);
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _556 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _575 = _573.x;
    float _576 = _573.y;
    float _577 = _573.z;
    float _584 = ((_556.x - _575) * _425) + _575;
    float _585 = ((_556.y - _576) * _425) + _576;
    float _586 = ((_556.z - _577) * _425) + _577;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _611 = ((_598.z - _586) * _498) + _586;
    float _614 = ((((_598.x - _584) * _498) + _584) * 2.0) + (-1.0);
    float _616 = ((((_598.y - _585) * _498) + _585) * 2.0) + (-1.0);
    float _617 = dot(vec2(_614, _616), vec2(_614, _616));
    float _4010 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _622 = sqrt(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _648 = (((_636.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _614;
    float _649 = (((_636.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _616;
    float _652 = fma(_622, _234, fma(_649, _241, _648 * _227));
    float _655 = fma(_622, _235, fma(_649, _242, _648 * _228));
    float _658 = fma(_622, _236, fma(_649, _243, _648 * _229));
    float _662 = inversesqrt(dot(vec3(_652, _655, _658), vec3(_652, _655, _658)));
    vec4 _689 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _691 = _689.x;
    float _692 = 1.0 - _691;
    float _698 = (cbMtdParam._m0[19u].x + dot(vec4(_662 * _652, _662 * _655, _662 * _658, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_691 - _692) * cbMtdParam._m0[24u].w) + _692) * cbMtdParam._m0[21u].z);
    float _4021 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _706 = (_699 * ((_536.x * cbMtdParam._m0[18u].x) - _511)) + _511;
    float _707 = (_699 * ((_536.y * cbMtdParam._m0[18u].y) - _514)) + _514;
    float _708 = (_699 * ((_536.z * cbMtdParam._m0[18u].z) - _517)) + _517;
    float _712 = (cbMtdParam._m0[19u].w * (_636.z - _611)) + _611;
    vec4 _725 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _732 = (_725.x * 2.0) + (-1.0);
    float _733 = (_725.y * 2.0) + (-1.0);
    float _734 = dot(vec2(_732, _733), vec2(_732, _733));
    float _4032 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _742 = ((_725.z - _712) * _699) + _712;
    float _752 = ((sqrt(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) - _622) * _699) + _622;
    float _755 = (((_732 - _648) * _699) + _648) + (cbMtdParam._m0[21u].x * _648);
    float _756 = (((_733 - _649) * _699) + _649) + (cbMtdParam._m0[21u].x * _649);
    float _760 = cbMtdParam._m0[22u].x + _636.w;
    float _763 = fma(_752, _234, fma(_756, _241, _755 * _227));
    float _766 = fma(_752, _235, fma(_756, _242, _755 * _228));
    float _769 = fma(_752, _236, fma(_756, _243, _755 * _229));
    float _773 = inversesqrt(dot(vec3(_763, _766, _769), vec3(_763, _766, _769)));
    float _774 = _773 * _763;
    float _775 = _773 * _766;
    float _776 = _773 * _769;
    float _4043 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _777 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4065 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4076 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4087 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _795 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _846 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _836);
    float _847 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _836);
    float _848 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _836);
    float _852 = inversesqrt(dot(vec3(_846, _847, _848), vec3(_846, _847, _848)));
    float _853 = _846 * _852;
    float _854 = _847 * _852;
    float _855 = _848 * _852;
    vec4 _860 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _862 = _860.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1016 = sqrt(((_846 * _846) + (_847 * _847)) + (_848 * _848));
        float _1022 = (cbMatDynParam._m0[5u].x * _1016) + cbMatDynParam._m0[5u].y;
        float _4098 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1027 = (cbMatDynParam._m0[5u].z * _1016) + cbMatDynParam._m0[5u].w;
        float _4109 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) - _1023)) + _1023) < ((_862 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _873 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _874 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _892 = fma(_776, cbSceneParam._m0[5u].z, fma(_775, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _774));
    float _895 = fma(_776, cbSceneParam._m0[6u].z, fma(_775, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _774));
    float _898 = fma(_776, cbSceneParam._m0[7u].z, fma(_775, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _774));
    uint _911 = _246 + 9u;
    uint _912 = _911 + uint(cbMatDynParam._m0[0u].w);
    float _918 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * cbInstanceData._m0[_912].x;
    float _919 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * cbInstanceData._m0[_912].y;
    float _920 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * cbInstanceData._m0[_912].z;
    float _4120 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _4131 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    vec4 _932 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _873, cbSceneParam._m0[86u].y * _874));
    float _936 = ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * TEXCOORD_5.w) * _932.x;
    float _937 = dot(vec3(_774, _775, _776), vec3(_853, _854, _855));
    float _940 = _937 * 2.0;
    float _944 = (_940 * _774) - _853;
    float _945 = (_940 * _775) - _854;
    float _946 = (_940 * _776) - _855;
    float _950 = abs(dot(vec3(_853, _854, _855), vec3(_774, _775, _776)));
    float _4153 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _952 = sqrt(_777);
    float _965 = exp2((_952 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_952 * 3.0));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1335;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1060 = fma(_1005, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997));
        float _1064 = fma(_1005, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997));
        float _1068 = fma(_1005, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997));
        float _1093 = _997 + _774;
        float _1094 = _1001 + _775;
        float _1095 = _1005 + _776;
        float _1105 = fma(_1095, cbModelParam._m0[26u].z, fma(_1094, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093)) - _1060;
        float _1106 = fma(_1095, cbModelParam._m0[27u].z, fma(_1094, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093)) - _1064;
        float _1107 = fma(_1095, cbModelParam._m0[28u].z, fma(_1094, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093)) - _1068;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1060 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1064 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[34u].z) + ((((((_1068 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1163 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1129.x + (-0.5));
        float _1165 = _1163 * (_1129.y + (-0.5));
        float _1166 = _1163 * (_1129.z + (-0.5));
        float _1173 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1136.x + (-0.5));
        float _1175 = _1173 * (_1136.y + (-0.5));
        float _1176 = _1173 * (_1136.z + (-0.5));
        float _1183 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1143.x + (-0.5));
        float _1185 = _1183 * (_1143.y + (-0.5));
        float _1186 = _1183 * (_1143.z + (-0.5));
        float _1193 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1150.x + (-0.5));
        float _1195 = _1193 * (_1150.y + (-0.5));
        float _1196 = _1193 * (_1150.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1217 = (dot(vec3(_774, _775, _776), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1227 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4201 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1229 + 1.0))) + _1234) * _1197;
        float _1244 = _1165 * 0.5;
        float _1245 = _1175 * 0.5;
        float _1246 = _1185 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_774, _775, _776), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4234 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1271 + 1.0))) + _1276) * _1198;
        float _1286 = _1166 * 0.5;
        float _1287 = _1176 * 0.5;
        float _1288 = _1186 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_774, _775, _776), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4267 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1313 + 1.0))) + _1318) * _1199;
        _1335 = _1166;
        _1337 = _1165;
        _1338 = _1164;
        _1339 = _1176;
        _1340 = _1175;
        _1341 = _1174;
        _1342 = _1186;
        _1343 = _1185;
        _1344 = _1184;
        _1345 = _1199;
        _1346 = _1198;
        _1347 = _1197;
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1336;
        _1337 = _1336;
        _1338 = _1336;
        _1339 = _1336;
        _1340 = _1336;
        _1341 = _1336;
        _1342 = _1336;
        _1343 = _1336;
        _1344 = _1336;
        _1345 = _1336;
        _1346 = _1336;
        _1347 = _1336;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1377 = fma(_1005, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _997));
        float _1381 = fma(_1005, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _997));
        float _1385 = fma(_1005, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _997));
        float _1408 = _997 + _774;
        float _1409 = _1001 + _775;
        float _1410 = _1005 + _776;
        float _1420 = fma(_1410, cbModelParam._m0[30u].z, fma(_1409, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1408)) - _1377;
        float _1421 = fma(_1410, cbModelParam._m0[31u].z, fma(_1409, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1408)) - _1381;
        float _1422 = fma(_1410, cbModelParam._m0[32u].z, fma(_1409, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1408)) - _1385;
        float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
        float _1439 = ((_1426 * _1420) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1377 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1426 * _1421) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1381 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1426 * _1422) / cbModelParam._m0[35u].z) + ((((((_1385 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        float _1476 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1443.x + (-0.5));
        float _1478 = _1476 * (_1443.y + (-0.5));
        float _1479 = _1476 * (_1443.z + (-0.5));
        float _1486 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1450.x + (-0.5));
        float _1488 = _1486 * (_1450.y + (-0.5));
        float _1489 = _1486 * (_1450.z + (-0.5));
        float _1496 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1457.x + (-0.5));
        float _1498 = _1496 * (_1457.y + (-0.5));
        float _1499 = _1496 * (_1457.z + (-0.5));
        float _1506 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1464.x + (-0.5));
        float _1508 = _1506 * (_1464.y + (-0.5));
        float _1509 = _1506 * (_1464.z + (-0.5));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = _1477 * 0.5;
        float _1514 = _1487 * 0.5;
        float _1515 = _1497 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_774, _775, _776), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4330 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1540 + 1.0))) + _1545) * _1510;
        float _1555 = _1478 * 0.5;
        float _1556 = _1488 * 0.5;
        float _1557 = _1498 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_774, _775, _776), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4363 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1582 + 1.0))) + _1587) * _1511;
        float _1597 = _1479 * 0.5;
        float _1598 = _1489 * 0.5;
        float _1599 = _1499 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_774, _775, _776), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4396 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1624 + 1.0))) + _1629) * _1512;
        _1646 = _1479;
        _1647 = _1478;
        _1648 = _1477;
        _1649 = _1489;
        _1650 = _1488;
        _1651 = _1487;
        _1652 = _1499;
        _1653 = _1498;
        _1654 = _1497;
        _1655 = _1512;
        _1656 = _1511;
        _1657 = _1510;
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
    }
    else
    {
        _1646 = _1336;
        _1647 = _1336;
        _1648 = _1336;
        _1649 = _1336;
        _1650 = _1336;
        _1651 = _1336;
        _1652 = _1336;
        _1653 = _1336;
        _1654 = _1336;
        _1655 = _1336;
        _1656 = _1336;
        _1657 = _1336;
        _1658 = 0.0;
        _1659 = 0.0;
        _1660 = 0.0;
    }
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1348)) + _1348;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1349)) + _1349;
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1350)) + _1350;
    float _1693 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1670));
    float _1714 = _944 * 0.5;
    float _1715 = _945 * 0.5;
    float _1716 = _946 * 0.5;
    float _1717 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1720 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1723 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1757;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1730 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1335, _1339, _1342, _1345));
        float _1734 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1738 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1745 = dot(vec4(cbModelParam._m0[39u]), vec4(_1714, _1715, _1716, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1768;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1759 = dot(vec4(cbModelParam._m0[40u]), vec4(_1714, _1715, _1716, 1.0));
        _1768 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1759) ? 0.0 : (isnan(0.0) ? _1759 : max(0.0, _1759))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1768 = 1.0;
    }
    float _1772 = (_1768 * cbModelParam._m0[1u].x) + (_1757 * (1.0 - cbModelParam._m0[1u].x));
    float _1782 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _777);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1782 : min(cbModelParam._m0[25u].z, _1782));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1830 = fma(_1005, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997)) + cbModelParam._m0[13u].w;
        float _1834 = fma(_1005, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997)) + cbModelParam._m0[14u].w;
        float _1838 = fma(_1005, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997)) + cbModelParam._m0[15u].w;
        float _1841 = fma(_946, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _944));
        float _1844 = fma(_946, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _944));
        float _1847 = fma(_946, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _944));
        float _1875;
        if (_1841 > 0.0)
        {
            _1875 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1875 = frontier_phi_17_15_ladder;
        }
        float _2044;
        if (_1844 > 0.0)
        {
            _2044 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2044 = frontier_phi_26_22_ladder;
        }
        float _2339;
        if (_1847 > 0.0)
        {
            _2339 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2339 = frontier_phi_38_33_ladder;
        }
        float _2341 = isnan(_2044) ? _1875 : (isnan(_1875) ? _2044 : min(_1875, _2044));
        float _2342 = isnan(_2339) ? _2341 : (isnan(_2341) ? _2339 : min(_2341, _2339));
        float _2346 = (_2342 * _1841) + _1830;
        float _2347 = (_2342 * _1844) + _1834;
        float _2348 = (_2342 * _1847) + _1838;
        float _2349 = _2342 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2349;
        float _2353 = _2349 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 > _2353) || ((_2347 < _2351) || ((_2346 < _2351) || (_2346 > _2353))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2348, cbModelParam._m0[9u].z, fma(_2347, cbModelParam._m0[9u].y, _2346 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2348, cbModelParam._m0[10u].z, fma(_2347, cbModelParam._m0[10u].y, _2346 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2348, cbModelParam._m0[11u].z, fma(_2347, cbModelParam._m0[11u].y, _2346 * cbModelParam._m0[11u].x))), _1783);
            frontier_phi_16_38_ladder = _2493.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2493.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2493.x * cbModelParam._m0[1u].y;
        }
        _1863 = frontier_phi_16_38_ladder_2;
        _1865 = frontier_phi_16_38_ladder_1;
        _1867 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_944, _945, _946), _1783);
        _1863 = _1851.x * cbModelParam._m0[1u].y;
        _1865 = _1851.y * cbModelParam._m0[1u].y;
        _1867 = _1851.z * cbModelParam._m0[1u].y;
    }
    float _1871 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _777);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1871 : min(cbModelParam._m0[25u].w, _1871));
    float _1961;
    float _1963;
    float _1965;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1925 = fma(_1005, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997)) + cbModelParam._m0[21u].w;
        float _1929 = fma(_1005, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997)) + cbModelParam._m0[22u].w;
        float _1933 = fma(_1005, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997)) + cbModelParam._m0[23u].w;
        float _1936 = fma(_946, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _944));
        float _1939 = fma(_946, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _944));
        float _1942 = fma(_946, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _944));
        float _2049;
        if (_1936 > 0.0)
        {
            _2049 = abs((1.0 - _1925) / _1936);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1925 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2049 = frontier_phi_28_24_ladder;
        }
        float _2366;
        if (_1939 > 0.0)
        {
            _2366 = abs((1.0 - _1929) / _1939);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1929 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2366 = frontier_phi_40_35_ladder;
        }
        float _2693;
        if (_1942 > 0.0)
        {
            _2693 = abs((1.0 - _1933) / _1942);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1933 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2693 = frontier_phi_50_47_ladder;
        }
        float _2695 = isnan(_2366) ? _2049 : (isnan(_2049) ? _2366 : min(_2049, _2366));
        float _2696 = isnan(_2693) ? _2695 : (isnan(_2695) ? _2693 : min(_2695, _2693));
        float _2700 = (_2696 * _1936) + _1925;
        float _2701 = (_2696 * _1939) + _1929;
        float _2702 = (_2696 * _1942) + _1933;
        float _2703 = _2696 * 9.9999997473787516355514526367188e-05;
        float _2704 = (-1.0) - _2703;
        float _2706 = _2703 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2702 > _2706) || ((_2702 < _2704) || ((_2701 > _2706) || ((_2701 < _2704) || ((_2700 < _2704) || (_2700 > _2706))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2820 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2702, cbModelParam._m0[17u].z, fma(_2701, cbModelParam._m0[17u].y, _2700 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2702, cbModelParam._m0[18u].z, fma(_2701, cbModelParam._m0[18u].y, _2700 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2702, cbModelParam._m0[19u].z, fma(_2701, cbModelParam._m0[19u].y, _2700 * cbModelParam._m0[19u].x))), _1872);
            frontier_phi_25_50_ladder = _2820.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2820.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2820.x * cbModelParam._m0[1u].z;
        }
        _1961 = frontier_phi_25_50_ladder_2;
        _1963 = frontier_phi_25_50_ladder_1;
        _1965 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_944, _945, _946), _1872);
        _1961 = _1945.x * cbModelParam._m0[1u].z;
        _1963 = _1945.y * cbModelParam._m0[1u].z;
        _1965 = _1945.z * cbModelParam._m0[1u].z;
    }
    float _1977 = ((((1.0 - _965) * ((_952 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_965 * _952)) * _936;
    float _1978 = _1977 * ((cbModelParam._m0[1u].w * (_1961 - _1863)) + _1863);
    float _1979 = _1977 * ((cbModelParam._m0[1u].w * (_1963 - _1865)) + _1865);
    float _1980 = _1977 * ((cbModelParam._m0[1u].w * (_1965 - _1867)) + _1867);
    float _1983 = fma(_1980, cbSceneParam._m0[89u].z, fma(_1979, cbSceneParam._m0[89u].y, _1978 * cbSceneParam._m0[89u].x));
    float _1986 = fma(_1980, cbSceneParam._m0[90u].z, fma(_1979, cbSceneParam._m0[90u].y, _1978 * cbSceneParam._m0[90u].x));
    float _1989 = fma(_1980, cbSceneParam._m0[91u].z, fma(_1979, cbSceneParam._m0[91u].y, _1978 * cbSceneParam._m0[91u].x));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2035 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2036 = _2023 / _2035;
    float _2037 = _2027 / _2035;
    float _2038 = _2031 / _2035;
    float _2185;
    float _2186;
    float _2187;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2065 = ((uint(_2038 > cbSceneParam._m0[59u].y) + uint(_2038 > cbSceneParam._m0[59u].x)) + uint(_2038 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2066 = _2065 + 43u;
        uint _2074 = _2065 + 44u;
        uint _2082 = _2065 + 45u;
        uint _2090 = _2065 + 46u;
        float _2101 = fma(_2035, cbSceneParam._m0[_2066].w, fma(_2031, cbSceneParam._m0[_2066].z, fma(_2027, cbSceneParam._m0[_2066].y, _2023 * cbSceneParam._m0[_2066].x)));
        float _2105 = fma(_2035, cbSceneParam._m0[_2074].w, fma(_2031, cbSceneParam._m0[_2074].z, fma(_2027, cbSceneParam._m0[_2074].y, _2023 * cbSceneParam._m0[_2074].x)));
        float _2113 = fma(_2035, cbSceneParam._m0[_2090].w, fma(_2031, cbSceneParam._m0[_2090].z, fma(_2027, cbSceneParam._m0[_2090].y, _2023 * cbSceneParam._m0[_2090].x)));
        float _2118 = cbSceneParam._m0[33u].z * _2113;
        float _2120 = cbSceneParam._m0[33u].w * _2113;
        float _2123 = fma(_2035, cbSceneParam._m0[_2082].w, fma(_2031, cbSceneParam._m0[_2082].z, fma(_2027, cbSceneParam._m0[_2082].y, _2023 * cbSceneParam._m0[_2082].x))) / _2113;
        float _2171 = (cbSceneParam._m0[33u].x - sqrt(((_2037 * _2037) + (_2036 * _2036)) + (_2038 * _2038))) * cbSceneParam._m0[33u].y;
        float _4522 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2178 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 + _2101) / _2113, (_2120 + _2105) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2120 + _2101) / _2113, (_2105 - _2118) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 - _2118) / _2113, (_2105 - _2120) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 - _2120) / _2113, (_2118 + _2105) / _2113), _2123), 0.0)).x), vec4(0.25)));
        _2185 = 1.0 - (_2178 * cbSceneParam._m0[34u].x);
        _2186 = 1.0 - (_2178 * cbSceneParam._m0[34u].y);
        _2187 = 1.0 - (_2178 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2185 = 1.0;
        _2186 = 1.0;
        _2187 = 1.0;
    }
    float _2251;
    float _2253;
    float _2255;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2239 = fma(_2035, cbSceneParam._m0[63u].w, fma(_2031, cbSceneParam._m0[63u].z, fma(_2027, cbSceneParam._m0[63u].y, _2023 * cbSceneParam._m0[63u].x)));
        float _2240 = fma(_2035, cbSceneParam._m0[60u].w, fma(_2031, cbSceneParam._m0[60u].z, fma(_2027, cbSceneParam._m0[60u].y, _2023 * cbSceneParam._m0[60u].x))) / _2239;
        float _2241 = fma(_2035, cbSceneParam._m0[61u].w, fma(_2031, cbSceneParam._m0[61u].z, fma(_2027, cbSceneParam._m0[61u].y, _2023 * cbSceneParam._m0[61u].x))) / _2239;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2240 >= cbSceneParam._m0[64u].x) && (_2241 >= cbSceneParam._m0[64u].y)) && (_2240 <= cbSceneParam._m0[64u].z)) && (_2241 <= cbSceneParam._m0[64u].w))
        {
            float _2379 = fma(_2035, cbSceneParam._m0[62u].w, fma(_2031, cbSceneParam._m0[62u].z, fma(_2027, cbSceneParam._m0[62u].y, _2023 * cbSceneParam._m0[62u].x))) / _2239;
            float _2383 = isnan(cbSceneParam._m0[41u].w) ? _2379 : (isnan(_2379) ? cbSceneParam._m0[41u].w : max(_2379, cbSceneParam._m0[41u].w));
            float _2426 = (cbSceneParam._m0[33u].x - sqrt(((_2037 * _2037) + (_2036 * _2036)) + (_2038 * _2038))) * cbSceneParam._m0[33u].y;
            float _4538 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
            float _2433 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2240, cbSceneParam._m0[33u].w + _2241), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2240, _2241 - cbSceneParam._m0[33u].z), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2240 - cbSceneParam._m0[33u].z, _2241 - cbSceneParam._m0[33u].w), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2240 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2241), _2383), 0.0)).x), vec4(0.25)));
            float _2437 = 1.0 - (_2433 * cbSceneParam._m0[34u].x);
            float _2438 = 1.0 - (_2433 * cbSceneParam._m0[34u].y);
            float _2439 = 1.0 - (_2433 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2439) ? _2187 : (isnan(_2187) ? _2439 : min(_2187, _2439));
            frontier_phi_37_36_ladder_1 = isnan(_2438) ? _2186 : (isnan(_2186) ? _2438 : min(_2186, _2438));
            frontier_phi_37_36_ladder_2 = isnan(_2437) ? _2185 : (isnan(_2185) ? _2437 : min(_2185, _2437));
        }
        else
        {
            frontier_phi_37_36_ladder = _2187;
            frontier_phi_37_36_ladder_1 = _2186;
            frontier_phi_37_36_ladder_2 = _2185;
        }
        _2251 = frontier_phi_37_36_ladder_2;
        _2253 = frontier_phi_37_36_ladder_1;
        _2255 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2251 = _2185;
        _2253 = _2186;
        _2255 = _2187;
    }
    uvec4 _2260 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2262 = _2260.x * 14u;
    uint _2263 = _2262 + 13u;
    float _2270 = _936 + (-1.0);
    float _2275 = (cbLight._m0[_2263].x * _2270) + 1.0;
    float _2276 = (cbLight._m0[_2263].y * _2270) + 1.0;
    float _2277 = (cbLight._m0[_2263].z * _2270) + 1.0;
    float _2278 = (cbLight._m0[_2263].w * _2270) + 1.0;
    uint _2279 = _2262 + 5u;
    float _2285 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
    uint _2289 = _2262 + 4u;
    float _2298 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
    uint _2302 = _2262 | 1u;
    float _2313 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_774, _775, _776));
    float _2316 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_774, _775, _776));
    float _4574 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _4585 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2321 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * 0.3183098733425140380859375;
    float _2323 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * 0.3183098733425140380859375;
    float _2330 = ((cbLight._m0[_2279].x * _2285) * _2323) + (((cbLight._m0[_2289].x * _2251) * _2298) * _2321);
    float _2331 = ((_2285 * cbLight._m0[_2279].y) * _2323) + (((cbLight._m0[_2289].y * _2253) * _2298) * _2321);
    float _2332 = ((_2285 * cbLight._m0[_2279].z) * _2323) + (((cbLight._m0[_2289].z * _2255) * _2298) * _2321);
    uvec4 _2336 = floatBitsToUint(cbLight._m0[_2262 + 12u]);
    bool _2338 = _2336.x == 0u;
    float _2440;
    float _2442;
    float _2444;
    if (_2338)
    {
        _2440 = _2330;
        _2442 = _2331;
        _2444 = _2332;
    }
    else
    {
        uint _2448 = _2262 + 6u;
        float _2464 = (dot(vec3(cbLight._m0[_2262 + 2u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2465 = _2464 * _2464;
        float _4596 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2466 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2467 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2440 = (((cbLight._m0[_2448].x * 0.3183098733425140380859375) * _2466) * _2467) + _2330;
        _2442 = (((cbLight._m0[_2448].y * 0.3183098733425140380859375) * _2466) * _2467) + _2331;
        _2444 = (((cbLight._m0[_2448].z * 0.3183098733425140380859375) * _2466) * _2467) + _2332;
    }
    bool _2447 = _2336.y == 0u;
    float _2502;
    float _2504;
    float _2506;
    if (_2447)
    {
        _2502 = _2440;
        _2504 = _2442;
        _2506 = _2444;
    }
    else
    {
        uint _2664 = _2262 + 7u;
        float _2680 = (dot(vec3(cbLight._m0[_2262 + 3u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2681 = _2680 * _2680;
        float _4612 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2682 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2683 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2502 = (((cbLight._m0[_2664].x * 0.3183098733425140380859375) * _2682) * _2683) + _2440;
        _2504 = (((cbLight._m0[_2664].y * 0.3183098733425140380859375) * _2682) * _2683) + _2442;
        _2506 = (((cbLight._m0[_2664].z * 0.3183098733425140380859375) * _2682) * _2683) + _2444;
    }
    uint _2509 = _2262 + 8u;
    float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _777) * 0.949999988079071044921875);
    float _2523 = _2522 * _2522;
    float _2524 = cbLight._m0[_2262].x + _853;
    float _2525 = cbLight._m0[_2262].y + _854;
    float _2526 = cbLight._m0[_2262].z + _855;
    float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
    float _2531 = _2530 * _2524;
    float _2532 = _2530 * _2525;
    float _2533 = _2530 * _2526;
    float _2534 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2262].xyz));
    float _4628 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2537 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _4639 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _2538 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2539 = dot(vec3(_774, _775, _776), vec3(_2531, _2532, _2533));
    float _4650 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2542 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2543 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2531, _2532, _2533));
    float _4661 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2547 = _2523 * _2523;
    float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
    float _2562 = (exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2563 = 1.0 - _2523;
    float _2574 = (0.5 / (((_2538 * ((_2537 * _2563) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2563) + _2523) * _2537))) * _2537;
    float _4672 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2576 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
    uint _2590 = _2262 + 9u;
    float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _777) * 0.949999988079071044921875);
    float _2602 = _2601 * _2601;
    float _2603 = cbLight._m0[_2302].x + _853;
    float _2604 = cbLight._m0[_2302].y + _854;
    float _2605 = cbLight._m0[_2302].z + _855;
    float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
    float _2610 = _2609 * _2603;
    float _2611 = _2609 * _2604;
    float _2612 = _2609 * _2605;
    float _2613 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2302].xyz));
    float _4683 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
    float _2617 = dot(vec3(_774, _775, _776), vec3(_2610, _2611, _2612));
    float _4694 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2620 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
    float _2621 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2610, _2611, _2612));
    float _4705 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2625 = _2602 * _2602;
    float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
    float _2638 = (exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2639 = 1.0 - _2602;
    float _2649 = (0.5 / (((_2538 * ((_2616 * _2639) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2639) + _2602) * _2616))) * _2616;
    float _4716 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2651 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
    float _2661 = (((_2638 * cbLight._m0[_2590].x) * _2651) * _2285) + ((((cbLight._m0[_2509].x * _2251) * _2562) * _2576) * _2298);
    float _2662 = (((_2638 * cbLight._m0[_2590].y) * _2651) * _2285) + ((((cbLight._m0[_2509].y * _2253) * _2562) * _2576) * _2298);
    float _2663 = (((_2638 * cbLight._m0[_2590].z) * _2651) * _2285) + ((((cbLight._m0[_2509].z * _2255) * _2562) * _2576) * _2298);
    float _2719;
    float _2721;
    float _2723;
    if (_2338)
    {
        _2719 = _2661;
        _2721 = _2662;
        _2723 = _2663;
    }
    else
    {
        uint _2725 = _2262 + 2u;
        uint _2729 = _2262 + 10u;
        float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2725].w)) * _777) * 0.949999988079071044921875);
        float _2744 = _2743 * _2743;
        float _2745 = cbLight._m0[_2725].x + _853;
        float _2746 = cbLight._m0[_2725].y + _854;
        float _2747 = cbLight._m0[_2725].z + _855;
        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
        float _2752 = _2751 * _2745;
        float _2753 = _2751 * _2746;
        float _2754 = _2751 * _2747;
        float _2755 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2725].xyz));
        float _4727 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _2759 = dot(vec3(_774, _775, _776), vec3(_2752, _2753, _2754));
        float _4738 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2763 = dot(vec3(cbLight._m0[_2725].xyz), vec3(_2752, _2753, _2754));
        float _4749 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2767 = _2744 * _2744;
        float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
        float _2780 = (exp2(log2(1.0 - (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2781 = 1.0 - _2744;
        float _2791 = (0.5 / (((_2538 * ((_2758 * _2781) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2781) + _2744) * _2758))) * _2758;
        float _4760 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2793 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
        float _2794 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2719 = (((_2780 * cbLight._m0[_2729].x) * _2793) * _2794) + _2661;
        _2721 = (((_2780 * cbLight._m0[_2729].y) * _2793) * _2794) + _2662;
        _2723 = (((_2780 * cbLight._m0[_2729].z) * _2793) * _2794) + _2663;
    }
    float _2825;
    float _2827;
    float _2829;
    if (_2447)
    {
        _2825 = _2719;
        _2827 = _2721;
        _2829 = _2723;
    }
    else
    {
        uint _2836 = _2262 + 3u;
        uint _2840 = _2262 + 11u;
        float _2854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2836].w)) * _777) * 0.949999988079071044921875);
        float _2855 = _2854 * _2854;
        float _2856 = cbLight._m0[_2836].x + _853;
        float _2857 = cbLight._m0[_2836].y + _854;
        float _2858 = cbLight._m0[_2836].z + _855;
        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
        float _2863 = _2862 * _2856;
        float _2864 = _2862 * _2857;
        float _2865 = _2862 * _2858;
        float _2866 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2836].xyz));
        float _4776 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2869 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
        float _2870 = dot(vec3(_774, _775, _776), vec3(_2863, _2864, _2865));
        float _4787 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2874 = dot(vec3(cbLight._m0[_2836].xyz), vec3(_2863, _2864, _2865));
        float _4798 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2878 = _2855 * _2855;
        float _2882 = ((_2873 * _2873) * (_2878 + (-1.0))) + 1.0;
        float _2891 = (exp2(log2(1.0 - (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2892 = 1.0 - _2855;
        float _2902 = (0.5 / (((_2538 * ((_2869 * _2892) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2892) + _2855) * _2869))) * _2869;
        float _4809 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2904 = (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2878 / ((_2882 * _2882) * 3.141590118408203125));
        float _2905 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2825 = (((_2891 * cbLight._m0[_2840].x) * _2904) * _2905) + _2719;
        _2827 = (((_2891 * cbLight._m0[_2840].y) * _2904) * _2905) + _2721;
        _2829 = (((_2891 * cbLight._m0[_2840].z) * _2904) * _2905) + _2723;
    }
    float _2971;
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    if (_2260.y == 0u)
    {
        uvec4 _2926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2927 = _2926.x;
        uint _2938 = uint((float(_2926.y) * floor(float(uint(cbSceneParam._m0[85u].y * _874) / _2927))) + floor(float(uint(cbSceneParam._m0[85u].x * _873) / _2927)));
        float _2948 = (log2(_2038 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2949 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        uint _2952 = uint(isnan(14.0) ? _2949 : (isnan(_2949) ? 14.0 : min(_2949, 14.0)));
        uvec4 _2957 = texelFetch(g_lightClusterGridBuffer, int(((_2952 << 2u) + (_2938 << 6u)) >> 2u));
        uint _2958 = _2957.x;
        uint _2959 = _2926.z;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        if (((((1u << ((_2959 >> 4u) & 15u)) + 4294967295u) & _2958) == 0u) || ((_2959 & 240u) == 0u))
        {
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
        }
        else
        {
            float _3039;
            float _3041;
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            uint _3197 = 0u;
            uint _3206;
            bool _3207;
            for (;;)
            {
                _3206 = texelFetch(g_lightClassification, int((((_2952 << 5u) + (_2938 << 9u)) + (_3197 << 2u)) >> 2u)).x;
                _3207 = _3206 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3207)
                {
                    frontier_phi_71_pred = _3196;
                    frontier_phi_71_pred_1 = _3195;
                    frontier_phi_71_pred_2 = _3194;
                    frontier_phi_71_pred_3 = _3193;
                    frontier_phi_71_pred_4 = _3192;
                    frontier_phi_71_pred_5 = _3191;
                }
                else
                {
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    uint _3342;
                    _3336 = _3191;
                    _3337 = _3192;
                    _3338 = _3193;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3206;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    for (;;)
                    {
                        uint _3346 = uint(findLSB(_3342)) + (_3197 << 5u);
                        uint _3343 = (_3342 + 4294967295u) & _3342;
                        uint _3348 = _3346 * 48u;
                        vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3348)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 3u)).x));
                        uint _3368 = (_3346 * 48u) + 4u;
                        vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3387 = (_3346 * 48u) + 8u;
                        vec3 _3398 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x));
                        float _3402 = _3362.x - _2036;
                        float _3403 = _3362.y - _2037;
                        float _3404 = _3362.z - _2038;
                        float _3405 = dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404));
                        float _3408 = inversesqrt(_3405);
                        float _3409 = _3408 * _3402;
                        float _3410 = _3408 * _3403;
                        float _3411 = _3408 * _3404;
                        float _3412 = dot(vec3(_892, _895, _898), vec3(_3409, _3410, _3411));
                        float _3417 = 1.0 - (_3405 * _3362.w);
                        float _4835 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3419 = sqrt(_3405) * _3381.w;
                        float _3422 = 1.39999997615814208984375 / (_3419 + 1.39999997615814208984375);
                        float _3423 = _3422 * _3422;
                        float _3426 = ((1.0 - _3423) * _3412) + _3423;
                        float _3429 = _3419 * _3419;
                        float _3433 = ((isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0))) * _3418) / ((_3429 * 0.699999988079071044921875) + 1.0);
                        float _3437 = (-0.0) - _2036;
                        float _3438 = (-0.0) - _2037;
                        float _3439 = (-0.0) - _2038;
                        float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                        float _3444 = _3443 * _3437;
                        float _3445 = _3443 * _3438;
                        float _3446 = _3443 * _3439;
                        float _3453 = exp2(log2(1.0 / ((_3429 * 3.5) + 5.0)) * 0.25);
                        float _3454 = 1.0 - _952;
                        float _3461 = sqrt(1.0 - ((1.0 - (_3454 * _3454)) * (1.0 - (_3453 * _3453))));
                        float _3462 = _3461 * _3461;
                        float _3463 = _3462 * _3462;
                        float _3464 = _3444 + _3409;
                        float _3465 = _3445 + _3410;
                        float _3466 = _3446 + _3411;
                        float _3470 = inversesqrt(dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466)));
                        float _3474 = dot(vec3(_892, _895, _898), vec3(_3444, _3445, _3446));
                        float _4851 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3477 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                        float _3478 = dot(vec3(_892, _895, _898), vec3(_3470 * _3464, _3470 * _3465, _3470 * _3466));
                        float _4862 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3481 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                        float _3485 = ((_3481 * _3481) * (_3463 + (-1.0))) + 1.0;
                        float _3486 = _3422 * _3462;
                        float _3487 = _3486 * _3486;
                        float _3490 = ((1.0 - _3487) * _3412) + _3487;
                        float _4873 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3491 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3492 = 1.0 - _3462;
                        float _3502 = (0.5 / (((_3491 * ((_3477 * _3492) + _3462)) + 9.9999999392252902907785028219223e-09) + (((_3491 * _3492) + _3462) * _3477))) * _3491;
                        float _4884 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3513 = (((_3463 * 3.1415927410125732421875) * (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) / ((_3485 * _3485) * ((_3429 * 2.1991131305694580078125) + 3.141590118408203125))) * _3418;
                        _3266 = (_3433 * _3381.x) + _3339;
                        _3267 = (_3433 * _3381.y) + _3340;
                        _3268 = (_3433 * _3381.z) + _3341;
                        _3263 = (_3513 * _3398.x) + _3336;
                        _3264 = (_3513 * _3398.y) + _3337;
                        _3265 = (_3513 * _3398.z) + _3338;
                        if (_3343 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3336 = _3263;
                            _3337 = _3264;
                            _3338 = _3265;
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3343;
                        }
                    }
                    frontier_phi_71_pred = _3268;
                    frontier_phi_71_pred_1 = _3267;
                    frontier_phi_71_pred_2 = _3266;
                    frontier_phi_71_pred_3 = _3265;
                    frontier_phi_71_pred_4 = _3264;
                    frontier_phi_71_pred_5 = _3263;
                }
                _3049 = frontier_phi_71_pred;
                _3047 = frontier_phi_71_pred_1;
                _3045 = frontier_phi_71_pred_2;
                _3043 = frontier_phi_71_pred_3;
                _3041 = frontier_phi_71_pred_4;
                _3039 = frontier_phi_71_pred_5;
                uint _3198 = _3197 + 1u;
                if (_3198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3191 = _3039;
                    _3192 = _3041;
                    _3193 = _3043;
                    _3194 = _3045;
                    _3195 = _3047;
                    _3196 = _3049;
                    _3197 = _3198;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
        }
        uvec4 _3052 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3053 = _3052.z;
        uint _3055 = (_3053 >> 8u) & 15u;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        if (((4294967295u << _3055) & _2958) == 0u)
        {
            _3159 = _3038;
            _3161 = _3040;
            _3163 = _3042;
            _3165 = _3044;
            _3167 = _3046;
            _3169 = _3048;
        }
        else
        {
            float _3184 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
            float _3185 = _3184 * _2036;
            float _3186 = _3184 * _2037;
            float _3187 = _3184 * _2038;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3055 < ((_3053 >> 12u) & 15u))
            {
                float _3160;
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3319 = _3038;
                float _3320 = _3040;
                float _3321 = _3042;
                float _3322 = _3044;
                float _3323 = _3046;
                float _3324 = _3048;
                uint _3325 = _3055;
                uint _3334;
                bool _3335;
                for (;;)
                {
                    _3334 = texelFetch(g_lightClassification, int((((_2952 << 5u) + (_2938 << 9u)) + (_3325 << 2u)) >> 2u)).x;
                    _3335 = _3334 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3335)
                    {
                        frontier_phi_82_pred = _3324;
                        frontier_phi_82_pred_1 = _3323;
                        frontier_phi_82_pred_2 = _3322;
                        frontier_phi_82_pred_3 = _3321;
                        frontier_phi_82_pred_4 = _3320;
                        frontier_phi_82_pred_5 = _3319;
                    }
                    else
                    {
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3540 = _3319;
                        float _3541 = _3320;
                        float _3542 = _3321;
                        float _3543 = _3322;
                        float _3544 = _3323;
                        float _3545 = _3324;
                        uint _3546 = _3334;
                        uint _3547;
                        vec4 _3572;
                        float _3573;
                        vec4 _3588;
                        vec3 _3600;
                        vec4 _3615;
                        vec4 _3630;
                        float _3676;
                        bool _3677;
                        for (;;)
                        {
                            uint _3557 = ((_3325 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3546));
                            _3547 = (_3546 + 4294967295u) & _3546;
                            uint _3559 = _3557 * 40u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            _3573 = _3572.w;
                            uint _3575 = (_3557 * 40u) + 4u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3590 = (_3557 * 40u) + 8u;
                            _3600 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x));
                            uint _3602 = (_3557 * 40u) + 16u;
                            _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3617 = (_3557 * 40u) + 20u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3557 * 40u) + 24u;
                            vec4 _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3651 = (_3557 * 40u) + 28u;
                            vec4 _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            _3676 = fma(_2038, _3664.z, fma(_2037, _3664.y, _3664.x * _2036)) + _3664.w;
                            _3677 = !((fma(_2038, _3645.z, fma(_2037, _3645.y, _3645.x * _2036)) + _3645.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3677)
                            {
                                float _3704 = _3572.x - _2036;
                                float _3705 = _3572.y - _2037;
                                float _3706 = _3572.z - _2038;
                                float _3707 = dot(vec3(_3704, _3705, _3706), vec3(_3704, _3705, _3706));
                                float _3710 = inversesqrt(_3707);
                                float _3711 = _3710 * _3704;
                                float _3712 = _3710 * _3705;
                                float _3713 = _3710 * _3706;
                                float _3717 = 1.0 - (_3707 / (_3573 * _3573));
                                float _4895 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3718 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3722 = sqrt(_3707) * _3588.w;
                                float _3724 = 1.39999997615814208984375 / (_3722 + 1.39999997615814208984375);
                                float _3725 = _3724 * _3724;
                                float _3728 = ((1.0 - _3725) * dot(vec3(_3711, _3712, _3713), vec3(_892, _895, _898))) + _3725;
                                float _3731 = _3722 * _3722;
                                float _3735 = (fma(_2038, _3615.z, fma(_2037, _3615.y, _3615.x * _2036)) + _3615.w) / _3676;
                                float _3736 = (fma(_2038, _3630.z, fma(_2037, _3630.y, _3630.x * _2036)) + _3630.w) / _3676;
                                float _3740 = 1.0 - dot(vec2(_3735, _3736), vec2(_3735, _3736));
                                float _4911 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3742 = _3741 * (((isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0))) * _3718) / ((_3731 * 0.699999988079071044921875) + 1.0));
                                float _3754 = exp2(log2(1.0 / ((_3731 * 3.5) + 5.0)) * 0.25);
                                float _3755 = 1.0 - _952;
                                float _3762 = sqrt(1.0 - ((1.0 - (_3755 * _3755)) * (1.0 - (_3754 * _3754))));
                                float _3763 = _3762 * _3762;
                                float _3764 = _3763 * _3763;
                                float _3765 = _3711 - _3185;
                                float _3766 = _3712 - _3186;
                                float _3767 = _3713 - _3187;
                                float _3771 = inversesqrt(dot(vec3(_3765, _3766, _3767), vec3(_3765, _3766, _3767)));
                                float _3775 = dot(vec3(_892, _895, _898), vec3((-0.0) - _3185, (-0.0) - _3186, (-0.0) - _3187));
                                float _4922 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3778 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                                float _3779 = dot(vec3(_892, _895, _898), vec3(_3771 * _3765, _3771 * _3766, _3771 * _3767));
                                float _4933 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3782 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3786 = ((_3782 * _3782) * (_3764 + (-1.0))) + 1.0;
                                float _3787 = _3724 * _3763;
                                float _3788 = _3787 * _3787;
                                float _3794 = ((1.0 - _3788) * dot(vec3(_892, _895, _898), vec3(_3711, _3712, _3713))) + _3788;
                                float _4944 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3795 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3796 = 1.0 - _3763;
                                float _3806 = (0.5 / (((_3795 * ((_3778 * _3796) + _3763)) + 9.9999999392252902907785028219223e-09) + (((_3795 * _3796) + _3763) * _3778))) * _3795;
                                float _4955 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3816 = (_3741 * _3718) * (((_3764 * 3.1415927410125732421875) * (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0)))) / ((_3786 * _3786) * ((_3731 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3742 * _3588.z;
                                frontier_phi_88_pred_1 = _3742 * _3588.y;
                                frontier_phi_88_pred_2 = _3742 * _3588.x;
                                frontier_phi_88_pred_3 = _3816 * _3600.z;
                                frontier_phi_88_pred_4 = _3816 * _3600.y;
                                frontier_phi_88_pred_5 = _3816 * _3600.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3825 = frontier_phi_88_pred;
                            _3824 = frontier_phi_88_pred_1;
                            _3823 = frontier_phi_88_pred_2;
                            _3822 = frontier_phi_88_pred_3;
                            _3821 = frontier_phi_88_pred_4;
                            _3820 = frontier_phi_88_pred_5;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            _3532 = _3825 + _3545;
                            _3527 = _3820 + _3540;
                            _3528 = _3821 + _3541;
                            _3529 = _3822 + _3542;
                            if (_3547 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3547;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3532;
                        frontier_phi_82_pred_1 = _3531;
                        frontier_phi_82_pred_2 = _3530;
                        frontier_phi_82_pred_3 = _3529;
                        frontier_phi_82_pred_4 = _3528;
                        frontier_phi_82_pred_5 = _3527;
                    }
                    _3170 = frontier_phi_82_pred;
                    _3168 = frontier_phi_82_pred_1;
                    _3166 = frontier_phi_82_pred_2;
                    _3164 = frontier_phi_82_pred_3;
                    _3162 = frontier_phi_82_pred_4;
                    _3160 = frontier_phi_82_pred_5;
                    uint _3326 = _3325 + 1u;
                    if (_3326 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3319 = _3160;
                        _3320 = _3162;
                        _3321 = _3164;
                        _3322 = _3166;
                        _3323 = _3168;
                        _3324 = _3170;
                        _3325 = _3326;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3166;
                frontier_phi_63_64_ladder_1 = _3170;
                frontier_phi_63_64_ladder_2 = _3168;
                frontier_phi_63_64_ladder_3 = _3164;
                frontier_phi_63_64_ladder_4 = _3162;
                frontier_phi_63_64_ladder_5 = _3160;
            }
            else
            {
                frontier_phi_63_64_ladder = _3044;
                frontier_phi_63_64_ladder_1 = _3048;
                frontier_phi_63_64_ladder_2 = _3046;
                frontier_phi_63_64_ladder_3 = _3042;
                frontier_phi_63_64_ladder_4 = _3040;
                frontier_phi_63_64_ladder_5 = _3038;
            }
            _3159 = frontier_phi_63_64_ladder_5;
            _3161 = frontier_phi_63_64_ladder_4;
            _3163 = frontier_phi_63_64_ladder_3;
            _3165 = frontier_phi_63_64_ladder;
            _3167 = frontier_phi_63_64_ladder_2;
            _3169 = frontier_phi_63_64_ladder_1;
        }
        float _3174 = isnan(1.0) ? _936 : (isnan(_936) ? 1.0 : min(_936, 1.0));
        _2971 = (_3174 * _3165) + _2502;
        _2973 = (_3174 * _3167) + _2504;
        _2975 = (_3174 * _3169) + _2506;
        _2977 = ((_3159 * 0.039999999105930328369140625) * _3174) + _2825;
        _2979 = ((_3161 * 0.039999999105930328369140625) * _3174) + _2827;
        _2981 = ((_3163 * 0.039999999105930328369140625) * _3174) + _2829;
    }
    else
    {
        _2971 = _2502;
        _2973 = _2504;
        _2975 = _2506;
        _2977 = _2825;
        _2979 = _2827;
        _2981 = _2829;
    }
    float _4971 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _4982 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _4993 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _2998 = ((isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0))) * (_2971 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _936))) + ((_2977 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _2999 = ((isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0))) * (_2973 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _936))) + ((_2979 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _3000 = ((isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_2975 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _936))) + ((_2981 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    uint _3001 = _246 + 6u;
    float _3009 = _873 / cbSceneParam._m0[86u].x;
    float _3010 = _874 / cbSceneParam._m0[86u].y;
    vec4 _3024 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3009, _3010, (log2((isnan(cbSceneParam._m0[77u].w) ? _795 : (isnan(_795) ? cbSceneParam._m0[77u].w : min(_795, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3026 = _3024.x;
    float _3027 = _3024.y;
    float _3028 = _3024.z;
    float _3029 = _3024.w;
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    if (_795 > cbSceneParam._m0[78u].w)
    {
        float _3063 = isnan(_795) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _795 : min(cbSceneParam._m0[80u].w, _795));
        float _3064 = _3063 / _795;
        float _3075 = _3064 * _846;
        float _3076 = _847 * _3064;
        float _3077 = (-0.0) - _3076;
        float _3079 = _3064 * _848;
        float _3081 = (cbSceneParam._m0[77u].w * _3077) / _3063;
        float _3082 = _3081 + cbSceneParam._m0[79u].w;
        float _3083 = cbSceneParam._m0[79u].w - _3076;
        float _3089 = sqrt(((_3075 * _3075) + (_3076 * _3076)) + (_3079 * _3079));
        float _3092 = (1.0 - (cbSceneParam._m0[77u].w / _3063)) * _3089;
        float _3097 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3099 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3276;
        if (abs((_3077 - _3081) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3276 = ((((_3082 > 0.0) ? exp2(_3097 * _3082) : (2.0 - exp2(_3099 * _3082))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3092;
        }
        else
        {
            float _3220 = 1.0 / cbSceneParam._m0[80u].x;
            float _3221 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : max(_3082, _3083));
            float _3222 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : min(_3082, _3083));
            float _3231 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : min(_3221, 0.0));
            float _3232 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : min(_3222, 0.0));
            _3276 = ((abs(_3089 / _3077) * cbSceneParam._m0[80u].y) * ((((_3231 - _3232) * 2.0) - ((exp2(_3097 * (isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0)))) - exp2(_3097 * (isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))))) * _3220)) - ((exp2(_3099 * _3231) - exp2(_3099 * _3232)) * _3220))) + (_3092 * cbSceneParam._m0[80u].z);
        }
        vec4 _3278 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3009, _3010, 1.0), 0.0);
        float _3287 = exp2((_3276 * (-1.44269502162933349609375)) * (1.0 - _3278.w));
        float _3288 = log2(_3287);
        float _3304 = log2(_3029);
        _3101 = (exp2(_3304 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].x)) * _3278.x) / cbSceneParam._m0[78u].x)) + _3026;
        _3103 = (exp2(_3304 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].y)) * _3278.y) / cbSceneParam._m0[78u].y)) + _3027;
        _3105 = (exp2(_3304 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].z)) * _3278.z) / cbSceneParam._m0[78u].z)) + _3028;
        _3107 = _3287 * _3029;
    }
    else
    {
        _3101 = _3026;
        _3103 = _3027;
        _3105 = _3028;
        _3107 = _3029;
    }
    bool _3314;
    vec4 _3117;
    vec4 _3139;
    float _3141;
    float _3145;
    float _3146;
    float _3147;
    float _3148;
    bool _3158;
    for (;;)
    {
        _3117 = cbMatDynParam._m0[0u];
        float _3119 = roundEven(_3117.y);
        bool _3120 = _3119 == 3.0;
        float _3121 = log2(_3107);
        float _3128 = exp2(_3121 * cbSceneParam._m0[78u].x) * _2998;
        float _3129 = exp2(_3121 * cbSceneParam._m0[78u].y) * _2999;
        float _3130 = exp2(_3121 * cbSceneParam._m0[78u].z) * _3000;
        float _3137 = _862 + (-0.5);
        _3139 = cbMtdParam._m0[1u];
        _3141 = _3139.y * _3137;
        float _3144 = (_3119 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3145 = _3144 * (_3120 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3101)));
        _3146 = _3144 * (_3120 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3103)));
        _3147 = _3144 * (_3120 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3105)));
        _3148 = _3137 * 0.999000012874603271484375;
        _3158 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3158)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _3148) < 0.5)
            {
                _3314 = true;
                break;
            }
        }
        uint _3255 = _911 + uint(_3117.w);
        if ((cbInstanceData._m0[_3255].w < 1.0) && ((cbInstanceData._m0[_3255].w + _3148) < 0.5))
        {
            _3314 = true;
            break;
        }
        if ((_3141 + 1.0) < _3139.x)
        {
            _3314 = true;
            break;
        }
        _3314 = false;
        break;
    }
    float _3518;
    if (_3314)
    {
        discard_state = true;
        _3518 = 0.0;
    }
    else
    {
        _3518 = cbInstanceData._m0[_3001].w;
    }
    SV_Target.x = _3145;
    SV_Target.y = _3146;
    SV_Target.z = _3147;
    SV_Target.w = _3518;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3001].w;
    discard_exit();
}


