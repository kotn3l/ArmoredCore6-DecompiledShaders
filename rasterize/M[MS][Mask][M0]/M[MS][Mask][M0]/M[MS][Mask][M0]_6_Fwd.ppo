#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1127;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _373 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_361 - _373) * cbMtdParam._m0[24u].z) + _373) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3436 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _398 = (_391 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _399 = (_391 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _400 = (_391 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _434 = _430.z;
    float _443 = ((_413.z - _434) * _391) + _434;
    float _446 = ((((_413.x - _432) * _391) + _432) * 2.0) + (-1.0);
    float _448 = ((((_413.y - _433) * _391) + _433) * 2.0) + (-1.0);
    float _449 = dot(vec2(_446, _448), vec2(_446, _448));
    float _3447 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _454 = sqrt(1.0 - (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _482 = (((_470.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _446;
    float _483 = (((_470.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _448;
    vec4 _495 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _497 = _495.x;
    float _498 = 1.0 - _497;
    float _526 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_497 - _498) * cbMtdParam._m0[24u].y) + _498) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3458 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _535 = ((((cbMtdParam._m0[10u].x - _398) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _527) + _398;
    float _536 = ((((cbMtdParam._m0[10u].y - _399) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _527) + _399;
    float _537 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _400)) * _527) + _400;
    float _541 = (cbMtdParam._m0[19u].w * (_470.z - _443)) + _443;
    float _545 = ((cbMtdParam._m0[23u].y - _541) * _527) + _541;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _570 = (_564.x * 2.0) + (-1.0);
    float _571 = (_564.y * 2.0) + (-1.0);
    float _572 = dot(vec2(_570, _571), vec2(_570, _571));
    float _3469 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _588 = (_527 * (((cbMtdParam._m0[22u].z * _482) - _482) + _570)) + _482;
    float _589 = (_527 * (((cbMtdParam._m0[22u].z * _483) - _483) + _571)) + _483;
    float _590 = (_527 * (sqrt(1.0 - (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) - _454)) + _454;
    float _592 = cbMtdParam._m0[22u].x + _470.w;
    float _595 = fma(_590, _226 * NORMAL.x, fma(_589, _233 * TANGENT.x, (_219 * _211) * _588));
    float _598 = fma(_590, _226 * NORMAL.y, fma(_589, _233 * TANGENT.y, (_219 * _212) * _588));
    float _601 = fma(_590, _226 * NORMAL.z, fma(_589, _233 * TANGENT.z, (_219 * _213) * _588));
    float _605 = inversesqrt(dot(vec3(_595, _598, _601), vec3(_595, _598, _601)));
    float _606 = _605 * _595;
    float _607 = _605 * _598;
    float _608 = _605 * _601;
    float _3480 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _609 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _3502 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _3513 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3524 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _627 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _678 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _668);
    float _679 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _668);
    float _680 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _668);
    float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
    float _685 = _678 * _684;
    float _686 = _679 * _684;
    float _687 = _680 * _684;
    float _693 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _694 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _712 = fma(_608, cbSceneParam._m0[5u].z, fma(_607, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _606));
    float _715 = fma(_608, cbSceneParam._m0[6u].z, fma(_607, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _606));
    float _718 = fma(_608, cbSceneParam._m0[7u].z, fma(_607, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _606));
    uint _732 = (_239 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _738 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_732].x;
    float _739 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_732].y;
    float _740 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * cbInstanceData._m0[_732].z;
    float _3535 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    vec4 _752 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _693, cbSceneParam._m0[86u].y * _694));
    float _756 = ((isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * TEXCOORD_5.w) * _752.x;
    float _757 = dot(vec3(_606, _607, _608), vec3(_685, _686, _687));
    float _760 = _757 * 2.0;
    float _764 = (_760 * _606) - _685;
    float _765 = (_760 * _607) - _686;
    float _766 = (_760 * _608) - _687;
    float _770 = abs(dot(vec3(_685, _686, _687), vec3(_606, _607, _608)));
    float _3568 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _772 = sqrt(_609);
    float _785 = exp2((_772 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_772 * 3.0));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1126;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _851 = fma(_825, cbModelParam._m0[26u].z, fma(_821, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _817));
        float _855 = fma(_825, cbModelParam._m0[27u].z, fma(_821, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _817));
        float _859 = fma(_825, cbModelParam._m0[28u].z, fma(_821, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _817));
        float _884 = _817 + _606;
        float _885 = _821 + _607;
        float _886 = _825 + _608;
        float _896 = fma(_886, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _884)) - _851;
        float _897 = fma(_886, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _884)) - _855;
        float _898 = fma(_886, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _884)) - _859;
        float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
        float _915 = ((_902 * _896) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_851 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_902 * _897) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_855 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_902 * _898) / cbModelParam._m0[34u].z) + ((((((_859 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        float _954 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_920.x + (-0.5));
        float _956 = _954 * (_920.y + (-0.5));
        float _957 = _954 * (_920.z + (-0.5));
        float _964 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_927.x + (-0.5));
        float _966 = _964 * (_927.y + (-0.5));
        float _967 = _964 * (_927.z + (-0.5));
        float _974 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_934.x + (-0.5));
        float _976 = _974 * (_934.y + (-0.5));
        float _977 = _974 * (_934.z + (-0.5));
        float _984 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_941.x + (-0.5));
        float _986 = _984 * (_941.y + (-0.5));
        float _987 = _984 * (_941.z + (-0.5));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = _955 * 0.5;
        float _992 = _965 * 0.5;
        float _993 = _975 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1008 = (dot(vec3(_606, _607, _608), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1018 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3616 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_1020 + 1.0))) + _1025) * _988;
        float _1035 = _956 * 0.5;
        float _1036 = _966 * 0.5;
        float _1037 = _976 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_606, _607, _608), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3649 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1062 + 1.0))) + _1067) * _989;
        float _1077 = _957 * 0.5;
        float _1078 = _967 * 0.5;
        float _1079 = _977 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_606, _607, _608), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3682 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1104 + 1.0))) + _1109) * _990;
        _1126 = _957;
        _1128 = _956;
        _1129 = _955;
        _1130 = _967;
        _1131 = _966;
        _1132 = _965;
        _1133 = _977;
        _1134 = _976;
        _1135 = _975;
        _1136 = _990;
        _1137 = _989;
        _1138 = _988;
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
    }
    else
    {
        _1126 = _1127;
        _1128 = _1127;
        _1129 = _1127;
        _1130 = _1127;
        _1131 = _1127;
        _1132 = _1127;
        _1133 = _1127;
        _1134 = _1127;
        _1135 = _1127;
        _1136 = _1127;
        _1137 = _1127;
        _1138 = _1127;
        _1139 = 0.0;
        _1140 = 0.0;
        _1141 = 0.0;
    }
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1166 = fma(_825, cbModelParam._m0[30u].z, fma(_821, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _817));
        float _1170 = fma(_825, cbModelParam._m0[31u].z, fma(_821, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _817));
        float _1174 = fma(_825, cbModelParam._m0[32u].z, fma(_821, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _817));
        float _1197 = _817 + _606;
        float _1198 = _821 + _607;
        float _1199 = _825 + _608;
        float _1209 = fma(_1199, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197)) - _1166;
        float _1210 = fma(_1199, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197)) - _1170;
        float _1211 = fma(_1199, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197)) - _1174;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1166 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1170 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[35u].z) + ((((((_1174 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1265 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1232.x + (-0.5));
        float _1267 = _1265 * (_1232.y + (-0.5));
        float _1268 = _1265 * (_1232.z + (-0.5));
        float _1275 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1239.x + (-0.5));
        float _1277 = _1275 * (_1239.y + (-0.5));
        float _1278 = _1275 * (_1239.z + (-0.5));
        float _1285 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1246.x + (-0.5));
        float _1287 = _1285 * (_1246.y + (-0.5));
        float _1288 = _1285 * (_1246.z + (-0.5));
        float _1295 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1253.x + (-0.5));
        float _1297 = _1295 * (_1253.y + (-0.5));
        float _1298 = _1295 * (_1253.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_606, _607, _608), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3745 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1329 + 1.0))) + _1334) * _1299;
        float _1344 = _1267 * 0.5;
        float _1345 = _1277 * 0.5;
        float _1346 = _1287 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_606, _607, _608), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3778 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1371 + 1.0))) + _1376) * _1300;
        float _1386 = _1268 * 0.5;
        float _1387 = _1278 * 0.5;
        float _1388 = _1288 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_606, _607, _608), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3811 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1413 + 1.0))) + _1418) * _1301;
        _1435 = _1268;
        _1436 = _1267;
        _1437 = _1266;
        _1438 = _1278;
        _1439 = _1277;
        _1440 = _1276;
        _1441 = _1288;
        _1442 = _1287;
        _1443 = _1286;
        _1444 = _1301;
        _1445 = _1300;
        _1446 = _1299;
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1127;
        _1436 = _1127;
        _1437 = _1127;
        _1438 = _1127;
        _1439 = _1127;
        _1440 = _1127;
        _1441 = _1127;
        _1442 = _1127;
        _1443 = _1127;
        _1444 = _1127;
        _1445 = _1127;
        _1446 = _1127;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1139)) + _1139;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1140)) + _1140;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1141)) + _1141;
    float _1482 = fma(_1461, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1459 * cbSceneParam._m0[89u].x));
    float _1485 = fma(_1461, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1459 * cbSceneParam._m0[90u].x));
    float _1488 = fma(_1461, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1459));
    float _1503 = _764 * 0.5;
    float _1504 = _765 * 0.5;
    float _1505 = _766 * 0.5;
    float _1506 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1509 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1512 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1546;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1519 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1126, _1130, _1133, _1136));
        float _1523 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1527 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1534 = dot(vec4(cbModelParam._m0[39u]), vec4(_1503, _1504, _1505, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1557;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1548 = dot(vec4(cbModelParam._m0[40u]), vec4(_1503, _1504, _1505, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1561 = (_1557 * cbModelParam._m0[1u].x) + (_1546 * (1.0 - cbModelParam._m0[1u].x));
    float _1571 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _609);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1571 : min(cbModelParam._m0[25u].z, _1571));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1621 = fma(_825, cbModelParam._m0[13u].z, fma(_821, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817)) + cbModelParam._m0[13u].w;
        float _1625 = fma(_825, cbModelParam._m0[14u].z, fma(_821, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817)) + cbModelParam._m0[14u].w;
        float _1629 = fma(_825, cbModelParam._m0[15u].z, fma(_821, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817)) + cbModelParam._m0[15u].w;
        float _1632 = fma(_766, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764));
        float _1635 = fma(_766, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764));
        float _1638 = fma(_766, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764));
        float _1666;
        if (_1632 > 0.0)
        {
            _1666 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1666 = frontier_phi_14_12_ladder;
        }
        float _1868;
        if (_1635 > 0.0)
        {
            _1868 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1868 = frontier_phi_23_19_ladder;
        }
        float _2111;
        if (_1638 > 0.0)
        {
            _2111 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2111 = frontier_phi_35_30_ladder;
        }
        float _2113 = isnan(_1868) ? _1666 : (isnan(_1666) ? _1868 : min(_1666, _1868));
        float _2114 = isnan(_2111) ? _2113 : (isnan(_2113) ? _2111 : min(_2113, _2111));
        float _2118 = (_2114 * _1632) + _1621;
        float _2119 = (_2114 * _1635) + _1625;
        float _2120 = (_2114 * _1638) + _1629;
        float _2121 = _2114 * 9.9999997473787516355514526367188e-05;
        float _2123 = (-1.0) - _2121;
        float _2125 = _2121 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2120 > _2125) || ((_2120 < _2123) || ((_2119 > _2125) || ((_2119 < _2123) || ((_2118 < _2123) || (_2118 > _2125))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2244 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2120, cbModelParam._m0[9u].z, fma(_2119, cbModelParam._m0[9u].y, _2118 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2120, cbModelParam._m0[10u].z, fma(_2119, cbModelParam._m0[10u].y, _2118 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2120, cbModelParam._m0[11u].z, fma(_2119, cbModelParam._m0[11u].y, _2118 * cbModelParam._m0[11u].x))), _1572);
            frontier_phi_13_35_ladder = _2244.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2244.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2244.x * cbModelParam._m0[1u].y;
        }
        _1654 = frontier_phi_13_35_ladder_2;
        _1656 = frontier_phi_13_35_ladder_1;
        _1658 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_764, _765, _766), _1572);
        _1654 = _1642.x * cbModelParam._m0[1u].y;
        _1656 = _1642.y * cbModelParam._m0[1u].y;
        _1658 = _1642.z * cbModelParam._m0[1u].y;
    }
    float _1662 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _609);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1662 : min(cbModelParam._m0[25u].w, _1662));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1718 = fma(_825, cbModelParam._m0[21u].z, fma(_821, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817)) + cbModelParam._m0[21u].w;
        float _1722 = fma(_825, cbModelParam._m0[22u].z, fma(_821, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817)) + cbModelParam._m0[22u].w;
        float _1726 = fma(_825, cbModelParam._m0[23u].z, fma(_821, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817)) + cbModelParam._m0[23u].w;
        float _1729 = fma(_766, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764));
        float _1732 = fma(_766, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764));
        float _1735 = fma(_766, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764));
        float _1873;
        if (_1729 > 0.0)
        {
            _1873 = abs((1.0 - _1718) / _1729);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1718 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1873 = frontier_phi_25_21_ladder;
        }
        float _2138;
        if (_1732 > 0.0)
        {
            _2138 = abs((1.0 - _1722) / _1732);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1722 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2138 = frontier_phi_37_32_ladder;
        }
        float _2343;
        if (_1735 > 0.0)
        {
            _2343 = abs((1.0 - _1726) / _1735);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1726 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2343 = frontier_phi_46_43_ladder;
        }
        float _2345 = isnan(_2138) ? _1873 : (isnan(_1873) ? _2138 : min(_1873, _2138));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1729) + _1718;
        float _2351 = (_2346 * _1732) + _1722;
        float _2352 = (_2346 * _1735) + _1726;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2354 = (-1.0) - _2353;
        float _2356 = _2353 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2352 > _2356) || ((_2352 < _2354) || ((_2351 > _2356) || ((_2351 < _2354) || ((_2350 < _2354) || (_2350 > _2356))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2551 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2352, cbModelParam._m0[17u].z, fma(_2351, cbModelParam._m0[17u].y, _2350 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2352, cbModelParam._m0[18u].z, fma(_2351, cbModelParam._m0[18u].y, _2350 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2352, cbModelParam._m0[19u].z, fma(_2351, cbModelParam._m0[19u].y, _2350 * cbModelParam._m0[19u].x))), _1663);
            frontier_phi_22_46_ladder = _2551.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2551.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2551.x * cbModelParam._m0[1u].z;
        }
        _1754 = frontier_phi_22_46_ladder_2;
        _1756 = frontier_phi_22_46_ladder_1;
        _1758 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_764, _765, _766), _1663);
        _1754 = _1738.x * cbModelParam._m0[1u].z;
        _1756 = _1738.y * cbModelParam._m0[1u].z;
        _1758 = _1738.z * cbModelParam._m0[1u].z;
    }
    float _1770 = ((((1.0 - _785) * ((_772 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_785 * _772)) * _756;
    float _1771 = _1770 * ((cbModelParam._m0[1u].w * (_1754 - _1654)) + _1654);
    float _1772 = _1770 * ((cbModelParam._m0[1u].w * (_1756 - _1656)) + _1656);
    float _1773 = _1770 * ((cbModelParam._m0[1u].w * (_1758 - _1658)) + _1658);
    float _1776 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1772, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1772, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1772, cbSceneParam._m0[91u].y, _1771 * cbSceneParam._m0[91u].x));
    uvec4 _1792 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1794 = _1792.x * 14u;
    uint _1795 = _1794 + 13u;
    float _1802 = _756 + (-1.0);
    float _1807 = (cbLight._m0[_1795].x * _1802) + 1.0;
    float _1808 = (cbLight._m0[_1795].y * _1802) + 1.0;
    float _1809 = (cbLight._m0[_1795].z * _1802) + 1.0;
    float _1810 = (cbLight._m0[_1795].w * _1802) + 1.0;
    uint _1811 = _1794 + 5u;
    float _1817 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
    uint _1821 = _1794 + 4u;
    float _1827 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1831 = _1794 | 1u;
    float _1842 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_606, _607, _608));
    float _1845 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_606, _607, _608));
    float _3947 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _3958 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1850 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.3183098733425140380859375;
    float _1852 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 0.3183098733425140380859375;
    float _1859 = ((cbLight._m0[_1811].x * _1817) * _1852) + ((cbLight._m0[_1821].x * _1827) * _1850);
    float _1860 = ((_1817 * cbLight._m0[_1811].y) * _1852) + ((_1827 * cbLight._m0[_1821].y) * _1850);
    float _1861 = ((_1817 * cbLight._m0[_1811].z) * _1852) + ((_1827 * cbLight._m0[_1821].z) * _1850);
    uvec4 _1865 = floatBitsToUint(cbLight._m0[_1794 + 12u]);
    bool _1867 = _1865.x == 0u;
    float _1878;
    float _1880;
    float _1882;
    if (_1867)
    {
        _1878 = _1859;
        _1880 = _1860;
        _1882 = _1861;
    }
    else
    {
        uint _1886 = _1794 + 6u;
        float _1902 = (dot(vec3(cbLight._m0[_1794 + 2u].xyz), vec3(_606, _607, _608)) * 0.5) + 0.5;
        float _1903 = _1902 * _1902;
        float _3969 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1905 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _1878 = (((cbLight._m0[_1886].x * 0.3183098733425140380859375) * _1904) * _1905) + _1859;
        _1880 = (((cbLight._m0[_1886].y * 0.3183098733425140380859375) * _1904) * _1905) + _1860;
        _1882 = (((cbLight._m0[_1886].z * 0.3183098733425140380859375) * _1904) * _1905) + _1861;
    }
    bool _1885 = _1865.y == 0u;
    float _1923;
    float _1925;
    float _1927;
    if (_1885)
    {
        _1923 = _1878;
        _1925 = _1880;
        _1927 = _1882;
    }
    else
    {
        uint _2082 = _1794 + 7u;
        float _2098 = (dot(vec3(cbLight._m0[_1794 + 3u].xyz), vec3(_606, _607, _608)) * 0.5) + 0.5;
        float _2099 = _2098 * _2098;
        float _3985 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2100 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2101 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _1923 = (((cbLight._m0[_2082].x * 0.3183098733425140380859375) * _2100) * _2101) + _1878;
        _1925 = (((cbLight._m0[_2082].y * 0.3183098733425140380859375) * _2100) * _2101) + _1880;
        _1927 = (((cbLight._m0[_2082].z * 0.3183098733425140380859375) * _2100) * _2101) + _1882;
    }
    uint _1930 = _1794 + 8u;
    float _1943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1794].w)) * _609) * 0.949999988079071044921875);
    float _1944 = _1943 * _1943;
    float _1945 = cbLight._m0[_1794].x + _685;
    float _1946 = cbLight._m0[_1794].y + _686;
    float _1947 = cbLight._m0[_1794].z + _687;
    float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
    float _1952 = _1951 * _1945;
    float _1953 = _1951 * _1946;
    float _1954 = _1951 * _1947;
    float _1955 = dot(vec3(_606, _607, _608), vec3(cbLight._m0[_1794].xyz));
    float _4001 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _1959 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1960 = dot(vec3(_606, _607, _608), vec3(_1952, _1953, _1954));
    float _4023 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1963 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _1964 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_1952, _1953, _1954));
    float _4034 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1968 = _1944 * _1944;
    float _1972 = ((_1963 * _1963) * (_1968 + (-1.0))) + 1.0;
    float _1983 = (exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1984 = 1.0 - _1944;
    float _1995 = (0.5 / (((_1959 * ((_1958 * _1984) + _1944)) + 9.9999999392252902907785028219223e-09) + (((_1959 * _1984) + _1944) * _1958))) * _1958;
    float _4045 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1997 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1968 / ((_1972 * _1972) * 3.141590118408203125));
    uint _2008 = _1794 + 9u;
    float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _609) * 0.949999988079071044921875);
    float _2020 = _2019 * _2019;
    float _2021 = cbLight._m0[_1831].x + _685;
    float _2022 = cbLight._m0[_1831].y + _686;
    float _2023 = cbLight._m0[_1831].z + _687;
    float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
    float _2028 = _2027 * _2021;
    float _2029 = _2027 * _2022;
    float _2030 = _2027 * _2023;
    float _2031 = dot(vec3(_606, _607, _608), vec3(cbLight._m0[_1831].xyz));
    float _4056 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _2035 = dot(vec3(_606, _607, _608), vec3(_2028, _2029, _2030));
    float _4067 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _2039 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_2028, _2029, _2030));
    float _4078 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2043 = _2020 * _2020;
    float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
    float _2056 = (exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2057 = 1.0 - _2020;
    float _2067 = (0.5 / (((_1959 * ((_2034 * _2057) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_1959 * _2057) + _2020) * _2034))) * _2034;
    float _4089 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
    float _2079 = (((_2056 * cbLight._m0[_2008].x) * _2069) * _1817) + (((_1983 * cbLight._m0[_1930].x) * _1997) * _1827);
    float _2080 = (((_2056 * cbLight._m0[_2008].y) * _2069) * _1817) + (((_1983 * cbLight._m0[_1930].y) * _1997) * _1827);
    float _2081 = (((_2056 * cbLight._m0[_2008].z) * _2069) * _1817) + (((_1983 * cbLight._m0[_1930].z) * _1997) * _1827);
    float _2143;
    float _2145;
    float _2147;
    if (_1867)
    {
        _2143 = _2079;
        _2145 = _2080;
        _2147 = _2081;
    }
    else
    {
        uint _2149 = _1794 + 2u;
        uint _2153 = _1794 + 10u;
        float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _609) * 0.949999988079071044921875);
        float _2168 = _2167 * _2167;
        float _2169 = cbLight._m0[_2149].x + _685;
        float _2170 = cbLight._m0[_2149].y + _686;
        float _2171 = cbLight._m0[_2149].z + _687;
        float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
        float _2176 = _2175 * _2169;
        float _2177 = _2175 * _2170;
        float _2178 = _2175 * _2171;
        float _2179 = dot(vec3(_606, _607, _608), vec3(cbLight._m0[_2149].xyz));
        float _4100 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2182 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2183 = dot(vec3(_606, _607, _608), vec3(_2176, _2177, _2178));
        float _4111 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2187 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2176, _2177, _2178));
        float _4122 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2191 = _2168 * _2168;
        float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
        float _2204 = (exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2205 = 1.0 - _2168;
        float _2215 = (0.5 / (((_1959 * ((_2182 * _2205) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_1959 * _2205) + _2168) * _2182))) * _2182;
        float _4133 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2217 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
        float _2218 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2143 = (((_2204 * cbLight._m0[_2153].x) * _2217) * _2218) + _2079;
        _2145 = (((_2204 * cbLight._m0[_2153].y) * _2217) * _2218) + _2080;
        _2147 = (((_2204 * cbLight._m0[_2153].z) * _2217) * _2218) + _2081;
    }
    float _2253;
    float _2255;
    float _2257;
    if (_1885)
    {
        _2253 = _2143;
        _2255 = _2145;
        _2257 = _2147;
    }
    else
    {
        uint _2264 = _1794 + 3u;
        uint _2268 = _1794 + 11u;
        float _2282 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2264].w)) * _609) * 0.949999988079071044921875);
        float _2283 = _2282 * _2282;
        float _2284 = cbLight._m0[_2264].x + _685;
        float _2285 = cbLight._m0[_2264].y + _686;
        float _2286 = cbLight._m0[_2264].z + _687;
        float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
        float _2291 = _2290 * _2284;
        float _2292 = _2290 * _2285;
        float _2293 = _2290 * _2286;
        float _2294 = dot(vec3(_606, _607, _608), vec3(cbLight._m0[_2264].xyz));
        float _4149 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2297 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2298 = dot(vec3(_606, _607, _608), vec3(_2291, _2292, _2293));
        float _4160 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2302 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_2291, _2292, _2293));
        float _4171 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2306 = _2283 * _2283;
        float _2310 = ((_2301 * _2301) * (_2306 + (-1.0))) + 1.0;
        float _2319 = (exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2320 = 1.0 - _2283;
        float _2330 = (0.5 / (((_1959 * ((_2297 * _2320) + _2283)) + 9.9999999392252902907785028219223e-09) + (((_1959 * _2320) + _2283) * _2297))) * _2297;
        float _4182 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2332 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2306 / ((_2310 * _2310) * 3.141590118408203125));
        float _2333 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _2253 = (((_2319 * cbLight._m0[_2268].x) * _2332) * _2333) + _2143;
        _2255 = (((_2319 * cbLight._m0[_2268].y) * _2332) * _2333) + _2145;
        _2257 = (((_2319 * cbLight._m0[_2268].z) * _2332) * _2333) + _2147;
    }
    float _2468;
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    if (_1792.y == 0u)
    {
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2408;
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2408;
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2408;
        uvec4 _2423 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2424 = _2423.x;
        uint _2435 = uint((float(_2423.y) * floor(float(uint(cbSceneParam._m0[85u].y * _694) / _2424))) + floor(float(uint(cbSceneParam._m0[85u].x * _693) / _2424)));
        float _2445 = (log2(_2411 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2446 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        uint _2449 = uint(isnan(14.0) ? _2446 : (isnan(_2446) ? 14.0 : min(_2446, 14.0)));
        uvec4 _2454 = texelFetch(g_lightClusterGridBuffer, int(((_2449 << 2u) + (_2435 << 6u)) >> 2u));
        uint _2455 = _2454.x;
        uint _2456 = _2423.z;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        if (((((1u << ((_2456 >> 4u) & 15u)) + 4294967295u) & _2455) == 0u) || ((_2456 & 240u) == 0u))
        {
            _2556 = 0.0;
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
        }
        else
        {
            float _2557;
            float _2559;
            float _2561;
            float _2563;
            float _2565;
            float _2567;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            uint _2707 = 0u;
            uint _2716;
            bool _2717;
            for (;;)
            {
                _2716 = texelFetch(g_lightClassification, int((((_2449 << 5u) + (_2435 << 9u)) + (_2707 << 2u)) >> 2u)).x;
                _2717 = _2716 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2717)
                {
                    frontier_phi_61_pred = _2701;
                    frontier_phi_61_pred_1 = _2706;
                    frontier_phi_61_pred_2 = _2705;
                    frontier_phi_61_pred_3 = _2704;
                    frontier_phi_61_pred_4 = _2703;
                    frontier_phi_61_pred_5 = _2702;
                }
                else
                {
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    uint _2831;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2706;
                    _2831 = _2716;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    for (;;)
                    {
                        uint _2835 = uint(findLSB(_2831)) + (_2707 << 5u);
                        uint _2832 = (_2831 + 4294967295u) & _2831;
                        uint _2837 = _2835 * 48u;
                        vec4 _2851 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 3u)).x));
                        uint _2857 = (_2835 * 48u) + 4u;
                        vec4 _2870 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2857)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 3u)).x));
                        uint _2876 = (_2835 * 48u) + 8u;
                        vec3 _2887 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2876)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 2u)).x));
                        float _2891 = _2851.x - _2409;
                        float _2892 = _2851.y - _2410;
                        float _2893 = _2851.z - _2411;
                        float _2894 = dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893));
                        float _2897 = inversesqrt(_2894);
                        float _2898 = _2897 * _2891;
                        float _2899 = _2897 * _2892;
                        float _2900 = _2897 * _2893;
                        float _2901 = dot(vec3(_712, _715, _718), vec3(_2898, _2899, _2900));
                        float _2906 = 1.0 - (_2894 * _2851.w);
                        float _4208 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2907 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2908 = sqrt(_2894) * _2870.w;
                        float _2911 = 1.39999997615814208984375 / (_2908 + 1.39999997615814208984375);
                        float _2912 = _2911 * _2911;
                        float _2915 = ((1.0 - _2912) * _2901) + _2912;
                        float _2918 = _2908 * _2908;
                        float _2922 = ((isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0))) * _2907) / ((_2918 * 0.699999988079071044921875) + 1.0);
                        float _2926 = (-0.0) - _2409;
                        float _2927 = (-0.0) - _2410;
                        float _2928 = (-0.0) - _2411;
                        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
                        float _2933 = _2932 * _2926;
                        float _2934 = _2932 * _2927;
                        float _2935 = _2932 * _2928;
                        float _2943 = exp2(log2(1.0 / ((_2918 * 3.5) + 5.0)) * 0.25);
                        float _2944 = 1.0 - _772;
                        float _2951 = sqrt(1.0 - ((1.0 - (_2944 * _2944)) * (1.0 - (_2943 * _2943))));
                        float _2952 = _2951 * _2951;
                        float _2953 = _2952 * _2952;
                        float _2954 = _2933 + _2898;
                        float _2955 = _2934 + _2899;
                        float _2956 = _2935 + _2900;
                        float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
                        float _2964 = dot(vec3(_712, _715, _718), vec3(_2933, _2934, _2935));
                        float _4224 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2967 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2968 = dot(vec3(_712, _715, _718), vec3(_2960 * _2954, _2960 * _2955, _2960 * _2956));
                        float _4235 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2971 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2975 = ((_2971 * _2971) * (_2953 + (-1.0))) + 1.0;
                        float _2976 = _2911 * _2952;
                        float _2977 = _2976 * _2976;
                        float _2980 = ((1.0 - _2977) * _2901) + _2977;
                        float _4246 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2981 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2982 = 1.0 - _2952;
                        float _2992 = (0.5 / (((_2981 * ((_2967 * _2982) + _2952)) + 9.9999999392252902907785028219223e-09) + (((_2981 * _2982) + _2952) * _2967))) * _2981;
                        float _4257 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _3003 = (((_2953 * 3.1415927410125732421875) * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) / ((_2975 * _2975) * ((_2918 * 2.1991131305694580078125) + 3.141590118408203125))) * _2907;
                        _2760 = (_2922 * _2870.x) + _2828;
                        _2761 = (_2922 * _2870.y) + _2829;
                        _2762 = (_2922 * _2870.z) + _2830;
                        _2757 = (_3003 * _2887.x) + _2825;
                        _2758 = (_3003 * _2887.y) + _2826;
                        _2759 = (_3003 * _2887.z) + _2827;
                        if (_2832 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2832;
                        }
                    }
                    frontier_phi_61_pred = _2757;
                    frontier_phi_61_pred_1 = _2762;
                    frontier_phi_61_pred_2 = _2761;
                    frontier_phi_61_pred_3 = _2760;
                    frontier_phi_61_pred_4 = _2759;
                    frontier_phi_61_pred_5 = _2758;
                }
                _2557 = frontier_phi_61_pred;
                _2567 = frontier_phi_61_pred_1;
                _2565 = frontier_phi_61_pred_2;
                _2563 = frontier_phi_61_pred_3;
                _2561 = frontier_phi_61_pred_4;
                _2559 = frontier_phi_61_pred_5;
                uint _2708 = _2707 + 1u;
                if (_2708 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2701 = _2557;
                    _2702 = _2559;
                    _2703 = _2561;
                    _2704 = _2563;
                    _2705 = _2565;
                    _2706 = _2567;
                    _2707 = _2708;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2556 = _2557;
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
        }
        uvec4 _2570 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2571 = _2570.z;
        uint _2573 = (_2571 >> 8u) & 15u;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((4294967295u << _2573) & _2455) == 0u)
        {
            _2669 = _2556;
            _2671 = _2558;
            _2673 = _2560;
            _2675 = _2562;
            _2677 = _2564;
            _2679 = _2566;
        }
        else
        {
            float _2694 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
            float _2695 = _2694 * _2409;
            float _2696 = _2694 * _2410;
            float _2697 = _2694 * _2411;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2573 < ((_2571 >> 12u) & 15u))
            {
                float _2670;
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2808 = _2556;
                float _2809 = _2558;
                float _2810 = _2560;
                float _2811 = _2562;
                float _2812 = _2564;
                float _2813 = _2566;
                uint _2814 = _2573;
                uint _2823;
                bool _2824;
                for (;;)
                {
                    _2823 = texelFetch(g_lightClassification, int((((_2449 << 5u) + (_2435 << 9u)) + (_2814 << 2u)) >> 2u)).x;
                    _2824 = _2823 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2824)
                    {
                        frontier_phi_67_pred = _2811;
                        frontier_phi_67_pred_1 = _2812;
                        frontier_phi_67_pred_2 = _2813;
                        frontier_phi_67_pred_3 = _2810;
                        frontier_phi_67_pred_4 = _2809;
                        frontier_phi_67_pred_5 = _2808;
                    }
                    else
                    {
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        float _3025 = _2812;
                        float _3026 = _2813;
                        uint _3027 = _2823;
                        uint _3028;
                        vec4 _3053;
                        float _3054;
                        vec4 _3069;
                        vec3 _3081;
                        vec4 _3096;
                        vec4 _3112;
                        float _3158;
                        bool _3159;
                        for (;;)
                        {
                            uint _3038 = ((_2814 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3027));
                            _3028 = (_3027 + 4294967295u) & _3027;
                            uint _3040 = _3038 * 40u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            _3054 = _3053.w;
                            uint _3056 = (_3038 * 40u) + 4u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3071 = (_3038 * 40u) + 8u;
                            _3081 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x));
                            uint _3083 = (_3038 * 40u) + 16u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3099 = (_3038 * 40u) + 20u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3114 = (_3038 * 40u) + 24u;
                            vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3133 = (_3038 * 40u) + 28u;
                            vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            _3158 = fma(_2411, _3146.z, fma(_2410, _3146.y, _3146.x * _2409)) + _3146.w;
                            _3159 = !((fma(_2411, _3127.z, fma(_2410, _3127.y, _3127.x * _2409)) + _3127.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3159)
                            {
                                float _3186 = _3053.x - _2409;
                                float _3187 = _3053.y - _2410;
                                float _3188 = _3053.z - _2411;
                                float _3189 = dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188));
                                float _3192 = inversesqrt(_3189);
                                float _3193 = _3192 * _3186;
                                float _3194 = _3192 * _3187;
                                float _3195 = _3192 * _3188;
                                float _3199 = 1.0 - (_3189 / (_3054 * _3054));
                                float _4268 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3204 = sqrt(_3189) * _3069.w;
                                float _3206 = 1.39999997615814208984375 / (_3204 + 1.39999997615814208984375);
                                float _3207 = _3206 * _3206;
                                float _3210 = ((1.0 - _3207) * dot(vec3(_3193, _3194, _3195), vec3(_712, _715, _718))) + _3207;
                                float _3213 = _3204 * _3204;
                                float _3217 = (fma(_2411, _3096.z, fma(_2410, _3096.y, _3096.x * _2409)) + _3096.w) / _3158;
                                float _3218 = (fma(_2411, _3112.z, fma(_2410, _3112.y, _3112.x * _2409)) + _3112.w) / _3158;
                                float _3222 = 1.0 - dot(vec2(_3217, _3218), vec2(_3217, _3218));
                                float _4284 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3224 = _3223 * (((isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))) * _3200) / ((_3213 * 0.699999988079071044921875) + 1.0));
                                float _3236 = exp2(log2(1.0 / ((_3213 * 3.5) + 5.0)) * 0.25);
                                float _3237 = 1.0 - _772;
                                float _3244 = sqrt(1.0 - ((1.0 - (_3237 * _3237)) * (1.0 - (_3236 * _3236))));
                                float _3245 = _3244 * _3244;
                                float _3246 = _3245 * _3245;
                                float _3247 = _3193 - _2695;
                                float _3248 = _3194 - _2696;
                                float _3249 = _3195 - _2697;
                                float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                                float _3257 = dot(vec3(_712, _715, _718), vec3((-0.0) - _2695, (-0.0) - _2696, (-0.0) - _2697));
                                float _4295 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3260 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3261 = dot(vec3(_712, _715, _718), vec3(_3253 * _3247, _3253 * _3248, _3253 * _3249));
                                float _4306 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3264 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3268 = ((_3264 * _3264) * (_3246 + (-1.0))) + 1.0;
                                float _3269 = _3206 * _3245;
                                float _3270 = _3269 * _3269;
                                float _3276 = ((1.0 - _3270) * dot(vec3(_712, _715, _718), vec3(_3193, _3194, _3195))) + _3270;
                                float _4317 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3277 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3278 = 1.0 - _3245;
                                float _3288 = (0.5 / (((_3277 * ((_3260 * _3278) + _3245)) + 9.9999999392252902907785028219223e-09) + (((_3277 * _3278) + _3245) * _3260))) * _3277;
                                float _4328 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3298 = (_3223 * _3200) * (((_3246 * 3.1415927410125732421875) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) / ((_3268 * _3268) * ((_3213 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3298 * _3081.x;
                                frontier_phi_73_pred_1 = _3298 * _3081.y;
                                frontier_phi_73_pred_2 = _3224 * _3069.z;
                                frontier_phi_73_pred_3 = _3224 * _3069.y;
                                frontier_phi_73_pred_4 = _3224 * _3069.x;
                                frontier_phi_73_pred_5 = _3298 * _3081.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3302 = frontier_phi_73_pred;
                            _3303 = frontier_phi_73_pred_1;
                            _3307 = frontier_phi_73_pred_2;
                            _3306 = frontier_phi_73_pred_3;
                            _3305 = frontier_phi_73_pred_4;
                            _3304 = frontier_phi_73_pred_5;
                            _3011 = _3305 + _3024;
                            _3012 = _3306 + _3025;
                            _3013 = _3307 + _3026;
                            _3008 = _3302 + _3021;
                            _3009 = _3303 + _3022;
                            _3010 = _3304 + _3023;
                            if (_3028 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3028;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3011;
                        frontier_phi_67_pred_1 = _3012;
                        frontier_phi_67_pred_2 = _3013;
                        frontier_phi_67_pred_3 = _3010;
                        frontier_phi_67_pred_4 = _3009;
                        frontier_phi_67_pred_5 = _3008;
                    }
                    _2676 = frontier_phi_67_pred;
                    _2678 = frontier_phi_67_pred_1;
                    _2680 = frontier_phi_67_pred_2;
                    _2674 = frontier_phi_67_pred_3;
                    _2672 = frontier_phi_67_pred_4;
                    _2670 = frontier_phi_67_pred_5;
                    uint _2815 = _2814 + 1u;
                    if (_2815 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2808 = _2670;
                        _2809 = _2672;
                        _2810 = _2674;
                        _2811 = _2676;
                        _2812 = _2678;
                        _2813 = _2680;
                        _2814 = _2815;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2678;
                frontier_phi_55_56_ladder_1 = _2680;
                frontier_phi_55_56_ladder_2 = _2676;
                frontier_phi_55_56_ladder_3 = _2674;
                frontier_phi_55_56_ladder_4 = _2672;
                frontier_phi_55_56_ladder_5 = _2670;
            }
            else
            {
                frontier_phi_55_56_ladder = _2564;
                frontier_phi_55_56_ladder_1 = _2566;
                frontier_phi_55_56_ladder_2 = _2562;
                frontier_phi_55_56_ladder_3 = _2560;
                frontier_phi_55_56_ladder_4 = _2558;
                frontier_phi_55_56_ladder_5 = _2556;
            }
            _2669 = frontier_phi_55_56_ladder_5;
            _2671 = frontier_phi_55_56_ladder_4;
            _2673 = frontier_phi_55_56_ladder_3;
            _2675 = frontier_phi_55_56_ladder_2;
            _2677 = frontier_phi_55_56_ladder;
            _2679 = frontier_phi_55_56_ladder_1;
        }
        float _2684 = isnan(1.0) ? _756 : (isnan(_756) ? 1.0 : min(_756, 1.0));
        _2468 = (_2684 * _2675) + _1923;
        _2470 = (_2684 * _2677) + _1925;
        _2472 = (_2684 * _2679) + _1927;
        _2474 = ((_2669 * 0.039999999105930328369140625) * _2684) + _2253;
        _2476 = ((_2671 * 0.039999999105930328369140625) * _2684) + _2255;
        _2478 = ((_2673 * 0.039999999105930328369140625) * _2684) + _2257;
    }
    else
    {
        _2468 = _1923;
        _2470 = _1925;
        _2472 = _1927;
        _2474 = _2253;
        _2476 = _2255;
        _2478 = _2257;
    }
    float _4344 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4355 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4366 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    uint _2498 = _239 + 6u;
    float _2506 = _693 / cbSceneParam._m0[86u].x;
    float _2507 = _694 / cbSceneParam._m0[86u].y;
    vec4 _2521 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2506, _2507, (log2((isnan(cbSceneParam._m0[77u].w) ? _627 : (isnan(_627) ? cbSceneParam._m0[77u].w : min(_627, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2523 = _2521.x;
    float _2524 = _2521.y;
    float _2525 = _2521.z;
    float _2526 = _2521.w;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    if (_627 > cbSceneParam._m0[78u].w)
    {
        float _2581 = isnan(_627) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _627 : min(cbSceneParam._m0[80u].w, _627));
        float _2582 = _2581 / _627;
        float _2593 = _2582 * _678;
        float _2594 = _679 * _2582;
        float _2595 = (-0.0) - _2594;
        float _2597 = _2582 * _680;
        float _2599 = (cbSceneParam._m0[77u].w * _2595) / _2581;
        float _2600 = _2599 + cbSceneParam._m0[79u].w;
        float _2601 = cbSceneParam._m0[79u].w - _2594;
        float _2607 = sqrt(((_2593 * _2593) + (_2594 * _2594)) + (_2597 * _2597));
        float _2610 = (1.0 - (cbSceneParam._m0[77u].w / _2581)) * _2607;
        float _2615 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2617 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2770;
        if (abs((_2595 - _2599) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2770 = ((((_2600 > 0.0) ? exp2(_2615 * _2600) : (2.0 - exp2(_2617 * _2600))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2610;
        }
        else
        {
            float _2730 = 1.0 / cbSceneParam._m0[80u].x;
            float _2731 = isnan(_2601) ? _2600 : (isnan(_2600) ? _2601 : max(_2600, _2601));
            float _2732 = isnan(_2601) ? _2600 : (isnan(_2600) ? _2601 : min(_2600, _2601));
            float _2741 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : min(_2731, 0.0));
            float _2742 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : min(_2732, 0.0));
            _2770 = ((abs(_2607 / _2595) * cbSceneParam._m0[80u].y) * ((((_2741 - _2742) * 2.0) - ((exp2(_2615 * (isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0)))) - exp2(_2615 * (isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))))) * _2730)) - ((exp2(_2617 * _2741) - exp2(_2617 * _2742)) * _2730))) + (_2610 * cbSceneParam._m0[80u].z);
        }
        vec4 _2772 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2506, _2507, 1.0), 0.0);
        float _2781 = exp2((_2770 * (-1.44269502162933349609375)) * (1.0 - _2772.w));
        float _2782 = log2(_2781);
        float _2798 = log2(_2526);
        _2619 = (exp2(_2798 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2782 * cbSceneParam._m0[78u].x)) * _2772.x) / cbSceneParam._m0[78u].x)) + _2523;
        _2621 = (exp2(_2798 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2782 * cbSceneParam._m0[78u].y)) * _2772.y) / cbSceneParam._m0[78u].y)) + _2524;
        _2623 = (exp2(_2798 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2782 * cbSceneParam._m0[78u].z)) * _2772.z) / cbSceneParam._m0[78u].z)) + _2525;
        _2625 = _2781 * _2526;
    }
    else
    {
        _2619 = _2523;
        _2621 = _2524;
        _2623 = _2525;
        _2625 = _2526;
    }
    float _2637 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2638 = _2637 == 3.0;
    float _2639 = log2(_2625);
    float _2646 = exp2(_2639 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2468 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _756))) + ((_2474 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1561)) * cbPerFrame._m0[3u].x));
    float _2647 = exp2(_2639 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2470 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _756))) + ((_2476 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1561)) * cbPerFrame._m0[3u].x));
    float _2648 = exp2(_2639 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2472 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _756))) + ((_2478 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1561)) * cbPerFrame._m0[3u].x));
    float _2657 = (_2637 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2657 * (_2638 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2619)));
    SV_Target.y = _2657 * (_2638 ? _2647 : (_2647 + (cbSceneParam._m0[72u].w * _2621)));
    SV_Target.z = _2657 * (_2638 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2623)));
    SV_Target.w = cbInstanceData._m0[_2498].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2498].w;
}


