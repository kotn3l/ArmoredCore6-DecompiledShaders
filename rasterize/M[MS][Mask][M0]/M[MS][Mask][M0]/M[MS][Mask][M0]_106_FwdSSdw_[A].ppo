#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1381;
float _3764;
float _3765;
float _3766;
float _3767;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _343.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[24u].z) + _397) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3776 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _422 = (_415 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _423 = (_415 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _424 = (_415 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _343.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[24u].z) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3787 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _495 = (_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422;
    float _496 = (_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _497 = (_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _515 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _556 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _343.z) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[24u].z) + _544) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3798 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _564 = (_557 * ((_515.x * cbMtdParam._m0[14u].x) - _495)) + _495;
    float _565 = (_557 * ((_515.y * cbMtdParam._m0[14u].y) - _496)) + _496;
    float _566 = (_557 * ((_515.z * cbMtdParam._m0[14u].z) - _497)) + _497;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _598 = _596.x;
    float _599 = _596.y;
    float _600 = _596.z;
    float _607 = ((_579.x - _598) * _415) + _598;
    float _608 = ((_579.y - _599) * _415) + _599;
    float _609 = ((_579.z - _600) * _415) + _600;
    vec4 _621 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _632 = ((_621.x - _607) * _488) + _607;
    float _633 = ((_621.y - _608) * _488) + _608;
    float _634 = ((_621.z - _609) * _488) + _609;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _659 = ((_646.z - _634) * _557) + _634;
    float _662 = ((((_646.x - _632) * _557) + _632) * 2.0) + (-1.0);
    float _664 = ((((_646.y - _633) * _557) + _633) * 2.0) + (-1.0);
    float _665 = dot(vec2(_662, _664), vec2(_662, _664));
    float _3809 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _670 = sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))));
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _696 = (((_684.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _662;
    float _697 = (((_684.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _664;
    vec4 _709 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _711 = _709.x;
    float _712 = 1.0 - _711;
    float _740 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_711 - _712) * cbMtdParam._m0[24u].y) + _712) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3820 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _741 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _749 = ((((cbMtdParam._m0[10u].x - _564) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _741) + _564;
    float _750 = ((((cbMtdParam._m0[10u].y - _565) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _741) + _565;
    float _751 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _566)) * _741) + _566;
    float _755 = (cbMtdParam._m0[19u].w * (_684.z - _659)) + _659;
    float _759 = ((cbMtdParam._m0[23u].y - _755) * _741) + _755;
    vec4 _778 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _784 = (_778.x * 2.0) + (-1.0);
    float _785 = (_778.y * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _3831 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _802 = (_741 * (((cbMtdParam._m0[22u].z * _696) - _696) + _784)) + _696;
    float _803 = (_741 * (((cbMtdParam._m0[22u].z * _697) - _697) + _785)) + _697;
    float _804 = (_741 * (sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) - _670)) + _670;
    float _806 = cbMtdParam._m0[22u].x + _684.w;
    float _809 = fma(_804, _244 * NORMAL.x, fma(_803, _251 * TANGENT.x, (_237 * _229) * _802));
    float _812 = fma(_804, _244 * NORMAL.y, fma(_803, _251 * TANGENT.y, (_237 * _230) * _802));
    float _815 = fma(_804, _244 * NORMAL.z, fma(_803, _251 * TANGENT.z, (_237 * _231) * _802));
    float _819 = inversesqrt(dot(vec3(_809, _812, _815), vec3(_809, _812, _815)));
    float _820 = _819 * _809;
    float _821 = _819 * _812;
    float _822 = _819 * _815;
    float _3842 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _823 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _3864 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _3875 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3886 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _841 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _892 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _882);
    float _893 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _882);
    float _894 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _882);
    float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
    float _899 = _892 * _898;
    float _900 = _893 * _898;
    float _901 = _894 * _898;
    vec4 _906 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _908 = _906.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1062 = sqrt(((_892 * _892) + (_893 * _893)) + (_894 * _894));
        float _1068 = (cbMatDynParam._m0[5u].x * _1062) + cbMatDynParam._m0[5u].y;
        float _3897 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1073 = (cbMatDynParam._m0[5u].z * _1062) + cbMatDynParam._m0[5u].w;
        float _3908 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) - _1069)) + _1069) < ((_908 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _919 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _920 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _938 = fma(_822, cbSceneParam._m0[5u].z, fma(_821, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _820));
    float _941 = fma(_822, cbSceneParam._m0[6u].z, fma(_821, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _820));
    float _944 = fma(_822, cbSceneParam._m0[7u].z, fma(_821, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _820));
    uint _957 = _257 + 9u;
    uint _958 = _957 + uint(cbMatDynParam._m0[0u].w);
    float _964 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_958].x;
    float _965 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * cbInstanceData._m0[_958].y;
    float _966 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_958].z;
    float _3919 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    vec4 _978 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _919, cbSceneParam._m0[86u].y * _920));
    float _982 = ((isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * TEXCOORD_5.w) * _978.x;
    float _983 = dot(vec3(_820, _821, _822), vec3(_899, _900, _901));
    float _986 = _983 * 2.0;
    float _990 = (_986 * _820) - _899;
    float _991 = (_986 * _821) - _900;
    float _992 = (_986 * _822) - _901;
    float _996 = abs(dot(vec3(_899, _900, _901), vec3(_820, _821, _822)));
    float _3952 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _998 = sqrt(_823);
    float _1011 = exp2((_998 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_998 * 3.0));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1380;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1105 = fma(_1051, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043));
        float _1109 = fma(_1051, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043));
        float _1113 = fma(_1051, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043));
        float _1138 = _1043 + _820;
        float _1139 = _1047 + _821;
        float _1140 = _1051 + _822;
        float _1150 = fma(_1140, cbModelParam._m0[26u].z, fma(_1139, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138)) - _1105;
        float _1151 = fma(_1140, cbModelParam._m0[27u].z, fma(_1139, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138)) - _1109;
        float _1152 = fma(_1140, cbModelParam._m0[28u].z, fma(_1139, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138)) - _1113;
        float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
        float _1169 = ((_1156 * _1150) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1105 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1156 * _1151) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1109 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1156 * _1152) / cbModelParam._m0[34u].z) + ((((((_1113 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        float _1208 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1174.x + (-0.5));
        float _1210 = _1208 * (_1174.y + (-0.5));
        float _1211 = _1208 * (_1174.z + (-0.5));
        float _1218 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1181.x + (-0.5));
        float _1220 = _1218 * (_1181.y + (-0.5));
        float _1221 = _1218 * (_1181.z + (-0.5));
        float _1228 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1188.x + (-0.5));
        float _1230 = _1228 * (_1188.y + (-0.5));
        float _1231 = _1228 * (_1188.z + (-0.5));
        float _1238 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1195.x + (-0.5));
        float _1240 = _1238 * (_1195.y + (-0.5));
        float _1241 = _1238 * (_1195.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1262 = (dot(vec3(_820, _821, _822), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1272 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4000 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1274 + 1.0))) + _1279) * _1242;
        float _1289 = _1210 * 0.5;
        float _1290 = _1220 * 0.5;
        float _1291 = _1230 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_820, _821, _822), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4033 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1316 + 1.0))) + _1321) * _1243;
        float _1331 = _1211 * 0.5;
        float _1332 = _1221 * 0.5;
        float _1333 = _1231 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_820, _821, _822), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4066 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1358 + 1.0))) + _1363) * _1244;
        _1380 = _1211;
        _1382 = _1210;
        _1383 = _1209;
        _1384 = _1221;
        _1385 = _1220;
        _1386 = _1219;
        _1387 = _1231;
        _1388 = _1230;
        _1389 = _1229;
        _1390 = _1244;
        _1391 = _1243;
        _1392 = _1242;
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
    }
    else
    {
        _1380 = _1381;
        _1382 = _1381;
        _1383 = _1381;
        _1384 = _1381;
        _1385 = _1381;
        _1386 = _1381;
        _1387 = _1381;
        _1388 = _1381;
        _1389 = _1381;
        _1390 = _1381;
        _1391 = _1381;
        _1392 = _1381;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1421 = fma(_1051, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043));
        float _1425 = fma(_1051, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043));
        float _1429 = fma(_1051, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043));
        float _1452 = _1043 + _820;
        float _1453 = _1047 + _821;
        float _1454 = _1051 + _822;
        float _1464 = fma(_1454, cbModelParam._m0[30u].z, fma(_1453, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1452)) - _1421;
        float _1465 = fma(_1454, cbModelParam._m0[31u].z, fma(_1453, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1452)) - _1425;
        float _1466 = fma(_1454, cbModelParam._m0[32u].z, fma(_1453, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1452)) - _1429;
        float _1470 = inversesqrt(dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466)));
        float _1483 = ((_1470 * _1464) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1421 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1470 * _1465) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1425 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1470 * _1466) / cbModelParam._m0[35u].z) + ((((((_1429 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        float _1520 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1487.x + (-0.5));
        float _1522 = _1520 * (_1487.y + (-0.5));
        float _1523 = _1520 * (_1487.z + (-0.5));
        float _1530 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1494.x + (-0.5));
        float _1532 = _1530 * (_1494.y + (-0.5));
        float _1533 = _1530 * (_1494.z + (-0.5));
        float _1540 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1501.x + (-0.5));
        float _1542 = _1540 * (_1501.y + (-0.5));
        float _1543 = _1540 * (_1501.z + (-0.5));
        float _1550 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1508.x + (-0.5));
        float _1552 = _1550 * (_1508.y + (-0.5));
        float _1553 = _1550 * (_1508.z + (-0.5));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = _1521 * 0.5;
        float _1558 = _1531 * 0.5;
        float _1559 = _1541 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_820, _821, _822), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4129 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1584 + 1.0))) + _1589) * _1554;
        float _1599 = _1522 * 0.5;
        float _1600 = _1532 * 0.5;
        float _1601 = _1542 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_820, _821, _822), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4162 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1626 + 1.0))) + _1631) * _1555;
        float _1641 = _1523 * 0.5;
        float _1642 = _1533 * 0.5;
        float _1643 = _1543 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_820, _821, _822), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4195 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1668 + 1.0))) + _1673) * _1556;
        _1690 = _1523;
        _1691 = _1522;
        _1692 = _1521;
        _1693 = _1533;
        _1694 = _1532;
        _1695 = _1531;
        _1696 = _1543;
        _1697 = _1542;
        _1698 = _1541;
        _1699 = _1556;
        _1700 = _1555;
        _1701 = _1554;
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
    }
    else
    {
        _1690 = _1381;
        _1691 = _1381;
        _1692 = _1381;
        _1693 = _1381;
        _1694 = _1381;
        _1695 = _1381;
        _1696 = _1381;
        _1697 = _1381;
        _1698 = _1381;
        _1699 = _1381;
        _1700 = _1381;
        _1701 = _1381;
        _1702 = 0.0;
        _1703 = 0.0;
        _1704 = 0.0;
    }
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1393)) + _1393;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1394)) + _1394;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1395)) + _1395;
    float _1737 = fma(_1716, cbSceneParam._m0[89u].z, fma(_1715, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1716, cbSceneParam._m0[90u].z, fma(_1715, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1716, cbSceneParam._m0[91u].z, fma(_1715, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1714));
    float _1758 = _990 * 0.5;
    float _1759 = _991 * 0.5;
    float _1760 = _992 * 0.5;
    float _1761 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1764 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1767 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1801;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1774 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1380, _1384, _1387, _1390));
        float _1778 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1782 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1789 = dot(vec4(cbModelParam._m0[39u]), vec4(_1758, _1759, _1760, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1789) ? 0.0 : (isnan(0.0) ? _1789 : max(0.0, _1789))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1812;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1803 = dot(vec4(cbModelParam._m0[40u]), vec4(_1758, _1759, _1760, 1.0));
        _1812 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1803) ? 0.0 : (isnan(0.0) ? _1803 : max(0.0, _1803))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1812 = 1.0;
    }
    float _1816 = (_1812 * cbModelParam._m0[1u].x) + (_1801 * (1.0 - cbModelParam._m0[1u].x));
    float _1826 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _823);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1826 : min(cbModelParam._m0[25u].z, _1826));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1875 = fma(_1051, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043)) + cbModelParam._m0[13u].w;
        float _1879 = fma(_1051, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043)) + cbModelParam._m0[14u].w;
        float _1883 = fma(_1051, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043)) + cbModelParam._m0[15u].w;
        float _1886 = fma(_992, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990));
        float _1889 = fma(_992, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990));
        float _1892 = fma(_992, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990));
        float _1920;
        if (_1886 > 0.0)
        {
            _1920 = abs((1.0 - _1875) / _1886);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1875 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1920 = frontier_phi_17_15_ladder;
        }
        float _2143;
        if (_1889 > 0.0)
        {
            _2143 = abs((1.0 - _1879) / _1889);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1879 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2143 = frontier_phi_26_22_ladder;
        }
        float _2389;
        if (_1892 > 0.0)
        {
            _2389 = abs((1.0 - _1883) / _1892);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1883 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2389 = frontier_phi_38_33_ladder;
        }
        float _2391 = isnan(_2143) ? _1920 : (isnan(_1920) ? _2143 : min(_1920, _2143));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1886) + _1875;
        float _2397 = (_2392 * _1889) + _1879;
        float _2398 = (_2392 * _1892) + _1883;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2399;
        float _2403 = _2399 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 > _2403) || ((_2397 < _2401) || ((_2396 < _2401) || (_2396 > _2403))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2398, cbModelParam._m0[9u].z, fma(_2397, cbModelParam._m0[9u].y, _2396 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2398, cbModelParam._m0[10u].z, fma(_2397, cbModelParam._m0[10u].y, _2396 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2398, cbModelParam._m0[11u].z, fma(_2397, cbModelParam._m0[11u].y, _2396 * cbModelParam._m0[11u].x))), _1827);
            frontier_phi_16_38_ladder = _2522.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2522.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2522.x * cbModelParam._m0[1u].y;
        }
        _1908 = frontier_phi_16_38_ladder_2;
        _1910 = frontier_phi_16_38_ladder_1;
        _1912 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1896 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_990, _991, _992), _1827);
        _1908 = _1896.x * cbModelParam._m0[1u].y;
        _1910 = _1896.y * cbModelParam._m0[1u].y;
        _1912 = _1896.z * cbModelParam._m0[1u].y;
    }
    float _1916 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _823);
    float _1917 = isnan(_1916) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1916 : min(cbModelParam._m0[25u].w, _1916));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1972 = fma(_1051, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043)) + cbModelParam._m0[21u].w;
        float _1976 = fma(_1051, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043)) + cbModelParam._m0[22u].w;
        float _1980 = fma(_1051, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043)) + cbModelParam._m0[23u].w;
        float _1983 = fma(_992, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990));
        float _1986 = fma(_992, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990));
        float _1989 = fma(_992, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990));
        float _2148;
        if (_1983 > 0.0)
        {
            _2148 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2148 = frontier_phi_28_24_ladder;
        }
        float _2416;
        if (_1986 > 0.0)
        {
            _2416 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2416 = frontier_phi_40_35_ladder;
        }
        float _2621;
        if (_1989 > 0.0)
        {
            _2621 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2621 = frontier_phi_49_46_ladder;
        }
        float _2623 = isnan(_2416) ? _2148 : (isnan(_2148) ? _2416 : min(_2148, _2416));
        float _2624 = isnan(_2621) ? _2623 : (isnan(_2623) ? _2621 : min(_2623, _2621));
        float _2628 = (_2624 * _1983) + _1972;
        float _2629 = (_2624 * _1986) + _1976;
        float _2630 = (_2624 * _1989) + _1980;
        float _2631 = _2624 * 9.9999997473787516355514526367188e-05;
        float _2632 = (-1.0) - _2631;
        float _2634 = _2631 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2630 > _2634) || ((_2630 < _2632) || ((_2629 > _2634) || ((_2629 < _2632) || ((_2628 < _2632) || (_2628 > _2634))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2630, cbModelParam._m0[17u].z, fma(_2629, cbModelParam._m0[17u].y, _2628 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2630, cbModelParam._m0[18u].z, fma(_2629, cbModelParam._m0[18u].y, _2628 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2630, cbModelParam._m0[19u].z, fma(_2629, cbModelParam._m0[19u].y, _2628 * cbModelParam._m0[19u].x))), _1917);
            frontier_phi_25_49_ladder = _2829.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2829.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2829.x * cbModelParam._m0[1u].z;
        }
        _2008 = frontier_phi_25_49_ladder_2;
        _2010 = frontier_phi_25_49_ladder_1;
        _2012 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_990, _991, _992), _1917);
        _2008 = _1992.x * cbModelParam._m0[1u].z;
        _2010 = _1992.y * cbModelParam._m0[1u].z;
        _2012 = _1992.z * cbModelParam._m0[1u].z;
    }
    float _2024 = ((((1.0 - _1011) * ((_998 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1011 * _998)) * _982;
    float _2025 = _2024 * ((cbModelParam._m0[1u].w * (_2008 - _1908)) + _1908);
    float _2026 = _2024 * ((cbModelParam._m0[1u].w * (_2010 - _1910)) + _1910);
    float _2027 = _2024 * ((cbModelParam._m0[1u].w * (_2012 - _1912)) + _1912);
    float _2030 = fma(_2027, cbSceneParam._m0[89u].z, fma(_2026, cbSceneParam._m0[89u].y, _2025 * cbSceneParam._m0[89u].x));
    float _2033 = fma(_2027, cbSceneParam._m0[90u].z, fma(_2026, cbSceneParam._m0[90u].y, _2025 * cbSceneParam._m0[90u].x));
    float _2036 = fma(_2027, cbSceneParam._m0[91u].z, fma(_2026, cbSceneParam._m0[91u].y, _2025 * cbSceneParam._m0[91u].x));
    vec4 _2044 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_919, _920));
    float _2046 = _2044.w;
    float _2058 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2046);
    float _2059 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2046);
    float _2060 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2046);
    uvec4 _2064 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2066 = _2064.x * 14u;
    uint _2067 = _2066 + 13u;
    float _2074 = _982 + (-1.0);
    float _2079 = (cbLight._m0[_2067].x * _2074) + 1.0;
    float _2080 = (cbLight._m0[_2067].y * _2074) + 1.0;
    float _2081 = (cbLight._m0[_2067].z * _2074) + 1.0;
    float _2082 = (cbLight._m0[_2067].w * _2074) + 1.0;
    uint _2083 = _2066 + 5u;
    float _2089 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2093 = _2066 + 4u;
    float _2102 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2106 = _2066 | 1u;
    float _2117 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_820, _821, _822));
    float _2120 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_820, _821, _822));
    float _4331 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _4342 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2125 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * 0.3183098733425140380859375;
    float _2127 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * 0.3183098733425140380859375;
    float _2134 = ((cbLight._m0[_2083].x * _2089) * _2127) + (((cbLight._m0[_2093].x * _2058) * _2102) * _2125);
    float _2135 = ((_2089 * cbLight._m0[_2083].y) * _2127) + (((cbLight._m0[_2093].y * _2059) * _2102) * _2125);
    float _2136 = ((_2089 * cbLight._m0[_2083].z) * _2127) + (((cbLight._m0[_2093].z * _2060) * _2102) * _2125);
    uvec4 _2140 = floatBitsToUint(cbLight._m0[_2066 + 12u]);
    bool _2142 = _2140.x == 0u;
    float _2153;
    float _2155;
    float _2157;
    if (_2142)
    {
        _2153 = _2134;
        _2155 = _2135;
        _2157 = _2136;
    }
    else
    {
        uint _2161 = _2066 + 6u;
        float _2177 = (dot(vec3(cbLight._m0[_2066 + 2u].xyz), vec3(_820, _821, _822)) * 0.5) + 0.5;
        float _2178 = _2177 * _2177;
        float _4353 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2179 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2180 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2153 = (((cbLight._m0[_2161].x * 0.3183098733425140380859375) * _2179) * _2180) + _2134;
        _2155 = (((cbLight._m0[_2161].y * 0.3183098733425140380859375) * _2179) * _2180) + _2135;
        _2157 = (((cbLight._m0[_2161].z * 0.3183098733425140380859375) * _2179) * _2180) + _2136;
    }
    bool _2160 = _2140.y == 0u;
    float _2198;
    float _2200;
    float _2202;
    if (_2160)
    {
        _2198 = _2153;
        _2200 = _2155;
        _2202 = _2157;
    }
    else
    {
        uint _2360 = _2066 + 7u;
        float _2376 = (dot(vec3(cbLight._m0[_2066 + 3u].xyz), vec3(_820, _821, _822)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4369 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2379 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2198 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2153;
        _2200 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2155;
        _2202 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2157;
    }
    uint _2205 = _2066 + 8u;
    float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _823) * 0.949999988079071044921875);
    float _2219 = _2218 * _2218;
    float _2220 = cbLight._m0[_2066].x + _899;
    float _2221 = cbLight._m0[_2066].y + _900;
    float _2222 = cbLight._m0[_2066].z + _901;
    float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
    float _2227 = _2226 * _2220;
    float _2228 = _2226 * _2221;
    float _2229 = _2226 * _2222;
    float _2230 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2066].xyz));
    float _4385 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _4396 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _2234 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2235 = dot(vec3(_820, _821, _822), vec3(_2227, _2228, _2229));
    float _4407 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2239 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2227, _2228, _2229));
    float _4418 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2243 = _2219 * _2219;
    float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
    float _2258 = (exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2259 = 1.0 - _2219;
    float _2270 = (0.5 / (((_2234 * ((_2233 * _2259) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2234 * _2259) + _2219) * _2233))) * _2233;
    float _4429 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
    uint _2286 = _2066 + 9u;
    float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _823) * 0.949999988079071044921875);
    float _2298 = _2297 * _2297;
    float _2299 = cbLight._m0[_2106].x + _899;
    float _2300 = cbLight._m0[_2106].y + _900;
    float _2301 = cbLight._m0[_2106].z + _901;
    float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
    float _2306 = _2305 * _2299;
    float _2307 = _2305 * _2300;
    float _2308 = _2305 * _2301;
    float _2309 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2106].xyz));
    float _4440 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2313 = dot(vec3(_820, _821, _822), vec3(_2306, _2307, _2308));
    float _4451 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2317 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2306, _2307, _2308));
    float _4462 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2321 = _2298 * _2298;
    float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
    float _2334 = (exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2335 = 1.0 - _2298;
    float _2345 = (0.5 / (((_2234 * ((_2312 * _2335) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2234 * _2335) + _2298) * _2312))) * _2312;
    float _4473 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2347 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
    float _2357 = (((_2334 * cbLight._m0[_2286].x) * _2347) * _2089) + ((((cbLight._m0[_2205].x * _2058) * _2258) * _2272) * _2102);
    float _2358 = (((_2334 * cbLight._m0[_2286].y) * _2347) * _2089) + ((((cbLight._m0[_2205].y * _2059) * _2258) * _2272) * _2102);
    float _2359 = (((_2334 * cbLight._m0[_2286].z) * _2347) * _2089) + ((((cbLight._m0[_2205].z * _2060) * _2258) * _2272) * _2102);
    float _2421;
    float _2423;
    float _2425;
    if (_2142)
    {
        _2421 = _2357;
        _2423 = _2358;
        _2425 = _2359;
    }
    else
    {
        uint _2427 = _2066 + 2u;
        uint _2431 = _2066 + 10u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _823) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _899;
        float _2448 = cbLight._m0[_2427].y + _900;
        float _2449 = cbLight._m0[_2427].z + _901;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2427].xyz));
        float _4484 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2461 = dot(vec3(_820, _821, _822), vec3(_2454, _2455, _2456));
        float _4495 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4506 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2482 = (exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2483 = 1.0 - _2446;
        float _2493 = (0.5 / (((_2234 * ((_2460 * _2483) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2234 * _2483) + _2446) * _2460))) * _2460;
        float _4517 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2421 = (((_2482 * cbLight._m0[_2431].x) * _2495) * _2496) + _2357;
        _2423 = (((_2482 * cbLight._m0[_2431].y) * _2495) * _2496) + _2358;
        _2425 = (((_2482 * cbLight._m0[_2431].z) * _2495) * _2496) + _2359;
    }
    float _2531;
    float _2533;
    float _2535;
    if (_2160)
    {
        _2531 = _2421;
        _2533 = _2423;
        _2535 = _2425;
    }
    else
    {
        uint _2542 = _2066 + 3u;
        uint _2546 = _2066 + 11u;
        float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _823) * 0.949999988079071044921875);
        float _2561 = _2560 * _2560;
        float _2562 = cbLight._m0[_2542].x + _899;
        float _2563 = cbLight._m0[_2542].y + _900;
        float _2564 = cbLight._m0[_2542].z + _901;
        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
        float _2569 = _2568 * _2562;
        float _2570 = _2568 * _2563;
        float _2571 = _2568 * _2564;
        float _2572 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2542].xyz));
        float _4533 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2576 = dot(vec3(_820, _821, _822), vec3(_2569, _2570, _2571));
        float _4544 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2580 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2569, _2570, _2571));
        float _4555 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2584 = _2561 * _2561;
        float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
        float _2597 = (exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2598 = 1.0 - _2561;
        float _2608 = (0.5 / (((_2234 * ((_2575 * _2598) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2234 * _2598) + _2561) * _2575))) * _2575;
        float _4566 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2610 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
        float _2611 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2531 = (((_2597 * cbLight._m0[_2546].x) * _2610) * _2611) + _2421;
        _2533 = (((_2597 * cbLight._m0[_2546].y) * _2610) * _2611) + _2423;
        _2535 = (((_2597 * cbLight._m0[_2546].z) * _2610) * _2611) + _2425;
    }
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_2064.y == 0u)
    {
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2686;
        float _2688 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2686;
        float _2689 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2686;
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.x;
        uint _2713 = uint((float(_2701.y) * floor(float(uint(cbSceneParam._m0[85u].y * _920) / _2702))) + floor(float(uint(cbSceneParam._m0[85u].x * _919) / _2702)));
        float _2723 = (log2(_2689 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2724 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        uint _2727 = uint(isnan(14.0) ? _2724 : (isnan(_2724) ? 14.0 : min(_2724, 14.0)));
        uvec4 _2732 = texelFetch(g_lightClusterGridBuffer, int(((_2727 << 2u) + (_2713 << 6u)) >> 2u));
        uint _2733 = _2732.x;
        uint _2734 = _2701.z;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((((1u << ((_2734 >> 4u) & 15u)) + 4294967295u) & _2733) == 0u) || ((_2734 & 240u) == 0u))
        {
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
        }
        else
        {
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            uint _2993 = 0u;
            uint _3002;
            bool _3003;
            for (;;)
            {
                _3002 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                _3003 = _3002 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3003)
                {
                    frontier_phi_66_pred = _2987;
                    frontier_phi_66_pred_1 = _2992;
                    frontier_phi_66_pred_2 = _2991;
                    frontier_phi_66_pred_3 = _2990;
                    frontier_phi_66_pred_4 = _2989;
                    frontier_phi_66_pred_5 = _2988;
                }
                else
                {
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    uint _3138;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _3002;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    for (;;)
                    {
                        uint _3142 = uint(findLSB(_3138)) + (_2993 << 5u);
                        uint _3139 = (_3138 + 4294967295u) & _3138;
                        uint _3144 = _3142 * 48u;
                        vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 3u)).x));
                        uint _3164 = (_3142 * 48u) + 4u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3183 = (_3142 * 48u) + 8u;
                        vec3 _3194 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x));
                        float _3198 = _3158.x - _2687;
                        float _3199 = _3158.y - _2688;
                        float _3200 = _3158.z - _2689;
                        float _3201 = dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200));
                        float _3204 = inversesqrt(_3201);
                        float _3205 = _3204 * _3198;
                        float _3206 = _3204 * _3199;
                        float _3207 = _3204 * _3200;
                        float _3208 = dot(vec3(_938, _941, _944), vec3(_3205, _3206, _3207));
                        float _3213 = 1.0 - (_3201 * _3158.w);
                        float _4592 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3215 = sqrt(_3201) * _3177.w;
                        float _3218 = 1.39999997615814208984375 / (_3215 + 1.39999997615814208984375);
                        float _3219 = _3218 * _3218;
                        float _3222 = ((1.0 - _3219) * _3208) + _3219;
                        float _3225 = _3215 * _3215;
                        float _3229 = ((isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))) * _3214) / ((_3225 * 0.699999988079071044921875) + 1.0);
                        float _3233 = (-0.0) - _2687;
                        float _3234 = (-0.0) - _2688;
                        float _3235 = (-0.0) - _2689;
                        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                        float _3240 = _3239 * _3233;
                        float _3241 = _3239 * _3234;
                        float _3242 = _3239 * _3235;
                        float _3250 = exp2(log2(1.0 / ((_3225 * 3.5) + 5.0)) * 0.25);
                        float _3251 = 1.0 - _998;
                        float _3258 = sqrt(1.0 - ((1.0 - (_3251 * _3251)) * (1.0 - (_3250 * _3250))));
                        float _3259 = _3258 * _3258;
                        float _3260 = _3259 * _3259;
                        float _3261 = _3240 + _3205;
                        float _3262 = _3241 + _3206;
                        float _3263 = _3242 + _3207;
                        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                        float _3271 = dot(vec3(_938, _941, _944), vec3(_3240, _3241, _3242));
                        float _4608 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3275 = dot(vec3(_938, _941, _944), vec3(_3267 * _3261, _3267 * _3262, _3267 * _3263));
                        float _4619 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3278 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3282 = ((_3278 * _3278) * (_3260 + (-1.0))) + 1.0;
                        float _3283 = _3218 * _3259;
                        float _3284 = _3283 * _3283;
                        float _3287 = ((1.0 - _3284) * _3208) + _3284;
                        float _4630 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3288 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3289 = 1.0 - _3259;
                        float _3299 = (0.5 / (((_3288 * ((_3274 * _3289) + _3259)) + 9.9999999392252902907785028219223e-09) + (((_3288 * _3289) + _3259) * _3274))) * _3288;
                        float _4641 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3310 = (((_3260 * 3.1415927410125732421875) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) / ((_3282 * _3282) * ((_3225 * 2.1991131305694580078125) + 3.141590118408203125))) * _3214;
                        _3062 = (_3229 * _3177.x) + _3135;
                        _3063 = (_3229 * _3177.y) + _3136;
                        _3064 = (_3229 * _3177.z) + _3137;
                        _3059 = (_3310 * _3194.x) + _3132;
                        _3060 = (_3310 * _3194.y) + _3133;
                        _3061 = (_3310 * _3194.z) + _3134;
                        if (_3139 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3139;
                        }
                    }
                    frontier_phi_66_pred = _3059;
                    frontier_phi_66_pred_1 = _3064;
                    frontier_phi_66_pred_2 = _3063;
                    frontier_phi_66_pred_3 = _3062;
                    frontier_phi_66_pred_4 = _3061;
                    frontier_phi_66_pred_5 = _3060;
                }
                _2835 = frontier_phi_66_pred;
                _2845 = frontier_phi_66_pred_1;
                _2843 = frontier_phi_66_pred_2;
                _2841 = frontier_phi_66_pred_3;
                _2839 = frontier_phi_66_pred_4;
                _2837 = frontier_phi_66_pred_5;
                uint _2994 = _2993 + 1u;
                if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2987 = _2835;
                    _2988 = _2837;
                    _2989 = _2839;
                    _2990 = _2841;
                    _2991 = _2843;
                    _2992 = _2845;
                    _2993 = _2994;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
        }
        uvec4 _2848 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2849 = _2848.z;
        uint _2851 = (_2849 >> 8u) & 15u;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((4294967295u << _2851) & _2733) == 0u)
        {
            _2955 = _2834;
            _2957 = _2836;
            _2959 = _2838;
            _2961 = _2840;
            _2963 = _2842;
            _2965 = _2844;
        }
        else
        {
            float _2980 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
            float _2981 = _2980 * _2687;
            float _2982 = _2980 * _2688;
            float _2983 = _2980 * _2689;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2851 < ((_2849 >> 12u) & 15u))
            {
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _3115 = _2834;
                float _3116 = _2836;
                float _3117 = _2838;
                float _3118 = _2840;
                float _3119 = _2842;
                float _3120 = _2844;
                uint _3121 = _2851;
                uint _3130;
                bool _3131;
                for (;;)
                {
                    _3130 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_3121 << 2u)) >> 2u)).x;
                    _3131 = _3130 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3131)
                    {
                        frontier_phi_77_pred = _3120;
                        frontier_phi_77_pred_1 = _3119;
                        frontier_phi_77_pred_2 = _3118;
                        frontier_phi_77_pred_3 = _3117;
                        frontier_phi_77_pred_4 = _3116;
                        frontier_phi_77_pred_5 = _3115;
                    }
                    else
                    {
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        float _3339 = _3117;
                        float _3340 = _3118;
                        float _3341 = _3119;
                        float _3342 = _3120;
                        uint _3343 = _3130;
                        uint _3344;
                        vec4 _3369;
                        float _3370;
                        vec4 _3385;
                        vec3 _3397;
                        vec4 _3412;
                        vec4 _3427;
                        float _3473;
                        bool _3474;
                        for (;;)
                        {
                            uint _3354 = ((_3121 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3343));
                            _3344 = (_3343 + 4294967295u) & _3343;
                            uint _3356 = _3354 * 40u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3370 = _3369.w;
                            uint _3372 = (_3354 * 40u) + 4u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3354 * 40u) + 8u;
                            _3397 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x));
                            uint _3399 = (_3354 * 40u) + 16u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3354 * 40u) + 20u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3354 * 40u) + 24u;
                            vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3448 = (_3354 * 40u) + 28u;
                            vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3473 = fma(_2689, _3461.z, fma(_2688, _3461.y, _3461.x * _2687)) + _3461.w;
                            _3474 = !((fma(_2689, _3442.z, fma(_2688, _3442.y, _3442.x * _2687)) + _3442.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3474)
                            {
                                float _3501 = _3369.x - _2687;
                                float _3502 = _3369.y - _2688;
                                float _3503 = _3369.z - _2689;
                                float _3504 = dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503));
                                float _3507 = inversesqrt(_3504);
                                float _3508 = _3507 * _3501;
                                float _3509 = _3507 * _3502;
                                float _3510 = _3507 * _3503;
                                float _3514 = 1.0 - (_3504 / (_3370 * _3370));
                                float _4652 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3519 = sqrt(_3504) * _3385.w;
                                float _3521 = 1.39999997615814208984375 / (_3519 + 1.39999997615814208984375);
                                float _3522 = _3521 * _3521;
                                float _3525 = ((1.0 - _3522) * dot(vec3(_3508, _3509, _3510), vec3(_938, _941, _944))) + _3522;
                                float _3528 = _3519 * _3519;
                                float _3532 = (fma(_2689, _3412.z, fma(_2688, _3412.y, _3412.x * _2687)) + _3412.w) / _3473;
                                float _3533 = (fma(_2689, _3427.z, fma(_2688, _3427.y, _3427.x * _2687)) + _3427.w) / _3473;
                                float _3537 = 1.0 - dot(vec2(_3532, _3533), vec2(_3532, _3533));
                                float _4668 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3539 = _3538 * (((isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0))) * _3515) / ((_3528 * 0.699999988079071044921875) + 1.0));
                                float _3551 = exp2(log2(1.0 / ((_3528 * 3.5) + 5.0)) * 0.25);
                                float _3552 = 1.0 - _998;
                                float _3559 = sqrt(1.0 - ((1.0 - (_3552 * _3552)) * (1.0 - (_3551 * _3551))));
                                float _3560 = _3559 * _3559;
                                float _3561 = _3560 * _3560;
                                float _3562 = _3508 - _2981;
                                float _3563 = _3509 - _2982;
                                float _3564 = _3510 - _2983;
                                float _3568 = inversesqrt(dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564)));
                                float _3572 = dot(vec3(_938, _941, _944), vec3((-0.0) - _2981, (-0.0) - _2982, (-0.0) - _2983));
                                float _4679 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3575 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3576 = dot(vec3(_938, _941, _944), vec3(_3568 * _3562, _3568 * _3563, _3568 * _3564));
                                float _4690 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3583 = ((_3579 * _3579) * (_3561 + (-1.0))) + 1.0;
                                float _3584 = _3521 * _3560;
                                float _3585 = _3584 * _3584;
                                float _3591 = ((1.0 - _3585) * dot(vec3(_938, _941, _944), vec3(_3508, _3509, _3510))) + _3585;
                                float _4701 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3593 = 1.0 - _3560;
                                float _3603 = (0.5 / (((_3592 * ((_3575 * _3593) + _3560)) + 9.9999999392252902907785028219223e-09) + (((_3592 * _3593) + _3560) * _3575))) * _3592;
                                float _4712 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3613 = (_3538 * _3515) * (((_3561 * 3.1415927410125732421875) * (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) / ((_3583 * _3583) * ((_3528 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3539 * _3385.y;
                                frontier_phi_83_pred_1 = _3539 * _3385.x;
                                frontier_phi_83_pred_2 = _3613 * _3397.z;
                                frontier_phi_83_pred_3 = _3613 * _3397.y;
                                frontier_phi_83_pred_4 = _3613 * _3397.x;
                                frontier_phi_83_pred_5 = _3539 * _3385.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3621 = frontier_phi_83_pred;
                            _3620 = frontier_phi_83_pred_1;
                            _3619 = frontier_phi_83_pred_2;
                            _3618 = frontier_phi_83_pred_3;
                            _3617 = frontier_phi_83_pred_4;
                            _3622 = frontier_phi_83_pred_5;
                            _3327 = _3620 + _3340;
                            _3328 = _3621 + _3341;
                            _3329 = _3622 + _3342;
                            _3324 = _3617 + _3337;
                            _3325 = _3618 + _3338;
                            _3326 = _3619 + _3339;
                            if (_3344 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3344;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3329;
                        frontier_phi_77_pred_1 = _3328;
                        frontier_phi_77_pred_2 = _3327;
                        frontier_phi_77_pred_3 = _3326;
                        frontier_phi_77_pred_4 = _3325;
                        frontier_phi_77_pred_5 = _3324;
                    }
                    _2966 = frontier_phi_77_pred;
                    _2964 = frontier_phi_77_pred_1;
                    _2962 = frontier_phi_77_pred_2;
                    _2960 = frontier_phi_77_pred_3;
                    _2958 = frontier_phi_77_pred_4;
                    _2956 = frontier_phi_77_pred_5;
                    uint _3122 = _3121 + 1u;
                    if (_3122 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3115 = _2956;
                        _3116 = _2958;
                        _3117 = _2960;
                        _3118 = _2962;
                        _3119 = _2964;
                        _3120 = _2966;
                        _3121 = _3122;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2960;
                frontier_phi_58_59_ladder_1 = _2966;
                frontier_phi_58_59_ladder_2 = _2964;
                frontier_phi_58_59_ladder_3 = _2962;
                frontier_phi_58_59_ladder_4 = _2958;
                frontier_phi_58_59_ladder_5 = _2956;
            }
            else
            {
                frontier_phi_58_59_ladder = _2838;
                frontier_phi_58_59_ladder_1 = _2844;
                frontier_phi_58_59_ladder_2 = _2842;
                frontier_phi_58_59_ladder_3 = _2840;
                frontier_phi_58_59_ladder_4 = _2836;
                frontier_phi_58_59_ladder_5 = _2834;
            }
            _2955 = frontier_phi_58_59_ladder_5;
            _2957 = frontier_phi_58_59_ladder_4;
            _2959 = frontier_phi_58_59_ladder;
            _2961 = frontier_phi_58_59_ladder_3;
            _2963 = frontier_phi_58_59_ladder_2;
            _2965 = frontier_phi_58_59_ladder_1;
        }
        float _2970 = isnan(1.0) ? _982 : (isnan(_982) ? 1.0 : min(_982, 1.0));
        _2746 = (_2970 * _2961) + _2198;
        _2748 = (_2970 * _2963) + _2200;
        _2750 = (_2970 * _2965) + _2202;
        _2752 = ((_2955 * 0.039999999105930328369140625) * _2970) + _2531;
        _2754 = ((_2957 * 0.039999999105930328369140625) * _2970) + _2533;
        _2756 = ((_2959 * 0.039999999105930328369140625) * _2970) + _2535;
    }
    else
    {
        _2746 = _2198;
        _2748 = _2200;
        _2750 = _2202;
        _2752 = _2531;
        _2754 = _2533;
        _2756 = _2535;
    }
    float _4728 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4739 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4750 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _2773 = ((isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2746 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _982))) + ((_2752 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1816)) * cbPerFrame._m0[3u].x);
    float _2774 = ((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2748 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _982))) + ((_2754 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1816)) * cbPerFrame._m0[3u].x);
    float _2775 = ((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2750 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _982))) + ((_2756 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1816)) * cbPerFrame._m0[3u].x);
    uint _2776 = _257 + 6u;
    float _2784 = _919 / cbSceneParam._m0[86u].x;
    float _2785 = _920 / cbSceneParam._m0[86u].y;
    vec4 _2799 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, (log2((isnan(cbSceneParam._m0[77u].w) ? _841 : (isnan(_841) ? cbSceneParam._m0[77u].w : min(_841, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2801 = _2799.x;
    float _2802 = _2799.y;
    float _2803 = _2799.z;
    float _2804 = _2799.w;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    if (_841 > cbSceneParam._m0[78u].w)
    {
        float _2859 = isnan(_841) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _841 : min(cbSceneParam._m0[80u].w, _841));
        float _2860 = _2859 / _841;
        float _2871 = _2860 * _892;
        float _2872 = _893 * _2860;
        float _2873 = (-0.0) - _2872;
        float _2875 = _2860 * _894;
        float _2877 = (cbSceneParam._m0[77u].w * _2873) / _2859;
        float _2878 = _2877 + cbSceneParam._m0[79u].w;
        float _2879 = cbSceneParam._m0[79u].w - _2872;
        float _2885 = sqrt(((_2871 * _2871) + (_2872 * _2872)) + (_2875 * _2875));
        float _2888 = (1.0 - (cbSceneParam._m0[77u].w / _2859)) * _2885;
        float _2893 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2895 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3072;
        if (abs((_2873 - _2877) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3072 = ((((_2878 > 0.0) ? exp2(_2893 * _2878) : (2.0 - exp2(_2895 * _2878))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2888;
        }
        else
        {
            float _3016 = 1.0 / cbSceneParam._m0[80u].x;
            float _3017 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : max(_2878, _2879));
            float _3018 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : min(_2878, _2879));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            _3072 = ((abs(_2885 / _2873) * cbSceneParam._m0[80u].y) * ((((_3027 - _3028) * 2.0) - ((exp2(_2893 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0)))) - exp2(_2893 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))))) * _3016)) - ((exp2(_2895 * _3027) - exp2(_2895 * _3028)) * _3016))) + (_2888 * cbSceneParam._m0[80u].z);
        }
        vec4 _3074 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, 1.0), 0.0);
        float _3083 = exp2((_3072 * (-1.44269502162933349609375)) * (1.0 - _3074.w));
        float _3084 = log2(_3083);
        float _3100 = log2(_2804);
        _2897 = (exp2(_3100 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].x)) * _3074.x) / cbSceneParam._m0[78u].x)) + _2801;
        _2899 = (exp2(_3100 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].y)) * _3074.y) / cbSceneParam._m0[78u].y)) + _2802;
        _2901 = (exp2(_3100 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].z)) * _3074.z) / cbSceneParam._m0[78u].z)) + _2803;
        _2903 = _3083 * _2804;
    }
    else
    {
        _2897 = _2801;
        _2899 = _2802;
        _2901 = _2803;
        _2903 = _2804;
    }
    bool _3110;
    vec4 _2913;
    vec4 _2935;
    float _2937;
    float _2941;
    float _2942;
    float _2943;
    float _2944;
    bool _2954;
    for (;;)
    {
        _2913 = cbMatDynParam._m0[0u];
        float _2915 = roundEven(_2913.y);
        bool _2916 = _2915 == 3.0;
        float _2917 = log2(_2903);
        float _2924 = exp2(_2917 * cbSceneParam._m0[78u].x) * _2773;
        float _2925 = exp2(_2917 * cbSceneParam._m0[78u].y) * _2774;
        float _2926 = exp2(_2917 * cbSceneParam._m0[78u].z) * _2775;
        float _2933 = _908 + (-0.5);
        _2935 = cbMtdParam._m0[1u];
        _2937 = _2935.y * _2933;
        float _2940 = (_2915 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2941 = _2940 * (_2916 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2897)));
        _2942 = _2940 * (_2916 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2899)));
        _2943 = _2940 * (_2916 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2901)));
        _2944 = _2933 * 0.999000012874603271484375;
        _2954 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2954)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2944) < 0.5)
            {
                _3110 = true;
                break;
            }
        }
        uint _3051 = _957 + uint(_2913.w);
        if ((cbInstanceData._m0[_3051].w < 1.0) && ((cbInstanceData._m0[_3051].w + _2944) < 0.5))
        {
            _3110 = true;
            break;
        }
        if ((_2937 + 1.0) < _2935.x)
        {
            _3110 = true;
            break;
        }
        _3110 = false;
        break;
    }
    float _3315;
    if (_3110)
    {
        discard_state = true;
        _3315 = 0.0;
    }
    else
    {
        _3315 = cbInstanceData._m0[_2776].w;
    }
    SV_Target.x = _2941;
    SV_Target.y = _2942;
    SV_Target.z = _2943;
    SV_Target.w = _3315;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2776].w;
    discard_exit();
}


