#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1484;
float _4123;
float _4124;
float _4125;
float _4126;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4135 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _4146 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4157 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _346 = _341.x * cbMtdParam._m0[11u].x;
    float _347 = _341.y * cbMtdParam._m0[11u].y;
    float _348 = _341.z * cbMtdParam._m0[11u].z;
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _386 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _426 = _424.x;
    float _438 = dot(vec4(_426, _424.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _455 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _386.x) * 2.0) - ((((_426 - _438) * cbMtdParam._m0[24u].z) + _438) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4168 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _463 = (_456 * ((_367.x * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _464 = (_456 * ((_367.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _465 = (_456 * ((_367.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _482 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _504 = _502.x;
    float _514 = dot(vec4(_504, _502.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _528 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _386.y) * 2.0) - ((((_504 - _514) * cbMtdParam._m0[24u].z) + _514) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4179 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _536 = (_529 * ((_482.x * cbMtdParam._m0[13u].x) - _463)) + _463;
    float _537 = (_529 * ((_482.y * cbMtdParam._m0[13u].y) - _464)) + _464;
    float _538 = (_529 * ((_482.z * cbMtdParam._m0[13u].z) - _465)) + _465;
    vec4 _556 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _303) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _304) + cbTextureTilingScale._m0[24u].w));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _575 = _573.x;
    float _585 = dot(vec4(_575, _573.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _597 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _386.z) * 2.0) - ((((_575 - _585) * cbMtdParam._m0[24u].z) + _585) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4190 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _605 = (_598 * ((_556.x * cbMtdParam._m0[14u].x) - _536)) + _536;
    float _606 = (_598 * ((_556.y * cbMtdParam._m0[14u].y) - _537)) + _537;
    float _607 = (_598 * ((_556.z * cbMtdParam._m0[14u].z) - _538)) + _538;
    float _611 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _605;
    float _614 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _606;
    float _617 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _607;
    float _624 = ((_605 - _611) * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) + _611;
    float _625 = ((_606 - _614) * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) + _614;
    float _626 = ((_607 - _617) * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) + _617;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _303) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _304) + cbTextureTilingScale._m0[14u].w));
    vec4 _663 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _707 = _703.z;
    float _714 = ((_686.x - _705) * _456) + _705;
    float _715 = ((_686.y - _706) * _456) + _706;
    float _716 = ((_686.z - _707) * _456) + _707;
    vec4 _728 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _739 = ((_728.x - _714) * _529) + _714;
    float _740 = ((_728.y - _715) * _529) + _715;
    float _741 = ((_728.z - _716) * _529) + _716;
    vec4 _753 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _303) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _304) + cbTextureTilingScale._m0[23u].w));
    float _766 = ((_753.z - _741) * _598) + _741;
    float _769 = ((((_753.x - _739) * _598) + _739) * 2.0) + (-1.0);
    float _770 = ((((_753.y - _740) * _598) + _740) * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _4201 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _776 = sqrt(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))));
    vec4 _790 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _815 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _817 = _815.x;
    float _818 = 1.0 - _817;
    float _831 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_817 - _818) * cbMtdParam._m0[24u].w) + _818) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4212 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _832 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _839 = (_832 * ((_644.x * cbMtdParam._m0[18u].x) - _624)) + _624;
    float _840 = (_832 * ((_644.y * cbMtdParam._m0[18u].y) - _625)) + _625;
    float _841 = (_832 * ((_644.z * cbMtdParam._m0[18u].z) - _626)) + _626;
    float _846 = (((_663.z - _766) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _766;
    float _850 = ((_790.z - _846) * cbMtdParam._m0[19u].w) + _846;
    vec4 _863 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _870 = (_863.x * 2.0) + (-1.0);
    float _871 = (_863.y * 2.0) + (-1.0);
    float _872 = dot(vec2(_870, _871), vec2(_870, _871));
    float _4223 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _880 = (_832 * (_863.z - _850)) + _850;
    float _889 = (_769 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_663.x * 2.0) + (-1.0)))) + (((_790.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _890 = (_770 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_663.y * 2.0) + (-1.0)))) + (((_790.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _902 = (((_870 - _889) + (cbMtdParam._m0[21u].x * _889)) * _832) + _889;
    float _903 = (((_871 - _890) + (cbMtdParam._m0[21u].x * _890)) * _832) + _890;
    float _904 = (_832 * (sqrt(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) - _776)) + _776;
    float _908 = cbMtdParam._m0[22u].x + _790.w;
    float _911 = fma(_904, _250 * NORMAL.x, fma(_903, _257 * TANGENT.x, (_243 * _235) * _902));
    float _914 = fma(_904, _250 * NORMAL.y, fma(_903, _257 * TANGENT.y, (_243 * _236) * _902));
    float _917 = fma(_904, _250 * NORMAL.z, fma(_903, _257 * TANGENT.z, (_243 * _237) * _902));
    float _921 = inversesqrt(dot(vec3(_911, _914, _917), vec3(_911, _914, _917)));
    float _922 = _921 * _911;
    float _923 = _921 * _914;
    float _924 = _921 * _917;
    float _4234 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _925 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _4245 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4256 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4267 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4278 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _943 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _995 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _985);
    float _996 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _985);
    float _997 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _985);
    float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
    float _1002 = _995 * _1001;
    float _1003 = _996 * _1001;
    float _1004 = _997 * _1001;
    vec4 _1009 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1011 = _1009.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1165 = sqrt(((_995 * _995) + (_996 * _996)) + (_997 * _997));
        float _1171 = (cbMatDynParam._m0[5u].x * _1165) + cbMatDynParam._m0[5u].y;
        float _4289 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1176 = (cbMatDynParam._m0[5u].z * _1165) + cbMatDynParam._m0[5u].w;
        float _4300 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) - _1172)) + _1172) < ((_1011 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1022 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1023 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1041 = fma(_924, cbSceneParam._m0[5u].z, fma(_923, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _922));
    float _1044 = fma(_924, cbSceneParam._m0[6u].z, fma(_923, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _922));
    float _1047 = fma(_924, cbSceneParam._m0[7u].z, fma(_923, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _922));
    uint _1060 = _284 + 9u;
    uint _1061 = _1060 + uint(cbMatDynParam._m0[0u].w);
    float _1067 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * cbInstanceData._m0[_1061].x;
    float _1068 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * cbInstanceData._m0[_1061].y;
    float _1069 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * cbInstanceData._m0[_1061].z;
    float _4311 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _4333 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    vec4 _1081 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1022, cbSceneParam._m0[86u].y * _1023));
    float _1085 = ((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * TEXCOORD_5.w) * _1081.x;
    float _1086 = dot(vec3(_922, _923, _924), vec3(_1002, _1003, _1004));
    float _1089 = _1086 * 2.0;
    float _1093 = (_1089 * _922) - _1002;
    float _1094 = (_1089 * _923) - _1003;
    float _1095 = (_1089 * _924) - _1004;
    float _1099 = abs(dot(vec3(_1002, _1003, _1004), vec3(_922, _923, _924)));
    float _4344 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1101 = sqrt(_925);
    float _1114 = exp2((_1101 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1101 * 3.0));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1483;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1208 = fma(_1154, cbModelParam._m0[26u].z, fma(_1150, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146));
        float _1212 = fma(_1154, cbModelParam._m0[27u].z, fma(_1150, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146));
        float _1216 = fma(_1154, cbModelParam._m0[28u].z, fma(_1150, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146));
        float _1241 = _1146 + _922;
        float _1242 = _1150 + _923;
        float _1243 = _1154 + _924;
        float _1253 = fma(_1243, cbModelParam._m0[26u].z, fma(_1242, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1241)) - _1208;
        float _1254 = fma(_1243, cbModelParam._m0[27u].z, fma(_1242, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1241)) - _1212;
        float _1255 = fma(_1243, cbModelParam._m0[28u].z, fma(_1242, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1241)) - _1216;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1208 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1212 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[34u].z) + ((((((_1216 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1311 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1277.x + (-0.5));
        float _1313 = _1311 * (_1277.y + (-0.5));
        float _1314 = _1311 * (_1277.z + (-0.5));
        float _1321 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1284.x + (-0.5));
        float _1323 = _1321 * (_1284.y + (-0.5));
        float _1324 = _1321 * (_1284.z + (-0.5));
        float _1331 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1291.x + (-0.5));
        float _1333 = _1331 * (_1291.y + (-0.5));
        float _1334 = _1331 * (_1291.z + (-0.5));
        float _1341 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1298.x + (-0.5));
        float _1343 = _1341 * (_1298.y + (-0.5));
        float _1344 = _1341 * (_1298.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1365 = (dot(vec3(_922, _923, _924), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1375 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4392 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1377 + 1.0))) + _1382) * _1345;
        float _1392 = _1313 * 0.5;
        float _1393 = _1323 * 0.5;
        float _1394 = _1333 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_922, _923, _924), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4403 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4414 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4425 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_1419 + 1.0))) + _1424) * _1346;
        float _1434 = _1314 * 0.5;
        float _1435 = _1324 * 0.5;
        float _1436 = _1334 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_922, _923, _924), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4458 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1461 + 1.0))) + _1466) * _1347;
        _1483 = _1314;
        _1485 = _1313;
        _1486 = _1312;
        _1487 = _1324;
        _1488 = _1323;
        _1489 = _1322;
        _1490 = _1334;
        _1491 = _1333;
        _1492 = _1332;
        _1493 = _1347;
        _1494 = _1346;
        _1495 = _1345;
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1484;
        _1485 = _1484;
        _1486 = _1484;
        _1487 = _1484;
        _1488 = _1484;
        _1489 = _1484;
        _1490 = _1484;
        _1491 = _1484;
        _1492 = _1484;
        _1493 = _1484;
        _1494 = _1484;
        _1495 = _1484;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1524 = fma(_1154, cbModelParam._m0[30u].z, fma(_1150, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146));
        float _1528 = fma(_1154, cbModelParam._m0[31u].z, fma(_1150, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146));
        float _1532 = fma(_1154, cbModelParam._m0[32u].z, fma(_1150, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146));
        float _1555 = _1146 + _922;
        float _1556 = _1150 + _923;
        float _1557 = _1154 + _924;
        float _1567 = fma(_1557, cbModelParam._m0[30u].z, fma(_1556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1555)) - _1524;
        float _1568 = fma(_1557, cbModelParam._m0[31u].z, fma(_1556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1555)) - _1528;
        float _1569 = fma(_1557, cbModelParam._m0[32u].z, fma(_1556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1555)) - _1532;
        float _1573 = inversesqrt(dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569)));
        float _1586 = ((_1573 * _1567) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1524 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1573 * _1568) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1528 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1573 * _1569) / cbModelParam._m0[35u].z) + ((((((_1532 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        float _1623 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1590.x + (-0.5));
        float _1625 = _1623 * (_1590.y + (-0.5));
        float _1626 = _1623 * (_1590.z + (-0.5));
        float _1633 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1597.x + (-0.5));
        float _1635 = _1633 * (_1597.y + (-0.5));
        float _1636 = _1633 * (_1597.z + (-0.5));
        float _1643 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1604.x + (-0.5));
        float _1645 = _1643 * (_1604.y + (-0.5));
        float _1646 = _1643 * (_1604.z + (-0.5));
        float _1653 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1611.x + (-0.5));
        float _1655 = _1653 * (_1611.y + (-0.5));
        float _1656 = _1653 * (_1611.z + (-0.5));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = _1624 * 0.5;
        float _1661 = _1634 * 0.5;
        float _1662 = _1644 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_922, _923, _924), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4499 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4510 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4521 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_1687 + 1.0))) + _1692) * _1657;
        float _1702 = _1625 * 0.5;
        float _1703 = _1635 * 0.5;
        float _1704 = _1645 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_922, _923, _924), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4532 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4543 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4554 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_1729 + 1.0))) + _1734) * _1658;
        float _1744 = _1626 * 0.5;
        float _1745 = _1636 * 0.5;
        float _1746 = _1646 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1760 = (dot(vec3(_922, _923, _924), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4565 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1769 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4576 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _1771 = _1770 * 2.0;
        float _1775 = (1.0 - _1770) / (_1770 + 1.0);
        float _4587 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _1785 = ((((1.0 - _1776) * (_1771 + 2.0)) * exp2(log2(isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_1771 + 1.0))) + _1776) * _1659;
        _1793 = _1626;
        _1794 = _1625;
        _1795 = _1624;
        _1796 = _1636;
        _1797 = _1635;
        _1798 = _1634;
        _1799 = _1646;
        _1800 = _1645;
        _1801 = _1644;
        _1802 = _1659;
        _1803 = _1658;
        _1804 = _1657;
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)));
    }
    else
    {
        _1793 = _1484;
        _1794 = _1484;
        _1795 = _1484;
        _1796 = _1484;
        _1797 = _1484;
        _1798 = _1484;
        _1799 = _1484;
        _1800 = _1484;
        _1801 = _1484;
        _1802 = _1484;
        _1803 = _1484;
        _1804 = _1484;
        _1805 = 0.0;
        _1806 = 0.0;
        _1807 = 0.0;
    }
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1496)) + _1496;
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1497)) + _1497;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1498)) + _1498;
    float _1840 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1843 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1846 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1817));
    float _1861 = _1093 * 0.5;
    float _1862 = _1094 * 0.5;
    float _1863 = _1095 * 0.5;
    float _1864 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1867 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1870 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1904;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1877 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1483, _1487, _1490, _1493));
        float _1881 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1885 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1486, _1489, _1492, _1495));
        float _1892 = dot(vec4(cbModelParam._m0[39u]), vec4(_1861, _1862, _1863, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1892) ? 0.0 : (isnan(0.0) ? _1892 : max(0.0, _1892))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1915;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1906 = dot(vec4(cbModelParam._m0[40u]), vec4(_1861, _1862, _1863, 1.0));
        _1915 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1915 = 1.0;
    }
    float _1919 = (_1915 * cbModelParam._m0[1u].x) + (_1904 * (1.0 - cbModelParam._m0[1u].x));
    float _1929 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _925);
    float _1930 = isnan(_1929) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1929 : min(cbModelParam._m0[25u].z, _1929));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1977 = fma(_1154, cbModelParam._m0[13u].z, fma(_1150, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1146)) + cbModelParam._m0[13u].w;
        float _1981 = fma(_1154, cbModelParam._m0[14u].z, fma(_1150, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1146)) + cbModelParam._m0[14u].w;
        float _1985 = fma(_1154, cbModelParam._m0[15u].z, fma(_1150, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1146)) + cbModelParam._m0[15u].w;
        float _1988 = fma(_1095, cbModelParam._m0[13u].z, fma(_1094, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1093));
        float _1991 = fma(_1095, cbModelParam._m0[14u].z, fma(_1094, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1093));
        float _1994 = fma(_1095, cbModelParam._m0[15u].z, fma(_1094, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1093));
        float _2022;
        if (_1988 > 0.0)
        {
            _2022 = abs((1.0 - _1977) / _1988);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1977 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2022 = frontier_phi_17_15_ladder;
        }
        float _2191;
        if (_1991 > 0.0)
        {
            _2191 = abs((1.0 - _1981) / _1991);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1981 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2191 = frontier_phi_26_22_ladder;
        }
        float _2486;
        if (_1994 > 0.0)
        {
            _2486 = abs((1.0 - _1985) / _1994);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1985 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2486 = frontier_phi_38_33_ladder;
        }
        float _2488 = isnan(_2191) ? _2022 : (isnan(_2022) ? _2191 : min(_2022, _2191));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1988) + _1977;
        float _2494 = (_2489 * _1991) + _1981;
        float _2495 = (_2489 * _1994) + _1985;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2498 = (-1.0) - _2496;
        float _2500 = _2496 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2495 > _2500) || ((_2495 < _2498) || ((_2494 > _2500) || ((_2494 < _2498) || ((_2493 < _2498) || (_2493 > _2500))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2495, cbModelParam._m0[9u].z, fma(_2494, cbModelParam._m0[9u].y, _2493 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2495, cbModelParam._m0[10u].z, fma(_2494, cbModelParam._m0[10u].y, _2493 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2495, cbModelParam._m0[11u].z, fma(_2494, cbModelParam._m0[11u].y, _2493 * cbModelParam._m0[11u].x))), _1930);
            frontier_phi_16_38_ladder = _2640.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2640.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2640.x * cbModelParam._m0[1u].y;
        }
        _2010 = frontier_phi_16_38_ladder_2;
        _2012 = frontier_phi_16_38_ladder_1;
        _2014 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1998 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1093, _1094, _1095), _1930);
        _2010 = _1998.x * cbModelParam._m0[1u].y;
        _2012 = _1998.y * cbModelParam._m0[1u].y;
        _2014 = _1998.z * cbModelParam._m0[1u].y;
    }
    float _2018 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _925);
    float _2019 = isnan(_2018) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2018 : min(cbModelParam._m0[25u].w, _2018));
    float _2108;
    float _2110;
    float _2112;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2072 = fma(_1154, cbModelParam._m0[21u].z, fma(_1150, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1146)) + cbModelParam._m0[21u].w;
        float _2076 = fma(_1154, cbModelParam._m0[22u].z, fma(_1150, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1146)) + cbModelParam._m0[22u].w;
        float _2080 = fma(_1154, cbModelParam._m0[23u].z, fma(_1150, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1146)) + cbModelParam._m0[23u].w;
        float _2083 = fma(_1095, cbModelParam._m0[21u].z, fma(_1094, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1093));
        float _2086 = fma(_1095, cbModelParam._m0[22u].z, fma(_1094, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1093));
        float _2089 = fma(_1095, cbModelParam._m0[23u].z, fma(_1094, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1093));
        float _2196;
        if (_2083 > 0.0)
        {
            _2196 = abs((1.0 - _2072) / _2083);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2072 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2196 = frontier_phi_28_24_ladder;
        }
        float _2513;
        if (_2086 > 0.0)
        {
            _2513 = abs((1.0 - _2076) / _2086);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2076 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2513 = frontier_phi_40_35_ladder;
        }
        float _2840;
        if (_2089 > 0.0)
        {
            _2840 = abs((1.0 - _2080) / _2089);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2080 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2840 = frontier_phi_50_47_ladder;
        }
        float _2842 = isnan(_2513) ? _2196 : (isnan(_2196) ? _2513 : min(_2196, _2513));
        float _2843 = isnan(_2840) ? _2842 : (isnan(_2842) ? _2840 : min(_2842, _2840));
        float _2847 = (_2843 * _2083) + _2072;
        float _2848 = (_2843 * _2086) + _2076;
        float _2849 = (_2843 * _2089) + _2080;
        float _2850 = _2843 * 9.9999997473787516355514526367188e-05;
        float _2851 = (-1.0) - _2850;
        float _2853 = _2850 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2849 > _2853) || ((_2849 < _2851) || ((_2848 > _2853) || ((_2848 < _2851) || ((_2847 < _2851) || (_2847 > _2853))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2849, cbModelParam._m0[17u].z, fma(_2848, cbModelParam._m0[17u].y, _2847 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2849, cbModelParam._m0[18u].z, fma(_2848, cbModelParam._m0[18u].y, _2847 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2849, cbModelParam._m0[19u].z, fma(_2848, cbModelParam._m0[19u].y, _2847 * cbModelParam._m0[19u].x))), _2019);
            frontier_phi_25_50_ladder = _2967.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2967.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2967.x * cbModelParam._m0[1u].z;
        }
        _2108 = frontier_phi_25_50_ladder_2;
        _2110 = frontier_phi_25_50_ladder_1;
        _2112 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2092 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1093, _1094, _1095), _2019);
        _2108 = _2092.x * cbModelParam._m0[1u].z;
        _2110 = _2092.y * cbModelParam._m0[1u].z;
        _2112 = _2092.z * cbModelParam._m0[1u].z;
    }
    float _2124 = ((((1.0 - _1114) * ((_1101 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1114 * _1101)) * _1085;
    float _2125 = _2124 * ((cbModelParam._m0[1u].w * (_2108 - _2010)) + _2010);
    float _2126 = _2124 * ((cbModelParam._m0[1u].w * (_2110 - _2012)) + _2012);
    float _2127 = _2124 * ((cbModelParam._m0[1u].w * (_2112 - _2014)) + _2014);
    float _2130 = fma(_2127, cbSceneParam._m0[89u].z, fma(_2126, cbSceneParam._m0[89u].y, _2125 * cbSceneParam._m0[89u].x));
    float _2133 = fma(_2127, cbSceneParam._m0[90u].z, fma(_2126, cbSceneParam._m0[90u].y, _2125 * cbSceneParam._m0[90u].x));
    float _2136 = fma(_2127, cbSceneParam._m0[91u].z, fma(_2126, cbSceneParam._m0[91u].y, _2125 * cbSceneParam._m0[91u].x));
    float _2170 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2174 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2178 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2182 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2183 = _2170 / _2182;
    float _2184 = _2174 / _2182;
    float _2185 = _2178 / _2182;
    float _2332;
    float _2333;
    float _2334;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2212 = ((uint(_2185 > cbSceneParam._m0[59u].y) + uint(_2185 > cbSceneParam._m0[59u].x)) + uint(_2185 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2213 = _2212 + 43u;
        uint _2221 = _2212 + 44u;
        uint _2229 = _2212 + 45u;
        uint _2237 = _2212 + 46u;
        float _2248 = fma(_2182, cbSceneParam._m0[_2213].w, fma(_2178, cbSceneParam._m0[_2213].z, fma(_2174, cbSceneParam._m0[_2213].y, _2170 * cbSceneParam._m0[_2213].x)));
        float _2252 = fma(_2182, cbSceneParam._m0[_2221].w, fma(_2178, cbSceneParam._m0[_2221].z, fma(_2174, cbSceneParam._m0[_2221].y, _2170 * cbSceneParam._m0[_2221].x)));
        float _2260 = fma(_2182, cbSceneParam._m0[_2237].w, fma(_2178, cbSceneParam._m0[_2237].z, fma(_2174, cbSceneParam._m0[_2237].y, _2170 * cbSceneParam._m0[_2237].x)));
        float _2265 = cbSceneParam._m0[33u].z * _2260;
        float _2267 = cbSceneParam._m0[33u].w * _2260;
        float _2270 = fma(_2182, cbSceneParam._m0[_2229].w, fma(_2178, cbSceneParam._m0[_2229].z, fma(_2174, cbSceneParam._m0[_2229].y, _2170 * cbSceneParam._m0[_2229].x))) / _2260;
        float _2318 = (cbSceneParam._m0[33u].x - sqrt(((_2184 * _2184) + (_2183 * _2183)) + (_2185 * _2185))) * cbSceneParam._m0[33u].y;
        float _4713 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2325 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2265 + _2248) / _2260, (_2267 + _2252) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2267 + _2248) / _2260, (_2252 - _2265) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2248 - _2265) / _2260, (_2252 - _2267) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2248 - _2267) / _2260, (_2265 + _2252) / _2260), _2270), 0.0)).x), vec4(0.25)));
        _2332 = 1.0 - (_2325 * cbSceneParam._m0[34u].x);
        _2333 = 1.0 - (_2325 * cbSceneParam._m0[34u].y);
        _2334 = 1.0 - (_2325 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2332 = 1.0;
        _2333 = 1.0;
        _2334 = 1.0;
    }
    float _2398;
    float _2400;
    float _2402;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2386 = fma(_2182, cbSceneParam._m0[63u].w, fma(_2178, cbSceneParam._m0[63u].z, fma(_2174, cbSceneParam._m0[63u].y, _2170 * cbSceneParam._m0[63u].x)));
        float _2387 = fma(_2182, cbSceneParam._m0[60u].w, fma(_2178, cbSceneParam._m0[60u].z, fma(_2174, cbSceneParam._m0[60u].y, _2170 * cbSceneParam._m0[60u].x))) / _2386;
        float _2388 = fma(_2182, cbSceneParam._m0[61u].w, fma(_2178, cbSceneParam._m0[61u].z, fma(_2174, cbSceneParam._m0[61u].y, _2170 * cbSceneParam._m0[61u].x))) / _2386;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2387 >= cbSceneParam._m0[64u].x) && (_2388 >= cbSceneParam._m0[64u].y)) && (_2387 <= cbSceneParam._m0[64u].z)) && (_2388 <= cbSceneParam._m0[64u].w))
        {
            float _2526 = fma(_2182, cbSceneParam._m0[62u].w, fma(_2178, cbSceneParam._m0[62u].z, fma(_2174, cbSceneParam._m0[62u].y, _2170 * cbSceneParam._m0[62u].x))) / _2386;
            float _2530 = isnan(cbSceneParam._m0[41u].w) ? _2526 : (isnan(_2526) ? cbSceneParam._m0[41u].w : max(_2526, cbSceneParam._m0[41u].w));
            float _2573 = (cbSceneParam._m0[33u].x - sqrt(((_2184 * _2184) + (_2183 * _2183)) + (_2185 * _2185))) * cbSceneParam._m0[33u].y;
            float _4729 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
            float _2580 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2387, cbSceneParam._m0[33u].w + _2388), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2387, _2388 - cbSceneParam._m0[33u].z), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2387 - cbSceneParam._m0[33u].z, _2388 - cbSceneParam._m0[33u].w), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2387 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2388), _2530), 0.0)).x), vec4(0.25)));
            float _2584 = 1.0 - (_2580 * cbSceneParam._m0[34u].x);
            float _2585 = 1.0 - (_2580 * cbSceneParam._m0[34u].y);
            float _2586 = 1.0 - (_2580 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2586) ? _2334 : (isnan(_2334) ? _2586 : min(_2334, _2586));
            frontier_phi_37_36_ladder_1 = isnan(_2585) ? _2333 : (isnan(_2333) ? _2585 : min(_2333, _2585));
            frontier_phi_37_36_ladder_2 = isnan(_2584) ? _2332 : (isnan(_2332) ? _2584 : min(_2332, _2584));
        }
        else
        {
            frontier_phi_37_36_ladder = _2334;
            frontier_phi_37_36_ladder_1 = _2333;
            frontier_phi_37_36_ladder_2 = _2332;
        }
        _2398 = frontier_phi_37_36_ladder_2;
        _2400 = frontier_phi_37_36_ladder_1;
        _2402 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2398 = _2332;
        _2400 = _2333;
        _2402 = _2334;
    }
    uvec4 _2407 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2409 = _2407.x * 14u;
    uint _2410 = _2409 + 13u;
    float _2417 = _1085 + (-1.0);
    float _2422 = (cbLight._m0[_2410].x * _2417) + 1.0;
    float _2423 = (cbLight._m0[_2410].y * _2417) + 1.0;
    float _2424 = (cbLight._m0[_2410].z * _2417) + 1.0;
    float _2425 = (cbLight._m0[_2410].w * _2417) + 1.0;
    uint _2426 = _2409 + 5u;
    float _2432 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
    uint _2436 = _2409 + 4u;
    float _2445 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
    uint _2449 = _2409 | 1u;
    float _2460 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_922, _923, _924));
    float _2463 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_922, _923, _924));
    float _4765 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _4776 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2468 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * 0.3183098733425140380859375;
    float _2470 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * 0.3183098733425140380859375;
    float _2477 = ((cbLight._m0[_2426].x * _2432) * _2470) + (((cbLight._m0[_2436].x * _2398) * _2445) * _2468);
    float _2478 = ((_2432 * cbLight._m0[_2426].y) * _2470) + (((cbLight._m0[_2436].y * _2400) * _2445) * _2468);
    float _2479 = ((_2432 * cbLight._m0[_2426].z) * _2470) + (((cbLight._m0[_2436].z * _2402) * _2445) * _2468);
    uvec4 _2483 = floatBitsToUint(cbLight._m0[_2409 + 12u]);
    bool _2485 = _2483.x == 0u;
    float _2587;
    float _2589;
    float _2591;
    if (_2485)
    {
        _2587 = _2477;
        _2589 = _2478;
        _2591 = _2479;
    }
    else
    {
        uint _2595 = _2409 + 6u;
        float _2611 = (dot(vec3(cbLight._m0[_2409 + 2u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2612 = _2611 * _2611;
        float _4787 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2613 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2614 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2587 = (((cbLight._m0[_2595].x * 0.3183098733425140380859375) * _2613) * _2614) + _2477;
        _2589 = (((cbLight._m0[_2595].y * 0.3183098733425140380859375) * _2613) * _2614) + _2478;
        _2591 = (((cbLight._m0[_2595].z * 0.3183098733425140380859375) * _2613) * _2614) + _2479;
    }
    bool _2594 = _2483.y == 0u;
    float _2649;
    float _2651;
    float _2653;
    if (_2594)
    {
        _2649 = _2587;
        _2651 = _2589;
        _2653 = _2591;
    }
    else
    {
        uint _2811 = _2409 + 7u;
        float _2827 = (dot(vec3(cbLight._m0[_2409 + 3u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2828 = _2827 * _2827;
        float _4803 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2829 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2830 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2649 = (((cbLight._m0[_2811].x * 0.3183098733425140380859375) * _2829) * _2830) + _2587;
        _2651 = (((cbLight._m0[_2811].y * 0.3183098733425140380859375) * _2829) * _2830) + _2589;
        _2653 = (((cbLight._m0[_2811].z * 0.3183098733425140380859375) * _2829) * _2830) + _2591;
    }
    uint _2656 = _2409 + 8u;
    float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _925) * 0.949999988079071044921875);
    float _2670 = _2669 * _2669;
    float _2671 = cbLight._m0[_2409].x + _1002;
    float _2672 = cbLight._m0[_2409].y + _1003;
    float _2673 = cbLight._m0[_2409].z + _1004;
    float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
    float _2678 = _2677 * _2671;
    float _2679 = _2677 * _2672;
    float _2680 = _2677 * _2673;
    float _2681 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2409].xyz));
    float _4819 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
    float _4830 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _2685 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
    float _2686 = dot(vec3(_922, _923, _924), vec3(_2678, _2679, _2680));
    float _4841 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
    float _2690 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2678, _2679, _2680));
    float _4852 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2694 = _2670 * _2670;
    float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
    float _2709 = (exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2710 = 1.0 - _2670;
    float _2721 = (0.5 / (((_2685 * ((_2684 * _2710) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2710) + _2670) * _2684))) * _2684;
    float _4863 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2723 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
    uint _2737 = _2409 + 9u;
    float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2449].w)) * _925) * 0.949999988079071044921875);
    float _2749 = _2748 * _2748;
    float _2750 = cbLight._m0[_2449].x + _1002;
    float _2751 = cbLight._m0[_2449].y + _1003;
    float _2752 = cbLight._m0[_2449].z + _1004;
    float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
    float _2757 = _2756 * _2750;
    float _2758 = _2756 * _2751;
    float _2759 = _2756 * _2752;
    float _2760 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2449].xyz));
    float _4874 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2763 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
    float _2764 = dot(vec3(_922, _923, _924), vec3(_2757, _2758, _2759));
    float _4885 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2767 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
    float _2768 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_2757, _2758, _2759));
    float _4896 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2772 = _2749 * _2749;
    float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
    float _2785 = (exp2(log2(1.0 - (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2786 = 1.0 - _2749;
    float _2796 = (0.5 / (((_2685 * ((_2763 * _2786) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2786) + _2749) * _2763))) * _2763;
    float _4907 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2798 = (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
    float _2808 = (((_2785 * cbLight._m0[_2737].x) * _2798) * _2432) + ((((cbLight._m0[_2656].x * _2398) * _2709) * _2723) * _2445);
    float _2809 = (((_2785 * cbLight._m0[_2737].y) * _2798) * _2432) + ((((cbLight._m0[_2656].y * _2400) * _2709) * _2723) * _2445);
    float _2810 = (((_2785 * cbLight._m0[_2737].z) * _2798) * _2432) + ((((cbLight._m0[_2656].z * _2402) * _2709) * _2723) * _2445);
    float _2866;
    float _2868;
    float _2870;
    if (_2485)
    {
        _2866 = _2808;
        _2868 = _2809;
        _2870 = _2810;
    }
    else
    {
        uint _2872 = _2409 + 2u;
        uint _2876 = _2409 + 10u;
        float _2890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2872].w)) * _925) * 0.949999988079071044921875);
        float _2891 = _2890 * _2890;
        float _2892 = cbLight._m0[_2872].x + _1002;
        float _2893 = cbLight._m0[_2872].y + _1003;
        float _2894 = cbLight._m0[_2872].z + _1004;
        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
        float _2899 = _2898 * _2892;
        float _2900 = _2898 * _2893;
        float _2901 = _2898 * _2894;
        float _2902 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2872].xyz));
        float _4918 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
        float _2906 = dot(vec3(_922, _923, _924), vec3(_2899, _2900, _2901));
        float _4929 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
        float _2910 = dot(vec3(cbLight._m0[_2872].xyz), vec3(_2899, _2900, _2901));
        float _4940 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2914 = _2891 * _2891;
        float _2918 = ((_2909 * _2909) * (_2914 + (-1.0))) + 1.0;
        float _2927 = (exp2(log2(1.0 - (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2928 = 1.0 - _2891;
        float _2938 = (0.5 / (((_2685 * ((_2905 * _2928) + _2891)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2928) + _2891) * _2905))) * _2905;
        float _4951 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2940 = (isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_2914 / ((_2918 * _2918) * 3.141590118408203125));
        float _2941 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2866 = (((_2927 * cbLight._m0[_2876].x) * _2940) * _2941) + _2808;
        _2868 = (((_2927 * cbLight._m0[_2876].y) * _2940) * _2941) + _2809;
        _2870 = (((_2927 * cbLight._m0[_2876].z) * _2940) * _2941) + _2810;
    }
    float _2972;
    float _2974;
    float _2976;
    if (_2594)
    {
        _2972 = _2866;
        _2974 = _2868;
        _2976 = _2870;
    }
    else
    {
        uint _2983 = _2409 + 3u;
        uint _2987 = _2409 + 11u;
        float _3001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2983].w)) * _925) * 0.949999988079071044921875);
        float _3002 = _3001 * _3001;
        float _3003 = cbLight._m0[_2983].x + _1002;
        float _3004 = cbLight._m0[_2983].y + _1003;
        float _3005 = cbLight._m0[_2983].z + _1004;
        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
        float _3010 = _3009 * _3003;
        float _3011 = _3009 * _3004;
        float _3012 = _3009 * _3005;
        float _3013 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2983].xyz));
        float _4967 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        float _3016 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
        float _3017 = dot(vec3(_922, _923, _924), vec3(_3010, _3011, _3012));
        float _4978 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        float _3020 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
        float _3021 = dot(vec3(cbLight._m0[_2983].xyz), vec3(_3010, _3011, _3012));
        float _4989 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3025 = _3002 * _3002;
        float _3029 = ((_3020 * _3020) * (_3025 + (-1.0))) + 1.0;
        float _3038 = (exp2(log2(1.0 - (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3039 = 1.0 - _3002;
        float _3049 = (0.5 / (((_2685 * ((_3016 * _3039) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _3039) + _3002) * _3016))) * _3016;
        float _5000 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
        float _3051 = (isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0))) * (_3025 / ((_3029 * _3029) * 3.141590118408203125));
        float _3052 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2972 = (((_3038 * cbLight._m0[_2987].x) * _3051) * _3052) + _2866;
        _2974 = (((_3038 * cbLight._m0[_2987].y) * _3051) * _3052) + _2868;
        _2976 = (((_3038 * cbLight._m0[_2987].z) * _3051) * _3052) + _2870;
    }
    float _3118;
    float _3120;
    float _3122;
    float _3124;
    float _3126;
    float _3128;
    if (_2407.y == 0u)
    {
        uvec4 _3073 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3074 = _3073.x;
        uint _3085 = uint((float(_3073.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1023) / _3074))) + floor(float(uint(cbSceneParam._m0[85u].x * _1022) / _3074)));
        float _3095 = (log2(_2185 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3096 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
        uint _3099 = uint(isnan(14.0) ? _3096 : (isnan(_3096) ? 14.0 : min(_3096, 14.0)));
        uvec4 _3104 = texelFetch(g_lightClusterGridBuffer, int(((_3099 << 2u) + (_3085 << 6u)) >> 2u));
        uint _3105 = _3104.x;
        uint _3106 = _3073.z;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        if (((((1u << ((_3106 >> 4u) & 15u)) + 4294967295u) & _3105) == 0u) || ((_3106 & 240u) == 0u))
        {
            _3185 = 0.0;
            _3187 = 0.0;
            _3189 = 0.0;
            _3191 = 0.0;
            _3193 = 0.0;
            _3195 = 0.0;
        }
        else
        {
            float _3186;
            float _3188;
            float _3190;
            float _3192;
            float _3194;
            float _3196;
            float _3338 = 0.0;
            float _3339 = 0.0;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            uint _3344 = 0u;
            uint _3353;
            bool _3354;
            for (;;)
            {
                _3353 = texelFetch(g_lightClassification, int((((_3099 << 5u) + (_3085 << 9u)) + (_3344 << 2u)) >> 2u)).x;
                _3354 = _3353 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3354)
                {
                    frontier_phi_71_pred = _3343;
                    frontier_phi_71_pred_1 = _3342;
                    frontier_phi_71_pred_2 = _3341;
                    frontier_phi_71_pred_3 = _3340;
                    frontier_phi_71_pred_4 = _3339;
                    frontier_phi_71_pred_5 = _3338;
                }
                else
                {
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    uint _3489;
                    _3483 = _3338;
                    _3484 = _3339;
                    _3485 = _3340;
                    _3486 = _3341;
                    _3487 = _3342;
                    _3488 = _3343;
                    _3489 = _3353;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    for (;;)
                    {
                        uint _3493 = uint(findLSB(_3489)) + (_3344 << 5u);
                        uint _3490 = (_3489 + 4294967295u) & _3489;
                        uint _3495 = _3493 * 48u;
                        vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3495)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 3u)).x));
                        uint _3515 = (_3493 * 48u) + 4u;
                        vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3515)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 3u)).x));
                        uint _3534 = (_3493 * 48u) + 8u;
                        vec3 _3545 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3534)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 2u)).x));
                        float _3549 = _3509.x - _2183;
                        float _3550 = _3509.y - _2184;
                        float _3551 = _3509.z - _2185;
                        float _3552 = dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551));
                        float _3555 = inversesqrt(_3552);
                        float _3556 = _3555 * _3549;
                        float _3557 = _3555 * _3550;
                        float _3558 = _3555 * _3551;
                        float _3559 = dot(vec3(_1041, _1044, _1047), vec3(_3556, _3557, _3558));
                        float _3564 = 1.0 - (_3552 * _3509.w);
                        float _5026 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3565 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                        float _3566 = sqrt(_3552) * _3528.w;
                        float _3569 = 1.39999997615814208984375 / (_3566 + 1.39999997615814208984375);
                        float _3570 = _3569 * _3569;
                        float _3573 = ((1.0 - _3570) * _3559) + _3570;
                        float _3576 = _3566 * _3566;
                        float _3580 = ((isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0))) * _3565) / ((_3576 * 0.699999988079071044921875) + 1.0);
                        float _3584 = (-0.0) - _2183;
                        float _3585 = (-0.0) - _2184;
                        float _3586 = (-0.0) - _2185;
                        float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                        float _3591 = _3590 * _3584;
                        float _3592 = _3590 * _3585;
                        float _3593 = _3590 * _3586;
                        float _3600 = exp2(log2(1.0 / ((_3576 * 3.5) + 5.0)) * 0.25);
                        float _3601 = 1.0 - _1101;
                        float _3608 = sqrt(1.0 - ((1.0 - (_3601 * _3601)) * (1.0 - (_3600 * _3600))));
                        float _3609 = _3608 * _3608;
                        float _3610 = _3609 * _3609;
                        float _3611 = _3591 + _3556;
                        float _3612 = _3592 + _3557;
                        float _3613 = _3593 + _3558;
                        float _3617 = inversesqrt(dot(vec3(_3611, _3612, _3613), vec3(_3611, _3612, _3613)));
                        float _3621 = dot(vec3(_1041, _1044, _1047), vec3(_3591, _3592, _3593));
                        float _5042 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                        float _3624 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                        float _3625 = dot(vec3(_1041, _1044, _1047), vec3(_3617 * _3611, _3617 * _3612, _3617 * _3613));
                        float _5053 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                        float _3628 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
                        float _3632 = ((_3628 * _3628) * (_3610 + (-1.0))) + 1.0;
                        float _3633 = _3569 * _3609;
                        float _3634 = _3633 * _3633;
                        float _3637 = ((1.0 - _3634) * _3559) + _3634;
                        float _5064 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                        float _3638 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                        float _3639 = 1.0 - _3609;
                        float _3649 = (0.5 / (((_3638 * ((_3624 * _3639) + _3609)) + 9.9999999392252902907785028219223e-09) + (((_3638 * _3639) + _3609) * _3624))) * _3638;
                        float _5075 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                        float _3660 = (((_3610 * 3.1415927410125732421875) * (isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0)))) / ((_3632 * _3632) * ((_3576 * 2.1991131305694580078125) + 3.141590118408203125))) * _3565;
                        _3413 = (_3580 * _3528.x) + _3486;
                        _3414 = (_3580 * _3528.y) + _3487;
                        _3415 = (_3580 * _3528.z) + _3488;
                        _3410 = (_3660 * _3545.x) + _3483;
                        _3411 = (_3660 * _3545.y) + _3484;
                        _3412 = (_3660 * _3545.z) + _3485;
                        if (_3490 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3483 = _3410;
                            _3484 = _3411;
                            _3485 = _3412;
                            _3486 = _3413;
                            _3487 = _3414;
                            _3488 = _3415;
                            _3489 = _3490;
                        }
                    }
                    frontier_phi_71_pred = _3415;
                    frontier_phi_71_pred_1 = _3414;
                    frontier_phi_71_pred_2 = _3413;
                    frontier_phi_71_pred_3 = _3412;
                    frontier_phi_71_pred_4 = _3411;
                    frontier_phi_71_pred_5 = _3410;
                }
                _3196 = frontier_phi_71_pred;
                _3194 = frontier_phi_71_pred_1;
                _3192 = frontier_phi_71_pred_2;
                _3190 = frontier_phi_71_pred_3;
                _3188 = frontier_phi_71_pred_4;
                _3186 = frontier_phi_71_pred_5;
                uint _3345 = _3344 + 1u;
                if (_3345 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3338 = _3186;
                    _3339 = _3188;
                    _3340 = _3190;
                    _3341 = _3192;
                    _3342 = _3194;
                    _3343 = _3196;
                    _3344 = _3345;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3185 = _3186;
            _3187 = _3188;
            _3189 = _3190;
            _3191 = _3192;
            _3193 = _3194;
            _3195 = _3196;
        }
        uvec4 _3199 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3200 = _3199.z;
        uint _3202 = (_3200 >> 8u) & 15u;
        float _3306;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        float _3316;
        if (((4294967295u << _3202) & _3105) == 0u)
        {
            _3306 = _3185;
            _3308 = _3187;
            _3310 = _3189;
            _3312 = _3191;
            _3314 = _3193;
            _3316 = _3195;
        }
        else
        {
            float _3331 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
            float _3332 = _3331 * _2183;
            float _3333 = _3331 * _2184;
            float _3334 = _3331 * _2185;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3202 < ((_3200 >> 12u) & 15u))
            {
                float _3307;
                float _3309;
                float _3311;
                float _3313;
                float _3315;
                float _3317;
                float _3466 = _3185;
                float _3467 = _3187;
                float _3468 = _3189;
                float _3469 = _3191;
                float _3470 = _3193;
                float _3471 = _3195;
                uint _3472 = _3202;
                uint _3481;
                bool _3482;
                for (;;)
                {
                    _3481 = texelFetch(g_lightClassification, int((((_3099 << 5u) + (_3085 << 9u)) + (_3472 << 2u)) >> 2u)).x;
                    _3482 = _3481 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3482)
                    {
                        frontier_phi_82_pred = _3471;
                        frontier_phi_82_pred_1 = _3470;
                        frontier_phi_82_pred_2 = _3469;
                        frontier_phi_82_pred_3 = _3468;
                        frontier_phi_82_pred_4 = _3467;
                        frontier_phi_82_pred_5 = _3466;
                    }
                    else
                    {
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3967;
                        float _3968;
                        float _3969;
                        float _3970;
                        float _3971;
                        float _3972;
                        float _3687 = _3466;
                        float _3688 = _3467;
                        float _3689 = _3468;
                        float _3690 = _3469;
                        float _3691 = _3470;
                        float _3692 = _3471;
                        uint _3693 = _3481;
                        uint _3694;
                        vec4 _3719;
                        float _3720;
                        vec4 _3735;
                        vec3 _3747;
                        vec4 _3762;
                        vec4 _3777;
                        float _3823;
                        bool _3824;
                        for (;;)
                        {
                            uint _3704 = ((_3472 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3693));
                            _3694 = (_3693 + 4294967295u) & _3693;
                            uint _3706 = _3704 * 40u;
                            _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            _3720 = _3719.w;
                            uint _3722 = (_3704 * 40u) + 4u;
                            _3735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 3u)).x));
                            uint _3737 = (_3704 * 40u) + 8u;
                            _3747 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 2u)).x));
                            uint _3749 = (_3704 * 40u) + 16u;
                            _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            uint _3764 = (_3704 * 40u) + 20u;
                            _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            uint _3779 = (_3704 * 40u) + 24u;
                            vec4 _3792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 3u)).x));
                            uint _3798 = (_3704 * 40u) + 28u;
                            vec4 _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            _3823 = fma(_2185, _3811.z, fma(_2184, _3811.y, _3811.x * _2183)) + _3811.w;
                            _3824 = !((fma(_2185, _3792.z, fma(_2184, _3792.y, _3792.x * _2183)) + _3792.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3824)
                            {
                                float _3851 = _3719.x - _2183;
                                float _3852 = _3719.y - _2184;
                                float _3853 = _3719.z - _2185;
                                float _3854 = dot(vec3(_3851, _3852, _3853), vec3(_3851, _3852, _3853));
                                float _3857 = inversesqrt(_3854);
                                float _3858 = _3857 * _3851;
                                float _3859 = _3857 * _3852;
                                float _3860 = _3857 * _3853;
                                float _3864 = 1.0 - (_3854 / (_3720 * _3720));
                                float _5086 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3865 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
                                float _3869 = sqrt(_3854) * _3735.w;
                                float _3871 = 1.39999997615814208984375 / (_3869 + 1.39999997615814208984375);
                                float _3872 = _3871 * _3871;
                                float _3875 = ((1.0 - _3872) * dot(vec3(_3858, _3859, _3860), vec3(_1041, _1044, _1047))) + _3872;
                                float _3878 = _3869 * _3869;
                                float _3882 = (fma(_2185, _3762.z, fma(_2184, _3762.y, _3762.x * _2183)) + _3762.w) / _3823;
                                float _3883 = (fma(_2185, _3777.z, fma(_2184, _3777.y, _3777.x * _2183)) + _3777.w) / _3823;
                                float _3887 = 1.0 - dot(vec2(_3882, _3883), vec2(_3882, _3883));
                                float _5102 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3888 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
                                float _3889 = _3888 * (((isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0))) * _3865) / ((_3878 * 0.699999988079071044921875) + 1.0));
                                float _3901 = exp2(log2(1.0 / ((_3878 * 3.5) + 5.0)) * 0.25);
                                float _3902 = 1.0 - _1101;
                                float _3909 = sqrt(1.0 - ((1.0 - (_3902 * _3902)) * (1.0 - (_3901 * _3901))));
                                float _3910 = _3909 * _3909;
                                float _3911 = _3910 * _3910;
                                float _3912 = _3858 - _3332;
                                float _3913 = _3859 - _3333;
                                float _3914 = _3860 - _3334;
                                float _3918 = inversesqrt(dot(vec3(_3912, _3913, _3914), vec3(_3912, _3913, _3914)));
                                float _3922 = dot(vec3(_1041, _1044, _1047), vec3((-0.0) - _3332, (-0.0) - _3333, (-0.0) - _3334));
                                float _5113 = isnan(0.0) ? _3922 : (isnan(_3922) ? 0.0 : max(_3922, 0.0));
                                float _3925 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
                                float _3926 = dot(vec3(_1041, _1044, _1047), vec3(_3918 * _3912, _3918 * _3913, _3918 * _3914));
                                float _5124 = isnan(0.0) ? _3926 : (isnan(_3926) ? 0.0 : max(_3926, 0.0));
                                float _3929 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
                                float _3933 = ((_3929 * _3929) * (_3911 + (-1.0))) + 1.0;
                                float _3934 = _3871 * _3910;
                                float _3935 = _3934 * _3934;
                                float _3941 = ((1.0 - _3935) * dot(vec3(_1041, _1044, _1047), vec3(_3858, _3859, _3860))) + _3935;
                                float _5135 = isnan(0.0) ? _3941 : (isnan(_3941) ? 0.0 : max(_3941, 0.0));
                                float _3942 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
                                float _3943 = 1.0 - _3910;
                                float _3953 = (0.5 / (((_3942 * ((_3925 * _3943) + _3910)) + 9.9999999392252902907785028219223e-09) + (((_3942 * _3943) + _3910) * _3925))) * _3942;
                                float _5146 = isnan(0.0) ? _3953 : (isnan(_3953) ? 0.0 : max(_3953, 0.0));
                                float _3963 = (_3888 * _3865) * (((_3911 * 3.1415927410125732421875) * (isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0)))) / ((_3933 * _3933) * ((_3878 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3889 * _3735.z;
                                frontier_phi_88_pred_1 = _3889 * _3735.y;
                                frontier_phi_88_pred_2 = _3889 * _3735.x;
                                frontier_phi_88_pred_3 = _3963 * _3747.z;
                                frontier_phi_88_pred_4 = _3963 * _3747.y;
                                frontier_phi_88_pred_5 = _3963 * _3747.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3972 = frontier_phi_88_pred;
                            _3971 = frontier_phi_88_pred_1;
                            _3970 = frontier_phi_88_pred_2;
                            _3969 = frontier_phi_88_pred_3;
                            _3968 = frontier_phi_88_pred_4;
                            _3967 = frontier_phi_88_pred_5;
                            _3677 = _3970 + _3690;
                            _3678 = _3971 + _3691;
                            _3679 = _3972 + _3692;
                            _3674 = _3967 + _3687;
                            _3675 = _3968 + _3688;
                            _3676 = _3969 + _3689;
                            if (_3694 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3687 = _3674;
                                _3688 = _3675;
                                _3689 = _3676;
                                _3690 = _3677;
                                _3691 = _3678;
                                _3692 = _3679;
                                _3693 = _3694;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3679;
                        frontier_phi_82_pred_1 = _3678;
                        frontier_phi_82_pred_2 = _3677;
                        frontier_phi_82_pred_3 = _3676;
                        frontier_phi_82_pred_4 = _3675;
                        frontier_phi_82_pred_5 = _3674;
                    }
                    _3317 = frontier_phi_82_pred;
                    _3315 = frontier_phi_82_pred_1;
                    _3313 = frontier_phi_82_pred_2;
                    _3311 = frontier_phi_82_pred_3;
                    _3309 = frontier_phi_82_pred_4;
                    _3307 = frontier_phi_82_pred_5;
                    uint _3473 = _3472 + 1u;
                    if (_3473 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3466 = _3307;
                        _3467 = _3309;
                        _3468 = _3311;
                        _3469 = _3313;
                        _3470 = _3315;
                        _3471 = _3317;
                        _3472 = _3473;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3313;
                frontier_phi_63_64_ladder_1 = _3317;
                frontier_phi_63_64_ladder_2 = _3315;
                frontier_phi_63_64_ladder_3 = _3311;
                frontier_phi_63_64_ladder_4 = _3309;
                frontier_phi_63_64_ladder_5 = _3307;
            }
            else
            {
                frontier_phi_63_64_ladder = _3191;
                frontier_phi_63_64_ladder_1 = _3195;
                frontier_phi_63_64_ladder_2 = _3193;
                frontier_phi_63_64_ladder_3 = _3189;
                frontier_phi_63_64_ladder_4 = _3187;
                frontier_phi_63_64_ladder_5 = _3185;
            }
            _3306 = frontier_phi_63_64_ladder_5;
            _3308 = frontier_phi_63_64_ladder_4;
            _3310 = frontier_phi_63_64_ladder_3;
            _3312 = frontier_phi_63_64_ladder;
            _3314 = frontier_phi_63_64_ladder_2;
            _3316 = frontier_phi_63_64_ladder_1;
        }
        float _3321 = isnan(1.0) ? _1085 : (isnan(_1085) ? 1.0 : min(_1085, 1.0));
        _3118 = (_3321 * _3312) + _2649;
        _3120 = (_3321 * _3314) + _2651;
        _3122 = (_3321 * _3316) + _2653;
        _3124 = ((_3306 * 0.039999999105930328369140625) * _3321) + _2972;
        _3126 = ((_3308 * 0.039999999105930328369140625) * _3321) + _2974;
        _3128 = ((_3310 * 0.039999999105930328369140625) * _3321) + _2976;
    }
    else
    {
        _3118 = _2649;
        _3120 = _2651;
        _3122 = _2653;
        _3124 = _2972;
        _3126 = _2974;
        _3128 = _2976;
    }
    float _5162 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _5173 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _5184 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _3145 = ((isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0))) * (_3118 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1085))) + ((_3124 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1919)) * cbPerFrame._m0[3u].x);
    float _3146 = ((isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0))) * (_3120 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1085))) + ((_3126 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1919)) * cbPerFrame._m0[3u].x);
    float _3147 = ((isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0))) * (_3122 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1085))) + ((_3128 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1919)) * cbPerFrame._m0[3u].x);
    uint _3148 = _284 + 6u;
    float _3156 = _1022 / cbSceneParam._m0[86u].x;
    float _3157 = _1023 / cbSceneParam._m0[86u].y;
    vec4 _3171 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3156, _3157, (log2((isnan(cbSceneParam._m0[77u].w) ? _943 : (isnan(_943) ? cbSceneParam._m0[77u].w : min(_943, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3173 = _3171.x;
    float _3174 = _3171.y;
    float _3175 = _3171.z;
    float _3176 = _3171.w;
    float _3248;
    float _3250;
    float _3252;
    float _3254;
    if (_943 > cbSceneParam._m0[78u].w)
    {
        float _3210 = isnan(_943) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _943 : min(cbSceneParam._m0[80u].w, _943));
        float _3211 = _3210 / _943;
        float _3222 = _3211 * _995;
        float _3223 = _996 * _3211;
        float _3224 = (-0.0) - _3223;
        float _3226 = _3211 * _997;
        float _3228 = (cbSceneParam._m0[77u].w * _3224) / _3210;
        float _3229 = _3228 + cbSceneParam._m0[79u].w;
        float _3230 = cbSceneParam._m0[79u].w - _3223;
        float _3236 = sqrt(((_3222 * _3222) + (_3223 * _3223)) + (_3226 * _3226));
        float _3239 = (1.0 - (cbSceneParam._m0[77u].w / _3210)) * _3236;
        float _3244 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3246 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3423;
        if (abs((_3224 - _3228) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3423 = ((((_3229 > 0.0) ? exp2(_3244 * _3229) : (2.0 - exp2(_3246 * _3229))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3239;
        }
        else
        {
            float _3367 = 1.0 / cbSceneParam._m0[80u].x;
            float _3368 = isnan(_3230) ? _3229 : (isnan(_3229) ? _3230 : max(_3229, _3230));
            float _3369 = isnan(_3230) ? _3229 : (isnan(_3229) ? _3230 : min(_3229, _3230));
            float _3378 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : min(_3368, 0.0));
            float _3379 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : min(_3369, 0.0));
            _3423 = ((abs(_3236 / _3224) * cbSceneParam._m0[80u].y) * ((((_3378 - _3379) * 2.0) - ((exp2(_3244 * (isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0)))) - exp2(_3244 * (isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))))) * _3367)) - ((exp2(_3246 * _3378) - exp2(_3246 * _3379)) * _3367))) + (_3239 * cbSceneParam._m0[80u].z);
        }
        vec4 _3425 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3156, _3157, 1.0), 0.0);
        float _3434 = exp2((_3423 * (-1.44269502162933349609375)) * (1.0 - _3425.w));
        float _3435 = log2(_3434);
        float _3451 = log2(_3176);
        _3248 = (exp2(_3451 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].x)) * _3425.x) / cbSceneParam._m0[78u].x)) + _3173;
        _3250 = (exp2(_3451 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].y)) * _3425.y) / cbSceneParam._m0[78u].y)) + _3174;
        _3252 = (exp2(_3451 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].z)) * _3425.z) / cbSceneParam._m0[78u].z)) + _3175;
        _3254 = _3434 * _3176;
    }
    else
    {
        _3248 = _3173;
        _3250 = _3174;
        _3252 = _3175;
        _3254 = _3176;
    }
    bool _3461;
    vec4 _3264;
    vec4 _3286;
    float _3288;
    float _3292;
    float _3293;
    float _3294;
    float _3295;
    bool _3305;
    for (;;)
    {
        _3264 = cbMatDynParam._m0[0u];
        float _3266 = roundEven(_3264.y);
        bool _3267 = _3266 == 3.0;
        float _3268 = log2(_3254);
        float _3275 = exp2(_3268 * cbSceneParam._m0[78u].x) * _3145;
        float _3276 = exp2(_3268 * cbSceneParam._m0[78u].y) * _3146;
        float _3277 = exp2(_3268 * cbSceneParam._m0[78u].z) * _3147;
        float _3284 = _1011 + (-0.5);
        _3286 = cbMtdParam._m0[1u];
        _3288 = _3286.y * _3284;
        float _3291 = (_3266 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3292 = _3291 * (_3267 ? _3275 : (_3275 + (cbSceneParam._m0[72u].w * _3248)));
        _3293 = _3291 * (_3267 ? _3276 : (_3276 + (cbSceneParam._m0[72u].w * _3250)));
        _3294 = _3291 * (_3267 ? _3277 : (_3277 + (cbSceneParam._m0[72u].w * _3252)));
        _3295 = _3284 * 0.999000012874603271484375;
        _3305 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3305)
        {
            if ((cbInstanceData._m0[_284 + 7u].x + _3295) < 0.5)
            {
                _3461 = true;
                break;
            }
        }
        uint _3402 = _1060 + uint(_3264.w);
        if ((cbInstanceData._m0[_3402].w < 1.0) && ((cbInstanceData._m0[_3402].w + _3295) < 0.5))
        {
            _3461 = true;
            break;
        }
        if ((_3288 + 1.0) < _3286.x)
        {
            _3461 = true;
            break;
        }
        _3461 = false;
        break;
    }
    float _3665;
    if (_3461)
    {
        discard_state = true;
        _3665 = 0.0;
    }
    else
    {
        _3665 = cbInstanceData._m0[_3148].w;
    }
    SV_Target.x = _3292;
    SV_Target.y = _3293;
    SV_Target.z = _3294;
    SV_Target.w = _3665;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3148].w;
    discard_exit();
}


