#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1395;
float _3778;
float _3779;
float _3780;
float _3781;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3790 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3801 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3812 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[24u].z) + _427) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3823 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _452 = (_445 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _453 = (_445 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _454 = (_445 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _458 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _452;
    float _461 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _453;
    float _464 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _454;
    float _471 = ((_452 - _458) * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) + _458;
    float _472 = ((_453 - _461) * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) + _461;
    float _473 = ((_454 - _464) * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) + _464;
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _539 = _535.z;
    float _548 = ((_518.z - _539) * _445) + _539;
    float _551 = ((((_518.x - _537) * _445) + _537) * 2.0) + (-1.0);
    float _552 = ((((_518.y - _538) * _445) + _538) * 2.0) + (-1.0);
    float _553 = dot(vec2(_551, _552), vec2(_551, _552));
    float _3834 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _558 = sqrt(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _590 = (_551 + ((((_491.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_578.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _591 = (_552 + ((((_491.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_578.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _594 = fma(_558, _248, fma(_591, _255, _590 * _241));
    float _597 = fma(_558, _249, fma(_591, _256, _590 * _242));
    float _600 = fma(_558, _250, fma(_591, _257, _590 * _243));
    float _604 = inversesqrt(dot(vec3(_594, _597, _600), vec3(_594, _597, _600)));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _633 = _631.x;
    float _634 = 1.0 - _633;
    float _640 = (cbMtdParam._m0[19u].x + dot(vec4(_604 * _594, _604 * _597, _604 * _600, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_633 - _634) * cbMtdParam._m0[24u].w) + _634) * cbMtdParam._m0[21u].z);
    float _3845 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _641 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _643 = (-0.0) - cbMtdParam._m0[24u].x;
    float _645 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
    float _653 = _641 - ((_641 * TEXCOORD_8.x) * _646);
    float _654 = _641 - ((_641 * TEXCOORD_8.y) * _646);
    float _655 = _641 - ((_641 * TEXCOORD_8.z) * _646);
    float _662 = (_653 * (cbMtdParam._m0[17u].x - _471)) + _471;
    float _663 = (_654 * (cbMtdParam._m0[17u].y - _472)) + _472;
    float _664 = (_655 * (cbMtdParam._m0[17u].z - _473)) + _473;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _678 = _676.x;
    float _679 = 1.0 - _678;
    float _705 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_678 - _679) * cbMtdParam._m0[24u].y) + _679) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3866 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _706 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _714 = ((((cbMtdParam._m0[10u].x - _662) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _706) + _662;
    float _715 = ((((cbMtdParam._m0[10u].y - _663) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _706) + _663;
    float _716 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _664)) * _706) + _664;
    float _721 = (((_491.z - _548) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _548;
    float _725 = ((_578.z - _721) * cbMtdParam._m0[19u].w) + _721;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _746 = (_739.x * 2.0) + (-1.0);
    float _747 = (_739.y * 2.0) + (-1.0);
    float _748 = dot(vec2(_746, _747), vec2(_746, _747));
    float _3877 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _756 = ((_739.z - _725) * _653) + _725;
    float _759 = ((cbMtdParam._m0[23u].y - _756) * _706) + _756;
    vec4 _778 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _784 = (_778.x * 2.0) + (-1.0);
    float _785 = (_778.y * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _3888 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _801 = ((sqrt(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) - _558) * _655) + _558;
    float _804 = (((_746 - _590) * _653) + _590) + (cbMtdParam._m0[21u].x * _590);
    float _805 = (((_747 - _591) * _654) + _591) + (cbMtdParam._m0[21u].x * _591);
    float _816 = (((_784 - _804) + (_804 * cbMtdParam._m0[22u].z)) * _706) + _804;
    float _817 = (((_785 - _805) + (_805 * cbMtdParam._m0[22u].z)) * _706) + _805;
    float _818 = (_706 * (sqrt(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) - _801)) + _801;
    float _820 = cbMtdParam._m0[22u].x + _578.w;
    float _823 = fma(_818, _248, fma(_817, _255, _816 * _241));
    float _826 = fma(_818, _249, fma(_817, _256, _816 * _242));
    float _829 = fma(_818, _250, fma(_817, _257, _816 * _243));
    float _833 = inversesqrt(dot(vec3(_823, _826, _829), vec3(_823, _826, _829)));
    float _834 = _833 * _823;
    float _835 = _833 * _826;
    float _836 = _833 * _829;
    float _3899 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _837 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _3921 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _3932 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _3943 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _855 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _906 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _896);
    float _907 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _896);
    float _908 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _896);
    float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
    float _913 = _906 * _912;
    float _914 = _907 * _912;
    float _915 = _908 * _912;
    vec4 _920 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _922 = _920.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1076 = sqrt(((_906 * _906) + (_907 * _907)) + (_908 * _908));
        float _1082 = (cbMatDynParam._m0[5u].x * _1076) + cbMatDynParam._m0[5u].y;
        float _3954 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1087 = (cbMatDynParam._m0[5u].z * _1076) + cbMatDynParam._m0[5u].w;
        float _3965 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) - _1083)) + _1083) < ((_922 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _933 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _934 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _952 = fma(_836, cbSceneParam._m0[5u].z, fma(_835, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _834));
    float _955 = fma(_836, cbSceneParam._m0[6u].z, fma(_835, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _834));
    float _958 = fma(_836, cbSceneParam._m0[7u].z, fma(_835, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _834));
    uint _971 = _279 + 9u;
    uint _972 = _971 + uint(cbMatDynParam._m0[0u].w);
    float _978 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_972].x;
    float _979 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * cbInstanceData._m0[_972].y;
    float _980 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * cbInstanceData._m0[_972].z;
    float _3976 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    vec4 _992 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _933, cbSceneParam._m0[86u].y * _934));
    float _996 = ((isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * TEXCOORD_5.w) * _992.x;
    float _997 = dot(vec3(_834, _835, _836), vec3(_913, _914, _915));
    float _1000 = _997 * 2.0;
    float _1004 = (_1000 * _834) - _913;
    float _1005 = (_1000 * _835) - _914;
    float _1006 = (_1000 * _836) - _915;
    float _1010 = abs(dot(vec3(_913, _914, _915), vec3(_834, _835, _836)));
    float _4009 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1012 = sqrt(_837);
    float _1025 = exp2((_1012 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1012 * 3.0));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1394;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1119 = fma(_1065, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057));
        float _1123 = fma(_1065, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057));
        float _1127 = fma(_1065, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057));
        float _1152 = _1057 + _834;
        float _1153 = _1061 + _835;
        float _1154 = _1065 + _836;
        float _1164 = fma(_1154, cbModelParam._m0[26u].z, fma(_1153, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1152)) - _1119;
        float _1165 = fma(_1154, cbModelParam._m0[27u].z, fma(_1153, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1152)) - _1123;
        float _1166 = fma(_1154, cbModelParam._m0[28u].z, fma(_1153, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1152)) - _1127;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1119 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1123 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[34u].z) + ((((((_1127 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1222 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1188.x + (-0.5));
        float _1224 = _1222 * (_1188.y + (-0.5));
        float _1225 = _1222 * (_1188.z + (-0.5));
        float _1232 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1195.x + (-0.5));
        float _1234 = _1232 * (_1195.y + (-0.5));
        float _1235 = _1232 * (_1195.z + (-0.5));
        float _1242 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1202.x + (-0.5));
        float _1244 = _1242 * (_1202.y + (-0.5));
        float _1245 = _1242 * (_1202.z + (-0.5));
        float _1252 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1209.x + (-0.5));
        float _1254 = _1252 * (_1209.y + (-0.5));
        float _1255 = _1252 * (_1209.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1276 = (dot(vec3(_834, _835, _836), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1286 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _4057 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1288 + 1.0))) + _1293) * _1256;
        float _1303 = _1224 * 0.5;
        float _1304 = _1234 * 0.5;
        float _1305 = _1244 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_834, _835, _836), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4090 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1330 + 1.0))) + _1335) * _1257;
        float _1345 = _1225 * 0.5;
        float _1346 = _1235 * 0.5;
        float _1347 = _1245 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_834, _835, _836), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4123 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1372 + 1.0))) + _1377) * _1258;
        _1394 = _1225;
        _1396 = _1224;
        _1397 = _1223;
        _1398 = _1235;
        _1399 = _1234;
        _1400 = _1233;
        _1401 = _1245;
        _1402 = _1244;
        _1403 = _1243;
        _1404 = _1258;
        _1405 = _1257;
        _1406 = _1256;
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1395;
        _1396 = _1395;
        _1397 = _1395;
        _1398 = _1395;
        _1399 = _1395;
        _1400 = _1395;
        _1401 = _1395;
        _1402 = _1395;
        _1403 = _1395;
        _1404 = _1395;
        _1405 = _1395;
        _1406 = _1395;
        _1407 = 0.0;
        _1408 = 0.0;
        _1409 = 0.0;
    }
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1437 = fma(_1065, cbModelParam._m0[30u].z, fma(_1061, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057));
        float _1441 = fma(_1065, cbModelParam._m0[31u].z, fma(_1061, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057));
        float _1445 = fma(_1065, cbModelParam._m0[32u].z, fma(_1061, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057));
        float _1468 = _1057 + _834;
        float _1469 = _1061 + _835;
        float _1470 = _1065 + _836;
        float _1480 = fma(_1470, cbModelParam._m0[30u].z, fma(_1469, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1468)) - _1437;
        float _1481 = fma(_1470, cbModelParam._m0[31u].z, fma(_1469, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1468)) - _1441;
        float _1482 = fma(_1470, cbModelParam._m0[32u].z, fma(_1469, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1468)) - _1445;
        float _1486 = inversesqrt(dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482)));
        float _1499 = ((_1486 * _1480) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1437 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1486 * _1481) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1441 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1501 = ((_1486 * _1482) / cbModelParam._m0[35u].z) + ((((((_1445 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        float _1536 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1503.x + (-0.5));
        float _1538 = _1536 * (_1503.y + (-0.5));
        float _1539 = _1536 * (_1503.z + (-0.5));
        float _1546 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1510.x + (-0.5));
        float _1548 = _1546 * (_1510.y + (-0.5));
        float _1549 = _1546 * (_1510.z + (-0.5));
        float _1556 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1517.x + (-0.5));
        float _1558 = _1556 * (_1517.y + (-0.5));
        float _1559 = _1556 * (_1517.z + (-0.5));
        float _1566 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1524.x + (-0.5));
        float _1568 = _1566 * (_1524.y + (-0.5));
        float _1569 = _1566 * (_1524.z + (-0.5));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = _1537 * 0.5;
        float _1574 = _1547 * 0.5;
        float _1575 = _1557 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_834, _835, _836), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4186 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1600 + 1.0))) + _1605) * _1570;
        float _1615 = _1538 * 0.5;
        float _1616 = _1548 * 0.5;
        float _1617 = _1558 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_834, _835, _836), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4219 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1642 + 1.0))) + _1647) * _1571;
        float _1657 = _1539 * 0.5;
        float _1658 = _1549 * 0.5;
        float _1659 = _1559 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_834, _835, _836), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4252 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1684 + 1.0))) + _1689) * _1572;
        _1706 = _1539;
        _1707 = _1538;
        _1708 = _1537;
        _1709 = _1549;
        _1710 = _1548;
        _1711 = _1547;
        _1712 = _1559;
        _1713 = _1558;
        _1714 = _1557;
        _1715 = _1572;
        _1716 = _1571;
        _1717 = _1570;
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
    }
    else
    {
        _1706 = _1395;
        _1707 = _1395;
        _1708 = _1395;
        _1709 = _1395;
        _1710 = _1395;
        _1711 = _1395;
        _1712 = _1395;
        _1713 = _1395;
        _1714 = _1395;
        _1715 = _1395;
        _1716 = _1395;
        _1717 = _1395;
        _1718 = 0.0;
        _1719 = 0.0;
        _1720 = 0.0;
    }
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1407)) + _1407;
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1408)) + _1408;
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1409)) + _1409;
    float _1753 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1731, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1756 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1731, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1759 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1731, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1730));
    float _1774 = _1004 * 0.5;
    float _1775 = _1005 * 0.5;
    float _1776 = _1006 * 0.5;
    float _1777 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1780 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1783 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1817;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1790 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1394, _1398, _1401, _1404));
        float _1794 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1396, _1399, _1402, _1405));
        float _1798 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1397, _1400, _1403, _1406));
        float _1805 = dot(vec4(cbModelParam._m0[39u]), vec4(_1774, _1775, _1776, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1828;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1819 = dot(vec4(cbModelParam._m0[40u]), vec4(_1774, _1775, _1776, 1.0));
        _1828 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1819) ? 0.0 : (isnan(0.0) ? _1819 : max(0.0, _1819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1828 = 1.0;
    }
    float _1832 = (_1828 * cbModelParam._m0[1u].x) + (_1817 * (1.0 - cbModelParam._m0[1u].x));
    float _1842 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _837);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1842 : min(cbModelParam._m0[25u].z, _1842));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1891 = fma(_1065, cbModelParam._m0[13u].z, fma(_1061, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1057)) + cbModelParam._m0[13u].w;
        float _1895 = fma(_1065, cbModelParam._m0[14u].z, fma(_1061, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1057)) + cbModelParam._m0[14u].w;
        float _1899 = fma(_1065, cbModelParam._m0[15u].z, fma(_1061, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1057)) + cbModelParam._m0[15u].w;
        float _1902 = fma(_1006, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004));
        float _1905 = fma(_1006, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004));
        float _1908 = fma(_1006, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004));
        float _1936;
        if (_1902 > 0.0)
        {
            _1936 = abs((1.0 - _1891) / _1902);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1891 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1936 = frontier_phi_17_15_ladder;
        }
        float _2158;
        if (_1905 > 0.0)
        {
            _2158 = abs((1.0 - _1895) / _1905);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1895 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2158 = frontier_phi_26_22_ladder;
        }
        float _2404;
        if (_1908 > 0.0)
        {
            _2404 = abs((1.0 - _1899) / _1908);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1899 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2404 = frontier_phi_38_33_ladder;
        }
        float _2406 = isnan(_2158) ? _1936 : (isnan(_1936) ? _2158 : min(_1936, _2158));
        float _2407 = isnan(_2404) ? _2406 : (isnan(_2406) ? _2404 : min(_2406, _2404));
        float _2411 = (_2407 * _1902) + _1891;
        float _2412 = (_2407 * _1905) + _1895;
        float _2413 = (_2407 * _1908) + _1899;
        float _2414 = _2407 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2414;
        float _2418 = _2414 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 > _2418) || ((_2412 < _2416) || ((_2411 < _2416) || (_2411 > _2418))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2413, cbModelParam._m0[9u].z, fma(_2412, cbModelParam._m0[9u].y, _2411 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2413, cbModelParam._m0[10u].z, fma(_2412, cbModelParam._m0[10u].y, _2411 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2413, cbModelParam._m0[11u].z, fma(_2412, cbModelParam._m0[11u].y, _2411 * cbModelParam._m0[11u].x))), _1843);
            frontier_phi_16_38_ladder = _2537.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2537.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2537.x * cbModelParam._m0[1u].y;
        }
        _1924 = frontier_phi_16_38_ladder_2;
        _1926 = frontier_phi_16_38_ladder_1;
        _1928 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1004, _1005, _1006), _1843);
        _1924 = _1912.x * cbModelParam._m0[1u].y;
        _1926 = _1912.y * cbModelParam._m0[1u].y;
        _1928 = _1912.z * cbModelParam._m0[1u].y;
    }
    float _1932 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _837);
    float _1933 = isnan(_1932) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1932 : min(cbModelParam._m0[25u].w, _1932));
    float _2023;
    float _2025;
    float _2027;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1987 = fma(_1065, cbModelParam._m0[21u].z, fma(_1061, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1057)) + cbModelParam._m0[21u].w;
        float _1991 = fma(_1065, cbModelParam._m0[22u].z, fma(_1061, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1057)) + cbModelParam._m0[22u].w;
        float _1995 = fma(_1065, cbModelParam._m0[23u].z, fma(_1061, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1057)) + cbModelParam._m0[23u].w;
        float _1998 = fma(_1006, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004));
        float _2001 = fma(_1006, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004));
        float _2004 = fma(_1006, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004));
        float _2163;
        if (_1998 > 0.0)
        {
            _2163 = abs((1.0 - _1987) / _1998);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1987 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2163 = frontier_phi_28_24_ladder;
        }
        float _2431;
        if (_2001 > 0.0)
        {
            _2431 = abs((1.0 - _1991) / _2001);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1991 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2431 = frontier_phi_40_35_ladder;
        }
        float _2636;
        if (_2004 > 0.0)
        {
            _2636 = abs((1.0 - _1995) / _2004);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1995 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2636 = frontier_phi_49_46_ladder;
        }
        float _2638 = isnan(_2431) ? _2163 : (isnan(_2163) ? _2431 : min(_2163, _2431));
        float _2639 = isnan(_2636) ? _2638 : (isnan(_2638) ? _2636 : min(_2638, _2636));
        float _2643 = (_2639 * _1998) + _1987;
        float _2644 = (_2639 * _2001) + _1991;
        float _2645 = (_2639 * _2004) + _1995;
        float _2646 = _2639 * 9.9999997473787516355514526367188e-05;
        float _2647 = (-1.0) - _2646;
        float _2649 = _2646 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2645 > _2649) || ((_2645 < _2647) || ((_2644 > _2649) || ((_2644 < _2647) || ((_2643 < _2647) || (_2643 > _2649))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2645, cbModelParam._m0[17u].z, fma(_2644, cbModelParam._m0[17u].y, _2643 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2645, cbModelParam._m0[18u].z, fma(_2644, cbModelParam._m0[18u].y, _2643 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2645, cbModelParam._m0[19u].z, fma(_2644, cbModelParam._m0[19u].y, _2643 * cbModelParam._m0[19u].x))), _1933);
            frontier_phi_25_49_ladder = _2844.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2844.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2844.x * cbModelParam._m0[1u].z;
        }
        _2023 = frontier_phi_25_49_ladder_2;
        _2025 = frontier_phi_25_49_ladder_1;
        _2027 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2007 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1004, _1005, _1006), _1933);
        _2023 = _2007.x * cbModelParam._m0[1u].z;
        _2025 = _2007.y * cbModelParam._m0[1u].z;
        _2027 = _2007.z * cbModelParam._m0[1u].z;
    }
    float _2039 = ((((1.0 - _1025) * ((_1012 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1025 * _1012)) * _996;
    float _2040 = _2039 * ((cbModelParam._m0[1u].w * (_2023 - _1924)) + _1924);
    float _2041 = _2039 * ((cbModelParam._m0[1u].w * (_2025 - _1926)) + _1926);
    float _2042 = _2039 * ((cbModelParam._m0[1u].w * (_2027 - _1928)) + _1928);
    float _2045 = fma(_2042, cbSceneParam._m0[89u].z, fma(_2041, cbSceneParam._m0[89u].y, _2040 * cbSceneParam._m0[89u].x));
    float _2048 = fma(_2042, cbSceneParam._m0[90u].z, fma(_2041, cbSceneParam._m0[90u].y, _2040 * cbSceneParam._m0[90u].x));
    float _2051 = fma(_2042, cbSceneParam._m0[91u].z, fma(_2041, cbSceneParam._m0[91u].y, _2040 * cbSceneParam._m0[91u].x));
    vec4 _2059 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_933, _934));
    float _2061 = _2059.w;
    float _2073 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2061);
    float _2074 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2061);
    float _2075 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2061);
    uvec4 _2079 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2081 = _2079.x * 14u;
    uint _2082 = _2081 + 13u;
    float _2089 = _996 + (-1.0);
    float _2094 = (cbLight._m0[_2082].x * _2089) + 1.0;
    float _2095 = (cbLight._m0[_2082].y * _2089) + 1.0;
    float _2096 = (cbLight._m0[_2082].z * _2089) + 1.0;
    float _2097 = (cbLight._m0[_2082].w * _2089) + 1.0;
    uint _2098 = _2081 + 5u;
    float _2104 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
    uint _2108 = _2081 + 4u;
    float _2117 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
    uint _2121 = _2081 | 1u;
    float _2132 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_834, _835, _836));
    float _2135 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_834, _835, _836));
    float _4388 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _4399 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2140 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * 0.3183098733425140380859375;
    float _2142 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * 0.3183098733425140380859375;
    float _2149 = ((cbLight._m0[_2098].x * _2104) * _2142) + (((cbLight._m0[_2108].x * _2073) * _2117) * _2140);
    float _2150 = ((_2104 * cbLight._m0[_2098].y) * _2142) + (((cbLight._m0[_2108].y * _2074) * _2117) * _2140);
    float _2151 = ((_2104 * cbLight._m0[_2098].z) * _2142) + (((cbLight._m0[_2108].z * _2075) * _2117) * _2140);
    uvec4 _2155 = floatBitsToUint(cbLight._m0[_2081 + 12u]);
    bool _2157 = _2155.x == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2157)
    {
        _2168 = _2149;
        _2170 = _2150;
        _2172 = _2151;
    }
    else
    {
        uint _2176 = _2081 + 6u;
        float _2192 = (dot(vec3(cbLight._m0[_2081 + 2u].xyz), vec3(_834, _835, _836)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4410 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2195 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2168 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _2149;
        _2170 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _2150;
        _2172 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _2151;
    }
    bool _2175 = _2155.y == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2175)
    {
        _2213 = _2168;
        _2215 = _2170;
        _2217 = _2172;
    }
    else
    {
        uint _2375 = _2081 + 7u;
        float _2391 = (dot(vec3(cbLight._m0[_2081 + 3u].xyz), vec3(_834, _835, _836)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4426 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2394 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2213 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2168;
        _2215 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2170;
        _2217 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2172;
    }
    uint _2220 = _2081 + 8u;
    float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _837) * 0.949999988079071044921875);
    float _2234 = _2233 * _2233;
    float _2235 = cbLight._m0[_2081].x + _913;
    float _2236 = cbLight._m0[_2081].y + _914;
    float _2237 = cbLight._m0[_2081].z + _915;
    float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
    float _2242 = _2241 * _2235;
    float _2243 = _2241 * _2236;
    float _2244 = _2241 * _2237;
    float _2245 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2081].xyz));
    float _4442 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _4453 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _2249 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2250 = dot(vec3(_834, _835, _836), vec3(_2242, _2243, _2244));
    float _4464 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2242, _2243, _2244));
    float _4475 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2234 * _2234;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2273 = (exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2274 = 1.0 - _2234;
    float _2285 = (0.5 / (((_2249 * ((_2248 * _2274) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2274) + _2234) * _2248))) * _2248;
    float _4486 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2287 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    uint _2301 = _2081 + 9u;
    float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _837) * 0.949999988079071044921875);
    float _2313 = _2312 * _2312;
    float _2314 = cbLight._m0[_2121].x + _913;
    float _2315 = cbLight._m0[_2121].y + _914;
    float _2316 = cbLight._m0[_2121].z + _915;
    float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
    float _2321 = _2320 * _2314;
    float _2322 = _2320 * _2315;
    float _2323 = _2320 * _2316;
    float _2324 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2121].xyz));
    float _4497 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2328 = dot(vec3(_834, _835, _836), vec3(_2321, _2322, _2323));
    float _4508 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2332 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2321, _2322, _2323));
    float _4519 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2336 = _2313 * _2313;
    float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
    float _2349 = (exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2350 = 1.0 - _2313;
    float _2360 = (0.5 / (((_2249 * ((_2327 * _2350) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2350) + _2313) * _2327))) * _2327;
    float _4530 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2362 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
    float _2372 = (((_2349 * cbLight._m0[_2301].x) * _2362) * _2104) + ((((cbLight._m0[_2220].x * _2073) * _2273) * _2287) * _2117);
    float _2373 = (((_2349 * cbLight._m0[_2301].y) * _2362) * _2104) + ((((cbLight._m0[_2220].y * _2074) * _2273) * _2287) * _2117);
    float _2374 = (((_2349 * cbLight._m0[_2301].z) * _2362) * _2104) + ((((cbLight._m0[_2220].z * _2075) * _2273) * _2287) * _2117);
    float _2436;
    float _2438;
    float _2440;
    if (_2157)
    {
        _2436 = _2372;
        _2438 = _2373;
        _2440 = _2374;
    }
    else
    {
        uint _2442 = _2081 + 2u;
        uint _2446 = _2081 + 10u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _837) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _913;
        float _2463 = cbLight._m0[_2442].y + _914;
        float _2464 = cbLight._m0[_2442].z + _915;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2442].xyz));
        float _4541 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2476 = dot(vec3(_834, _835, _836), vec3(_2469, _2470, _2471));
        float _4552 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4563 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2497 = (exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2498 = 1.0 - _2461;
        float _2508 = (0.5 / (((_2249 * ((_2475 * _2498) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2498) + _2461) * _2475))) * _2475;
        float _4574 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2436 = (((_2497 * cbLight._m0[_2446].x) * _2510) * _2511) + _2372;
        _2438 = (((_2497 * cbLight._m0[_2446].y) * _2510) * _2511) + _2373;
        _2440 = (((_2497 * cbLight._m0[_2446].z) * _2510) * _2511) + _2374;
    }
    float _2546;
    float _2548;
    float _2550;
    if (_2175)
    {
        _2546 = _2436;
        _2548 = _2438;
        _2550 = _2440;
    }
    else
    {
        uint _2557 = _2081 + 3u;
        uint _2561 = _2081 + 11u;
        float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _837) * 0.949999988079071044921875);
        float _2576 = _2575 * _2575;
        float _2577 = cbLight._m0[_2557].x + _913;
        float _2578 = cbLight._m0[_2557].y + _914;
        float _2579 = cbLight._m0[_2557].z + _915;
        float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
        float _2584 = _2583 * _2577;
        float _2585 = _2583 * _2578;
        float _2586 = _2583 * _2579;
        float _2587 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2557].xyz));
        float _4590 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2591 = dot(vec3(_834, _835, _836), vec3(_2584, _2585, _2586));
        float _4601 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2595 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2584, _2585, _2586));
        float _4612 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2599 = _2576 * _2576;
        float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
        float _2612 = (exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2613 = 1.0 - _2576;
        float _2623 = (0.5 / (((_2249 * ((_2590 * _2613) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2613) + _2576) * _2590))) * _2590;
        float _4623 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2625 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
        float _2626 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2546 = (((_2612 * cbLight._m0[_2561].x) * _2625) * _2626) + _2436;
        _2548 = (((_2612 * cbLight._m0[_2561].y) * _2625) * _2626) + _2438;
        _2550 = (((_2612 * cbLight._m0[_2561].z) * _2625) * _2626) + _2440;
    }
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    if (_2079.y == 0u)
    {
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2701;
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2701;
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2701;
        uvec4 _2716 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2717 = _2716.x;
        uint _2728 = uint((float(_2716.y) * floor(float(uint(cbSceneParam._m0[85u].y * _934) / _2717))) + floor(float(uint(cbSceneParam._m0[85u].x * _933) / _2717)));
        float _2738 = (log2(_2704 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2739 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        uint _2742 = uint(isnan(14.0) ? _2739 : (isnan(_2739) ? 14.0 : min(_2739, 14.0)));
        uvec4 _2747 = texelFetch(g_lightClusterGridBuffer, int(((_2742 << 2u) + (_2728 << 6u)) >> 2u));
        uint _2748 = _2747.x;
        uint _2749 = _2716.z;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        if (((((1u << ((_2749 >> 4u) & 15u)) + 4294967295u) & _2748) == 0u) || ((_2749 & 240u) == 0u))
        {
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
        }
        else
        {
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            uint _3007 = 0u;
            uint _3016;
            bool _3017;
            for (;;)
            {
                _3016 = texelFetch(g_lightClassification, int((((_2742 << 5u) + (_2728 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                _3017 = _3016 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3017)
                {
                    frontier_phi_66_pred = _3001;
                    frontier_phi_66_pred_1 = _3006;
                    frontier_phi_66_pred_2 = _3005;
                    frontier_phi_66_pred_3 = _3004;
                    frontier_phi_66_pred_4 = _3003;
                    frontier_phi_66_pred_5 = _3002;
                }
                else
                {
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    uint _3152;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3016;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    for (;;)
                    {
                        uint _3156 = uint(findLSB(_3152)) + (_3007 << 5u);
                        uint _3153 = (_3152 + 4294967295u) & _3152;
                        uint _3158 = _3156 * 48u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 3u)).x));
                        uint _3178 = (_3156 * 48u) + 4u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3197 = (_3156 * 48u) + 8u;
                        vec3 _3208 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x));
                        float _3212 = _3172.x - _2702;
                        float _3213 = _3172.y - _2703;
                        float _3214 = _3172.z - _2704;
                        float _3215 = dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214));
                        float _3218 = inversesqrt(_3215);
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3222 = dot(vec3(_952, _955, _958), vec3(_3219, _3220, _3221));
                        float _3227 = 1.0 - (_3215 * _3172.w);
                        float _4649 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3228 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3229 = sqrt(_3215) * _3191.w;
                        float _3232 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                        float _3233 = _3232 * _3232;
                        float _3236 = ((1.0 - _3233) * _3222) + _3233;
                        float _3239 = _3229 * _3229;
                        float _3243 = ((isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))) * _3228) / ((_3239 * 0.699999988079071044921875) + 1.0);
                        float _3247 = (-0.0) - _2702;
                        float _3248 = (-0.0) - _2703;
                        float _3249 = (-0.0) - _2704;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3264 = exp2(log2(1.0 / ((_3239 * 3.5) + 5.0)) * 0.25);
                        float _3265 = 1.0 - _1012;
                        float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                        float _3273 = _3272 * _3272;
                        float _3274 = _3273 * _3273;
                        float _3275 = _3254 + _3219;
                        float _3276 = _3255 + _3220;
                        float _3277 = _3256 + _3221;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3285 = dot(vec3(_952, _955, _958), vec3(_3254, _3255, _3256));
                        float _4665 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3289 = dot(vec3(_952, _955, _958), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                        float _4676 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3292 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                        float _3297 = _3232 * _3273;
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3222) + _3298;
                        float _4687 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3303 = 1.0 - _3273;
                        float _3313 = (0.5 / (((_3302 * ((_3288 * _3303) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3273) * _3288))) * _3302;
                        float _4698 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3324 = (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) / ((_3296 * _3296) * ((_3239 * 2.1991131305694580078125) + 3.141590118408203125))) * _3228;
                        _3076 = (_3243 * _3191.x) + _3149;
                        _3077 = (_3243 * _3191.y) + _3150;
                        _3078 = (_3243 * _3191.z) + _3151;
                        _3073 = (_3324 * _3208.x) + _3146;
                        _3074 = (_3324 * _3208.y) + _3147;
                        _3075 = (_3324 * _3208.z) + _3148;
                        if (_3153 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3153;
                        }
                    }
                    frontier_phi_66_pred = _3073;
                    frontier_phi_66_pred_1 = _3078;
                    frontier_phi_66_pred_2 = _3077;
                    frontier_phi_66_pred_3 = _3076;
                    frontier_phi_66_pred_4 = _3075;
                    frontier_phi_66_pred_5 = _3074;
                }
                _2850 = frontier_phi_66_pred;
                _2860 = frontier_phi_66_pred_1;
                _2858 = frontier_phi_66_pred_2;
                _2856 = frontier_phi_66_pred_3;
                _2854 = frontier_phi_66_pred_4;
                _2852 = frontier_phi_66_pred_5;
                uint _3008 = _3007 + 1u;
                if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3001 = _2850;
                    _3002 = _2852;
                    _3003 = _2854;
                    _3004 = _2856;
                    _3005 = _2858;
                    _3006 = _2860;
                    _3007 = _3008;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
        }
        uvec4 _2863 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2864 = _2863.z;
        uint _2866 = (_2864 >> 8u) & 15u;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((4294967295u << _2866) & _2748) == 0u)
        {
            _2969 = _2849;
            _2971 = _2851;
            _2973 = _2853;
            _2975 = _2855;
            _2977 = _2857;
            _2979 = _2859;
        }
        else
        {
            float _2994 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
            float _2995 = _2994 * _2702;
            float _2996 = _2994 * _2703;
            float _2997 = _2994 * _2704;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2866 < ((_2864 >> 12u) & 15u))
            {
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _3129 = _2849;
                float _3130 = _2851;
                float _3131 = _2853;
                float _3132 = _2855;
                float _3133 = _2857;
                float _3134 = _2859;
                uint _3135 = _2866;
                uint _3144;
                bool _3145;
                for (;;)
                {
                    _3144 = texelFetch(g_lightClassification, int((((_2742 << 5u) + (_2728 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                    _3145 = _3144 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3145)
                    {
                        frontier_phi_77_pred = _3134;
                        frontier_phi_77_pred_1 = _3133;
                        frontier_phi_77_pred_2 = _3132;
                        frontier_phi_77_pred_3 = _3131;
                        frontier_phi_77_pred_4 = _3130;
                        frontier_phi_77_pred_5 = _3129;
                    }
                    else
                    {
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3351 = _3129;
                        float _3352 = _3130;
                        float _3353 = _3131;
                        float _3354 = _3132;
                        float _3355 = _3133;
                        float _3356 = _3134;
                        uint _3357 = _3144;
                        uint _3358;
                        vec4 _3383;
                        float _3384;
                        vec4 _3399;
                        vec3 _3411;
                        vec4 _3426;
                        vec4 _3441;
                        float _3487;
                        bool _3488;
                        for (;;)
                        {
                            uint _3368 = ((_3135 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3357));
                            _3358 = (_3357 + 4294967295u) & _3357;
                            uint _3370 = _3368 * 40u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3384 = _3383.w;
                            uint _3386 = (_3368 * 40u) + 4u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3401 = (_3368 * 40u) + 8u;
                            _3411 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x));
                            uint _3413 = (_3368 * 40u) + 16u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3368 * 40u) + 20u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3368 * 40u) + 24u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3462 = (_3368 * 40u) + 28u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3487 = fma(_2704, _3475.z, fma(_2703, _3475.y, _3475.x * _2702)) + _3475.w;
                            _3488 = !((fma(_2704, _3456.z, fma(_2703, _3456.y, _3456.x * _2702)) + _3456.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3488)
                            {
                                float _3515 = _3383.x - _2702;
                                float _3516 = _3383.y - _2703;
                                float _3517 = _3383.z - _2704;
                                float _3518 = dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517));
                                float _3521 = inversesqrt(_3518);
                                float _3522 = _3521 * _3515;
                                float _3523 = _3521 * _3516;
                                float _3524 = _3521 * _3517;
                                float _3528 = 1.0 - (_3518 / (_3384 * _3384));
                                float _4709 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3533 = sqrt(_3518) * _3399.w;
                                float _3535 = 1.39999997615814208984375 / (_3533 + 1.39999997615814208984375);
                                float _3536 = _3535 * _3535;
                                float _3539 = ((1.0 - _3536) * dot(vec3(_3522, _3523, _3524), vec3(_952, _955, _958))) + _3536;
                                float _3542 = _3533 * _3533;
                                float _3546 = (fma(_2704, _3426.z, fma(_2703, _3426.y, _3426.x * _2702)) + _3426.w) / _3487;
                                float _3547 = (fma(_2704, _3441.z, fma(_2703, _3441.y, _3441.x * _2702)) + _3441.w) / _3487;
                                float _3551 = 1.0 - dot(vec2(_3546, _3547), vec2(_3546, _3547));
                                float _4725 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3553 = _3552 * (((isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0))) * _3529) / ((_3542 * 0.699999988079071044921875) + 1.0));
                                float _3565 = exp2(log2(1.0 / ((_3542 * 3.5) + 5.0)) * 0.25);
                                float _3566 = 1.0 - _1012;
                                float _3573 = sqrt(1.0 - ((1.0 - (_3566 * _3566)) * (1.0 - (_3565 * _3565))));
                                float _3574 = _3573 * _3573;
                                float _3575 = _3574 * _3574;
                                float _3576 = _3522 - _2995;
                                float _3577 = _3523 - _2996;
                                float _3578 = _3524 - _2997;
                                float _3582 = inversesqrt(dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578)));
                                float _3586 = dot(vec3(_952, _955, _958), vec3((-0.0) - _2995, (-0.0) - _2996, (-0.0) - _2997));
                                float _4736 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3590 = dot(vec3(_952, _955, _958), vec3(_3582 * _3576, _3582 * _3577, _3582 * _3578));
                                float _4747 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3597 = ((_3593 * _3593) * (_3575 + (-1.0))) + 1.0;
                                float _3598 = _3535 * _3574;
                                float _3599 = _3598 * _3598;
                                float _3605 = ((1.0 - _3599) * dot(vec3(_952, _955, _958), vec3(_3522, _3523, _3524))) + _3599;
                                float _4758 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3607 = 1.0 - _3574;
                                float _3617 = (0.5 / (((_3606 * ((_3589 * _3607) + _3574)) + 9.9999999392252902907785028219223e-09) + (((_3606 * _3607) + _3574) * _3589))) * _3606;
                                float _4769 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3627 = (_3552 * _3529) * (((_3575 * 3.1415927410125732421875) * (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) / ((_3597 * _3597) * ((_3542 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3553 * _3399.y;
                                frontier_phi_83_pred_1 = _3553 * _3399.x;
                                frontier_phi_83_pred_2 = _3627 * _3411.z;
                                frontier_phi_83_pred_3 = _3627 * _3411.y;
                                frontier_phi_83_pred_4 = _3627 * _3411.x;
                                frontier_phi_83_pred_5 = _3553 * _3399.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3635 = frontier_phi_83_pred;
                            _3634 = frontier_phi_83_pred_1;
                            _3633 = frontier_phi_83_pred_2;
                            _3632 = frontier_phi_83_pred_3;
                            _3631 = frontier_phi_83_pred_4;
                            _3636 = frontier_phi_83_pred_5;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            if (_3358 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3358;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3343;
                        frontier_phi_77_pred_1 = _3342;
                        frontier_phi_77_pred_2 = _3341;
                        frontier_phi_77_pred_3 = _3340;
                        frontier_phi_77_pred_4 = _3339;
                        frontier_phi_77_pred_5 = _3338;
                    }
                    _2980 = frontier_phi_77_pred;
                    _2978 = frontier_phi_77_pred_1;
                    _2976 = frontier_phi_77_pred_2;
                    _2974 = frontier_phi_77_pred_3;
                    _2972 = frontier_phi_77_pred_4;
                    _2970 = frontier_phi_77_pred_5;
                    uint _3136 = _3135 + 1u;
                    if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3129 = _2970;
                        _3130 = _2972;
                        _3131 = _2974;
                        _3132 = _2976;
                        _3133 = _2978;
                        _3134 = _2980;
                        _3135 = _3136;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2974;
                frontier_phi_58_59_ladder_1 = _2980;
                frontier_phi_58_59_ladder_2 = _2978;
                frontier_phi_58_59_ladder_3 = _2976;
                frontier_phi_58_59_ladder_4 = _2972;
                frontier_phi_58_59_ladder_5 = _2970;
            }
            else
            {
                frontier_phi_58_59_ladder = _2853;
                frontier_phi_58_59_ladder_1 = _2859;
                frontier_phi_58_59_ladder_2 = _2857;
                frontier_phi_58_59_ladder_3 = _2855;
                frontier_phi_58_59_ladder_4 = _2851;
                frontier_phi_58_59_ladder_5 = _2849;
            }
            _2969 = frontier_phi_58_59_ladder_5;
            _2971 = frontier_phi_58_59_ladder_4;
            _2973 = frontier_phi_58_59_ladder;
            _2975 = frontier_phi_58_59_ladder_3;
            _2977 = frontier_phi_58_59_ladder_2;
            _2979 = frontier_phi_58_59_ladder_1;
        }
        float _2984 = isnan(1.0) ? _996 : (isnan(_996) ? 1.0 : min(_996, 1.0));
        _2761 = (_2984 * _2975) + _2213;
        _2763 = (_2984 * _2977) + _2215;
        _2765 = (_2984 * _2979) + _2217;
        _2767 = ((_2969 * 0.039999999105930328369140625) * _2984) + _2546;
        _2769 = ((_2971 * 0.039999999105930328369140625) * _2984) + _2548;
        _2771 = ((_2973 * 0.039999999105930328369140625) * _2984) + _2550;
    }
    else
    {
        _2761 = _2213;
        _2763 = _2215;
        _2765 = _2217;
        _2767 = _2546;
        _2769 = _2548;
        _2771 = _2550;
    }
    float _4785 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4796 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4807 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _2788 = ((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2761 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _996))) + ((_2767 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1832)) * cbPerFrame._m0[3u].x);
    float _2789 = ((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2763 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _996))) + ((_2769 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1832)) * cbPerFrame._m0[3u].x);
    float _2790 = ((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2765 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _996))) + ((_2771 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1832)) * cbPerFrame._m0[3u].x);
    uint _2791 = _279 + 6u;
    float _2799 = _933 / cbSceneParam._m0[86u].x;
    float _2800 = _934 / cbSceneParam._m0[86u].y;
    vec4 _2814 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2799, _2800, (log2((isnan(cbSceneParam._m0[77u].w) ? _855 : (isnan(_855) ? cbSceneParam._m0[77u].w : min(_855, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2816 = _2814.x;
    float _2817 = _2814.y;
    float _2818 = _2814.z;
    float _2819 = _2814.w;
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    if (_855 > cbSceneParam._m0[78u].w)
    {
        float _2874 = isnan(_855) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _855 : min(cbSceneParam._m0[80u].w, _855));
        float _2875 = _2874 / _855;
        float _2886 = _2875 * _906;
        float _2887 = _907 * _2875;
        float _2888 = (-0.0) - _2887;
        float _2889 = _2875 * _908;
        float _2891 = (cbSceneParam._m0[77u].w * _2888) / _2874;
        float _2892 = _2891 + cbSceneParam._m0[79u].w;
        float _2893 = cbSceneParam._m0[79u].w - _2887;
        float _2899 = sqrt(((_2886 * _2886) + (_2887 * _2887)) + (_2889 * _2889));
        float _2902 = (1.0 - (cbSceneParam._m0[77u].w / _2874)) * _2899;
        float _2907 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2909 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3086;
        if (abs((_2888 - _2891) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3086 = ((((_2892 > 0.0) ? exp2(_2907 * _2892) : (2.0 - exp2(_2909 * _2892))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2902;
        }
        else
        {
            float _3030 = 1.0 / cbSceneParam._m0[80u].x;
            float _3031 = isnan(_2893) ? _2892 : (isnan(_2892) ? _2893 : max(_2892, _2893));
            float _3032 = isnan(_2893) ? _2892 : (isnan(_2892) ? _2893 : min(_2892, _2893));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            _3086 = ((abs(_2899 / _2888) * cbSceneParam._m0[80u].y) * ((((_3041 - _3042) * 2.0) - ((exp2(_2907 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0)))) - exp2(_2907 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))))) * _3030)) - ((exp2(_2909 * _3041) - exp2(_2909 * _3042)) * _3030))) + (_2902 * cbSceneParam._m0[80u].z);
        }
        vec4 _3088 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2799, _2800, 1.0), 0.0);
        float _3097 = exp2((_3086 * (-1.44269502162933349609375)) * (1.0 - _3088.w));
        float _3098 = log2(_3097);
        float _3114 = log2(_2819);
        _2911 = (exp2(_3114 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].x)) * _3088.x) / cbSceneParam._m0[78u].x)) + _2816;
        _2913 = (exp2(_3114 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].y)) * _3088.y) / cbSceneParam._m0[78u].y)) + _2817;
        _2915 = (exp2(_3114 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].z)) * _3088.z) / cbSceneParam._m0[78u].z)) + _2818;
        _2917 = _3097 * _2819;
    }
    else
    {
        _2911 = _2816;
        _2913 = _2817;
        _2915 = _2818;
        _2917 = _2819;
    }
    bool _3124;
    vec4 _2927;
    vec4 _2949;
    float _2951;
    float _2955;
    float _2956;
    float _2957;
    float _2958;
    bool _2968;
    for (;;)
    {
        _2927 = cbMatDynParam._m0[0u];
        float _2929 = roundEven(_2927.y);
        bool _2930 = _2929 == 3.0;
        float _2931 = log2(_2917);
        float _2938 = exp2(_2931 * cbSceneParam._m0[78u].x) * _2788;
        float _2939 = exp2(_2931 * cbSceneParam._m0[78u].y) * _2789;
        float _2940 = exp2(_2931 * cbSceneParam._m0[78u].z) * _2790;
        float _2947 = _922 + (-0.5);
        _2949 = cbMtdParam._m0[1u];
        _2951 = _2949.y * _2947;
        float _2954 = (_2929 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2955 = _2954 * (_2930 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2911)));
        _2956 = _2954 * (_2930 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2913)));
        _2957 = _2954 * (_2930 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2915)));
        _2958 = _2947 * 0.999000012874603271484375;
        _2968 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2968)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2958) < 0.5)
            {
                _3124 = true;
                break;
            }
        }
        uint _3065 = _971 + uint(_2927.w);
        if ((cbInstanceData._m0[_3065].w < 1.0) && ((cbInstanceData._m0[_3065].w + _2958) < 0.5))
        {
            _3124 = true;
            break;
        }
        if ((_2951 + 1.0) < _2949.x)
        {
            _3124 = true;
            break;
        }
        _3124 = false;
        break;
    }
    float _3329;
    if (_3124)
    {
        discard_state = true;
        _3329 = 0.0;
    }
    else
    {
        _3329 = cbInstanceData._m0[_2791].w;
    }
    SV_Target.x = _2955;
    SV_Target.y = _2956;
    SV_Target.z = _2957;
    SV_Target.w = _3329;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2791].w;
    discard_exit();
}


