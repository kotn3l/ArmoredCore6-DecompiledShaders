#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1429;
float _4068;
float _4069;
float _4070;
float _4071;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _384 = _382.x;
    float _396 = dot(vec4(_384, _382.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _413 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _345.x) * 2.0) - ((((_384 - _396) * cbMtdParam._m0[24u].z) + _396) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4080 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _421 = (_414 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _422 = (_414 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _423 = (_414 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _440 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _462 = _460.x;
    float _472 = dot(vec4(_462, _460.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _486 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _345.y) * 2.0) - ((((_462 - _472) * cbMtdParam._m0[24u].z) + _472) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4091 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _487 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _494 = (_487 * ((_440.x * cbMtdParam._m0[13u].x) - _421)) + _421;
    float _495 = (_487 * ((_440.y * cbMtdParam._m0[13u].y) - _422)) + _422;
    float _496 = (_487 * ((_440.z * cbMtdParam._m0[13u].z) - _423)) + _423;
    vec4 _515 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _554 = _552.x;
    float _555 = _552.y;
    float _556 = _552.z;
    float _563 = ((_535.x - _554) * _414) + _554;
    float _564 = ((_535.y - _555) * _414) + _555;
    float _565 = ((_535.z - _556) * _414) + _556;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _590 = ((_577.z - _565) * _487) + _565;
    float _593 = ((((_577.x - _563) * _487) + _563) * 2.0) + (-1.0);
    float _595 = ((((_577.y - _564) * _487) + _564) * 2.0) + (-1.0);
    float _596 = dot(vec2(_593, _595), vec2(_593, _595));
    float _4102 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _601 = sqrt(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _627 = (((_615.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _593;
    float _628 = (((_615.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _595;
    float _631 = fma(_601, _247, fma(_628, _254, _627 * _240));
    float _634 = fma(_601, _248, fma(_628, _255, _627 * _241));
    float _637 = fma(_601, _249, fma(_628, _256, _627 * _242));
    float _641 = inversesqrt(dot(vec3(_631, _634, _637), vec3(_631, _634, _637)));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _670 = _668.x;
    float _671 = 1.0 - _670;
    float _677 = (cbMtdParam._m0[19u].x + dot(vec4(_641 * _631, _641 * _634, _641 * _637, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_670 - _671) * cbMtdParam._m0[24u].w) + _671) * cbMtdParam._m0[21u].z);
    float _4113 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _680 = (-0.0) - cbMtdParam._m0[24u].x;
    float _682 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _682 : (isnan(_682) ? 1.0 : min(_682, 1.0));
    float _690 = _678 - ((_678 * TEXCOORD_8.x) * _683);
    float _691 = _678 - ((_678 * TEXCOORD_8.y) * _683);
    float _692 = _678 - ((_678 * TEXCOORD_8.z) * _683);
    float _699 = (_690 * ((_515.x * cbMtdParam._m0[18u].x) - _494)) + _494;
    float _700 = (_691 * ((_515.y * cbMtdParam._m0[18u].y) - _495)) + _495;
    float _701 = (_692 * ((_515.z * cbMtdParam._m0[18u].z) - _496)) + _496;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _715 = _713.x;
    float _716 = 1.0 - _715;
    float _744 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_715 - _716) * cbMtdParam._m0[24u].y) + _716) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4134 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _745 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _753 = ((((cbMtdParam._m0[10u].x - _699) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _745) + _699;
    float _754 = ((((cbMtdParam._m0[10u].y - _700) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _745) + _700;
    float _755 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _701)) * _745) + _701;
    float _759 = (cbMtdParam._m0[19u].w * (_615.z - _590)) + _590;
    vec4 _773 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _780 = (_773.x * 2.0) + (-1.0);
    float _781 = (_773.y * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _4145 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _790 = ((_773.z - _759) * _690) + _759;
    float _793 = ((cbMtdParam._m0[23u].y - _790) * _745) + _790;
    vec4 _812 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _818 = (_812.x * 2.0) + (-1.0);
    float _819 = (_812.y * 2.0) + (-1.0);
    float _820 = dot(vec2(_818, _819), vec2(_818, _819));
    float _4156 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _835 = ((sqrt(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) - _601) * _692) + _601;
    float _838 = (((_780 - _627) * _690) + _627) + (cbMtdParam._m0[21u].x * _627);
    float _839 = (((_781 - _628) * _691) + _628) + (cbMtdParam._m0[21u].x * _628);
    float _850 = (((_818 - _838) + (_838 * cbMtdParam._m0[22u].z)) * _745) + _838;
    float _851 = (((_819 - _839) + (_839 * cbMtdParam._m0[22u].z)) * _745) + _839;
    float _852 = (_745 * (sqrt(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) - _835)) + _835;
    float _854 = cbMtdParam._m0[22u].x + _615.w;
    float _857 = fma(_852, _247, fma(_851, _254, _850 * _240));
    float _860 = fma(_852, _248, fma(_851, _255, _850 * _241));
    float _863 = fma(_852, _249, fma(_851, _256, _850 * _242));
    float _867 = inversesqrt(dot(vec3(_857, _860, _863), vec3(_857, _860, _863)));
    float _868 = _867 * _857;
    float _869 = _867 * _860;
    float _870 = _867 * _863;
    float _4167 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _871 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _4178 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4189 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4200 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4211 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _889 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _940 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _930);
    float _941 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _930);
    float _942 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _930);
    float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
    float _947 = _940 * _946;
    float _948 = _941 * _946;
    float _949 = _942 * _946;
    vec4 _954 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _956 = _954.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1110 = sqrt(((_940 * _940) + (_941 * _941)) + (_942 * _942));
        float _1116 = (cbMatDynParam._m0[5u].x * _1110) + cbMatDynParam._m0[5u].y;
        float _4222 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1121 = (cbMatDynParam._m0[5u].z * _1110) + cbMatDynParam._m0[5u].w;
        float _4233 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) - _1117)) + _1117) < ((_956 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _967 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _968 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _986 = fma(_870, cbSceneParam._m0[5u].z, fma(_869, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _868));
    float _989 = fma(_870, cbSceneParam._m0[6u].z, fma(_869, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _868));
    float _992 = fma(_870, cbSceneParam._m0[7u].z, fma(_869, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _868));
    uint _1005 = _259 + 9u;
    uint _1006 = _1005 + uint(cbMatDynParam._m0[0u].w);
    float _1012 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * cbInstanceData._m0[_1006].x;
    float _1013 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * cbInstanceData._m0[_1006].y;
    float _1014 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * cbInstanceData._m0[_1006].z;
    float _4244 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1016 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _4266 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    vec4 _1026 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _967, cbSceneParam._m0[86u].y * _968));
    float _1030 = ((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * TEXCOORD_5.w) * _1026.x;
    float _1031 = dot(vec3(_868, _869, _870), vec3(_947, _948, _949));
    float _1034 = _1031 * 2.0;
    float _1038 = (_1034 * _868) - _947;
    float _1039 = (_1034 * _869) - _948;
    float _1040 = (_1034 * _870) - _949;
    float _1044 = abs(dot(vec3(_947, _948, _949), vec3(_868, _869, _870)));
    float _4277 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1046 = sqrt(_871);
    float _1059 = exp2((_1046 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1046 * 3.0));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1428;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1153 = fma(_1099, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091));
        float _1157 = fma(_1099, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091));
        float _1161 = fma(_1099, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091));
        float _1186 = _1091 + _868;
        float _1187 = _1095 + _869;
        float _1188 = _1099 + _870;
        float _1198 = fma(_1188, cbModelParam._m0[26u].z, fma(_1187, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186)) - _1153;
        float _1199 = fma(_1188, cbModelParam._m0[27u].z, fma(_1187, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186)) - _1157;
        float _1200 = fma(_1188, cbModelParam._m0[28u].z, fma(_1187, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186)) - _1161;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1153 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1157 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[34u].z) + ((((((_1161 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1256 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1222.x + (-0.5));
        float _1258 = _1256 * (_1222.y + (-0.5));
        float _1259 = _1256 * (_1222.z + (-0.5));
        float _1266 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1229.x + (-0.5));
        float _1268 = _1266 * (_1229.y + (-0.5));
        float _1269 = _1266 * (_1229.z + (-0.5));
        float _1276 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1236.x + (-0.5));
        float _1278 = _1276 * (_1236.y + (-0.5));
        float _1279 = _1276 * (_1236.z + (-0.5));
        float _1286 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1243.x + (-0.5));
        float _1288 = _1286 * (_1243.y + (-0.5));
        float _1289 = _1286 * (_1243.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1310 = (dot(vec3(_868, _869, _870), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1320 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4325 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1322 + 1.0))) + _1327) * _1290;
        float _1337 = _1258 * 0.5;
        float _1338 = _1268 * 0.5;
        float _1339 = _1278 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_868, _869, _870), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4358 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1364 + 1.0))) + _1369) * _1291;
        float _1379 = _1259 * 0.5;
        float _1380 = _1269 * 0.5;
        float _1381 = _1279 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_868, _869, _870), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4391 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1406 + 1.0))) + _1411) * _1292;
        _1428 = _1259;
        _1430 = _1258;
        _1431 = _1257;
        _1432 = _1269;
        _1433 = _1268;
        _1434 = _1267;
        _1435 = _1279;
        _1436 = _1278;
        _1437 = _1277;
        _1438 = _1292;
        _1439 = _1291;
        _1440 = _1290;
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
    }
    else
    {
        _1428 = _1429;
        _1430 = _1429;
        _1431 = _1429;
        _1432 = _1429;
        _1433 = _1429;
        _1434 = _1429;
        _1435 = _1429;
        _1436 = _1429;
        _1437 = _1429;
        _1438 = _1429;
        _1439 = _1429;
        _1440 = _1429;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1470 = fma(_1099, cbModelParam._m0[30u].z, fma(_1095, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1091));
        float _1474 = fma(_1099, cbModelParam._m0[31u].z, fma(_1095, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1091));
        float _1478 = fma(_1099, cbModelParam._m0[32u].z, fma(_1095, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1091));
        float _1501 = _1091 + _868;
        float _1502 = _1095 + _869;
        float _1503 = _1099 + _870;
        float _1513 = fma(_1503, cbModelParam._m0[30u].z, fma(_1502, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1501)) - _1470;
        float _1514 = fma(_1503, cbModelParam._m0[31u].z, fma(_1502, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1501)) - _1474;
        float _1515 = fma(_1503, cbModelParam._m0[32u].z, fma(_1502, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1501)) - _1478;
        float _1519 = inversesqrt(dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515)));
        float _1532 = ((_1519 * _1513) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1470 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1519 * _1514) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1474 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1519 * _1515) / cbModelParam._m0[35u].z) + ((((((_1478 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        float _1569 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1536.x + (-0.5));
        float _1571 = _1569 * (_1536.y + (-0.5));
        float _1572 = _1569 * (_1536.z + (-0.5));
        float _1579 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1543.x + (-0.5));
        float _1581 = _1579 * (_1543.y + (-0.5));
        float _1582 = _1579 * (_1543.z + (-0.5));
        float _1589 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1550.x + (-0.5));
        float _1591 = _1589 * (_1550.y + (-0.5));
        float _1592 = _1589 * (_1550.z + (-0.5));
        float _1599 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1557.x + (-0.5));
        float _1601 = _1599 * (_1557.y + (-0.5));
        float _1602 = _1599 * (_1557.z + (-0.5));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = _1570 * 0.5;
        float _1607 = _1580 * 0.5;
        float _1608 = _1590 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_868, _869, _870), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4454 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1633 + 1.0))) + _1638) * _1603;
        float _1648 = _1571 * 0.5;
        float _1649 = _1581 * 0.5;
        float _1650 = _1591 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_868, _869, _870), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4465 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4476 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4487 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_1675 + 1.0))) + _1680) * _1604;
        float _1690 = _1572 * 0.5;
        float _1691 = _1582 * 0.5;
        float _1692 = _1592 * 0.5;
        float _1693 = dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692));
        float _1698 = (_1693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1693);
        float _1706 = (dot(vec3(_868, _869, _870), vec3(_1698 * _1690, _1698 * _1691, _1698 * _1692)) + 1.0) * 0.5;
        float _4498 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1715 = sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4509 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1717 = _1716 * 2.0;
        float _1721 = (1.0 - _1716) / (_1716 + 1.0);
        float _4520 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1731 = ((((1.0 - _1722) * (_1717 + 2.0)) * exp2(log2(isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_1717 + 1.0))) + _1722) * _1605;
        _1739 = _1572;
        _1740 = _1571;
        _1741 = _1570;
        _1742 = _1582;
        _1743 = _1581;
        _1744 = _1580;
        _1745 = _1592;
        _1746 = _1591;
        _1747 = _1590;
        _1748 = _1605;
        _1749 = _1604;
        _1750 = _1603;
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)));
    }
    else
    {
        _1739 = _1429;
        _1740 = _1429;
        _1741 = _1429;
        _1742 = _1429;
        _1743 = _1429;
        _1744 = _1429;
        _1745 = _1429;
        _1746 = _1429;
        _1747 = _1429;
        _1748 = _1429;
        _1749 = _1429;
        _1750 = _1429;
        _1751 = 0.0;
        _1752 = 0.0;
        _1753 = 0.0;
    }
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1441)) + _1441;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1442)) + _1442;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1443)) + _1443;
    float _1786 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1789 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1792 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1763));
    float _1807 = _1038 * 0.5;
    float _1808 = _1039 * 0.5;
    float _1809 = _1040 * 0.5;
    float _1810 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1813 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1816 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1850;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1823 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1428, _1432, _1435, _1438));
        float _1827 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1430, _1433, _1436, _1439));
        float _1831 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1431, _1434, _1437, _1440));
        float _1838 = dot(vec4(cbModelParam._m0[39u]), vec4(_1807, _1808, _1809, 1.0));
        _1850 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1838) ? 0.0 : (isnan(0.0) ? _1838 : max(0.0, _1838))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1850 = 1.0;
    }
    float _1861;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1852 = dot(vec4(cbModelParam._m0[40u]), vec4(_1807, _1808, _1809, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1852) ? 0.0 : (isnan(0.0) ? _1852 : max(0.0, _1852))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1865 = (_1861 * cbModelParam._m0[1u].x) + (_1850 * (1.0 - cbModelParam._m0[1u].x));
    float _1875 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _871);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1875 : min(cbModelParam._m0[25u].z, _1875));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1923 = fma(_1099, cbModelParam._m0[13u].z, fma(_1095, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1091)) + cbModelParam._m0[13u].w;
        float _1927 = fma(_1099, cbModelParam._m0[14u].z, fma(_1095, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1091)) + cbModelParam._m0[14u].w;
        float _1931 = fma(_1099, cbModelParam._m0[15u].z, fma(_1095, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1091)) + cbModelParam._m0[15u].w;
        float _1934 = fma(_1040, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038));
        float _1937 = fma(_1040, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038));
        float _1940 = fma(_1040, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038));
        float _1968;
        if (_1934 > 0.0)
        {
            _1968 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1968 = frontier_phi_17_15_ladder;
        }
        float _2137;
        if (_1937 > 0.0)
        {
            _2137 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2137 = frontier_phi_26_22_ladder;
        }
        float _2432;
        if (_1940 > 0.0)
        {
            _2432 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2432 = frontier_phi_38_33_ladder;
        }
        float _2434 = isnan(_2137) ? _1968 : (isnan(_1968) ? _2137 : min(_1968, _2137));
        float _2435 = isnan(_2432) ? _2434 : (isnan(_2434) ? _2432 : min(_2434, _2432));
        float _2439 = (_2435 * _1934) + _1923;
        float _2440 = (_2435 * _1937) + _1927;
        float _2441 = (_2435 * _1940) + _1931;
        float _2442 = _2435 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2442;
        float _2446 = _2442 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 > _2446) || ((_2440 < _2444) || ((_2439 < _2444) || (_2439 > _2446))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2586 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2441, cbModelParam._m0[9u].z, fma(_2440, cbModelParam._m0[9u].y, _2439 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2441, cbModelParam._m0[10u].z, fma(_2440, cbModelParam._m0[10u].y, _2439 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2441, cbModelParam._m0[11u].z, fma(_2440, cbModelParam._m0[11u].y, _2439 * cbModelParam._m0[11u].x))), _1876);
            frontier_phi_16_38_ladder = _2586.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2586.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2586.x * cbModelParam._m0[1u].y;
        }
        _1956 = frontier_phi_16_38_ladder_2;
        _1958 = frontier_phi_16_38_ladder_1;
        _1960 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1038, _1039, _1040), _1876);
        _1956 = _1944.x * cbModelParam._m0[1u].y;
        _1958 = _1944.y * cbModelParam._m0[1u].y;
        _1960 = _1944.z * cbModelParam._m0[1u].y;
    }
    float _1964 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _871);
    float _1965 = isnan(_1964) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1964 : min(cbModelParam._m0[25u].w, _1964));
    float _2054;
    float _2056;
    float _2058;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2018 = fma(_1099, cbModelParam._m0[21u].z, fma(_1095, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1091)) + cbModelParam._m0[21u].w;
        float _2022 = fma(_1099, cbModelParam._m0[22u].z, fma(_1095, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1091)) + cbModelParam._m0[22u].w;
        float _2026 = fma(_1099, cbModelParam._m0[23u].z, fma(_1095, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1091)) + cbModelParam._m0[23u].w;
        float _2029 = fma(_1040, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038));
        float _2032 = fma(_1040, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038));
        float _2035 = fma(_1040, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038));
        float _2142;
        if (_2029 > 0.0)
        {
            _2142 = abs((1.0 - _2018) / _2029);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2018 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2142 = frontier_phi_28_24_ladder;
        }
        float _2459;
        if (_2032 > 0.0)
        {
            _2459 = abs((1.0 - _2022) / _2032);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2022 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2459 = frontier_phi_40_35_ladder;
        }
        float _2786;
        if (_2035 > 0.0)
        {
            _2786 = abs((1.0 - _2026) / _2035);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2026 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2786 = frontier_phi_50_47_ladder;
        }
        float _2788 = isnan(_2459) ? _2142 : (isnan(_2142) ? _2459 : min(_2142, _2459));
        float _2789 = isnan(_2786) ? _2788 : (isnan(_2788) ? _2786 : min(_2788, _2786));
        float _2793 = (_2789 * _2029) + _2018;
        float _2794 = (_2789 * _2032) + _2022;
        float _2795 = (_2789 * _2035) + _2026;
        float _2796 = _2789 * 9.9999997473787516355514526367188e-05;
        float _2797 = (-1.0) - _2796;
        float _2799 = _2796 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2795 > _2799) || ((_2795 < _2797) || ((_2794 > _2799) || ((_2794 < _2797) || ((_2793 < _2797) || (_2793 > _2799))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2795, cbModelParam._m0[17u].z, fma(_2794, cbModelParam._m0[17u].y, _2793 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2795, cbModelParam._m0[18u].z, fma(_2794, cbModelParam._m0[18u].y, _2793 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2795, cbModelParam._m0[19u].z, fma(_2794, cbModelParam._m0[19u].y, _2793 * cbModelParam._m0[19u].x))), _1965);
            frontier_phi_25_50_ladder = _2913.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2913.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2913.x * cbModelParam._m0[1u].z;
        }
        _2054 = frontier_phi_25_50_ladder_2;
        _2056 = frontier_phi_25_50_ladder_1;
        _2058 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2038 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1038, _1039, _1040), _1965);
        _2054 = _2038.x * cbModelParam._m0[1u].z;
        _2056 = _2038.y * cbModelParam._m0[1u].z;
        _2058 = _2038.z * cbModelParam._m0[1u].z;
    }
    float _2070 = ((((1.0 - _1059) * ((_1046 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1059 * _1046)) * _1030;
    float _2071 = _2070 * ((cbModelParam._m0[1u].w * (_2054 - _1956)) + _1956);
    float _2072 = _2070 * ((cbModelParam._m0[1u].w * (_2056 - _1958)) + _1958);
    float _2073 = _2070 * ((cbModelParam._m0[1u].w * (_2058 - _1960)) + _1960);
    float _2076 = fma(_2073, cbSceneParam._m0[89u].z, fma(_2072, cbSceneParam._m0[89u].y, _2071 * cbSceneParam._m0[89u].x));
    float _2079 = fma(_2073, cbSceneParam._m0[90u].z, fma(_2072, cbSceneParam._m0[90u].y, _2071 * cbSceneParam._m0[90u].x));
    float _2082 = fma(_2073, cbSceneParam._m0[91u].z, fma(_2072, cbSceneParam._m0[91u].y, _2071 * cbSceneParam._m0[91u].x));
    float _2116 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2124 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2128 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2129 = _2116 / _2128;
    float _2130 = _2120 / _2128;
    float _2131 = _2124 / _2128;
    float _2278;
    float _2279;
    float _2280;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2158 = ((uint(_2131 > cbSceneParam._m0[59u].y) + uint(_2131 > cbSceneParam._m0[59u].x)) + uint(_2131 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2159 = _2158 + 43u;
        uint _2167 = _2158 + 44u;
        uint _2175 = _2158 + 45u;
        uint _2183 = _2158 + 46u;
        float _2194 = fma(_2128, cbSceneParam._m0[_2159].w, fma(_2124, cbSceneParam._m0[_2159].z, fma(_2120, cbSceneParam._m0[_2159].y, _2116 * cbSceneParam._m0[_2159].x)));
        float _2198 = fma(_2128, cbSceneParam._m0[_2167].w, fma(_2124, cbSceneParam._m0[_2167].z, fma(_2120, cbSceneParam._m0[_2167].y, _2116 * cbSceneParam._m0[_2167].x)));
        float _2206 = fma(_2128, cbSceneParam._m0[_2183].w, fma(_2124, cbSceneParam._m0[_2183].z, fma(_2120, cbSceneParam._m0[_2183].y, _2116 * cbSceneParam._m0[_2183].x)));
        float _2211 = cbSceneParam._m0[33u].z * _2206;
        float _2213 = cbSceneParam._m0[33u].w * _2206;
        float _2216 = fma(_2128, cbSceneParam._m0[_2175].w, fma(_2124, cbSceneParam._m0[_2175].z, fma(_2120, cbSceneParam._m0[_2175].y, _2116 * cbSceneParam._m0[_2175].x))) / _2206;
        float _2264 = (cbSceneParam._m0[33u].x - sqrt(((_2130 * _2130) + (_2129 * _2129)) + (_2131 * _2131))) * cbSceneParam._m0[33u].y;
        float _4646 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2271 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2211 + _2194) / _2206, (_2213 + _2198) / _2206), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2213 + _2194) / _2206, (_2198 - _2211) / _2206), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 - _2211) / _2206, (_2198 - _2213) / _2206), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 - _2213) / _2206, (_2211 + _2198) / _2206), _2216), 0.0)).x), vec4(0.25)));
        _2278 = 1.0 - (_2271 * cbSceneParam._m0[34u].x);
        _2279 = 1.0 - (_2271 * cbSceneParam._m0[34u].y);
        _2280 = 1.0 - (_2271 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2278 = 1.0;
        _2279 = 1.0;
        _2280 = 1.0;
    }
    float _2344;
    float _2346;
    float _2348;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2332 = fma(_2128, cbSceneParam._m0[63u].w, fma(_2124, cbSceneParam._m0[63u].z, fma(_2120, cbSceneParam._m0[63u].y, _2116 * cbSceneParam._m0[63u].x)));
        float _2333 = fma(_2128, cbSceneParam._m0[60u].w, fma(_2124, cbSceneParam._m0[60u].z, fma(_2120, cbSceneParam._m0[60u].y, _2116 * cbSceneParam._m0[60u].x))) / _2332;
        float _2334 = fma(_2128, cbSceneParam._m0[61u].w, fma(_2124, cbSceneParam._m0[61u].z, fma(_2120, cbSceneParam._m0[61u].y, _2116 * cbSceneParam._m0[61u].x))) / _2332;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2333 >= cbSceneParam._m0[64u].x) && (_2334 >= cbSceneParam._m0[64u].y)) && (_2333 <= cbSceneParam._m0[64u].z)) && (_2334 <= cbSceneParam._m0[64u].w))
        {
            float _2472 = fma(_2128, cbSceneParam._m0[62u].w, fma(_2124, cbSceneParam._m0[62u].z, fma(_2120, cbSceneParam._m0[62u].y, _2116 * cbSceneParam._m0[62u].x))) / _2332;
            float _2476 = isnan(cbSceneParam._m0[41u].w) ? _2472 : (isnan(_2472) ? cbSceneParam._m0[41u].w : max(_2472, cbSceneParam._m0[41u].w));
            float _2519 = (cbSceneParam._m0[33u].x - sqrt(((_2130 * _2130) + (_2129 * _2129)) + (_2131 * _2131))) * cbSceneParam._m0[33u].y;
            float _4662 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
            float _2526 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2333, cbSceneParam._m0[33u].w + _2334), _2476), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2333, _2334 - cbSceneParam._m0[33u].z), _2476), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2333 - cbSceneParam._m0[33u].z, _2334 - cbSceneParam._m0[33u].w), _2476), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2333 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2334), _2476), 0.0)).x), vec4(0.25)));
            float _2530 = 1.0 - (_2526 * cbSceneParam._m0[34u].x);
            float _2531 = 1.0 - (_2526 * cbSceneParam._m0[34u].y);
            float _2532 = 1.0 - (_2526 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2532) ? _2280 : (isnan(_2280) ? _2532 : min(_2280, _2532));
            frontier_phi_37_36_ladder_1 = isnan(_2531) ? _2279 : (isnan(_2279) ? _2531 : min(_2279, _2531));
            frontier_phi_37_36_ladder_2 = isnan(_2530) ? _2278 : (isnan(_2278) ? _2530 : min(_2278, _2530));
        }
        else
        {
            frontier_phi_37_36_ladder = _2280;
            frontier_phi_37_36_ladder_1 = _2279;
            frontier_phi_37_36_ladder_2 = _2278;
        }
        _2344 = frontier_phi_37_36_ladder_2;
        _2346 = frontier_phi_37_36_ladder_1;
        _2348 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2344 = _2278;
        _2346 = _2279;
        _2348 = _2280;
    }
    uvec4 _2353 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2355 = _2353.x * 14u;
    uint _2356 = _2355 + 13u;
    float _2363 = _1030 + (-1.0);
    float _2368 = (cbLight._m0[_2356].x * _2363) + 1.0;
    float _2369 = (cbLight._m0[_2356].y * _2363) + 1.0;
    float _2370 = (cbLight._m0[_2356].z * _2363) + 1.0;
    float _2371 = (cbLight._m0[_2356].w * _2363) + 1.0;
    uint _2372 = _2355 + 5u;
    float _2378 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
    uint _2382 = _2355 + 4u;
    float _2391 = isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0));
    uint _2395 = _2355 | 1u;
    float _2406 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_868, _869, _870));
    float _2409 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_868, _869, _870));
    float _4698 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _4709 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2414 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * 0.3183098733425140380859375;
    float _2416 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * 0.3183098733425140380859375;
    float _2423 = ((cbLight._m0[_2372].x * _2378) * _2416) + (((cbLight._m0[_2382].x * _2344) * _2391) * _2414);
    float _2424 = ((_2378 * cbLight._m0[_2372].y) * _2416) + (((cbLight._m0[_2382].y * _2346) * _2391) * _2414);
    float _2425 = ((_2378 * cbLight._m0[_2372].z) * _2416) + (((cbLight._m0[_2382].z * _2348) * _2391) * _2414);
    uvec4 _2429 = floatBitsToUint(cbLight._m0[_2355 + 12u]);
    bool _2431 = _2429.x == 0u;
    float _2533;
    float _2535;
    float _2537;
    if (_2431)
    {
        _2533 = _2423;
        _2535 = _2424;
        _2537 = _2425;
    }
    else
    {
        uint _2541 = _2355 + 6u;
        float _2557 = (dot(vec3(cbLight._m0[_2355 + 2u].xyz), vec3(_868, _869, _870)) * 0.5) + 0.5;
        float _2558 = _2557 * _2557;
        float _4720 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2559 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2560 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
        _2533 = (((cbLight._m0[_2541].x * 0.3183098733425140380859375) * _2559) * _2560) + _2423;
        _2535 = (((cbLight._m0[_2541].y * 0.3183098733425140380859375) * _2559) * _2560) + _2424;
        _2537 = (((cbLight._m0[_2541].z * 0.3183098733425140380859375) * _2559) * _2560) + _2425;
    }
    bool _2540 = _2429.y == 0u;
    float _2595;
    float _2597;
    float _2599;
    if (_2540)
    {
        _2595 = _2533;
        _2597 = _2535;
        _2599 = _2537;
    }
    else
    {
        uint _2757 = _2355 + 7u;
        float _2773 = (dot(vec3(cbLight._m0[_2355 + 3u].xyz), vec3(_868, _869, _870)) * 0.5) + 0.5;
        float _2774 = _2773 * _2773;
        float _4736 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2775 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2776 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2595 = (((cbLight._m0[_2757].x * 0.3183098733425140380859375) * _2775) * _2776) + _2533;
        _2597 = (((cbLight._m0[_2757].y * 0.3183098733425140380859375) * _2775) * _2776) + _2535;
        _2599 = (((cbLight._m0[_2757].z * 0.3183098733425140380859375) * _2775) * _2776) + _2537;
    }
    uint _2602 = _2355 + 8u;
    float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _871) * 0.949999988079071044921875);
    float _2616 = _2615 * _2615;
    float _2617 = cbLight._m0[_2355].x + _947;
    float _2618 = cbLight._m0[_2355].y + _948;
    float _2619 = cbLight._m0[_2355].z + _949;
    float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
    float _2624 = _2623 * _2617;
    float _2625 = _2623 * _2618;
    float _2626 = _2623 * _2619;
    float _2627 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2355].xyz));
    float _4752 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
    float _4763 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _2631 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
    float _2632 = dot(vec3(_868, _869, _870), vec3(_2624, _2625, _2626));
    float _4774 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2635 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    float _2636 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2624, _2625, _2626));
    float _4785 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2640 = _2616 * _2616;
    float _2644 = ((_2635 * _2635) * (_2640 + (-1.0))) + 1.0;
    float _2655 = (exp2(log2(1.0 - (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2656 = 1.0 - _2616;
    float _2667 = (0.5 / (((_2631 * ((_2630 * _2656) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2631 * _2656) + _2616) * _2630))) * _2630;
    float _4796 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2669 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2640 / ((_2644 * _2644) * 3.141590118408203125));
    uint _2683 = _2355 + 9u;
    float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _871) * 0.949999988079071044921875);
    float _2695 = _2694 * _2694;
    float _2696 = cbLight._m0[_2395].x + _947;
    float _2697 = cbLight._m0[_2395].y + _948;
    float _2698 = cbLight._m0[_2395].z + _949;
    float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
    float _2703 = _2702 * _2696;
    float _2704 = _2702 * _2697;
    float _2705 = _2702 * _2698;
    float _2706 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2395].xyz));
    float _4807 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2709 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
    float _2710 = dot(vec3(_868, _869, _870), vec3(_2703, _2704, _2705));
    float _4818 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2713 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
    float _2714 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2703, _2704, _2705));
    float _4829 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2718 = _2695 * _2695;
    float _2722 = ((_2713 * _2713) * (_2718 + (-1.0))) + 1.0;
    float _2731 = (exp2(log2(1.0 - (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2732 = 1.0 - _2695;
    float _2742 = (0.5 / (((_2631 * ((_2709 * _2732) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2631 * _2732) + _2695) * _2709))) * _2709;
    float _4840 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2744 = (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2718 / ((_2722 * _2722) * 3.141590118408203125));
    float _2754 = (((_2731 * cbLight._m0[_2683].x) * _2744) * _2378) + ((((cbLight._m0[_2602].x * _2344) * _2655) * _2669) * _2391);
    float _2755 = (((_2731 * cbLight._m0[_2683].y) * _2744) * _2378) + ((((cbLight._m0[_2602].y * _2346) * _2655) * _2669) * _2391);
    float _2756 = (((_2731 * cbLight._m0[_2683].z) * _2744) * _2378) + ((((cbLight._m0[_2602].z * _2348) * _2655) * _2669) * _2391);
    float _2812;
    float _2814;
    float _2816;
    if (_2431)
    {
        _2812 = _2754;
        _2814 = _2755;
        _2816 = _2756;
    }
    else
    {
        uint _2818 = _2355 + 2u;
        uint _2822 = _2355 + 10u;
        float _2836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2818].w)) * _871) * 0.949999988079071044921875);
        float _2837 = _2836 * _2836;
        float _2838 = cbLight._m0[_2818].x + _947;
        float _2839 = cbLight._m0[_2818].y + _948;
        float _2840 = cbLight._m0[_2818].z + _949;
        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
        float _2845 = _2844 * _2838;
        float _2846 = _2844 * _2839;
        float _2847 = _2844 * _2840;
        float _2848 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2818].xyz));
        float _4851 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
        float _2852 = dot(vec3(_868, _869, _870), vec3(_2845, _2846, _2847));
        float _4862 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2855 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2856 = dot(vec3(cbLight._m0[_2818].xyz), vec3(_2845, _2846, _2847));
        float _4873 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2860 = _2837 * _2837;
        float _2864 = ((_2855 * _2855) * (_2860 + (-1.0))) + 1.0;
        float _2873 = (exp2(log2(1.0 - (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2874 = 1.0 - _2837;
        float _2884 = (0.5 / (((_2631 * ((_2851 * _2874) + _2837)) + 9.9999999392252902907785028219223e-09) + (((_2631 * _2874) + _2837) * _2851))) * _2851;
        float _4884 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2886 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2860 / ((_2864 * _2864) * 3.141590118408203125));
        float _2887 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
        _2812 = (((_2873 * cbLight._m0[_2822].x) * _2886) * _2887) + _2754;
        _2814 = (((_2873 * cbLight._m0[_2822].y) * _2886) * _2887) + _2755;
        _2816 = (((_2873 * cbLight._m0[_2822].z) * _2886) * _2887) + _2756;
    }
    float _2918;
    float _2920;
    float _2922;
    if (_2540)
    {
        _2918 = _2812;
        _2920 = _2814;
        _2922 = _2816;
    }
    else
    {
        uint _2929 = _2355 + 3u;
        uint _2933 = _2355 + 11u;
        float _2947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2929].w)) * _871) * 0.949999988079071044921875);
        float _2948 = _2947 * _2947;
        float _2949 = cbLight._m0[_2929].x + _947;
        float _2950 = cbLight._m0[_2929].y + _948;
        float _2951 = cbLight._m0[_2929].z + _949;
        float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
        float _2956 = _2955 * _2949;
        float _2957 = _2955 * _2950;
        float _2958 = _2955 * _2951;
        float _2959 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2929].xyz));
        float _4900 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2962 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
        float _2963 = dot(vec3(_868, _869, _870), vec3(_2956, _2957, _2958));
        float _4911 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2966 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
        float _2967 = dot(vec3(cbLight._m0[_2929].xyz), vec3(_2956, _2957, _2958));
        float _4922 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2971 = _2948 * _2948;
        float _2975 = ((_2966 * _2966) * (_2971 + (-1.0))) + 1.0;
        float _2984 = (exp2(log2(1.0 - (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2985 = 1.0 - _2948;
        float _2995 = (0.5 / (((_2631 * ((_2962 * _2985) + _2948)) + 9.9999999392252902907785028219223e-09) + (((_2631 * _2985) + _2948) * _2962))) * _2962;
        float _4933 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        float _2997 = (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2971 / ((_2975 * _2975) * 3.141590118408203125));
        float _2998 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2918 = (((_2984 * cbLight._m0[_2933].x) * _2997) * _2998) + _2812;
        _2920 = (((_2984 * cbLight._m0[_2933].y) * _2997) * _2998) + _2814;
        _2922 = (((_2984 * cbLight._m0[_2933].z) * _2997) * _2998) + _2816;
    }
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    if (_2353.y == 0u)
    {
        uvec4 _3019 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3020 = _3019.x;
        uint _3031 = uint((float(_3019.y) * floor(float(uint(cbSceneParam._m0[85u].y * _968) / _3020))) + floor(float(uint(cbSceneParam._m0[85u].x * _967) / _3020)));
        float _3041 = (log2(_2131 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3042 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
        uint _3045 = uint(isnan(14.0) ? _3042 : (isnan(_3042) ? 14.0 : min(_3042, 14.0)));
        uvec4 _3050 = texelFetch(g_lightClusterGridBuffer, int(((_3045 << 2u) + (_3031 << 6u)) >> 2u));
        uint _3051 = _3050.x;
        uint _3052 = _3019.z;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        if (((((1u << ((_3052 >> 4u) & 15u)) + 4294967295u) & _3051) == 0u) || ((_3052 & 240u) == 0u))
        {
            _3131 = 0.0;
            _3133 = 0.0;
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
            _3141 = 0.0;
        }
        else
        {
            float _3132;
            float _3134;
            float _3136;
            float _3138;
            float _3140;
            float _3142;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            uint _3289 = 0u;
            uint _3298;
            bool _3299;
            for (;;)
            {
                _3298 = texelFetch(g_lightClassification, int((((_3045 << 5u) + (_3031 << 9u)) + (_3289 << 2u)) >> 2u)).x;
                _3299 = _3298 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3299)
                {
                    frontier_phi_71_pred = _3288;
                    frontier_phi_71_pred_1 = _3287;
                    frontier_phi_71_pred_2 = _3286;
                    frontier_phi_71_pred_3 = _3285;
                    frontier_phi_71_pred_4 = _3284;
                    frontier_phi_71_pred_5 = _3283;
                }
                else
                {
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    uint _3434;
                    _3428 = _3283;
                    _3429 = _3284;
                    _3430 = _3285;
                    _3431 = _3286;
                    _3432 = _3287;
                    _3433 = _3288;
                    _3434 = _3298;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    for (;;)
                    {
                        uint _3438 = uint(findLSB(_3434)) + (_3289 << 5u);
                        uint _3435 = (_3434 + 4294967295u) & _3434;
                        uint _3440 = _3438 * 48u;
                        vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3440)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 3u)).x));
                        uint _3460 = (_3438 * 48u) + 4u;
                        vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3460)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 3u)).x));
                        uint _3479 = (_3438 * 48u) + 8u;
                        vec3 _3490 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3479)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 2u)).x));
                        float _3494 = _3454.x - _2129;
                        float _3495 = _3454.y - _2130;
                        float _3496 = _3454.z - _2131;
                        float _3497 = dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496));
                        float _3500 = inversesqrt(_3497);
                        float _3501 = _3500 * _3494;
                        float _3502 = _3500 * _3495;
                        float _3503 = _3500 * _3496;
                        float _3504 = dot(vec3(_986, _989, _992), vec3(_3501, _3502, _3503));
                        float _3509 = 1.0 - (_3497 * _3454.w);
                        float _4959 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3510 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3511 = sqrt(_3497) * _3473.w;
                        float _3514 = 1.39999997615814208984375 / (_3511 + 1.39999997615814208984375);
                        float _3515 = _3514 * _3514;
                        float _3518 = ((1.0 - _3515) * _3504) + _3515;
                        float _3521 = _3511 * _3511;
                        float _3525 = ((isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0))) * _3510) / ((_3521 * 0.699999988079071044921875) + 1.0);
                        float _3529 = (-0.0) - _2129;
                        float _3530 = (-0.0) - _2130;
                        float _3531 = (-0.0) - _2131;
                        float _3535 = inversesqrt(dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531)));
                        float _3536 = _3535 * _3529;
                        float _3537 = _3535 * _3530;
                        float _3538 = _3535 * _3531;
                        float _3545 = exp2(log2(1.0 / ((_3521 * 3.5) + 5.0)) * 0.25);
                        float _3546 = 1.0 - _1046;
                        float _3553 = sqrt(1.0 - ((1.0 - (_3546 * _3546)) * (1.0 - (_3545 * _3545))));
                        float _3554 = _3553 * _3553;
                        float _3555 = _3554 * _3554;
                        float _3556 = _3536 + _3501;
                        float _3557 = _3537 + _3502;
                        float _3558 = _3538 + _3503;
                        float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                        float _3566 = dot(vec3(_986, _989, _992), vec3(_3536, _3537, _3538));
                        float _4975 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3569 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                        float _3570 = dot(vec3(_986, _989, _992), vec3(_3562 * _3556, _3562 * _3557, _3562 * _3558));
                        float _4986 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3573 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                        float _3577 = ((_3573 * _3573) * (_3555 + (-1.0))) + 1.0;
                        float _3578 = _3514 * _3554;
                        float _3579 = _3578 * _3578;
                        float _3582 = ((1.0 - _3579) * _3504) + _3579;
                        float _4997 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3583 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                        float _3584 = 1.0 - _3554;
                        float _3594 = (0.5 / (((_3583 * ((_3569 * _3584) + _3554)) + 9.9999999392252902907785028219223e-09) + (((_3583 * _3584) + _3554) * _3569))) * _3583;
                        float _5008 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3605 = (((_3555 * 3.1415927410125732421875) * (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) / ((_3577 * _3577) * ((_3521 * 2.1991131305694580078125) + 3.141590118408203125))) * _3510;
                        _3358 = (_3525 * _3473.x) + _3431;
                        _3359 = (_3525 * _3473.y) + _3432;
                        _3360 = (_3525 * _3473.z) + _3433;
                        _3355 = (_3605 * _3490.x) + _3428;
                        _3356 = (_3605 * _3490.y) + _3429;
                        _3357 = (_3605 * _3490.z) + _3430;
                        if (_3435 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3428 = _3355;
                            _3429 = _3356;
                            _3430 = _3357;
                            _3431 = _3358;
                            _3432 = _3359;
                            _3433 = _3360;
                            _3434 = _3435;
                        }
                    }
                    frontier_phi_71_pred = _3360;
                    frontier_phi_71_pred_1 = _3359;
                    frontier_phi_71_pred_2 = _3358;
                    frontier_phi_71_pred_3 = _3357;
                    frontier_phi_71_pred_4 = _3356;
                    frontier_phi_71_pred_5 = _3355;
                }
                _3142 = frontier_phi_71_pred;
                _3140 = frontier_phi_71_pred_1;
                _3138 = frontier_phi_71_pred_2;
                _3136 = frontier_phi_71_pred_3;
                _3134 = frontier_phi_71_pred_4;
                _3132 = frontier_phi_71_pred_5;
                uint _3290 = _3289 + 1u;
                if (_3290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3283 = _3132;
                    _3284 = _3134;
                    _3285 = _3136;
                    _3286 = _3138;
                    _3287 = _3140;
                    _3288 = _3142;
                    _3289 = _3290;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3131 = _3132;
            _3133 = _3134;
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
            _3141 = _3142;
        }
        uvec4 _3145 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3146 = _3145.z;
        uint _3148 = (_3146 >> 8u) & 15u;
        float _3251;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        if (((4294967295u << _3148) & _3051) == 0u)
        {
            _3251 = _3131;
            _3253 = _3133;
            _3255 = _3135;
            _3257 = _3137;
            _3259 = _3139;
            _3261 = _3141;
        }
        else
        {
            float _3276 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
            float _3277 = _3276 * _2129;
            float _3278 = _3276 * _2130;
            float _3279 = _3276 * _2131;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3148 < ((_3146 >> 12u) & 15u))
            {
                float _3252;
                float _3254;
                float _3256;
                float _3258;
                float _3260;
                float _3262;
                float _3411 = _3131;
                float _3412 = _3133;
                float _3413 = _3135;
                float _3414 = _3137;
                float _3415 = _3139;
                float _3416 = _3141;
                uint _3417 = _3148;
                uint _3426;
                bool _3427;
                for (;;)
                {
                    _3426 = texelFetch(g_lightClassification, int((((_3045 << 5u) + (_3031 << 9u)) + (_3417 << 2u)) >> 2u)).x;
                    _3427 = _3426 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3427)
                    {
                        frontier_phi_82_pred = _3416;
                        frontier_phi_82_pred_1 = _3415;
                        frontier_phi_82_pred_2 = _3414;
                        frontier_phi_82_pred_3 = _3413;
                        frontier_phi_82_pred_4 = _3412;
                        frontier_phi_82_pred_5 = _3411;
                    }
                    else
                    {
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3912;
                        float _3913;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3917;
                        float _3632 = _3411;
                        float _3633 = _3412;
                        float _3634 = _3413;
                        float _3635 = _3414;
                        float _3636 = _3415;
                        float _3637 = _3416;
                        uint _3638 = _3426;
                        uint _3639;
                        vec4 _3664;
                        float _3665;
                        vec4 _3680;
                        vec3 _3692;
                        vec4 _3707;
                        vec4 _3722;
                        float _3768;
                        bool _3769;
                        for (;;)
                        {
                            uint _3649 = ((_3417 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3638));
                            _3639 = (_3638 + 4294967295u) & _3638;
                            uint _3651 = _3649 * 40u;
                            _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            _3665 = _3664.w;
                            uint _3667 = (_3649 * 40u) + 4u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            uint _3682 = (_3649 * 40u) + 8u;
                            _3692 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x));
                            uint _3694 = (_3649 * 40u) + 16u;
                            _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3709 = (_3649 * 40u) + 20u;
                            _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            uint _3724 = (_3649 * 40u) + 24u;
                            vec4 _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            uint _3743 = (_3649 * 40u) + 28u;
                            vec4 _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            _3768 = fma(_2131, _3756.z, fma(_2130, _3756.y, _3756.x * _2129)) + _3756.w;
                            _3769 = !((fma(_2131, _3737.z, fma(_2130, _3737.y, _3737.x * _2129)) + _3737.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3769)
                            {
                                float _3796 = _3664.x - _2129;
                                float _3797 = _3664.y - _2130;
                                float _3798 = _3664.z - _2131;
                                float _3799 = dot(vec3(_3796, _3797, _3798), vec3(_3796, _3797, _3798));
                                float _3802 = inversesqrt(_3799);
                                float _3803 = _3802 * _3796;
                                float _3804 = _3802 * _3797;
                                float _3805 = _3802 * _3798;
                                float _3809 = 1.0 - (_3799 / (_3665 * _3665));
                                float _5019 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3810 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3814 = sqrt(_3799) * _3680.w;
                                float _3816 = 1.39999997615814208984375 / (_3814 + 1.39999997615814208984375);
                                float _3817 = _3816 * _3816;
                                float _3820 = ((1.0 - _3817) * dot(vec3(_3803, _3804, _3805), vec3(_986, _989, _992))) + _3817;
                                float _3823 = _3814 * _3814;
                                float _3827 = (fma(_2131, _3707.z, fma(_2130, _3707.y, _3707.x * _2129)) + _3707.w) / _3768;
                                float _3828 = (fma(_2131, _3722.z, fma(_2130, _3722.y, _3722.x * _2129)) + _3722.w) / _3768;
                                float _3832 = 1.0 - dot(vec2(_3827, _3828), vec2(_3827, _3828));
                                float _5035 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3833 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                                float _3834 = _3833 * (((isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0))) * _3810) / ((_3823 * 0.699999988079071044921875) + 1.0));
                                float _3846 = exp2(log2(1.0 / ((_3823 * 3.5) + 5.0)) * 0.25);
                                float _3847 = 1.0 - _1046;
                                float _3854 = sqrt(1.0 - ((1.0 - (_3847 * _3847)) * (1.0 - (_3846 * _3846))));
                                float _3855 = _3854 * _3854;
                                float _3856 = _3855 * _3855;
                                float _3857 = _3803 - _3277;
                                float _3858 = _3804 - _3278;
                                float _3859 = _3805 - _3279;
                                float _3863 = inversesqrt(dot(vec3(_3857, _3858, _3859), vec3(_3857, _3858, _3859)));
                                float _3867 = dot(vec3(_986, _989, _992), vec3((-0.0) - _3277, (-0.0) - _3278, (-0.0) - _3279));
                                float _5046 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3870 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                                float _3871 = dot(vec3(_986, _989, _992), vec3(_3863 * _3857, _3863 * _3858, _3863 * _3859));
                                float _5057 = isnan(0.0) ? _3871 : (isnan(_3871) ? 0.0 : max(_3871, 0.0));
                                float _3874 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                                float _3878 = ((_3874 * _3874) * (_3856 + (-1.0))) + 1.0;
                                float _3879 = _3816 * _3855;
                                float _3880 = _3879 * _3879;
                                float _3886 = ((1.0 - _3880) * dot(vec3(_986, _989, _992), vec3(_3803, _3804, _3805))) + _3880;
                                float _5068 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3887 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                                float _3888 = 1.0 - _3855;
                                float _3898 = (0.5 / (((_3887 * ((_3870 * _3888) + _3855)) + 9.9999999392252902907785028219223e-09) + (((_3887 * _3888) + _3855) * _3870))) * _3887;
                                float _5079 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3908 = (_3833 * _3810) * (((_3856 * 3.1415927410125732421875) * (isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0)))) / ((_3878 * _3878) * ((_3823 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3834 * _3680.z;
                                frontier_phi_88_pred_1 = _3834 * _3680.y;
                                frontier_phi_88_pred_2 = _3834 * _3680.x;
                                frontier_phi_88_pred_3 = _3908 * _3692.z;
                                frontier_phi_88_pred_4 = _3908 * _3692.y;
                                frontier_phi_88_pred_5 = _3908 * _3692.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3917 = frontier_phi_88_pred;
                            _3916 = frontier_phi_88_pred_1;
                            _3915 = frontier_phi_88_pred_2;
                            _3914 = frontier_phi_88_pred_3;
                            _3913 = frontier_phi_88_pred_4;
                            _3912 = frontier_phi_88_pred_5;
                            _3622 = _3915 + _3635;
                            _3623 = _3916 + _3636;
                            _3624 = _3917 + _3637;
                            _3619 = _3912 + _3632;
                            _3620 = _3913 + _3633;
                            _3621 = _3914 + _3634;
                            if (_3639 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3632 = _3619;
                                _3633 = _3620;
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3639;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3624;
                        frontier_phi_82_pred_1 = _3623;
                        frontier_phi_82_pred_2 = _3622;
                        frontier_phi_82_pred_3 = _3621;
                        frontier_phi_82_pred_4 = _3620;
                        frontier_phi_82_pred_5 = _3619;
                    }
                    _3262 = frontier_phi_82_pred;
                    _3260 = frontier_phi_82_pred_1;
                    _3258 = frontier_phi_82_pred_2;
                    _3256 = frontier_phi_82_pred_3;
                    _3254 = frontier_phi_82_pred_4;
                    _3252 = frontier_phi_82_pred_5;
                    uint _3418 = _3417 + 1u;
                    if (_3418 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3411 = _3252;
                        _3412 = _3254;
                        _3413 = _3256;
                        _3414 = _3258;
                        _3415 = _3260;
                        _3416 = _3262;
                        _3417 = _3418;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3258;
                frontier_phi_63_64_ladder_1 = _3262;
                frontier_phi_63_64_ladder_2 = _3260;
                frontier_phi_63_64_ladder_3 = _3256;
                frontier_phi_63_64_ladder_4 = _3254;
                frontier_phi_63_64_ladder_5 = _3252;
            }
            else
            {
                frontier_phi_63_64_ladder = _3137;
                frontier_phi_63_64_ladder_1 = _3141;
                frontier_phi_63_64_ladder_2 = _3139;
                frontier_phi_63_64_ladder_3 = _3135;
                frontier_phi_63_64_ladder_4 = _3133;
                frontier_phi_63_64_ladder_5 = _3131;
            }
            _3251 = frontier_phi_63_64_ladder_5;
            _3253 = frontier_phi_63_64_ladder_4;
            _3255 = frontier_phi_63_64_ladder_3;
            _3257 = frontier_phi_63_64_ladder;
            _3259 = frontier_phi_63_64_ladder_2;
            _3261 = frontier_phi_63_64_ladder_1;
        }
        float _3266 = isnan(1.0) ? _1030 : (isnan(_1030) ? 1.0 : min(_1030, 1.0));
        _3064 = (_3266 * _3257) + _2595;
        _3066 = (_3266 * _3259) + _2597;
        _3068 = (_3266 * _3261) + _2599;
        _3070 = ((_3251 * 0.039999999105930328369140625) * _3266) + _2918;
        _3072 = ((_3253 * 0.039999999105930328369140625) * _3266) + _2920;
        _3074 = ((_3255 * 0.039999999105930328369140625) * _3266) + _2922;
    }
    else
    {
        _3064 = _2595;
        _3066 = _2597;
        _3068 = _2599;
        _3070 = _2918;
        _3072 = _2920;
        _3074 = _2922;
    }
    float _5095 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _5106 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _5117 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _3091 = ((isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0))) * (_3064 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1030))) + ((_3070 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1865)) * cbPerFrame._m0[3u].x);
    float _3092 = ((isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0))) * (_3066 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1030))) + ((_3072 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1865)) * cbPerFrame._m0[3u].x);
    float _3093 = ((isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0))) * (_3068 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1030))) + ((_3074 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1865)) * cbPerFrame._m0[3u].x);
    uint _3094 = _259 + 6u;
    float _3102 = _967 / cbSceneParam._m0[86u].x;
    float _3103 = _968 / cbSceneParam._m0[86u].y;
    vec4 _3117 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3102, _3103, (log2((isnan(cbSceneParam._m0[77u].w) ? _889 : (isnan(_889) ? cbSceneParam._m0[77u].w : min(_889, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3119 = _3117.x;
    float _3120 = _3117.y;
    float _3121 = _3117.z;
    float _3122 = _3117.w;
    float _3193;
    float _3195;
    float _3197;
    float _3199;
    if (_889 > cbSceneParam._m0[78u].w)
    {
        float _3156 = isnan(_889) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _889 : min(cbSceneParam._m0[80u].w, _889));
        float _3157 = _3156 / _889;
        float _3168 = _3157 * _940;
        float _3169 = _941 * _3157;
        float _3170 = (-0.0) - _3169;
        float _3171 = _3157 * _942;
        float _3173 = (cbSceneParam._m0[77u].w * _3170) / _3156;
        float _3174 = _3173 + cbSceneParam._m0[79u].w;
        float _3175 = cbSceneParam._m0[79u].w - _3169;
        float _3181 = sqrt(((_3168 * _3168) + (_3169 * _3169)) + (_3171 * _3171));
        float _3184 = (1.0 - (cbSceneParam._m0[77u].w / _3156)) * _3181;
        float _3189 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3191 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3368;
        if (abs((_3170 - _3173) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3368 = ((((_3174 > 0.0) ? exp2(_3189 * _3174) : (2.0 - exp2(_3191 * _3174))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3184;
        }
        else
        {
            float _3312 = 1.0 / cbSceneParam._m0[80u].x;
            float _3313 = isnan(_3175) ? _3174 : (isnan(_3174) ? _3175 : max(_3174, _3175));
            float _3314 = isnan(_3175) ? _3174 : (isnan(_3174) ? _3175 : min(_3174, _3175));
            float _3323 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : min(_3313, 0.0));
            float _3324 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : min(_3314, 0.0));
            _3368 = ((abs(_3181 / _3170) * cbSceneParam._m0[80u].y) * ((((_3323 - _3324) * 2.0) - ((exp2(_3189 * (isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0)))) - exp2(_3189 * (isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))))) * _3312)) - ((exp2(_3191 * _3323) - exp2(_3191 * _3324)) * _3312))) + (_3184 * cbSceneParam._m0[80u].z);
        }
        vec4 _3370 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3102, _3103, 1.0), 0.0);
        float _3379 = exp2((_3368 * (-1.44269502162933349609375)) * (1.0 - _3370.w));
        float _3380 = log2(_3379);
        float _3396 = log2(_3122);
        _3193 = (exp2(_3396 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3380 * cbSceneParam._m0[78u].x)) * _3370.x) / cbSceneParam._m0[78u].x)) + _3119;
        _3195 = (exp2(_3396 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3380 * cbSceneParam._m0[78u].y)) * _3370.y) / cbSceneParam._m0[78u].y)) + _3120;
        _3197 = (exp2(_3396 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3380 * cbSceneParam._m0[78u].z)) * _3370.z) / cbSceneParam._m0[78u].z)) + _3121;
        _3199 = _3379 * _3122;
    }
    else
    {
        _3193 = _3119;
        _3195 = _3120;
        _3197 = _3121;
        _3199 = _3122;
    }
    bool _3406;
    vec4 _3209;
    vec4 _3231;
    float _3233;
    float _3237;
    float _3238;
    float _3239;
    float _3240;
    bool _3250;
    for (;;)
    {
        _3209 = cbMatDynParam._m0[0u];
        float _3211 = roundEven(_3209.y);
        bool _3212 = _3211 == 3.0;
        float _3213 = log2(_3199);
        float _3220 = exp2(_3213 * cbSceneParam._m0[78u].x) * _3091;
        float _3221 = exp2(_3213 * cbSceneParam._m0[78u].y) * _3092;
        float _3222 = exp2(_3213 * cbSceneParam._m0[78u].z) * _3093;
        float _3229 = _956 + (-0.5);
        _3231 = cbMtdParam._m0[1u];
        _3233 = _3231.y * _3229;
        float _3236 = (_3211 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3237 = _3236 * (_3212 ? _3220 : (_3220 + (cbSceneParam._m0[72u].w * _3193)));
        _3238 = _3236 * (_3212 ? _3221 : (_3221 + (cbSceneParam._m0[72u].w * _3195)));
        _3239 = _3236 * (_3212 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3197)));
        _3240 = _3229 * 0.999000012874603271484375;
        _3250 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3250)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3240) < 0.5)
            {
                _3406 = true;
                break;
            }
        }
        uint _3347 = _1005 + uint(_3209.w);
        if ((cbInstanceData._m0[_3347].w < 1.0) && ((cbInstanceData._m0[_3347].w + _3240) < 0.5))
        {
            _3406 = true;
            break;
        }
        if ((_3233 + 1.0) < _3231.x)
        {
            _3406 = true;
            break;
        }
        _3406 = false;
        break;
    }
    float _3610;
    if (_3406)
    {
        discard_state = true;
        _3610 = 0.0;
    }
    else
    {
        _3610 = cbInstanceData._m0[_3094].w;
    }
    SV_Target.x = _3237;
    SV_Target.y = _3238;
    SV_Target.z = _3239;
    SV_Target.w = _3610;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3094].w;
    discard_exit();
}


