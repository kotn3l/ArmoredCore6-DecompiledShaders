#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1230;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3534 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3545 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3556 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = _321.x * cbMtdParam._m0[11u].x;
    float _327 = _321.y * cbMtdParam._m0[11u].y;
    float _328 = _321.z * cbMtdParam._m0[11u].z;
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].z) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3567 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _437 = (_430 * ((_347.x * cbMtdParam._m0[12u].x) - _326)) + _326;
    float _438 = (_430 * ((_347.y * cbMtdParam._m0[12u].y) - _327)) + _327;
    float _439 = (_430 * ((_347.z * cbMtdParam._m0[12u].z) - _328)) + _328;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) + _449;
    vec4 _477 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _283) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _284) + cbTextureTilingScale._m0[14u].w));
    vec4 _497 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _522 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _539 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _543 = _539.z;
    float _552 = ((_522.z - _543) * _430) + _543;
    float _555 = ((((_522.x - _541) * _430) + _541) * 2.0) + (-1.0);
    float _556 = ((((_522.y - _542) * _430) + _542) * 2.0) + (-1.0);
    float _557 = dot(vec2(_555, _556), vec2(_555, _556));
    float _3578 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _562 = sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _603 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _283) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _284) + cbTextureTilingScale._m0[11u].w));
    float _605 = _603.x;
    float _606 = 1.0 - _605;
    float _619 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_605 - _606) * cbMtdParam._m0[24u].w) + _606) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3589 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _627 = (_620 * ((_477.x * cbMtdParam._m0[18u].x) - _456)) + _456;
    float _628 = (_620 * ((_477.y * cbMtdParam._m0[18u].y) - _457)) + _457;
    float _629 = (_620 * ((_477.z * cbMtdParam._m0[18u].z) - _458)) + _458;
    float _634 = (((_497.z - _552) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _552;
    float _638 = ((_578.z - _634) * cbMtdParam._m0[19u].w) + _634;
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _283) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _284) + cbTextureTilingScale._m0[15u].w));
    float _658 = (_651.x * 2.0) + (-1.0);
    float _659 = (_651.y * 2.0) + (-1.0);
    float _660 = dot(vec2(_658, _659), vec2(_658, _659));
    float _3600 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _668 = (_620 * (_651.z - _638)) + _638;
    float _677 = (_555 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_497.x * 2.0) + (-1.0)))) + (((_578.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _678 = (_556 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_497.y * 2.0) + (-1.0)))) + (((_578.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _690 = (((_658 - _677) + (cbMtdParam._m0[21u].x * _677)) * _620) + _677;
    float _691 = (((_659 - _678) + (cbMtdParam._m0[21u].x * _678)) * _620) + _678;
    float _692 = (_620 * (sqrt(1.0 - (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) - _562)) + _562;
    float _694 = cbMtdParam._m0[22u].x + _578.w;
    float _697 = fma(_692, _230 * NORMAL.x, fma(_691, _237 * TANGENT.x, (_223 * _215) * _690));
    float _700 = fma(_692, _230 * NORMAL.y, fma(_691, _237 * TANGENT.y, (_223 * _216) * _690));
    float _703 = fma(_692, _230 * NORMAL.z, fma(_691, _237 * TANGENT.z, (_223 * _217) * _690));
    float _707 = inversesqrt(dot(vec3(_697, _700, _703), vec3(_697, _700, _703)));
    float _708 = _707 * _697;
    float _709 = _707 * _700;
    float _710 = _707 * _703;
    float _3611 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _711 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _3633 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3644 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3655 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _781 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _771);
    float _782 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _771);
    float _783 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _771);
    float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
    float _788 = _781 * _787;
    float _789 = _782 * _787;
    float _790 = _783 * _787;
    float _796 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _797 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _815 = fma(_710, cbSceneParam._m0[5u].z, fma(_709, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _708));
    float _818 = fma(_710, cbSceneParam._m0[6u].z, fma(_709, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _708));
    float _821 = fma(_710, cbSceneParam._m0[7u].z, fma(_709, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _708));
    uint _835 = (_264 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _841 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * cbInstanceData._m0[_835].x;
    float _842 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_835].y;
    float _843 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * cbInstanceData._m0[_835].z;
    float _3666 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    vec4 _855 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _796, cbSceneParam._m0[86u].y * _797));
    float _859 = ((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * TEXCOORD_5.w) * _855.x;
    float _860 = dot(vec3(_708, _709, _710), vec3(_788, _789, _790));
    float _863 = _860 * 2.0;
    float _867 = (_863 * _708) - _788;
    float _868 = (_863 * _709) - _789;
    float _869 = (_863 * _710) - _790;
    float _873 = abs(dot(vec3(_788, _789, _790), vec3(_708, _709, _710)));
    float _3699 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _875 = sqrt(_711);
    float _888 = exp2((_875 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_875 * 3.0));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1229;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _954 = fma(_928, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920));
        float _958 = fma(_928, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920));
        float _962 = fma(_928, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920));
        float _987 = _920 + _708;
        float _988 = _924 + _709;
        float _989 = _928 + _710;
        float _999 = fma(_989, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987)) - _954;
        float _1000 = fma(_989, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987)) - _958;
        float _1001 = fma(_989, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987)) - _962;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_954 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_958 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[34u].z) + ((((((_962 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1057 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1023.x + (-0.5));
        float _1059 = _1057 * (_1023.y + (-0.5));
        float _1060 = _1057 * (_1023.z + (-0.5));
        float _1067 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1030.x + (-0.5));
        float _1069 = _1067 * (_1030.y + (-0.5));
        float _1070 = _1067 * (_1030.z + (-0.5));
        float _1077 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1037.x + (-0.5));
        float _1079 = _1077 * (_1037.y + (-0.5));
        float _1080 = _1077 * (_1037.z + (-0.5));
        float _1087 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1044.x + (-0.5));
        float _1089 = _1087 * (_1044.y + (-0.5));
        float _1090 = _1087 * (_1044.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1111 = (dot(vec3(_708, _709, _710), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1121 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3747 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1123 + 1.0))) + _1128) * _1091;
        float _1138 = _1059 * 0.5;
        float _1139 = _1069 * 0.5;
        float _1140 = _1079 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_708, _709, _710), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3780 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1165 + 1.0))) + _1170) * _1092;
        float _1180 = _1060 * 0.5;
        float _1181 = _1070 * 0.5;
        float _1182 = _1080 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_708, _709, _710), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3813 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1207 + 1.0))) + _1212) * _1093;
        _1229 = _1060;
        _1231 = _1059;
        _1232 = _1058;
        _1233 = _1070;
        _1234 = _1069;
        _1235 = _1068;
        _1236 = _1080;
        _1237 = _1079;
        _1238 = _1078;
        _1239 = _1093;
        _1240 = _1092;
        _1241 = _1091;
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _1230;
        _1231 = _1230;
        _1232 = _1230;
        _1233 = _1230;
        _1234 = _1230;
        _1235 = _1230;
        _1236 = _1230;
        _1237 = _1230;
        _1238 = _1230;
        _1239 = _1230;
        _1240 = _1230;
        _1241 = _1230;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1269 = fma(_928, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920));
        float _1273 = fma(_928, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920));
        float _1277 = fma(_928, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920));
        float _1300 = _920 + _708;
        float _1301 = _924 + _709;
        float _1302 = _928 + _710;
        float _1312 = fma(_1302, cbModelParam._m0[30u].z, fma(_1301, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1300)) - _1269;
        float _1313 = fma(_1302, cbModelParam._m0[31u].z, fma(_1301, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1300)) - _1273;
        float _1314 = fma(_1302, cbModelParam._m0[32u].z, fma(_1301, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1300)) - _1277;
        float _1318 = inversesqrt(dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314)));
        float _1331 = ((_1318 * _1312) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1269 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1318 * _1313) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1273 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1318 * _1314) / cbModelParam._m0[35u].z) + ((((((_1277 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        float _1368 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1335.x + (-0.5));
        float _1370 = _1368 * (_1335.y + (-0.5));
        float _1371 = _1368 * (_1335.z + (-0.5));
        float _1378 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1342.x + (-0.5));
        float _1380 = _1378 * (_1342.y + (-0.5));
        float _1381 = _1378 * (_1342.z + (-0.5));
        float _1388 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1349.x + (-0.5));
        float _1390 = _1388 * (_1349.y + (-0.5));
        float _1391 = _1388 * (_1349.z + (-0.5));
        float _1398 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1356.x + (-0.5));
        float _1400 = _1398 * (_1356.y + (-0.5));
        float _1401 = _1398 * (_1356.z + (-0.5));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = _1369 * 0.5;
        float _1406 = _1379 * 0.5;
        float _1407 = _1389 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_708, _709, _710), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3876 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1432 + 1.0))) + _1437) * _1402;
        float _1447 = _1370 * 0.5;
        float _1448 = _1380 * 0.5;
        float _1449 = _1390 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_708, _709, _710), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3909 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1474 + 1.0))) + _1479) * _1403;
        float _1489 = _1371 * 0.5;
        float _1490 = _1381 * 0.5;
        float _1491 = _1391 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_708, _709, _710), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _3942 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1516 + 1.0))) + _1521) * _1404;
        _1538 = _1371;
        _1539 = _1370;
        _1540 = _1369;
        _1541 = _1381;
        _1542 = _1380;
        _1543 = _1379;
        _1544 = _1391;
        _1545 = _1390;
        _1546 = _1389;
        _1547 = _1404;
        _1548 = _1403;
        _1549 = _1402;
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
    }
    else
    {
        _1538 = _1230;
        _1539 = _1230;
        _1540 = _1230;
        _1541 = _1230;
        _1542 = _1230;
        _1543 = _1230;
        _1544 = _1230;
        _1545 = _1230;
        _1546 = _1230;
        _1547 = _1230;
        _1548 = _1230;
        _1549 = _1230;
        _1550 = 0.0;
        _1551 = 0.0;
        _1552 = 0.0;
    }
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1242)) + _1242;
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1243)) + _1243;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1244)) + _1244;
    float _1585 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1563, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1563, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1563, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1562));
    float _1606 = _867 * 0.5;
    float _1607 = _868 * 0.5;
    float _1608 = _869 * 0.5;
    float _1609 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1612 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1615 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1649;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1622 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1229, _1233, _1236, _1239));
        float _1626 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1231, _1234, _1237, _1240));
        float _1630 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1637 = dot(vec4(cbModelParam._m0[39u]), vec4(_1606, _1607, _1608, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1637) ? 0.0 : (isnan(0.0) ? _1637 : max(0.0, _1637))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1660;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1651 = dot(vec4(cbModelParam._m0[40u]), vec4(_1606, _1607, _1608, 1.0));
        _1660 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1651) ? 0.0 : (isnan(0.0) ? _1651 : max(0.0, _1651))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1660 = 1.0;
    }
    float _1664 = (_1660 * cbModelParam._m0[1u].x) + (_1649 * (1.0 - cbModelParam._m0[1u].x));
    float _1674 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _711);
    float _1675 = isnan(_1674) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1674 : min(cbModelParam._m0[25u].z, _1674));
    float _1755;
    float _1757;
    float _1759;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1722 = fma(_928, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920)) + cbModelParam._m0[13u].w;
        float _1726 = fma(_928, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920)) + cbModelParam._m0[14u].w;
        float _1730 = fma(_928, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920)) + cbModelParam._m0[15u].w;
        float _1733 = fma(_869, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867));
        float _1736 = fma(_869, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867));
        float _1739 = fma(_869, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867));
        float _1767;
        if (_1733 > 0.0)
        {
            _1767 = abs((1.0 - _1722) / _1733);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1722 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1767 = frontier_phi_14_12_ladder;
        }
        float _1967;
        if (_1736 > 0.0)
        {
            _1967 = abs((1.0 - _1726) / _1736);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1726 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1967 = frontier_phi_23_19_ladder;
        }
        float _2210;
        if (_1739 > 0.0)
        {
            _2210 = abs((1.0 - _1730) / _1739);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1730 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2210 = frontier_phi_35_30_ladder;
        }
        float _2212 = isnan(_1967) ? _1767 : (isnan(_1767) ? _1967 : min(_1767, _1967));
        float _2213 = isnan(_2210) ? _2212 : (isnan(_2212) ? _2210 : min(_2212, _2210));
        float _2217 = (_2213 * _1733) + _1722;
        float _2218 = (_2213 * _1736) + _1726;
        float _2219 = (_2213 * _1739) + _1730;
        float _2220 = _2213 * 9.9999997473787516355514526367188e-05;
        float _2222 = (-1.0) - _2220;
        float _2224 = _2220 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2219 > _2224) || ((_2219 < _2222) || ((_2218 > _2224) || ((_2218 < _2222) || ((_2217 < _2222) || (_2217 > _2224))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2343 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2219, cbModelParam._m0[9u].z, fma(_2218, cbModelParam._m0[9u].y, _2217 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2219, cbModelParam._m0[10u].z, fma(_2218, cbModelParam._m0[10u].y, _2217 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2219, cbModelParam._m0[11u].z, fma(_2218, cbModelParam._m0[11u].y, _2217 * cbModelParam._m0[11u].x))), _1675);
            frontier_phi_13_35_ladder = _2343.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2343.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2343.x * cbModelParam._m0[1u].y;
        }
        _1755 = frontier_phi_13_35_ladder_2;
        _1757 = frontier_phi_13_35_ladder_1;
        _1759 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_867, _868, _869), _1675);
        _1755 = _1743.x * cbModelParam._m0[1u].y;
        _1757 = _1743.y * cbModelParam._m0[1u].y;
        _1759 = _1743.z * cbModelParam._m0[1u].y;
    }
    float _1763 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _711);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1763 : min(cbModelParam._m0[25u].w, _1763));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1817 = fma(_928, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920)) + cbModelParam._m0[21u].w;
        float _1821 = fma(_928, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920)) + cbModelParam._m0[22u].w;
        float _1825 = fma(_928, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920)) + cbModelParam._m0[23u].w;
        float _1828 = fma(_869, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867));
        float _1831 = fma(_869, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867));
        float _1834 = fma(_869, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867));
        float _1972;
        if (_1828 > 0.0)
        {
            _1972 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1972 = frontier_phi_25_21_ladder;
        }
        float _2237;
        if (_1831 > 0.0)
        {
            _2237 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2237 = frontier_phi_37_32_ladder;
        }
        float _2442;
        if (_1834 > 0.0)
        {
            _2442 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2442 = frontier_phi_46_43_ladder;
        }
        float _2444 = isnan(_2237) ? _1972 : (isnan(_1972) ? _2237 : min(_1972, _2237));
        float _2445 = isnan(_2442) ? _2444 : (isnan(_2444) ? _2442 : min(_2444, _2442));
        float _2449 = (_2445 * _1828) + _1817;
        float _2450 = (_2445 * _1831) + _1821;
        float _2451 = (_2445 * _1834) + _1825;
        float _2452 = _2445 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2452;
        float _2455 = _2452 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2451 > _2455) || ((_2451 < _2453) || ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 < _2453) || (_2449 > _2455))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2451, cbModelParam._m0[17u].z, fma(_2450, cbModelParam._m0[17u].y, _2449 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2451, cbModelParam._m0[18u].z, fma(_2450, cbModelParam._m0[18u].y, _2449 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2451, cbModelParam._m0[19u].z, fma(_2450, cbModelParam._m0[19u].y, _2449 * cbModelParam._m0[19u].x))), _1764);
            frontier_phi_22_46_ladder = _2650.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2650.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2650.x * cbModelParam._m0[1u].z;
        }
        _1853 = frontier_phi_22_46_ladder_2;
        _1855 = frontier_phi_22_46_ladder_1;
        _1857 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_867, _868, _869), _1764);
        _1853 = _1837.x * cbModelParam._m0[1u].z;
        _1855 = _1837.y * cbModelParam._m0[1u].z;
        _1857 = _1837.z * cbModelParam._m0[1u].z;
    }
    float _1869 = ((((1.0 - _888) * ((_875 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_888 * _875)) * _859;
    float _1870 = _1869 * ((cbModelParam._m0[1u].w * (_1853 - _1755)) + _1755);
    float _1871 = _1869 * ((cbModelParam._m0[1u].w * (_1855 - _1757)) + _1757);
    float _1872 = _1869 * ((cbModelParam._m0[1u].w * (_1857 - _1759)) + _1759);
    float _1875 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1870 * cbSceneParam._m0[89u].x));
    float _1878 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1870 * cbSceneParam._m0[90u].x));
    float _1881 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, _1870 * cbSceneParam._m0[91u].x));
    uvec4 _1891 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _1893 = _1891.x * 14u;
    uint _1894 = _1893 + 13u;
    float _1901 = _859 + (-1.0);
    float _1906 = (cbLight._m0[_1894].x * _1901) + 1.0;
    float _1907 = (cbLight._m0[_1894].y * _1901) + 1.0;
    float _1908 = (cbLight._m0[_1894].z * _1901) + 1.0;
    float _1909 = (cbLight._m0[_1894].w * _1901) + 1.0;
    uint _1910 = _1893 + 5u;
    float _1916 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1920 = _1893 + 4u;
    float _1926 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1930 = _1893 | 1u;
    float _1941 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_708, _709, _710));
    float _1944 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_708, _709, _710));
    float _4078 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _4089 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1949 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.3183098733425140380859375;
    float _1951 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.3183098733425140380859375;
    float _1958 = ((cbLight._m0[_1910].x * _1916) * _1951) + ((cbLight._m0[_1920].x * _1926) * _1949);
    float _1959 = ((_1916 * cbLight._m0[_1910].y) * _1951) + ((_1926 * cbLight._m0[_1920].y) * _1949);
    float _1960 = ((_1916 * cbLight._m0[_1910].z) * _1951) + ((_1926 * cbLight._m0[_1920].z) * _1949);
    uvec4 _1964 = floatBitsToUint(cbLight._m0[_1893 + 12u]);
    bool _1966 = _1964.x == 0u;
    float _1977;
    float _1979;
    float _1981;
    if (_1966)
    {
        _1977 = _1958;
        _1979 = _1959;
        _1981 = _1960;
    }
    else
    {
        uint _1985 = _1893 + 6u;
        float _2001 = (dot(vec3(cbLight._m0[_1893 + 2u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2002 = _2001 * _2001;
        float _4100 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2003 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2004 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _1977 = (((cbLight._m0[_1985].x * 0.3183098733425140380859375) * _2003) * _2004) + _1958;
        _1979 = (((cbLight._m0[_1985].y * 0.3183098733425140380859375) * _2003) * _2004) + _1959;
        _1981 = (((cbLight._m0[_1985].z * 0.3183098733425140380859375) * _2003) * _2004) + _1960;
    }
    bool _1984 = _1964.y == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_1984)
    {
        _2022 = _1977;
        _2024 = _1979;
        _2026 = _1981;
    }
    else
    {
        uint _2181 = _1893 + 7u;
        float _2197 = (dot(vec3(cbLight._m0[_1893 + 3u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2198 = _2197 * _2197;
        float _4116 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2199 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2200 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2022 = (((cbLight._m0[_2181].x * 0.3183098733425140380859375) * _2199) * _2200) + _1977;
        _2024 = (((cbLight._m0[_2181].y * 0.3183098733425140380859375) * _2199) * _2200) + _1979;
        _2026 = (((cbLight._m0[_2181].z * 0.3183098733425140380859375) * _2199) * _2200) + _1981;
    }
    uint _2029 = _1893 + 8u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _711) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1893].x + _788;
    float _2045 = cbLight._m0[_1893].y + _789;
    float _2046 = cbLight._m0[_1893].z + _790;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_1893].xyz));
    float _4132 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _2058 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2059 = dot(vec3(_708, _709, _710), vec3(_2051, _2052, _2053));
    float _4154 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2051, _2052, _2053));
    float _4165 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2043 * _2043;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2082 = (exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2083 = 1.0 - _2043;
    float _2094 = (0.5 / (((_2058 * ((_2057 * _2083) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2083) + _2043) * _2057))) * _2057;
    float _4176 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2096 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    uint _2107 = _1893 + 9u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _711) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_1930].x + _788;
    float _2121 = cbLight._m0[_1930].y + _789;
    float _2122 = cbLight._m0[_1930].z + _790;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_1930].xyz));
    float _4187 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2134 = dot(vec3(_708, _709, _710), vec3(_2127, _2128, _2129));
    float _4198 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2138 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2127, _2128, _2129));
    float _4209 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2142 = _2119 * _2119;
    float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
    float _2155 = (exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2156 = 1.0 - _2119;
    float _2166 = (0.5 / (((_2058 * ((_2133 * _2156) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2156) + _2119) * _2133))) * _2133;
    float _4220 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
    float _2178 = (((_2155 * cbLight._m0[_2107].x) * _2168) * _1916) + (((_2082 * cbLight._m0[_2029].x) * _2096) * _1926);
    float _2179 = (((_2155 * cbLight._m0[_2107].y) * _2168) * _1916) + (((_2082 * cbLight._m0[_2029].y) * _2096) * _1926);
    float _2180 = (((_2155 * cbLight._m0[_2107].z) * _2168) * _1916) + (((_2082 * cbLight._m0[_2029].z) * _2096) * _1926);
    float _2242;
    float _2244;
    float _2246;
    if (_1966)
    {
        _2242 = _2178;
        _2244 = _2179;
        _2246 = _2180;
    }
    else
    {
        uint _2248 = _1893 + 2u;
        uint _2252 = _1893 + 10u;
        float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _711) * 0.949999988079071044921875);
        float _2267 = _2266 * _2266;
        float _2268 = cbLight._m0[_2248].x + _788;
        float _2269 = cbLight._m0[_2248].y + _789;
        float _2270 = cbLight._m0[_2248].z + _790;
        float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
        float _2275 = _2274 * _2268;
        float _2276 = _2274 * _2269;
        float _2277 = _2274 * _2270;
        float _2278 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2248].xyz));
        float _4231 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2282 = dot(vec3(_708, _709, _710), vec3(_2275, _2276, _2277));
        float _4242 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2286 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2275, _2276, _2277));
        float _4253 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2290 = _2267 * _2267;
        float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
        float _2303 = (exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2304 = 1.0 - _2267;
        float _2314 = (0.5 / (((_2058 * ((_2281 * _2304) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2304) + _2267) * _2281))) * _2281;
        float _4264 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2316 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
        float _2317 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2242 = (((_2303 * cbLight._m0[_2252].x) * _2316) * _2317) + _2178;
        _2244 = (((_2303 * cbLight._m0[_2252].y) * _2316) * _2317) + _2179;
        _2246 = (((_2303 * cbLight._m0[_2252].z) * _2316) * _2317) + _2180;
    }
    float _2352;
    float _2354;
    float _2356;
    if (_1984)
    {
        _2352 = _2242;
        _2354 = _2244;
        _2356 = _2246;
    }
    else
    {
        uint _2363 = _1893 + 3u;
        uint _2367 = _1893 + 11u;
        float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2363].w)) * _711) * 0.949999988079071044921875);
        float _2382 = _2381 * _2381;
        float _2383 = cbLight._m0[_2363].x + _788;
        float _2384 = cbLight._m0[_2363].y + _789;
        float _2385 = cbLight._m0[_2363].z + _790;
        float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
        float _2390 = _2389 * _2383;
        float _2391 = _2389 * _2384;
        float _2392 = _2389 * _2385;
        float _2393 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2363].xyz));
        float _4280 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2397 = dot(vec3(_708, _709, _710), vec3(_2390, _2391, _2392));
        float _4291 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2401 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_2390, _2391, _2392));
        float _4302 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2405 = _2382 * _2382;
        float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
        float _2418 = (exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2419 = 1.0 - _2382;
        float _2429 = (0.5 / (((_2058 * ((_2396 * _2419) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2419) + _2382) * _2396))) * _2396;
        float _4313 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2431 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
        float _2432 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2352 = (((_2418 * cbLight._m0[_2367].x) * _2431) * _2432) + _2242;
        _2354 = (((_2418 * cbLight._m0[_2367].y) * _2431) * _2432) + _2244;
        _2356 = (((_2418 * cbLight._m0[_2367].z) * _2431) * _2432) + _2246;
    }
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    if (_1891.y == 0u)
    {
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2507;
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2507;
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2507;
        uvec4 _2522 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2523 = _2522.x;
        uint _2534 = uint((float(_2522.y) * floor(float(uint(cbSceneParam._m0[85u].y * _797) / _2523))) + floor(float(uint(cbSceneParam._m0[85u].x * _796) / _2523)));
        float _2544 = (log2(_2510 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2545 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        uint _2548 = uint(isnan(14.0) ? _2545 : (isnan(_2545) ? 14.0 : min(_2545, 14.0)));
        uvec4 _2553 = texelFetch(g_lightClusterGridBuffer, int(((_2548 << 2u) + (_2534 << 6u)) >> 2u));
        uint _2554 = _2553.x;
        uint _2555 = _2522.z;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        if (((((1u << ((_2555 >> 4u) & 15u)) + 4294967295u) & _2554) == 0u) || ((_2555 & 240u) == 0u))
        {
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
        }
        else
        {
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            uint _2806 = 0u;
            uint _2815;
            bool _2816;
            for (;;)
            {
                _2815 = texelFetch(g_lightClassification, int((((_2548 << 5u) + (_2534 << 9u)) + (_2806 << 2u)) >> 2u)).x;
                _2816 = _2815 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2816)
                {
                    frontier_phi_61_pred = _2800;
                    frontier_phi_61_pred_1 = _2805;
                    frontier_phi_61_pred_2 = _2804;
                    frontier_phi_61_pred_3 = _2803;
                    frontier_phi_61_pred_4 = _2802;
                    frontier_phi_61_pred_5 = _2801;
                }
                else
                {
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    uint _2930;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2815;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    for (;;)
                    {
                        uint _2934 = uint(findLSB(_2930)) + (_2806 << 5u);
                        uint _2931 = (_2930 + 4294967295u) & _2930;
                        uint _2936 = _2934 * 48u;
                        vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2956 = (_2934 * 48u) + 4u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 3u)).x));
                        uint _2975 = (_2934 * 48u) + 8u;
                        vec3 _2986 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x));
                        float _2990 = _2950.x - _2508;
                        float _2991 = _2950.y - _2509;
                        float _2992 = _2950.z - _2510;
                        float _2993 = dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992));
                        float _2996 = inversesqrt(_2993);
                        float _2997 = _2996 * _2990;
                        float _2998 = _2996 * _2991;
                        float _2999 = _2996 * _2992;
                        float _3000 = dot(vec3(_815, _818, _821), vec3(_2997, _2998, _2999));
                        float _3005 = 1.0 - (_2993 * _2950.w);
                        float _4339 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3006 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3007 = sqrt(_2993) * _2969.w;
                        float _3010 = 1.39999997615814208984375 / (_3007 + 1.39999997615814208984375);
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _3000) + _3011;
                        float _3017 = _3007 * _3007;
                        float _3021 = ((isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))) * _3006) / ((_3017 * 0.699999988079071044921875) + 1.0);
                        float _3025 = (-0.0) - _2508;
                        float _3026 = (-0.0) - _2509;
                        float _3027 = (-0.0) - _2510;
                        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                        float _3032 = _3031 * _3025;
                        float _3033 = _3031 * _3026;
                        float _3034 = _3031 * _3027;
                        float _3042 = exp2(log2(1.0 / ((_3017 * 3.5) + 5.0)) * 0.25);
                        float _3043 = 1.0 - _875;
                        float _3050 = sqrt(1.0 - ((1.0 - (_3043 * _3043)) * (1.0 - (_3042 * _3042))));
                        float _3051 = _3050 * _3050;
                        float _3052 = _3051 * _3051;
                        float _3053 = _3032 + _2997;
                        float _3054 = _3033 + _2998;
                        float _3055 = _3034 + _2999;
                        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                        float _3063 = dot(vec3(_815, _818, _821), vec3(_3032, _3033, _3034));
                        float _4355 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3066 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3067 = dot(vec3(_815, _818, _821), vec3(_3059 * _3053, _3059 * _3054, _3059 * _3055));
                        float _4366 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3070 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3074 = ((_3070 * _3070) * (_3052 + (-1.0))) + 1.0;
                        float _3075 = _3010 * _3051;
                        float _3076 = _3075 * _3075;
                        float _3079 = ((1.0 - _3076) * _3000) + _3076;
                        float _4377 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3080 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3081 = 1.0 - _3051;
                        float _3091 = (0.5 / (((_3080 * ((_3066 * _3081) + _3051)) + 9.9999999392252902907785028219223e-09) + (((_3080 * _3081) + _3051) * _3066))) * _3080;
                        float _4388 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3102 = (((_3052 * 3.1415927410125732421875) * (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) / ((_3074 * _3074) * ((_3017 * 2.1991131305694580078125) + 3.141590118408203125))) * _3006;
                        _2859 = (_3021 * _2969.x) + _2927;
                        _2860 = (_3021 * _2969.y) + _2928;
                        _2861 = (_3021 * _2969.z) + _2929;
                        _2856 = (_3102 * _2986.x) + _2924;
                        _2857 = (_3102 * _2986.y) + _2925;
                        _2858 = (_3102 * _2986.z) + _2926;
                        if (_2931 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2931;
                        }
                    }
                    frontier_phi_61_pred = _2856;
                    frontier_phi_61_pred_1 = _2861;
                    frontier_phi_61_pred_2 = _2860;
                    frontier_phi_61_pred_3 = _2859;
                    frontier_phi_61_pred_4 = _2858;
                    frontier_phi_61_pred_5 = _2857;
                }
                _2656 = frontier_phi_61_pred;
                _2666 = frontier_phi_61_pred_1;
                _2664 = frontier_phi_61_pred_2;
                _2662 = frontier_phi_61_pred_3;
                _2660 = frontier_phi_61_pred_4;
                _2658 = frontier_phi_61_pred_5;
                uint _2807 = _2806 + 1u;
                if (_2807 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2800 = _2656;
                    _2801 = _2658;
                    _2802 = _2660;
                    _2803 = _2662;
                    _2804 = _2664;
                    _2805 = _2666;
                    _2806 = _2807;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
        }
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.z;
        uint _2672 = (_2670 >> 8u) & 15u;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        if (((4294967295u << _2672) & _2554) == 0u)
        {
            _2768 = _2655;
            _2770 = _2657;
            _2772 = _2659;
            _2774 = _2661;
            _2776 = _2663;
            _2778 = _2665;
        }
        else
        {
            float _2793 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
            float _2794 = _2793 * _2508;
            float _2795 = _2793 * _2509;
            float _2796 = _2793 * _2510;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2672 < ((_2670 >> 12u) & 15u))
            {
                float _2769;
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2907 = _2655;
                float _2908 = _2657;
                float _2909 = _2659;
                float _2910 = _2661;
                float _2911 = _2663;
                float _2912 = _2665;
                uint _2913 = _2672;
                uint _2922;
                bool _2923;
                for (;;)
                {
                    _2922 = texelFetch(g_lightClassification, int((((_2548 << 5u) + (_2534 << 9u)) + (_2913 << 2u)) >> 2u)).x;
                    _2923 = _2922 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2923)
                    {
                        frontier_phi_67_pred = _2910;
                        frontier_phi_67_pred_1 = _2911;
                        frontier_phi_67_pred_2 = _2912;
                        frontier_phi_67_pred_3 = _2909;
                        frontier_phi_67_pred_4 = _2908;
                        frontier_phi_67_pred_5 = _2907;
                    }
                    else
                    {
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3120 = _2907;
                        float _3121 = _2908;
                        float _3122 = _2909;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        float _3125 = _2912;
                        uint _3126 = _2922;
                        uint _3127;
                        vec4 _3152;
                        float _3153;
                        vec4 _3168;
                        vec3 _3180;
                        vec4 _3195;
                        vec4 _3210;
                        float _3256;
                        bool _3257;
                        for (;;)
                        {
                            uint _3137 = ((_2913 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3126));
                            _3127 = (_3126 + 4294967295u) & _3126;
                            uint _3139 = _3137 * 40u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            _3153 = _3152.w;
                            uint _3155 = (_3137 * 40u) + 4u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3170 = (_3137 * 40u) + 8u;
                            _3180 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x));
                            uint _3182 = (_3137 * 40u) + 16u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3137 * 40u) + 20u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3212 = (_3137 * 40u) + 24u;
                            vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3231 = (_3137 * 40u) + 28u;
                            vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            _3256 = fma(_2510, _3244.z, fma(_2509, _3244.y, _3244.x * _2508)) + _3244.w;
                            _3257 = !((fma(_2510, _3225.z, fma(_2509, _3225.y, _3225.x * _2508)) + _3225.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3257)
                            {
                                float _3284 = _3152.x - _2508;
                                float _3285 = _3152.y - _2509;
                                float _3286 = _3152.z - _2510;
                                float _3287 = dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286));
                                float _3290 = inversesqrt(_3287);
                                float _3291 = _3290 * _3284;
                                float _3292 = _3290 * _3285;
                                float _3293 = _3290 * _3286;
                                float _3297 = 1.0 - (_3287 / (_3153 * _3153));
                                float _4399 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3302 = sqrt(_3287) * _3168.w;
                                float _3304 = 1.39999997615814208984375 / (_3302 + 1.39999997615814208984375);
                                float _3305 = _3304 * _3304;
                                float _3308 = ((1.0 - _3305) * dot(vec3(_3291, _3292, _3293), vec3(_815, _818, _821))) + _3305;
                                float _3311 = _3302 * _3302;
                                float _3315 = (fma(_2510, _3195.z, fma(_2509, _3195.y, _3195.x * _2508)) + _3195.w) / _3256;
                                float _3316 = (fma(_2510, _3210.z, fma(_2509, _3210.y, _3210.x * _2508)) + _3210.w) / _3256;
                                float _3320 = 1.0 - dot(vec2(_3315, _3316), vec2(_3315, _3316));
                                float _4415 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3322 = _3321 * (((isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0))) * _3298) / ((_3311 * 0.699999988079071044921875) + 1.0));
                                float _3334 = exp2(log2(1.0 / ((_3311 * 3.5) + 5.0)) * 0.25);
                                float _3335 = 1.0 - _875;
                                float _3342 = sqrt(1.0 - ((1.0 - (_3335 * _3335)) * (1.0 - (_3334 * _3334))));
                                float _3343 = _3342 * _3342;
                                float _3344 = _3343 * _3343;
                                float _3345 = _3291 - _2794;
                                float _3346 = _3292 - _2795;
                                float _3347 = _3293 - _2796;
                                float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                                float _3355 = dot(vec3(_815, _818, _821), vec3((-0.0) - _2794, (-0.0) - _2795, (-0.0) - _2796));
                                float _4426 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3359 = dot(vec3(_815, _818, _821), vec3(_3351 * _3345, _3351 * _3346, _3351 * _3347));
                                float _4437 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3366 = ((_3362 * _3362) * (_3344 + (-1.0))) + 1.0;
                                float _3367 = _3304 * _3343;
                                float _3368 = _3367 * _3367;
                                float _3374 = ((1.0 - _3368) * dot(vec3(_815, _818, _821), vec3(_3291, _3292, _3293))) + _3368;
                                float _4448 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3376 = 1.0 - _3343;
                                float _3386 = (0.5 / (((_3375 * ((_3358 * _3376) + _3343)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3343) * _3358))) * _3375;
                                float _4459 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3396 = (_3321 * _3298) * (((_3344 * 3.1415927410125732421875) * (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) / ((_3366 * _3366) * ((_3311 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3396 * _3180.x;
                                frontier_phi_73_pred_1 = _3396 * _3180.y;
                                frontier_phi_73_pred_2 = _3322 * _3168.z;
                                frontier_phi_73_pred_3 = _3322 * _3168.y;
                                frontier_phi_73_pred_4 = _3322 * _3168.x;
                                frontier_phi_73_pred_5 = _3396 * _3180.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3400 = frontier_phi_73_pred;
                            _3401 = frontier_phi_73_pred_1;
                            _3405 = frontier_phi_73_pred_2;
                            _3404 = frontier_phi_73_pred_3;
                            _3403 = frontier_phi_73_pred_4;
                            _3402 = frontier_phi_73_pred_5;
                            _3110 = _3403 + _3123;
                            _3111 = _3404 + _3124;
                            _3112 = _3405 + _3125;
                            _3107 = _3400 + _3120;
                            _3108 = _3401 + _3121;
                            _3109 = _3402 + _3122;
                            if (_3127 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3127;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3110;
                        frontier_phi_67_pred_1 = _3111;
                        frontier_phi_67_pred_2 = _3112;
                        frontier_phi_67_pred_3 = _3109;
                        frontier_phi_67_pred_4 = _3108;
                        frontier_phi_67_pred_5 = _3107;
                    }
                    _2775 = frontier_phi_67_pred;
                    _2777 = frontier_phi_67_pred_1;
                    _2779 = frontier_phi_67_pred_2;
                    _2773 = frontier_phi_67_pred_3;
                    _2771 = frontier_phi_67_pred_4;
                    _2769 = frontier_phi_67_pred_5;
                    uint _2914 = _2913 + 1u;
                    if (_2914 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2907 = _2769;
                        _2908 = _2771;
                        _2909 = _2773;
                        _2910 = _2775;
                        _2911 = _2777;
                        _2912 = _2779;
                        _2913 = _2914;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2777;
                frontier_phi_55_56_ladder_1 = _2779;
                frontier_phi_55_56_ladder_2 = _2775;
                frontier_phi_55_56_ladder_3 = _2773;
                frontier_phi_55_56_ladder_4 = _2771;
                frontier_phi_55_56_ladder_5 = _2769;
            }
            else
            {
                frontier_phi_55_56_ladder = _2663;
                frontier_phi_55_56_ladder_1 = _2665;
                frontier_phi_55_56_ladder_2 = _2661;
                frontier_phi_55_56_ladder_3 = _2659;
                frontier_phi_55_56_ladder_4 = _2657;
                frontier_phi_55_56_ladder_5 = _2655;
            }
            _2768 = frontier_phi_55_56_ladder_5;
            _2770 = frontier_phi_55_56_ladder_4;
            _2772 = frontier_phi_55_56_ladder_3;
            _2774 = frontier_phi_55_56_ladder_2;
            _2776 = frontier_phi_55_56_ladder;
            _2778 = frontier_phi_55_56_ladder_1;
        }
        float _2783 = isnan(1.0) ? _859 : (isnan(_859) ? 1.0 : min(_859, 1.0));
        _2567 = (_2783 * _2774) + _2022;
        _2569 = (_2783 * _2776) + _2024;
        _2571 = (_2783 * _2778) + _2026;
        _2573 = ((_2768 * 0.039999999105930328369140625) * _2783) + _2352;
        _2575 = ((_2770 * 0.039999999105930328369140625) * _2783) + _2354;
        _2577 = ((_2772 * 0.039999999105930328369140625) * _2783) + _2356;
    }
    else
    {
        _2567 = _2022;
        _2569 = _2024;
        _2571 = _2026;
        _2573 = _2352;
        _2575 = _2354;
        _2577 = _2356;
    }
    float _4475 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4486 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4497 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    uint _2597 = _264 + 6u;
    float _2605 = _796 / cbSceneParam._m0[86u].x;
    float _2606 = _797 / cbSceneParam._m0[86u].y;
    vec4 _2620 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2605, _2606, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2622 = _2620.x;
    float _2623 = _2620.y;
    float _2624 = _2620.z;
    float _2625 = _2620.w;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2680 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2681 = _2680 / _729;
        float _2692 = _2681 * _781;
        float _2693 = _782 * _2681;
        float _2694 = (-0.0) - _2693;
        float _2696 = _2681 * _783;
        float _2698 = (cbSceneParam._m0[77u].w * _2694) / _2680;
        float _2699 = _2698 + cbSceneParam._m0[79u].w;
        float _2700 = cbSceneParam._m0[79u].w - _2693;
        float _2706 = sqrt(((_2692 * _2692) + (_2693 * _2693)) + (_2696 * _2696));
        float _2709 = (1.0 - (cbSceneParam._m0[77u].w / _2680)) * _2706;
        float _2714 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2716 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2869;
        if (abs((_2694 - _2698) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2869 = ((((_2699 > 0.0) ? exp2(_2714 * _2699) : (2.0 - exp2(_2716 * _2699))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2709;
        }
        else
        {
            float _2829 = 1.0 / cbSceneParam._m0[80u].x;
            float _2830 = isnan(_2700) ? _2699 : (isnan(_2699) ? _2700 : max(_2699, _2700));
            float _2831 = isnan(_2700) ? _2699 : (isnan(_2699) ? _2700 : min(_2699, _2700));
            float _2840 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : min(_2830, 0.0));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            _2869 = ((abs(_2706 / _2694) * cbSceneParam._m0[80u].y) * ((((_2840 - _2841) * 2.0) - ((exp2(_2714 * (isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0)))) - exp2(_2714 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0))))) * _2829)) - ((exp2(_2716 * _2840) - exp2(_2716 * _2841)) * _2829))) + (_2709 * cbSceneParam._m0[80u].z);
        }
        vec4 _2871 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2605, _2606, 1.0), 0.0);
        float _2880 = exp2((_2869 * (-1.44269502162933349609375)) * (1.0 - _2871.w));
        float _2881 = log2(_2880);
        float _2897 = log2(_2625);
        _2718 = (exp2(_2897 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2881 * cbSceneParam._m0[78u].x)) * _2871.x) / cbSceneParam._m0[78u].x)) + _2622;
        _2720 = (exp2(_2897 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2881 * cbSceneParam._m0[78u].y)) * _2871.y) / cbSceneParam._m0[78u].y)) + _2623;
        _2722 = (exp2(_2897 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2881 * cbSceneParam._m0[78u].z)) * _2871.z) / cbSceneParam._m0[78u].z)) + _2624;
        _2724 = _2880 * _2625;
    }
    else
    {
        _2718 = _2622;
        _2720 = _2623;
        _2722 = _2624;
        _2724 = _2625;
    }
    float _2736 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2737 = _2736 == 3.0;
    float _2738 = log2(_2724);
    float _2745 = exp2(_2738 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2567 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _859))) + ((_2573 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _2746 = exp2(_2738 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2569 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _859))) + ((_2575 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _2747 = exp2(_2738 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2571 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _859))) + ((_2577 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _2756 = (_2736 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2756 * (_2737 ? _2745 : (_2745 + (cbSceneParam._m0[72u].w * _2718)));
    SV_Target.y = _2756 * (_2737 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2720)));
    SV_Target.z = _2756 * (_2737 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2722)));
    SV_Target.w = cbInstanceData._m0[_2597].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2597].w;
}


