#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1483;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3786 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3797 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3808 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _372 = _367.x * cbMtdParam._m0[11u].x;
    float _373 = _367.y * cbMtdParam._m0[11u].y;
    float _374 = _367.z * cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _461 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _478 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _412.x) * 2.0) - ((((_449 - _461) * cbMtdParam._m0[24u].z) + _461) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3819 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _486 = (_479 * ((_393.x * cbMtdParam._m0[12u].x) - _372)) + _372;
    float _487 = (_479 * ((_393.y * cbMtdParam._m0[12u].y) - _373)) + _373;
    float _488 = (_479 * ((_393.z * cbMtdParam._m0[12u].z) - _374)) + _374;
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _527 = _525.x;
    float _537 = dot(vec4(_527, _525.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _551 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _412.y) * 2.0) - ((((_527 - _537) * cbMtdParam._m0[24u].z) + _537) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3830 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _562 = (_341.x * cbMtdParam._m0[9u].x) * ((_552 * ((_505.x * cbMtdParam._m0[13u].x) - _486)) + _486);
    float _563 = (_341.y * cbMtdParam._m0[9u].y) * ((_552 * ((_505.y * cbMtdParam._m0[13u].y) - _487)) + _487);
    float _564 = (_341.z * cbMtdParam._m0[9u].z) * ((_552 * ((_505.z * cbMtdParam._m0[13u].z) - _488)) + _488);
    float _568 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _562;
    float _571 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _563;
    float _574 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _564;
    float _582 = (((_562 - _568) * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) + _568) * 4.55000019073486328125;
    float _584 = (((_563 - _571) * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) + _571) * 4.55000019073486328125;
    float _586 = (((_564 - _574) * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) + _574) * 4.55000019073486328125;
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _304) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _305) + cbTextureTilingScale._m0[14u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _666 = _664.x;
    float _667 = _664.y;
    float _668 = _664.z;
    float _675 = ((_647.x - _666) * _479) + _666;
    float _676 = ((_647.y - _667) * _479) + _667;
    float _677 = ((_647.z - _668) * _479) + _668;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _702 = ((_689.z - _677) * _552) + _677;
    float _705 = ((((_689.x - _675) * _552) + _675) * 2.0) + (-1.0);
    float _706 = ((((_689.y - _676) * _552) + _676) * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _3841 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _712 = sqrt(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))));
    vec4 _726 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _751 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _753 = _751.x;
    float _754 = 1.0 - _753;
    float _760 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _763 = ((isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : min(_760, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _772 = (_763 - ((((((_753 - _754) * cbMtdParam._m0[24u].w) + _754) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _763))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3862 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _773 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _780 = (_773 * ((_605.x * cbMtdParam._m0[18u].x) - _582)) + _582;
    float _781 = (_773 * ((_605.y * cbMtdParam._m0[18u].y) - _584)) + _584;
    float _782 = (_773 * ((_605.z * cbMtdParam._m0[18u].z) - _586)) + _586;
    vec4 _794 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _796 = _794.x;
    float _797 = 1.0 - _796;
    float _822 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_796 - _797) * cbMtdParam._m0[24u].y) + _797) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3873 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _823 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _831 = ((((cbMtdParam._m0[10u].x - _780) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _823) + _780;
    float _832 = ((((cbMtdParam._m0[10u].y - _781) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _823) + _781;
    float _833 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _782)) * _823) + _782;
    float _838 = (((_624.z - _702) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _702;
    float _842 = ((_726.z - _838) * cbMtdParam._m0[19u].w) + _838;
    vec4 _856 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _863 = (_856.x * 2.0) + (-1.0);
    float _864 = (_856.y * 2.0) + (-1.0);
    float _865 = dot(vec2(_863, _864), vec2(_863, _864));
    float _3884 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _873 = (_773 * (_856.z - _842)) + _842;
    float _876 = ((cbMtdParam._m0[23u].y - _873) * _823) + _873;
    vec4 _897 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _903 = (_897.x * 2.0) + (-1.0);
    float _904 = (_897.y * 2.0) + (-1.0);
    float _905 = dot(vec2(_903, _904), vec2(_903, _904));
    float _3895 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _919 = (_705 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_624.x * 2.0) + (-1.0)))) + (((_726.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _920 = (_706 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_624.y * 2.0) + (-1.0)))) + (((_726.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _932 = (((_863 - _919) + (cbMtdParam._m0[21u].x * _919)) * _773) + _919;
    float _933 = (((_864 - _920) + (cbMtdParam._m0[21u].x * _920)) * _773) + _920;
    float _934 = (_773 * (sqrt(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) - _712)) + _712;
    float _945 = (((_903 - _932) + (_932 * cbMtdParam._m0[22u].z)) * _823) + _932;
    float _946 = (((_904 - _933) + (_933 * cbMtdParam._m0[22u].z)) * _823) + _933;
    float _947 = ((sqrt(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) - _934) * _823) + _934;
    float _949 = cbMtdParam._m0[22u].x + _726.w;
    float _952 = fma(_947, _253 * NORMAL.x, fma(_946, _260 * TANGENT.x, (_246 * _238) * _945));
    float _955 = fma(_947, _253 * NORMAL.y, fma(_946, _260 * TANGENT.y, (_246 * _239) * _945));
    float _958 = fma(_947, _253 * NORMAL.z, fma(_946, _260 * TANGENT.z, (_246 * _240) * _945));
    float _962 = inversesqrt(dot(vec3(_952, _955, _958), vec3(_952, _955, _958)));
    float _963 = _962 * _952;
    float _964 = _962 * _955;
    float _965 = _962 * _958;
    float _3906 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _966 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _3928 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _3939 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _3950 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _984 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1034 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1024);
    float _1035 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1024);
    float _1036 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1024);
    float _1040 = inversesqrt(dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036)));
    float _1041 = _1034 * _1040;
    float _1042 = _1035 * _1040;
    float _1043 = _1036 * _1040;
    float _1049 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1050 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1068 = fma(_965, cbSceneParam._m0[5u].z, fma(_964, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _963));
    float _1071 = fma(_965, cbSceneParam._m0[6u].z, fma(_964, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _963));
    float _1074 = fma(_965, cbSceneParam._m0[7u].z, fma(_964, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _963));
    uint _1088 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1094 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * cbInstanceData._m0[_1088].x;
    float _1095 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * cbInstanceData._m0[_1088].y;
    float _1096 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * cbInstanceData._m0[_1088].z;
    float _3961 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1097 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    vec4 _1108 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1049, cbSceneParam._m0[86u].y * _1050));
    float _1112 = ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * TEXCOORD_5.w) * _1108.x;
    float _1113 = dot(vec3(_963, _964, _965), vec3(_1041, _1042, _1043));
    float _1116 = _1113 * 2.0;
    float _1120 = (_1116 * _963) - _1041;
    float _1121 = (_1116 * _964) - _1042;
    float _1122 = (_1116 * _965) - _1043;
    float _1126 = abs(dot(vec3(_1041, _1042, _1043), vec3(_963, _964, _965)));
    float _3994 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1128 = sqrt(_966);
    float _1141 = exp2((_1128 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1128 * 3.0));
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1482;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1207 = fma(_1181, cbModelParam._m0[26u].z, fma(_1177, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1173));
        float _1211 = fma(_1181, cbModelParam._m0[27u].z, fma(_1177, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1173));
        float _1215 = fma(_1181, cbModelParam._m0[28u].z, fma(_1177, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1173));
        float _1240 = _1173 + _963;
        float _1241 = _1177 + _964;
        float _1242 = _1181 + _965;
        float _1252 = fma(_1242, cbModelParam._m0[26u].z, fma(_1241, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1240)) - _1207;
        float _1253 = fma(_1242, cbModelParam._m0[27u].z, fma(_1241, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1240)) - _1211;
        float _1254 = fma(_1242, cbModelParam._m0[28u].z, fma(_1241, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1240)) - _1215;
        float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
        float _1271 = ((_1258 * _1252) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1207 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1258 * _1253) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1211 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1258 * _1254) / cbModelParam._m0[34u].z) + ((((((_1215 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        float _1310 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1276.x + (-0.5));
        float _1312 = _1310 * (_1276.y + (-0.5));
        float _1313 = _1310 * (_1276.z + (-0.5));
        float _1320 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1283.x + (-0.5));
        float _1322 = _1320 * (_1283.y + (-0.5));
        float _1323 = _1320 * (_1283.z + (-0.5));
        float _1330 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1290.x + (-0.5));
        float _1332 = _1330 * (_1290.y + (-0.5));
        float _1333 = _1330 * (_1290.z + (-0.5));
        float _1340 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1297.x + (-0.5));
        float _1342 = _1340 * (_1297.y + (-0.5));
        float _1343 = _1340 * (_1297.z + (-0.5));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = _1311 * 0.5;
        float _1348 = _1321 * 0.5;
        float _1349 = _1331 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1364 = (dot(vec3(_963, _964, _965), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1374 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4042 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1376 + 1.0))) + _1381) * _1344;
        float _1391 = _1312 * 0.5;
        float _1392 = _1322 * 0.5;
        float _1393 = _1332 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_963, _964, _965), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4075 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1418 + 1.0))) + _1423) * _1345;
        float _1433 = _1313 * 0.5;
        float _1434 = _1323 * 0.5;
        float _1435 = _1333 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_963, _964, _965), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4108 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1460 + 1.0))) + _1465) * _1346;
        _1482 = _1313;
        _1484 = _1312;
        _1485 = _1311;
        _1486 = _1323;
        _1487 = _1322;
        _1488 = _1321;
        _1489 = _1333;
        _1490 = _1332;
        _1491 = _1331;
        _1492 = _1346;
        _1493 = _1345;
        _1494 = _1344;
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1483;
        _1484 = _1483;
        _1485 = _1483;
        _1486 = _1483;
        _1487 = _1483;
        _1488 = _1483;
        _1489 = _1483;
        _1490 = _1483;
        _1491 = _1483;
        _1492 = _1483;
        _1493 = _1483;
        _1494 = _1483;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1521 = fma(_1181, cbModelParam._m0[30u].z, fma(_1177, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1173));
        float _1525 = fma(_1181, cbModelParam._m0[31u].z, fma(_1177, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1173));
        float _1529 = fma(_1181, cbModelParam._m0[32u].z, fma(_1177, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1173));
        float _1552 = _1173 + _963;
        float _1553 = _1177 + _964;
        float _1554 = _1181 + _965;
        float _1564 = fma(_1554, cbModelParam._m0[30u].z, fma(_1553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1552)) - _1521;
        float _1565 = fma(_1554, cbModelParam._m0[31u].z, fma(_1553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1552)) - _1525;
        float _1566 = fma(_1554, cbModelParam._m0[32u].z, fma(_1553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1552)) - _1529;
        float _1570 = inversesqrt(dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566)));
        float _1583 = ((_1570 * _1564) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1521 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1584 = ((_1570 * _1565) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1525 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1570 * _1566) / cbModelParam._m0[35u].z) + ((((((_1529 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        float _1620 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1587.x + (-0.5));
        float _1622 = _1620 * (_1587.y + (-0.5));
        float _1623 = _1620 * (_1587.z + (-0.5));
        float _1630 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1594.x + (-0.5));
        float _1632 = _1630 * (_1594.y + (-0.5));
        float _1633 = _1630 * (_1594.z + (-0.5));
        float _1640 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1601.x + (-0.5));
        float _1642 = _1640 * (_1601.y + (-0.5));
        float _1643 = _1640 * (_1601.z + (-0.5));
        float _1650 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1651 = _1650 * (_1608.x + (-0.5));
        float _1652 = _1650 * (_1608.y + (-0.5));
        float _1653 = _1650 * (_1608.z + (-0.5));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = _1621 * 0.5;
        float _1658 = _1631 * 0.5;
        float _1659 = _1641 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_963, _964, _965), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4171 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1684 + 1.0))) + _1689) * _1654;
        float _1699 = _1622 * 0.5;
        float _1700 = _1632 * 0.5;
        float _1701 = _1642 * 0.5;
        float _1702 = dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701));
        float _1707 = (_1702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1702);
        float _1715 = (dot(vec3(_963, _964, _965), vec3(_1707 * _1699, _1707 * _1700, _1707 * _1701)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1724 = sqrt(((_1700 * _1700) + (_1699 * _1699)) + (_1701 * _1701)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1726 = _1725 * 2.0;
        float _1730 = (1.0 - _1725) / (_1725 + 1.0);
        float _4204 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1740 = ((((1.0 - _1731) * (_1726 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1726 + 1.0))) + _1731) * _1655;
        float _1741 = _1623 * 0.5;
        float _1742 = _1633 * 0.5;
        float _1743 = _1643 * 0.5;
        float _1744 = dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743));
        float _1749 = (_1744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1744);
        float _1757 = (dot(vec3(_963, _964, _965), vec3(_1749 * _1741, _1749 * _1742, _1749 * _1743)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1766 = sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1768 = _1767 * 2.0;
        float _1772 = (1.0 - _1767) / (_1767 + 1.0);
        float _4237 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1782 = ((((1.0 - _1773) * (_1768 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1768 + 1.0))) + _1773) * _1656;
        _1790 = _1623;
        _1791 = _1622;
        _1792 = _1621;
        _1793 = _1633;
        _1794 = _1632;
        _1795 = _1631;
        _1796 = _1643;
        _1797 = _1642;
        _1798 = _1641;
        _1799 = _1656;
        _1800 = _1655;
        _1801 = _1654;
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)));
    }
    else
    {
        _1790 = _1483;
        _1791 = _1483;
        _1792 = _1483;
        _1793 = _1483;
        _1794 = _1483;
        _1795 = _1483;
        _1796 = _1483;
        _1797 = _1483;
        _1798 = _1483;
        _1799 = _1483;
        _1800 = _1483;
        _1801 = _1483;
        _1802 = 0.0;
        _1803 = 0.0;
        _1804 = 0.0;
    }
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1495)) + _1495;
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1496)) + _1496;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1497)) + _1497;
    float _1837 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1840 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1843 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1814));
    float _1858 = _1120 * 0.5;
    float _1859 = _1121 * 0.5;
    float _1860 = _1122 * 0.5;
    float _1861 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1864 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1867 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1901;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1874 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1482, _1486, _1489, _1492));
        float _1878 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1484, _1487, _1490, _1493));
        float _1882 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1889 = dot(vec4(cbModelParam._m0[39u]), vec4(_1858, _1859, _1860, 1.0));
        _1901 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1889) ? 0.0 : (isnan(0.0) ? _1889 : max(0.0, _1889))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1901 = 1.0;
    }
    float _1912;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1903 = dot(vec4(cbModelParam._m0[40u]), vec4(_1858, _1859, _1860, 1.0));
        _1912 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1903) ? 0.0 : (isnan(0.0) ? _1903 : max(0.0, _1903))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1912 = 1.0;
    }
    float _1916 = (_1912 * cbModelParam._m0[1u].x) + (_1901 * (1.0 - cbModelParam._m0[1u].x));
    float _1926 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _966);
    float _1927 = isnan(_1926) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1926 : min(cbModelParam._m0[25u].z, _1926));
    float _2007;
    float _2009;
    float _2011;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1974 = fma(_1181, cbModelParam._m0[13u].z, fma(_1177, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1173)) + cbModelParam._m0[13u].w;
        float _1978 = fma(_1181, cbModelParam._m0[14u].z, fma(_1177, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1173)) + cbModelParam._m0[14u].w;
        float _1982 = fma(_1181, cbModelParam._m0[15u].z, fma(_1177, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1173)) + cbModelParam._m0[15u].w;
        float _1985 = fma(_1122, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120));
        float _1988 = fma(_1122, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120));
        float _1991 = fma(_1122, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120));
        float _2019;
        if (_1985 > 0.0)
        {
            _2019 = abs((1.0 - _1974) / _1985);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1974 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2019 = frontier_phi_14_12_ladder;
        }
        float _2219;
        if (_1988 > 0.0)
        {
            _2219 = abs((1.0 - _1978) / _1988);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1978 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2219 = frontier_phi_23_19_ladder;
        }
        float _2462;
        if (_1991 > 0.0)
        {
            _2462 = abs((1.0 - _1982) / _1991);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1982 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2462 = frontier_phi_35_30_ladder;
        }
        float _2464 = isnan(_2219) ? _2019 : (isnan(_2019) ? _2219 : min(_2019, _2219));
        float _2465 = isnan(_2462) ? _2464 : (isnan(_2464) ? _2462 : min(_2464, _2462));
        float _2469 = (_2465 * _1985) + _1974;
        float _2470 = (_2465 * _1988) + _1978;
        float _2471 = (_2465 * _1991) + _1982;
        float _2472 = _2465 * 9.9999997473787516355514526367188e-05;
        float _2474 = (-1.0) - _2472;
        float _2476 = _2472 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2471 > _2476) || ((_2471 < _2474) || ((_2470 > _2476) || ((_2470 < _2474) || ((_2469 < _2474) || (_2469 > _2476))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2471, cbModelParam._m0[9u].z, fma(_2470, cbModelParam._m0[9u].y, _2469 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2471, cbModelParam._m0[10u].z, fma(_2470, cbModelParam._m0[10u].y, _2469 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2471, cbModelParam._m0[11u].z, fma(_2470, cbModelParam._m0[11u].y, _2469 * cbModelParam._m0[11u].x))), _1927);
            frontier_phi_13_35_ladder = _2595.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2595.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2595.x * cbModelParam._m0[1u].y;
        }
        _2007 = frontier_phi_13_35_ladder_2;
        _2009 = frontier_phi_13_35_ladder_1;
        _2011 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1120, _1121, _1122), _1927);
        _2007 = _1995.x * cbModelParam._m0[1u].y;
        _2009 = _1995.y * cbModelParam._m0[1u].y;
        _2011 = _1995.z * cbModelParam._m0[1u].y;
    }
    float _2015 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _966);
    float _2016 = isnan(_2015) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2015 : min(cbModelParam._m0[25u].w, _2015));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2069 = fma(_1181, cbModelParam._m0[21u].z, fma(_1177, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1173)) + cbModelParam._m0[21u].w;
        float _2073 = fma(_1181, cbModelParam._m0[22u].z, fma(_1177, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1173)) + cbModelParam._m0[22u].w;
        float _2077 = fma(_1181, cbModelParam._m0[23u].z, fma(_1177, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1173)) + cbModelParam._m0[23u].w;
        float _2080 = fma(_1122, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120));
        float _2083 = fma(_1122, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120));
        float _2086 = fma(_1122, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120));
        float _2224;
        if (_2080 > 0.0)
        {
            _2224 = abs((1.0 - _2069) / _2080);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2069 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2224 = frontier_phi_25_21_ladder;
        }
        float _2489;
        if (_2083 > 0.0)
        {
            _2489 = abs((1.0 - _2073) / _2083);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2073 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2489 = frontier_phi_37_32_ladder;
        }
        float _2694;
        if (_2086 > 0.0)
        {
            _2694 = abs((1.0 - _2077) / _2086);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2077 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2694 = frontier_phi_46_43_ladder;
        }
        float _2696 = isnan(_2489) ? _2224 : (isnan(_2224) ? _2489 : min(_2224, _2489));
        float _2697 = isnan(_2694) ? _2696 : (isnan(_2696) ? _2694 : min(_2696, _2694));
        float _2701 = (_2697 * _2080) + _2069;
        float _2702 = (_2697 * _2083) + _2073;
        float _2703 = (_2697 * _2086) + _2077;
        float _2704 = _2697 * 9.9999997473787516355514526367188e-05;
        float _2705 = (-1.0) - _2704;
        float _2707 = _2704 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2703 > _2707) || ((_2703 < _2705) || ((_2702 > _2707) || ((_2702 < _2705) || ((_2701 < _2705) || (_2701 > _2707))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2703, cbModelParam._m0[17u].z, fma(_2702, cbModelParam._m0[17u].y, _2701 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2703, cbModelParam._m0[18u].z, fma(_2702, cbModelParam._m0[18u].y, _2701 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2703, cbModelParam._m0[19u].z, fma(_2702, cbModelParam._m0[19u].y, _2701 * cbModelParam._m0[19u].x))), _2016);
            frontier_phi_22_46_ladder = _2902.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2902.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2902.x * cbModelParam._m0[1u].z;
        }
        _2105 = frontier_phi_22_46_ladder_2;
        _2107 = frontier_phi_22_46_ladder_1;
        _2109 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1120, _1121, _1122), _2016);
        _2105 = _2089.x * cbModelParam._m0[1u].z;
        _2107 = _2089.y * cbModelParam._m0[1u].z;
        _2109 = _2089.z * cbModelParam._m0[1u].z;
    }
    float _2121 = ((((1.0 - _1141) * ((_1128 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1141 * _1128)) * _1112;
    float _2122 = _2121 * ((cbModelParam._m0[1u].w * (_2105 - _2007)) + _2007);
    float _2123 = _2121 * ((cbModelParam._m0[1u].w * (_2107 - _2009)) + _2009);
    float _2124 = _2121 * ((cbModelParam._m0[1u].w * (_2109 - _2011)) + _2011);
    float _2127 = fma(_2124, cbSceneParam._m0[89u].z, fma(_2123, cbSceneParam._m0[89u].y, _2122 * cbSceneParam._m0[89u].x));
    float _2130 = fma(_2124, cbSceneParam._m0[90u].z, fma(_2123, cbSceneParam._m0[90u].y, _2122 * cbSceneParam._m0[90u].x));
    float _2133 = fma(_2124, cbSceneParam._m0[91u].z, fma(_2123, cbSceneParam._m0[91u].y, _2122 * cbSceneParam._m0[91u].x));
    uvec4 _2143 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2145 = _2143.x * 14u;
    uint _2146 = _2145 + 13u;
    float _2153 = _1112 + (-1.0);
    float _2158 = (cbLight._m0[_2146].x * _2153) + 1.0;
    float _2159 = (cbLight._m0[_2146].y * _2153) + 1.0;
    float _2160 = (cbLight._m0[_2146].z * _2153) + 1.0;
    float _2161 = (cbLight._m0[_2146].w * _2153) + 1.0;
    uint _2162 = _2145 + 5u;
    float _2168 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
    uint _2172 = _2145 + 4u;
    float _2178 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2182 = _2145 | 1u;
    float _2193 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_963, _964, _965));
    float _2196 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_963, _964, _965));
    float _4373 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _4384 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2201 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 0.3183098733425140380859375;
    float _2203 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * 0.3183098733425140380859375;
    float _2210 = ((cbLight._m0[_2162].x * _2168) * _2203) + ((cbLight._m0[_2172].x * _2178) * _2201);
    float _2211 = ((_2168 * cbLight._m0[_2162].y) * _2203) + ((_2178 * cbLight._m0[_2172].y) * _2201);
    float _2212 = ((_2168 * cbLight._m0[_2162].z) * _2203) + ((_2178 * cbLight._m0[_2172].z) * _2201);
    uvec4 _2216 = floatBitsToUint(cbLight._m0[_2145 + 12u]);
    bool _2218 = _2216.x == 0u;
    float _2229;
    float _2231;
    float _2233;
    if (_2218)
    {
        _2229 = _2210;
        _2231 = _2211;
        _2233 = _2212;
    }
    else
    {
        uint _2237 = _2145 + 6u;
        float _2253 = (dot(vec3(cbLight._m0[_2145 + 2u].xyz), vec3(_963, _964, _965)) * 0.5) + 0.5;
        float _2254 = _2253 * _2253;
        float _4395 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2255 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2256 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2229 = (((cbLight._m0[_2237].x * 0.3183098733425140380859375) * _2255) * _2256) + _2210;
        _2231 = (((cbLight._m0[_2237].y * 0.3183098733425140380859375) * _2255) * _2256) + _2211;
        _2233 = (((cbLight._m0[_2237].z * 0.3183098733425140380859375) * _2255) * _2256) + _2212;
    }
    bool _2236 = _2216.y == 0u;
    float _2274;
    float _2276;
    float _2278;
    if (_2236)
    {
        _2274 = _2229;
        _2276 = _2231;
        _2278 = _2233;
    }
    else
    {
        uint _2433 = _2145 + 7u;
        float _2449 = (dot(vec3(cbLight._m0[_2145 + 3u].xyz), vec3(_963, _964, _965)) * 0.5) + 0.5;
        float _2450 = _2449 * _2449;
        float _4411 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2451 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2452 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2274 = (((cbLight._m0[_2433].x * 0.3183098733425140380859375) * _2451) * _2452) + _2229;
        _2276 = (((cbLight._m0[_2433].y * 0.3183098733425140380859375) * _2451) * _2452) + _2231;
        _2278 = (((cbLight._m0[_2433].z * 0.3183098733425140380859375) * _2451) * _2452) + _2233;
    }
    uint _2281 = _2145 + 8u;
    float _2294 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _966) * 0.949999988079071044921875);
    float _2295 = _2294 * _2294;
    float _2296 = cbLight._m0[_2145].x + _1041;
    float _2297 = cbLight._m0[_2145].y + _1042;
    float _2298 = cbLight._m0[_2145].z + _1043;
    float _2302 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
    float _2303 = _2302 * _2296;
    float _2304 = _2302 * _2297;
    float _2305 = _2302 * _2298;
    float _2306 = dot(vec3(_963, _964, _965), vec3(cbLight._m0[_2145].xyz));
    float _4427 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _4438 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _2310 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2311 = dot(vec3(_963, _964, _965), vec3(_2303, _2304, _2305));
    float _4449 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2315 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2303, _2304, _2305));
    float _4460 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2319 = _2295 * _2295;
    float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
    float _2334 = (exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2335 = 1.0 - _2295;
    float _2346 = (0.5 / (((_2310 * ((_2309 * _2335) + _2295)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2335) + _2295) * _2309))) * _2309;
    float _4471 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2348 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
    uint _2359 = _2145 + 9u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _966) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2182].x + _1041;
    float _2373 = cbLight._m0[_2182].y + _1042;
    float _2374 = cbLight._m0[_2182].z + _1043;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_963, _964, _965), vec3(cbLight._m0[_2182].xyz));
    float _4482 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2386 = dot(vec3(_963, _964, _965), vec3(_2379, _2380, _2381));
    float _4493 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2379, _2380, _2381));
    float _4504 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2371 * _2371;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2407 = (exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2408 = 1.0 - _2371;
    float _2418 = (0.5 / (((_2310 * ((_2385 * _2408) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2408) + _2371) * _2385))) * _2385;
    float _4515 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2420 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    float _2430 = (((_2407 * cbLight._m0[_2359].x) * _2420) * _2168) + (((_2334 * cbLight._m0[_2281].x) * _2348) * _2178);
    float _2431 = (((_2407 * cbLight._m0[_2359].y) * _2420) * _2168) + (((_2334 * cbLight._m0[_2281].y) * _2348) * _2178);
    float _2432 = (((_2407 * cbLight._m0[_2359].z) * _2420) * _2168) + (((_2334 * cbLight._m0[_2281].z) * _2348) * _2178);
    float _2494;
    float _2496;
    float _2498;
    if (_2218)
    {
        _2494 = _2430;
        _2496 = _2431;
        _2498 = _2432;
    }
    else
    {
        uint _2500 = _2145 + 2u;
        uint _2504 = _2145 + 10u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _966) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _1041;
        float _2521 = cbLight._m0[_2500].y + _1042;
        float _2522 = cbLight._m0[_2500].z + _1043;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_963, _964, _965), vec3(cbLight._m0[_2500].xyz));
        float _4526 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2534 = dot(vec3(_963, _964, _965), vec3(_2527, _2528, _2529));
        float _4537 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4548 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2555 = (exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2556 = 1.0 - _2519;
        float _2566 = (0.5 / (((_2310 * ((_2533 * _2556) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2556) + _2519) * _2533))) * _2533;
        float _4559 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2494 = (((_2555 * cbLight._m0[_2504].x) * _2568) * _2569) + _2430;
        _2496 = (((_2555 * cbLight._m0[_2504].y) * _2568) * _2569) + _2431;
        _2498 = (((_2555 * cbLight._m0[_2504].z) * _2568) * _2569) + _2432;
    }
    float _2604;
    float _2606;
    float _2608;
    if (_2236)
    {
        _2604 = _2494;
        _2606 = _2496;
        _2608 = _2498;
    }
    else
    {
        uint _2615 = _2145 + 3u;
        uint _2619 = _2145 + 11u;
        float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _966) * 0.949999988079071044921875);
        float _2634 = _2633 * _2633;
        float _2635 = cbLight._m0[_2615].x + _1041;
        float _2636 = cbLight._m0[_2615].y + _1042;
        float _2637 = cbLight._m0[_2615].z + _1043;
        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
        float _2642 = _2641 * _2635;
        float _2643 = _2641 * _2636;
        float _2644 = _2641 * _2637;
        float _2645 = dot(vec3(_963, _964, _965), vec3(cbLight._m0[_2615].xyz));
        float _4575 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2649 = dot(vec3(_963, _964, _965), vec3(_2642, _2643, _2644));
        float _4586 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2653 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2642, _2643, _2644));
        float _4597 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2657 = _2634 * _2634;
        float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
        float _2670 = (exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2671 = 1.0 - _2634;
        float _2681 = (0.5 / (((_2310 * ((_2648 * _2671) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2671) + _2634) * _2648))) * _2648;
        float _4608 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2604 = (((_2670 * cbLight._m0[_2619].x) * _2683) * _2684) + _2494;
        _2606 = (((_2670 * cbLight._m0[_2619].y) * _2683) * _2684) + _2496;
        _2608 = (((_2670 * cbLight._m0[_2619].z) * _2683) * _2684) + _2498;
    }
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    if (_2143.y == 0u)
    {
        float _2759 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2760 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2759;
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2759;
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2759;
        uvec4 _2774 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2775 = _2774.x;
        uint _2786 = uint((float(_2774.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1050) / _2775))) + floor(float(uint(cbSceneParam._m0[85u].x * _1049) / _2775)));
        float _2796 = (log2(_2762 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2797 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        uint _2800 = uint(isnan(14.0) ? _2797 : (isnan(_2797) ? 14.0 : min(_2797, 14.0)));
        uvec4 _2805 = texelFetch(g_lightClusterGridBuffer, int(((_2800 << 2u) + (_2786 << 6u)) >> 2u));
        uint _2806 = _2805.x;
        uint _2807 = _2774.z;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        if (((((1u << ((_2807 >> 4u) & 15u)) + 4294967295u) & _2806) == 0u) || ((_2807 & 240u) == 0u))
        {
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
        }
        else
        {
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            uint _3058 = 0u;
            uint _3067;
            bool _3068;
            for (;;)
            {
                _3067 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3058 << 2u)) >> 2u)).x;
                _3068 = _3067 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3068)
                {
                    frontier_phi_61_pred = _3052;
                    frontier_phi_61_pred_1 = _3057;
                    frontier_phi_61_pred_2 = _3056;
                    frontier_phi_61_pred_3 = _3055;
                    frontier_phi_61_pred_4 = _3054;
                    frontier_phi_61_pred_5 = _3053;
                }
                else
                {
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    uint _3182;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3055;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3067;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    for (;;)
                    {
                        uint _3186 = uint(findLSB(_3182)) + (_3058 << 5u);
                        uint _3183 = (_3182 + 4294967295u) & _3182;
                        uint _3188 = _3186 * 48u;
                        vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 3u)).x));
                        uint _3208 = (_3186 * 48u) + 4u;
                        vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 3u)).x));
                        uint _3227 = (_3186 * 48u) + 8u;
                        vec3 _3238 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3227)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 2u)).x));
                        float _3242 = _3202.x - _2760;
                        float _3243 = _3202.y - _2761;
                        float _3244 = _3202.z - _2762;
                        float _3245 = dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244));
                        float _3248 = inversesqrt(_3245);
                        float _3249 = _3248 * _3242;
                        float _3250 = _3248 * _3243;
                        float _3251 = _3248 * _3244;
                        float _3252 = dot(vec3(_1068, _1071, _1074), vec3(_3249, _3250, _3251));
                        float _3257 = 1.0 - (_3245 * _3202.w);
                        float _4634 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3258 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3259 = sqrt(_3245) * _3221.w;
                        float _3262 = 1.39999997615814208984375 / (_3259 + 1.39999997615814208984375);
                        float _3263 = _3262 * _3262;
                        float _3266 = ((1.0 - _3263) * _3252) + _3263;
                        float _3269 = _3259 * _3259;
                        float _3273 = ((isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))) * _3258) / ((_3269 * 0.699999988079071044921875) + 1.0);
                        float _3277 = (-0.0) - _2760;
                        float _3278 = (-0.0) - _2761;
                        float _3279 = (-0.0) - _2762;
                        float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                        float _3284 = _3283 * _3277;
                        float _3285 = _3283 * _3278;
                        float _3286 = _3283 * _3279;
                        float _3294 = exp2(log2(1.0 / ((_3269 * 3.5) + 5.0)) * 0.25);
                        float _3295 = 1.0 - _1128;
                        float _3302 = sqrt(1.0 - ((1.0 - (_3295 * _3295)) * (1.0 - (_3294 * _3294))));
                        float _3303 = _3302 * _3302;
                        float _3304 = _3303 * _3303;
                        float _3305 = _3284 + _3249;
                        float _3306 = _3285 + _3250;
                        float _3307 = _3286 + _3251;
                        float _3311 = inversesqrt(dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307)));
                        float _3315 = dot(vec3(_1068, _1071, _1074), vec3(_3284, _3285, _3286));
                        float _4650 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3318 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3319 = dot(vec3(_1068, _1071, _1074), vec3(_3311 * _3305, _3311 * _3306, _3311 * _3307));
                        float _4661 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                        float _3326 = ((_3322 * _3322) * (_3304 + (-1.0))) + 1.0;
                        float _3327 = _3262 * _3303;
                        float _3328 = _3327 * _3327;
                        float _3331 = ((1.0 - _3328) * _3252) + _3328;
                        float _4672 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3332 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3333 = 1.0 - _3303;
                        float _3343 = (0.5 / (((_3332 * ((_3318 * _3333) + _3303)) + 9.9999999392252902907785028219223e-09) + (((_3332 * _3333) + _3303) * _3318))) * _3332;
                        float _4683 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3354 = (((_3304 * 3.1415927410125732421875) * (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) / ((_3326 * _3326) * ((_3269 * 2.1991131305694580078125) + 3.141590118408203125))) * _3258;
                        _3111 = (_3273 * _3221.x) + _3179;
                        _3112 = (_3273 * _3221.y) + _3180;
                        _3113 = (_3273 * _3221.z) + _3181;
                        _3108 = (_3354 * _3238.x) + _3176;
                        _3109 = (_3354 * _3238.y) + _3177;
                        _3110 = (_3354 * _3238.z) + _3178;
                        if (_3183 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3111;
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3183;
                        }
                    }
                    frontier_phi_61_pred = _3108;
                    frontier_phi_61_pred_1 = _3113;
                    frontier_phi_61_pred_2 = _3112;
                    frontier_phi_61_pred_3 = _3111;
                    frontier_phi_61_pred_4 = _3110;
                    frontier_phi_61_pred_5 = _3109;
                }
                _2908 = frontier_phi_61_pred;
                _2918 = frontier_phi_61_pred_1;
                _2916 = frontier_phi_61_pred_2;
                _2914 = frontier_phi_61_pred_3;
                _2912 = frontier_phi_61_pred_4;
                _2910 = frontier_phi_61_pred_5;
                uint _3059 = _3058 + 1u;
                if (_3059 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3052 = _2908;
                    _3053 = _2910;
                    _3054 = _2912;
                    _3055 = _2914;
                    _3056 = _2916;
                    _3057 = _2918;
                    _3058 = _3059;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
        }
        uvec4 _2921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2922 = _2921.z;
        uint _2924 = (_2922 >> 8u) & 15u;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((4294967295u << _2924) & _2806) == 0u)
        {
            _3020 = _2907;
            _3022 = _2909;
            _3024 = _2911;
            _3026 = _2913;
            _3028 = _2915;
            _3030 = _2917;
        }
        else
        {
            float _3045 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
            float _3046 = _3045 * _2760;
            float _3047 = _3045 * _2761;
            float _3048 = _3045 * _2762;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2924 < ((_2922 >> 12u) & 15u))
            {
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3159 = _2907;
                float _3160 = _2909;
                float _3161 = _2911;
                float _3162 = _2913;
                float _3163 = _2915;
                float _3164 = _2917;
                uint _3165 = _2924;
                uint _3174;
                bool _3175;
                for (;;)
                {
                    _3174 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3165 << 2u)) >> 2u)).x;
                    _3175 = _3174 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3175)
                    {
                        frontier_phi_67_pred = _3162;
                        frontier_phi_67_pred_1 = _3163;
                        frontier_phi_67_pred_2 = _3164;
                        frontier_phi_67_pred_3 = _3161;
                        frontier_phi_67_pred_4 = _3160;
                        frontier_phi_67_pred_5 = _3159;
                    }
                    else
                    {
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3372 = _3159;
                        float _3373 = _3160;
                        float _3374 = _3161;
                        float _3375 = _3162;
                        float _3376 = _3163;
                        float _3377 = _3164;
                        uint _3378 = _3174;
                        uint _3379;
                        vec4 _3404;
                        float _3405;
                        vec4 _3420;
                        vec3 _3432;
                        vec4 _3447;
                        vec4 _3462;
                        float _3508;
                        bool _3509;
                        for (;;)
                        {
                            uint _3389 = ((_3165 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3378));
                            _3379 = (_3378 + 4294967295u) & _3378;
                            uint _3391 = _3389 * 40u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            _3405 = _3404.w;
                            uint _3407 = (_3389 * 40u) + 4u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3422 = (_3389 * 40u) + 8u;
                            _3432 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x));
                            uint _3434 = (_3389 * 40u) + 16u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3389 * 40u) + 20u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3464 = (_3389 * 40u) + 24u;
                            vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3483 = (_3389 * 40u) + 28u;
                            vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            _3508 = fma(_2762, _3496.z, fma(_2761, _3496.y, _3496.x * _2760)) + _3496.w;
                            _3509 = !((fma(_2762, _3477.z, fma(_2761, _3477.y, _3477.x * _2760)) + _3477.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3509)
                            {
                                float _3536 = _3404.x - _2760;
                                float _3537 = _3404.y - _2761;
                                float _3538 = _3404.z - _2762;
                                float _3539 = dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538));
                                float _3542 = inversesqrt(_3539);
                                float _3543 = _3542 * _3536;
                                float _3544 = _3542 * _3537;
                                float _3545 = _3542 * _3538;
                                float _3549 = 1.0 - (_3539 / (_3405 * _3405));
                                float _4694 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3554 = sqrt(_3539) * _3420.w;
                                float _3556 = 1.39999997615814208984375 / (_3554 + 1.39999997615814208984375);
                                float _3557 = _3556 * _3556;
                                float _3560 = ((1.0 - _3557) * dot(vec3(_3543, _3544, _3545), vec3(_1068, _1071, _1074))) + _3557;
                                float _3563 = _3554 * _3554;
                                float _3567 = (fma(_2762, _3447.z, fma(_2761, _3447.y, _3447.x * _2760)) + _3447.w) / _3508;
                                float _3568 = (fma(_2762, _3462.z, fma(_2761, _3462.y, _3462.x * _2760)) + _3462.w) / _3508;
                                float _3572 = 1.0 - dot(vec2(_3567, _3568), vec2(_3567, _3568));
                                float _4710 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3574 = _3573 * (((isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0))) * _3550) / ((_3563 * 0.699999988079071044921875) + 1.0));
                                float _3586 = exp2(log2(1.0 / ((_3563 * 3.5) + 5.0)) * 0.25);
                                float _3587 = 1.0 - _1128;
                                float _3594 = sqrt(1.0 - ((1.0 - (_3587 * _3587)) * (1.0 - (_3586 * _3586))));
                                float _3595 = _3594 * _3594;
                                float _3596 = _3595 * _3595;
                                float _3597 = _3543 - _3046;
                                float _3598 = _3544 - _3047;
                                float _3599 = _3545 - _3048;
                                float _3603 = inversesqrt(dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599)));
                                float _3607 = dot(vec3(_1068, _1071, _1074), vec3((-0.0) - _3046, (-0.0) - _3047, (-0.0) - _3048));
                                float _4721 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3610 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3611 = dot(vec3(_1068, _1071, _1074), vec3(_3603 * _3597, _3603 * _3598, _3603 * _3599));
                                float _4732 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3614 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3618 = ((_3614 * _3614) * (_3596 + (-1.0))) + 1.0;
                                float _3619 = _3556 * _3595;
                                float _3620 = _3619 * _3619;
                                float _3626 = ((1.0 - _3620) * dot(vec3(_1068, _1071, _1074), vec3(_3543, _3544, _3545))) + _3620;
                                float _4743 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3628 = 1.0 - _3595;
                                float _3638 = (0.5 / (((_3627 * ((_3610 * _3628) + _3595)) + 9.9999999392252902907785028219223e-09) + (((_3627 * _3628) + _3595) * _3610))) * _3627;
                                float _4754 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3648 = (_3573 * _3550) * (((_3596 * 3.1415927410125732421875) * (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) / ((_3618 * _3618) * ((_3563 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3648 * _3432.x;
                                frontier_phi_73_pred_1 = _3648 * _3432.y;
                                frontier_phi_73_pred_2 = _3574 * _3420.z;
                                frontier_phi_73_pred_3 = _3574 * _3420.y;
                                frontier_phi_73_pred_4 = _3574 * _3420.x;
                                frontier_phi_73_pred_5 = _3648 * _3432.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3652 = frontier_phi_73_pred;
                            _3653 = frontier_phi_73_pred_1;
                            _3657 = frontier_phi_73_pred_2;
                            _3656 = frontier_phi_73_pred_3;
                            _3655 = frontier_phi_73_pred_4;
                            _3654 = frontier_phi_73_pred_5;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            if (_3379 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3379;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3362;
                        frontier_phi_67_pred_1 = _3363;
                        frontier_phi_67_pred_2 = _3364;
                        frontier_phi_67_pred_3 = _3361;
                        frontier_phi_67_pred_4 = _3360;
                        frontier_phi_67_pred_5 = _3359;
                    }
                    _3027 = frontier_phi_67_pred;
                    _3029 = frontier_phi_67_pred_1;
                    _3031 = frontier_phi_67_pred_2;
                    _3025 = frontier_phi_67_pred_3;
                    _3023 = frontier_phi_67_pred_4;
                    _3021 = frontier_phi_67_pred_5;
                    uint _3166 = _3165 + 1u;
                    if (_3166 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3159 = _3021;
                        _3160 = _3023;
                        _3161 = _3025;
                        _3162 = _3027;
                        _3163 = _3029;
                        _3164 = _3031;
                        _3165 = _3166;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3029;
                frontier_phi_55_56_ladder_1 = _3031;
                frontier_phi_55_56_ladder_2 = _3027;
                frontier_phi_55_56_ladder_3 = _3025;
                frontier_phi_55_56_ladder_4 = _3023;
                frontier_phi_55_56_ladder_5 = _3021;
            }
            else
            {
                frontier_phi_55_56_ladder = _2915;
                frontier_phi_55_56_ladder_1 = _2917;
                frontier_phi_55_56_ladder_2 = _2913;
                frontier_phi_55_56_ladder_3 = _2911;
                frontier_phi_55_56_ladder_4 = _2909;
                frontier_phi_55_56_ladder_5 = _2907;
            }
            _3020 = frontier_phi_55_56_ladder_5;
            _3022 = frontier_phi_55_56_ladder_4;
            _3024 = frontier_phi_55_56_ladder_3;
            _3026 = frontier_phi_55_56_ladder_2;
            _3028 = frontier_phi_55_56_ladder;
            _3030 = frontier_phi_55_56_ladder_1;
        }
        float _3035 = isnan(1.0) ? _1112 : (isnan(_1112) ? 1.0 : min(_1112, 1.0));
        _2819 = (_3035 * _3026) + _2274;
        _2821 = (_3035 * _3028) + _2276;
        _2823 = (_3035 * _3030) + _2278;
        _2825 = ((_3020 * 0.039999999105930328369140625) * _3035) + _2604;
        _2827 = ((_3022 * 0.039999999105930328369140625) * _3035) + _2606;
        _2829 = ((_3024 * 0.039999999105930328369140625) * _3035) + _2608;
    }
    else
    {
        _2819 = _2274;
        _2821 = _2276;
        _2823 = _2278;
        _2825 = _2604;
        _2827 = _2606;
        _2829 = _2608;
    }
    float _4770 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _4781 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _4792 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    uint _2849 = _285 + 6u;
    float _2857 = _1049 / cbSceneParam._m0[86u].x;
    float _2858 = _1050 / cbSceneParam._m0[86u].y;
    vec4 _2872 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, (log2((isnan(cbSceneParam._m0[77u].w) ? _984 : (isnan(_984) ? cbSceneParam._m0[77u].w : min(_984, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2874 = _2872.x;
    float _2875 = _2872.y;
    float _2876 = _2872.z;
    float _2877 = _2872.w;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    if (_984 > cbSceneParam._m0[78u].w)
    {
        float _2932 = isnan(_984) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _984 : min(cbSceneParam._m0[80u].w, _984));
        float _2933 = _2932 / _984;
        float _2944 = _2933 * _1034;
        float _2945 = _1035 * _2933;
        float _2946 = (-0.0) - _2945;
        float _2948 = _2933 * _1036;
        float _2950 = (cbSceneParam._m0[77u].w * _2946) / _2932;
        float _2951 = _2950 + cbSceneParam._m0[79u].w;
        float _2952 = cbSceneParam._m0[79u].w - _2945;
        float _2958 = sqrt(((_2944 * _2944) + (_2945 * _2945)) + (_2948 * _2948));
        float _2961 = (1.0 - (cbSceneParam._m0[77u].w / _2932)) * _2958;
        float _2966 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2968 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3121;
        if (abs((_2946 - _2950) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3121 = ((((_2951 > 0.0) ? exp2(_2966 * _2951) : (2.0 - exp2(_2968 * _2951))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2961;
        }
        else
        {
            float _3081 = 1.0 / cbSceneParam._m0[80u].x;
            float _3082 = isnan(_2952) ? _2951 : (isnan(_2951) ? _2952 : max(_2951, _2952));
            float _3083 = isnan(_2952) ? _2951 : (isnan(_2951) ? _2952 : min(_2951, _2952));
            float _3092 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : min(_3082, 0.0));
            float _3093 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : min(_3083, 0.0));
            _3121 = ((abs(_2958 / _2946) * cbSceneParam._m0[80u].y) * ((((_3092 - _3093) * 2.0) - ((exp2(_2966 * (isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0)))) - exp2(_2966 * (isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))))) * _3081)) - ((exp2(_2968 * _3092) - exp2(_2968 * _3093)) * _3081))) + (_2961 * cbSceneParam._m0[80u].z);
        }
        vec4 _3123 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, 1.0), 0.0);
        float _3132 = exp2((_3121 * (-1.44269502162933349609375)) * (1.0 - _3123.w));
        float _3133 = log2(_3132);
        float _3149 = log2(_2877);
        _2970 = (exp2(_3149 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].x)) * _3123.x) / cbSceneParam._m0[78u].x)) + _2874;
        _2972 = (exp2(_3149 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].y)) * _3123.y) / cbSceneParam._m0[78u].y)) + _2875;
        _2974 = (exp2(_3149 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].z)) * _3123.z) / cbSceneParam._m0[78u].z)) + _2876;
        _2976 = _3132 * _2877;
    }
    else
    {
        _2970 = _2874;
        _2972 = _2875;
        _2974 = _2876;
        _2976 = _2877;
    }
    float _2988 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2989 = _2988 == 3.0;
    float _2990 = log2(_2976);
    float _2997 = exp2(_2990 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2819 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1112))) + ((_2825 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1916)) * cbPerFrame._m0[3u].x));
    float _2998 = exp2(_2990 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2821 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1112))) + ((_2827 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1916)) * cbPerFrame._m0[3u].x));
    float _2999 = exp2(_2990 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2823 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1112))) + ((_2829 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1916)) * cbPerFrame._m0[3u].x));
    float _3008 = (_2988 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3008 * (_2989 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2970)));
    SV_Target.y = _3008 * (_2989 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2972)));
    SV_Target.z = _3008 * (_2989 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2974)));
    SV_Target.w = cbInstanceData._m0[_2849].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2849].w;
}


