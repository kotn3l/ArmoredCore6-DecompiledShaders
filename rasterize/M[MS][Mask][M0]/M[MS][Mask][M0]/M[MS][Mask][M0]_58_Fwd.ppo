#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1325;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3632 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3643 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3654 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _414 = _412.x;
    float _426 = dot(vec4(_414, _412.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _443 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _377.x) * 2.0) - ((((_414 - _426) * cbMtdParam._m0[24u].z) + _426) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3665 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _451 = (_444 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _452 = (_444 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _453 = (_444 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    vec4 _470 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _294) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _295) + cbTextureTilingScale._m0[3u].w));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _492 = _490.x;
    float _502 = dot(vec4(_492, _490.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _516 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _377.y) * 2.0) - ((((_492 - _502) * cbMtdParam._m0[24u].z) + _502) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3676 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _524 = (_517 * ((_470.x * cbMtdParam._m0[13u].x) - _451)) + _451;
    float _525 = (_517 * ((_470.y * cbMtdParam._m0[13u].y) - _452)) + _452;
    float _526 = (_517 * ((_470.z * cbMtdParam._m0[13u].z) - _453)) + _453;
    float _530 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _524;
    float _533 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _525;
    float _536 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _526;
    float _543 = ((_524 - _530) * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) + _530;
    float _544 = ((_525 - _533) * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) + _533;
    float _545 = ((_526 - _536) * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) + _536;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _599 = _597.x;
    float _600 = _597.y;
    float _601 = _597.z;
    float _608 = ((_580.x - _599) * _444) + _599;
    float _609 = ((_580.y - _600) * _444) + _600;
    float _610 = ((_580.z - _601) * _444) + _601;
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _294) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _295) + cbTextureTilingScale._m0[2u].w));
    float _635 = ((_622.z - _610) * _517) + _610;
    float _638 = ((((_622.x - _608) * _517) + _608) * 2.0) + (-1.0);
    float _639 = ((((_622.y - _609) * _517) + _609) * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3687 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _645 = sqrt(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))));
    vec4 _665 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _677 = (_638 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_557.x * 2.0) + (-1.0)))) + (((_665.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _678 = (_639 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_557.y * 2.0) + (-1.0)))) + (((_665.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _692 = _690.x;
    float _693 = 1.0 - _692;
    float _719 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_692 - _693) * cbMtdParam._m0[24u].y) + _693) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3698 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _720 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _728 = ((((cbMtdParam._m0[10u].x - _543) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _720) + _543;
    float _729 = ((((cbMtdParam._m0[10u].y - _544) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _720) + _544;
    float _730 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _545)) * _720) + _545;
    float _735 = (((_557.z - _635) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _635;
    float _739 = ((_665.z - _735) * cbMtdParam._m0[19u].w) + _735;
    float _743 = ((cbMtdParam._m0[23u].y - _739) * _720) + _739;
    vec4 _762 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _768 = (_762.x * 2.0) + (-1.0);
    float _769 = (_762.y * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _3709 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _786 = (_720 * (((cbMtdParam._m0[22u].z * _677) - _677) + _768)) + _677;
    float _787 = (_720 * (((cbMtdParam._m0[22u].z * _678) - _678) + _769)) + _678;
    float _788 = (_720 * (sqrt(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) - _645)) + _645;
    float _790 = cbMtdParam._m0[22u].x + _665.w;
    float _793 = fma(_788, _243 * NORMAL.x, fma(_787, _250 * TANGENT.x, (_236 * _228) * _786));
    float _796 = fma(_788, _243 * NORMAL.y, fma(_787, _250 * TANGENT.y, (_236 * _229) * _786));
    float _799 = fma(_788, _243 * NORMAL.z, fma(_787, _250 * TANGENT.z, (_236 * _230) * _786));
    float _803 = inversesqrt(dot(vec3(_793, _796, _799), vec3(_793, _796, _799)));
    float _804 = _803 * _793;
    float _805 = _803 * _796;
    float _806 = _803 * _799;
    float _3720 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _807 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _3742 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _3753 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _3764 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _825 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _876 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _866);
    float _877 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _866);
    float _878 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _866);
    float _882 = inversesqrt(dot(vec3(_876, _877, _878), vec3(_876, _877, _878)));
    float _883 = _876 * _882;
    float _884 = _877 * _882;
    float _885 = _878 * _882;
    float _891 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _892 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _910 = fma(_806, cbSceneParam._m0[5u].z, fma(_805, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _804));
    float _913 = fma(_806, cbSceneParam._m0[6u].z, fma(_805, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _804));
    float _916 = fma(_806, cbSceneParam._m0[7u].z, fma(_805, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _804));
    uint _930 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _936 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_930].x;
    float _937 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_930].y;
    float _938 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * cbInstanceData._m0[_930].z;
    float _3775 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    vec4 _950 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _891, cbSceneParam._m0[86u].y * _892));
    float _954 = ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * TEXCOORD_5.w) * _950.x;
    float _955 = dot(vec3(_804, _805, _806), vec3(_883, _884, _885));
    float _958 = _955 * 2.0;
    float _962 = (_958 * _804) - _883;
    float _963 = (_958 * _805) - _884;
    float _964 = (_958 * _806) - _885;
    float _968 = abs(dot(vec3(_883, _884, _885), vec3(_804, _805, _806)));
    float _3808 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _970 = sqrt(_807);
    float _983 = exp2((_970 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_970 * 3.0));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1324;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1049 = fma(_1023, cbModelParam._m0[26u].z, fma(_1019, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015));
        float _1053 = fma(_1023, cbModelParam._m0[27u].z, fma(_1019, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015));
        float _1057 = fma(_1023, cbModelParam._m0[28u].z, fma(_1019, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015));
        float _1082 = _1015 + _804;
        float _1083 = _1019 + _805;
        float _1084 = _1023 + _806;
        float _1094 = fma(_1084, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1082)) - _1049;
        float _1095 = fma(_1084, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1082)) - _1053;
        float _1096 = fma(_1084, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1082)) - _1057;
        float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
        float _1113 = ((_1100 * _1094) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1049 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1100 * _1095) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1053 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1100 * _1096) / cbModelParam._m0[34u].z) + ((((((_1057 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        float _1152 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1118.x + (-0.5));
        float _1154 = _1152 * (_1118.y + (-0.5));
        float _1155 = _1152 * (_1118.z + (-0.5));
        float _1162 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1125.x + (-0.5));
        float _1164 = _1162 * (_1125.y + (-0.5));
        float _1165 = _1162 * (_1125.z + (-0.5));
        float _1172 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1132.x + (-0.5));
        float _1174 = _1172 * (_1132.y + (-0.5));
        float _1175 = _1172 * (_1132.z + (-0.5));
        float _1182 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1139.x + (-0.5));
        float _1184 = _1182 * (_1139.y + (-0.5));
        float _1185 = _1182 * (_1139.z + (-0.5));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1153 * 0.5;
        float _1190 = _1163 * 0.5;
        float _1191 = _1173 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1206 = (dot(vec3(_804, _805, _806), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1216 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3856 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1218 + 1.0))) + _1223) * _1186;
        float _1233 = _1154 * 0.5;
        float _1234 = _1164 * 0.5;
        float _1235 = _1174 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_804, _805, _806), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3889 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1260 + 1.0))) + _1265) * _1187;
        float _1275 = _1155 * 0.5;
        float _1276 = _1165 * 0.5;
        float _1277 = _1175 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_804, _805, _806), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3922 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1302 + 1.0))) + _1307) * _1188;
        _1324 = _1155;
        _1326 = _1154;
        _1327 = _1153;
        _1328 = _1165;
        _1329 = _1164;
        _1330 = _1163;
        _1331 = _1175;
        _1332 = _1174;
        _1333 = _1173;
        _1334 = _1188;
        _1335 = _1187;
        _1336 = _1186;
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
    }
    else
    {
        _1324 = _1325;
        _1326 = _1325;
        _1327 = _1325;
        _1328 = _1325;
        _1329 = _1325;
        _1330 = _1325;
        _1331 = _1325;
        _1332 = _1325;
        _1333 = _1325;
        _1334 = _1325;
        _1335 = _1325;
        _1336 = _1325;
        _1337 = 0.0;
        _1338 = 0.0;
        _1339 = 0.0;
    }
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1363 = fma(_1023, cbModelParam._m0[30u].z, fma(_1019, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1015));
        float _1367 = fma(_1023, cbModelParam._m0[31u].z, fma(_1019, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1015));
        float _1371 = fma(_1023, cbModelParam._m0[32u].z, fma(_1019, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1015));
        float _1394 = _1015 + _804;
        float _1395 = _1019 + _805;
        float _1396 = _1023 + _806;
        float _1406 = fma(_1396, cbModelParam._m0[30u].z, fma(_1395, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1394)) - _1363;
        float _1407 = fma(_1396, cbModelParam._m0[31u].z, fma(_1395, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1394)) - _1367;
        float _1408 = fma(_1396, cbModelParam._m0[32u].z, fma(_1395, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1394)) - _1371;
        float _1412 = inversesqrt(dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408)));
        float _1425 = ((_1412 * _1406) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1363 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1412 * _1407) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1367 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1412 * _1408) / cbModelParam._m0[35u].z) + ((((((_1371 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        float _1462 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1429.x + (-0.5));
        float _1464 = _1462 * (_1429.y + (-0.5));
        float _1465 = _1462 * (_1429.z + (-0.5));
        float _1472 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1436.x + (-0.5));
        float _1474 = _1472 * (_1436.y + (-0.5));
        float _1475 = _1472 * (_1436.z + (-0.5));
        float _1482 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1443.x + (-0.5));
        float _1484 = _1482 * (_1443.y + (-0.5));
        float _1485 = _1482 * (_1443.z + (-0.5));
        float _1492 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1450.x + (-0.5));
        float _1494 = _1492 * (_1450.y + (-0.5));
        float _1495 = _1492 * (_1450.z + (-0.5));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = _1463 * 0.5;
        float _1500 = _1473 * 0.5;
        float _1501 = _1483 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_804, _805, _806), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _3985 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1526 + 1.0))) + _1531) * _1496;
        float _1541 = _1464 * 0.5;
        float _1542 = _1474 * 0.5;
        float _1543 = _1484 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_804, _805, _806), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4018 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1568 + 1.0))) + _1573) * _1497;
        float _1583 = _1465 * 0.5;
        float _1584 = _1475 * 0.5;
        float _1585 = _1485 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_804, _805, _806), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4051 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1610 + 1.0))) + _1615) * _1498;
        _1632 = _1465;
        _1633 = _1464;
        _1634 = _1463;
        _1635 = _1475;
        _1636 = _1474;
        _1637 = _1473;
        _1638 = _1485;
        _1639 = _1484;
        _1640 = _1483;
        _1641 = _1498;
        _1642 = _1497;
        _1643 = _1496;
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
    }
    else
    {
        _1632 = _1325;
        _1633 = _1325;
        _1634 = _1325;
        _1635 = _1325;
        _1636 = _1325;
        _1637 = _1325;
        _1638 = _1325;
        _1639 = _1325;
        _1640 = _1325;
        _1641 = _1325;
        _1642 = _1325;
        _1643 = _1325;
        _1644 = 0.0;
        _1645 = 0.0;
        _1646 = 0.0;
    }
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1337)) + _1337;
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1338)) + _1338;
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1339)) + _1339;
    float _1679 = fma(_1658, cbSceneParam._m0[89u].z, fma(_1657, cbSceneParam._m0[89u].y, _1656 * cbSceneParam._m0[89u].x));
    float _1682 = fma(_1658, cbSceneParam._m0[90u].z, fma(_1657, cbSceneParam._m0[90u].y, _1656 * cbSceneParam._m0[90u].x));
    float _1685 = fma(_1658, cbSceneParam._m0[91u].z, fma(_1657, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1656));
    float _1700 = _962 * 0.5;
    float _1701 = _963 * 0.5;
    float _1702 = _964 * 0.5;
    float _1703 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1706 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1709 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1743;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1716 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1324, _1328, _1331, _1334));
        float _1720 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1326, _1329, _1332, _1335));
        float _1724 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1731 = dot(vec4(cbModelParam._m0[39u]), vec4(_1700, _1701, _1702, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1731) ? 0.0 : (isnan(0.0) ? _1731 : max(0.0, _1731))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1754;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1745 = dot(vec4(cbModelParam._m0[40u]), vec4(_1700, _1701, _1702, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1758 = (_1754 * cbModelParam._m0[1u].x) + (_1743 * (1.0 - cbModelParam._m0[1u].x));
    float _1768 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _807);
    float _1769 = isnan(_1768) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1768 : min(cbModelParam._m0[25u].z, _1768));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1818 = fma(_1023, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015)) + cbModelParam._m0[13u].w;
        float _1822 = fma(_1023, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015)) + cbModelParam._m0[14u].w;
        float _1826 = fma(_1023, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015)) + cbModelParam._m0[15u].w;
        float _1829 = fma(_964, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _962));
        float _1832 = fma(_964, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _962));
        float _1835 = fma(_964, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _962));
        float _1863;
        if (_1829 > 0.0)
        {
            _1863 = abs((1.0 - _1818) / _1829);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1818 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1863 = frontier_phi_14_12_ladder;
        }
        float _2065;
        if (_1832 > 0.0)
        {
            _2065 = abs((1.0 - _1822) / _1832);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1822 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2065 = frontier_phi_23_19_ladder;
        }
        float _2308;
        if (_1835 > 0.0)
        {
            _2308 = abs((1.0 - _1826) / _1835);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1826 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2308 = frontier_phi_35_30_ladder;
        }
        float _2310 = isnan(_2065) ? _1863 : (isnan(_1863) ? _2065 : min(_1863, _2065));
        float _2311 = isnan(_2308) ? _2310 : (isnan(_2310) ? _2308 : min(_2310, _2308));
        float _2315 = (_2311 * _1829) + _1818;
        float _2316 = (_2311 * _1832) + _1822;
        float _2317 = (_2311 * _1835) + _1826;
        float _2318 = _2311 * 9.9999997473787516355514526367188e-05;
        float _2320 = (-1.0) - _2318;
        float _2322 = _2318 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2317 > _2322) || ((_2317 < _2320) || ((_2316 > _2322) || ((_2316 < _2320) || ((_2315 < _2320) || (_2315 > _2322))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2317, cbModelParam._m0[9u].z, fma(_2316, cbModelParam._m0[9u].y, _2315 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2317, cbModelParam._m0[10u].z, fma(_2316, cbModelParam._m0[10u].y, _2315 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2317, cbModelParam._m0[11u].z, fma(_2316, cbModelParam._m0[11u].y, _2315 * cbModelParam._m0[11u].x))), _1769);
            frontier_phi_13_35_ladder = _2441.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2441.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2441.x * cbModelParam._m0[1u].y;
        }
        _1851 = frontier_phi_13_35_ladder_2;
        _1853 = frontier_phi_13_35_ladder_1;
        _1855 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_962, _963, _964), _1769);
        _1851 = _1839.x * cbModelParam._m0[1u].y;
        _1853 = _1839.y * cbModelParam._m0[1u].y;
        _1855 = _1839.z * cbModelParam._m0[1u].y;
    }
    float _1859 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _807);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1859 : min(cbModelParam._m0[25u].w, _1859));
    float _1951;
    float _1953;
    float _1955;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1915 = fma(_1023, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015)) + cbModelParam._m0[21u].w;
        float _1919 = fma(_1023, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015)) + cbModelParam._m0[22u].w;
        float _1923 = fma(_1023, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015)) + cbModelParam._m0[23u].w;
        float _1926 = fma(_964, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _962));
        float _1929 = fma(_964, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _962));
        float _1932 = fma(_964, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _962));
        float _2070;
        if (_1926 > 0.0)
        {
            _2070 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2070 = frontier_phi_25_21_ladder;
        }
        float _2335;
        if (_1929 > 0.0)
        {
            _2335 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2335 = frontier_phi_37_32_ladder;
        }
        float _2540;
        if (_1932 > 0.0)
        {
            _2540 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2540 = frontier_phi_46_43_ladder;
        }
        float _2542 = isnan(_2335) ? _2070 : (isnan(_2070) ? _2335 : min(_2070, _2335));
        float _2543 = isnan(_2540) ? _2542 : (isnan(_2542) ? _2540 : min(_2542, _2540));
        float _2547 = (_2543 * _1926) + _1915;
        float _2548 = (_2543 * _1929) + _1919;
        float _2549 = (_2543 * _1932) + _1923;
        float _2550 = _2543 * 9.9999997473787516355514526367188e-05;
        float _2551 = (-1.0) - _2550;
        float _2553 = _2550 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2549 > _2553) || ((_2549 < _2551) || ((_2548 > _2553) || ((_2548 < _2551) || ((_2547 < _2551) || (_2547 > _2553))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2748 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2549, cbModelParam._m0[17u].z, fma(_2548, cbModelParam._m0[17u].y, _2547 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2549, cbModelParam._m0[18u].z, fma(_2548, cbModelParam._m0[18u].y, _2547 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2549, cbModelParam._m0[19u].z, fma(_2548, cbModelParam._m0[19u].y, _2547 * cbModelParam._m0[19u].x))), _1860);
            frontier_phi_22_46_ladder = _2748.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2748.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2748.x * cbModelParam._m0[1u].z;
        }
        _1951 = frontier_phi_22_46_ladder_2;
        _1953 = frontier_phi_22_46_ladder_1;
        _1955 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_962, _963, _964), _1860);
        _1951 = _1935.x * cbModelParam._m0[1u].z;
        _1953 = _1935.y * cbModelParam._m0[1u].z;
        _1955 = _1935.z * cbModelParam._m0[1u].z;
    }
    float _1967 = ((((1.0 - _983) * ((_970 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_983 * _970)) * _954;
    float _1968 = _1967 * ((cbModelParam._m0[1u].w * (_1951 - _1851)) + _1851);
    float _1969 = _1967 * ((cbModelParam._m0[1u].w * (_1953 - _1853)) + _1853);
    float _1970 = _1967 * ((cbModelParam._m0[1u].w * (_1955 - _1855)) + _1855);
    float _1973 = fma(_1970, cbSceneParam._m0[89u].z, fma(_1969, cbSceneParam._m0[89u].y, _1968 * cbSceneParam._m0[89u].x));
    float _1976 = fma(_1970, cbSceneParam._m0[90u].z, fma(_1969, cbSceneParam._m0[90u].y, _1968 * cbSceneParam._m0[90u].x));
    float _1979 = fma(_1970, cbSceneParam._m0[91u].z, fma(_1969, cbSceneParam._m0[91u].y, _1968 * cbSceneParam._m0[91u].x));
    uvec4 _1989 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _1991 = _1989.x * 14u;
    uint _1992 = _1991 + 13u;
    float _1999 = _954 + (-1.0);
    float _2004 = (cbLight._m0[_1992].x * _1999) + 1.0;
    float _2005 = (cbLight._m0[_1992].y * _1999) + 1.0;
    float _2006 = (cbLight._m0[_1992].z * _1999) + 1.0;
    float _2007 = (cbLight._m0[_1992].w * _1999) + 1.0;
    uint _2008 = _1991 + 5u;
    float _2014 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
    uint _2018 = _1991 + 4u;
    float _2024 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
    uint _2028 = _1991 | 1u;
    float _2039 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_804, _805, _806));
    float _2042 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_804, _805, _806));
    float _4187 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _4198 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2047 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _2049 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * 0.3183098733425140380859375;
    float _2056 = ((cbLight._m0[_2008].x * _2014) * _2049) + ((cbLight._m0[_2018].x * _2024) * _2047);
    float _2057 = ((_2014 * cbLight._m0[_2008].y) * _2049) + ((_2024 * cbLight._m0[_2018].y) * _2047);
    float _2058 = ((_2014 * cbLight._m0[_2008].z) * _2049) + ((_2024 * cbLight._m0[_2018].z) * _2047);
    uvec4 _2062 = floatBitsToUint(cbLight._m0[_1991 + 12u]);
    bool _2064 = _2062.x == 0u;
    float _2075;
    float _2077;
    float _2079;
    if (_2064)
    {
        _2075 = _2056;
        _2077 = _2057;
        _2079 = _2058;
    }
    else
    {
        uint _2083 = _1991 + 6u;
        float _2099 = (dot(vec3(cbLight._m0[_1991 + 2u].xyz), vec3(_804, _805, _806)) * 0.5) + 0.5;
        float _2100 = _2099 * _2099;
        float _4209 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2101 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2102 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
        _2075 = (((cbLight._m0[_2083].x * 0.3183098733425140380859375) * _2101) * _2102) + _2056;
        _2077 = (((cbLight._m0[_2083].y * 0.3183098733425140380859375) * _2101) * _2102) + _2057;
        _2079 = (((cbLight._m0[_2083].z * 0.3183098733425140380859375) * _2101) * _2102) + _2058;
    }
    bool _2082 = _2062.y == 0u;
    float _2120;
    float _2122;
    float _2124;
    if (_2082)
    {
        _2120 = _2075;
        _2122 = _2077;
        _2124 = _2079;
    }
    else
    {
        uint _2279 = _1991 + 7u;
        float _2295 = (dot(vec3(cbLight._m0[_1991 + 3u].xyz), vec3(_804, _805, _806)) * 0.5) + 0.5;
        float _2296 = _2295 * _2295;
        float _4225 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2297 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2298 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2120 = (((cbLight._m0[_2279].x * 0.3183098733425140380859375) * _2297) * _2298) + _2075;
        _2122 = (((cbLight._m0[_2279].y * 0.3183098733425140380859375) * _2297) * _2298) + _2077;
        _2124 = (((cbLight._m0[_2279].z * 0.3183098733425140380859375) * _2297) * _2298) + _2079;
    }
    uint _2127 = _1991 + 8u;
    float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _807) * 0.949999988079071044921875);
    float _2141 = _2140 * _2140;
    float _2142 = cbLight._m0[_1991].x + _883;
    float _2143 = cbLight._m0[_1991].y + _884;
    float _2144 = cbLight._m0[_1991].z + _885;
    float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
    float _2149 = _2148 * _2142;
    float _2150 = _2148 * _2143;
    float _2151 = _2148 * _2144;
    float _2152 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_1991].xyz));
    float _4241 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _2156 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2157 = dot(vec3(_804, _805, _806), vec3(_2149, _2150, _2151));
    float _4263 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2161 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2149, _2150, _2151));
    float _4274 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2165 = _2141 * _2141;
    float _2169 = ((_2160 * _2160) * (_2165 + (-1.0))) + 1.0;
    float _2180 = (exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2181 = 1.0 - _2141;
    float _2192 = (0.5 / (((_2156 * ((_2155 * _2181) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2181) + _2141) * _2155))) * _2155;
    float _4285 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2194 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2165 / ((_2169 * _2169) * 3.141590118408203125));
    uint _2205 = _1991 + 9u;
    float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _807) * 0.949999988079071044921875);
    float _2217 = _2216 * _2216;
    float _2218 = cbLight._m0[_2028].x + _883;
    float _2219 = cbLight._m0[_2028].y + _884;
    float _2220 = cbLight._m0[_2028].z + _885;
    float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
    float _2225 = _2224 * _2218;
    float _2226 = _2224 * _2219;
    float _2227 = _2224 * _2220;
    float _2228 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2028].xyz));
    float _4296 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2232 = dot(vec3(_804, _805, _806), vec3(_2225, _2226, _2227));
    float _4307 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2236 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2225, _2226, _2227));
    float _4318 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2240 = _2217 * _2217;
    float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
    float _2253 = (exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2254 = 1.0 - _2217;
    float _2264 = (0.5 / (((_2156 * ((_2231 * _2254) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2254) + _2217) * _2231))) * _2231;
    float _4329 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2266 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
    float _2276 = (((_2253 * cbLight._m0[_2205].x) * _2266) * _2014) + (((_2180 * cbLight._m0[_2127].x) * _2194) * _2024);
    float _2277 = (((_2253 * cbLight._m0[_2205].y) * _2266) * _2014) + (((_2180 * cbLight._m0[_2127].y) * _2194) * _2024);
    float _2278 = (((_2253 * cbLight._m0[_2205].z) * _2266) * _2014) + (((_2180 * cbLight._m0[_2127].z) * _2194) * _2024);
    float _2340;
    float _2342;
    float _2344;
    if (_2064)
    {
        _2340 = _2276;
        _2342 = _2277;
        _2344 = _2278;
    }
    else
    {
        uint _2346 = _1991 + 2u;
        uint _2350 = _1991 + 10u;
        float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _807) * 0.949999988079071044921875);
        float _2365 = _2364 * _2364;
        float _2366 = cbLight._m0[_2346].x + _883;
        float _2367 = cbLight._m0[_2346].y + _884;
        float _2368 = cbLight._m0[_2346].z + _885;
        float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
        float _2373 = _2372 * _2366;
        float _2374 = _2372 * _2367;
        float _2375 = _2372 * _2368;
        float _2376 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2346].xyz));
        float _4340 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2380 = dot(vec3(_804, _805, _806), vec3(_2373, _2374, _2375));
        float _4351 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2384 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2373, _2374, _2375));
        float _4362 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2388 = _2365 * _2365;
        float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
        float _2401 = (exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2402 = 1.0 - _2365;
        float _2412 = (0.5 / (((_2156 * ((_2379 * _2402) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2402) + _2365) * _2379))) * _2379;
        float _4373 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2414 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
        float _2415 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
        _2340 = (((_2401 * cbLight._m0[_2350].x) * _2414) * _2415) + _2276;
        _2342 = (((_2401 * cbLight._m0[_2350].y) * _2414) * _2415) + _2277;
        _2344 = (((_2401 * cbLight._m0[_2350].z) * _2414) * _2415) + _2278;
    }
    float _2450;
    float _2452;
    float _2454;
    if (_2082)
    {
        _2450 = _2340;
        _2452 = _2342;
        _2454 = _2344;
    }
    else
    {
        uint _2461 = _1991 + 3u;
        uint _2465 = _1991 + 11u;
        float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _807) * 0.949999988079071044921875);
        float _2480 = _2479 * _2479;
        float _2481 = cbLight._m0[_2461].x + _883;
        float _2482 = cbLight._m0[_2461].y + _884;
        float _2483 = cbLight._m0[_2461].z + _885;
        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
        float _2488 = _2487 * _2481;
        float _2489 = _2487 * _2482;
        float _2490 = _2487 * _2483;
        float _2491 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2461].xyz));
        float _4389 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2495 = dot(vec3(_804, _805, _806), vec3(_2488, _2489, _2490));
        float _4400 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2499 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2488, _2489, _2490));
        float _4411 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2503 = _2480 * _2480;
        float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
        float _2516 = (exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2517 = 1.0 - _2480;
        float _2527 = (0.5 / (((_2156 * ((_2494 * _2517) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2517) + _2480) * _2494))) * _2494;
        float _4422 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2529 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
        float _2530 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2450 = (((_2516 * cbLight._m0[_2465].x) * _2529) * _2530) + _2340;
        _2452 = (((_2516 * cbLight._m0[_2465].y) * _2529) * _2530) + _2342;
        _2454 = (((_2516 * cbLight._m0[_2465].z) * _2529) * _2530) + _2344;
    }
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    if (_1989.y == 0u)
    {
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2606 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2605;
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2605;
        float _2608 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2605;
        uvec4 _2620 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2621 = _2620.x;
        uint _2632 = uint((float(_2620.y) * floor(float(uint(cbSceneParam._m0[85u].y * _892) / _2621))) + floor(float(uint(cbSceneParam._m0[85u].x * _891) / _2621)));
        float _2642 = (log2(_2608 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2643 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        uint _2646 = uint(isnan(14.0) ? _2643 : (isnan(_2643) ? 14.0 : min(_2643, 14.0)));
        uvec4 _2651 = texelFetch(g_lightClusterGridBuffer, int(((_2646 << 2u) + (_2632 << 6u)) >> 2u));
        uint _2652 = _2651.x;
        uint _2653 = _2620.z;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        if (((((1u << ((_2653 >> 4u) & 15u)) + 4294967295u) & _2652) == 0u) || ((_2653 & 240u) == 0u))
        {
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
        }
        else
        {
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            uint _2904 = 0u;
            uint _2913;
            bool _2914;
            for (;;)
            {
                _2913 = texelFetch(g_lightClassification, int((((_2646 << 5u) + (_2632 << 9u)) + (_2904 << 2u)) >> 2u)).x;
                _2914 = _2913 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2914)
                {
                    frontier_phi_61_pred = _2898;
                    frontier_phi_61_pred_1 = _2903;
                    frontier_phi_61_pred_2 = _2902;
                    frontier_phi_61_pred_3 = _2901;
                    frontier_phi_61_pred_4 = _2900;
                    frontier_phi_61_pred_5 = _2899;
                }
                else
                {
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    uint _3028;
                    _3022 = _2898;
                    _3023 = _2899;
                    _3024 = _2900;
                    _3025 = _2901;
                    _3026 = _2902;
                    _3027 = _2903;
                    _3028 = _2913;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    for (;;)
                    {
                        uint _3032 = uint(findLSB(_3028)) + (_2904 << 5u);
                        uint _3029 = (_3028 + 4294967295u) & _3028;
                        uint _3034 = _3032 * 48u;
                        vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 3u)).x));
                        uint _3054 = (_3032 * 48u) + 4u;
                        vec4 _3067 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3054)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 3u)).x));
                        uint _3073 = (_3032 * 48u) + 8u;
                        vec3 _3084 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3073)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 2u)).x));
                        float _3088 = _3048.x - _2606;
                        float _3089 = _3048.y - _2607;
                        float _3090 = _3048.z - _2608;
                        float _3091 = dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090));
                        float _3094 = inversesqrt(_3091);
                        float _3095 = _3094 * _3088;
                        float _3096 = _3094 * _3089;
                        float _3097 = _3094 * _3090;
                        float _3098 = dot(vec3(_910, _913, _916), vec3(_3095, _3096, _3097));
                        float _3103 = 1.0 - (_3091 * _3048.w);
                        float _4448 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3104 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3105 = sqrt(_3091) * _3067.w;
                        float _3108 = 1.39999997615814208984375 / (_3105 + 1.39999997615814208984375);
                        float _3109 = _3108 * _3108;
                        float _3112 = ((1.0 - _3109) * _3098) + _3109;
                        float _3115 = _3105 * _3105;
                        float _3119 = ((isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))) * _3104) / ((_3115 * 0.699999988079071044921875) + 1.0);
                        float _3123 = (-0.0) - _2606;
                        float _3124 = (-0.0) - _2607;
                        float _3125 = (-0.0) - _2608;
                        float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                        float _3130 = _3129 * _3123;
                        float _3131 = _3129 * _3124;
                        float _3132 = _3129 * _3125;
                        float _3140 = exp2(log2(1.0 / ((_3115 * 3.5) + 5.0)) * 0.25);
                        float _3141 = 1.0 - _970;
                        float _3148 = sqrt(1.0 - ((1.0 - (_3141 * _3141)) * (1.0 - (_3140 * _3140))));
                        float _3149 = _3148 * _3148;
                        float _3150 = _3149 * _3149;
                        float _3151 = _3130 + _3095;
                        float _3152 = _3131 + _3096;
                        float _3153 = _3132 + _3097;
                        float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
                        float _3161 = dot(vec3(_910, _913, _916), vec3(_3130, _3131, _3132));
                        float _4464 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3164 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3165 = dot(vec3(_910, _913, _916), vec3(_3157 * _3151, _3157 * _3152, _3157 * _3153));
                        float _4475 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3168 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3172 = ((_3168 * _3168) * (_3150 + (-1.0))) + 1.0;
                        float _3173 = _3108 * _3149;
                        float _3174 = _3173 * _3173;
                        float _3177 = ((1.0 - _3174) * _3098) + _3174;
                        float _4486 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3178 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3179 = 1.0 - _3149;
                        float _3189 = (0.5 / (((_3178 * ((_3164 * _3179) + _3149)) + 9.9999999392252902907785028219223e-09) + (((_3178 * _3179) + _3149) * _3164))) * _3178;
                        float _4497 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3200 = (((_3150 * 3.1415927410125732421875) * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) / ((_3172 * _3172) * ((_3115 * 2.1991131305694580078125) + 3.141590118408203125))) * _3104;
                        _2957 = (_3119 * _3067.x) + _3025;
                        _2958 = (_3119 * _3067.y) + _3026;
                        _2959 = (_3119 * _3067.z) + _3027;
                        _2954 = (_3200 * _3084.x) + _3022;
                        _2955 = (_3200 * _3084.y) + _3023;
                        _2956 = (_3200 * _3084.z) + _3024;
                        if (_3029 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3022 = _2954;
                            _3023 = _2955;
                            _3024 = _2956;
                            _3025 = _2957;
                            _3026 = _2958;
                            _3027 = _2959;
                            _3028 = _3029;
                        }
                    }
                    frontier_phi_61_pred = _2954;
                    frontier_phi_61_pred_1 = _2959;
                    frontier_phi_61_pred_2 = _2958;
                    frontier_phi_61_pred_3 = _2957;
                    frontier_phi_61_pred_4 = _2956;
                    frontier_phi_61_pred_5 = _2955;
                }
                _2754 = frontier_phi_61_pred;
                _2764 = frontier_phi_61_pred_1;
                _2762 = frontier_phi_61_pred_2;
                _2760 = frontier_phi_61_pred_3;
                _2758 = frontier_phi_61_pred_4;
                _2756 = frontier_phi_61_pred_5;
                uint _2905 = _2904 + 1u;
                if (_2905 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2898 = _2754;
                    _2899 = _2756;
                    _2900 = _2758;
                    _2901 = _2760;
                    _2902 = _2762;
                    _2903 = _2764;
                    _2904 = _2905;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
        }
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.z;
        uint _2770 = (_2768 >> 8u) & 15u;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        if (((4294967295u << _2770) & _2652) == 0u)
        {
            _2866 = _2753;
            _2868 = _2755;
            _2870 = _2757;
            _2872 = _2759;
            _2874 = _2761;
            _2876 = _2763;
        }
        else
        {
            float _2891 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
            float _2892 = _2891 * _2606;
            float _2893 = _2891 * _2607;
            float _2894 = _2891 * _2608;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2770 < ((_2768 >> 12u) & 15u))
            {
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _3005 = _2753;
                float _3006 = _2755;
                float _3007 = _2757;
                float _3008 = _2759;
                float _3009 = _2761;
                float _3010 = _2763;
                uint _3011 = _2770;
                uint _3020;
                bool _3021;
                for (;;)
                {
                    _3020 = texelFetch(g_lightClassification, int((((_2646 << 5u) + (_2632 << 9u)) + (_3011 << 2u)) >> 2u)).x;
                    _3021 = _3020 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3021)
                    {
                        frontier_phi_67_pred = _3008;
                        frontier_phi_67_pred_1 = _3009;
                        frontier_phi_67_pred_2 = _3010;
                        frontier_phi_67_pred_3 = _3007;
                        frontier_phi_67_pred_4 = _3006;
                        frontier_phi_67_pred_5 = _3005;
                    }
                    else
                    {
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3218 = _3005;
                        float _3219 = _3006;
                        float _3220 = _3007;
                        float _3221 = _3008;
                        float _3222 = _3009;
                        float _3223 = _3010;
                        uint _3224 = _3020;
                        uint _3225;
                        vec4 _3250;
                        float _3251;
                        vec4 _3266;
                        vec3 _3278;
                        vec4 _3293;
                        vec4 _3308;
                        float _3354;
                        bool _3355;
                        for (;;)
                        {
                            uint _3235 = ((_3011 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3224));
                            _3225 = (_3224 + 4294967295u) & _3224;
                            uint _3237 = _3235 * 40u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            _3251 = _3250.w;
                            uint _3253 = (_3235 * 40u) + 4u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3268 = (_3235 * 40u) + 8u;
                            _3278 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x));
                            uint _3280 = (_3235 * 40u) + 16u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3295 = (_3235 * 40u) + 20u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3310 = (_3235 * 40u) + 24u;
                            vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3329 = (_3235 * 40u) + 28u;
                            vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            _3354 = fma(_2608, _3342.z, fma(_2607, _3342.y, _3342.x * _2606)) + _3342.w;
                            _3355 = !((fma(_2608, _3323.z, fma(_2607, _3323.y, _3323.x * _2606)) + _3323.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3355)
                            {
                                float _3382 = _3250.x - _2606;
                                float _3383 = _3250.y - _2607;
                                float _3384 = _3250.z - _2608;
                                float _3385 = dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384));
                                float _3388 = inversesqrt(_3385);
                                float _3389 = _3388 * _3382;
                                float _3390 = _3388 * _3383;
                                float _3391 = _3388 * _3384;
                                float _3395 = 1.0 - (_3385 / (_3251 * _3251));
                                float _4508 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3400 = sqrt(_3385) * _3266.w;
                                float _3402 = 1.39999997615814208984375 / (_3400 + 1.39999997615814208984375);
                                float _3403 = _3402 * _3402;
                                float _3406 = ((1.0 - _3403) * dot(vec3(_3389, _3390, _3391), vec3(_910, _913, _916))) + _3403;
                                float _3409 = _3400 * _3400;
                                float _3413 = (fma(_2608, _3293.z, fma(_2607, _3293.y, _3293.x * _2606)) + _3293.w) / _3354;
                                float _3414 = (fma(_2608, _3308.z, fma(_2607, _3308.y, _3308.x * _2606)) + _3308.w) / _3354;
                                float _3418 = 1.0 - dot(vec2(_3413, _3414), vec2(_3413, _3414));
                                float _4524 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3420 = _3419 * (((isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0))) * _3396) / ((_3409 * 0.699999988079071044921875) + 1.0));
                                float _3432 = exp2(log2(1.0 / ((_3409 * 3.5) + 5.0)) * 0.25);
                                float _3433 = 1.0 - _970;
                                float _3440 = sqrt(1.0 - ((1.0 - (_3433 * _3433)) * (1.0 - (_3432 * _3432))));
                                float _3441 = _3440 * _3440;
                                float _3442 = _3441 * _3441;
                                float _3443 = _3389 - _2892;
                                float _3444 = _3390 - _2893;
                                float _3445 = _3391 - _2894;
                                float _3449 = inversesqrt(dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445)));
                                float _3453 = dot(vec3(_910, _913, _916), vec3((-0.0) - _2892, (-0.0) - _2893, (-0.0) - _2894));
                                float _4535 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3456 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3457 = dot(vec3(_910, _913, _916), vec3(_3449 * _3443, _3449 * _3444, _3449 * _3445));
                                float _4546 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3460 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3464 = ((_3460 * _3460) * (_3442 + (-1.0))) + 1.0;
                                float _3465 = _3402 * _3441;
                                float _3466 = _3465 * _3465;
                                float _3472 = ((1.0 - _3466) * dot(vec3(_910, _913, _916), vec3(_3389, _3390, _3391))) + _3466;
                                float _4557 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3474 = 1.0 - _3441;
                                float _3484 = (0.5 / (((_3473 * ((_3456 * _3474) + _3441)) + 9.9999999392252902907785028219223e-09) + (((_3473 * _3474) + _3441) * _3456))) * _3473;
                                float _4568 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3494 = (_3419 * _3396) * (((_3442 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3464 * _3464) * ((_3409 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3494 * _3278.x;
                                frontier_phi_73_pred_1 = _3494 * _3278.y;
                                frontier_phi_73_pred_2 = _3420 * _3266.z;
                                frontier_phi_73_pred_3 = _3420 * _3266.y;
                                frontier_phi_73_pred_4 = _3420 * _3266.x;
                                frontier_phi_73_pred_5 = _3494 * _3278.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3498 = frontier_phi_73_pred;
                            _3499 = frontier_phi_73_pred_1;
                            _3503 = frontier_phi_73_pred_2;
                            _3502 = frontier_phi_73_pred_3;
                            _3501 = frontier_phi_73_pred_4;
                            _3500 = frontier_phi_73_pred_5;
                            _3208 = _3501 + _3221;
                            _3209 = _3502 + _3222;
                            _3210 = _3503 + _3223;
                            _3205 = _3498 + _3218;
                            _3206 = _3499 + _3219;
                            _3207 = _3500 + _3220;
                            if (_3225 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3225;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3208;
                        frontier_phi_67_pred_1 = _3209;
                        frontier_phi_67_pred_2 = _3210;
                        frontier_phi_67_pred_3 = _3207;
                        frontier_phi_67_pred_4 = _3206;
                        frontier_phi_67_pred_5 = _3205;
                    }
                    _2873 = frontier_phi_67_pred;
                    _2875 = frontier_phi_67_pred_1;
                    _2877 = frontier_phi_67_pred_2;
                    _2871 = frontier_phi_67_pred_3;
                    _2869 = frontier_phi_67_pred_4;
                    _2867 = frontier_phi_67_pred_5;
                    uint _3012 = _3011 + 1u;
                    if (_3012 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3005 = _2867;
                        _3006 = _2869;
                        _3007 = _2871;
                        _3008 = _2873;
                        _3009 = _2875;
                        _3010 = _2877;
                        _3011 = _3012;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2875;
                frontier_phi_55_56_ladder_1 = _2877;
                frontier_phi_55_56_ladder_2 = _2873;
                frontier_phi_55_56_ladder_3 = _2871;
                frontier_phi_55_56_ladder_4 = _2869;
                frontier_phi_55_56_ladder_5 = _2867;
            }
            else
            {
                frontier_phi_55_56_ladder = _2761;
                frontier_phi_55_56_ladder_1 = _2763;
                frontier_phi_55_56_ladder_2 = _2759;
                frontier_phi_55_56_ladder_3 = _2757;
                frontier_phi_55_56_ladder_4 = _2755;
                frontier_phi_55_56_ladder_5 = _2753;
            }
            _2866 = frontier_phi_55_56_ladder_5;
            _2868 = frontier_phi_55_56_ladder_4;
            _2870 = frontier_phi_55_56_ladder_3;
            _2872 = frontier_phi_55_56_ladder_2;
            _2874 = frontier_phi_55_56_ladder;
            _2876 = frontier_phi_55_56_ladder_1;
        }
        float _2881 = isnan(1.0) ? _954 : (isnan(_954) ? 1.0 : min(_954, 1.0));
        _2665 = (_2881 * _2872) + _2120;
        _2667 = (_2881 * _2874) + _2122;
        _2669 = (_2881 * _2876) + _2124;
        _2671 = ((_2866 * 0.039999999105930328369140625) * _2881) + _2450;
        _2673 = ((_2868 * 0.039999999105930328369140625) * _2881) + _2452;
        _2675 = ((_2870 * 0.039999999105930328369140625) * _2881) + _2454;
    }
    else
    {
        _2665 = _2120;
        _2667 = _2122;
        _2669 = _2124;
        _2671 = _2450;
        _2673 = _2452;
        _2675 = _2454;
    }
    float _4584 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4595 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4606 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    uint _2695 = _275 + 6u;
    float _2703 = _891 / cbSceneParam._m0[86u].x;
    float _2704 = _892 / cbSceneParam._m0[86u].y;
    vec4 _2718 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2703, _2704, (log2((isnan(cbSceneParam._m0[77u].w) ? _825 : (isnan(_825) ? cbSceneParam._m0[77u].w : min(_825, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2720 = _2718.x;
    float _2721 = _2718.y;
    float _2722 = _2718.z;
    float _2723 = _2718.w;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    if (_825 > cbSceneParam._m0[78u].w)
    {
        float _2778 = isnan(_825) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _825 : min(cbSceneParam._m0[80u].w, _825));
        float _2779 = _2778 / _825;
        float _2790 = _2779 * _876;
        float _2791 = _877 * _2779;
        float _2792 = (-0.0) - _2791;
        float _2794 = _2779 * _878;
        float _2796 = (cbSceneParam._m0[77u].w * _2792) / _2778;
        float _2797 = _2796 + cbSceneParam._m0[79u].w;
        float _2798 = cbSceneParam._m0[79u].w - _2791;
        float _2804 = sqrt(((_2790 * _2790) + (_2791 * _2791)) + (_2794 * _2794));
        float _2807 = (1.0 - (cbSceneParam._m0[77u].w / _2778)) * _2804;
        float _2812 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2814 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2967;
        if (abs((_2792 - _2796) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2967 = ((((_2797 > 0.0) ? exp2(_2812 * _2797) : (2.0 - exp2(_2814 * _2797))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2807;
        }
        else
        {
            float _2927 = 1.0 / cbSceneParam._m0[80u].x;
            float _2928 = isnan(_2798) ? _2797 : (isnan(_2797) ? _2798 : max(_2797, _2798));
            float _2929 = isnan(_2798) ? _2797 : (isnan(_2797) ? _2798 : min(_2797, _2798));
            float _2938 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : min(_2928, 0.0));
            float _2939 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : min(_2929, 0.0));
            _2967 = ((abs(_2804 / _2792) * cbSceneParam._m0[80u].y) * ((((_2938 - _2939) * 2.0) - ((exp2(_2812 * (isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0)))) - exp2(_2812 * (isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0))))) * _2927)) - ((exp2(_2814 * _2938) - exp2(_2814 * _2939)) * _2927))) + (_2807 * cbSceneParam._m0[80u].z);
        }
        vec4 _2969 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2703, _2704, 1.0), 0.0);
        float _2978 = exp2((_2967 * (-1.44269502162933349609375)) * (1.0 - _2969.w));
        float _2979 = log2(_2978);
        float _2995 = log2(_2723);
        _2816 = (exp2(_2995 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2979 * cbSceneParam._m0[78u].x)) * _2969.x) / cbSceneParam._m0[78u].x)) + _2720;
        _2818 = (exp2(_2995 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2979 * cbSceneParam._m0[78u].y)) * _2969.y) / cbSceneParam._m0[78u].y)) + _2721;
        _2820 = (exp2(_2995 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2979 * cbSceneParam._m0[78u].z)) * _2969.z) / cbSceneParam._m0[78u].z)) + _2722;
        _2822 = _2978 * _2723;
    }
    else
    {
        _2816 = _2720;
        _2818 = _2721;
        _2820 = _2722;
        _2822 = _2723;
    }
    float _2834 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2835 = _2834 == 3.0;
    float _2836 = log2(_2822);
    float _2843 = exp2(_2836 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2665 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _954))) + ((_2671 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1758)) * cbPerFrame._m0[3u].x));
    float _2844 = exp2(_2836 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2667 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _954))) + ((_2673 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1758)) * cbPerFrame._m0[3u].x));
    float _2845 = exp2(_2836 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2669 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _954))) + ((_2675 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1758)) * cbPerFrame._m0[3u].x));
    float _2854 = (_2834 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2854 * (_2835 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2816)));
    SV_Target.y = _2854 * (_2835 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2818)));
    SV_Target.z = _2854 * (_2835 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2820)));
    SV_Target.w = cbInstanceData._m0[_2695].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2695].w;
}


