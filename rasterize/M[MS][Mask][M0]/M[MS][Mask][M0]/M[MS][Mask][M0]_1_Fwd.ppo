#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1014;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _265 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _271 = _265.x * cbMtdParam._m0[11u].x;
    float _272 = _265.y * cbMtdParam._m0[11u].y;
    float _273 = _265.z * cbMtdParam._m0[11u].z;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _244) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _245) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].z) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3323 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _385 = (_378 * ((_292.x * cbMtdParam._m0[12u].x) - _271)) + _271;
    float _386 = (_378 * ((_292.y * cbMtdParam._m0[12u].y) - _272)) + _272;
    float _387 = (_378 * ((_292.z * cbMtdParam._m0[12u].z) - _273)) + _273;
    vec4 _400 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _244) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _245) + cbTextureTilingScale._m0[4u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _419 = _417.x;
    float _420 = _417.y;
    float _421 = _417.z;
    float _430 = ((_400.z - _421) * _378) + _421;
    float _433 = ((((_400.x - _419) * _378) + _419) * 2.0) + (-1.0);
    float _435 = ((((_400.y - _420) * _378) + _420) * 2.0) + (-1.0);
    float _436 = dot(vec2(_433, _435), vec2(_433, _435));
    float _3334 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _441 = sqrt(1.0 - (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))));
    vec4 _457 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _469 = (((_457.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _433;
    float _470 = (((_457.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _435;
    float _474 = (cbMtdParam._m0[19u].w * (_457.z - _430)) + _430;
    float _478 = cbMtdParam._m0[22u].x + _457.w;
    float _481 = fma(_441, _211 * NORMAL.x, fma(_470, _218 * TANGENT.x, (_204 * _196) * _469));
    float _484 = fma(_441, _211 * NORMAL.y, fma(_470, _218 * TANGENT.y, (_204 * _197) * _469));
    float _487 = fma(_441, _211 * NORMAL.z, fma(_470, _218 * TANGENT.z, (_204 * _198) * _469));
    float _491 = inversesqrt(dot(vec3(_481, _484, _487), vec3(_481, _484, _487)));
    float _492 = _491 * _481;
    float _493 = _491 * _484;
    float _494 = _491 * _487;
    float _3345 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _495 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3367 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3378 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3389 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _513 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _565 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _555);
    float _566 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _555);
    float _567 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _555);
    float _571 = inversesqrt(dot(vec3(_565, _566, _567), vec3(_565, _566, _567)));
    float _572 = _565 * _571;
    float _573 = _566 * _571;
    float _574 = _567 * _571;
    float _580 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _581 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _599 = fma(_494, cbSceneParam._m0[5u].z, fma(_493, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _492));
    float _602 = fma(_494, cbSceneParam._m0[6u].z, fma(_493, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _492));
    float _605 = fma(_494, cbSceneParam._m0[7u].z, fma(_493, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _492));
    uint _619 = (_224 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _625 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) * cbInstanceData._m0[_619].x;
    float _626 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) * cbInstanceData._m0[_619].y;
    float _627 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * cbInstanceData._m0[_619].z;
    float _3400 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _3411 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _3422 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    vec4 _639 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _580, cbSceneParam._m0[86u].y * _581));
    float _643 = ((isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * TEXCOORD_5.w) * _639.x;
    float _644 = dot(vec3(_492, _493, _494), vec3(_572, _573, _574));
    float _647 = _644 * 2.0;
    float _651 = (_647 * _492) - _572;
    float _652 = (_647 * _493) - _573;
    float _653 = (_647 * _494) - _574;
    float _657 = abs(dot(vec3(_572, _573, _574), vec3(_492, _493, _494)));
    float _3433 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _659 = sqrt(_495);
    float _672 = exp2((_659 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_659 * 3.0));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1013;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _738 = fma(_712, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _704));
        float _742 = fma(_712, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _704));
        float _746 = fma(_712, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _704));
        float _771 = _704 + _492;
        float _772 = _708 + _493;
        float _773 = _712 + _494;
        float _783 = fma(_773, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771)) - _738;
        float _784 = fma(_773, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771)) - _742;
        float _785 = fma(_773, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771)) - _746;
        float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
        float _802 = ((_789 * _783) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_738 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _803 = ((_789 * _784) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_742 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _804 = ((_789 * _785) / cbModelParam._m0[34u].z) + ((((((_746 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        float _841 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_807.x + (-0.5));
        float _843 = _841 * (_807.y + (-0.5));
        float _844 = _841 * (_807.z + (-0.5));
        float _851 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_814.x + (-0.5));
        float _853 = _851 * (_814.y + (-0.5));
        float _854 = _851 * (_814.z + (-0.5));
        float _861 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_821.x + (-0.5));
        float _863 = _861 * (_821.y + (-0.5));
        float _864 = _861 * (_821.z + (-0.5));
        float _871 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_828.x + (-0.5));
        float _873 = _871 * (_828.y + (-0.5));
        float _874 = _871 * (_828.z + (-0.5));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = _842 * 0.5;
        float _879 = _852 * 0.5;
        float _880 = _862 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _895 = (dot(vec3(_492, _493, _494), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _905 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3481 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_907 + 1.0))) + _912) * _875;
        float _922 = _843 * 0.5;
        float _923 = _853 * 0.5;
        float _924 = _863 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_492, _493, _494), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3514 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_949 + 1.0))) + _954) * _876;
        float _964 = _844 * 0.5;
        float _965 = _854 * 0.5;
        float _966 = _864 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_492, _493, _494), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3547 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_991 + 1.0))) + _996) * _877;
        _1013 = _844;
        _1015 = _843;
        _1016 = _842;
        _1017 = _854;
        _1018 = _853;
        _1019 = _852;
        _1020 = _864;
        _1021 = _863;
        _1022 = _862;
        _1023 = _877;
        _1024 = _876;
        _1025 = _875;
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
    }
    else
    {
        _1013 = _1014;
        _1015 = _1014;
        _1016 = _1014;
        _1017 = _1014;
        _1018 = _1014;
        _1019 = _1014;
        _1020 = _1014;
        _1021 = _1014;
        _1022 = _1014;
        _1023 = _1014;
        _1024 = _1014;
        _1025 = _1014;
        _1026 = 0.0;
        _1027 = 0.0;
        _1028 = 0.0;
    }
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1053 = fma(_712, cbModelParam._m0[30u].z, fma(_708, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _704));
        float _1057 = fma(_712, cbModelParam._m0[31u].z, fma(_708, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _704));
        float _1061 = fma(_712, cbModelParam._m0[32u].z, fma(_708, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _704));
        float _1084 = _704 + _492;
        float _1085 = _708 + _493;
        float _1086 = _712 + _494;
        float _1096 = fma(_1086, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1084)) - _1053;
        float _1097 = fma(_1086, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1084)) - _1057;
        float _1098 = fma(_1086, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1084)) - _1061;
        float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
        float _1115 = ((_1102 * _1096) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1053 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1102 * _1097) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1057 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1102 * _1098) / cbModelParam._m0[35u].z) + ((((((_1061 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1152 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1119.x + (-0.5));
        float _1154 = _1152 * (_1119.y + (-0.5));
        float _1155 = _1152 * (_1119.z + (-0.5));
        float _1162 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1126.x + (-0.5));
        float _1164 = _1162 * (_1126.y + (-0.5));
        float _1165 = _1162 * (_1126.z + (-0.5));
        float _1172 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1133.x + (-0.5));
        float _1174 = _1172 * (_1133.y + (-0.5));
        float _1175 = _1172 * (_1133.z + (-0.5));
        float _1182 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1140.x + (-0.5));
        float _1184 = _1182 * (_1140.y + (-0.5));
        float _1185 = _1182 * (_1140.z + (-0.5));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1153 * 0.5;
        float _1190 = _1163 * 0.5;
        float _1191 = _1173 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_492, _493, _494), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3610 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1216 + 1.0))) + _1221) * _1186;
        float _1231 = _1154 * 0.5;
        float _1232 = _1164 * 0.5;
        float _1233 = _1174 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_492, _493, _494), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3643 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1258 + 1.0))) + _1263) * _1187;
        float _1273 = _1155 * 0.5;
        float _1274 = _1165 * 0.5;
        float _1275 = _1175 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_492, _493, _494), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3676 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1300 + 1.0))) + _1305) * _1188;
        _1322 = _1155;
        _1323 = _1154;
        _1324 = _1153;
        _1325 = _1165;
        _1326 = _1164;
        _1327 = _1163;
        _1328 = _1175;
        _1329 = _1174;
        _1330 = _1173;
        _1331 = _1188;
        _1332 = _1187;
        _1333 = _1186;
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
    }
    else
    {
        _1322 = _1014;
        _1323 = _1014;
        _1324 = _1014;
        _1325 = _1014;
        _1326 = _1014;
        _1327 = _1014;
        _1328 = _1014;
        _1329 = _1014;
        _1330 = _1014;
        _1331 = _1014;
        _1332 = _1014;
        _1333 = _1014;
        _1334 = 0.0;
        _1335 = 0.0;
        _1336 = 0.0;
    }
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1026)) + _1026;
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1027)) + _1027;
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1028)) + _1028;
    float _1369 = fma(_1348, cbSceneParam._m0[89u].z, fma(_1347, cbSceneParam._m0[89u].y, _1346 * cbSceneParam._m0[89u].x));
    float _1372 = fma(_1348, cbSceneParam._m0[90u].z, fma(_1347, cbSceneParam._m0[90u].y, _1346 * cbSceneParam._m0[90u].x));
    float _1375 = fma(_1348, cbSceneParam._m0[91u].z, fma(_1347, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1346));
    float _1390 = _651 * 0.5;
    float _1391 = _652 * 0.5;
    float _1392 = _653 * 0.5;
    float _1393 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1396 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1399 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1433;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1406 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1013, _1017, _1020, _1023));
        float _1410 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1414 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1016, _1019, _1022, _1025));
        float _1421 = dot(vec4(cbModelParam._m0[39u]), vec4(_1390, _1391, _1392, 1.0));
        _1433 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1433 = 1.0;
    }
    float _1444;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1435 = dot(vec4(cbModelParam._m0[40u]), vec4(_1390, _1391, _1392, 1.0));
        _1444 = dot(vec3(isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1435) ? 0.0 : (isnan(0.0) ? _1435 : max(0.0, _1435))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1444 = 1.0;
    }
    float _1448 = (_1444 * cbModelParam._m0[1u].x) + (_1433 * (1.0 - cbModelParam._m0[1u].x));
    float _1458 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _495);
    float _1459 = isnan(_1458) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1458 : min(cbModelParam._m0[25u].z, _1458));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1508 = fma(_712, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704)) + cbModelParam._m0[13u].w;
        float _1512 = fma(_712, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704)) + cbModelParam._m0[14u].w;
        float _1516 = fma(_712, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704)) + cbModelParam._m0[15u].w;
        float _1519 = fma(_653, cbModelParam._m0[13u].z, fma(_652, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _651));
        float _1522 = fma(_653, cbModelParam._m0[14u].z, fma(_652, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _651));
        float _1525 = fma(_653, cbModelParam._m0[15u].z, fma(_652, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _651));
        float _1553;
        if (_1519 > 0.0)
        {
            _1553 = abs((1.0 - _1508) / _1519);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1508 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1553 = frontier_phi_14_12_ladder;
        }
        float _1755;
        if (_1522 > 0.0)
        {
            _1755 = abs((1.0 - _1512) / _1522);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1512 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1755 = frontier_phi_23_19_ladder;
        }
        float _1998;
        if (_1525 > 0.0)
        {
            _1998 = abs((1.0 - _1516) / _1525);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1516 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1998 = frontier_phi_35_30_ladder;
        }
        float _2000 = isnan(_1755) ? _1553 : (isnan(_1553) ? _1755 : min(_1553, _1755));
        float _2001 = isnan(_1998) ? _2000 : (isnan(_2000) ? _1998 : min(_2000, _1998));
        float _2005 = (_2001 * _1519) + _1508;
        float _2006 = (_2001 * _1522) + _1512;
        float _2007 = (_2001 * _1525) + _1516;
        float _2008 = _2001 * 9.9999997473787516355514526367188e-05;
        float _2010 = (-1.0) - _2008;
        float _2012 = _2008 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2007 > _2012) || ((_2007 < _2010) || ((_2006 > _2012) || ((_2006 < _2010) || ((_2005 < _2010) || (_2005 > _2012))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2131 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2007, cbModelParam._m0[9u].z, fma(_2006, cbModelParam._m0[9u].y, _2005 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2007, cbModelParam._m0[10u].z, fma(_2006, cbModelParam._m0[10u].y, _2005 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2007, cbModelParam._m0[11u].z, fma(_2006, cbModelParam._m0[11u].y, _2005 * cbModelParam._m0[11u].x))), _1459);
            frontier_phi_13_35_ladder = _2131.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2131.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2131.x * cbModelParam._m0[1u].y;
        }
        _1541 = frontier_phi_13_35_ladder_2;
        _1543 = frontier_phi_13_35_ladder_1;
        _1545 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_651, _652, _653), _1459);
        _1541 = _1529.x * cbModelParam._m0[1u].y;
        _1543 = _1529.y * cbModelParam._m0[1u].y;
        _1545 = _1529.z * cbModelParam._m0[1u].y;
    }
    float _1549 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _495);
    float _1550 = isnan(_1549) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1549 : min(cbModelParam._m0[25u].w, _1549));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1605 = fma(_712, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704)) + cbModelParam._m0[21u].w;
        float _1609 = fma(_712, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704)) + cbModelParam._m0[22u].w;
        float _1613 = fma(_712, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704)) + cbModelParam._m0[23u].w;
        float _1616 = fma(_653, cbModelParam._m0[21u].z, fma(_652, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _651));
        float _1619 = fma(_653, cbModelParam._m0[22u].z, fma(_652, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _651));
        float _1622 = fma(_653, cbModelParam._m0[23u].z, fma(_652, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _651));
        float _1760;
        if (_1616 > 0.0)
        {
            _1760 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1760 = frontier_phi_25_21_ladder;
        }
        float _2025;
        if (_1619 > 0.0)
        {
            _2025 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2025 = frontier_phi_37_32_ladder;
        }
        float _2230;
        if (_1622 > 0.0)
        {
            _2230 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2230 = frontier_phi_46_43_ladder;
        }
        float _2232 = isnan(_2025) ? _1760 : (isnan(_1760) ? _2025 : min(_1760, _2025));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1616) + _1605;
        float _2238 = (_2233 * _1619) + _1609;
        float _2239 = (_2233 * _1622) + _1613;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2241 = (-1.0) - _2240;
        float _2243 = _2240 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2239 > _2243) || ((_2239 < _2241) || ((_2238 > _2243) || ((_2238 < _2241) || ((_2237 < _2241) || (_2237 > _2243))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2438 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2239, cbModelParam._m0[17u].z, fma(_2238, cbModelParam._m0[17u].y, _2237 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2239, cbModelParam._m0[18u].z, fma(_2238, cbModelParam._m0[18u].y, _2237 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2239, cbModelParam._m0[19u].z, fma(_2238, cbModelParam._m0[19u].y, _2237 * cbModelParam._m0[19u].x))), _1550);
            frontier_phi_22_46_ladder = _2438.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2438.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2438.x * cbModelParam._m0[1u].z;
        }
        _1641 = frontier_phi_22_46_ladder_2;
        _1643 = frontier_phi_22_46_ladder_1;
        _1645 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1625 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_651, _652, _653), _1550);
        _1641 = _1625.x * cbModelParam._m0[1u].z;
        _1643 = _1625.y * cbModelParam._m0[1u].z;
        _1645 = _1625.z * cbModelParam._m0[1u].z;
    }
    float _1657 = ((((1.0 - _672) * ((_659 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_672 * _659)) * _643;
    float _1658 = _1657 * ((cbModelParam._m0[1u].w * (_1641 - _1541)) + _1541);
    float _1659 = _1657 * ((cbModelParam._m0[1u].w * (_1643 - _1543)) + _1543);
    float _1660 = _1657 * ((cbModelParam._m0[1u].w * (_1645 - _1545)) + _1545);
    float _1663 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, _1658 * cbSceneParam._m0[91u].x));
    uvec4 _1679 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1681 = _1679.x * 14u;
    uint _1682 = _1681 + 13u;
    float _1689 = _643 + (-1.0);
    float _1694 = (cbLight._m0[_1682].x * _1689) + 1.0;
    float _1695 = (cbLight._m0[_1682].y * _1689) + 1.0;
    float _1696 = (cbLight._m0[_1682].z * _1689) + 1.0;
    float _1697 = (cbLight._m0[_1682].w * _1689) + 1.0;
    uint _1698 = _1681 + 5u;
    float _1704 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
    uint _1708 = _1681 + 4u;
    float _1714 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
    uint _1718 = _1681 | 1u;
    float _1729 = dot(vec3(cbLight._m0[_1681].xyz), vec3(_492, _493, _494));
    float _1732 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_492, _493, _494));
    float _3812 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _3823 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1737 = (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.3183098733425140380859375;
    float _1739 = (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * 0.3183098733425140380859375;
    float _1746 = ((cbLight._m0[_1698].x * _1704) * _1739) + ((cbLight._m0[_1708].x * _1714) * _1737);
    float _1747 = ((_1704 * cbLight._m0[_1698].y) * _1739) + ((_1714 * cbLight._m0[_1708].y) * _1737);
    float _1748 = ((_1704 * cbLight._m0[_1698].z) * _1739) + ((_1714 * cbLight._m0[_1708].z) * _1737);
    uvec4 _1752 = floatBitsToUint(cbLight._m0[_1681 + 12u]);
    bool _1754 = _1752.x == 0u;
    float _1765;
    float _1767;
    float _1769;
    if (_1754)
    {
        _1765 = _1746;
        _1767 = _1747;
        _1769 = _1748;
    }
    else
    {
        uint _1773 = _1681 + 6u;
        float _1789 = (dot(vec3(cbLight._m0[_1681 + 2u].xyz), vec3(_492, _493, _494)) * 0.5) + 0.5;
        float _1790 = _1789 * _1789;
        float _3834 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1792 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
        _1765 = (((cbLight._m0[_1773].x * 0.3183098733425140380859375) * _1791) * _1792) + _1746;
        _1767 = (((cbLight._m0[_1773].y * 0.3183098733425140380859375) * _1791) * _1792) + _1747;
        _1769 = (((cbLight._m0[_1773].z * 0.3183098733425140380859375) * _1791) * _1792) + _1748;
    }
    bool _1772 = _1752.y == 0u;
    float _1810;
    float _1812;
    float _1814;
    if (_1772)
    {
        _1810 = _1765;
        _1812 = _1767;
        _1814 = _1769;
    }
    else
    {
        uint _1969 = _1681 + 7u;
        float _1985 = (dot(vec3(cbLight._m0[_1681 + 3u].xyz), vec3(_492, _493, _494)) * 0.5) + 0.5;
        float _1986 = _1985 * _1985;
        float _3850 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1988 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
        _1810 = (((cbLight._m0[_1969].x * 0.3183098733425140380859375) * _1987) * _1988) + _1765;
        _1812 = (((cbLight._m0[_1969].y * 0.3183098733425140380859375) * _1987) * _1988) + _1767;
        _1814 = (((cbLight._m0[_1969].z * 0.3183098733425140380859375) * _1987) * _1988) + _1769;
    }
    uint _1817 = _1681 + 8u;
    float _1830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1681].w)) * _495) * 0.949999988079071044921875);
    float _1831 = _1830 * _1830;
    float _1832 = cbLight._m0[_1681].x + _572;
    float _1833 = cbLight._m0[_1681].y + _573;
    float _1834 = cbLight._m0[_1681].z + _574;
    float _1838 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
    float _1839 = _1838 * _1832;
    float _1840 = _1838 * _1833;
    float _1841 = _1838 * _1834;
    float _1842 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_1681].xyz));
    float _3866 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _1846 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _1847 = dot(vec3(_492, _493, _494), vec3(_1839, _1840, _1841));
    float _3888 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _1851 = dot(vec3(cbLight._m0[_1681].xyz), vec3(_1839, _1840, _1841));
    float _3899 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1855 = _1831 * _1831;
    float _1859 = ((_1850 * _1850) * (_1855 + (-1.0))) + 1.0;
    float _1870 = (exp2(log2(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1871 = 1.0 - _1831;
    float _1882 = (0.5 / (((_1846 * ((_1845 * _1871) + _1831)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _1871) + _1831) * _1845))) * _1845;
    float _3910 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1884 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1855 / ((_1859 * _1859) * 3.141590118408203125));
    uint _1895 = _1681 + 9u;
    float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1718].w)) * _495) * 0.949999988079071044921875);
    float _1907 = _1906 * _1906;
    float _1908 = cbLight._m0[_1718].x + _572;
    float _1909 = cbLight._m0[_1718].y + _573;
    float _1910 = cbLight._m0[_1718].z + _574;
    float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
    float _1915 = _1914 * _1908;
    float _1916 = _1914 * _1909;
    float _1917 = _1914 * _1910;
    float _1918 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_1718].xyz));
    float _3921 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1922 = dot(vec3(_492, _493, _494), vec3(_1915, _1916, _1917));
    float _3932 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1926 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_1915, _1916, _1917));
    float _3943 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1930 = _1907 * _1907;
    float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
    float _1943 = (exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1944 = 1.0 - _1907;
    float _1954 = (0.5 / (((_1846 * ((_1921 * _1944) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _1944) + _1907) * _1921))) * _1921;
    float _3954 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1956 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
    float _1966 = (((_1943 * cbLight._m0[_1895].x) * _1956) * _1704) + (((_1870 * cbLight._m0[_1817].x) * _1884) * _1714);
    float _1967 = (((_1943 * cbLight._m0[_1895].y) * _1956) * _1704) + (((_1870 * cbLight._m0[_1817].y) * _1884) * _1714);
    float _1968 = (((_1943 * cbLight._m0[_1895].z) * _1956) * _1704) + (((_1870 * cbLight._m0[_1817].z) * _1884) * _1714);
    float _2030;
    float _2032;
    float _2034;
    if (_1754)
    {
        _2030 = _1966;
        _2032 = _1967;
        _2034 = _1968;
    }
    else
    {
        uint _2036 = _1681 + 2u;
        uint _2040 = _1681 + 10u;
        float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _495) * 0.949999988079071044921875);
        float _2055 = _2054 * _2054;
        float _2056 = cbLight._m0[_2036].x + _572;
        float _2057 = cbLight._m0[_2036].y + _573;
        float _2058 = cbLight._m0[_2036].z + _574;
        float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
        float _2063 = _2062 * _2056;
        float _2064 = _2062 * _2057;
        float _2065 = _2062 * _2058;
        float _2066 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_2036].xyz));
        float _3965 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _2070 = dot(vec3(_492, _493, _494), vec3(_2063, _2064, _2065));
        float _3976 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _2074 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2063, _2064, _2065));
        float _3987 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2078 = _2055 * _2055;
        float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
        float _2091 = (exp2(log2(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2092 = 1.0 - _2055;
        float _2102 = (0.5 / (((_1846 * ((_2069 * _2092) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _2092) + _2055) * _2069))) * _2069;
        float _3998 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2104 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
        float _2105 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
        _2030 = (((_2091 * cbLight._m0[_2040].x) * _2104) * _2105) + _1966;
        _2032 = (((_2091 * cbLight._m0[_2040].y) * _2104) * _2105) + _1967;
        _2034 = (((_2091 * cbLight._m0[_2040].z) * _2104) * _2105) + _1968;
    }
    float _2140;
    float _2142;
    float _2144;
    if (_1772)
    {
        _2140 = _2030;
        _2142 = _2032;
        _2144 = _2034;
    }
    else
    {
        uint _2151 = _1681 + 3u;
        uint _2155 = _1681 + 11u;
        float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _495) * 0.949999988079071044921875);
        float _2170 = _2169 * _2169;
        float _2171 = cbLight._m0[_2151].x + _572;
        float _2172 = cbLight._m0[_2151].y + _573;
        float _2173 = cbLight._m0[_2151].z + _574;
        float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
        float _2178 = _2177 * _2171;
        float _2179 = _2177 * _2172;
        float _2180 = _2177 * _2173;
        float _2181 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_2151].xyz));
        float _4014 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _2185 = dot(vec3(_492, _493, _494), vec3(_2178, _2179, _2180));
        float _4025 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _2189 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2178, _2179, _2180));
        float _4036 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2193 = _2170 * _2170;
        float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
        float _2206 = (exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2207 = 1.0 - _2170;
        float _2217 = (0.5 / (((_1846 * ((_2184 * _2207) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _2207) + _2170) * _2184))) * _2184;
        float _4047 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2219 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
        float _2220 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
        _2140 = (((_2206 * cbLight._m0[_2155].x) * _2219) * _2220) + _2030;
        _2142 = (((_2206 * cbLight._m0[_2155].y) * _2219) * _2220) + _2032;
        _2144 = (((_2206 * cbLight._m0[_2155].z) * _2219) * _2220) + _2034;
    }
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    float _2363;
    float _2365;
    if (_1679.y == 0u)
    {
        float _2295 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2296 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2295;
        float _2297 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2295;
        float _2298 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2295;
        uvec4 _2310 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2311 = _2310.x;
        uint _2322 = uint((float(_2310.y) * floor(float(uint(cbSceneParam._m0[85u].y * _581) / _2311))) + floor(float(uint(cbSceneParam._m0[85u].x * _580) / _2311)));
        float _2332 = (log2(_2298 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2333 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        uint _2336 = uint(isnan(14.0) ? _2333 : (isnan(_2333) ? 14.0 : min(_2333, 14.0)));
        uvec4 _2341 = texelFetch(g_lightClusterGridBuffer, int(((_2336 << 2u) + (_2322 << 6u)) >> 2u));
        uint _2342 = _2341.x;
        uint _2343 = _2310.z;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        if (((((1u << ((_2343 >> 4u) & 15u)) + 4294967295u) & _2342) == 0u) || ((_2343 & 240u) == 0u))
        {
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
            _2451 = 0.0;
            _2453 = 0.0;
        }
        else
        {
            float _2444;
            float _2446;
            float _2448;
            float _2450;
            float _2452;
            float _2454;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            uint _2594 = 0u;
            uint _2603;
            bool _2604;
            for (;;)
            {
                _2603 = texelFetch(g_lightClassification, int((((_2336 << 5u) + (_2322 << 9u)) + (_2594 << 2u)) >> 2u)).x;
                _2604 = _2603 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2604)
                {
                    frontier_phi_61_pred = _2588;
                    frontier_phi_61_pred_1 = _2593;
                    frontier_phi_61_pred_2 = _2592;
                    frontier_phi_61_pred_3 = _2591;
                    frontier_phi_61_pred_4 = _2590;
                    frontier_phi_61_pred_5 = _2589;
                }
                else
                {
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    uint _2718;
                    _2712 = _2588;
                    _2713 = _2589;
                    _2714 = _2590;
                    _2715 = _2591;
                    _2716 = _2592;
                    _2717 = _2593;
                    _2718 = _2603;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    for (;;)
                    {
                        uint _2722 = uint(findLSB(_2718)) + (_2594 << 5u);
                        uint _2719 = (_2718 + 4294967295u) & _2718;
                        uint _2724 = _2722 * 48u;
                        vec4 _2738 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 3u)).x));
                        uint _2744 = (_2722 * 48u) + 4u;
                        vec4 _2757 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 3u)).x));
                        uint _2763 = (_2722 * 48u) + 8u;
                        vec3 _2774 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x));
                        float _2778 = _2738.x - _2296;
                        float _2779 = _2738.y - _2297;
                        float _2780 = _2738.z - _2298;
                        float _2781 = dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780));
                        float _2784 = inversesqrt(_2781);
                        float _2785 = _2784 * _2778;
                        float _2786 = _2784 * _2779;
                        float _2787 = _2784 * _2780;
                        float _2788 = dot(vec3(_599, _602, _605), vec3(_2785, _2786, _2787));
                        float _2793 = 1.0 - (_2781 * _2738.w);
                        float _4073 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2794 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                        float _2795 = sqrt(_2781) * _2757.w;
                        float _2798 = 1.39999997615814208984375 / (_2795 + 1.39999997615814208984375);
                        float _2799 = _2798 * _2798;
                        float _2802 = ((1.0 - _2799) * _2788) + _2799;
                        float _2805 = _2795 * _2795;
                        float _2809 = ((isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))) * _2794) / ((_2805 * 0.699999988079071044921875) + 1.0);
                        float _2813 = (-0.0) - _2296;
                        float _2814 = (-0.0) - _2297;
                        float _2815 = (-0.0) - _2298;
                        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
                        float _2820 = _2819 * _2813;
                        float _2821 = _2819 * _2814;
                        float _2822 = _2819 * _2815;
                        float _2830 = exp2(log2(1.0 / ((_2805 * 3.5) + 5.0)) * 0.25);
                        float _2831 = 1.0 - _659;
                        float _2838 = sqrt(1.0 - ((1.0 - (_2831 * _2831)) * (1.0 - (_2830 * _2830))));
                        float _2839 = _2838 * _2838;
                        float _2840 = _2839 * _2839;
                        float _2841 = _2820 + _2785;
                        float _2842 = _2821 + _2786;
                        float _2843 = _2822 + _2787;
                        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
                        float _2851 = dot(vec3(_599, _602, _605), vec3(_2820, _2821, _2822));
                        float _4089 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2854 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2855 = dot(vec3(_599, _602, _605), vec3(_2847 * _2841, _2847 * _2842, _2847 * _2843));
                        float _4100 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                        float _2862 = ((_2858 * _2858) * (_2840 + (-1.0))) + 1.0;
                        float _2863 = _2798 * _2839;
                        float _2864 = _2863 * _2863;
                        float _2867 = ((1.0 - _2864) * _2788) + _2864;
                        float _4111 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2868 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2869 = 1.0 - _2839;
                        float _2879 = (0.5 / (((_2868 * ((_2854 * _2869) + _2839)) + 9.9999999392252902907785028219223e-09) + (((_2868 * _2869) + _2839) * _2854))) * _2868;
                        float _4122 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2890 = (((_2840 * 3.1415927410125732421875) * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) / ((_2862 * _2862) * ((_2805 * 2.1991131305694580078125) + 3.141590118408203125))) * _2794;
                        _2647 = (_2809 * _2757.x) + _2715;
                        _2648 = (_2809 * _2757.y) + _2716;
                        _2649 = (_2809 * _2757.z) + _2717;
                        _2644 = (_2890 * _2774.x) + _2712;
                        _2645 = (_2890 * _2774.y) + _2713;
                        _2646 = (_2890 * _2774.z) + _2714;
                        if (_2719 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2712 = _2644;
                            _2713 = _2645;
                            _2714 = _2646;
                            _2715 = _2647;
                            _2716 = _2648;
                            _2717 = _2649;
                            _2718 = _2719;
                        }
                    }
                    frontier_phi_61_pred = _2644;
                    frontier_phi_61_pred_1 = _2649;
                    frontier_phi_61_pred_2 = _2648;
                    frontier_phi_61_pred_3 = _2647;
                    frontier_phi_61_pred_4 = _2646;
                    frontier_phi_61_pred_5 = _2645;
                }
                _2444 = frontier_phi_61_pred;
                _2454 = frontier_phi_61_pred_1;
                _2452 = frontier_phi_61_pred_2;
                _2450 = frontier_phi_61_pred_3;
                _2448 = frontier_phi_61_pred_4;
                _2446 = frontier_phi_61_pred_5;
                uint _2595 = _2594 + 1u;
                if (_2595 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2588 = _2444;
                    _2589 = _2446;
                    _2590 = _2448;
                    _2591 = _2450;
                    _2592 = _2452;
                    _2593 = _2454;
                    _2594 = _2595;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
            _2451 = _2452;
            _2453 = _2454;
        }
        uvec4 _2457 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2458 = _2457.z;
        uint _2460 = (_2458 >> 8u) & 15u;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        if (((4294967295u << _2460) & _2342) == 0u)
        {
            _2556 = _2443;
            _2558 = _2445;
            _2560 = _2447;
            _2562 = _2449;
            _2564 = _2451;
            _2566 = _2453;
        }
        else
        {
            float _2581 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
            float _2582 = _2581 * _2296;
            float _2583 = _2581 * _2297;
            float _2584 = _2581 * _2298;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2460 < ((_2458 >> 12u) & 15u))
            {
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2695 = _2443;
                float _2696 = _2445;
                float _2697 = _2447;
                float _2698 = _2449;
                float _2699 = _2451;
                float _2700 = _2453;
                uint _2701 = _2460;
                uint _2710;
                bool _2711;
                for (;;)
                {
                    _2710 = texelFetch(g_lightClassification, int((((_2336 << 5u) + (_2322 << 9u)) + (_2701 << 2u)) >> 2u)).x;
                    _2711 = _2710 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2711)
                    {
                        frontier_phi_67_pred = _2698;
                        frontier_phi_67_pred_1 = _2699;
                        frontier_phi_67_pred_2 = _2700;
                        frontier_phi_67_pred_3 = _2697;
                        frontier_phi_67_pred_4 = _2696;
                        frontier_phi_67_pred_5 = _2695;
                    }
                    else
                    {
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _2908 = _2695;
                        float _2909 = _2696;
                        float _2910 = _2697;
                        float _2911 = _2698;
                        float _2912 = _2699;
                        float _2913 = _2700;
                        uint _2914 = _2710;
                        uint _2915;
                        vec4 _2940;
                        float _2941;
                        vec4 _2956;
                        vec3 _2968;
                        vec4 _2983;
                        vec4 _2999;
                        float _3045;
                        bool _3046;
                        for (;;)
                        {
                            uint _2925 = ((_2701 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2914));
                            _2915 = (_2914 + 4294967295u) & _2914;
                            uint _2927 = _2925 * 40u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            _2941 = _2940.w;
                            uint _2943 = (_2925 * 40u) + 4u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2958 = (_2925 * 40u) + 8u;
                            _2968 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x));
                            uint _2970 = (_2925 * 40u) + 16u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2986 = (_2925 * 40u) + 20u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3001 = (_2925 * 40u) + 24u;
                            vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3020 = (_2925 * 40u) + 28u;
                            vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            _3045 = fma(_2298, _3033.z, fma(_2297, _3033.y, _3033.x * _2296)) + _3033.w;
                            _3046 = !((fma(_2298, _3014.z, fma(_2297, _3014.y, _3014.x * _2296)) + _3014.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3046)
                            {
                                float _3073 = _2940.x - _2296;
                                float _3074 = _2940.y - _2297;
                                float _3075 = _2940.z - _2298;
                                float _3076 = dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075));
                                float _3079 = inversesqrt(_3076);
                                float _3080 = _3079 * _3073;
                                float _3081 = _3079 * _3074;
                                float _3082 = _3079 * _3075;
                                float _3086 = 1.0 - (_3076 / (_2941 * _2941));
                                float _4133 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3087 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                                float _3091 = sqrt(_3076) * _2956.w;
                                float _3093 = 1.39999997615814208984375 / (_3091 + 1.39999997615814208984375);
                                float _3094 = _3093 * _3093;
                                float _3097 = ((1.0 - _3094) * dot(vec3(_3080, _3081, _3082), vec3(_599, _602, _605))) + _3094;
                                float _3100 = _3091 * _3091;
                                float _3104 = (fma(_2298, _2983.z, fma(_2297, _2983.y, _2983.x * _2296)) + _2983.w) / _3045;
                                float _3105 = (fma(_2298, _2999.z, fma(_2297, _2999.y, _2999.x * _2296)) + _2999.w) / _3045;
                                float _3109 = 1.0 - dot(vec2(_3104, _3105), vec2(_3104, _3105));
                                float _4149 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3111 = _3110 * (((isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))) * _3087) / ((_3100 * 0.699999988079071044921875) + 1.0));
                                float _3123 = exp2(log2(1.0 / ((_3100 * 3.5) + 5.0)) * 0.25);
                                float _3124 = 1.0 - _659;
                                float _3131 = sqrt(1.0 - ((1.0 - (_3124 * _3124)) * (1.0 - (_3123 * _3123))));
                                float _3132 = _3131 * _3131;
                                float _3133 = _3132 * _3132;
                                float _3134 = _3080 - _2582;
                                float _3135 = _3081 - _2583;
                                float _3136 = _3082 - _2584;
                                float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                                float _3144 = dot(vec3(_599, _602, _605), vec3((-0.0) - _2582, (-0.0) - _2583, (-0.0) - _2584));
                                float _4160 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3147 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3148 = dot(vec3(_599, _602, _605), vec3(_3140 * _3134, _3140 * _3135, _3140 * _3136));
                                float _4171 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3151 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3155 = ((_3151 * _3151) * (_3133 + (-1.0))) + 1.0;
                                float _3156 = _3093 * _3132;
                                float _3157 = _3156 * _3156;
                                float _3163 = ((1.0 - _3157) * dot(vec3(_599, _602, _605), vec3(_3080, _3081, _3082))) + _3157;
                                float _4182 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3164 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3165 = 1.0 - _3132;
                                float _3175 = (0.5 / (((_3164 * ((_3147 * _3165) + _3132)) + 9.9999999392252902907785028219223e-09) + (((_3164 * _3165) + _3132) * _3147))) * _3164;
                                float _4193 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3185 = (_3110 * _3087) * (((_3133 * 3.1415927410125732421875) * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) / ((_3155 * _3155) * ((_3100 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3185 * _2968.x;
                                frontier_phi_73_pred_1 = _3185 * _2968.y;
                                frontier_phi_73_pred_2 = _3111 * _2956.z;
                                frontier_phi_73_pred_3 = _3111 * _2956.y;
                                frontier_phi_73_pred_4 = _3111 * _2956.x;
                                frontier_phi_73_pred_5 = _3185 * _2968.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3189 = frontier_phi_73_pred;
                            _3190 = frontier_phi_73_pred_1;
                            _3194 = frontier_phi_73_pred_2;
                            _3193 = frontier_phi_73_pred_3;
                            _3192 = frontier_phi_73_pred_4;
                            _3191 = frontier_phi_73_pred_5;
                            _2898 = _3192 + _2911;
                            _2899 = _3193 + _2912;
                            _2900 = _3194 + _2913;
                            _2895 = _3189 + _2908;
                            _2896 = _3190 + _2909;
                            _2897 = _3191 + _2910;
                            if (_2915 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2915;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2898;
                        frontier_phi_67_pred_1 = _2899;
                        frontier_phi_67_pred_2 = _2900;
                        frontier_phi_67_pred_3 = _2897;
                        frontier_phi_67_pred_4 = _2896;
                        frontier_phi_67_pred_5 = _2895;
                    }
                    _2563 = frontier_phi_67_pred;
                    _2565 = frontier_phi_67_pred_1;
                    _2567 = frontier_phi_67_pred_2;
                    _2561 = frontier_phi_67_pred_3;
                    _2559 = frontier_phi_67_pred_4;
                    _2557 = frontier_phi_67_pred_5;
                    uint _2702 = _2701 + 1u;
                    if (_2702 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2695 = _2557;
                        _2696 = _2559;
                        _2697 = _2561;
                        _2698 = _2563;
                        _2699 = _2565;
                        _2700 = _2567;
                        _2701 = _2702;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2565;
                frontier_phi_55_56_ladder_1 = _2567;
                frontier_phi_55_56_ladder_2 = _2563;
                frontier_phi_55_56_ladder_3 = _2561;
                frontier_phi_55_56_ladder_4 = _2559;
                frontier_phi_55_56_ladder_5 = _2557;
            }
            else
            {
                frontier_phi_55_56_ladder = _2451;
                frontier_phi_55_56_ladder_1 = _2453;
                frontier_phi_55_56_ladder_2 = _2449;
                frontier_phi_55_56_ladder_3 = _2447;
                frontier_phi_55_56_ladder_4 = _2445;
                frontier_phi_55_56_ladder_5 = _2443;
            }
            _2556 = frontier_phi_55_56_ladder_5;
            _2558 = frontier_phi_55_56_ladder_4;
            _2560 = frontier_phi_55_56_ladder_3;
            _2562 = frontier_phi_55_56_ladder_2;
            _2564 = frontier_phi_55_56_ladder;
            _2566 = frontier_phi_55_56_ladder_1;
        }
        float _2571 = isnan(1.0) ? _643 : (isnan(_643) ? 1.0 : min(_643, 1.0));
        _2355 = (_2571 * _2562) + _1810;
        _2357 = (_2571 * _2564) + _1812;
        _2359 = (_2571 * _2566) + _1814;
        _2361 = ((_2556 * 0.039999999105930328369140625) * _2571) + _2140;
        _2363 = ((_2558 * 0.039999999105930328369140625) * _2571) + _2142;
        _2365 = ((_2560 * 0.039999999105930328369140625) * _2571) + _2144;
    }
    else
    {
        _2355 = _1810;
        _2357 = _1812;
        _2359 = _1814;
        _2361 = _2140;
        _2363 = _2142;
        _2365 = _2144;
    }
    float _4209 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4220 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4231 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    uint _2385 = _224 + 6u;
    float _2393 = _580 / cbSceneParam._m0[86u].x;
    float _2394 = _581 / cbSceneParam._m0[86u].y;
    vec4 _2408 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2393, _2394, (log2((isnan(cbSceneParam._m0[77u].w) ? _513 : (isnan(_513) ? cbSceneParam._m0[77u].w : min(_513, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2410 = _2408.x;
    float _2411 = _2408.y;
    float _2412 = _2408.z;
    float _2413 = _2408.w;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    if (_513 > cbSceneParam._m0[78u].w)
    {
        float _2468 = isnan(_513) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _513 : min(cbSceneParam._m0[80u].w, _513));
        float _2469 = _2468 / _513;
        float _2480 = _2469 * _565;
        float _2481 = _566 * _2469;
        float _2482 = (-0.0) - _2481;
        float _2484 = _2469 * _567;
        float _2486 = (cbSceneParam._m0[77u].w * _2482) / _2468;
        float _2487 = _2486 + cbSceneParam._m0[79u].w;
        float _2488 = cbSceneParam._m0[79u].w - _2481;
        float _2494 = sqrt(((_2480 * _2480) + (_2481 * _2481)) + (_2484 * _2484));
        float _2497 = (1.0 - (cbSceneParam._m0[77u].w / _2468)) * _2494;
        float _2502 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2504 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2657;
        if (abs((_2482 - _2486) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2657 = ((((_2487 > 0.0) ? exp2(_2502 * _2487) : (2.0 - exp2(_2504 * _2487))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2497;
        }
        else
        {
            float _2617 = 1.0 / cbSceneParam._m0[80u].x;
            float _2618 = isnan(_2488) ? _2487 : (isnan(_2487) ? _2488 : max(_2487, _2488));
            float _2619 = isnan(_2488) ? _2487 : (isnan(_2487) ? _2488 : min(_2487, _2488));
            float _2628 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : min(_2618, 0.0));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            _2657 = ((abs(_2494 / _2482) * cbSceneParam._m0[80u].y) * ((((_2628 - _2629) * 2.0) - ((exp2(_2502 * (isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0)))) - exp2(_2502 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0))))) * _2617)) - ((exp2(_2504 * _2628) - exp2(_2504 * _2629)) * _2617))) + (_2497 * cbSceneParam._m0[80u].z);
        }
        vec4 _2659 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2393, _2394, 1.0), 0.0);
        float _2668 = exp2((_2657 * (-1.44269502162933349609375)) * (1.0 - _2659.w));
        float _2669 = log2(_2668);
        float _2685 = log2(_2413);
        _2506 = (exp2(_2685 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].x)) * _2659.x) / cbSceneParam._m0[78u].x)) + _2410;
        _2508 = (exp2(_2685 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].y)) * _2659.y) / cbSceneParam._m0[78u].y)) + _2411;
        _2510 = (exp2(_2685 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].z)) * _2659.z) / cbSceneParam._m0[78u].z)) + _2412;
        _2512 = _2668 * _2413;
    }
    else
    {
        _2506 = _2410;
        _2508 = _2411;
        _2510 = _2412;
        _2512 = _2413;
    }
    float _2524 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2525 = _2524 == 3.0;
    float _2526 = log2(_2512);
    float _2533 = exp2(_2526 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2355 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _643))) + ((_2361 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1448)) * cbPerFrame._m0[3u].x));
    float _2534 = exp2(_2526 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2357 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _643))) + ((_2363 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1448)) * cbPerFrame._m0[3u].x));
    float _2535 = exp2(_2526 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2359 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _643))) + ((_2365 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1448)) * cbPerFrame._m0[3u].x));
    float _2544 = (_2524 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2544 * (_2525 ? _2533 : (_2533 + (cbSceneParam._m0[72u].w * _2506)));
    SV_Target.y = _2544 * (_2525 ? _2534 : (_2534 + (cbSceneParam._m0[72u].w * _2508)));
    SV_Target.z = _2544 * (_2525 ? _2535 : (_2535 + (cbSceneParam._m0[72u].w * _2510)));
    SV_Target.w = cbInstanceData._m0[_2385].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2385].w;
}


