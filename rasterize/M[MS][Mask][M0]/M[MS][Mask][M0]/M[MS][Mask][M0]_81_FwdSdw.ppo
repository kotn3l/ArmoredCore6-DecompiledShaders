#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1243;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _369 = _367.x;
    float _381 = dot(vec4(_369, _367.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _330.x) * 2.0) - ((((_369 - _381) * cbMtdParam._m0[24u].z) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3829 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _406 = (_399 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _407 = (_399 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _408 = (_399 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _457 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _471 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _330.y) * 2.0) - ((((_447 - _457) * cbMtdParam._m0[24u].z) + _457) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3840 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _479 = (_472 * ((_425.x * cbMtdParam._m0[13u].x) - _406)) + _406;
    float _480 = (_472 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _481 = (_472 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    float _548 = ((_520.x - _539) * _399) + _539;
    float _549 = ((_520.y - _540) * _399) + _540;
    float _550 = ((_520.z - _541) * _399) + _541;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _575 = ((_562.z - _550) * _472) + _550;
    float _578 = ((((_562.x - _548) * _472) + _548) * 2.0) + (-1.0);
    float _580 = ((((_562.y - _549) * _472) + _549) * 2.0) + (-1.0);
    float _581 = dot(vec2(_578, _580), vec2(_578, _580));
    float _3851 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _586 = sqrt(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _627 = _625.x;
    float _628 = 1.0 - _627;
    float _641 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_627 - _628) * cbMtdParam._m0[24u].w) + _628) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3862 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _649 = (_642 * ((_500.x * cbMtdParam._m0[18u].x) - _479)) + _479;
    float _650 = (_642 * ((_500.y * cbMtdParam._m0[18u].y) - _480)) + _480;
    float _651 = (_642 * ((_500.z * cbMtdParam._m0[18u].z) - _481)) + _481;
    float _655 = (cbMtdParam._m0[19u].w * (_600.z - _575)) + _575;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _675 = (_668.x * 2.0) + (-1.0);
    float _676 = (_668.y * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _3873 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _685 = (_642 * (_668.z - _655)) + _655;
    float _688 = (((_600.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _578;
    float _689 = (((_600.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _580;
    float _701 = (((_675 - _688) + (cbMtdParam._m0[21u].x * _688)) * _642) + _688;
    float _702 = (((_676 - _689) + (cbMtdParam._m0[21u].x * _689)) * _642) + _689;
    float _703 = (_642 * (sqrt(1.0 - (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) - _586)) + _586;
    float _707 = cbMtdParam._m0[22u].x + _600.w;
    float _710 = fma(_703, _229 * NORMAL.x, fma(_702, _236 * TANGENT.x, (_222 * _214) * _701));
    float _713 = fma(_703, _229 * NORMAL.y, fma(_702, _236 * TANGENT.y, (_222 * _215) * _701));
    float _716 = fma(_703, _229 * NORMAL.z, fma(_702, _236 * TANGENT.z, (_222 * _216) * _701));
    float _720 = inversesqrt(dot(vec3(_710, _713, _716), vec3(_710, _713, _716)));
    float _721 = _720 * _710;
    float _722 = _720 * _713;
    float _723 = _720 * _716;
    float _3884 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _724 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _3906 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3917 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _3928 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _742 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _794 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _784);
    float _795 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _784);
    float _796 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _784);
    float _800 = inversesqrt(dot(vec3(_794, _795, _796), vec3(_794, _795, _796)));
    float _801 = _794 * _800;
    float _802 = _795 * _800;
    float _803 = _796 * _800;
    float _809 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _810 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _828 = fma(_723, cbSceneParam._m0[5u].z, fma(_722, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _721));
    float _831 = fma(_723, cbSceneParam._m0[6u].z, fma(_722, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _721));
    float _834 = fma(_723, cbSceneParam._m0[7u].z, fma(_722, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _721));
    uint _848 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _854 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * cbInstanceData._m0[_848].x;
    float _855 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * cbInstanceData._m0[_848].y;
    float _856 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * cbInstanceData._m0[_848].z;
    float _3939 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    vec4 _868 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _809, cbSceneParam._m0[86u].y * _810));
    float _872 = ((isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * TEXCOORD_5.w) * _868.x;
    float _873 = dot(vec3(_721, _722, _723), vec3(_801, _802, _803));
    float _876 = _873 * 2.0;
    float _880 = (_876 * _721) - _801;
    float _881 = (_876 * _722) - _802;
    float _882 = (_876 * _723) - _803;
    float _886 = abs(dot(vec3(_801, _802, _803), vec3(_721, _722, _723)));
    float _3972 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _888 = sqrt(_724);
    float _901 = exp2((_888 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_888 * 3.0));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1242;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _967 = fma(_941, cbModelParam._m0[26u].z, fma(_937, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933));
        float _971 = fma(_941, cbModelParam._m0[27u].z, fma(_937, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933));
        float _975 = fma(_941, cbModelParam._m0[28u].z, fma(_937, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933));
        float _1000 = _933 + _721;
        float _1001 = _937 + _722;
        float _1002 = _941 + _723;
        float _1012 = fma(_1002, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1000)) - _967;
        float _1013 = fma(_1002, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1000)) - _971;
        float _1014 = fma(_1002, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1000)) - _975;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_967 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_971 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[34u].z) + ((((((_975 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1070 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1036.x + (-0.5));
        float _1072 = _1070 * (_1036.y + (-0.5));
        float _1073 = _1070 * (_1036.z + (-0.5));
        float _1080 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1043.x + (-0.5));
        float _1082 = _1080 * (_1043.y + (-0.5));
        float _1083 = _1080 * (_1043.z + (-0.5));
        float _1090 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1050.x + (-0.5));
        float _1092 = _1090 * (_1050.y + (-0.5));
        float _1093 = _1090 * (_1050.z + (-0.5));
        float _1100 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1057.x + (-0.5));
        float _1102 = _1100 * (_1057.y + (-0.5));
        float _1103 = _1100 * (_1057.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1124 = (dot(vec3(_721, _722, _723), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1134 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _4020 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1136 + 1.0))) + _1141) * _1104;
        float _1151 = _1072 * 0.5;
        float _1152 = _1082 * 0.5;
        float _1153 = _1092 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_721, _722, _723), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4053 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1178 + 1.0))) + _1183) * _1105;
        float _1193 = _1073 * 0.5;
        float _1194 = _1083 * 0.5;
        float _1195 = _1093 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_721, _722, _723), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4086 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1220 + 1.0))) + _1225) * _1106;
        _1242 = _1073;
        _1244 = _1072;
        _1245 = _1071;
        _1246 = _1083;
        _1247 = _1082;
        _1248 = _1081;
        _1249 = _1093;
        _1250 = _1092;
        _1251 = _1091;
        _1252 = _1106;
        _1253 = _1105;
        _1254 = _1104;
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _1243;
        _1244 = _1243;
        _1245 = _1243;
        _1246 = _1243;
        _1247 = _1243;
        _1248 = _1243;
        _1249 = _1243;
        _1250 = _1243;
        _1251 = _1243;
        _1252 = _1243;
        _1253 = _1243;
        _1254 = _1243;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1281 = fma(_941, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _933));
        float _1285 = fma(_941, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _933));
        float _1289 = fma(_941, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _933));
        float _1312 = _933 + _721;
        float _1313 = _937 + _722;
        float _1314 = _941 + _723;
        float _1324 = fma(_1314, cbModelParam._m0[30u].z, fma(_1313, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1312)) - _1281;
        float _1325 = fma(_1314, cbModelParam._m0[31u].z, fma(_1313, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1312)) - _1285;
        float _1326 = fma(_1314, cbModelParam._m0[32u].z, fma(_1313, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1312)) - _1289;
        float _1330 = inversesqrt(dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326)));
        float _1343 = ((_1330 * _1324) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1281 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1330 * _1325) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1285 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1330 * _1326) / cbModelParam._m0[35u].z) + ((((((_1289 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        float _1380 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1347.x + (-0.5));
        float _1382 = _1380 * (_1347.y + (-0.5));
        float _1383 = _1380 * (_1347.z + (-0.5));
        float _1390 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1354.x + (-0.5));
        float _1392 = _1390 * (_1354.y + (-0.5));
        float _1393 = _1390 * (_1354.z + (-0.5));
        float _1400 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1361.x + (-0.5));
        float _1402 = _1400 * (_1361.y + (-0.5));
        float _1403 = _1400 * (_1361.z + (-0.5));
        float _1410 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1368.x + (-0.5));
        float _1412 = _1410 * (_1368.y + (-0.5));
        float _1413 = _1410 * (_1368.z + (-0.5));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = _1381 * 0.5;
        float _1418 = _1391 * 0.5;
        float _1419 = _1401 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_721, _722, _723), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4149 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1444 + 1.0))) + _1449) * _1414;
        float _1459 = _1382 * 0.5;
        float _1460 = _1392 * 0.5;
        float _1461 = _1402 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_721, _722, _723), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4182 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1486 + 1.0))) + _1491) * _1415;
        float _1501 = _1383 * 0.5;
        float _1502 = _1393 * 0.5;
        float _1503 = _1403 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_721, _722, _723), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4215 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1528 + 1.0))) + _1533) * _1416;
        _1550 = _1383;
        _1551 = _1382;
        _1552 = _1381;
        _1553 = _1393;
        _1554 = _1392;
        _1555 = _1391;
        _1556 = _1403;
        _1557 = _1402;
        _1558 = _1401;
        _1559 = _1416;
        _1560 = _1415;
        _1561 = _1414;
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
    }
    else
    {
        _1550 = _1243;
        _1551 = _1243;
        _1552 = _1243;
        _1553 = _1243;
        _1554 = _1243;
        _1555 = _1243;
        _1556 = _1243;
        _1557 = _1243;
        _1558 = _1243;
        _1559 = _1243;
        _1560 = _1243;
        _1561 = _1243;
        _1562 = 0.0;
        _1563 = 0.0;
        _1564 = 0.0;
    }
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1255)) + _1255;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1256)) + _1256;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1257)) + _1257;
    float _1597 = fma(_1576, cbSceneParam._m0[89u].z, fma(_1575, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1600 = fma(_1576, cbSceneParam._m0[90u].z, fma(_1575, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1603 = fma(_1576, cbSceneParam._m0[91u].z, fma(_1575, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1574));
    float _1618 = _880 * 0.5;
    float _1619 = _881 * 0.5;
    float _1620 = _882 * 0.5;
    float _1621 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1624 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1627 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1661;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1634 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1242, _1246, _1249, _1252));
        float _1638 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1642 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1649 = dot(vec4(cbModelParam._m0[39u]), vec4(_1618, _1619, _1620, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1672;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1663 = dot(vec4(cbModelParam._m0[40u]), vec4(_1618, _1619, _1620, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1676 = (_1672 * cbModelParam._m0[1u].x) + (_1661 * (1.0 - cbModelParam._m0[1u].x));
    float _1686 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _724);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1686 : min(cbModelParam._m0[25u].z, _1686));
    float _1767;
    float _1769;
    float _1771;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1734 = fma(_941, cbModelParam._m0[13u].z, fma(_937, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _933)) + cbModelParam._m0[13u].w;
        float _1738 = fma(_941, cbModelParam._m0[14u].z, fma(_937, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _933)) + cbModelParam._m0[14u].w;
        float _1742 = fma(_941, cbModelParam._m0[15u].z, fma(_937, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _933)) + cbModelParam._m0[15u].w;
        float _1745 = fma(_882, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880));
        float _1748 = fma(_882, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880));
        float _1751 = fma(_882, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880));
        float _1779;
        if (_1745 > 0.0)
        {
            _1779 = abs((1.0 - _1734) / _1745);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1734 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1779 = frontier_phi_14_12_ladder;
        }
        float _1948;
        if (_1748 > 0.0)
        {
            _1948 = abs((1.0 - _1738) / _1748);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1738 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1948 = frontier_phi_23_19_ladder;
        }
        float _2243;
        if (_1751 > 0.0)
        {
            _2243 = abs((1.0 - _1742) / _1751);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1742 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2243 = frontier_phi_35_30_ladder;
        }
        float _2245 = isnan(_1948) ? _1779 : (isnan(_1779) ? _1948 : min(_1779, _1948));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1745) + _1734;
        float _2251 = (_2246 * _1748) + _1738;
        float _2252 = (_2246 * _1751) + _1742;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2253;
        float _2257 = _2253 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 > _2257) || ((_2251 < _2255) || ((_2250 < _2255) || (_2250 > _2257))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2252, cbModelParam._m0[9u].z, fma(_2251, cbModelParam._m0[9u].y, _2250 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2252, cbModelParam._m0[10u].z, fma(_2251, cbModelParam._m0[10u].y, _2250 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2252, cbModelParam._m0[11u].z, fma(_2251, cbModelParam._m0[11u].y, _2250 * cbModelParam._m0[11u].x))), _1687);
            frontier_phi_13_35_ladder = _2397.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2397.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2397.x * cbModelParam._m0[1u].y;
        }
        _1767 = frontier_phi_13_35_ladder_2;
        _1769 = frontier_phi_13_35_ladder_1;
        _1771 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_880, _881, _882), _1687);
        _1767 = _1755.x * cbModelParam._m0[1u].y;
        _1769 = _1755.y * cbModelParam._m0[1u].y;
        _1771 = _1755.z * cbModelParam._m0[1u].y;
    }
    float _1775 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _724);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1775 : min(cbModelParam._m0[25u].w, _1775));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1829 = fma(_941, cbModelParam._m0[21u].z, fma(_937, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _933)) + cbModelParam._m0[21u].w;
        float _1833 = fma(_941, cbModelParam._m0[22u].z, fma(_937, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _933)) + cbModelParam._m0[22u].w;
        float _1837 = fma(_941, cbModelParam._m0[23u].z, fma(_937, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _933)) + cbModelParam._m0[23u].w;
        float _1840 = fma(_882, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880));
        float _1843 = fma(_882, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880));
        float _1846 = fma(_882, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880));
        float _1953;
        if (_1840 > 0.0)
        {
            _1953 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1953 = frontier_phi_25_21_ladder;
        }
        float _2270;
        if (_1843 > 0.0)
        {
            _2270 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2270 = frontier_phi_37_32_ladder;
        }
        float _2597;
        if (_1846 > 0.0)
        {
            _2597 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2597 = frontier_phi_47_44_ladder;
        }
        float _2599 = isnan(_2270) ? _1953 : (isnan(_1953) ? _2270 : min(_1953, _2270));
        float _2600 = isnan(_2597) ? _2599 : (isnan(_2599) ? _2597 : min(_2599, _2597));
        float _2604 = (_2600 * _1840) + _1829;
        float _2605 = (_2600 * _1843) + _1833;
        float _2606 = (_2600 * _1846) + _1837;
        float _2607 = _2600 * 9.9999997473787516355514526367188e-05;
        float _2608 = (-1.0) - _2607;
        float _2610 = _2607 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2606 > _2610) || ((_2606 < _2608) || ((_2605 > _2610) || ((_2605 < _2608) || ((_2604 < _2608) || (_2604 > _2610))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2606, cbModelParam._m0[17u].z, fma(_2605, cbModelParam._m0[17u].y, _2604 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2606, cbModelParam._m0[18u].z, fma(_2605, cbModelParam._m0[18u].y, _2604 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2606, cbModelParam._m0[19u].z, fma(_2605, cbModelParam._m0[19u].y, _2604 * cbModelParam._m0[19u].x))), _1776);
            frontier_phi_22_47_ladder = _2724.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2724.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2724.x * cbModelParam._m0[1u].z;
        }
        _1865 = frontier_phi_22_47_ladder_2;
        _1867 = frontier_phi_22_47_ladder_1;
        _1869 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_880, _881, _882), _1776);
        _1865 = _1849.x * cbModelParam._m0[1u].z;
        _1867 = _1849.y * cbModelParam._m0[1u].z;
        _1869 = _1849.z * cbModelParam._m0[1u].z;
    }
    float _1881 = ((((1.0 - _901) * ((_888 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_901 * _888)) * _872;
    float _1882 = _1881 * ((cbModelParam._m0[1u].w * (_1865 - _1767)) + _1767);
    float _1883 = _1881 * ((cbModelParam._m0[1u].w * (_1867 - _1769)) + _1769);
    float _1884 = _1881 * ((cbModelParam._m0[1u].w * (_1869 - _1771)) + _1771);
    float _1887 = fma(_1884, cbSceneParam._m0[89u].z, fma(_1883, cbSceneParam._m0[89u].y, _1882 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1884, cbSceneParam._m0[90u].z, fma(_1883, cbSceneParam._m0[90u].y, _1882 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1884, cbSceneParam._m0[91u].z, fma(_1883, cbSceneParam._m0[91u].y, _1882 * cbSceneParam._m0[91u].x));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1940 = _1927 / _1939;
    float _1941 = _1931 / _1939;
    float _1942 = _1935 / _1939;
    float _2089;
    float _2090;
    float _2091;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1969 = ((uint(_1942 > cbSceneParam._m0[59u].y) + uint(_1942 > cbSceneParam._m0[59u].x)) + uint(_1942 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1970 = _1969 + 43u;
        uint _1978 = _1969 + 44u;
        uint _1986 = _1969 + 45u;
        uint _1994 = _1969 + 46u;
        float _2005 = fma(_1939, cbSceneParam._m0[_1970].w, fma(_1935, cbSceneParam._m0[_1970].z, fma(_1931, cbSceneParam._m0[_1970].y, _1927 * cbSceneParam._m0[_1970].x)));
        float _2009 = fma(_1939, cbSceneParam._m0[_1978].w, fma(_1935, cbSceneParam._m0[_1978].z, fma(_1931, cbSceneParam._m0[_1978].y, _1927 * cbSceneParam._m0[_1978].x)));
        float _2017 = fma(_1939, cbSceneParam._m0[_1994].w, fma(_1935, cbSceneParam._m0[_1994].z, fma(_1931, cbSceneParam._m0[_1994].y, _1927 * cbSceneParam._m0[_1994].x)));
        float _2022 = cbSceneParam._m0[33u].z * _2017;
        float _2024 = cbSceneParam._m0[33u].w * _2017;
        float _2027 = fma(_1939, cbSceneParam._m0[_1986].w, fma(_1935, cbSceneParam._m0[_1986].z, fma(_1931, cbSceneParam._m0[_1986].y, _1927 * cbSceneParam._m0[_1986].x))) / _2017;
        float _2075 = (cbSceneParam._m0[33u].x - sqrt(((_1941 * _1941) + (_1940 * _1940)) + (_1942 * _1942))) * cbSceneParam._m0[33u].y;
        float _4341 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2082 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 + _2005) / _2017, (_2024 + _2009) / _2017), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2024 + _2005) / _2017, (_2009 - _2022) / _2017), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 - _2022) / _2017, (_2009 - _2024) / _2017), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 - _2024) / _2017, (_2022 + _2009) / _2017), _2027), 0.0)).x), vec4(0.25)));
        _2089 = 1.0 - (_2082 * cbSceneParam._m0[34u].x);
        _2090 = 1.0 - (_2082 * cbSceneParam._m0[34u].y);
        _2091 = 1.0 - (_2082 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2089 = 1.0;
        _2090 = 1.0;
        _2091 = 1.0;
    }
    float _2155;
    float _2157;
    float _2159;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2143 = fma(_1939, cbSceneParam._m0[63u].w, fma(_1935, cbSceneParam._m0[63u].z, fma(_1931, cbSceneParam._m0[63u].y, _1927 * cbSceneParam._m0[63u].x)));
        float _2144 = fma(_1939, cbSceneParam._m0[60u].w, fma(_1935, cbSceneParam._m0[60u].z, fma(_1931, cbSceneParam._m0[60u].y, _1927 * cbSceneParam._m0[60u].x))) / _2143;
        float _2145 = fma(_1939, cbSceneParam._m0[61u].w, fma(_1935, cbSceneParam._m0[61u].z, fma(_1931, cbSceneParam._m0[61u].y, _1927 * cbSceneParam._m0[61u].x))) / _2143;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2144 >= cbSceneParam._m0[64u].x) && (_2145 >= cbSceneParam._m0[64u].y)) && (_2144 <= cbSceneParam._m0[64u].z)) && (_2145 <= cbSceneParam._m0[64u].w))
        {
            float _2283 = fma(_1939, cbSceneParam._m0[62u].w, fma(_1935, cbSceneParam._m0[62u].z, fma(_1931, cbSceneParam._m0[62u].y, _1927 * cbSceneParam._m0[62u].x))) / _2143;
            float _2287 = isnan(cbSceneParam._m0[41u].w) ? _2283 : (isnan(_2283) ? cbSceneParam._m0[41u].w : max(_2283, cbSceneParam._m0[41u].w));
            float _2330 = (cbSceneParam._m0[33u].x - sqrt(((_1941 * _1941) + (_1940 * _1940)) + (_1942 * _1942))) * cbSceneParam._m0[33u].y;
            float _4357 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
            float _2337 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2144, cbSceneParam._m0[33u].w + _2145), _2287), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2144, _2145 - cbSceneParam._m0[33u].z), _2287), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2144 - cbSceneParam._m0[33u].z, _2145 - cbSceneParam._m0[33u].w), _2287), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2144 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2145), _2287), 0.0)).x), vec4(0.25)));
            float _2341 = 1.0 - (_2337 * cbSceneParam._m0[34u].x);
            float _2342 = 1.0 - (_2337 * cbSceneParam._m0[34u].y);
            float _2343 = 1.0 - (_2337 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2343) ? _2091 : (isnan(_2091) ? _2343 : min(_2091, _2343));
            frontier_phi_34_33_ladder_1 = isnan(_2342) ? _2090 : (isnan(_2090) ? _2342 : min(_2090, _2342));
            frontier_phi_34_33_ladder_2 = isnan(_2341) ? _2089 : (isnan(_2089) ? _2341 : min(_2089, _2341));
        }
        else
        {
            frontier_phi_34_33_ladder = _2091;
            frontier_phi_34_33_ladder_1 = _2090;
            frontier_phi_34_33_ladder_2 = _2089;
        }
        _2155 = frontier_phi_34_33_ladder_2;
        _2157 = frontier_phi_34_33_ladder_1;
        _2159 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2155 = _2089;
        _2157 = _2090;
        _2159 = _2091;
    }
    uvec4 _2164 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2166 = _2164.x * 14u;
    uint _2167 = _2166 + 13u;
    float _2174 = _872 + (-1.0);
    float _2179 = (cbLight._m0[_2167].x * _2174) + 1.0;
    float _2180 = (cbLight._m0[_2167].y * _2174) + 1.0;
    float _2181 = (cbLight._m0[_2167].z * _2174) + 1.0;
    float _2182 = (cbLight._m0[_2167].w * _2174) + 1.0;
    uint _2183 = _2166 + 5u;
    float _2189 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
    uint _2193 = _2166 + 4u;
    float _2202 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2206 = _2166 | 1u;
    float _2217 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_721, _722, _723));
    float _2220 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_721, _722, _723));
    float _4393 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _4404 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2225 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * 0.3183098733425140380859375;
    float _2227 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * 0.3183098733425140380859375;
    float _2234 = ((cbLight._m0[_2183].x * _2189) * _2227) + (((cbLight._m0[_2193].x * _2155) * _2202) * _2225);
    float _2235 = ((_2189 * cbLight._m0[_2183].y) * _2227) + (((cbLight._m0[_2193].y * _2157) * _2202) * _2225);
    float _2236 = ((_2189 * cbLight._m0[_2183].z) * _2227) + (((cbLight._m0[_2193].z * _2159) * _2202) * _2225);
    uvec4 _2240 = floatBitsToUint(cbLight._m0[_2166 + 12u]);
    bool _2242 = _2240.x == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2242)
    {
        _2344 = _2234;
        _2346 = _2235;
        _2348 = _2236;
    }
    else
    {
        uint _2352 = _2166 + 6u;
        float _2368 = (dot(vec3(cbLight._m0[_2166 + 2u].xyz), vec3(_721, _722, _723)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4415 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2371 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2344 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2234;
        _2346 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2235;
        _2348 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2236;
    }
    bool _2351 = _2240.y == 0u;
    float _2406;
    float _2408;
    float _2410;
    if (_2351)
    {
        _2406 = _2344;
        _2408 = _2346;
        _2410 = _2348;
    }
    else
    {
        uint _2568 = _2166 + 7u;
        float _2584 = (dot(vec3(cbLight._m0[_2166 + 3u].xyz), vec3(_721, _722, _723)) * 0.5) + 0.5;
        float _2585 = _2584 * _2584;
        float _4431 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2586 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2587 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2406 = (((cbLight._m0[_2568].x * 0.3183098733425140380859375) * _2586) * _2587) + _2344;
        _2408 = (((cbLight._m0[_2568].y * 0.3183098733425140380859375) * _2586) * _2587) + _2346;
        _2410 = (((cbLight._m0[_2568].z * 0.3183098733425140380859375) * _2586) * _2587) + _2348;
    }
    uint _2413 = _2166 + 8u;
    float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _724) * 0.949999988079071044921875);
    float _2427 = _2426 * _2426;
    float _2428 = cbLight._m0[_2166].x + _801;
    float _2429 = cbLight._m0[_2166].y + _802;
    float _2430 = cbLight._m0[_2166].z + _803;
    float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
    float _2435 = _2434 * _2428;
    float _2436 = _2434 * _2429;
    float _2437 = _2434 * _2430;
    float _2438 = dot(vec3(_721, _722, _723), vec3(cbLight._m0[_2166].xyz));
    float _4447 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _4458 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _2442 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2443 = dot(vec3(_721, _722, _723), vec3(_2435, _2436, _2437));
    float _4469 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2447 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2435, _2436, _2437));
    float _4480 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2451 = _2427 * _2427;
    float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
    float _2466 = (exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2467 = 1.0 - _2427;
    float _2478 = (0.5 / (((_2442 * ((_2441 * _2467) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2467) + _2427) * _2441))) * _2441;
    float _4491 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2480 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
    uint _2494 = _2166 + 9u;
    float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _724) * 0.949999988079071044921875);
    float _2506 = _2505 * _2505;
    float _2507 = cbLight._m0[_2206].x + _801;
    float _2508 = cbLight._m0[_2206].y + _802;
    float _2509 = cbLight._m0[_2206].z + _803;
    float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
    float _2514 = _2513 * _2507;
    float _2515 = _2513 * _2508;
    float _2516 = _2513 * _2509;
    float _2517 = dot(vec3(_721, _722, _723), vec3(cbLight._m0[_2206].xyz));
    float _4502 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2520 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2521 = dot(vec3(_721, _722, _723), vec3(_2514, _2515, _2516));
    float _4513 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2525 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2514, _2515, _2516));
    float _4524 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2529 = _2506 * _2506;
    float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
    float _2542 = (exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2543 = 1.0 - _2506;
    float _2553 = (0.5 / (((_2442 * ((_2520 * _2543) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2543) + _2506) * _2520))) * _2520;
    float _4535 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2555 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
    float _2565 = (((_2542 * cbLight._m0[_2494].x) * _2555) * _2189) + ((((cbLight._m0[_2413].x * _2155) * _2466) * _2480) * _2202);
    float _2566 = (((_2542 * cbLight._m0[_2494].y) * _2555) * _2189) + ((((cbLight._m0[_2413].y * _2157) * _2466) * _2480) * _2202);
    float _2567 = (((_2542 * cbLight._m0[_2494].z) * _2555) * _2189) + ((((cbLight._m0[_2413].z * _2159) * _2466) * _2480) * _2202);
    float _2623;
    float _2625;
    float _2627;
    if (_2242)
    {
        _2623 = _2565;
        _2625 = _2566;
        _2627 = _2567;
    }
    else
    {
        uint _2629 = _2166 + 2u;
        uint _2633 = _2166 + 10u;
        float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2629].w)) * _724) * 0.949999988079071044921875);
        float _2648 = _2647 * _2647;
        float _2649 = cbLight._m0[_2629].x + _801;
        float _2650 = cbLight._m0[_2629].y + _802;
        float _2651 = cbLight._m0[_2629].z + _803;
        float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
        float _2656 = _2655 * _2649;
        float _2657 = _2655 * _2650;
        float _2658 = _2655 * _2651;
        float _2659 = dot(vec3(_721, _722, _723), vec3(cbLight._m0[_2629].xyz));
        float _4546 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2663 = dot(vec3(_721, _722, _723), vec3(_2656, _2657, _2658));
        float _4557 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2667 = dot(vec3(cbLight._m0[_2629].xyz), vec3(_2656, _2657, _2658));
        float _4568 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2671 = _2648 * _2648;
        float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
        float _2684 = (exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2685 = 1.0 - _2648;
        float _2695 = (0.5 / (((_2442 * ((_2662 * _2685) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2685) + _2648) * _2662))) * _2662;
        float _4579 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2697 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
        float _2698 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2623 = (((_2684 * cbLight._m0[_2633].x) * _2697) * _2698) + _2565;
        _2625 = (((_2684 * cbLight._m0[_2633].y) * _2697) * _2698) + _2566;
        _2627 = (((_2684 * cbLight._m0[_2633].z) * _2697) * _2698) + _2567;
    }
    float _2729;
    float _2731;
    float _2733;
    if (_2351)
    {
        _2729 = _2623;
        _2731 = _2625;
        _2733 = _2627;
    }
    else
    {
        uint _2740 = _2166 + 3u;
        uint _2744 = _2166 + 11u;
        float _2758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2740].w)) * _724) * 0.949999988079071044921875);
        float _2759 = _2758 * _2758;
        float _2760 = cbLight._m0[_2740].x + _801;
        float _2761 = cbLight._m0[_2740].y + _802;
        float _2762 = cbLight._m0[_2740].z + _803;
        float _2766 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
        float _2767 = _2766 * _2760;
        float _2768 = _2766 * _2761;
        float _2769 = _2766 * _2762;
        float _2770 = dot(vec3(_721, _722, _723), vec3(cbLight._m0[_2740].xyz));
        float _4595 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2773 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2774 = dot(vec3(_721, _722, _723), vec3(_2767, _2768, _2769));
        float _4606 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2778 = dot(vec3(cbLight._m0[_2740].xyz), vec3(_2767, _2768, _2769));
        float _4617 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2782 = _2759 * _2759;
        float _2786 = ((_2777 * _2777) * (_2782 + (-1.0))) + 1.0;
        float _2795 = (exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2796 = 1.0 - _2759;
        float _2806 = (0.5 / (((_2442 * ((_2773 * _2796) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2796) + _2759) * _2773))) * _2773;
        float _4628 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2808 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2782 / ((_2786 * _2786) * 3.141590118408203125));
        float _2809 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2729 = (((_2795 * cbLight._m0[_2744].x) * _2808) * _2809) + _2623;
        _2731 = (((_2795 * cbLight._m0[_2744].y) * _2808) * _2809) + _2625;
        _2733 = (((_2795 * cbLight._m0[_2744].z) * _2808) * _2809) + _2627;
    }
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_2164.y == 0u)
    {
        uvec4 _2830 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2831 = _2830.x;
        uint _2842 = uint((float(_2830.y) * floor(float(uint(cbSceneParam._m0[85u].y * _810) / _2831))) + floor(float(uint(cbSceneParam._m0[85u].x * _809) / _2831)));
        float _2852 = (log2(_1942 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2853 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        uint _2856 = uint(isnan(14.0) ? _2853 : (isnan(_2853) ? 14.0 : min(_2853, 14.0)));
        uvec4 _2861 = texelFetch(g_lightClusterGridBuffer, int(((_2856 << 2u) + (_2842 << 6u)) >> 2u));
        uint _2862 = _2861.x;
        uint _2863 = _2830.z;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        if (((((1u << ((_2863 >> 4u) & 15u)) + 4294967295u) & _2862) == 0u) || ((_2863 & 240u) == 0u))
        {
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
        }
        else
        {
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            uint _3093 = 0u;
            uint _3102;
            bool _3103;
            for (;;)
            {
                _3102 = texelFetch(g_lightClassification, int((((_2856 << 5u) + (_2842 << 9u)) + (_3093 << 2u)) >> 2u)).x;
                _3103 = _3102 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3103)
                {
                    frontier_phi_66_pred = _3092;
                    frontier_phi_66_pred_1 = _3091;
                    frontier_phi_66_pred_2 = _3090;
                    frontier_phi_66_pred_3 = _3089;
                    frontier_phi_66_pred_4 = _3088;
                    frontier_phi_66_pred_5 = _3087;
                }
                else
                {
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    uint _3217;
                    _3211 = _3087;
                    _3212 = _3088;
                    _3213 = _3089;
                    _3214 = _3090;
                    _3215 = _3091;
                    _3216 = _3092;
                    _3217 = _3102;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    for (;;)
                    {
                        uint _3221 = uint(findLSB(_3217)) + (_3093 << 5u);
                        uint _3218 = (_3217 + 4294967295u) & _3217;
                        uint _3223 = _3221 * 48u;
                        vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 3u)).x));
                        uint _3243 = (_3221 * 48u) + 4u;
                        vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 3u)).x));
                        uint _3262 = (_3221 * 48u) + 8u;
                        vec3 _3273 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x));
                        float _3277 = _3237.x - _1940;
                        float _3278 = _3237.y - _1941;
                        float _3279 = _3237.z - _1942;
                        float _3280 = dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279));
                        float _3283 = inversesqrt(_3280);
                        float _3284 = _3283 * _3277;
                        float _3285 = _3283 * _3278;
                        float _3286 = _3283 * _3279;
                        float _3287 = dot(vec3(_828, _831, _834), vec3(_3284, _3285, _3286));
                        float _3292 = 1.0 - (_3280 * _3237.w);
                        float _4654 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3294 = sqrt(_3280) * _3256.w;
                        float _3297 = 1.39999997615814208984375 / (_3294 + 1.39999997615814208984375);
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3287) + _3298;
                        float _3304 = _3294 * _3294;
                        float _3308 = ((isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0))) * _3293) / ((_3304 * 0.699999988079071044921875) + 1.0);
                        float _3312 = (-0.0) - _1940;
                        float _3313 = (-0.0) - _1941;
                        float _3314 = (-0.0) - _1942;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3319 = _3318 * _3312;
                        float _3320 = _3318 * _3313;
                        float _3321 = _3318 * _3314;
                        float _3328 = exp2(log2(1.0 / ((_3304 * 3.5) + 5.0)) * 0.25);
                        float _3329 = 1.0 - _888;
                        float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                        float _3337 = _3336 * _3336;
                        float _3338 = _3337 * _3337;
                        float _3339 = _3319 + _3284;
                        float _3340 = _3320 + _3285;
                        float _3341 = _3321 + _3286;
                        float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                        float _3349 = dot(vec3(_828, _831, _834), vec3(_3319, _3320, _3321));
                        float _4670 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3353 = dot(vec3(_828, _831, _834), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                        float _4681 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3356 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                        float _3361 = _3297 * _3337;
                        float _3362 = _3361 * _3361;
                        float _3365 = ((1.0 - _3362) * _3287) + _3362;
                        float _4692 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3366 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3367 = 1.0 - _3337;
                        float _3377 = (0.5 / (((_3366 * ((_3352 * _3367) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3366 * _3367) + _3337) * _3352))) * _3366;
                        float _4703 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3388 = (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) / ((_3360 * _3360) * ((_3304 * 2.1991131305694580078125) + 3.141590118408203125))) * _3293;
                        _3146 = (_3308 * _3256.x) + _3214;
                        _3147 = (_3308 * _3256.y) + _3215;
                        _3148 = (_3308 * _3256.z) + _3216;
                        _3143 = (_3388 * _3273.x) + _3211;
                        _3144 = (_3388 * _3273.y) + _3212;
                        _3145 = (_3388 * _3273.z) + _3213;
                        if (_3218 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3211 = _3143;
                            _3212 = _3144;
                            _3213 = _3145;
                            _3214 = _3146;
                            _3215 = _3147;
                            _3216 = _3148;
                            _3217 = _3218;
                        }
                    }
                    frontier_phi_66_pred = _3148;
                    frontier_phi_66_pred_1 = _3147;
                    frontier_phi_66_pred_2 = _3146;
                    frontier_phi_66_pred_3 = _3145;
                    frontier_phi_66_pred_4 = _3144;
                    frontier_phi_66_pred_5 = _3143;
                }
                _2953 = frontier_phi_66_pred;
                _2951 = frontier_phi_66_pred_1;
                _2949 = frontier_phi_66_pred_2;
                _2947 = frontier_phi_66_pred_3;
                _2945 = frontier_phi_66_pred_4;
                _2943 = frontier_phi_66_pred_5;
                uint _3094 = _3093 + 1u;
                if (_3094 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3087 = _2943;
                    _3088 = _2945;
                    _3089 = _2947;
                    _3090 = _2949;
                    _3091 = _2951;
                    _3092 = _2953;
                    _3093 = _3094;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
        }
        uvec4 _2956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2957 = _2956.z;
        uint _2959 = (_2957 >> 8u) & 15u;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((4294967295u << _2959) & _2862) == 0u)
        {
            _3055 = _2942;
            _3057 = _2944;
            _3059 = _2946;
            _3061 = _2948;
            _3063 = _2950;
            _3065 = _2952;
        }
        else
        {
            float _3080 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
            float _3081 = _3080 * _1940;
            float _3082 = _3080 * _1941;
            float _3083 = _3080 * _1942;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2959 < ((_2957 >> 12u) & 15u))
            {
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3064;
                float _3066;
                float _3194 = _2942;
                float _3195 = _2944;
                float _3196 = _2946;
                float _3197 = _2948;
                float _3198 = _2950;
                float _3199 = _2952;
                uint _3200 = _2959;
                uint _3209;
                bool _3210;
                for (;;)
                {
                    _3209 = texelFetch(g_lightClassification, int((((_2856 << 5u) + (_2842 << 9u)) + (_3200 << 2u)) >> 2u)).x;
                    _3210 = _3209 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3210)
                    {
                        frontier_phi_72_pred = _3199;
                        frontier_phi_72_pred_1 = _3198;
                        frontier_phi_72_pred_2 = _3197;
                        frontier_phi_72_pred_3 = _3196;
                        frontier_phi_72_pred_4 = _3195;
                        frontier_phi_72_pred_5 = _3194;
                    }
                    else
                    {
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3406 = _3194;
                        float _3407 = _3195;
                        float _3408 = _3196;
                        float _3409 = _3197;
                        float _3410 = _3198;
                        float _3411 = _3199;
                        uint _3412 = _3209;
                        uint _3413;
                        vec4 _3438;
                        float _3439;
                        vec4 _3454;
                        vec3 _3466;
                        vec4 _3481;
                        vec4 _3496;
                        float _3542;
                        bool _3543;
                        for (;;)
                        {
                            uint _3423 = ((_3200 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3412));
                            _3413 = (_3412 + 4294967295u) & _3412;
                            uint _3425 = _3423 * 40u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            _3439 = _3438.w;
                            uint _3441 = (_3423 * 40u) + 4u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3423 * 40u) + 8u;
                            _3466 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x));
                            uint _3468 = (_3423 * 40u) + 16u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3423 * 40u) + 20u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3423 * 40u) + 24u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3517 = (_3423 * 40u) + 28u;
                            vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            _3542 = fma(_1942, _3530.z, fma(_1941, _3530.y, _3530.x * _1940)) + _3530.w;
                            _3543 = !((fma(_1942, _3511.z, fma(_1941, _3511.y, _3511.x * _1940)) + _3511.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3543)
                            {
                                float _3570 = _3438.x - _1940;
                                float _3571 = _3438.y - _1941;
                                float _3572 = _3438.z - _1942;
                                float _3573 = dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572));
                                float _3576 = inversesqrt(_3573);
                                float _3577 = _3576 * _3570;
                                float _3578 = _3576 * _3571;
                                float _3579 = _3576 * _3572;
                                float _3583 = 1.0 - (_3573 / (_3439 * _3439));
                                float _4714 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3588 = sqrt(_3573) * _3454.w;
                                float _3590 = 1.39999997615814208984375 / (_3588 + 1.39999997615814208984375);
                                float _3591 = _3590 * _3590;
                                float _3594 = ((1.0 - _3591) * dot(vec3(_3577, _3578, _3579), vec3(_828, _831, _834))) + _3591;
                                float _3597 = _3588 * _3588;
                                float _3601 = (fma(_1942, _3481.z, fma(_1941, _3481.y, _3481.x * _1940)) + _3481.w) / _3542;
                                float _3602 = (fma(_1942, _3496.z, fma(_1941, _3496.y, _3496.x * _1940)) + _3496.w) / _3542;
                                float _3606 = 1.0 - dot(vec2(_3601, _3602), vec2(_3601, _3602));
                                float _4730 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3608 = _3607 * (((isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0))) * _3584) / ((_3597 * 0.699999988079071044921875) + 1.0));
                                float _3620 = exp2(log2(1.0 / ((_3597 * 3.5) + 5.0)) * 0.25);
                                float _3621 = 1.0 - _888;
                                float _3628 = sqrt(1.0 - ((1.0 - (_3621 * _3621)) * (1.0 - (_3620 * _3620))));
                                float _3629 = _3628 * _3628;
                                float _3630 = _3629 * _3629;
                                float _3631 = _3577 - _3081;
                                float _3632 = _3578 - _3082;
                                float _3633 = _3579 - _3083;
                                float _3637 = inversesqrt(dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633)));
                                float _3641 = dot(vec3(_828, _831, _834), vec3((-0.0) - _3081, (-0.0) - _3082, (-0.0) - _3083));
                                float _4741 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3644 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3645 = dot(vec3(_828, _831, _834), vec3(_3637 * _3631, _3637 * _3632, _3637 * _3633));
                                float _4752 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3648 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3652 = ((_3648 * _3648) * (_3630 + (-1.0))) + 1.0;
                                float _3653 = _3590 * _3629;
                                float _3654 = _3653 * _3653;
                                float _3660 = ((1.0 - _3654) * dot(vec3(_828, _831, _834), vec3(_3577, _3578, _3579))) + _3654;
                                float _4763 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                                float _3662 = 1.0 - _3629;
                                float _3672 = (0.5 / (((_3661 * ((_3644 * _3662) + _3629)) + 9.9999999392252902907785028219223e-09) + (((_3661 * _3662) + _3629) * _3644))) * _3661;
                                float _4774 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3682 = (_3607 * _3584) * (((_3630 * 3.1415927410125732421875) * (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) / ((_3652 * _3652) * ((_3597 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3608 * _3454.y;
                                frontier_phi_78_pred_1 = _3608 * _3454.x;
                                frontier_phi_78_pred_2 = _3682 * _3466.z;
                                frontier_phi_78_pred_3 = _3682 * _3466.y;
                                frontier_phi_78_pred_4 = _3682 * _3466.x;
                                frontier_phi_78_pred_5 = _3608 * _3454.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3690 = frontier_phi_78_pred;
                            _3689 = frontier_phi_78_pred_1;
                            _3688 = frontier_phi_78_pred_2;
                            _3687 = frontier_phi_78_pred_3;
                            _3686 = frontier_phi_78_pred_4;
                            _3691 = frontier_phi_78_pred_5;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            if (_3413 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3413;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3398;
                        frontier_phi_72_pred_1 = _3397;
                        frontier_phi_72_pred_2 = _3396;
                        frontier_phi_72_pred_3 = _3395;
                        frontier_phi_72_pred_4 = _3394;
                        frontier_phi_72_pred_5 = _3393;
                    }
                    _3066 = frontier_phi_72_pred;
                    _3064 = frontier_phi_72_pred_1;
                    _3062 = frontier_phi_72_pred_2;
                    _3060 = frontier_phi_72_pred_3;
                    _3058 = frontier_phi_72_pred_4;
                    _3056 = frontier_phi_72_pred_5;
                    uint _3201 = _3200 + 1u;
                    if (_3201 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3194 = _3056;
                        _3195 = _3058;
                        _3196 = _3060;
                        _3197 = _3062;
                        _3198 = _3064;
                        _3199 = _3066;
                        _3200 = _3201;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3066;
                frontier_phi_60_61_ladder_1 = _3064;
                frontier_phi_60_61_ladder_2 = _3060;
                frontier_phi_60_61_ladder_3 = _3058;
                frontier_phi_60_61_ladder_4 = _3056;
                frontier_phi_60_61_ladder_5 = _3062;
            }
            else
            {
                frontier_phi_60_61_ladder = _2952;
                frontier_phi_60_61_ladder_1 = _2950;
                frontier_phi_60_61_ladder_2 = _2946;
                frontier_phi_60_61_ladder_3 = _2944;
                frontier_phi_60_61_ladder_4 = _2942;
                frontier_phi_60_61_ladder_5 = _2948;
            }
            _3055 = frontier_phi_60_61_ladder_4;
            _3057 = frontier_phi_60_61_ladder_3;
            _3059 = frontier_phi_60_61_ladder_2;
            _3061 = frontier_phi_60_61_ladder_5;
            _3063 = frontier_phi_60_61_ladder_1;
            _3065 = frontier_phi_60_61_ladder;
        }
        float _3070 = isnan(1.0) ? _872 : (isnan(_872) ? 1.0 : min(_872, 1.0));
        _2875 = (_3070 * _3061) + _2406;
        _2877 = (_3070 * _3063) + _2408;
        _2879 = (_3070 * _3065) + _2410;
        _2881 = ((_3055 * 0.039999999105930328369140625) * _3070) + _2729;
        _2883 = ((_3057 * 0.039999999105930328369140625) * _3070) + _2731;
        _2885 = ((_3059 * 0.039999999105930328369140625) * _3070) + _2733;
    }
    else
    {
        _2875 = _2406;
        _2877 = _2408;
        _2879 = _2410;
        _2881 = _2729;
        _2883 = _2731;
        _2885 = _2733;
    }
    float _4790 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4801 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4812 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    uint _2905 = _242 + 6u;
    float _2913 = _809 / cbSceneParam._m0[86u].x;
    float _2914 = _810 / cbSceneParam._m0[86u].y;
    vec4 _2928 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2913, _2914, (log2((isnan(cbSceneParam._m0[77u].w) ? _742 : (isnan(_742) ? cbSceneParam._m0[77u].w : min(_742, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2930 = _2928.x;
    float _2931 = _2928.y;
    float _2932 = _2928.z;
    float _2933 = _2928.w;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    if (_742 > cbSceneParam._m0[78u].w)
    {
        float _2967 = isnan(_742) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _742 : min(cbSceneParam._m0[80u].w, _742));
        float _2968 = _2967 / _742;
        float _2979 = _2968 * _794;
        float _2980 = _795 * _2968;
        float _2981 = (-0.0) - _2980;
        float _2983 = _2968 * _796;
        float _2985 = (cbSceneParam._m0[77u].w * _2981) / _2967;
        float _2986 = _2985 + cbSceneParam._m0[79u].w;
        float _2987 = cbSceneParam._m0[79u].w - _2980;
        float _2993 = sqrt(((_2979 * _2979) + (_2980 * _2980)) + (_2983 * _2983));
        float _2996 = (1.0 - (cbSceneParam._m0[77u].w / _2967)) * _2993;
        float _3001 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3003 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3156;
        if (abs((_2981 - _2985) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3156 = ((((_2986 > 0.0) ? exp2(_3001 * _2986) : (2.0 - exp2(_3003 * _2986))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2996;
        }
        else
        {
            float _3116 = 1.0 / cbSceneParam._m0[80u].x;
            float _3117 = isnan(_2987) ? _2986 : (isnan(_2986) ? _2987 : max(_2986, _2987));
            float _3118 = isnan(_2987) ? _2986 : (isnan(_2986) ? _2987 : min(_2986, _2987));
            float _3127 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : min(_3117, 0.0));
            float _3128 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : min(_3118, 0.0));
            _3156 = ((abs(_2993 / _2981) * cbSceneParam._m0[80u].y) * ((((_3127 - _3128) * 2.0) - ((exp2(_3001 * (isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0)))) - exp2(_3001 * (isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))))) * _3116)) - ((exp2(_3003 * _3127) - exp2(_3003 * _3128)) * _3116))) + (_2996 * cbSceneParam._m0[80u].z);
        }
        vec4 _3158 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2913, _2914, 1.0), 0.0);
        float _3167 = exp2((_3156 * (-1.44269502162933349609375)) * (1.0 - _3158.w));
        float _3168 = log2(_3167);
        float _3184 = log2(_2933);
        _3005 = (exp2(_3184 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].x)) * _3158.x) / cbSceneParam._m0[78u].x)) + _2930;
        _3007 = (exp2(_3184 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].y)) * _3158.y) / cbSceneParam._m0[78u].y)) + _2931;
        _3009 = (exp2(_3184 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].z)) * _3158.z) / cbSceneParam._m0[78u].z)) + _2932;
        _3011 = _3167 * _2933;
    }
    else
    {
        _3005 = _2930;
        _3007 = _2931;
        _3009 = _2932;
        _3011 = _2933;
    }
    float _3023 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3024 = _3023 == 3.0;
    float _3025 = log2(_3011);
    float _3032 = exp2(_3025 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2875 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _872))) + ((_2881 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1676)) * cbPerFrame._m0[3u].x));
    float _3033 = exp2(_3025 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2877 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _872))) + ((_2883 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1676)) * cbPerFrame._m0[3u].x));
    float _3034 = exp2(_3025 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2879 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _872))) + ((_2885 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1676)) * cbPerFrame._m0[3u].x));
    float _3043 = (_3023 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3043 * (_3024 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3005)));
    SV_Target.y = _3043 * (_3024 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3007)));
    SV_Target.z = _3043 * (_3024 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3009)));
    SV_Target.w = cbInstanceData._m0[_2905].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2905].w;
}


