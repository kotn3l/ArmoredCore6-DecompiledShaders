#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1432;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4020 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4031 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4042 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _424 = _422.x;
    float _436 = dot(vec4(_424, _422.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _453 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _387.x) * 2.0) - ((((_424 - _436) * cbMtdParam._m0[24u].z) + _436) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4053 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _461 = (_454 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _462 = (_454 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _463 = (_454 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _502 = _500.x;
    float _512 = dot(vec4(_502, _500.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _526 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _387.y) * 2.0) - ((((_502 - _512) * cbMtdParam._m0[24u].z) + _512) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4064 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _534 = (_527 * ((_480.x * cbMtdParam._m0[13u].x) - _461)) + _461;
    float _535 = (_527 * ((_480.y * cbMtdParam._m0[13u].y) - _462)) + _462;
    float _536 = (_527 * ((_480.z * cbMtdParam._m0[13u].z) - _463)) + _463;
    float _540 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _534;
    float _543 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _535;
    float _546 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _536;
    float _553 = ((_534 - _540) * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) + _540;
    float _554 = ((_535 - _543) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) + _543;
    float _555 = ((_536 - _546) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) + _546;
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _614 = _612.x;
    float _615 = _612.y;
    float _616 = _612.z;
    float _623 = ((_595.x - _614) * _454) + _614;
    float _624 = ((_595.y - _615) * _454) + _615;
    float _625 = ((_595.z - _616) * _454) + _616;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _650 = ((_637.z - _625) * _527) + _625;
    float _653 = ((((_637.x - _623) * _527) + _623) * 2.0) + (-1.0);
    float _654 = ((((_637.y - _624) * _527) + _624) * 2.0) + (-1.0);
    float _655 = dot(vec2(_653, _654), vec2(_653, _654));
    float _4075 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _660 = sqrt(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))));
    vec4 _674 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _701 = _699.x;
    float _702 = 1.0 - _701;
    float _708 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _711 = ((isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : min(_708, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _720 = (_711 - ((((((_701 - _702) * cbMtdParam._m0[24u].w) + _702) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _711))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4096 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _721 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _728 = (_721 * (cbMtdParam._m0[17u].x - _553)) + _553;
    float _729 = (_721 * (cbMtdParam._m0[17u].y - _554)) + _554;
    float _730 = (_721 * (cbMtdParam._m0[17u].z - _555)) + _555;
    vec4 _742 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _744 = _742.x;
    float _745 = 1.0 - _744;
    float _770 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_744 - _745) * cbMtdParam._m0[24u].y) + _745) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4107 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _771 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _779 = ((((cbMtdParam._m0[10u].x - _728) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _771) + _728;
    float _780 = ((((cbMtdParam._m0[10u].y - _729) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _771) + _729;
    float _781 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _730)) * _771) + _730;
    float _786 = (((_572.z - _650) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _650;
    float _790 = ((_674.z - _786) * cbMtdParam._m0[19u].w) + _786;
    vec4 _804 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _811 = (_804.x * 2.0) + (-1.0);
    float _812 = (_804.y * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _4118 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _821 = (_721 * (_804.z - _790)) + _790;
    float _824 = ((cbMtdParam._m0[23u].y - _821) * _771) + _821;
    vec4 _843 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _849 = (_843.x * 2.0) + (-1.0);
    float _850 = (_843.y * 2.0) + (-1.0);
    float _851 = dot(vec2(_849, _850), vec2(_849, _850));
    float _4129 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _865 = (_653 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_572.x * 2.0) + (-1.0)))) + (((_674.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _866 = (_654 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_572.y * 2.0) + (-1.0)))) + (((_674.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _878 = (((_811 - _865) + (cbMtdParam._m0[21u].x * _865)) * _721) + _865;
    float _879 = (((_812 - _866) + (cbMtdParam._m0[21u].x * _866)) * _721) + _866;
    float _880 = (_721 * (sqrt(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) - _660)) + _660;
    float _891 = (((_849 - _878) + (_878 * cbMtdParam._m0[22u].z)) * _771) + _878;
    float _892 = (((_850 - _879) + (_879 * cbMtdParam._m0[22u].z)) * _771) + _879;
    float _893 = ((sqrt(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) - _880) * _771) + _880;
    float _897 = cbMtdParam._m0[22u].x + _674.w;
    float _900 = fma(_893, _253 * NORMAL.x, fma(_892, _260 * TANGENT.x, (_246 * _238) * _891));
    float _903 = fma(_893, _253 * NORMAL.y, fma(_892, _260 * TANGENT.y, (_246 * _239) * _891));
    float _906 = fma(_893, _253 * NORMAL.z, fma(_892, _260 * TANGENT.z, (_246 * _240) * _891));
    float _910 = inversesqrt(dot(vec3(_900, _903, _906), vec3(_900, _903, _906)));
    float _911 = _910 * _900;
    float _912 = _910 * _903;
    float _913 = _910 * _906;
    float _4140 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _914 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _4162 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4173 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4184 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _932 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _983 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _973);
    float _984 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _973);
    float _985 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _973);
    float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
    float _990 = _983 * _989;
    float _991 = _984 * _989;
    float _992 = _985 * _989;
    float _998 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _999 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1017 = fma(_913, cbSceneParam._m0[5u].z, fma(_912, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _911));
    float _1020 = fma(_913, cbSceneParam._m0[6u].z, fma(_912, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _911));
    float _1023 = fma(_913, cbSceneParam._m0[7u].z, fma(_912, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _911));
    uint _1037 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1043 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbInstanceData._m0[_1037].x;
    float _1044 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * cbInstanceData._m0[_1037].y;
    float _1045 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbInstanceData._m0[_1037].z;
    float _4195 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _4217 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    vec4 _1057 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _998, cbSceneParam._m0[86u].y * _999));
    float _1061 = ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * TEXCOORD_5.w) * _1057.x;
    float _1062 = dot(vec3(_911, _912, _913), vec3(_990, _991, _992));
    float _1065 = _1062 * 2.0;
    float _1069 = (_1065 * _911) - _990;
    float _1070 = (_1065 * _912) - _991;
    float _1071 = (_1065 * _913) - _992;
    float _1075 = abs(dot(vec3(_990, _991, _992), vec3(_911, _912, _913)));
    float _4228 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1077 = sqrt(_914);
    float _1090 = exp2((_1077 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1077 * 3.0));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1431;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1156 = fma(_1130, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1122));
        float _1160 = fma(_1130, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1122));
        float _1164 = fma(_1130, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1122));
        float _1189 = _1122 + _911;
        float _1190 = _1126 + _912;
        float _1191 = _1130 + _913;
        float _1201 = fma(_1191, cbModelParam._m0[26u].z, fma(_1190, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1189)) - _1156;
        float _1202 = fma(_1191, cbModelParam._m0[27u].z, fma(_1190, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1189)) - _1160;
        float _1203 = fma(_1191, cbModelParam._m0[28u].z, fma(_1190, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1189)) - _1164;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1156 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1160 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[34u].z) + ((((((_1164 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1259 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1225.x + (-0.5));
        float _1261 = _1259 * (_1225.y + (-0.5));
        float _1262 = _1259 * (_1225.z + (-0.5));
        float _1269 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1232.x + (-0.5));
        float _1271 = _1269 * (_1232.y + (-0.5));
        float _1272 = _1269 * (_1232.z + (-0.5));
        float _1279 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1239.x + (-0.5));
        float _1281 = _1279 * (_1239.y + (-0.5));
        float _1282 = _1279 * (_1239.z + (-0.5));
        float _1289 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1246.x + (-0.5));
        float _1291 = _1289 * (_1246.y + (-0.5));
        float _1292 = _1289 * (_1246.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1313 = (dot(vec3(_911, _912, _913), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1323 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4276 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1325 + 1.0))) + _1330) * _1293;
        float _1340 = _1261 * 0.5;
        float _1341 = _1271 * 0.5;
        float _1342 = _1281 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_911, _912, _913), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4309 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1367 + 1.0))) + _1372) * _1294;
        float _1382 = _1262 * 0.5;
        float _1383 = _1272 * 0.5;
        float _1384 = _1282 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_911, _912, _913), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4342 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1409 + 1.0))) + _1414) * _1295;
        _1431 = _1262;
        _1433 = _1261;
        _1434 = _1260;
        _1435 = _1272;
        _1436 = _1271;
        _1437 = _1270;
        _1438 = _1282;
        _1439 = _1281;
        _1440 = _1280;
        _1441 = _1295;
        _1442 = _1294;
        _1443 = _1293;
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
    }
    else
    {
        _1431 = _1432;
        _1433 = _1432;
        _1434 = _1432;
        _1435 = _1432;
        _1436 = _1432;
        _1437 = _1432;
        _1438 = _1432;
        _1439 = _1432;
        _1440 = _1432;
        _1441 = _1432;
        _1442 = _1432;
        _1443 = _1432;
        _1444 = 0.0;
        _1445 = 0.0;
        _1446 = 0.0;
    }
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1470 = fma(_1130, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1122));
        float _1474 = fma(_1130, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1122));
        float _1478 = fma(_1130, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1122));
        float _1501 = _1122 + _911;
        float _1502 = _1126 + _912;
        float _1503 = _1130 + _913;
        float _1513 = fma(_1503, cbModelParam._m0[30u].z, fma(_1502, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1501)) - _1470;
        float _1514 = fma(_1503, cbModelParam._m0[31u].z, fma(_1502, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1501)) - _1474;
        float _1515 = fma(_1503, cbModelParam._m0[32u].z, fma(_1502, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1501)) - _1478;
        float _1519 = inversesqrt(dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515)));
        float _1532 = ((_1519 * _1513) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1470 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1519 * _1514) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1474 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1519 * _1515) / cbModelParam._m0[35u].z) + ((((((_1478 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        float _1569 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1536.x + (-0.5));
        float _1571 = _1569 * (_1536.y + (-0.5));
        float _1572 = _1569 * (_1536.z + (-0.5));
        float _1579 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1543.x + (-0.5));
        float _1581 = _1579 * (_1543.y + (-0.5));
        float _1582 = _1579 * (_1543.z + (-0.5));
        float _1589 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1550.x + (-0.5));
        float _1591 = _1589 * (_1550.y + (-0.5));
        float _1592 = _1589 * (_1550.z + (-0.5));
        float _1599 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1557.x + (-0.5));
        float _1601 = _1599 * (_1557.y + (-0.5));
        float _1602 = _1599 * (_1557.z + (-0.5));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = _1570 * 0.5;
        float _1607 = _1580 * 0.5;
        float _1608 = _1590 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_911, _912, _913), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4405 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1633 + 1.0))) + _1638) * _1603;
        float _1648 = _1571 * 0.5;
        float _1649 = _1581 * 0.5;
        float _1650 = _1591 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_911, _912, _913), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4438 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1675 + 1.0))) + _1680) * _1604;
        float _1690 = _1572 * 0.5;
        float _1691 = _1582 * 0.5;
        float _1692 = _1592 * 0.5;
        float _1693 = dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692));
        float _1698 = (_1693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1693);
        float _1706 = (dot(vec3(_911, _912, _913), vec3(_1698 * _1690, _1698 * _1691, _1698 * _1692)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1715 = sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1717 = _1716 * 2.0;
        float _1721 = (1.0 - _1716) / (_1716 + 1.0);
        float _4471 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1731 = ((((1.0 - _1722) * (_1717 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1717 + 1.0))) + _1722) * _1605;
        _1739 = _1572;
        _1740 = _1571;
        _1741 = _1570;
        _1742 = _1582;
        _1743 = _1581;
        _1744 = _1580;
        _1745 = _1592;
        _1746 = _1591;
        _1747 = _1590;
        _1748 = _1605;
        _1749 = _1604;
        _1750 = _1603;
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)));
    }
    else
    {
        _1739 = _1432;
        _1740 = _1432;
        _1741 = _1432;
        _1742 = _1432;
        _1743 = _1432;
        _1744 = _1432;
        _1745 = _1432;
        _1746 = _1432;
        _1747 = _1432;
        _1748 = _1432;
        _1749 = _1432;
        _1750 = _1432;
        _1751 = 0.0;
        _1752 = 0.0;
        _1753 = 0.0;
    }
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1444)) + _1444;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1445)) + _1445;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1446)) + _1446;
    float _1786 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1789 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1792 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1763));
    float _1807 = _1069 * 0.5;
    float _1808 = _1070 * 0.5;
    float _1809 = _1071 * 0.5;
    float _1810 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1813 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1816 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1850;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1823 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1431, _1435, _1438, _1441));
        float _1827 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1831 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1838 = dot(vec4(cbModelParam._m0[39u]), vec4(_1807, _1808, _1809, 1.0));
        _1850 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1838) ? 0.0 : (isnan(0.0) ? _1838 : max(0.0, _1838))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1850 = 1.0;
    }
    float _1861;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1852 = dot(vec4(cbModelParam._m0[40u]), vec4(_1807, _1808, _1809, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1852) ? 0.0 : (isnan(0.0) ? _1852 : max(0.0, _1852))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1865 = (_1861 * cbModelParam._m0[1u].x) + (_1850 * (1.0 - cbModelParam._m0[1u].x));
    float _1875 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _914);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1875 : min(cbModelParam._m0[25u].z, _1875));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1924 = fma(_1130, cbModelParam._m0[13u].z, fma(_1126, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1122)) + cbModelParam._m0[13u].w;
        float _1928 = fma(_1130, cbModelParam._m0[14u].z, fma(_1126, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1122)) + cbModelParam._m0[14u].w;
        float _1932 = fma(_1130, cbModelParam._m0[15u].z, fma(_1126, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1122)) + cbModelParam._m0[15u].w;
        float _1935 = fma(_1071, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069));
        float _1938 = fma(_1071, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069));
        float _1941 = fma(_1071, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069));
        float _1969;
        if (_1935 > 0.0)
        {
            _1969 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1969 = frontier_phi_14_12_ladder;
        }
        float _2139;
        if (_1938 > 0.0)
        {
            _2139 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2139 = frontier_phi_23_19_ladder;
        }
        float _2434;
        if (_1941 > 0.0)
        {
            _2434 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2434 = frontier_phi_35_30_ladder;
        }
        float _2436 = isnan(_2139) ? _1969 : (isnan(_1969) ? _2139 : min(_1969, _2139));
        float _2437 = isnan(_2434) ? _2436 : (isnan(_2436) ? _2434 : min(_2436, _2434));
        float _2441 = (_2437 * _1935) + _1924;
        float _2442 = (_2437 * _1938) + _1928;
        float _2443 = (_2437 * _1941) + _1932;
        float _2444 = _2437 * 9.9999997473787516355514526367188e-05;
        float _2446 = (-1.0) - _2444;
        float _2448 = _2444 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2443 > _2448) || ((_2443 < _2446) || ((_2442 > _2448) || ((_2442 < _2446) || ((_2441 < _2446) || (_2441 > _2448))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2443, cbModelParam._m0[9u].z, fma(_2442, cbModelParam._m0[9u].y, _2441 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2443, cbModelParam._m0[10u].z, fma(_2442, cbModelParam._m0[10u].y, _2441 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2443, cbModelParam._m0[11u].z, fma(_2442, cbModelParam._m0[11u].y, _2441 * cbModelParam._m0[11u].x))), _1876);
            frontier_phi_13_35_ladder = _2588.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2588.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2588.x * cbModelParam._m0[1u].y;
        }
        _1957 = frontier_phi_13_35_ladder_2;
        _1959 = frontier_phi_13_35_ladder_1;
        _1961 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1069, _1070, _1071), _1876);
        _1957 = _1945.x * cbModelParam._m0[1u].y;
        _1959 = _1945.y * cbModelParam._m0[1u].y;
        _1961 = _1945.z * cbModelParam._m0[1u].y;
    }
    float _1965 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _914);
    float _1966 = isnan(_1965) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1965 : min(cbModelParam._m0[25u].w, _1965));
    float _2056;
    float _2058;
    float _2060;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2020 = fma(_1130, cbModelParam._m0[21u].z, fma(_1126, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1122)) + cbModelParam._m0[21u].w;
        float _2024 = fma(_1130, cbModelParam._m0[22u].z, fma(_1126, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1122)) + cbModelParam._m0[22u].w;
        float _2028 = fma(_1130, cbModelParam._m0[23u].z, fma(_1126, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1122)) + cbModelParam._m0[23u].w;
        float _2031 = fma(_1071, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069));
        float _2034 = fma(_1071, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069));
        float _2037 = fma(_1071, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069));
        float _2144;
        if (_2031 > 0.0)
        {
            _2144 = abs((1.0 - _2020) / _2031);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2020 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2144 = frontier_phi_25_21_ladder;
        }
        float _2461;
        if (_2034 > 0.0)
        {
            _2461 = abs((1.0 - _2024) / _2034);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2024 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2461 = frontier_phi_37_32_ladder;
        }
        float _2788;
        if (_2037 > 0.0)
        {
            _2788 = abs((1.0 - _2028) / _2037);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2028 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2788 = frontier_phi_47_44_ladder;
        }
        float _2790 = isnan(_2461) ? _2144 : (isnan(_2144) ? _2461 : min(_2144, _2461));
        float _2791 = isnan(_2788) ? _2790 : (isnan(_2790) ? _2788 : min(_2790, _2788));
        float _2795 = (_2791 * _2031) + _2020;
        float _2796 = (_2791 * _2034) + _2024;
        float _2797 = (_2791 * _2037) + _2028;
        float _2798 = _2791 * 9.9999997473787516355514526367188e-05;
        float _2799 = (-1.0) - _2798;
        float _2801 = _2798 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2797 > _2801) || ((_2797 < _2799) || ((_2796 > _2801) || ((_2796 < _2799) || ((_2795 < _2799) || (_2795 > _2801))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2915 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2797, cbModelParam._m0[17u].z, fma(_2796, cbModelParam._m0[17u].y, _2795 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2797, cbModelParam._m0[18u].z, fma(_2796, cbModelParam._m0[18u].y, _2795 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2797, cbModelParam._m0[19u].z, fma(_2796, cbModelParam._m0[19u].y, _2795 * cbModelParam._m0[19u].x))), _1966);
            frontier_phi_22_47_ladder = _2915.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2915.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2915.x * cbModelParam._m0[1u].z;
        }
        _2056 = frontier_phi_22_47_ladder_2;
        _2058 = frontier_phi_22_47_ladder_1;
        _2060 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2040 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1069, _1070, _1071), _1966);
        _2056 = _2040.x * cbModelParam._m0[1u].z;
        _2058 = _2040.y * cbModelParam._m0[1u].z;
        _2060 = _2040.z * cbModelParam._m0[1u].z;
    }
    float _2072 = ((((1.0 - _1090) * ((_1077 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1090 * _1077)) * _1061;
    float _2073 = _2072 * ((cbModelParam._m0[1u].w * (_2056 - _1957)) + _1957);
    float _2074 = _2072 * ((cbModelParam._m0[1u].w * (_2058 - _1959)) + _1959);
    float _2075 = _2072 * ((cbModelParam._m0[1u].w * (_2060 - _1961)) + _1961);
    float _2078 = fma(_2075, cbSceneParam._m0[89u].z, fma(_2074, cbSceneParam._m0[89u].y, _2073 * cbSceneParam._m0[89u].x));
    float _2081 = fma(_2075, cbSceneParam._m0[90u].z, fma(_2074, cbSceneParam._m0[90u].y, _2073 * cbSceneParam._m0[90u].x));
    float _2084 = fma(_2075, cbSceneParam._m0[91u].z, fma(_2074, cbSceneParam._m0[91u].y, _2073 * cbSceneParam._m0[91u].x));
    float _2118 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2122 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2126 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2130 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2131 = _2118 / _2130;
    float _2132 = _2122 / _2130;
    float _2133 = _2126 / _2130;
    float _2280;
    float _2281;
    float _2282;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2160 = ((uint(_2133 > cbSceneParam._m0[59u].y) + uint(_2133 > cbSceneParam._m0[59u].x)) + uint(_2133 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2161 = _2160 + 43u;
        uint _2169 = _2160 + 44u;
        uint _2177 = _2160 + 45u;
        uint _2185 = _2160 + 46u;
        float _2196 = fma(_2130, cbSceneParam._m0[_2161].w, fma(_2126, cbSceneParam._m0[_2161].z, fma(_2122, cbSceneParam._m0[_2161].y, _2118 * cbSceneParam._m0[_2161].x)));
        float _2200 = fma(_2130, cbSceneParam._m0[_2169].w, fma(_2126, cbSceneParam._m0[_2169].z, fma(_2122, cbSceneParam._m0[_2169].y, _2118 * cbSceneParam._m0[_2169].x)));
        float _2208 = fma(_2130, cbSceneParam._m0[_2185].w, fma(_2126, cbSceneParam._m0[_2185].z, fma(_2122, cbSceneParam._m0[_2185].y, _2118 * cbSceneParam._m0[_2185].x)));
        float _2213 = cbSceneParam._m0[33u].z * _2208;
        float _2215 = cbSceneParam._m0[33u].w * _2208;
        float _2218 = fma(_2130, cbSceneParam._m0[_2177].w, fma(_2126, cbSceneParam._m0[_2177].z, fma(_2122, cbSceneParam._m0[_2177].y, _2118 * cbSceneParam._m0[_2177].x))) / _2208;
        float _2266 = (cbSceneParam._m0[33u].x - sqrt(((_2132 * _2132) + (_2131 * _2131)) + (_2133 * _2133))) * cbSceneParam._m0[33u].y;
        float _4597 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2273 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2213 + _2196) / _2208, (_2215 + _2200) / _2208), _2218), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2215 + _2196) / _2208, (_2200 - _2213) / _2208), _2218), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 - _2213) / _2208, (_2200 - _2215) / _2208), _2218), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 - _2215) / _2208, (_2213 + _2200) / _2208), _2218), 0.0)).x), vec4(0.25)));
        _2280 = 1.0 - (_2273 * cbSceneParam._m0[34u].x);
        _2281 = 1.0 - (_2273 * cbSceneParam._m0[34u].y);
        _2282 = 1.0 - (_2273 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2280 = 1.0;
        _2281 = 1.0;
        _2282 = 1.0;
    }
    float _2346;
    float _2348;
    float _2350;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2334 = fma(_2130, cbSceneParam._m0[63u].w, fma(_2126, cbSceneParam._m0[63u].z, fma(_2122, cbSceneParam._m0[63u].y, _2118 * cbSceneParam._m0[63u].x)));
        float _2335 = fma(_2130, cbSceneParam._m0[60u].w, fma(_2126, cbSceneParam._m0[60u].z, fma(_2122, cbSceneParam._m0[60u].y, _2118 * cbSceneParam._m0[60u].x))) / _2334;
        float _2336 = fma(_2130, cbSceneParam._m0[61u].w, fma(_2126, cbSceneParam._m0[61u].z, fma(_2122, cbSceneParam._m0[61u].y, _2118 * cbSceneParam._m0[61u].x))) / _2334;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2335 >= cbSceneParam._m0[64u].x) && (_2336 >= cbSceneParam._m0[64u].y)) && (_2335 <= cbSceneParam._m0[64u].z)) && (_2336 <= cbSceneParam._m0[64u].w))
        {
            float _2474 = fma(_2130, cbSceneParam._m0[62u].w, fma(_2126, cbSceneParam._m0[62u].z, fma(_2122, cbSceneParam._m0[62u].y, _2118 * cbSceneParam._m0[62u].x))) / _2334;
            float _2478 = isnan(cbSceneParam._m0[41u].w) ? _2474 : (isnan(_2474) ? cbSceneParam._m0[41u].w : max(_2474, cbSceneParam._m0[41u].w));
            float _2521 = (cbSceneParam._m0[33u].x - sqrt(((_2132 * _2132) + (_2131 * _2131)) + (_2133 * _2133))) * cbSceneParam._m0[33u].y;
            float _4613 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
            float _2528 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2335, cbSceneParam._m0[33u].w + _2336), _2478), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2335, _2336 - cbSceneParam._m0[33u].z), _2478), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2335 - cbSceneParam._m0[33u].z, _2336 - cbSceneParam._m0[33u].w), _2478), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2335 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2336), _2478), 0.0)).x), vec4(0.25)));
            float _2532 = 1.0 - (_2528 * cbSceneParam._m0[34u].x);
            float _2533 = 1.0 - (_2528 * cbSceneParam._m0[34u].y);
            float _2534 = 1.0 - (_2528 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2534) ? _2282 : (isnan(_2282) ? _2534 : min(_2282, _2534));
            frontier_phi_34_33_ladder_1 = isnan(_2533) ? _2281 : (isnan(_2281) ? _2533 : min(_2281, _2533));
            frontier_phi_34_33_ladder_2 = isnan(_2532) ? _2280 : (isnan(_2280) ? _2532 : min(_2280, _2532));
        }
        else
        {
            frontier_phi_34_33_ladder = _2282;
            frontier_phi_34_33_ladder_1 = _2281;
            frontier_phi_34_33_ladder_2 = _2280;
        }
        _2346 = frontier_phi_34_33_ladder_2;
        _2348 = frontier_phi_34_33_ladder_1;
        _2350 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2346 = _2280;
        _2348 = _2281;
        _2350 = _2282;
    }
    uvec4 _2355 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2357 = _2355.x * 14u;
    uint _2358 = _2357 + 13u;
    float _2365 = _1061 + (-1.0);
    float _2370 = (cbLight._m0[_2358].x * _2365) + 1.0;
    float _2371 = (cbLight._m0[_2358].y * _2365) + 1.0;
    float _2372 = (cbLight._m0[_2358].z * _2365) + 1.0;
    float _2373 = (cbLight._m0[_2358].w * _2365) + 1.0;
    uint _2374 = _2357 + 5u;
    float _2380 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
    uint _2384 = _2357 + 4u;
    float _2393 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
    uint _2397 = _2357 | 1u;
    float _2408 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_911, _912, _913));
    float _2411 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_911, _912, _913));
    float _4649 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _4660 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2416 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * 0.3183098733425140380859375;
    float _2418 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * 0.3183098733425140380859375;
    float _2425 = ((cbLight._m0[_2374].x * _2380) * _2418) + (((cbLight._m0[_2384].x * _2346) * _2393) * _2416);
    float _2426 = ((_2380 * cbLight._m0[_2374].y) * _2418) + (((cbLight._m0[_2384].y * _2348) * _2393) * _2416);
    float _2427 = ((_2380 * cbLight._m0[_2374].z) * _2418) + (((cbLight._m0[_2384].z * _2350) * _2393) * _2416);
    uvec4 _2431 = floatBitsToUint(cbLight._m0[_2357 + 12u]);
    bool _2433 = _2431.x == 0u;
    float _2535;
    float _2537;
    float _2539;
    if (_2433)
    {
        _2535 = _2425;
        _2537 = _2426;
        _2539 = _2427;
    }
    else
    {
        uint _2543 = _2357 + 6u;
        float _2559 = (dot(vec3(cbLight._m0[_2357 + 2u].xyz), vec3(_911, _912, _913)) * 0.5) + 0.5;
        float _2560 = _2559 * _2559;
        float _4671 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2561 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2562 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2535 = (((cbLight._m0[_2543].x * 0.3183098733425140380859375) * _2561) * _2562) + _2425;
        _2537 = (((cbLight._m0[_2543].y * 0.3183098733425140380859375) * _2561) * _2562) + _2426;
        _2539 = (((cbLight._m0[_2543].z * 0.3183098733425140380859375) * _2561) * _2562) + _2427;
    }
    bool _2542 = _2431.y == 0u;
    float _2597;
    float _2599;
    float _2601;
    if (_2542)
    {
        _2597 = _2535;
        _2599 = _2537;
        _2601 = _2539;
    }
    else
    {
        uint _2759 = _2357 + 7u;
        float _2775 = (dot(vec3(cbLight._m0[_2357 + 3u].xyz), vec3(_911, _912, _913)) * 0.5) + 0.5;
        float _2776 = _2775 * _2775;
        float _4687 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2777 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2778 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        _2597 = (((cbLight._m0[_2759].x * 0.3183098733425140380859375) * _2777) * _2778) + _2535;
        _2599 = (((cbLight._m0[_2759].y * 0.3183098733425140380859375) * _2777) * _2778) + _2537;
        _2601 = (((cbLight._m0[_2759].z * 0.3183098733425140380859375) * _2777) * _2778) + _2539;
    }
    uint _2604 = _2357 + 8u;
    float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _914) * 0.949999988079071044921875);
    float _2618 = _2617 * _2617;
    float _2619 = cbLight._m0[_2357].x + _990;
    float _2620 = cbLight._m0[_2357].y + _991;
    float _2621 = cbLight._m0[_2357].z + _992;
    float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
    float _2626 = _2625 * _2619;
    float _2627 = _2625 * _2620;
    float _2628 = _2625 * _2621;
    float _2629 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2357].xyz));
    float _4703 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2632 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _4714 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _2633 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _2634 = dot(vec3(_911, _912, _913), vec3(_2626, _2627, _2628));
    float _4725 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2638 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2626, _2627, _2628));
    float _4736 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2642 = _2618 * _2618;
    float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
    float _2657 = (exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2658 = 1.0 - _2618;
    float _2669 = (0.5 / (((_2633 * ((_2632 * _2658) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _2658) + _2618) * _2632))) * _2632;
    float _4747 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2671 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
    uint _2685 = _2357 + 9u;
    float _2696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _914) * 0.949999988079071044921875);
    float _2697 = _2696 * _2696;
    float _2698 = cbLight._m0[_2397].x + _990;
    float _2699 = cbLight._m0[_2397].y + _991;
    float _2700 = cbLight._m0[_2397].z + _992;
    float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
    float _2705 = _2704 * _2698;
    float _2706 = _2704 * _2699;
    float _2707 = _2704 * _2700;
    float _2708 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2397].xyz));
    float _4758 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2711 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2712 = dot(vec3(_911, _912, _913), vec3(_2705, _2706, _2707));
    float _4769 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2715 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2716 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2705, _2706, _2707));
    float _4780 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2720 = _2697 * _2697;
    float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
    float _2733 = (exp2(log2(1.0 - (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2734 = 1.0 - _2697;
    float _2744 = (0.5 / (((_2633 * ((_2711 * _2734) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _2734) + _2697) * _2711))) * _2711;
    float _4791 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2746 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
    float _2756 = (((_2733 * cbLight._m0[_2685].x) * _2746) * _2380) + ((((cbLight._m0[_2604].x * _2346) * _2657) * _2671) * _2393);
    float _2757 = (((_2733 * cbLight._m0[_2685].y) * _2746) * _2380) + ((((cbLight._m0[_2604].y * _2348) * _2657) * _2671) * _2393);
    float _2758 = (((_2733 * cbLight._m0[_2685].z) * _2746) * _2380) + ((((cbLight._m0[_2604].z * _2350) * _2657) * _2671) * _2393);
    float _2814;
    float _2816;
    float _2818;
    if (_2433)
    {
        _2814 = _2756;
        _2816 = _2757;
        _2818 = _2758;
    }
    else
    {
        uint _2820 = _2357 + 2u;
        uint _2824 = _2357 + 10u;
        float _2838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2820].w)) * _914) * 0.949999988079071044921875);
        float _2839 = _2838 * _2838;
        float _2840 = cbLight._m0[_2820].x + _990;
        float _2841 = cbLight._m0[_2820].y + _991;
        float _2842 = cbLight._m0[_2820].z + _992;
        float _2846 = inversesqrt(dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842)));
        float _2847 = _2846 * _2840;
        float _2848 = _2846 * _2841;
        float _2849 = _2846 * _2842;
        float _2850 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2820].xyz));
        float _4802 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2853 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _2854 = dot(vec3(_911, _912, _913), vec3(_2847, _2848, _2849));
        float _4813 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2857 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2858 = dot(vec3(cbLight._m0[_2820].xyz), vec3(_2847, _2848, _2849));
        float _4824 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2862 = _2839 * _2839;
        float _2866 = ((_2857 * _2857) * (_2862 + (-1.0))) + 1.0;
        float _2875 = (exp2(log2(1.0 - (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2876 = 1.0 - _2839;
        float _2886 = (0.5 / (((_2633 * ((_2853 * _2876) + _2839)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _2876) + _2839) * _2853))) * _2853;
        float _4835 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2888 = (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2862 / ((_2866 * _2866) * 3.141590118408203125));
        float _2889 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2814 = (((_2875 * cbLight._m0[_2824].x) * _2888) * _2889) + _2756;
        _2816 = (((_2875 * cbLight._m0[_2824].y) * _2888) * _2889) + _2757;
        _2818 = (((_2875 * cbLight._m0[_2824].z) * _2888) * _2889) + _2758;
    }
    float _2920;
    float _2922;
    float _2924;
    if (_2542)
    {
        _2920 = _2814;
        _2922 = _2816;
        _2924 = _2818;
    }
    else
    {
        uint _2931 = _2357 + 3u;
        uint _2935 = _2357 + 11u;
        float _2949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2931].w)) * _914) * 0.949999988079071044921875);
        float _2950 = _2949 * _2949;
        float _2951 = cbLight._m0[_2931].x + _990;
        float _2952 = cbLight._m0[_2931].y + _991;
        float _2953 = cbLight._m0[_2931].z + _992;
        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
        float _2958 = _2957 * _2951;
        float _2959 = _2957 * _2952;
        float _2960 = _2957 * _2953;
        float _2961 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2931].xyz));
        float _4851 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2964 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
        float _2965 = dot(vec3(_911, _912, _913), vec3(_2958, _2959, _2960));
        float _4862 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2968 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2969 = dot(vec3(cbLight._m0[_2931].xyz), vec3(_2958, _2959, _2960));
        float _4873 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2973 = _2950 * _2950;
        float _2977 = ((_2968 * _2968) * (_2973 + (-1.0))) + 1.0;
        float _2986 = (exp2(log2(1.0 - (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2987 = 1.0 - _2950;
        float _2997 = (0.5 / (((_2633 * ((_2964 * _2987) + _2950)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _2987) + _2950) * _2964))) * _2964;
        float _4884 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _2999 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2973 / ((_2977 * _2977) * 3.141590118408203125));
        float _3000 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        _2920 = (((_2986 * cbLight._m0[_2935].x) * _2999) * _3000) + _2814;
        _2922 = (((_2986 * cbLight._m0[_2935].y) * _2999) * _3000) + _2816;
        _2924 = (((_2986 * cbLight._m0[_2935].z) * _2999) * _3000) + _2818;
    }
    float _3066;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    if (_2355.y == 0u)
    {
        uvec4 _3021 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3022 = _3021.x;
        uint _3033 = uint((float(_3021.y) * floor(float(uint(cbSceneParam._m0[85u].y * _999) / _3022))) + floor(float(uint(cbSceneParam._m0[85u].x * _998) / _3022)));
        float _3043 = (log2(_2133 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3044 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        uint _3047 = uint(isnan(14.0) ? _3044 : (isnan(_3044) ? 14.0 : min(_3044, 14.0)));
        uvec4 _3052 = texelFetch(g_lightClusterGridBuffer, int(((_3047 << 2u) + (_3033 << 6u)) >> 2u));
        uint _3053 = _3052.x;
        uint _3054 = _3021.z;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        if (((((1u << ((_3054 >> 4u) & 15u)) + 4294967295u) & _3053) == 0u) || ((_3054 & 240u) == 0u))
        {
            _3133 = 0.0;
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
            _3141 = 0.0;
            _3143 = 0.0;
        }
        else
        {
            float _3134;
            float _3136;
            float _3138;
            float _3140;
            float _3142;
            float _3144;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            float _3283 = 0.0;
            uint _3284 = 0u;
            uint _3293;
            bool _3294;
            for (;;)
            {
                _3293 = texelFetch(g_lightClassification, int((((_3047 << 5u) + (_3033 << 9u)) + (_3284 << 2u)) >> 2u)).x;
                _3294 = _3293 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3294)
                {
                    frontier_phi_66_pred = _3283;
                    frontier_phi_66_pred_1 = _3282;
                    frontier_phi_66_pred_2 = _3281;
                    frontier_phi_66_pred_3 = _3280;
                    frontier_phi_66_pred_4 = _3279;
                    frontier_phi_66_pred_5 = _3278;
                }
                else
                {
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    uint _3408;
                    _3402 = _3278;
                    _3403 = _3279;
                    _3404 = _3280;
                    _3405 = _3281;
                    _3406 = _3282;
                    _3407 = _3283;
                    _3408 = _3293;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    for (;;)
                    {
                        uint _3412 = uint(findLSB(_3408)) + (_3284 << 5u);
                        uint _3409 = (_3408 + 4294967295u) & _3408;
                        uint _3414 = _3412 * 48u;
                        vec4 _3428 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3414)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 3u)).x));
                        uint _3434 = (_3412 * 48u) + 4u;
                        vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3434)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 3u)).x));
                        uint _3453 = (_3412 * 48u) + 8u;
                        vec3 _3464 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3453)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 2u)).x));
                        float _3468 = _3428.x - _2131;
                        float _3469 = _3428.y - _2132;
                        float _3470 = _3428.z - _2133;
                        float _3471 = dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470));
                        float _3474 = inversesqrt(_3471);
                        float _3475 = _3474 * _3468;
                        float _3476 = _3474 * _3469;
                        float _3477 = _3474 * _3470;
                        float _3478 = dot(vec3(_1017, _1020, _1023), vec3(_3475, _3476, _3477));
                        float _3483 = 1.0 - (_3471 * _3428.w);
                        float _4910 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3484 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3485 = sqrt(_3471) * _3447.w;
                        float _3488 = 1.39999997615814208984375 / (_3485 + 1.39999997615814208984375);
                        float _3489 = _3488 * _3488;
                        float _3492 = ((1.0 - _3489) * _3478) + _3489;
                        float _3495 = _3485 * _3485;
                        float _3499 = ((isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0))) * _3484) / ((_3495 * 0.699999988079071044921875) + 1.0);
                        float _3503 = (-0.0) - _2131;
                        float _3504 = (-0.0) - _2132;
                        float _3505 = (-0.0) - _2133;
                        float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                        float _3510 = _3509 * _3503;
                        float _3511 = _3509 * _3504;
                        float _3512 = _3509 * _3505;
                        float _3519 = exp2(log2(1.0 / ((_3495 * 3.5) + 5.0)) * 0.25);
                        float _3520 = 1.0 - _1077;
                        float _3527 = sqrt(1.0 - ((1.0 - (_3520 * _3520)) * (1.0 - (_3519 * _3519))));
                        float _3528 = _3527 * _3527;
                        float _3529 = _3528 * _3528;
                        float _3530 = _3510 + _3475;
                        float _3531 = _3511 + _3476;
                        float _3532 = _3512 + _3477;
                        float _3536 = inversesqrt(dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532)));
                        float _3540 = dot(vec3(_1017, _1020, _1023), vec3(_3510, _3511, _3512));
                        float _4926 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3543 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3544 = dot(vec3(_1017, _1020, _1023), vec3(_3536 * _3530, _3536 * _3531, _3536 * _3532));
                        float _4937 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3547 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3551 = ((_3547 * _3547) * (_3529 + (-1.0))) + 1.0;
                        float _3552 = _3488 * _3528;
                        float _3553 = _3552 * _3552;
                        float _3556 = ((1.0 - _3553) * _3478) + _3553;
                        float _4948 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3557 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3558 = 1.0 - _3528;
                        float _3568 = (0.5 / (((_3557 * ((_3543 * _3558) + _3528)) + 9.9999999392252902907785028219223e-09) + (((_3557 * _3558) + _3528) * _3543))) * _3557;
                        float _4959 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3579 = (((_3529 * 3.1415927410125732421875) * (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0)))) / ((_3551 * _3551) * ((_3495 * 2.1991131305694580078125) + 3.141590118408203125))) * _3484;
                        _3337 = (_3499 * _3447.x) + _3405;
                        _3338 = (_3499 * _3447.y) + _3406;
                        _3339 = (_3499 * _3447.z) + _3407;
                        _3334 = (_3579 * _3464.x) + _3402;
                        _3335 = (_3579 * _3464.y) + _3403;
                        _3336 = (_3579 * _3464.z) + _3404;
                        if (_3409 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3402 = _3334;
                            _3403 = _3335;
                            _3404 = _3336;
                            _3405 = _3337;
                            _3406 = _3338;
                            _3407 = _3339;
                            _3408 = _3409;
                        }
                    }
                    frontier_phi_66_pred = _3339;
                    frontier_phi_66_pred_1 = _3338;
                    frontier_phi_66_pred_2 = _3337;
                    frontier_phi_66_pred_3 = _3336;
                    frontier_phi_66_pred_4 = _3335;
                    frontier_phi_66_pred_5 = _3334;
                }
                _3144 = frontier_phi_66_pred;
                _3142 = frontier_phi_66_pred_1;
                _3140 = frontier_phi_66_pred_2;
                _3138 = frontier_phi_66_pred_3;
                _3136 = frontier_phi_66_pred_4;
                _3134 = frontier_phi_66_pred_5;
                uint _3285 = _3284 + 1u;
                if (_3285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3278 = _3134;
                    _3279 = _3136;
                    _3280 = _3138;
                    _3281 = _3140;
                    _3282 = _3142;
                    _3283 = _3144;
                    _3284 = _3285;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3133 = _3134;
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
            _3141 = _3142;
            _3143 = _3144;
        }
        uvec4 _3147 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3148 = _3147.z;
        uint _3150 = (_3148 >> 8u) & 15u;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        if (((4294967295u << _3150) & _3053) == 0u)
        {
            _3246 = _3133;
            _3248 = _3135;
            _3250 = _3137;
            _3252 = _3139;
            _3254 = _3141;
            _3256 = _3143;
        }
        else
        {
            float _3271 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
            float _3272 = _3271 * _2131;
            float _3273 = _3271 * _2132;
            float _3274 = _3271 * _2133;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3150 < ((_3148 >> 12u) & 15u))
            {
                float _3247;
                float _3249;
                float _3251;
                float _3253;
                float _3255;
                float _3257;
                float _3385 = _3133;
                float _3386 = _3135;
                float _3387 = _3137;
                float _3388 = _3139;
                float _3389 = _3141;
                float _3390 = _3143;
                uint _3391 = _3150;
                uint _3400;
                bool _3401;
                for (;;)
                {
                    _3400 = texelFetch(g_lightClassification, int((((_3047 << 5u) + (_3033 << 9u)) + (_3391 << 2u)) >> 2u)).x;
                    _3401 = _3400 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3401)
                    {
                        frontier_phi_72_pred = _3390;
                        frontier_phi_72_pred_1 = _3389;
                        frontier_phi_72_pred_2 = _3388;
                        frontier_phi_72_pred_3 = _3387;
                        frontier_phi_72_pred_4 = _3386;
                        frontier_phi_72_pred_5 = _3385;
                    }
                    else
                    {
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3597 = _3385;
                        float _3598 = _3386;
                        float _3599 = _3387;
                        float _3600 = _3388;
                        float _3601 = _3389;
                        float _3602 = _3390;
                        uint _3603 = _3400;
                        uint _3604;
                        vec4 _3629;
                        float _3630;
                        vec4 _3645;
                        vec3 _3657;
                        vec4 _3672;
                        vec4 _3687;
                        float _3733;
                        bool _3734;
                        for (;;)
                        {
                            uint _3614 = ((_3391 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3603));
                            _3604 = (_3603 + 4294967295u) & _3603;
                            uint _3616 = _3614 * 40u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            _3630 = _3629.w;
                            uint _3632 = (_3614 * 40u) + 4u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3614 * 40u) + 8u;
                            _3657 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x));
                            uint _3659 = (_3614 * 40u) + 16u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3674 = (_3614 * 40u) + 20u;
                            _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3689 = (_3614 * 40u) + 24u;
                            vec4 _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            uint _3708 = (_3614 * 40u) + 28u;
                            vec4 _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            _3733 = fma(_2133, _3721.z, fma(_2132, _3721.y, _3721.x * _2131)) + _3721.w;
                            _3734 = !((fma(_2133, _3702.z, fma(_2132, _3702.y, _3702.x * _2131)) + _3702.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3734)
                            {
                                float _3761 = _3629.x - _2131;
                                float _3762 = _3629.y - _2132;
                                float _3763 = _3629.z - _2133;
                                float _3764 = dot(vec3(_3761, _3762, _3763), vec3(_3761, _3762, _3763));
                                float _3767 = inversesqrt(_3764);
                                float _3768 = _3767 * _3761;
                                float _3769 = _3767 * _3762;
                                float _3770 = _3767 * _3763;
                                float _3774 = 1.0 - (_3764 / (_3630 * _3630));
                                float _4970 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3775 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3779 = sqrt(_3764) * _3645.w;
                                float _3781 = 1.39999997615814208984375 / (_3779 + 1.39999997615814208984375);
                                float _3782 = _3781 * _3781;
                                float _3785 = ((1.0 - _3782) * dot(vec3(_3768, _3769, _3770), vec3(_1017, _1020, _1023))) + _3782;
                                float _3788 = _3779 * _3779;
                                float _3792 = (fma(_2133, _3672.z, fma(_2132, _3672.y, _3672.x * _2131)) + _3672.w) / _3733;
                                float _3793 = (fma(_2133, _3687.z, fma(_2132, _3687.y, _3687.x * _2131)) + _3687.w) / _3733;
                                float _3797 = 1.0 - dot(vec2(_3792, _3793), vec2(_3792, _3793));
                                float _4986 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3798 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3799 = _3798 * (((isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0))) * _3775) / ((_3788 * 0.699999988079071044921875) + 1.0));
                                float _3811 = exp2(log2(1.0 / ((_3788 * 3.5) + 5.0)) * 0.25);
                                float _3812 = 1.0 - _1077;
                                float _3819 = sqrt(1.0 - ((1.0 - (_3812 * _3812)) * (1.0 - (_3811 * _3811))));
                                float _3820 = _3819 * _3819;
                                float _3821 = _3820 * _3820;
                                float _3822 = _3768 - _3272;
                                float _3823 = _3769 - _3273;
                                float _3824 = _3770 - _3274;
                                float _3828 = inversesqrt(dot(vec3(_3822, _3823, _3824), vec3(_3822, _3823, _3824)));
                                float _3832 = dot(vec3(_1017, _1020, _1023), vec3((-0.0) - _3272, (-0.0) - _3273, (-0.0) - _3274));
                                float _4997 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3835 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3836 = dot(vec3(_1017, _1020, _1023), vec3(_3828 * _3822, _3828 * _3823, _3828 * _3824));
                                float _5008 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3839 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3843 = ((_3839 * _3839) * (_3821 + (-1.0))) + 1.0;
                                float _3844 = _3781 * _3820;
                                float _3845 = _3844 * _3844;
                                float _3851 = ((1.0 - _3845) * dot(vec3(_1017, _1020, _1023), vec3(_3768, _3769, _3770))) + _3845;
                                float _5019 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3852 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3853 = 1.0 - _3820;
                                float _3863 = (0.5 / (((_3852 * ((_3835 * _3853) + _3820)) + 9.9999999392252902907785028219223e-09) + (((_3852 * _3853) + _3820) * _3835))) * _3852;
                                float _5030 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3873 = (_3798 * _3775) * (((_3821 * 3.1415927410125732421875) * (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0)))) / ((_3843 * _3843) * ((_3788 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3799 * _3645.y;
                                frontier_phi_78_pred_1 = _3799 * _3645.x;
                                frontier_phi_78_pred_2 = _3873 * _3657.z;
                                frontier_phi_78_pred_3 = _3873 * _3657.y;
                                frontier_phi_78_pred_4 = _3873 * _3657.x;
                                frontier_phi_78_pred_5 = _3799 * _3645.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3881 = frontier_phi_78_pred;
                            _3880 = frontier_phi_78_pred_1;
                            _3879 = frontier_phi_78_pred_2;
                            _3878 = frontier_phi_78_pred_3;
                            _3877 = frontier_phi_78_pred_4;
                            _3882 = frontier_phi_78_pred_5;
                            _3587 = _3880 + _3600;
                            _3588 = _3881 + _3601;
                            _3589 = _3882 + _3602;
                            _3584 = _3877 + _3597;
                            _3585 = _3878 + _3598;
                            _3586 = _3879 + _3599;
                            if (_3604 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3604;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3589;
                        frontier_phi_72_pred_1 = _3588;
                        frontier_phi_72_pred_2 = _3587;
                        frontier_phi_72_pred_3 = _3586;
                        frontier_phi_72_pred_4 = _3585;
                        frontier_phi_72_pred_5 = _3584;
                    }
                    _3257 = frontier_phi_72_pred;
                    _3255 = frontier_phi_72_pred_1;
                    _3253 = frontier_phi_72_pred_2;
                    _3251 = frontier_phi_72_pred_3;
                    _3249 = frontier_phi_72_pred_4;
                    _3247 = frontier_phi_72_pred_5;
                    uint _3392 = _3391 + 1u;
                    if (_3392 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3385 = _3247;
                        _3386 = _3249;
                        _3387 = _3251;
                        _3388 = _3253;
                        _3389 = _3255;
                        _3390 = _3257;
                        _3391 = _3392;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3257;
                frontier_phi_60_61_ladder_1 = _3255;
                frontier_phi_60_61_ladder_2 = _3251;
                frontier_phi_60_61_ladder_3 = _3249;
                frontier_phi_60_61_ladder_4 = _3247;
                frontier_phi_60_61_ladder_5 = _3253;
            }
            else
            {
                frontier_phi_60_61_ladder = _3143;
                frontier_phi_60_61_ladder_1 = _3141;
                frontier_phi_60_61_ladder_2 = _3137;
                frontier_phi_60_61_ladder_3 = _3135;
                frontier_phi_60_61_ladder_4 = _3133;
                frontier_phi_60_61_ladder_5 = _3139;
            }
            _3246 = frontier_phi_60_61_ladder_4;
            _3248 = frontier_phi_60_61_ladder_3;
            _3250 = frontier_phi_60_61_ladder_2;
            _3252 = frontier_phi_60_61_ladder_5;
            _3254 = frontier_phi_60_61_ladder_1;
            _3256 = frontier_phi_60_61_ladder;
        }
        float _3261 = isnan(1.0) ? _1061 : (isnan(_1061) ? 1.0 : min(_1061, 1.0));
        _3066 = (_3261 * _3252) + _2597;
        _3068 = (_3261 * _3254) + _2599;
        _3070 = (_3261 * _3256) + _2601;
        _3072 = ((_3246 * 0.039999999105930328369140625) * _3261) + _2920;
        _3074 = ((_3248 * 0.039999999105930328369140625) * _3261) + _2922;
        _3076 = ((_3250 * 0.039999999105930328369140625) * _3261) + _2924;
    }
    else
    {
        _3066 = _2597;
        _3068 = _2599;
        _3070 = _2601;
        _3072 = _2920;
        _3074 = _2922;
        _3076 = _2924;
    }
    float _5046 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _5057 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _5068 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    uint _3096 = _285 + 6u;
    float _3104 = _998 / cbSceneParam._m0[86u].x;
    float _3105 = _999 / cbSceneParam._m0[86u].y;
    vec4 _3119 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3104, _3105, (log2((isnan(cbSceneParam._m0[77u].w) ? _932 : (isnan(_932) ? cbSceneParam._m0[77u].w : min(_932, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3121 = _3119.x;
    float _3122 = _3119.y;
    float _3123 = _3119.z;
    float _3124 = _3119.w;
    float _3196;
    float _3198;
    float _3200;
    float _3202;
    if (_932 > cbSceneParam._m0[78u].w)
    {
        float _3158 = isnan(_932) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _932 : min(cbSceneParam._m0[80u].w, _932));
        float _3159 = _3158 / _932;
        float _3170 = _3159 * _983;
        float _3171 = _984 * _3159;
        float _3172 = (-0.0) - _3171;
        float _3174 = _3159 * _985;
        float _3176 = (cbSceneParam._m0[77u].w * _3172) / _3158;
        float _3177 = _3176 + cbSceneParam._m0[79u].w;
        float _3178 = cbSceneParam._m0[79u].w - _3171;
        float _3184 = sqrt(((_3170 * _3170) + (_3171 * _3171)) + (_3174 * _3174));
        float _3187 = (1.0 - (cbSceneParam._m0[77u].w / _3158)) * _3184;
        float _3192 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3194 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3347;
        if (abs((_3172 - _3176) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3347 = ((((_3177 > 0.0) ? exp2(_3192 * _3177) : (2.0 - exp2(_3194 * _3177))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3187;
        }
        else
        {
            float _3307 = 1.0 / cbSceneParam._m0[80u].x;
            float _3308 = isnan(_3178) ? _3177 : (isnan(_3177) ? _3178 : max(_3177, _3178));
            float _3309 = isnan(_3178) ? _3177 : (isnan(_3177) ? _3178 : min(_3177, _3178));
            float _3318 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : min(_3308, 0.0));
            float _3319 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : min(_3309, 0.0));
            _3347 = ((abs(_3184 / _3172) * cbSceneParam._m0[80u].y) * ((((_3318 - _3319) * 2.0) - ((exp2(_3192 * (isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0)))) - exp2(_3192 * (isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0))))) * _3307)) - ((exp2(_3194 * _3318) - exp2(_3194 * _3319)) * _3307))) + (_3187 * cbSceneParam._m0[80u].z);
        }
        vec4 _3349 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3104, _3105, 1.0), 0.0);
        float _3358 = exp2((_3347 * (-1.44269502162933349609375)) * (1.0 - _3349.w));
        float _3359 = log2(_3358);
        float _3375 = log2(_3124);
        _3196 = (exp2(_3375 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3359 * cbSceneParam._m0[78u].x)) * _3349.x) / cbSceneParam._m0[78u].x)) + _3121;
        _3198 = (exp2(_3375 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3359 * cbSceneParam._m0[78u].y)) * _3349.y) / cbSceneParam._m0[78u].y)) + _3122;
        _3200 = (exp2(_3375 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3359 * cbSceneParam._m0[78u].z)) * _3349.z) / cbSceneParam._m0[78u].z)) + _3123;
        _3202 = _3358 * _3124;
    }
    else
    {
        _3196 = _3121;
        _3198 = _3122;
        _3200 = _3123;
        _3202 = _3124;
    }
    float _3214 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3215 = _3214 == 3.0;
    float _3216 = log2(_3202);
    float _3223 = exp2(_3216 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3066 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1061))) + ((_3072 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _3224 = exp2(_3216 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0))) * (_3068 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1061))) + ((_3074 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _3225 = exp2(_3216 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3070 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1061))) + ((_3076 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _3234 = (_3214 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3234 * (_3215 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3196)));
    SV_Target.y = _3234 * (_3215 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3198)));
    SV_Target.z = _3234 * (_3215 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3200)));
    SV_Target.w = cbInstanceData._m0[_3096].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3096].w;
}


