#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1607;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3909 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3920 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3931 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _374 = _369.x * cbMtdParam._m0[11u].x;
    float _375 = _369.y * cbMtdParam._m0[11u].y;
    float _376 = _369.z * cbMtdParam._m0[11u].z;
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _466 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _483 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _414.x) * 2.0) - ((((_454 - _466) * cbMtdParam._m0[24u].z) + _466) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3942 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _491 = (_484 * ((_395.x * cbMtdParam._m0[12u].x) - _374)) + _374;
    float _492 = (_484 * ((_395.y * cbMtdParam._m0[12u].y) - _375)) + _375;
    float _493 = (_484 * ((_395.z * cbMtdParam._m0[12u].z) - _376)) + _376;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _532 = _530.x;
    float _542 = dot(vec4(_532, _530.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _556 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _414.y) * 2.0) - ((((_532 - _542) * cbMtdParam._m0[24u].z) + _542) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3953 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _564 = (_557 * ((_510.x * cbMtdParam._m0[13u].x) - _491)) + _491;
    float _565 = (_557 * ((_510.y * cbMtdParam._m0[13u].y) - _492)) + _492;
    float _566 = (_557 * ((_510.z * cbMtdParam._m0[13u].z) - _493)) + _493;
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _306) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _307) + cbTextureTilingScale._m0[24u].w));
    vec4 _601 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _603 = _601.x;
    float _613 = dot(vec4(_603, _601.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _625 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _414.z) * 2.0) - ((((_603 - _613) * cbMtdParam._m0[24u].z) + _613) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3964 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _636 = (_343.x * cbMtdParam._m0[9u].x) * ((_626 * ((_584.x * cbMtdParam._m0[14u].x) - _564)) + _564);
    float _637 = (_343.y * cbMtdParam._m0[9u].y) * ((_626 * ((_584.y * cbMtdParam._m0[14u].y) - _565)) + _565);
    float _638 = (_343.z * cbMtdParam._m0[9u].z) * ((_626 * ((_584.z * cbMtdParam._m0[14u].z) - _566)) + _566);
    float _642 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _636;
    float _645 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _637;
    float _648 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _638;
    float _656 = (((_636 - _642) * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) + _642) * 4.55000019073486328125;
    float _658 = (((_637 - _645) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) + _645) * 4.55000019073486328125;
    float _660 = (((_638 - _648) * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) + _648) * 4.55000019073486328125;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _719 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _721 = _719.x;
    float _722 = _719.y;
    float _723 = _719.z;
    float _730 = ((_702.x - _721) * _484) + _721;
    float _731 = ((_702.y - _722) * _484) + _722;
    float _732 = ((_702.z - _723) * _484) + _723;
    vec4 _744 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _755 = ((_744.x - _730) * _557) + _730;
    float _756 = ((_744.y - _731) * _557) + _731;
    float _757 = ((_744.z - _732) * _557) + _732;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _306) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _307) + cbTextureTilingScale._m0[23u].w));
    float _782 = ((_769.z - _757) * _626) + _757;
    float _785 = ((((_769.x - _755) * _626) + _755) * 2.0) + (-1.0);
    float _786 = ((((_769.y - _756) * _626) + _756) * 2.0) + (-1.0);
    float _787 = dot(vec2(_785, _786), vec2(_785, _786));
    float _3975 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _792 = sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))));
    vec4 _810 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _822 = (_785 + ((((_677.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_810.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _823 = (_786 + ((((_677.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_810.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _826 = fma(_792, _256, fma(_823, _263, _822 * _249));
    float _829 = fma(_792, _257, fma(_823, _264, _822 * _250));
    float _832 = fma(_792, _258, fma(_823, _265, _822 * _251));
    float _836 = inversesqrt(dot(vec3(_826, _829, _832), vec3(_826, _829, _832)));
    vec4 _863 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _865 = _863.x;
    float _866 = 1.0 - _865;
    float _872 = (cbMtdParam._m0[19u].x + dot(vec4(_836 * _826, _836 * _829, _836 * _832, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_865 - _866) * cbMtdParam._m0[24u].w) + _866) * cbMtdParam._m0[21u].z);
    float _3986 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _873 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _875 = (-0.0) - cbMtdParam._m0[24u].x;
    float _877 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
    float _885 = _873 - ((_873 * TEXCOORD_8.x) * _878);
    float _886 = _873 - ((_873 * TEXCOORD_8.y) * _878);
    float _887 = _873 - ((_873 * TEXCOORD_8.z) * _878);
    float _894 = (_885 * (cbMtdParam._m0[17u].x - _656)) + _656;
    float _895 = (_886 * (cbMtdParam._m0[17u].y - _658)) + _658;
    float _896 = (_887 * (cbMtdParam._m0[17u].z - _660)) + _660;
    float _911 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _912 = _911 * TEXCOORD.z;
    float _913 = _911 * TEXCOORD.w;
    vec4 _925 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _912) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _913) + cbTextureTilingScale._m0[19u].w));
    float _927 = _925.x;
    float _928 = 1.0 - _927;
    float _956 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_927 - _928) * cbMtdParam._m0[24u].y) + _928) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4007 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _957 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _965 = ((((cbMtdParam._m0[10u].x - _894) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _957) + _894;
    float _966 = ((((cbMtdParam._m0[10u].y - _895) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _957) + _895;
    float _967 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _896)) * _957) + _896;
    float _972 = (((_677.z - _782) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _782;
    float _976 = ((_810.z - _972) * cbMtdParam._m0[19u].w) + _972;
    vec4 _990 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _997 = (_990.x * 2.0) + (-1.0);
    float _998 = (_990.y * 2.0) + (-1.0);
    float _999 = dot(vec2(_997, _998), vec2(_997, _998));
    float _4018 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1007 = ((_990.z - _976) * _885) + _976;
    float _1010 = ((cbMtdParam._m0[23u].y - _1007) * _957) + _1007;
    vec4 _1031 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _912) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _913) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1037 = (_1031.x * 2.0) + (-1.0);
    float _1038 = (_1031.y * 2.0) + (-1.0);
    float _1039 = dot(vec2(_1037, _1038), vec2(_1037, _1038));
    float _4029 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1054 = ((sqrt(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) - _792) * _887) + _792;
    float _1057 = (((_997 - _822) * _885) + _822) + (cbMtdParam._m0[21u].x * _822);
    float _1058 = (((_998 - _823) * _886) + _823) + (cbMtdParam._m0[21u].x * _823);
    float _1069 = (((_1037 - _1057) + (_1057 * cbMtdParam._m0[22u].z)) * _957) + _1057;
    float _1070 = (((_1038 - _1058) + (_1058 * cbMtdParam._m0[22u].z)) * _957) + _1058;
    float _1071 = (_957 * (sqrt(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) - _1054)) + _1054;
    float _1073 = cbMtdParam._m0[22u].x + _810.w;
    float _1076 = fma(_1071, _256, fma(_1070, _263, _1069 * _249));
    float _1079 = fma(_1071, _257, fma(_1070, _264, _1069 * _250));
    float _1082 = fma(_1071, _258, fma(_1070, _265, _1069 * _251));
    float _1086 = inversesqrt(dot(vec3(_1076, _1079, _1082), vec3(_1076, _1079, _1082)));
    float _1087 = _1086 * _1076;
    float _1088 = _1086 * _1079;
    float _1089 = _1086 * _1082;
    float _4040 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1090 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _4062 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4073 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4084 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _1108 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1158 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1148);
    float _1159 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1148);
    float _1160 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1148);
    float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
    float _1165 = _1158 * _1164;
    float _1166 = _1159 * _1164;
    float _1167 = _1160 * _1164;
    float _1173 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1174 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1192 = fma(_1089, cbSceneParam._m0[5u].z, fma(_1088, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1087));
    float _1195 = fma(_1089, cbSceneParam._m0[6u].z, fma(_1088, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1087));
    float _1198 = fma(_1089, cbSceneParam._m0[7u].z, fma(_1088, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1087));
    uint _1212 = (_287 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1218 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * cbInstanceData._m0[_1212].x;
    float _1219 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * cbInstanceData._m0[_1212].y;
    float _1220 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * cbInstanceData._m0[_1212].z;
    float _4095 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1221 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _1222 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1223 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    vec4 _1232 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1173, cbSceneParam._m0[86u].y * _1174));
    float _1236 = ((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * TEXCOORD_5.w) * _1232.x;
    float _1237 = dot(vec3(_1087, _1088, _1089), vec3(_1165, _1166, _1167));
    float _1240 = _1237 * 2.0;
    float _1244 = (_1240 * _1087) - _1165;
    float _1245 = (_1240 * _1088) - _1166;
    float _1246 = (_1240 * _1089) - _1167;
    float _1250 = abs(dot(vec3(_1165, _1166, _1167), vec3(_1087, _1088, _1089)));
    float _4128 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
    float _1252 = sqrt(_1090);
    float _1265 = exp2((_1252 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1252 * 3.0));
    float _1297 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1301 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1305 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1606;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1331 = fma(_1305, cbModelParam._m0[26u].z, fma(_1301, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1297));
        float _1335 = fma(_1305, cbModelParam._m0[27u].z, fma(_1301, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1297));
        float _1339 = fma(_1305, cbModelParam._m0[28u].z, fma(_1301, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1297));
        float _1364 = _1297 + _1087;
        float _1365 = _1301 + _1088;
        float _1366 = _1305 + _1089;
        float _1376 = fma(_1366, cbModelParam._m0[26u].z, fma(_1365, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1364)) - _1331;
        float _1377 = fma(_1366, cbModelParam._m0[27u].z, fma(_1365, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1364)) - _1335;
        float _1378 = fma(_1366, cbModelParam._m0[28u].z, fma(_1365, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1364)) - _1339;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1331 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1335 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[34u].z) + ((((((_1339 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1434 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1400.x + (-0.5));
        float _1436 = _1434 * (_1400.y + (-0.5));
        float _1437 = _1434 * (_1400.z + (-0.5));
        float _1444 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1407.x + (-0.5));
        float _1446 = _1444 * (_1407.y + (-0.5));
        float _1447 = _1444 * (_1407.z + (-0.5));
        float _1454 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1414.x + (-0.5));
        float _1456 = _1454 * (_1414.y + (-0.5));
        float _1457 = _1454 * (_1414.z + (-0.5));
        float _1464 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1421.x + (-0.5));
        float _1466 = _1464 * (_1421.y + (-0.5));
        float _1467 = _1464 * (_1421.z + (-0.5));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = _1435 * 0.5;
        float _1472 = _1445 * 0.5;
        float _1473 = _1455 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1488 = (dot(vec3(_1087, _1088, _1089), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1498 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4176 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1500 + 1.0))) + _1505) * _1468;
        float _1515 = _1436 * 0.5;
        float _1516 = _1446 * 0.5;
        float _1517 = _1456 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_1087, _1088, _1089), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4209 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1542 + 1.0))) + _1547) * _1469;
        float _1557 = _1437 * 0.5;
        float _1558 = _1447 * 0.5;
        float _1559 = _1457 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_1087, _1088, _1089), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4242 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1584 + 1.0))) + _1589) * _1470;
        _1606 = _1437;
        _1608 = _1436;
        _1609 = _1435;
        _1610 = _1447;
        _1611 = _1446;
        _1612 = _1445;
        _1613 = _1457;
        _1614 = _1456;
        _1615 = _1455;
        _1616 = _1470;
        _1617 = _1469;
        _1618 = _1468;
        _1619 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1620 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1621 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1607;
        _1608 = _1607;
        _1609 = _1607;
        _1610 = _1607;
        _1611 = _1607;
        _1612 = _1607;
        _1613 = _1607;
        _1614 = _1607;
        _1615 = _1607;
        _1616 = _1607;
        _1617 = _1607;
        _1618 = _1607;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1644 = fma(_1305, cbModelParam._m0[30u].z, fma(_1301, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1297));
        float _1648 = fma(_1305, cbModelParam._m0[31u].z, fma(_1301, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1297));
        float _1652 = fma(_1305, cbModelParam._m0[32u].z, fma(_1301, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1297));
        float _1675 = _1297 + _1087;
        float _1676 = _1301 + _1088;
        float _1677 = _1305 + _1089;
        float _1687 = fma(_1677, cbModelParam._m0[30u].z, fma(_1676, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1675)) - _1644;
        float _1688 = fma(_1677, cbModelParam._m0[31u].z, fma(_1676, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1675)) - _1648;
        float _1689 = fma(_1677, cbModelParam._m0[32u].z, fma(_1676, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1675)) - _1652;
        float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
        float _1706 = ((_1693 * _1687) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1644 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1707 = ((_1693 * _1688) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1648 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1708 = ((_1693 * _1689) / cbModelParam._m0[35u].z) + ((((((_1652 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1724 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1731 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        float _1743 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1710.x + (-0.5));
        float _1745 = _1743 * (_1710.y + (-0.5));
        float _1746 = _1743 * (_1710.z + (-0.5));
        float _1753 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = _1753 * (_1717.x + (-0.5));
        float _1755 = _1753 * (_1717.y + (-0.5));
        float _1756 = _1753 * (_1717.z + (-0.5));
        float _1763 = exp2((_1724.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1724.x + (-0.5));
        float _1765 = _1763 * (_1724.y + (-0.5));
        float _1766 = _1763 * (_1724.z + (-0.5));
        float _1773 = exp2((_1731.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1731.x + (-0.5));
        float _1775 = _1773 * (_1731.y + (-0.5));
        float _1776 = _1773 * (_1731.z + (-0.5));
        float _1777 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1778 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1779 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1780 = _1744 * 0.5;
        float _1781 = _1754 * 0.5;
        float _1782 = _1764 * 0.5;
        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
        float _1788 = (_1783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1783);
        float _1796 = (dot(vec3(_1087, _1088, _1089), vec3(_1788 * _1780, _1788 * _1781, _1788 * _1782)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1805 = sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782)) / (_1777 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1807 = _1806 * 2.0;
        float _1811 = (1.0 - _1806) / (_1806 + 1.0);
        float _4305 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1821 = ((((1.0 - _1812) * (_1807 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1807 + 1.0))) + _1812) * _1777;
        float _1822 = _1745 * 0.5;
        float _1823 = _1755 * 0.5;
        float _1824 = _1765 * 0.5;
        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
        float _1830 = (_1825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1825);
        float _1838 = (dot(vec3(_1087, _1088, _1089), vec3(_1830 * _1822, _1830 * _1823, _1830 * _1824)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824)) / (_1778 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1849 = _1848 * 2.0;
        float _1853 = (1.0 - _1848) / (_1848 + 1.0);
        float _4338 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1863 = ((((1.0 - _1854) * (_1849 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1849 + 1.0))) + _1854) * _1778;
        float _1864 = _1746 * 0.5;
        float _1865 = _1756 * 0.5;
        float _1866 = _1766 * 0.5;
        float _1867 = dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866));
        float _1872 = (_1867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1867);
        float _1880 = (dot(vec3(_1087, _1088, _1089), vec3(_1872 * _1864, _1872 * _1865, _1872 * _1866)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1889 = sqrt(((_1865 * _1865) + (_1864 * _1864)) + (_1866 * _1866)) / (_1779 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1891 = _1890 * 2.0;
        float _1895 = (1.0 - _1890) / (_1890 + 1.0);
        float _4371 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1905 = ((((1.0 - _1896) * (_1891 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1891 + 1.0))) + _1896) * _1779;
        _1913 = _1746;
        _1914 = _1745;
        _1915 = _1744;
        _1916 = _1756;
        _1917 = _1755;
        _1918 = _1754;
        _1919 = _1766;
        _1920 = _1765;
        _1921 = _1764;
        _1922 = _1779;
        _1923 = _1778;
        _1924 = _1777;
        _1925 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)));
        _1926 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)));
        _1927 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)));
    }
    else
    {
        _1913 = _1607;
        _1914 = _1607;
        _1915 = _1607;
        _1916 = _1607;
        _1917 = _1607;
        _1918 = _1607;
        _1919 = _1607;
        _1920 = _1607;
        _1921 = _1607;
        _1922 = _1607;
        _1923 = _1607;
        _1924 = _1607;
        _1925 = 0.0;
        _1926 = 0.0;
        _1927 = 0.0;
    }
    float _1937 = (cbModelParam._m0[1u].x * (_1925 - _1619)) + _1619;
    float _1938 = (cbModelParam._m0[1u].x * (_1926 - _1620)) + _1620;
    float _1939 = (cbModelParam._m0[1u].x * (_1927 - _1621)) + _1621;
    float _1960 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1937 * cbSceneParam._m0[89u].x));
    float _1963 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1937 * cbSceneParam._m0[90u].x));
    float _1966 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1937));
    float _1981 = _1244 * 0.5;
    float _1982 = _1245 * 0.5;
    float _1983 = _1246 * 0.5;
    float _1984 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1915, _1918, _1921, _1924));
    float _1987 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1914, _1917, _1920, _1923));
    float _1990 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1913, _1916, _1919, _1922));
    float _2024;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1997 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1606, _1610, _1613, _1616));
        float _2001 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1608, _1611, _1614, _1617));
        float _2005 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1609, _1612, _1615, _1618));
        float _2012 = dot(vec4(cbModelParam._m0[39u]), vec4(_1981, _1982, _1983, 1.0));
        _2024 = dot(vec3(isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)), isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0)), isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2012) ? 0.0 : (isnan(0.0) ? _2012 : max(0.0, _2012))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2024 = 1.0;
    }
    float _2035;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2026 = dot(vec4(cbModelParam._m0[40u]), vec4(_1981, _1982, _1983, 1.0));
        _2035 = dot(vec3(isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)), isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)), isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2026) ? 0.0 : (isnan(0.0) ? _2026 : max(0.0, _2026))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2035 = 1.0;
    }
    float _2039 = (_2035 * cbModelParam._m0[1u].x) + (_2024 * (1.0 - cbModelParam._m0[1u].x));
    float _2049 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1090);
    float _2050 = isnan(_2049) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2049 : min(cbModelParam._m0[25u].z, _2049));
    float _2130;
    float _2132;
    float _2134;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2097 = fma(_1305, cbModelParam._m0[13u].z, fma(_1301, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1297)) + cbModelParam._m0[13u].w;
        float _2101 = fma(_1305, cbModelParam._m0[14u].z, fma(_1301, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1297)) + cbModelParam._m0[14u].w;
        float _2105 = fma(_1305, cbModelParam._m0[15u].z, fma(_1301, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1297)) + cbModelParam._m0[15u].w;
        float _2108 = fma(_1246, cbModelParam._m0[13u].z, fma(_1245, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1244));
        float _2111 = fma(_1246, cbModelParam._m0[14u].z, fma(_1245, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1244));
        float _2114 = fma(_1246, cbModelParam._m0[15u].z, fma(_1245, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1244));
        float _2142;
        if (_2108 > 0.0)
        {
            _2142 = abs((1.0 - _2097) / _2108);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2097 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2142 = frontier_phi_14_12_ladder;
        }
        float _2343;
        if (_2111 > 0.0)
        {
            _2343 = abs((1.0 - _2101) / _2111);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2101 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2343 = frontier_phi_23_19_ladder;
        }
        float _2586;
        if (_2114 > 0.0)
        {
            _2586 = abs((1.0 - _2105) / _2114);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2105 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2586 = frontier_phi_35_30_ladder;
        }
        float _2588 = isnan(_2343) ? _2142 : (isnan(_2142) ? _2343 : min(_2142, _2343));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _2108) + _2097;
        float _2594 = (_2589 * _2111) + _2101;
        float _2595 = (_2589 * _2114) + _2105;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2598 = (-1.0) - _2596;
        float _2600 = _2596 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2595 > _2600) || ((_2595 < _2598) || ((_2594 > _2600) || ((_2594 < _2598) || ((_2593 < _2598) || (_2593 > _2600))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2719 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2595, cbModelParam._m0[9u].z, fma(_2594, cbModelParam._m0[9u].y, _2593 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2595, cbModelParam._m0[10u].z, fma(_2594, cbModelParam._m0[10u].y, _2593 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2595, cbModelParam._m0[11u].z, fma(_2594, cbModelParam._m0[11u].y, _2593 * cbModelParam._m0[11u].x))), _2050);
            frontier_phi_13_35_ladder = _2719.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2719.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2719.x * cbModelParam._m0[1u].y;
        }
        _2130 = frontier_phi_13_35_ladder_2;
        _2132 = frontier_phi_13_35_ladder_1;
        _2134 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2118 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1244, _1245, _1246), _2050);
        _2130 = _2118.x * cbModelParam._m0[1u].y;
        _2132 = _2118.y * cbModelParam._m0[1u].y;
        _2134 = _2118.z * cbModelParam._m0[1u].y;
    }
    float _2138 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1090);
    float _2139 = isnan(_2138) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2138 : min(cbModelParam._m0[25u].w, _2138));
    float _2229;
    float _2231;
    float _2233;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2193 = fma(_1305, cbModelParam._m0[21u].z, fma(_1301, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1297)) + cbModelParam._m0[21u].w;
        float _2197 = fma(_1305, cbModelParam._m0[22u].z, fma(_1301, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1297)) + cbModelParam._m0[22u].w;
        float _2201 = fma(_1305, cbModelParam._m0[23u].z, fma(_1301, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1297)) + cbModelParam._m0[23u].w;
        float _2204 = fma(_1246, cbModelParam._m0[21u].z, fma(_1245, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1244));
        float _2207 = fma(_1246, cbModelParam._m0[22u].z, fma(_1245, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1244));
        float _2210 = fma(_1246, cbModelParam._m0[23u].z, fma(_1245, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1244));
        float _2348;
        if (_2204 > 0.0)
        {
            _2348 = abs((1.0 - _2193) / _2204);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2204 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2193 + 1.0) / _2204);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2348 = frontier_phi_25_21_ladder;
        }
        float _2613;
        if (_2207 > 0.0)
        {
            _2613 = abs((1.0 - _2197) / _2207);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2207 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2197 + 1.0) / _2207);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2613 = frontier_phi_37_32_ladder;
        }
        float _2818;
        if (_2210 > 0.0)
        {
            _2818 = abs((1.0 - _2201) / _2210);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2210 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2201 + 1.0) / _2210);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2818 = frontier_phi_46_43_ladder;
        }
        float _2820 = isnan(_2613) ? _2348 : (isnan(_2348) ? _2613 : min(_2348, _2613));
        float _2821 = isnan(_2818) ? _2820 : (isnan(_2820) ? _2818 : min(_2820, _2818));
        float _2825 = (_2821 * _2204) + _2193;
        float _2826 = (_2821 * _2207) + _2197;
        float _2827 = (_2821 * _2210) + _2201;
        float _2828 = _2821 * 9.9999997473787516355514526367188e-05;
        float _2829 = (-1.0) - _2828;
        float _2831 = _2828 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2827 > _2831) || ((_2827 < _2829) || ((_2826 > _2831) || ((_2826 < _2829) || ((_2825 < _2829) || (_2825 > _2831))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3026 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2827, cbModelParam._m0[17u].z, fma(_2826, cbModelParam._m0[17u].y, _2825 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2827, cbModelParam._m0[18u].z, fma(_2826, cbModelParam._m0[18u].y, _2825 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2827, cbModelParam._m0[19u].z, fma(_2826, cbModelParam._m0[19u].y, _2825 * cbModelParam._m0[19u].x))), _2139);
            frontier_phi_22_46_ladder = _3026.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3026.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3026.x * cbModelParam._m0[1u].z;
        }
        _2229 = frontier_phi_22_46_ladder_2;
        _2231 = frontier_phi_22_46_ladder_1;
        _2233 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2213 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1244, _1245, _1246), _2139);
        _2229 = _2213.x * cbModelParam._m0[1u].z;
        _2231 = _2213.y * cbModelParam._m0[1u].z;
        _2233 = _2213.z * cbModelParam._m0[1u].z;
    }
    float _2245 = ((((1.0 - _1265) * ((_1252 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1265 * _1252)) * _1236;
    float _2246 = _2245 * ((cbModelParam._m0[1u].w * (_2229 - _2130)) + _2130);
    float _2247 = _2245 * ((cbModelParam._m0[1u].w * (_2231 - _2132)) + _2132);
    float _2248 = _2245 * ((cbModelParam._m0[1u].w * (_2233 - _2134)) + _2134);
    float _2251 = fma(_2248, cbSceneParam._m0[89u].z, fma(_2247, cbSceneParam._m0[89u].y, _2246 * cbSceneParam._m0[89u].x));
    float _2254 = fma(_2248, cbSceneParam._m0[90u].z, fma(_2247, cbSceneParam._m0[90u].y, _2246 * cbSceneParam._m0[90u].x));
    float _2257 = fma(_2248, cbSceneParam._m0[91u].z, fma(_2247, cbSceneParam._m0[91u].y, _2246 * cbSceneParam._m0[91u].x));
    uvec4 _2267 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2269 = _2267.x * 14u;
    uint _2270 = _2269 + 13u;
    float _2277 = _1236 + (-1.0);
    float _2282 = (cbLight._m0[_2270].x * _2277) + 1.0;
    float _2283 = (cbLight._m0[_2270].y * _2277) + 1.0;
    float _2284 = (cbLight._m0[_2270].z * _2277) + 1.0;
    float _2285 = (cbLight._m0[_2270].w * _2277) + 1.0;
    uint _2286 = _2269 + 5u;
    float _2292 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
    uint _2296 = _2269 + 4u;
    float _2302 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
    uint _2306 = _2269 | 1u;
    float _2317 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_1087, _1088, _1089));
    float _2320 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_1087, _1088, _1089));
    float _4507 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _4518 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2325 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * 0.3183098733425140380859375;
    float _2327 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * 0.3183098733425140380859375;
    float _2334 = ((cbLight._m0[_2286].x * _2292) * _2327) + ((cbLight._m0[_2296].x * _2302) * _2325);
    float _2335 = ((_2292 * cbLight._m0[_2286].y) * _2327) + ((_2302 * cbLight._m0[_2296].y) * _2325);
    float _2336 = ((_2292 * cbLight._m0[_2286].z) * _2327) + ((_2302 * cbLight._m0[_2296].z) * _2325);
    uvec4 _2340 = floatBitsToUint(cbLight._m0[_2269 + 12u]);
    bool _2342 = _2340.x == 0u;
    float _2353;
    float _2355;
    float _2357;
    if (_2342)
    {
        _2353 = _2334;
        _2355 = _2335;
        _2357 = _2336;
    }
    else
    {
        uint _2361 = _2269 + 6u;
        float _2377 = (dot(vec3(cbLight._m0[_2269 + 2u].xyz), vec3(_1087, _1088, _1089)) * 0.5) + 0.5;
        float _2378 = _2377 * _2377;
        float _4529 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2379 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2380 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2353 = (((cbLight._m0[_2361].x * 0.3183098733425140380859375) * _2379) * _2380) + _2334;
        _2355 = (((cbLight._m0[_2361].y * 0.3183098733425140380859375) * _2379) * _2380) + _2335;
        _2357 = (((cbLight._m0[_2361].z * 0.3183098733425140380859375) * _2379) * _2380) + _2336;
    }
    bool _2360 = _2340.y == 0u;
    float _2398;
    float _2400;
    float _2402;
    if (_2360)
    {
        _2398 = _2353;
        _2400 = _2355;
        _2402 = _2357;
    }
    else
    {
        uint _2557 = _2269 + 7u;
        float _2573 = (dot(vec3(cbLight._m0[_2269 + 3u].xyz), vec3(_1087, _1088, _1089)) * 0.5) + 0.5;
        float _2574 = _2573 * _2573;
        float _4545 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2575 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2576 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2398 = (((cbLight._m0[_2557].x * 0.3183098733425140380859375) * _2575) * _2576) + _2353;
        _2400 = (((cbLight._m0[_2557].y * 0.3183098733425140380859375) * _2575) * _2576) + _2355;
        _2402 = (((cbLight._m0[_2557].z * 0.3183098733425140380859375) * _2575) * _2576) + _2357;
    }
    uint _2405 = _2269 + 8u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _1090) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2269].x + _1165;
    float _2421 = cbLight._m0[_2269].y + _1166;
    float _2422 = cbLight._m0[_2269].z + _1167;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_1087, _1088, _1089), vec3(cbLight._m0[_2269].xyz));
    float _4561 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _4572 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
    float _2434 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2435 = dot(vec3(_1087, _1088, _1089), vec3(_2427, _2428, _2429));
    float _4583 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2439 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2427, _2428, _2429));
    float _4594 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2443 = _2419 * _2419;
    float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
    float _2458 = (exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2459 = 1.0 - _2419;
    float _2470 = (0.5 / (((_2434 * ((_2433 * _2459) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2459) + _2419) * _2433))) * _2433;
    float _4605 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
    uint _2483 = _2269 + 9u;
    float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _1090) * 0.949999988079071044921875);
    float _2495 = _2494 * _2494;
    float _2496 = cbLight._m0[_2306].x + _1165;
    float _2497 = cbLight._m0[_2306].y + _1166;
    float _2498 = cbLight._m0[_2306].z + _1167;
    float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
    float _2503 = _2502 * _2496;
    float _2504 = _2502 * _2497;
    float _2505 = _2502 * _2498;
    float _2506 = dot(vec3(_1087, _1088, _1089), vec3(cbLight._m0[_2306].xyz));
    float _4616 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _2510 = dot(vec3(_1087, _1088, _1089), vec3(_2503, _2504, _2505));
    float _4627 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2513 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _2514 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2503, _2504, _2505));
    float _4638 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2518 = _2495 * _2495;
    float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
    float _2531 = (exp2(log2(1.0 - (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2532 = 1.0 - _2495;
    float _2542 = (0.5 / (((_2434 * ((_2509 * _2532) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2532) + _2495) * _2509))) * _2509;
    float _4649 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2544 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
    float _2554 = (((_2531 * cbLight._m0[_2483].x) * _2544) * _2292) + (((_2458 * cbLight._m0[_2405].x) * _2472) * _2302);
    float _2555 = (((_2531 * cbLight._m0[_2483].y) * _2544) * _2292) + (((_2458 * cbLight._m0[_2405].y) * _2472) * _2302);
    float _2556 = (((_2531 * cbLight._m0[_2483].z) * _2544) * _2292) + (((_2458 * cbLight._m0[_2405].z) * _2472) * _2302);
    float _2618;
    float _2620;
    float _2622;
    if (_2342)
    {
        _2618 = _2554;
        _2620 = _2555;
        _2622 = _2556;
    }
    else
    {
        uint _2624 = _2269 + 2u;
        uint _2628 = _2269 + 10u;
        float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2624].w)) * _1090) * 0.949999988079071044921875);
        float _2643 = _2642 * _2642;
        float _2644 = cbLight._m0[_2624].x + _1165;
        float _2645 = cbLight._m0[_2624].y + _1166;
        float _2646 = cbLight._m0[_2624].z + _1167;
        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
        float _2651 = _2650 * _2644;
        float _2652 = _2650 * _2645;
        float _2653 = _2650 * _2646;
        float _2654 = dot(vec3(_1087, _1088, _1089), vec3(cbLight._m0[_2624].xyz));
        float _4660 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2658 = dot(vec3(_1087, _1088, _1089), vec3(_2651, _2652, _2653));
        float _4671 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2662 = dot(vec3(cbLight._m0[_2624].xyz), vec3(_2651, _2652, _2653));
        float _4682 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2666 = _2643 * _2643;
        float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
        float _2679 = (exp2(log2(1.0 - (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2680 = 1.0 - _2643;
        float _2690 = (0.5 / (((_2434 * ((_2657 * _2680) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2680) + _2643) * _2657))) * _2657;
        float _4693 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2692 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
        float _2693 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2618 = (((_2679 * cbLight._m0[_2628].x) * _2692) * _2693) + _2554;
        _2620 = (((_2679 * cbLight._m0[_2628].y) * _2692) * _2693) + _2555;
        _2622 = (((_2679 * cbLight._m0[_2628].z) * _2692) * _2693) + _2556;
    }
    float _2728;
    float _2730;
    float _2732;
    if (_2360)
    {
        _2728 = _2618;
        _2730 = _2620;
        _2732 = _2622;
    }
    else
    {
        uint _2739 = _2269 + 3u;
        uint _2743 = _2269 + 11u;
        float _2757 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2739].w)) * _1090) * 0.949999988079071044921875);
        float _2758 = _2757 * _2757;
        float _2759 = cbLight._m0[_2739].x + _1165;
        float _2760 = cbLight._m0[_2739].y + _1166;
        float _2761 = cbLight._m0[_2739].z + _1167;
        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
        float _2766 = _2765 * _2759;
        float _2767 = _2765 * _2760;
        float _2768 = _2765 * _2761;
        float _2769 = dot(vec3(_1087, _1088, _1089), vec3(cbLight._m0[_2739].xyz));
        float _4709 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2773 = dot(vec3(_1087, _1088, _1089), vec3(_2766, _2767, _2768));
        float _4720 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2776 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2777 = dot(vec3(cbLight._m0[_2739].xyz), vec3(_2766, _2767, _2768));
        float _4731 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2781 = _2758 * _2758;
        float _2785 = ((_2776 * _2776) * (_2781 + (-1.0))) + 1.0;
        float _2794 = (exp2(log2(1.0 - (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2795 = 1.0 - _2758;
        float _2805 = (0.5 / (((_2434 * ((_2772 * _2795) + _2758)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2795) + _2758) * _2772))) * _2772;
        float _4742 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2781 / ((_2785 * _2785) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2728 = (((_2794 * cbLight._m0[_2743].x) * _2807) * _2808) + _2618;
        _2730 = (((_2794 * cbLight._m0[_2743].y) * _2807) * _2808) + _2620;
        _2732 = (((_2794 * cbLight._m0[_2743].z) * _2807) * _2808) + _2622;
    }
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_2267.y == 0u)
    {
        float _2883 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2884 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2883;
        float _2885 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2883;
        float _2886 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2883;
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.x;
        uint _2910 = uint((float(_2898.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1174) / _2899))) + floor(float(uint(cbSceneParam._m0[85u].x * _1173) / _2899)));
        float _2920 = (log2(_2886 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2921 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        uint _2924 = uint(isnan(14.0) ? _2921 : (isnan(_2921) ? 14.0 : min(_2921, 14.0)));
        uvec4 _2929 = texelFetch(g_lightClusterGridBuffer, int(((_2924 << 2u) + (_2910 << 6u)) >> 2u));
        uint _2930 = _2929.x;
        uint _2931 = _2898.z;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        if (((((1u << ((_2931 >> 4u) & 15u)) + 4294967295u) & _2930) == 0u) || ((_2931 & 240u) == 0u))
        {
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
        }
        else
        {
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            uint _3181 = 0u;
            uint _3190;
            bool _3191;
            for (;;)
            {
                _3190 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3181 << 2u)) >> 2u)).x;
                _3191 = _3190 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3191)
                {
                    frontier_phi_61_pred = _3175;
                    frontier_phi_61_pred_1 = _3180;
                    frontier_phi_61_pred_2 = _3179;
                    frontier_phi_61_pred_3 = _3178;
                    frontier_phi_61_pred_4 = _3177;
                    frontier_phi_61_pred_5 = _3176;
                }
                else
                {
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    uint _3305;
                    _3299 = _3175;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3178;
                    _3303 = _3179;
                    _3304 = _3180;
                    _3305 = _3190;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    for (;;)
                    {
                        uint _3309 = uint(findLSB(_3305)) + (_3181 << 5u);
                        uint _3306 = (_3305 + 4294967295u) & _3305;
                        uint _3311 = _3309 * 48u;
                        vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 3u)).x));
                        uint _3331 = (_3309 * 48u) + 4u;
                        vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 3u)).x));
                        uint _3350 = (_3309 * 48u) + 8u;
                        vec3 _3361 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x));
                        float _3365 = _3325.x - _2884;
                        float _3366 = _3325.y - _2885;
                        float _3367 = _3325.z - _2886;
                        float _3368 = dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367));
                        float _3371 = inversesqrt(_3368);
                        float _3372 = _3371 * _3365;
                        float _3373 = _3371 * _3366;
                        float _3374 = _3371 * _3367;
                        float _3375 = dot(vec3(_1192, _1195, _1198), vec3(_3372, _3373, _3374));
                        float _3380 = 1.0 - (_3368 * _3325.w);
                        float _4768 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3381 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3382 = sqrt(_3368) * _3344.w;
                        float _3385 = 1.39999997615814208984375 / (_3382 + 1.39999997615814208984375);
                        float _3386 = _3385 * _3385;
                        float _3389 = ((1.0 - _3386) * _3375) + _3386;
                        float _3392 = _3382 * _3382;
                        float _3396 = ((isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0))) * _3381) / ((_3392 * 0.699999988079071044921875) + 1.0);
                        float _3400 = (-0.0) - _2884;
                        float _3401 = (-0.0) - _2885;
                        float _3402 = (-0.0) - _2886;
                        float _3406 = inversesqrt(dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402)));
                        float _3407 = _3406 * _3400;
                        float _3408 = _3406 * _3401;
                        float _3409 = _3406 * _3402;
                        float _3417 = exp2(log2(1.0 / ((_3392 * 3.5) + 5.0)) * 0.25);
                        float _3418 = 1.0 - _1252;
                        float _3425 = sqrt(1.0 - ((1.0 - (_3418 * _3418)) * (1.0 - (_3417 * _3417))));
                        float _3426 = _3425 * _3425;
                        float _3427 = _3426 * _3426;
                        float _3428 = _3407 + _3372;
                        float _3429 = _3408 + _3373;
                        float _3430 = _3409 + _3374;
                        float _3434 = inversesqrt(dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430)));
                        float _3438 = dot(vec3(_1192, _1195, _1198), vec3(_3407, _3408, _3409));
                        float _4784 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3441 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3442 = dot(vec3(_1192, _1195, _1198), vec3(_3434 * _3428, _3434 * _3429, _3434 * _3430));
                        float _4795 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3445 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3449 = ((_3445 * _3445) * (_3427 + (-1.0))) + 1.0;
                        float _3450 = _3385 * _3426;
                        float _3451 = _3450 * _3450;
                        float _3454 = ((1.0 - _3451) * _3375) + _3451;
                        float _4806 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3455 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3456 = 1.0 - _3426;
                        float _3466 = (0.5 / (((_3455 * ((_3441 * _3456) + _3426)) + 9.9999999392252902907785028219223e-09) + (((_3455 * _3456) + _3426) * _3441))) * _3455;
                        float _4817 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3477 = (((_3427 * 3.1415927410125732421875) * (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) / ((_3449 * _3449) * ((_3392 * 2.1991131305694580078125) + 3.141590118408203125))) * _3381;
                        _3234 = (_3396 * _3344.x) + _3302;
                        _3235 = (_3396 * _3344.y) + _3303;
                        _3236 = (_3396 * _3344.z) + _3304;
                        _3231 = (_3477 * _3361.x) + _3299;
                        _3232 = (_3477 * _3361.y) + _3300;
                        _3233 = (_3477 * _3361.z) + _3301;
                        if (_3306 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3299 = _3231;
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3234;
                            _3303 = _3235;
                            _3304 = _3236;
                            _3305 = _3306;
                        }
                    }
                    frontier_phi_61_pred = _3231;
                    frontier_phi_61_pred_1 = _3236;
                    frontier_phi_61_pred_2 = _3235;
                    frontier_phi_61_pred_3 = _3234;
                    frontier_phi_61_pred_4 = _3233;
                    frontier_phi_61_pred_5 = _3232;
                }
                _3032 = frontier_phi_61_pred;
                _3042 = frontier_phi_61_pred_1;
                _3040 = frontier_phi_61_pred_2;
                _3038 = frontier_phi_61_pred_3;
                _3036 = frontier_phi_61_pred_4;
                _3034 = frontier_phi_61_pred_5;
                uint _3182 = _3181 + 1u;
                if (_3182 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3175 = _3032;
                    _3176 = _3034;
                    _3177 = _3036;
                    _3178 = _3038;
                    _3179 = _3040;
                    _3180 = _3042;
                    _3181 = _3182;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
        }
        uvec4 _3045 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3046 = _3045.z;
        uint _3048 = (_3046 >> 8u) & 15u;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        if (((4294967295u << _3048) & _2930) == 0u)
        {
            _3143 = _3031;
            _3145 = _3033;
            _3147 = _3035;
            _3149 = _3037;
            _3151 = _3039;
            _3153 = _3041;
        }
        else
        {
            float _3168 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
            float _3169 = _3168 * _2884;
            float _3170 = _3168 * _2885;
            float _3171 = _3168 * _2886;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3048 < ((_3046 >> 12u) & 15u))
            {
                float _3144;
                float _3146;
                float _3148;
                float _3150;
                float _3152;
                float _3154;
                float _3282 = _3031;
                float _3283 = _3033;
                float _3284 = _3035;
                float _3285 = _3037;
                float _3286 = _3039;
                float _3287 = _3041;
                uint _3288 = _3048;
                uint _3297;
                bool _3298;
                for (;;)
                {
                    _3297 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3288 << 2u)) >> 2u)).x;
                    _3298 = _3297 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3298)
                    {
                        frontier_phi_67_pred = _3285;
                        frontier_phi_67_pred_1 = _3286;
                        frontier_phi_67_pred_2 = _3287;
                        frontier_phi_67_pred_3 = _3284;
                        frontier_phi_67_pred_4 = _3283;
                        frontier_phi_67_pred_5 = _3282;
                    }
                    else
                    {
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3495 = _3282;
                        float _3496 = _3283;
                        float _3497 = _3284;
                        float _3498 = _3285;
                        float _3499 = _3286;
                        float _3500 = _3287;
                        uint _3501 = _3297;
                        uint _3502;
                        vec4 _3527;
                        float _3528;
                        vec4 _3543;
                        vec3 _3555;
                        vec4 _3570;
                        vec4 _3585;
                        float _3631;
                        bool _3632;
                        for (;;)
                        {
                            uint _3512 = ((_3288 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3501));
                            _3502 = (_3501 + 4294967295u) & _3501;
                            uint _3514 = _3512 * 40u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            _3528 = _3527.w;
                            uint _3530 = (_3512 * 40u) + 4u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3512 * 40u) + 8u;
                            _3555 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x));
                            uint _3557 = (_3512 * 40u) + 16u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3512 * 40u) + 20u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3587 = (_3512 * 40u) + 24u;
                            vec4 _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3606 = (_3512 * 40u) + 28u;
                            vec4 _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            _3631 = fma(_2886, _3619.z, fma(_2885, _3619.y, _3619.x * _2884)) + _3619.w;
                            _3632 = !((fma(_2886, _3600.z, fma(_2885, _3600.y, _3600.x * _2884)) + _3600.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3632)
                            {
                                float _3659 = _3527.x - _2884;
                                float _3660 = _3527.y - _2885;
                                float _3661 = _3527.z - _2886;
                                float _3662 = dot(vec3(_3659, _3660, _3661), vec3(_3659, _3660, _3661));
                                float _3665 = inversesqrt(_3662);
                                float _3666 = _3665 * _3659;
                                float _3667 = _3665 * _3660;
                                float _3668 = _3665 * _3661;
                                float _3672 = 1.0 - (_3662 / (_3528 * _3528));
                                float _4828 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3677 = sqrt(_3662) * _3543.w;
                                float _3679 = 1.39999997615814208984375 / (_3677 + 1.39999997615814208984375);
                                float _3680 = _3679 * _3679;
                                float _3683 = ((1.0 - _3680) * dot(vec3(_3666, _3667, _3668), vec3(_1192, _1195, _1198))) + _3680;
                                float _3686 = _3677 * _3677;
                                float _3690 = (fma(_2886, _3570.z, fma(_2885, _3570.y, _3570.x * _2884)) + _3570.w) / _3631;
                                float _3691 = (fma(_2886, _3585.z, fma(_2885, _3585.y, _3585.x * _2884)) + _3585.w) / _3631;
                                float _3695 = 1.0 - dot(vec2(_3690, _3691), vec2(_3690, _3691));
                                float _4844 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3697 = _3696 * (((isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0))) * _3673) / ((_3686 * 0.699999988079071044921875) + 1.0));
                                float _3709 = exp2(log2(1.0 / ((_3686 * 3.5) + 5.0)) * 0.25);
                                float _3710 = 1.0 - _1252;
                                float _3717 = sqrt(1.0 - ((1.0 - (_3710 * _3710)) * (1.0 - (_3709 * _3709))));
                                float _3718 = _3717 * _3717;
                                float _3719 = _3718 * _3718;
                                float _3720 = _3666 - _3169;
                                float _3721 = _3667 - _3170;
                                float _3722 = _3668 - _3171;
                                float _3726 = inversesqrt(dot(vec3(_3720, _3721, _3722), vec3(_3720, _3721, _3722)));
                                float _3730 = dot(vec3(_1192, _1195, _1198), vec3((-0.0) - _3169, (-0.0) - _3170, (-0.0) - _3171));
                                float _4855 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3733 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3734 = dot(vec3(_1192, _1195, _1198), vec3(_3726 * _3720, _3726 * _3721, _3726 * _3722));
                                float _4866 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3737 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3741 = ((_3737 * _3737) * (_3719 + (-1.0))) + 1.0;
                                float _3742 = _3679 * _3718;
                                float _3743 = _3742 * _3742;
                                float _3749 = ((1.0 - _3743) * dot(vec3(_1192, _1195, _1198), vec3(_3666, _3667, _3668))) + _3743;
                                float _4877 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3751 = 1.0 - _3718;
                                float _3761 = (0.5 / (((_3750 * ((_3733 * _3751) + _3718)) + 9.9999999392252902907785028219223e-09) + (((_3750 * _3751) + _3718) * _3733))) * _3750;
                                float _4888 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3771 = (_3696 * _3673) * (((_3719 * 3.1415927410125732421875) * (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0)))) / ((_3741 * _3741) * ((_3686 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3771 * _3555.x;
                                frontier_phi_73_pred_1 = _3771 * _3555.y;
                                frontier_phi_73_pred_2 = _3697 * _3543.z;
                                frontier_phi_73_pred_3 = _3697 * _3543.y;
                                frontier_phi_73_pred_4 = _3697 * _3543.x;
                                frontier_phi_73_pred_5 = _3771 * _3555.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3775 = frontier_phi_73_pred;
                            _3776 = frontier_phi_73_pred_1;
                            _3780 = frontier_phi_73_pred_2;
                            _3779 = frontier_phi_73_pred_3;
                            _3778 = frontier_phi_73_pred_4;
                            _3777 = frontier_phi_73_pred_5;
                            _3485 = _3778 + _3498;
                            _3486 = _3779 + _3499;
                            _3487 = _3780 + _3500;
                            _3482 = _3775 + _3495;
                            _3483 = _3776 + _3496;
                            _3484 = _3777 + _3497;
                            if (_3502 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3502;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3485;
                        frontier_phi_67_pred_1 = _3486;
                        frontier_phi_67_pred_2 = _3487;
                        frontier_phi_67_pred_3 = _3484;
                        frontier_phi_67_pred_4 = _3483;
                        frontier_phi_67_pred_5 = _3482;
                    }
                    _3150 = frontier_phi_67_pred;
                    _3152 = frontier_phi_67_pred_1;
                    _3154 = frontier_phi_67_pred_2;
                    _3148 = frontier_phi_67_pred_3;
                    _3146 = frontier_phi_67_pred_4;
                    _3144 = frontier_phi_67_pred_5;
                    uint _3289 = _3288 + 1u;
                    if (_3289 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3282 = _3144;
                        _3283 = _3146;
                        _3284 = _3148;
                        _3285 = _3150;
                        _3286 = _3152;
                        _3287 = _3154;
                        _3288 = _3289;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3152;
                frontier_phi_55_56_ladder_1 = _3154;
                frontier_phi_55_56_ladder_2 = _3150;
                frontier_phi_55_56_ladder_3 = _3148;
                frontier_phi_55_56_ladder_4 = _3146;
                frontier_phi_55_56_ladder_5 = _3144;
            }
            else
            {
                frontier_phi_55_56_ladder = _3039;
                frontier_phi_55_56_ladder_1 = _3041;
                frontier_phi_55_56_ladder_2 = _3037;
                frontier_phi_55_56_ladder_3 = _3035;
                frontier_phi_55_56_ladder_4 = _3033;
                frontier_phi_55_56_ladder_5 = _3031;
            }
            _3143 = frontier_phi_55_56_ladder_5;
            _3145 = frontier_phi_55_56_ladder_4;
            _3147 = frontier_phi_55_56_ladder_3;
            _3149 = frontier_phi_55_56_ladder_2;
            _3151 = frontier_phi_55_56_ladder;
            _3153 = frontier_phi_55_56_ladder_1;
        }
        float _3158 = isnan(1.0) ? _1236 : (isnan(_1236) ? 1.0 : min(_1236, 1.0));
        _2943 = (_3158 * _3149) + _2398;
        _2945 = (_3158 * _3151) + _2400;
        _2947 = (_3158 * _3153) + _2402;
        _2949 = ((_3143 * 0.039999999105930328369140625) * _3158) + _2728;
        _2951 = ((_3145 * 0.039999999105930328369140625) * _3158) + _2730;
        _2953 = ((_3147 * 0.039999999105930328369140625) * _3158) + _2732;
    }
    else
    {
        _2943 = _2398;
        _2945 = _2400;
        _2947 = _2402;
        _2949 = _2728;
        _2951 = _2730;
        _2953 = _2732;
    }
    float _4904 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _4915 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _4926 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    uint _2973 = _287 + 6u;
    float _2981 = _1173 / cbSceneParam._m0[86u].x;
    float _2982 = _1174 / cbSceneParam._m0[86u].y;
    vec4 _2996 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, (log2((isnan(cbSceneParam._m0[77u].w) ? _1108 : (isnan(_1108) ? cbSceneParam._m0[77u].w : min(_1108, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2998 = _2996.x;
    float _2999 = _2996.y;
    float _3000 = _2996.z;
    float _3001 = _2996.w;
    float _3093;
    float _3095;
    float _3097;
    float _3099;
    if (_1108 > cbSceneParam._m0[78u].w)
    {
        float _3056 = isnan(_1108) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1108 : min(cbSceneParam._m0[80u].w, _1108));
        float _3057 = _3056 / _1108;
        float _3068 = _3057 * _1158;
        float _3069 = _1159 * _3057;
        float _3070 = (-0.0) - _3069;
        float _3071 = _3057 * _1160;
        float _3073 = (cbSceneParam._m0[77u].w * _3070) / _3056;
        float _3074 = _3073 + cbSceneParam._m0[79u].w;
        float _3075 = cbSceneParam._m0[79u].w - _3069;
        float _3081 = sqrt(((_3068 * _3068) + (_3069 * _3069)) + (_3071 * _3071));
        float _3084 = (1.0 - (cbSceneParam._m0[77u].w / _3056)) * _3081;
        float _3089 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3091 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3244;
        if (abs((_3070 - _3073) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3244 = ((((_3074 > 0.0) ? exp2(_3089 * _3074) : (2.0 - exp2(_3091 * _3074))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3084;
        }
        else
        {
            float _3204 = 1.0 / cbSceneParam._m0[80u].x;
            float _3205 = isnan(_3075) ? _3074 : (isnan(_3074) ? _3075 : max(_3074, _3075));
            float _3206 = isnan(_3075) ? _3074 : (isnan(_3074) ? _3075 : min(_3074, _3075));
            float _3215 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : min(_3205, 0.0));
            float _3216 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : min(_3206, 0.0));
            _3244 = ((abs(_3081 / _3070) * cbSceneParam._m0[80u].y) * ((((_3215 - _3216) * 2.0) - ((exp2(_3089 * (isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0)))) - exp2(_3089 * (isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0))))) * _3204)) - ((exp2(_3091 * _3215) - exp2(_3091 * _3216)) * _3204))) + (_3084 * cbSceneParam._m0[80u].z);
        }
        vec4 _3246 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, 1.0), 0.0);
        float _3255 = exp2((_3244 * (-1.44269502162933349609375)) * (1.0 - _3246.w));
        float _3256 = log2(_3255);
        float _3272 = log2(_3001);
        _3093 = (exp2(_3272 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3256 * cbSceneParam._m0[78u].x)) * _3246.x) / cbSceneParam._m0[78u].x)) + _2998;
        _3095 = (exp2(_3272 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3256 * cbSceneParam._m0[78u].y)) * _3246.y) / cbSceneParam._m0[78u].y)) + _2999;
        _3097 = (exp2(_3272 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3256 * cbSceneParam._m0[78u].z)) * _3246.z) / cbSceneParam._m0[78u].z)) + _3000;
        _3099 = _3255 * _3001;
    }
    else
    {
        _3093 = _2998;
        _3095 = _2999;
        _3097 = _3000;
        _3099 = _3001;
    }
    float _3111 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3112 = _3111 == 3.0;
    float _3113 = log2(_3099);
    float _3120 = exp2(_3113 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2943 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1236))) + ((_2949 + ((isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0))) * _2039)) * cbPerFrame._m0[3u].x));
    float _3121 = exp2(_3113 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2945 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1236))) + ((_2951 + ((isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0))) * _2039)) * cbPerFrame._m0[3u].x));
    float _3122 = exp2(_3113 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2947 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1236))) + ((_2953 + ((isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))) * _2039)) * cbPerFrame._m0[3u].x));
    float _3131 = (_3111 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3131 * (_3112 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3093)));
    SV_Target.y = _3131 * (_3112 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3095)));
    SV_Target.z = _3131 * (_3112 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3097)));
    SV_Target.w = cbInstanceData._m0[_2973].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2973].w;
}


