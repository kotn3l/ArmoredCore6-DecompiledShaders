#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1604;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3906 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3917 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3928 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _470 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _487 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _418.x) * 2.0) - ((((_458 - _470) * cbMtdParam._m0[24u].z) + _470) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3939 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _495 = (_488 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378;
    float _496 = (_488 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379;
    float _497 = (_488 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _560 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _418.y) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[24u].z) + _546) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3950 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _568 = (_561 * ((_514.x * cbMtdParam._m0[13u].x) - _495)) + _495;
    float _569 = (_561 * ((_514.y * cbMtdParam._m0[13u].y) - _496)) + _496;
    float _570 = (_561 * ((_514.z * cbMtdParam._m0[13u].z) - _497)) + _497;
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _310) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _311) + cbTextureTilingScale._m0[24u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _607 = _605.x;
    float _617 = dot(vec4(_607, _605.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _629 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _418.z) * 2.0) - ((((_607 - _617) * cbMtdParam._m0[24u].z) + _617) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3961 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _640 = (_347.x * cbMtdParam._m0[9u].x) * ((_630 * ((_588.x * cbMtdParam._m0[14u].x) - _568)) + _568);
    float _641 = (_347.y * cbMtdParam._m0[9u].y) * ((_630 * ((_588.y * cbMtdParam._m0[14u].y) - _569)) + _569);
    float _642 = (_347.z * cbMtdParam._m0[9u].z) * ((_630 * ((_588.z * cbMtdParam._m0[14u].z) - _570)) + _570);
    float _646 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _640;
    float _649 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _641;
    float _652 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _642;
    float _660 = (((_640 - _646) * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) + _646) * 4.55000019073486328125;
    float _662 = (((_641 - _649) * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) + _649) * 4.55000019073486328125;
    float _664 = (((_642 - _652) * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) + _652) * 4.55000019073486328125;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _310) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _311) + cbTextureTilingScale._m0[14u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _724 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _743 = _741.x;
    float _744 = _741.y;
    float _745 = _741.z;
    float _752 = ((_724.x - _743) * _488) + _743;
    float _753 = ((_724.y - _744) * _488) + _744;
    float _754 = ((_724.z - _745) * _488) + _745;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _777 = ((_766.x - _752) * _561) + _752;
    float _778 = ((_766.y - _753) * _561) + _753;
    float _779 = ((_766.z - _754) * _561) + _754;
    vec4 _791 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _310) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _311) + cbTextureTilingScale._m0[23u].w));
    float _804 = ((_791.z - _779) * _630) + _779;
    float _807 = ((((_791.x - _777) * _630) + _777) * 2.0) + (-1.0);
    float _808 = ((((_791.y - _778) * _630) + _778) * 2.0) + (-1.0);
    float _809 = dot(vec2(_807, _808), vec2(_807, _808));
    float _3972 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _814 = sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))));
    vec4 _828 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _853 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _855 = _853.x;
    float _856 = 1.0 - _855;
    float _862 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _865 = ((isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : min(_862, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _874 = (_865 - ((((((_855 - _856) * cbMtdParam._m0[24u].w) + _856) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _865))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3993 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _875 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _882 = (_875 * ((_682.x * cbMtdParam._m0[18u].x) - _660)) + _660;
    float _883 = (_875 * ((_682.y * cbMtdParam._m0[18u].y) - _662)) + _662;
    float _884 = (_875 * ((_682.z * cbMtdParam._m0[18u].z) - _664)) + _664;
    float _899 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _900 = _899 * TEXCOORD.z;
    float _901 = _899 * TEXCOORD.w;
    vec4 _913 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _900) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _901) + cbTextureTilingScale._m0[19u].w));
    float _915 = _913.x;
    float _916 = 1.0 - _915;
    float _943 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_915 - _916) * cbMtdParam._m0[24u].y) + _916) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4004 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _944 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _952 = ((((cbMtdParam._m0[10u].x - _882) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _944) + _882;
    float _953 = ((((cbMtdParam._m0[10u].y - _883) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _944) + _883;
    float _954 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _884)) * _944) + _884;
    float _959 = (((_701.z - _804) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _804;
    float _963 = ((_828.z - _959) * cbMtdParam._m0[19u].w) + _959;
    vec4 _977 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _984 = (_977.x * 2.0) + (-1.0);
    float _985 = (_977.y * 2.0) + (-1.0);
    float _986 = dot(vec2(_984, _985), vec2(_984, _985));
    float _4015 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _994 = (_875 * (_977.z - _963)) + _963;
    float _997 = ((cbMtdParam._m0[23u].y - _994) * _944) + _994;
    vec4 _1018 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _900) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _901) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1024 = (_1018.x * 2.0) + (-1.0);
    float _1025 = (_1018.y * 2.0) + (-1.0);
    float _1026 = dot(vec2(_1024, _1025), vec2(_1024, _1025));
    float _4026 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1040 = (_807 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_701.x * 2.0) + (-1.0)))) + (((_828.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1041 = (_808 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_701.y * 2.0) + (-1.0)))) + (((_828.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1053 = (((_984 - _1040) + (cbMtdParam._m0[21u].x * _1040)) * _875) + _1040;
    float _1054 = (((_985 - _1041) + (cbMtdParam._m0[21u].x * _1041)) * _875) + _1041;
    float _1055 = (_875 * (sqrt(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) - _814)) + _814;
    float _1066 = (((_1024 - _1053) + (_1053 * cbMtdParam._m0[22u].z)) * _944) + _1053;
    float _1067 = (((_1025 - _1054) + (_1054 * cbMtdParam._m0[22u].z)) * _944) + _1054;
    float _1068 = ((sqrt(1.0 - (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) - _1055) * _944) + _1055;
    float _1070 = cbMtdParam._m0[22u].x + _828.w;
    float _1073 = fma(_1068, _259 * NORMAL.x, fma(_1067, _266 * TANGENT.x, (_252 * _244) * _1066));
    float _1076 = fma(_1068, _259 * NORMAL.y, fma(_1067, _266 * TANGENT.y, (_252 * _245) * _1066));
    float _1079 = fma(_1068, _259 * NORMAL.z, fma(_1067, _266 * TANGENT.z, (_252 * _246) * _1066));
    float _1083 = inversesqrt(dot(vec3(_1073, _1076, _1079), vec3(_1073, _1076, _1079)));
    float _1084 = _1083 * _1073;
    float _1085 = _1083 * _1076;
    float _1086 = _1083 * _1079;
    float _4037 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1087 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _4059 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4070 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _4081 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _1105 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1155 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1145);
    float _1156 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1145);
    float _1157 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1145);
    float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
    float _1162 = _1155 * _1161;
    float _1163 = _1156 * _1161;
    float _1164 = _1157 * _1161;
    float _1170 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1171 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1189 = fma(_1086, cbSceneParam._m0[5u].z, fma(_1085, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1084));
    float _1192 = fma(_1086, cbSceneParam._m0[6u].z, fma(_1085, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1084));
    float _1195 = fma(_1086, cbSceneParam._m0[7u].z, fma(_1085, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1084));
    uint _1209 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1215 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_1209].x;
    float _1216 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_1209].y;
    float _1217 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * cbInstanceData._m0[_1209].z;
    float _4092 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _1218 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1219 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _1220 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    vec4 _1229 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1170, cbSceneParam._m0[86u].y * _1171));
    float _1233 = ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * TEXCOORD_5.w) * _1229.x;
    float _1234 = dot(vec3(_1084, _1085, _1086), vec3(_1162, _1163, _1164));
    float _1237 = _1234 * 2.0;
    float _1241 = (_1237 * _1084) - _1162;
    float _1242 = (_1237 * _1085) - _1163;
    float _1243 = (_1237 * _1086) - _1164;
    float _1247 = abs(dot(vec3(_1162, _1163, _1164), vec3(_1084, _1085, _1086)));
    float _4125 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
    float _1249 = sqrt(_1087);
    float _1262 = exp2((_1249 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1249 * 3.0));
    float _1294 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1298 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1302 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1603;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1328 = fma(_1302, cbModelParam._m0[26u].z, fma(_1298, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1294));
        float _1332 = fma(_1302, cbModelParam._m0[27u].z, fma(_1298, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1294));
        float _1336 = fma(_1302, cbModelParam._m0[28u].z, fma(_1298, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1294));
        float _1361 = _1294 + _1084;
        float _1362 = _1298 + _1085;
        float _1363 = _1302 + _1086;
        float _1373 = fma(_1363, cbModelParam._m0[26u].z, fma(_1362, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1361)) - _1328;
        float _1374 = fma(_1363, cbModelParam._m0[27u].z, fma(_1362, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1361)) - _1332;
        float _1375 = fma(_1363, cbModelParam._m0[28u].z, fma(_1362, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1361)) - _1336;
        float _1379 = inversesqrt(dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375)));
        float _1392 = ((_1379 * _1373) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1328 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1379 * _1374) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1332 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1379 * _1375) / cbModelParam._m0[34u].z) + ((((((_1336 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        float _1431 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1397.x + (-0.5));
        float _1433 = _1431 * (_1397.y + (-0.5));
        float _1434 = _1431 * (_1397.z + (-0.5));
        float _1441 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1404.x + (-0.5));
        float _1443 = _1441 * (_1404.y + (-0.5));
        float _1444 = _1441 * (_1404.z + (-0.5));
        float _1451 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1411.x + (-0.5));
        float _1453 = _1451 * (_1411.y + (-0.5));
        float _1454 = _1451 * (_1411.z + (-0.5));
        float _1461 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1418.x + (-0.5));
        float _1463 = _1461 * (_1418.y + (-0.5));
        float _1464 = _1461 * (_1418.z + (-0.5));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = _1432 * 0.5;
        float _1469 = _1442 * 0.5;
        float _1470 = _1452 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1485 = (dot(vec3(_1084, _1085, _1086), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1495 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4173 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1497 + 1.0))) + _1502) * _1465;
        float _1512 = _1433 * 0.5;
        float _1513 = _1443 * 0.5;
        float _1514 = _1453 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_1084, _1085, _1086), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4206 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1539 + 1.0))) + _1544) * _1466;
        float _1554 = _1434 * 0.5;
        float _1555 = _1444 * 0.5;
        float _1556 = _1454 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_1084, _1085, _1086), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4239 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1581 + 1.0))) + _1586) * _1467;
        _1603 = _1434;
        _1605 = _1433;
        _1606 = _1432;
        _1607 = _1444;
        _1608 = _1443;
        _1609 = _1442;
        _1610 = _1454;
        _1611 = _1453;
        _1612 = _1452;
        _1613 = _1467;
        _1614 = _1466;
        _1615 = _1465;
        _1616 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1617 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1618 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
    }
    else
    {
        _1603 = _1604;
        _1605 = _1604;
        _1606 = _1604;
        _1607 = _1604;
        _1608 = _1604;
        _1609 = _1604;
        _1610 = _1604;
        _1611 = _1604;
        _1612 = _1604;
        _1613 = _1604;
        _1614 = _1604;
        _1615 = _1604;
        _1616 = 0.0;
        _1617 = 0.0;
        _1618 = 0.0;
    }
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1641 = fma(_1302, cbModelParam._m0[30u].z, fma(_1298, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1294));
        float _1645 = fma(_1302, cbModelParam._m0[31u].z, fma(_1298, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1294));
        float _1649 = fma(_1302, cbModelParam._m0[32u].z, fma(_1298, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1294));
        float _1672 = _1294 + _1084;
        float _1673 = _1298 + _1085;
        float _1674 = _1302 + _1086;
        float _1684 = fma(_1674, cbModelParam._m0[30u].z, fma(_1673, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1672)) - _1641;
        float _1685 = fma(_1674, cbModelParam._m0[31u].z, fma(_1673, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1672)) - _1645;
        float _1686 = fma(_1674, cbModelParam._m0[32u].z, fma(_1673, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1672)) - _1649;
        float _1690 = inversesqrt(dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686)));
        float _1703 = ((_1690 * _1684) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1641 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1704 = ((_1690 * _1685) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1645 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1705 = ((_1690 * _1686) / cbModelParam._m0[35u].z) + ((((((_1649 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1707 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1703, _1704, _1705), 0.0);
        vec4 _1714 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1703, _1704, _1705), 0.0);
        vec4 _1721 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1703, _1704, _1705), 0.0);
        vec4 _1728 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1703, _1704, _1705), 0.0);
        float _1740 = exp2((_1707.w + (-0.5)) * 20.0) * 2.0;
        float _1741 = _1740 * (_1707.x + (-0.5));
        float _1742 = _1740 * (_1707.y + (-0.5));
        float _1743 = _1740 * (_1707.z + (-0.5));
        float _1750 = exp2((_1714.w + (-0.5)) * 20.0) * 2.0;
        float _1751 = _1750 * (_1714.x + (-0.5));
        float _1752 = _1750 * (_1714.y + (-0.5));
        float _1753 = _1750 * (_1714.z + (-0.5));
        float _1760 = exp2((_1721.w + (-0.5)) * 20.0) * 2.0;
        float _1761 = _1760 * (_1721.x + (-0.5));
        float _1762 = _1760 * (_1721.y + (-0.5));
        float _1763 = _1760 * (_1721.z + (-0.5));
        float _1770 = exp2((_1728.w + (-0.5)) * 20.0) * 2.0;
        float _1771 = _1770 * (_1728.x + (-0.5));
        float _1772 = _1770 * (_1728.y + (-0.5));
        float _1773 = _1770 * (_1728.z + (-0.5));
        float _1774 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1775 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1776 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1777 = _1741 * 0.5;
        float _1778 = _1751 * 0.5;
        float _1779 = _1761 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_1084, _1085, _1086), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1774 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4302 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1804 + 1.0))) + _1809) * _1774;
        float _1819 = _1742 * 0.5;
        float _1820 = _1752 * 0.5;
        float _1821 = _1762 * 0.5;
        float _1822 = dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821));
        float _1827 = (_1822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1822);
        float _1835 = (dot(vec3(_1084, _1085, _1086), vec3(_1827 * _1819, _1827 * _1820, _1827 * _1821)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1844 = sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821)) / (_1775 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1846 = _1845 * 2.0;
        float _1850 = (1.0 - _1845) / (_1845 + 1.0);
        float _4335 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1860 = ((((1.0 - _1851) * (_1846 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1846 + 1.0))) + _1851) * _1775;
        float _1861 = _1743 * 0.5;
        float _1862 = _1753 * 0.5;
        float _1863 = _1763 * 0.5;
        float _1864 = dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863));
        float _1869 = (_1864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1864);
        float _1877 = (dot(vec3(_1084, _1085, _1086), vec3(_1869 * _1861, _1869 * _1862, _1869 * _1863)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1886 = sqrt(((_1862 * _1862) + (_1861 * _1861)) + (_1863 * _1863)) / (_1776 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1888 = _1887 * 2.0;
        float _1892 = (1.0 - _1887) / (_1887 + 1.0);
        float _4368 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1902 = ((((1.0 - _1893) * (_1888 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1888 + 1.0))) + _1893) * _1776;
        _1910 = _1743;
        _1911 = _1742;
        _1912 = _1741;
        _1913 = _1753;
        _1914 = _1752;
        _1915 = _1751;
        _1916 = _1763;
        _1917 = _1762;
        _1918 = _1761;
        _1919 = _1776;
        _1920 = _1775;
        _1921 = _1774;
        _1922 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
        _1923 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)));
        _1924 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)));
    }
    else
    {
        _1910 = _1604;
        _1911 = _1604;
        _1912 = _1604;
        _1913 = _1604;
        _1914 = _1604;
        _1915 = _1604;
        _1916 = _1604;
        _1917 = _1604;
        _1918 = _1604;
        _1919 = _1604;
        _1920 = _1604;
        _1921 = _1604;
        _1922 = 0.0;
        _1923 = 0.0;
        _1924 = 0.0;
    }
    float _1934 = (cbModelParam._m0[1u].x * (_1922 - _1616)) + _1616;
    float _1935 = (cbModelParam._m0[1u].x * (_1923 - _1617)) + _1617;
    float _1936 = (cbModelParam._m0[1u].x * (_1924 - _1618)) + _1618;
    float _1957 = fma(_1936, cbSceneParam._m0[89u].z, fma(_1935, cbSceneParam._m0[89u].y, _1934 * cbSceneParam._m0[89u].x));
    float _1960 = fma(_1936, cbSceneParam._m0[90u].z, fma(_1935, cbSceneParam._m0[90u].y, _1934 * cbSceneParam._m0[90u].x));
    float _1963 = fma(_1936, cbSceneParam._m0[91u].z, fma(_1935, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1934));
    float _1978 = _1241 * 0.5;
    float _1979 = _1242 * 0.5;
    float _1980 = _1243 * 0.5;
    float _1981 = dot(vec4(_1978, _1979, _1980, 1.0), vec4(_1912, _1915, _1918, _1921));
    float _1984 = dot(vec4(_1978, _1979, _1980, 1.0), vec4(_1911, _1914, _1917, _1920));
    float _1987 = dot(vec4(_1978, _1979, _1980, 1.0), vec4(_1910, _1913, _1916, _1919));
    float _2021;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1994 = dot(vec4(_1978, _1979, _1980, 1.0), vec4(_1603, _1607, _1610, _1613));
        float _1998 = dot(vec4(_1978, _1979, _1980, 1.0), vec4(_1605, _1608, _1611, _1614));
        float _2002 = dot(vec4(_1978, _1979, _1980, 1.0), vec4(_1606, _1609, _1612, _1615));
        float _2009 = dot(vec4(cbModelParam._m0[39u]), vec4(_1978, _1979, _1980, 1.0));
        _2021 = dot(vec3(isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)), isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0)), isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2009) ? 0.0 : (isnan(0.0) ? _2009 : max(0.0, _2009))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2021 = 1.0;
    }
    float _2032;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2023 = dot(vec4(cbModelParam._m0[40u]), vec4(_1978, _1979, _1980, 1.0));
        _2032 = dot(vec3(isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0)), isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)), isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2023) ? 0.0 : (isnan(0.0) ? _2023 : max(0.0, _2023))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2032 = 1.0;
    }
    float _2036 = (_2032 * cbModelParam._m0[1u].x) + (_2021 * (1.0 - cbModelParam._m0[1u].x));
    float _2046 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1087);
    float _2047 = isnan(_2046) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2046 : min(cbModelParam._m0[25u].z, _2046));
    float _2127;
    float _2129;
    float _2131;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2094 = fma(_1302, cbModelParam._m0[13u].z, fma(_1298, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1294)) + cbModelParam._m0[13u].w;
        float _2098 = fma(_1302, cbModelParam._m0[14u].z, fma(_1298, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1294)) + cbModelParam._m0[14u].w;
        float _2102 = fma(_1302, cbModelParam._m0[15u].z, fma(_1298, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1294)) + cbModelParam._m0[15u].w;
        float _2105 = fma(_1243, cbModelParam._m0[13u].z, fma(_1242, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1241));
        float _2108 = fma(_1243, cbModelParam._m0[14u].z, fma(_1242, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1241));
        float _2111 = fma(_1243, cbModelParam._m0[15u].z, fma(_1242, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1241));
        float _2139;
        if (_2105 > 0.0)
        {
            _2139 = abs((1.0 - _2094) / _2105);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2094 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2139 = frontier_phi_14_12_ladder;
        }
        float _2339;
        if (_2108 > 0.0)
        {
            _2339 = abs((1.0 - _2098) / _2108);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2098 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2339 = frontier_phi_23_19_ladder;
        }
        float _2582;
        if (_2111 > 0.0)
        {
            _2582 = abs((1.0 - _2102) / _2111);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2102 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2582 = frontier_phi_35_30_ladder;
        }
        float _2584 = isnan(_2339) ? _2139 : (isnan(_2139) ? _2339 : min(_2139, _2339));
        float _2585 = isnan(_2582) ? _2584 : (isnan(_2584) ? _2582 : min(_2584, _2582));
        float _2589 = (_2585 * _2105) + _2094;
        float _2590 = (_2585 * _2108) + _2098;
        float _2591 = (_2585 * _2111) + _2102;
        float _2592 = _2585 * 9.9999997473787516355514526367188e-05;
        float _2594 = (-1.0) - _2592;
        float _2596 = _2592 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2591 > _2596) || ((_2591 < _2594) || ((_2590 > _2596) || ((_2590 < _2594) || ((_2589 < _2594) || (_2589 > _2596))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2591, cbModelParam._m0[9u].z, fma(_2590, cbModelParam._m0[9u].y, _2589 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2591, cbModelParam._m0[10u].z, fma(_2590, cbModelParam._m0[10u].y, _2589 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2591, cbModelParam._m0[11u].z, fma(_2590, cbModelParam._m0[11u].y, _2589 * cbModelParam._m0[11u].x))), _2047);
            frontier_phi_13_35_ladder = _2715.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2715.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2715.x * cbModelParam._m0[1u].y;
        }
        _2127 = frontier_phi_13_35_ladder_2;
        _2129 = frontier_phi_13_35_ladder_1;
        _2131 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2115 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1241, _1242, _1243), _2047);
        _2127 = _2115.x * cbModelParam._m0[1u].y;
        _2129 = _2115.y * cbModelParam._m0[1u].y;
        _2131 = _2115.z * cbModelParam._m0[1u].y;
    }
    float _2135 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1087);
    float _2136 = isnan(_2135) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2135 : min(cbModelParam._m0[25u].w, _2135));
    float _2225;
    float _2227;
    float _2229;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2189 = fma(_1302, cbModelParam._m0[21u].z, fma(_1298, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1294)) + cbModelParam._m0[21u].w;
        float _2193 = fma(_1302, cbModelParam._m0[22u].z, fma(_1298, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1294)) + cbModelParam._m0[22u].w;
        float _2197 = fma(_1302, cbModelParam._m0[23u].z, fma(_1298, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1294)) + cbModelParam._m0[23u].w;
        float _2200 = fma(_1243, cbModelParam._m0[21u].z, fma(_1242, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1241));
        float _2203 = fma(_1243, cbModelParam._m0[22u].z, fma(_1242, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1241));
        float _2206 = fma(_1243, cbModelParam._m0[23u].z, fma(_1242, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1241));
        float _2344;
        if (_2200 > 0.0)
        {
            _2344 = abs((1.0 - _2189) / _2200);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2200 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2189 + 1.0) / _2200);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2344 = frontier_phi_25_21_ladder;
        }
        float _2609;
        if (_2203 > 0.0)
        {
            _2609 = abs((1.0 - _2193) / _2203);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2193 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2609 = frontier_phi_37_32_ladder;
        }
        float _2814;
        if (_2206 > 0.0)
        {
            _2814 = abs((1.0 - _2197) / _2206);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2197 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2814 = frontier_phi_46_43_ladder;
        }
        float _2816 = isnan(_2609) ? _2344 : (isnan(_2344) ? _2609 : min(_2344, _2609));
        float _2817 = isnan(_2814) ? _2816 : (isnan(_2816) ? _2814 : min(_2816, _2814));
        float _2821 = (_2817 * _2200) + _2189;
        float _2822 = (_2817 * _2203) + _2193;
        float _2823 = (_2817 * _2206) + _2197;
        float _2824 = _2817 * 9.9999997473787516355514526367188e-05;
        float _2825 = (-1.0) - _2824;
        float _2827 = _2824 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2823 > _2827) || ((_2823 < _2825) || ((_2822 > _2827) || ((_2822 < _2825) || ((_2821 < _2825) || (_2821 > _2827))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3022 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2823, cbModelParam._m0[17u].z, fma(_2822, cbModelParam._m0[17u].y, _2821 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2823, cbModelParam._m0[18u].z, fma(_2822, cbModelParam._m0[18u].y, _2821 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2823, cbModelParam._m0[19u].z, fma(_2822, cbModelParam._m0[19u].y, _2821 * cbModelParam._m0[19u].x))), _2136);
            frontier_phi_22_46_ladder = _3022.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3022.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3022.x * cbModelParam._m0[1u].z;
        }
        _2225 = frontier_phi_22_46_ladder_2;
        _2227 = frontier_phi_22_46_ladder_1;
        _2229 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2209 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1241, _1242, _1243), _2136);
        _2225 = _2209.x * cbModelParam._m0[1u].z;
        _2227 = _2209.y * cbModelParam._m0[1u].z;
        _2229 = _2209.z * cbModelParam._m0[1u].z;
    }
    float _2241 = ((((1.0 - _1262) * ((_1249 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1262 * _1249)) * _1233;
    float _2242 = _2241 * ((cbModelParam._m0[1u].w * (_2225 - _2127)) + _2127);
    float _2243 = _2241 * ((cbModelParam._m0[1u].w * (_2227 - _2129)) + _2129);
    float _2244 = _2241 * ((cbModelParam._m0[1u].w * (_2229 - _2131)) + _2131);
    float _2247 = fma(_2244, cbSceneParam._m0[89u].z, fma(_2243, cbSceneParam._m0[89u].y, _2242 * cbSceneParam._m0[89u].x));
    float _2250 = fma(_2244, cbSceneParam._m0[90u].z, fma(_2243, cbSceneParam._m0[90u].y, _2242 * cbSceneParam._m0[90u].x));
    float _2253 = fma(_2244, cbSceneParam._m0[91u].z, fma(_2243, cbSceneParam._m0[91u].y, _2242 * cbSceneParam._m0[91u].x));
    uvec4 _2263 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2265 = _2263.x * 14u;
    uint _2266 = _2265 + 13u;
    float _2273 = _1233 + (-1.0);
    float _2278 = (cbLight._m0[_2266].x * _2273) + 1.0;
    float _2279 = (cbLight._m0[_2266].y * _2273) + 1.0;
    float _2280 = (cbLight._m0[_2266].z * _2273) + 1.0;
    float _2281 = (cbLight._m0[_2266].w * _2273) + 1.0;
    uint _2282 = _2265 + 5u;
    float _2288 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
    uint _2292 = _2265 + 4u;
    float _2298 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
    uint _2302 = _2265 | 1u;
    float _2313 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_1084, _1085, _1086));
    float _2316 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_1084, _1085, _1086));
    float _4504 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _4515 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2321 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2323 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * 0.3183098733425140380859375;
    float _2330 = ((cbLight._m0[_2282].x * _2288) * _2323) + ((cbLight._m0[_2292].x * _2298) * _2321);
    float _2331 = ((_2288 * cbLight._m0[_2282].y) * _2323) + ((_2298 * cbLight._m0[_2292].y) * _2321);
    float _2332 = ((_2288 * cbLight._m0[_2282].z) * _2323) + ((_2298 * cbLight._m0[_2292].z) * _2321);
    uvec4 _2336 = floatBitsToUint(cbLight._m0[_2265 + 12u]);
    bool _2338 = _2336.x == 0u;
    float _2349;
    float _2351;
    float _2353;
    if (_2338)
    {
        _2349 = _2330;
        _2351 = _2331;
        _2353 = _2332;
    }
    else
    {
        uint _2357 = _2265 + 6u;
        float _2373 = (dot(vec3(cbLight._m0[_2265 + 2u].xyz), vec3(_1084, _1085, _1086)) * 0.5) + 0.5;
        float _2374 = _2373 * _2373;
        float _4526 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2375 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2376 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2349 = (((cbLight._m0[_2357].x * 0.3183098733425140380859375) * _2375) * _2376) + _2330;
        _2351 = (((cbLight._m0[_2357].y * 0.3183098733425140380859375) * _2375) * _2376) + _2331;
        _2353 = (((cbLight._m0[_2357].z * 0.3183098733425140380859375) * _2375) * _2376) + _2332;
    }
    bool _2356 = _2336.y == 0u;
    float _2394;
    float _2396;
    float _2398;
    if (_2356)
    {
        _2394 = _2349;
        _2396 = _2351;
        _2398 = _2353;
    }
    else
    {
        uint _2553 = _2265 + 7u;
        float _2569 = (dot(vec3(cbLight._m0[_2265 + 3u].xyz), vec3(_1084, _1085, _1086)) * 0.5) + 0.5;
        float _2570 = _2569 * _2569;
        float _4542 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2571 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2572 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2394 = (((cbLight._m0[_2553].x * 0.3183098733425140380859375) * _2571) * _2572) + _2349;
        _2396 = (((cbLight._m0[_2553].y * 0.3183098733425140380859375) * _2571) * _2572) + _2351;
        _2398 = (((cbLight._m0[_2553].z * 0.3183098733425140380859375) * _2571) * _2572) + _2353;
    }
    uint _2401 = _2265 + 8u;
    float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _1087) * 0.949999988079071044921875);
    float _2415 = _2414 * _2414;
    float _2416 = cbLight._m0[_2265].x + _1162;
    float _2417 = cbLight._m0[_2265].y + _1163;
    float _2418 = cbLight._m0[_2265].z + _1164;
    float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
    float _2423 = _2422 * _2416;
    float _2424 = _2422 * _2417;
    float _2425 = _2422 * _2418;
    float _2426 = dot(vec3(_1084, _1085, _1086), vec3(cbLight._m0[_2265].xyz));
    float _4558 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _4569 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _2430 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2431 = dot(vec3(_1084, _1085, _1086), vec3(_2423, _2424, _2425));
    float _4580 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2434 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2435 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2423, _2424, _2425));
    float _4591 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2439 = _2415 * _2415;
    float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
    float _2454 = (exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2455 = 1.0 - _2415;
    float _2466 = (0.5 / (((_2430 * ((_2429 * _2455) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2455) + _2415) * _2429))) * _2429;
    float _4602 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2468 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
    uint _2479 = _2265 + 9u;
    float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _1087) * 0.949999988079071044921875);
    float _2491 = _2490 * _2490;
    float _2492 = cbLight._m0[_2302].x + _1162;
    float _2493 = cbLight._m0[_2302].y + _1163;
    float _2494 = cbLight._m0[_2302].z + _1164;
    float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
    float _2499 = _2498 * _2492;
    float _2500 = _2498 * _2493;
    float _2501 = _2498 * _2494;
    float _2502 = dot(vec3(_1084, _1085, _1086), vec3(cbLight._m0[_2302].xyz));
    float _4613 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2506 = dot(vec3(_1084, _1085, _1086), vec3(_2499, _2500, _2501));
    float _4624 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2510 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2499, _2500, _2501));
    float _4635 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2514 = _2491 * _2491;
    float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
    float _2527 = (exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2528 = 1.0 - _2491;
    float _2538 = (0.5 / (((_2430 * ((_2505 * _2528) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2528) + _2491) * _2505))) * _2505;
    float _4646 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2540 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
    float _2550 = (((_2527 * cbLight._m0[_2479].x) * _2540) * _2288) + (((_2454 * cbLight._m0[_2401].x) * _2468) * _2298);
    float _2551 = (((_2527 * cbLight._m0[_2479].y) * _2540) * _2288) + (((_2454 * cbLight._m0[_2401].y) * _2468) * _2298);
    float _2552 = (((_2527 * cbLight._m0[_2479].z) * _2540) * _2288) + (((_2454 * cbLight._m0[_2401].z) * _2468) * _2298);
    float _2614;
    float _2616;
    float _2618;
    if (_2338)
    {
        _2614 = _2550;
        _2616 = _2551;
        _2618 = _2552;
    }
    else
    {
        uint _2620 = _2265 + 2u;
        uint _2624 = _2265 + 10u;
        float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2620].w)) * _1087) * 0.949999988079071044921875);
        float _2639 = _2638 * _2638;
        float _2640 = cbLight._m0[_2620].x + _1162;
        float _2641 = cbLight._m0[_2620].y + _1163;
        float _2642 = cbLight._m0[_2620].z + _1164;
        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
        float _2647 = _2646 * _2640;
        float _2648 = _2646 * _2641;
        float _2649 = _2646 * _2642;
        float _2650 = dot(vec3(_1084, _1085, _1086), vec3(cbLight._m0[_2620].xyz));
        float _4657 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2654 = dot(vec3(_1084, _1085, _1086), vec3(_2647, _2648, _2649));
        float _4668 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2658 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_2647, _2648, _2649));
        float _4679 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2662 = _2639 * _2639;
        float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
        float _2675 = (exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2676 = 1.0 - _2639;
        float _2686 = (0.5 / (((_2430 * ((_2653 * _2676) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2676) + _2639) * _2653))) * _2653;
        float _4690 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2688 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
        float _2689 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2614 = (((_2675 * cbLight._m0[_2624].x) * _2688) * _2689) + _2550;
        _2616 = (((_2675 * cbLight._m0[_2624].y) * _2688) * _2689) + _2551;
        _2618 = (((_2675 * cbLight._m0[_2624].z) * _2688) * _2689) + _2552;
    }
    float _2724;
    float _2726;
    float _2728;
    if (_2356)
    {
        _2724 = _2614;
        _2726 = _2616;
        _2728 = _2618;
    }
    else
    {
        uint _2735 = _2265 + 3u;
        uint _2739 = _2265 + 11u;
        float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2735].w)) * _1087) * 0.949999988079071044921875);
        float _2754 = _2753 * _2753;
        float _2755 = cbLight._m0[_2735].x + _1162;
        float _2756 = cbLight._m0[_2735].y + _1163;
        float _2757 = cbLight._m0[_2735].z + _1164;
        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
        float _2762 = _2761 * _2755;
        float _2763 = _2761 * _2756;
        float _2764 = _2761 * _2757;
        float _2765 = dot(vec3(_1084, _1085, _1086), vec3(cbLight._m0[_2735].xyz));
        float _4706 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2769 = dot(vec3(_1084, _1085, _1086), vec3(_2762, _2763, _2764));
        float _4717 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2773 = dot(vec3(cbLight._m0[_2735].xyz), vec3(_2762, _2763, _2764));
        float _4728 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2777 = _2754 * _2754;
        float _2781 = ((_2772 * _2772) * (_2777 + (-1.0))) + 1.0;
        float _2790 = (exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2791 = 1.0 - _2754;
        float _2801 = (0.5 / (((_2430 * ((_2768 * _2791) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2791) + _2754) * _2768))) * _2768;
        float _4739 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2803 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2777 / ((_2781 * _2781) * 3.141590118408203125));
        float _2804 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2724 = (((_2790 * cbLight._m0[_2739].x) * _2803) * _2804) + _2614;
        _2726 = (((_2790 * cbLight._m0[_2739].y) * _2803) * _2804) + _2616;
        _2728 = (((_2790 * cbLight._m0[_2739].z) * _2803) * _2804) + _2618;
    }
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    if (_2263.y == 0u)
    {
        float _2879 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2880 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2879;
        float _2881 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2879;
        float _2882 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2879;
        uvec4 _2894 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2895 = _2894.x;
        uint _2906 = uint((float(_2894.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1171) / _2895))) + floor(float(uint(cbSceneParam._m0[85u].x * _1170) / _2895)));
        float _2916 = (log2(_2882 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2917 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        uint _2920 = uint(isnan(14.0) ? _2917 : (isnan(_2917) ? 14.0 : min(_2917, 14.0)));
        uvec4 _2925 = texelFetch(g_lightClusterGridBuffer, int(((_2920 << 2u) + (_2906 << 6u)) >> 2u));
        uint _2926 = _2925.x;
        uint _2927 = _2894.z;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        if (((((1u << ((_2927 >> 4u) & 15u)) + 4294967295u) & _2926) == 0u) || ((_2927 & 240u) == 0u))
        {
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
        }
        else
        {
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            uint _3178 = 0u;
            uint _3187;
            bool _3188;
            for (;;)
            {
                _3187 = texelFetch(g_lightClassification, int((((_2920 << 5u) + (_2906 << 9u)) + (_3178 << 2u)) >> 2u)).x;
                _3188 = _3187 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3188)
                {
                    frontier_phi_61_pred = _3172;
                    frontier_phi_61_pred_1 = _3177;
                    frontier_phi_61_pred_2 = _3176;
                    frontier_phi_61_pred_3 = _3175;
                    frontier_phi_61_pred_4 = _3174;
                    frontier_phi_61_pred_5 = _3173;
                }
                else
                {
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    uint _3302;
                    _3296 = _3172;
                    _3297 = _3173;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3187;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    for (;;)
                    {
                        uint _3306 = uint(findLSB(_3302)) + (_3178 << 5u);
                        uint _3303 = (_3302 + 4294967295u) & _3302;
                        uint _3308 = _3306 * 48u;
                        vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 3u)).x));
                        uint _3328 = (_3306 * 48u) + 4u;
                        vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3328)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 3u)).x));
                        uint _3347 = (_3306 * 48u) + 8u;
                        vec3 _3358 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x));
                        float _3362 = _3322.x - _2880;
                        float _3363 = _3322.y - _2881;
                        float _3364 = _3322.z - _2882;
                        float _3365 = dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364));
                        float _3368 = inversesqrt(_3365);
                        float _3369 = _3368 * _3362;
                        float _3370 = _3368 * _3363;
                        float _3371 = _3368 * _3364;
                        float _3372 = dot(vec3(_1189, _1192, _1195), vec3(_3369, _3370, _3371));
                        float _3377 = 1.0 - (_3365 * _3322.w);
                        float _4765 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3378 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3379 = sqrt(_3365) * _3341.w;
                        float _3382 = 1.39999997615814208984375 / (_3379 + 1.39999997615814208984375);
                        float _3383 = _3382 * _3382;
                        float _3386 = ((1.0 - _3383) * _3372) + _3383;
                        float _3389 = _3379 * _3379;
                        float _3393 = ((isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0))) * _3378) / ((_3389 * 0.699999988079071044921875) + 1.0);
                        float _3397 = (-0.0) - _2880;
                        float _3398 = (-0.0) - _2881;
                        float _3399 = (-0.0) - _2882;
                        float _3403 = inversesqrt(dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399)));
                        float _3404 = _3403 * _3397;
                        float _3405 = _3403 * _3398;
                        float _3406 = _3403 * _3399;
                        float _3414 = exp2(log2(1.0 / ((_3389 * 3.5) + 5.0)) * 0.25);
                        float _3415 = 1.0 - _1249;
                        float _3422 = sqrt(1.0 - ((1.0 - (_3415 * _3415)) * (1.0 - (_3414 * _3414))));
                        float _3423 = _3422 * _3422;
                        float _3424 = _3423 * _3423;
                        float _3425 = _3404 + _3369;
                        float _3426 = _3405 + _3370;
                        float _3427 = _3406 + _3371;
                        float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                        float _3435 = dot(vec3(_1189, _1192, _1195), vec3(_3404, _3405, _3406));
                        float _4781 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3438 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3439 = dot(vec3(_1189, _1192, _1195), vec3(_3431 * _3425, _3431 * _3426, _3431 * _3427));
                        float _4792 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3446 = ((_3442 * _3442) * (_3424 + (-1.0))) + 1.0;
                        float _3447 = _3382 * _3423;
                        float _3448 = _3447 * _3447;
                        float _3451 = ((1.0 - _3448) * _3372) + _3448;
                        float _4803 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3452 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3453 = 1.0 - _3423;
                        float _3463 = (0.5 / (((_3452 * ((_3438 * _3453) + _3423)) + 9.9999999392252902907785028219223e-09) + (((_3452 * _3453) + _3423) * _3438))) * _3452;
                        float _4814 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3474 = (((_3424 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3446 * _3446) * ((_3389 * 2.1991131305694580078125) + 3.141590118408203125))) * _3378;
                        _3231 = (_3393 * _3341.x) + _3299;
                        _3232 = (_3393 * _3341.y) + _3300;
                        _3233 = (_3393 * _3341.z) + _3301;
                        _3228 = (_3474 * _3358.x) + _3296;
                        _3229 = (_3474 * _3358.y) + _3297;
                        _3230 = (_3474 * _3358.z) + _3298;
                        if (_3303 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3296 = _3228;
                            _3297 = _3229;
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3303;
                        }
                    }
                    frontier_phi_61_pred = _3228;
                    frontier_phi_61_pred_1 = _3233;
                    frontier_phi_61_pred_2 = _3232;
                    frontier_phi_61_pred_3 = _3231;
                    frontier_phi_61_pred_4 = _3230;
                    frontier_phi_61_pred_5 = _3229;
                }
                _3028 = frontier_phi_61_pred;
                _3038 = frontier_phi_61_pred_1;
                _3036 = frontier_phi_61_pred_2;
                _3034 = frontier_phi_61_pred_3;
                _3032 = frontier_phi_61_pred_4;
                _3030 = frontier_phi_61_pred_5;
                uint _3179 = _3178 + 1u;
                if (_3179 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3172 = _3028;
                    _3173 = _3030;
                    _3174 = _3032;
                    _3175 = _3034;
                    _3176 = _3036;
                    _3177 = _3038;
                    _3178 = _3179;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
        }
        uvec4 _3041 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3042 = _3041.z;
        uint _3044 = (_3042 >> 8u) & 15u;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        if (((4294967295u << _3044) & _2926) == 0u)
        {
            _3140 = _3027;
            _3142 = _3029;
            _3144 = _3031;
            _3146 = _3033;
            _3148 = _3035;
            _3150 = _3037;
        }
        else
        {
            float _3165 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
            float _3166 = _3165 * _2880;
            float _3167 = _3165 * _2881;
            float _3168 = _3165 * _2882;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3044 < ((_3042 >> 12u) & 15u))
            {
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3279 = _3027;
                float _3280 = _3029;
                float _3281 = _3031;
                float _3282 = _3033;
                float _3283 = _3035;
                float _3284 = _3037;
                uint _3285 = _3044;
                uint _3294;
                bool _3295;
                for (;;)
                {
                    _3294 = texelFetch(g_lightClassification, int((((_2920 << 5u) + (_2906 << 9u)) + (_3285 << 2u)) >> 2u)).x;
                    _3295 = _3294 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3295)
                    {
                        frontier_phi_67_pred = _3282;
                        frontier_phi_67_pred_1 = _3283;
                        frontier_phi_67_pred_2 = _3284;
                        frontier_phi_67_pred_3 = _3281;
                        frontier_phi_67_pred_4 = _3280;
                        frontier_phi_67_pred_5 = _3279;
                    }
                    else
                    {
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3492 = _3279;
                        float _3493 = _3280;
                        float _3494 = _3281;
                        float _3495 = _3282;
                        float _3496 = _3283;
                        float _3497 = _3284;
                        uint _3498 = _3294;
                        uint _3499;
                        vec4 _3524;
                        float _3525;
                        vec4 _3540;
                        vec3 _3552;
                        vec4 _3567;
                        vec4 _3582;
                        float _3628;
                        bool _3629;
                        for (;;)
                        {
                            uint _3509 = ((_3285 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3498));
                            _3499 = (_3498 + 4294967295u) & _3498;
                            uint _3511 = _3509 * 40u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3525 = _3524.w;
                            uint _3527 = (_3509 * 40u) + 4u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3542 = (_3509 * 40u) + 8u;
                            _3552 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x));
                            uint _3554 = (_3509 * 40u) + 16u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3509 * 40u) + 20u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3509 * 40u) + 24u;
                            vec4 _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3603 = (_3509 * 40u) + 28u;
                            vec4 _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            _3628 = fma(_2882, _3616.z, fma(_2881, _3616.y, _3616.x * _2880)) + _3616.w;
                            _3629 = !((fma(_2882, _3597.z, fma(_2881, _3597.y, _3597.x * _2880)) + _3597.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3629)
                            {
                                float _3656 = _3524.x - _2880;
                                float _3657 = _3524.y - _2881;
                                float _3658 = _3524.z - _2882;
                                float _3659 = dot(vec3(_3656, _3657, _3658), vec3(_3656, _3657, _3658));
                                float _3662 = inversesqrt(_3659);
                                float _3663 = _3662 * _3656;
                                float _3664 = _3662 * _3657;
                                float _3665 = _3662 * _3658;
                                float _3669 = 1.0 - (_3659 / (_3525 * _3525));
                                float _4825 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3674 = sqrt(_3659) * _3540.w;
                                float _3676 = 1.39999997615814208984375 / (_3674 + 1.39999997615814208984375);
                                float _3677 = _3676 * _3676;
                                float _3680 = ((1.0 - _3677) * dot(vec3(_3663, _3664, _3665), vec3(_1189, _1192, _1195))) + _3677;
                                float _3683 = _3674 * _3674;
                                float _3687 = (fma(_2882, _3567.z, fma(_2881, _3567.y, _3567.x * _2880)) + _3567.w) / _3628;
                                float _3688 = (fma(_2882, _3582.z, fma(_2881, _3582.y, _3582.x * _2880)) + _3582.w) / _3628;
                                float _3692 = 1.0 - dot(vec2(_3687, _3688), vec2(_3687, _3688));
                                float _4841 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3694 = _3693 * (((isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0))) * _3670) / ((_3683 * 0.699999988079071044921875) + 1.0));
                                float _3706 = exp2(log2(1.0 / ((_3683 * 3.5) + 5.0)) * 0.25);
                                float _3707 = 1.0 - _1249;
                                float _3714 = sqrt(1.0 - ((1.0 - (_3707 * _3707)) * (1.0 - (_3706 * _3706))));
                                float _3715 = _3714 * _3714;
                                float _3716 = _3715 * _3715;
                                float _3717 = _3663 - _3166;
                                float _3718 = _3664 - _3167;
                                float _3719 = _3665 - _3168;
                                float _3723 = inversesqrt(dot(vec3(_3717, _3718, _3719), vec3(_3717, _3718, _3719)));
                                float _3727 = dot(vec3(_1189, _1192, _1195), vec3((-0.0) - _3166, (-0.0) - _3167, (-0.0) - _3168));
                                float _4852 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3730 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3731 = dot(vec3(_1189, _1192, _1195), vec3(_3723 * _3717, _3723 * _3718, _3723 * _3719));
                                float _4863 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3734 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3738 = ((_3734 * _3734) * (_3716 + (-1.0))) + 1.0;
                                float _3739 = _3676 * _3715;
                                float _3740 = _3739 * _3739;
                                float _3746 = ((1.0 - _3740) * dot(vec3(_1189, _1192, _1195), vec3(_3663, _3664, _3665))) + _3740;
                                float _4874 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3747 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3748 = 1.0 - _3715;
                                float _3758 = (0.5 / (((_3747 * ((_3730 * _3748) + _3715)) + 9.9999999392252902907785028219223e-09) + (((_3747 * _3748) + _3715) * _3730))) * _3747;
                                float _4885 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3768 = (_3693 * _3670) * (((_3716 * 3.1415927410125732421875) * (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) / ((_3738 * _3738) * ((_3683 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3768 * _3552.x;
                                frontier_phi_73_pred_1 = _3768 * _3552.y;
                                frontier_phi_73_pred_2 = _3694 * _3540.z;
                                frontier_phi_73_pred_3 = _3694 * _3540.y;
                                frontier_phi_73_pred_4 = _3694 * _3540.x;
                                frontier_phi_73_pred_5 = _3768 * _3552.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3772 = frontier_phi_73_pred;
                            _3773 = frontier_phi_73_pred_1;
                            _3777 = frontier_phi_73_pred_2;
                            _3776 = frontier_phi_73_pred_3;
                            _3775 = frontier_phi_73_pred_4;
                            _3774 = frontier_phi_73_pred_5;
                            _3482 = _3775 + _3495;
                            _3483 = _3776 + _3496;
                            _3484 = _3777 + _3497;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            if (_3499 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3499;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3482;
                        frontier_phi_67_pred_1 = _3483;
                        frontier_phi_67_pred_2 = _3484;
                        frontier_phi_67_pred_3 = _3481;
                        frontier_phi_67_pred_4 = _3480;
                        frontier_phi_67_pred_5 = _3479;
                    }
                    _3147 = frontier_phi_67_pred;
                    _3149 = frontier_phi_67_pred_1;
                    _3151 = frontier_phi_67_pred_2;
                    _3145 = frontier_phi_67_pred_3;
                    _3143 = frontier_phi_67_pred_4;
                    _3141 = frontier_phi_67_pred_5;
                    uint _3286 = _3285 + 1u;
                    if (_3286 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3279 = _3141;
                        _3280 = _3143;
                        _3281 = _3145;
                        _3282 = _3147;
                        _3283 = _3149;
                        _3284 = _3151;
                        _3285 = _3286;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3149;
                frontier_phi_55_56_ladder_1 = _3151;
                frontier_phi_55_56_ladder_2 = _3147;
                frontier_phi_55_56_ladder_3 = _3145;
                frontier_phi_55_56_ladder_4 = _3143;
                frontier_phi_55_56_ladder_5 = _3141;
            }
            else
            {
                frontier_phi_55_56_ladder = _3035;
                frontier_phi_55_56_ladder_1 = _3037;
                frontier_phi_55_56_ladder_2 = _3033;
                frontier_phi_55_56_ladder_3 = _3031;
                frontier_phi_55_56_ladder_4 = _3029;
                frontier_phi_55_56_ladder_5 = _3027;
            }
            _3140 = frontier_phi_55_56_ladder_5;
            _3142 = frontier_phi_55_56_ladder_4;
            _3144 = frontier_phi_55_56_ladder_3;
            _3146 = frontier_phi_55_56_ladder_2;
            _3148 = frontier_phi_55_56_ladder;
            _3150 = frontier_phi_55_56_ladder_1;
        }
        float _3155 = isnan(1.0) ? _1233 : (isnan(_1233) ? 1.0 : min(_1233, 1.0));
        _2939 = (_3155 * _3146) + _2394;
        _2941 = (_3155 * _3148) + _2396;
        _2943 = (_3155 * _3150) + _2398;
        _2945 = ((_3140 * 0.039999999105930328369140625) * _3155) + _2724;
        _2947 = ((_3142 * 0.039999999105930328369140625) * _3155) + _2726;
        _2949 = ((_3144 * 0.039999999105930328369140625) * _3155) + _2728;
    }
    else
    {
        _2939 = _2394;
        _2941 = _2396;
        _2943 = _2398;
        _2945 = _2724;
        _2947 = _2726;
        _2949 = _2728;
    }
    float _4901 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _4912 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _4923 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    uint _2969 = _291 + 6u;
    float _2977 = _1170 / cbSceneParam._m0[86u].x;
    float _2978 = _1171 / cbSceneParam._m0[86u].y;
    vec4 _2992 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2977, _2978, (log2((isnan(cbSceneParam._m0[77u].w) ? _1105 : (isnan(_1105) ? cbSceneParam._m0[77u].w : min(_1105, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2994 = _2992.x;
    float _2995 = _2992.y;
    float _2996 = _2992.z;
    float _2997 = _2992.w;
    float _3090;
    float _3092;
    float _3094;
    float _3096;
    if (_1105 > cbSceneParam._m0[78u].w)
    {
        float _3052 = isnan(_1105) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1105 : min(cbSceneParam._m0[80u].w, _1105));
        float _3053 = _3052 / _1105;
        float _3064 = _3053 * _1155;
        float _3065 = _1156 * _3053;
        float _3066 = (-0.0) - _3065;
        float _3068 = _3053 * _1157;
        float _3070 = (cbSceneParam._m0[77u].w * _3066) / _3052;
        float _3071 = _3070 + cbSceneParam._m0[79u].w;
        float _3072 = cbSceneParam._m0[79u].w - _3065;
        float _3078 = sqrt(((_3064 * _3064) + (_3065 * _3065)) + (_3068 * _3068));
        float _3081 = (1.0 - (cbSceneParam._m0[77u].w / _3052)) * _3078;
        float _3086 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3088 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3241;
        if (abs((_3066 - _3070) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3241 = ((((_3071 > 0.0) ? exp2(_3086 * _3071) : (2.0 - exp2(_3088 * _3071))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3081;
        }
        else
        {
            float _3201 = 1.0 / cbSceneParam._m0[80u].x;
            float _3202 = isnan(_3072) ? _3071 : (isnan(_3071) ? _3072 : max(_3071, _3072));
            float _3203 = isnan(_3072) ? _3071 : (isnan(_3071) ? _3072 : min(_3071, _3072));
            float _3212 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : min(_3202, 0.0));
            float _3213 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : min(_3203, 0.0));
            _3241 = ((abs(_3078 / _3066) * cbSceneParam._m0[80u].y) * ((((_3212 - _3213) * 2.0) - ((exp2(_3086 * (isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0)))) - exp2(_3086 * (isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0))))) * _3201)) - ((exp2(_3088 * _3212) - exp2(_3088 * _3213)) * _3201))) + (_3081 * cbSceneParam._m0[80u].z);
        }
        vec4 _3243 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2977, _2978, 1.0), 0.0);
        float _3252 = exp2((_3241 * (-1.44269502162933349609375)) * (1.0 - _3243.w));
        float _3253 = log2(_3252);
        float _3269 = log2(_2997);
        _3090 = (exp2(_3269 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].x)) * _3243.x) / cbSceneParam._m0[78u].x)) + _2994;
        _3092 = (exp2(_3269 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].y)) * _3243.y) / cbSceneParam._m0[78u].y)) + _2995;
        _3094 = (exp2(_3269 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].z)) * _3243.z) / cbSceneParam._m0[78u].z)) + _2996;
        _3096 = _3252 * _2997;
    }
    else
    {
        _3090 = _2994;
        _3092 = _2995;
        _3094 = _2996;
        _3096 = _2997;
    }
    float _3108 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3109 = _3108 == 3.0;
    float _3110 = log2(_3096);
    float _3117 = exp2(_3110 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2939 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1233))) + ((_2945 + ((isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0))) * _2036)) * cbPerFrame._m0[3u].x));
    float _3118 = exp2(_3110 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2941 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1233))) + ((_2947 + ((isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0))) * _2036)) * cbPerFrame._m0[3u].x));
    float _3119 = exp2(_3110 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2943 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1233))) + ((_2949 + ((isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0))) * _2036)) * cbPerFrame._m0[3u].x));
    float _3128 = (_3108 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3128 * (_3109 ? _3117 : (_3117 + (cbSceneParam._m0[72u].w * _3090)));
    SV_Target.y = _3128 * (_3109 ? _3118 : (_3118 + (cbSceneParam._m0[72u].w * _3092)));
    SV_Target.z = _3128 * (_3109 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3094)));
    SV_Target.w = cbInstanceData._m0[_2969].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2969].w;
}


