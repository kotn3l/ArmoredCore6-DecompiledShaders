#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1283;
float _3640;
float _3641;
float _3642;
float _3643;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _369 = _367.x;
    float _381 = dot(vec4(_369, _367.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _330.x) * 2.0) - ((((_369 - _381) * cbMtdParam._m0[24u].z) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3652 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _406 = (_399 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _407 = (_399 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _408 = (_399 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _457 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _471 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _330.y) * 2.0) - ((((_447 - _457) * cbMtdParam._m0[24u].z) + _457) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3663 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _479 = (_472 * ((_425.x * cbMtdParam._m0[13u].x) - _406)) + _406;
    float _480 = (_472 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _481 = (_472 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    float _548 = ((_520.x - _539) * _399) + _539;
    float _549 = ((_520.y - _540) * _399) + _540;
    float _550 = ((_520.z - _541) * _399) + _541;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _575 = ((_562.z - _550) * _472) + _550;
    float _578 = ((((_562.x - _548) * _472) + _548) * 2.0) + (-1.0);
    float _580 = ((((_562.y - _549) * _472) + _549) * 2.0) + (-1.0);
    float _581 = dot(vec2(_578, _580), vec2(_578, _580));
    float _3674 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _586 = sqrt(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _627 = _625.x;
    float _628 = 1.0 - _627;
    float _641 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_627 - _628) * cbMtdParam._m0[24u].w) + _628) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3685 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _649 = (_642 * ((_500.x * cbMtdParam._m0[18u].x) - _479)) + _479;
    float _650 = (_642 * ((_500.y * cbMtdParam._m0[18u].y) - _480)) + _480;
    float _651 = (_642 * ((_500.z * cbMtdParam._m0[18u].z) - _481)) + _481;
    float _655 = (cbMtdParam._m0[19u].w * (_600.z - _575)) + _575;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _675 = (_668.x * 2.0) + (-1.0);
    float _676 = (_668.y * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _3696 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _685 = (_642 * (_668.z - _655)) + _655;
    float _688 = (((_600.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _578;
    float _689 = (((_600.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _580;
    float _701 = (((_675 - _688) + (cbMtdParam._m0[21u].x * _688)) * _642) + _688;
    float _702 = (((_676 - _689) + (cbMtdParam._m0[21u].x * _689)) * _642) + _689;
    float _703 = (_642 * (sqrt(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) - _586)) + _586;
    float _707 = cbMtdParam._m0[22u].x + _600.w;
    float _710 = fma(_703, _229 * NORMAL.x, fma(_702, _236 * TANGENT.x, (_222 * _214) * _701));
    float _713 = fma(_703, _229 * NORMAL.y, fma(_702, _236 * TANGENT.y, (_222 * _215) * _701));
    float _716 = fma(_703, _229 * NORMAL.z, fma(_702, _236 * TANGENT.z, (_222 * _216) * _701));
    float _720 = inversesqrt(dot(vec3(_710, _713, _716), vec3(_710, _713, _716)));
    float _721 = _720 * _710;
    float _722 = _720 * _713;
    float _723 = _720 * _716;
    float _3707 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _724 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _3729 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3740 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _3751 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _742 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _794 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _784);
    float _795 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _784);
    float _796 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _784);
    float _800 = inversesqrt(dot(vec3(_794, _795, _796), vec3(_794, _795, _796)));
    float _801 = _794 * _800;
    float _802 = _795 * _800;
    float _803 = _796 * _800;
    vec4 _808 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _810 = _808.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _964 = sqrt(((_794 * _794) + (_795 * _795)) + (_796 * _796));
        float _970 = (cbMatDynParam._m0[5u].x * _964) + cbMatDynParam._m0[5u].y;
        float _3762 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _975 = (cbMatDynParam._m0[5u].z * _964) + cbMatDynParam._m0[5u].w;
        float _3773 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) - _971)) + _971) < ((_810 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _821 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _822 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _840 = fma(_723, cbSceneParam._m0[5u].z, fma(_722, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _721));
    float _843 = fma(_723, cbSceneParam._m0[6u].z, fma(_722, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _721));
    float _846 = fma(_723, cbSceneParam._m0[7u].z, fma(_722, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _721));
    uint _859 = _242 + 9u;
    uint _860 = _859 + uint(cbMatDynParam._m0[0u].w);
    float _866 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * cbInstanceData._m0[_860].x;
    float _867 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_860].y;
    float _868 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_860].z;
    float _3784 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    vec4 _880 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _821, cbSceneParam._m0[86u].y * _822));
    float _884 = ((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * TEXCOORD_5.w) * _880.x;
    float _885 = dot(vec3(_721, _722, _723), vec3(_801, _802, _803));
    float _888 = _885 * 2.0;
    float _892 = (_888 * _721) - _801;
    float _893 = (_888 * _722) - _802;
    float _894 = (_888 * _723) - _803;
    float _898 = abs(dot(vec3(_801, _802, _803), vec3(_721, _722, _723)));
    float _3817 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _900 = sqrt(_724);
    float _913 = exp2((_900 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_900 * 3.0));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1282;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1007 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _1011 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _1015 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1040 = _945 + _721;
        float _1041 = _949 + _722;
        float _1042 = _953 + _723;
        float _1052 = fma(_1042, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040)) - _1007;
        float _1053 = fma(_1042, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040)) - _1011;
        float _1054 = fma(_1042, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040)) - _1015;
        float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
        float _1071 = ((_1058 * _1052) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1007 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1058 * _1053) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1011 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1058 * _1054) / cbModelParam._m0[34u].z) + ((((((_1015 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1110 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1076.x + (-0.5));
        float _1112 = _1110 * (_1076.y + (-0.5));
        float _1113 = _1110 * (_1076.z + (-0.5));
        float _1120 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1083.x + (-0.5));
        float _1122 = _1120 * (_1083.y + (-0.5));
        float _1123 = _1120 * (_1083.z + (-0.5));
        float _1130 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1090.x + (-0.5));
        float _1132 = _1130 * (_1090.y + (-0.5));
        float _1133 = _1130 * (_1090.z + (-0.5));
        float _1140 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1097.x + (-0.5));
        float _1142 = _1140 * (_1097.y + (-0.5));
        float _1143 = _1140 * (_1097.z + (-0.5));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = _1111 * 0.5;
        float _1148 = _1121 * 0.5;
        float _1149 = _1131 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1164 = (dot(vec3(_721, _722, _723), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1174 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3865 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1176 + 1.0))) + _1181) * _1144;
        float _1191 = _1112 * 0.5;
        float _1192 = _1122 * 0.5;
        float _1193 = _1132 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_721, _722, _723), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3898 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1218 + 1.0))) + _1223) * _1145;
        float _1233 = _1113 * 0.5;
        float _1234 = _1123 * 0.5;
        float _1235 = _1133 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_721, _722, _723), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3931 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1260 + 1.0))) + _1265) * _1146;
        _1282 = _1113;
        _1284 = _1112;
        _1285 = _1111;
        _1286 = _1123;
        _1287 = _1122;
        _1288 = _1121;
        _1289 = _1133;
        _1290 = _1132;
        _1291 = _1131;
        _1292 = _1146;
        _1293 = _1145;
        _1294 = _1144;
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
    }
    else
    {
        _1282 = _1283;
        _1284 = _1283;
        _1285 = _1283;
        _1286 = _1283;
        _1287 = _1283;
        _1288 = _1283;
        _1289 = _1283;
        _1290 = _1283;
        _1291 = _1283;
        _1292 = _1283;
        _1293 = _1283;
        _1294 = _1283;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1324 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1328 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1332 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1355 = _945 + _721;
        float _1356 = _949 + _722;
        float _1357 = _953 + _723;
        float _1367 = fma(_1357, cbModelParam._m0[30u].z, fma(_1356, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1355)) - _1324;
        float _1368 = fma(_1357, cbModelParam._m0[31u].z, fma(_1356, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1355)) - _1328;
        float _1369 = fma(_1357, cbModelParam._m0[32u].z, fma(_1356, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1355)) - _1332;
        float _1373 = inversesqrt(dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369)));
        float _1386 = ((_1373 * _1367) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1324 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1373 * _1368) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1328 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1373 * _1369) / cbModelParam._m0[35u].z) + ((((((_1332 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        float _1423 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1390.x + (-0.5));
        float _1425 = _1423 * (_1390.y + (-0.5));
        float _1426 = _1423 * (_1390.z + (-0.5));
        float _1433 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1397.x + (-0.5));
        float _1435 = _1433 * (_1397.y + (-0.5));
        float _1436 = _1433 * (_1397.z + (-0.5));
        float _1443 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1404.x + (-0.5));
        float _1445 = _1443 * (_1404.y + (-0.5));
        float _1446 = _1443 * (_1404.z + (-0.5));
        float _1453 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1411.x + (-0.5));
        float _1455 = _1453 * (_1411.y + (-0.5));
        float _1456 = _1453 * (_1411.z + (-0.5));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = _1424 * 0.5;
        float _1461 = _1434 * 0.5;
        float _1462 = _1444 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_721, _722, _723), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _3994 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1487 + 1.0))) + _1492) * _1457;
        float _1502 = _1425 * 0.5;
        float _1503 = _1435 * 0.5;
        float _1504 = _1445 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_721, _722, _723), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4027 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1529 + 1.0))) + _1534) * _1458;
        float _1544 = _1426 * 0.5;
        float _1545 = _1436 * 0.5;
        float _1546 = _1446 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_721, _722, _723), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4060 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1571 + 1.0))) + _1576) * _1459;
        _1593 = _1426;
        _1594 = _1425;
        _1595 = _1424;
        _1596 = _1436;
        _1597 = _1435;
        _1598 = _1434;
        _1599 = _1446;
        _1600 = _1445;
        _1601 = _1444;
        _1602 = _1459;
        _1603 = _1458;
        _1604 = _1457;
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
    }
    else
    {
        _1593 = _1283;
        _1594 = _1283;
        _1595 = _1283;
        _1596 = _1283;
        _1597 = _1283;
        _1598 = _1283;
        _1599 = _1283;
        _1600 = _1283;
        _1601 = _1283;
        _1602 = _1283;
        _1603 = _1283;
        _1604 = _1283;
        _1605 = 0.0;
        _1606 = 0.0;
        _1607 = 0.0;
    }
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1295)) + _1295;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1296)) + _1296;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1297)) + _1297;
    float _1640 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1617));
    float _1661 = _892 * 0.5;
    float _1662 = _893 * 0.5;
    float _1663 = _894 * 0.5;
    float _1664 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1667 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1670 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1704;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1677 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1282, _1286, _1289, _1292));
        float _1681 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1685 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1692 = dot(vec4(cbModelParam._m0[39u]), vec4(_1661, _1662, _1663, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1715;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1706 = dot(vec4(cbModelParam._m0[40u]), vec4(_1661, _1662, _1663, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1719 = (_1715 * cbModelParam._m0[1u].x) + (_1704 * (1.0 - cbModelParam._m0[1u].x));
    float _1729 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _724);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1729 : min(cbModelParam._m0[25u].z, _1729));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1777 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1781 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1785 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1788 = fma(_894, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892));
        float _1791 = fma(_894, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892));
        float _1794 = fma(_894, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892));
        float _1822;
        if (_1788 > 0.0)
        {
            _1822 = abs((1.0 - _1777) / _1788);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1777 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1822 = frontier_phi_17_15_ladder;
        }
        float _2022;
        if (_1791 > 0.0)
        {
            _2022 = abs((1.0 - _1781) / _1791);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1781 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2022 = frontier_phi_26_22_ladder;
        }
        float _2265;
        if (_1794 > 0.0)
        {
            _2265 = abs((1.0 - _1785) / _1794);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1785 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2265 = frontier_phi_38_33_ladder;
        }
        float _2267 = isnan(_2022) ? _1822 : (isnan(_1822) ? _2022 : min(_1822, _2022));
        float _2268 = isnan(_2265) ? _2267 : (isnan(_2267) ? _2265 : min(_2267, _2265));
        float _2272 = (_2268 * _1788) + _1777;
        float _2273 = (_2268 * _1791) + _1781;
        float _2274 = (_2268 * _1794) + _1785;
        float _2275 = _2268 * 9.9999997473787516355514526367188e-05;
        float _2277 = (-1.0) - _2275;
        float _2279 = _2275 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2274 > _2279) || ((_2274 < _2277) || ((_2273 > _2279) || ((_2273 < _2277) || ((_2272 < _2277) || (_2272 > _2279))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2274, cbModelParam._m0[9u].z, fma(_2273, cbModelParam._m0[9u].y, _2272 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2274, cbModelParam._m0[10u].z, fma(_2273, cbModelParam._m0[10u].y, _2272 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2274, cbModelParam._m0[11u].z, fma(_2273, cbModelParam._m0[11u].y, _2272 * cbModelParam._m0[11u].x))), _1730);
            frontier_phi_16_38_ladder = _2398.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2398.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2398.x * cbModelParam._m0[1u].y;
        }
        _1810 = frontier_phi_16_38_ladder_2;
        _1812 = frontier_phi_16_38_ladder_1;
        _1814 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1798 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_892, _893, _894), _1730);
        _1810 = _1798.x * cbModelParam._m0[1u].y;
        _1812 = _1798.y * cbModelParam._m0[1u].y;
        _1814 = _1798.z * cbModelParam._m0[1u].y;
    }
    float _1818 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _724);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1818 : min(cbModelParam._m0[25u].w, _1818));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1872 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1876 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1880 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1883 = fma(_894, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892));
        float _1886 = fma(_894, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892));
        float _1889 = fma(_894, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892));
        float _2027;
        if (_1883 > 0.0)
        {
            _2027 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2027 = frontier_phi_28_24_ladder;
        }
        float _2292;
        if (_1886 > 0.0)
        {
            _2292 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2292 = frontier_phi_40_35_ladder;
        }
        float _2497;
        if (_1889 > 0.0)
        {
            _2497 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2497 = frontier_phi_49_46_ladder;
        }
        float _2499 = isnan(_2292) ? _2027 : (isnan(_2027) ? _2292 : min(_2027, _2292));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _1883) + _1872;
        float _2505 = (_2500 * _1886) + _1876;
        float _2506 = (_2500 * _1889) + _1880;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2508 = (-1.0) - _2507;
        float _2510 = _2507 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2506 > _2510) || ((_2506 < _2508) || ((_2505 > _2510) || ((_2505 < _2508) || ((_2504 < _2508) || (_2504 > _2510))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2506, cbModelParam._m0[17u].z, fma(_2505, cbModelParam._m0[17u].y, _2504 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2506, cbModelParam._m0[18u].z, fma(_2505, cbModelParam._m0[18u].y, _2504 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2506, cbModelParam._m0[19u].z, fma(_2505, cbModelParam._m0[19u].y, _2504 * cbModelParam._m0[19u].x))), _1819);
            frontier_phi_25_49_ladder = _2705.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2705.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2705.x * cbModelParam._m0[1u].z;
        }
        _1908 = frontier_phi_25_49_ladder_2;
        _1910 = frontier_phi_25_49_ladder_1;
        _1912 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_892, _893, _894), _1819);
        _1908 = _1892.x * cbModelParam._m0[1u].z;
        _1910 = _1892.y * cbModelParam._m0[1u].z;
        _1912 = _1892.z * cbModelParam._m0[1u].z;
    }
    float _1924 = ((((1.0 - _913) * ((_900 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_913 * _900)) * _884;
    float _1925 = _1924 * ((cbModelParam._m0[1u].w * (_1908 - _1810)) + _1810);
    float _1926 = _1924 * ((cbModelParam._m0[1u].w * (_1910 - _1812)) + _1812);
    float _1927 = _1924 * ((cbModelParam._m0[1u].w * (_1912 - _1814)) + _1814);
    float _1930 = fma(_1927, cbSceneParam._m0[89u].z, fma(_1926, cbSceneParam._m0[89u].y, _1925 * cbSceneParam._m0[89u].x));
    float _1933 = fma(_1927, cbSceneParam._m0[90u].z, fma(_1926, cbSceneParam._m0[90u].y, _1925 * cbSceneParam._m0[90u].x));
    float _1936 = fma(_1927, cbSceneParam._m0[91u].z, fma(_1926, cbSceneParam._m0[91u].y, _1925 * cbSceneParam._m0[91u].x));
    uvec4 _1946 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1948 = _1946.x * 14u;
    uint _1949 = _1948 + 13u;
    float _1956 = _884 + (-1.0);
    float _1961 = (cbLight._m0[_1949].x * _1956) + 1.0;
    float _1962 = (cbLight._m0[_1949].y * _1956) + 1.0;
    float _1963 = (cbLight._m0[_1949].z * _1956) + 1.0;
    float _1964 = (cbLight._m0[_1949].w * _1956) + 1.0;
    uint _1965 = _1948 + 5u;
    float _1971 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
    uint _1975 = _1948 + 4u;
    float _1981 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
    uint _1985 = _1948 | 1u;
    float _1996 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_721, _722, _723));
    float _1999 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_721, _722, _723));
    float _4196 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _4207 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2004 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.3183098733425140380859375;
    float _2006 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * 0.3183098733425140380859375;
    float _2013 = ((cbLight._m0[_1965].x * _1971) * _2006) + ((cbLight._m0[_1975].x * _1981) * _2004);
    float _2014 = ((_1971 * cbLight._m0[_1965].y) * _2006) + ((_1981 * cbLight._m0[_1975].y) * _2004);
    float _2015 = ((_1971 * cbLight._m0[_1965].z) * _2006) + ((_1981 * cbLight._m0[_1975].z) * _2004);
    uvec4 _2019 = floatBitsToUint(cbLight._m0[_1948 + 12u]);
    bool _2021 = _2019.x == 0u;
    float _2032;
    float _2034;
    float _2036;
    if (_2021)
    {
        _2032 = _2013;
        _2034 = _2014;
        _2036 = _2015;
    }
    else
    {
        uint _2040 = _1948 + 6u;
        float _2056 = (dot(vec3(cbLight._m0[_1948 + 2u].xyz), vec3(_721, _722, _723)) * 0.5) + 0.5;
        float _2057 = _2056 * _2056;
        float _4218 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2058 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2059 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2032 = (((cbLight._m0[_2040].x * 0.3183098733425140380859375) * _2058) * _2059) + _2013;
        _2034 = (((cbLight._m0[_2040].y * 0.3183098733425140380859375) * _2058) * _2059) + _2014;
        _2036 = (((cbLight._m0[_2040].z * 0.3183098733425140380859375) * _2058) * _2059) + _2015;
    }
    bool _2039 = _2019.y == 0u;
    float _2077;
    float _2079;
    float _2081;
    if (_2039)
    {
        _2077 = _2032;
        _2079 = _2034;
        _2081 = _2036;
    }
    else
    {
        uint _2236 = _1948 + 7u;
        float _2252 = (dot(vec3(cbLight._m0[_1948 + 3u].xyz), vec3(_721, _722, _723)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4234 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2255 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2077 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2032;
        _2079 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2034;
        _2081 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2036;
    }
    uint _2084 = _1948 + 8u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _724) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1948].x + _801;
    float _2100 = cbLight._m0[_1948].y + _802;
    float _2101 = cbLight._m0[_1948].z + _803;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_721, _722, _723), vec3(cbLight._m0[_1948].xyz));
    float _4250 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2113 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2114 = dot(vec3(_721, _722, _723), vec3(_2106, _2107, _2108));
    float _4272 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_2106, _2107, _2108));
    float _4283 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2098 * _2098;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2137 = (exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2138 = 1.0 - _2098;
    float _2149 = (0.5 / (((_2113 * ((_2112 * _2138) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2138) + _2098) * _2112))) * _2112;
    float _4294 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    uint _2162 = _1948 + 9u;
    float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _724) * 0.949999988079071044921875);
    float _2174 = _2173 * _2173;
    float _2175 = cbLight._m0[_1985].x + _801;
    float _2176 = cbLight._m0[_1985].y + _802;
    float _2177 = cbLight._m0[_1985].z + _803;
    float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
    float _2182 = _2181 * _2175;
    float _2183 = _2181 * _2176;
    float _2184 = _2181 * _2177;
    float _2185 = dot(vec3(_721, _722, _723), vec3(cbLight._m0[_1985].xyz));
    float _4305 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2189 = dot(vec3(_721, _722, _723), vec3(_2182, _2183, _2184));
    float _4316 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2182, _2183, _2184));
    float _4327 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2174 * _2174;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2210 = (exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2211 = 1.0 - _2174;
    float _2221 = (0.5 / (((_2113 * ((_2188 * _2211) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2211) + _2174) * _2188))) * _2188;
    float _4338 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2223 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    float _2233 = (((_2210 * cbLight._m0[_2162].x) * _2223) * _1971) + (((_2137 * cbLight._m0[_2084].x) * _2151) * _1981);
    float _2234 = (((_2210 * cbLight._m0[_2162].y) * _2223) * _1971) + (((_2137 * cbLight._m0[_2084].y) * _2151) * _1981);
    float _2235 = (((_2210 * cbLight._m0[_2162].z) * _2223) * _1971) + (((_2137 * cbLight._m0[_2084].z) * _2151) * _1981);
    float _2297;
    float _2299;
    float _2301;
    if (_2021)
    {
        _2297 = _2233;
        _2299 = _2234;
        _2301 = _2235;
    }
    else
    {
        uint _2303 = _1948 + 2u;
        uint _2307 = _1948 + 10u;
        float _2321 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _724) * 0.949999988079071044921875);
        float _2322 = _2321 * _2321;
        float _2323 = cbLight._m0[_2303].x + _801;
        float _2324 = cbLight._m0[_2303].y + _802;
        float _2325 = cbLight._m0[_2303].z + _803;
        float _2329 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
        float _2330 = _2329 * _2323;
        float _2331 = _2329 * _2324;
        float _2332 = _2329 * _2325;
        float _2333 = dot(vec3(_721, _722, _723), vec3(cbLight._m0[_2303].xyz));
        float _4349 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2336 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2337 = dot(vec3(_721, _722, _723), vec3(_2330, _2331, _2332));
        float _4360 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2341 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2330, _2331, _2332));
        float _4371 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2345 = _2322 * _2322;
        float _2349 = ((_2340 * _2340) * (_2345 + (-1.0))) + 1.0;
        float _2358 = (exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2359 = 1.0 - _2322;
        float _2369 = (0.5 / (((_2113 * ((_2336 * _2359) + _2322)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2359) + _2322) * _2336))) * _2336;
        float _4382 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2371 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2345 / ((_2349 * _2349) * 3.141590118408203125));
        float _2372 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2297 = (((_2358 * cbLight._m0[_2307].x) * _2371) * _2372) + _2233;
        _2299 = (((_2358 * cbLight._m0[_2307].y) * _2371) * _2372) + _2234;
        _2301 = (((_2358 * cbLight._m0[_2307].z) * _2371) * _2372) + _2235;
    }
    float _2407;
    float _2409;
    float _2411;
    if (_2039)
    {
        _2407 = _2297;
        _2409 = _2299;
        _2411 = _2301;
    }
    else
    {
        uint _2418 = _1948 + 3u;
        uint _2422 = _1948 + 11u;
        float _2436 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2418].w)) * _724) * 0.949999988079071044921875);
        float _2437 = _2436 * _2436;
        float _2438 = cbLight._m0[_2418].x + _801;
        float _2439 = cbLight._m0[_2418].y + _802;
        float _2440 = cbLight._m0[_2418].z + _803;
        float _2444 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
        float _2445 = _2444 * _2438;
        float _2446 = _2444 * _2439;
        float _2447 = _2444 * _2440;
        float _2448 = dot(vec3(_721, _722, _723), vec3(cbLight._m0[_2418].xyz));
        float _4398 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2451 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2452 = dot(vec3(_721, _722, _723), vec3(_2445, _2446, _2447));
        float _4409 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2456 = dot(vec3(cbLight._m0[_2418].xyz), vec3(_2445, _2446, _2447));
        float _4420 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2460 = _2437 * _2437;
        float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
        float _2473 = (exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2474 = 1.0 - _2437;
        float _2484 = (0.5 / (((_2113 * ((_2451 * _2474) + _2437)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2474) + _2437) * _2451))) * _2451;
        float _4431 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2486 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
        float _2487 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2407 = (((_2473 * cbLight._m0[_2422].x) * _2486) * _2487) + _2297;
        _2409 = (((_2473 * cbLight._m0[_2422].y) * _2486) * _2487) + _2299;
        _2411 = (((_2473 * cbLight._m0[_2422].z) * _2486) * _2487) + _2301;
    }
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    if (_1946.y == 0u)
    {
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2562;
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2562;
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2562;
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.x;
        uint _2589 = uint((float(_2577.y) * floor(float(uint(cbSceneParam._m0[85u].y * _822) / _2578))) + floor(float(uint(cbSceneParam._m0[85u].x * _821) / _2578)));
        float _2599 = (log2(_2565 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2600 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        uint _2603 = uint(isnan(14.0) ? _2600 : (isnan(_2600) ? 14.0 : min(_2600, 14.0)));
        uvec4 _2608 = texelFetch(g_lightClusterGridBuffer, int(((_2603 << 2u) + (_2589 << 6u)) >> 2u));
        uint _2609 = _2608.x;
        uint _2610 = _2577.z;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        if (((((1u << ((_2610 >> 4u) & 15u)) + 4294967295u) & _2609) == 0u) || ((_2610 & 240u) == 0u))
        {
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
        }
        else
        {
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            uint _2869 = 0u;
            uint _2878;
            bool _2879;
            for (;;)
            {
                _2878 = texelFetch(g_lightClassification, int((((_2603 << 5u) + (_2589 << 9u)) + (_2869 << 2u)) >> 2u)).x;
                _2879 = _2878 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2879)
                {
                    frontier_phi_66_pred = _2863;
                    frontier_phi_66_pred_1 = _2868;
                    frontier_phi_66_pred_2 = _2867;
                    frontier_phi_66_pred_3 = _2866;
                    frontier_phi_66_pred_4 = _2865;
                    frontier_phi_66_pred_5 = _2864;
                }
                else
                {
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    uint _3014;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2878;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    for (;;)
                    {
                        uint _3018 = uint(findLSB(_3014)) + (_2869 << 5u);
                        uint _3015 = (_3014 + 4294967295u) & _3014;
                        uint _3020 = _3018 * 48u;
                        vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 3u)).x));
                        uint _3040 = (_3018 * 48u) + 4u;
                        vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 3u)).x));
                        uint _3059 = (_3018 * 48u) + 8u;
                        vec3 _3070 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x));
                        float _3074 = _3034.x - _2563;
                        float _3075 = _3034.y - _2564;
                        float _3076 = _3034.z - _2565;
                        float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                        float _3080 = inversesqrt(_3077);
                        float _3081 = _3080 * _3074;
                        float _3082 = _3080 * _3075;
                        float _3083 = _3080 * _3076;
                        float _3084 = dot(vec3(_840, _843, _846), vec3(_3081, _3082, _3083));
                        float _3089 = 1.0 - (_3077 * _3034.w);
                        float _4457 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3090 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3091 = sqrt(_3077) * _3053.w;
                        float _3094 = 1.39999997615814208984375 / (_3091 + 1.39999997615814208984375);
                        float _3095 = _3094 * _3094;
                        float _3098 = ((1.0 - _3095) * _3084) + _3095;
                        float _3101 = _3091 * _3091;
                        float _3105 = ((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3090) / ((_3101 * 0.699999988079071044921875) + 1.0);
                        float _3109 = (-0.0) - _2563;
                        float _3110 = (-0.0) - _2564;
                        float _3111 = (-0.0) - _2565;
                        float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                        float _3116 = _3115 * _3109;
                        float _3117 = _3115 * _3110;
                        float _3118 = _3115 * _3111;
                        float _3126 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                        float _3127 = 1.0 - _900;
                        float _3134 = sqrt(1.0 - ((1.0 - (_3127 * _3127)) * (1.0 - (_3126 * _3126))));
                        float _3135 = _3134 * _3134;
                        float _3136 = _3135 * _3135;
                        float _3137 = _3116 + _3081;
                        float _3138 = _3117 + _3082;
                        float _3139 = _3118 + _3083;
                        float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                        float _3147 = dot(vec3(_840, _843, _846), vec3(_3116, _3117, _3118));
                        float _4473 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3151 = dot(vec3(_840, _843, _846), vec3(_3143 * _3137, _3143 * _3138, _3143 * _3139));
                        float _4484 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3158 = ((_3154 * _3154) * (_3136 + (-1.0))) + 1.0;
                        float _3159 = _3094 * _3135;
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3084) + _3160;
                        float _4495 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3164 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3165 = 1.0 - _3135;
                        float _3175 = (0.5 / (((_3164 * ((_3150 * _3165) + _3135)) + 9.9999999392252902907785028219223e-09) + (((_3164 * _3165) + _3135) * _3150))) * _3164;
                        float _4506 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3186 = (((_3136 * 3.1415927410125732421875) * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) / ((_3158 * _3158) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125))) * _3090;
                        _2938 = (_3105 * _3053.x) + _3011;
                        _2939 = (_3105 * _3053.y) + _3012;
                        _2940 = (_3105 * _3053.z) + _3013;
                        _2935 = (_3186 * _3070.x) + _3008;
                        _2936 = (_3186 * _3070.y) + _3009;
                        _2937 = (_3186 * _3070.z) + _3010;
                        if (_3015 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _3015;
                        }
                    }
                    frontier_phi_66_pred = _2935;
                    frontier_phi_66_pred_1 = _2940;
                    frontier_phi_66_pred_2 = _2939;
                    frontier_phi_66_pred_3 = _2938;
                    frontier_phi_66_pred_4 = _2937;
                    frontier_phi_66_pred_5 = _2936;
                }
                _2711 = frontier_phi_66_pred;
                _2721 = frontier_phi_66_pred_1;
                _2719 = frontier_phi_66_pred_2;
                _2717 = frontier_phi_66_pred_3;
                _2715 = frontier_phi_66_pred_4;
                _2713 = frontier_phi_66_pred_5;
                uint _2870 = _2869 + 1u;
                if (_2870 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2863 = _2711;
                    _2864 = _2713;
                    _2865 = _2715;
                    _2866 = _2717;
                    _2867 = _2719;
                    _2868 = _2721;
                    _2869 = _2870;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
        }
        uvec4 _2724 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2725 = _2724.z;
        uint _2727 = (_2725 >> 8u) & 15u;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        if (((4294967295u << _2727) & _2609) == 0u)
        {
            _2831 = _2710;
            _2833 = _2712;
            _2835 = _2714;
            _2837 = _2716;
            _2839 = _2718;
            _2841 = _2720;
        }
        else
        {
            float _2856 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
            float _2857 = _2856 * _2563;
            float _2858 = _2856 * _2564;
            float _2859 = _2856 * _2565;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2727 < ((_2725 >> 12u) & 15u))
            {
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2991 = _2710;
                float _2992 = _2712;
                float _2993 = _2714;
                float _2994 = _2716;
                float _2995 = _2718;
                float _2996 = _2720;
                uint _2997 = _2727;
                uint _3006;
                bool _3007;
                for (;;)
                {
                    _3006 = texelFetch(g_lightClassification, int((((_2603 << 5u) + (_2589 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                    _3007 = _3006 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3007)
                    {
                        frontier_phi_77_pred = _2996;
                        frontier_phi_77_pred_1 = _2995;
                        frontier_phi_77_pred_2 = _2994;
                        frontier_phi_77_pred_3 = _2993;
                        frontier_phi_77_pred_4 = _2992;
                        frontier_phi_77_pred_5 = _2991;
                    }
                    else
                    {
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3213 = _2991;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        float _3216 = _2994;
                        float _3217 = _2995;
                        float _3218 = _2996;
                        uint _3219 = _3006;
                        uint _3220;
                        vec4 _3245;
                        float _3246;
                        vec4 _3261;
                        vec3 _3273;
                        vec4 _3288;
                        vec4 _3303;
                        float _3349;
                        bool _3350;
                        for (;;)
                        {
                            uint _3230 = ((_2997 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3219));
                            _3220 = (_3219 + 4294967295u) & _3219;
                            uint _3232 = _3230 * 40u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            _3246 = _3245.w;
                            uint _3248 = (_3230 * 40u) + 4u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3230 * 40u) + 8u;
                            _3273 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x));
                            uint _3275 = (_3230 * 40u) + 16u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3290 = (_3230 * 40u) + 20u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3305 = (_3230 * 40u) + 24u;
                            vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3324 = (_3230 * 40u) + 28u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            _3349 = fma(_2565, _3337.z, fma(_2564, _3337.y, _3337.x * _2563)) + _3337.w;
                            _3350 = !((fma(_2565, _3318.z, fma(_2564, _3318.y, _3318.x * _2563)) + _3318.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3350)
                            {
                                float _3377 = _3245.x - _2563;
                                float _3378 = _3245.y - _2564;
                                float _3379 = _3245.z - _2565;
                                float _3380 = dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379));
                                float _3383 = inversesqrt(_3380);
                                float _3384 = _3383 * _3377;
                                float _3385 = _3383 * _3378;
                                float _3386 = _3383 * _3379;
                                float _3390 = 1.0 - (_3380 / (_3246 * _3246));
                                float _4517 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3395 = sqrt(_3380) * _3261.w;
                                float _3397 = 1.39999997615814208984375 / (_3395 + 1.39999997615814208984375);
                                float _3398 = _3397 * _3397;
                                float _3401 = ((1.0 - _3398) * dot(vec3(_3384, _3385, _3386), vec3(_840, _843, _846))) + _3398;
                                float _3404 = _3395 * _3395;
                                float _3408 = (fma(_2565, _3288.z, fma(_2564, _3288.y, _3288.x * _2563)) + _3288.w) / _3349;
                                float _3409 = (fma(_2565, _3303.z, fma(_2564, _3303.y, _3303.x * _2563)) + _3303.w) / _3349;
                                float _3413 = 1.0 - dot(vec2(_3408, _3409), vec2(_3408, _3409));
                                float _4533 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3414 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3415 = _3414 * (((isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0))) * _3391) / ((_3404 * 0.699999988079071044921875) + 1.0));
                                float _3427 = exp2(log2(1.0 / ((_3404 * 3.5) + 5.0)) * 0.25);
                                float _3428 = 1.0 - _900;
                                float _3435 = sqrt(1.0 - ((1.0 - (_3428 * _3428)) * (1.0 - (_3427 * _3427))));
                                float _3436 = _3435 * _3435;
                                float _3437 = _3436 * _3436;
                                float _3438 = _3384 - _2857;
                                float _3439 = _3385 - _2858;
                                float _3440 = _3386 - _2859;
                                float _3444 = inversesqrt(dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440)));
                                float _3448 = dot(vec3(_840, _843, _846), vec3((-0.0) - _2857, (-0.0) - _2858, (-0.0) - _2859));
                                float _4544 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3451 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3452 = dot(vec3(_840, _843, _846), vec3(_3444 * _3438, _3444 * _3439, _3444 * _3440));
                                float _4555 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3455 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3459 = ((_3455 * _3455) * (_3437 + (-1.0))) + 1.0;
                                float _3460 = _3397 * _3436;
                                float _3461 = _3460 * _3460;
                                float _3467 = ((1.0 - _3461) * dot(vec3(_840, _843, _846), vec3(_3384, _3385, _3386))) + _3461;
                                float _4566 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3469 = 1.0 - _3436;
                                float _3479 = (0.5 / (((_3468 * ((_3451 * _3469) + _3436)) + 9.9999999392252902907785028219223e-09) + (((_3468 * _3469) + _3436) * _3451))) * _3468;
                                float _4577 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3489 = (_3414 * _3391) * (((_3437 * 3.1415927410125732421875) * (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) / ((_3459 * _3459) * ((_3404 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3415 * _3261.y;
                                frontier_phi_83_pred_1 = _3415 * _3261.x;
                                frontier_phi_83_pred_2 = _3489 * _3273.z;
                                frontier_phi_83_pred_3 = _3489 * _3273.y;
                                frontier_phi_83_pred_4 = _3489 * _3273.x;
                                frontier_phi_83_pred_5 = _3415 * _3261.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3497 = frontier_phi_83_pred;
                            _3496 = frontier_phi_83_pred_1;
                            _3495 = frontier_phi_83_pred_2;
                            _3494 = frontier_phi_83_pred_3;
                            _3493 = frontier_phi_83_pred_4;
                            _3498 = frontier_phi_83_pred_5;
                            _3203 = _3496 + _3216;
                            _3204 = _3497 + _3217;
                            _3205 = _3498 + _3218;
                            _3200 = _3493 + _3213;
                            _3201 = _3494 + _3214;
                            _3202 = _3495 + _3215;
                            if (_3220 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3220;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3205;
                        frontier_phi_77_pred_1 = _3204;
                        frontier_phi_77_pred_2 = _3203;
                        frontier_phi_77_pred_3 = _3202;
                        frontier_phi_77_pred_4 = _3201;
                        frontier_phi_77_pred_5 = _3200;
                    }
                    _2842 = frontier_phi_77_pred;
                    _2840 = frontier_phi_77_pred_1;
                    _2838 = frontier_phi_77_pred_2;
                    _2836 = frontier_phi_77_pred_3;
                    _2834 = frontier_phi_77_pred_4;
                    _2832 = frontier_phi_77_pred_5;
                    uint _2998 = _2997 + 1u;
                    if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2991 = _2832;
                        _2992 = _2834;
                        _2993 = _2836;
                        _2994 = _2838;
                        _2995 = _2840;
                        _2996 = _2842;
                        _2997 = _2998;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2836;
                frontier_phi_58_59_ladder_1 = _2842;
                frontier_phi_58_59_ladder_2 = _2840;
                frontier_phi_58_59_ladder_3 = _2838;
                frontier_phi_58_59_ladder_4 = _2834;
                frontier_phi_58_59_ladder_5 = _2832;
            }
            else
            {
                frontier_phi_58_59_ladder = _2714;
                frontier_phi_58_59_ladder_1 = _2720;
                frontier_phi_58_59_ladder_2 = _2718;
                frontier_phi_58_59_ladder_3 = _2716;
                frontier_phi_58_59_ladder_4 = _2712;
                frontier_phi_58_59_ladder_5 = _2710;
            }
            _2831 = frontier_phi_58_59_ladder_5;
            _2833 = frontier_phi_58_59_ladder_4;
            _2835 = frontier_phi_58_59_ladder;
            _2837 = frontier_phi_58_59_ladder_3;
            _2839 = frontier_phi_58_59_ladder_2;
            _2841 = frontier_phi_58_59_ladder_1;
        }
        float _2846 = isnan(1.0) ? _884 : (isnan(_884) ? 1.0 : min(_884, 1.0));
        _2622 = (_2846 * _2837) + _2077;
        _2624 = (_2846 * _2839) + _2079;
        _2626 = (_2846 * _2841) + _2081;
        _2628 = ((_2831 * 0.039999999105930328369140625) * _2846) + _2407;
        _2630 = ((_2833 * 0.039999999105930328369140625) * _2846) + _2409;
        _2632 = ((_2835 * 0.039999999105930328369140625) * _2846) + _2411;
    }
    else
    {
        _2622 = _2077;
        _2624 = _2079;
        _2626 = _2081;
        _2628 = _2407;
        _2630 = _2409;
        _2632 = _2411;
    }
    float _4593 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4604 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4615 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2649 = ((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2622 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _884))) + ((_2628 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    float _2650 = ((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2624 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _884))) + ((_2630 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    float _2651 = ((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2626 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _884))) + ((_2632 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    uint _2652 = _242 + 6u;
    float _2660 = _821 / cbSceneParam._m0[86u].x;
    float _2661 = _822 / cbSceneParam._m0[86u].y;
    vec4 _2675 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2660, _2661, (log2((isnan(cbSceneParam._m0[77u].w) ? _742 : (isnan(_742) ? cbSceneParam._m0[77u].w : min(_742, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2677 = _2675.x;
    float _2678 = _2675.y;
    float _2679 = _2675.z;
    float _2680 = _2675.w;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_742 > cbSceneParam._m0[78u].w)
    {
        float _2735 = isnan(_742) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _742 : min(cbSceneParam._m0[80u].w, _742));
        float _2736 = _2735 / _742;
        float _2747 = _2736 * _794;
        float _2748 = _795 * _2736;
        float _2749 = (-0.0) - _2748;
        float _2751 = _2736 * _796;
        float _2753 = (cbSceneParam._m0[77u].w * _2749) / _2735;
        float _2754 = _2753 + cbSceneParam._m0[79u].w;
        float _2755 = cbSceneParam._m0[79u].w - _2748;
        float _2761 = sqrt(((_2747 * _2747) + (_2748 * _2748)) + (_2751 * _2751));
        float _2764 = (1.0 - (cbSceneParam._m0[77u].w / _2735)) * _2761;
        float _2769 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2771 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2948;
        if (abs((_2749 - _2753) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2948 = ((((_2754 > 0.0) ? exp2(_2769 * _2754) : (2.0 - exp2(_2771 * _2754))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2764;
        }
        else
        {
            float _2892 = 1.0 / cbSceneParam._m0[80u].x;
            float _2893 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : max(_2754, _2755));
            float _2894 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : min(_2754, _2755));
            float _2903 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : min(_2893, 0.0));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            _2948 = ((abs(_2761 / _2749) * cbSceneParam._m0[80u].y) * ((((_2903 - _2904) * 2.0) - ((exp2(_2769 * (isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0)))) - exp2(_2769 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))))) * _2892)) - ((exp2(_2771 * _2903) - exp2(_2771 * _2904)) * _2892))) + (_2764 * cbSceneParam._m0[80u].z);
        }
        vec4 _2950 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2660, _2661, 1.0), 0.0);
        float _2959 = exp2((_2948 * (-1.44269502162933349609375)) * (1.0 - _2950.w));
        float _2960 = log2(_2959);
        float _2976 = log2(_2680);
        _2773 = (exp2(_2976 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].x)) * _2950.x) / cbSceneParam._m0[78u].x)) + _2677;
        _2775 = (exp2(_2976 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].y)) * _2950.y) / cbSceneParam._m0[78u].y)) + _2678;
        _2777 = (exp2(_2976 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].z)) * _2950.z) / cbSceneParam._m0[78u].z)) + _2679;
        _2779 = _2959 * _2680;
    }
    else
    {
        _2773 = _2677;
        _2775 = _2678;
        _2777 = _2679;
        _2779 = _2680;
    }
    bool _2986;
    vec4 _2789;
    vec4 _2811;
    float _2813;
    float _2817;
    float _2818;
    float _2819;
    float _2820;
    bool _2830;
    for (;;)
    {
        _2789 = cbMatDynParam._m0[0u];
        float _2791 = roundEven(_2789.y);
        bool _2792 = _2791 == 3.0;
        float _2793 = log2(_2779);
        float _2800 = exp2(_2793 * cbSceneParam._m0[78u].x) * _2649;
        float _2801 = exp2(_2793 * cbSceneParam._m0[78u].y) * _2650;
        float _2802 = exp2(_2793 * cbSceneParam._m0[78u].z) * _2651;
        float _2809 = _810 + (-0.5);
        _2811 = cbMtdParam._m0[1u];
        _2813 = _2811.y * _2809;
        float _2816 = (_2791 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2817 = _2816 * (_2792 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2773)));
        _2818 = _2816 * (_2792 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2775)));
        _2819 = _2816 * (_2792 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2777)));
        _2820 = _2809 * 0.999000012874603271484375;
        _2830 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2830)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _2820) < 0.5)
            {
                _2986 = true;
                break;
            }
        }
        uint _2927 = _859 + uint(_2789.w);
        if ((cbInstanceData._m0[_2927].w < 1.0) && ((cbInstanceData._m0[_2927].w + _2820) < 0.5))
        {
            _2986 = true;
            break;
        }
        if ((_2813 + 1.0) < _2811.x)
        {
            _2986 = true;
            break;
        }
        _2986 = false;
        break;
    }
    float _3191;
    if (_2986)
    {
        discard_state = true;
        _3191 = 0.0;
    }
    else
    {
        _3191 = cbInstanceData._m0[_2652].w;
    }
    SV_Target.x = _2817;
    SV_Target.y = _2818;
    SV_Target.z = _2819;
    SV_Target.w = _3191;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2652].w;
    discard_exit();
}


