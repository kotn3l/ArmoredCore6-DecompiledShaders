#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1276;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _379 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _396 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_367 - _379) * cbMtdParam._m0[24u].z) + _379) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3580 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _404 = (_397 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _405 = (_397 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _406 = (_397 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _462 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _464 = _462.x;
    float _465 = _462.y;
    float _466 = _462.z;
    float _475 = ((_445.z - _466) * _397) + _466;
    float _478 = ((((_445.x - _464) * _397) + _464) * 2.0) + (-1.0);
    float _480 = ((((_445.y - _465) * _397) + _465) * 2.0) + (-1.0);
    float _481 = dot(vec2(_478, _480), vec2(_478, _480));
    float _3591 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _514 = (((_502.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _478;
    float _515 = (((_502.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _480;
    float _518 = fma(_486, _233, fma(_515, _240, _514 * _226));
    float _521 = fma(_486, _234, fma(_515, _241, _514 * _227));
    float _524 = fma(_486, _235, fma(_515, _242, _514 * _228));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _557 = _555.x;
    float _558 = 1.0 - _557;
    float _564 = (cbMtdParam._m0[19u].x + dot(vec4(_528 * _518, _528 * _521, _528 * _524, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_557 - _558) * cbMtdParam._m0[24u].w) + _558) * cbMtdParam._m0[21u].z);
    float _3602 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _567 = (-0.0) - cbMtdParam._m0[24u].x;
    float _569 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _569 : (isnan(_569) ? 1.0 : min(_569, 1.0));
    float _577 = _565 - ((_565 * TEXCOORD_8.x) * _570);
    float _578 = _565 - ((_565 * TEXCOORD_8.y) * _570);
    float _579 = _565 - ((_565 * TEXCOORD_8.z) * _570);
    float _586 = (_577 * ((_425.x * cbMtdParam._m0[18u].x) - _404)) + _404;
    float _587 = (_578 * ((_425.y * cbMtdParam._m0[18u].y) - _405)) + _405;
    float _588 = (_579 * ((_425.z * cbMtdParam._m0[18u].z) - _406)) + _406;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _602 = _600.x;
    float _603 = 1.0 - _602;
    float _631 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_602 - _603) * cbMtdParam._m0[24u].y) + _603) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3623 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _640 = ((((cbMtdParam._m0[10u].x - _586) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _632) + _586;
    float _641 = ((((cbMtdParam._m0[10u].y - _587) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _632) + _587;
    float _642 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _588)) * _632) + _588;
    float _646 = (cbMtdParam._m0[19u].w * (_502.z - _475)) + _475;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _667 = (_660.x * 2.0) + (-1.0);
    float _668 = (_660.y * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _3634 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _677 = ((_660.z - _646) * _577) + _646;
    float _680 = ((cbMtdParam._m0[23u].y - _677) * _632) + _677;
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _705 = (_699.x * 2.0) + (-1.0);
    float _706 = (_699.y * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _3645 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _722 = ((sqrt(1.0 - (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) - _486) * _579) + _486;
    float _725 = (((_667 - _514) * _577) + _514) + (cbMtdParam._m0[21u].x * _514);
    float _726 = (((_668 - _515) * _578) + _515) + (cbMtdParam._m0[21u].x * _515);
    float _737 = (((_705 - _725) + (_725 * cbMtdParam._m0[22u].z)) * _632) + _725;
    float _738 = (((_706 - _726) + (_726 * cbMtdParam._m0[22u].z)) * _632) + _726;
    float _739 = (_632 * (sqrt(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) - _722)) + _722;
    float _741 = cbMtdParam._m0[22u].x + _502.w;
    float _744 = fma(_739, _233, fma(_738, _240, _737 * _226));
    float _747 = fma(_739, _234, fma(_738, _241, _737 * _227));
    float _750 = fma(_739, _235, fma(_738, _242, _737 * _228));
    float _754 = inversesqrt(dot(vec3(_744, _747, _750), vec3(_744, _747, _750)));
    float _755 = _754 * _744;
    float _756 = _754 * _747;
    float _757 = _754 * _750;
    float _3656 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _758 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3678 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3689 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3700 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _776 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _827 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _817);
    float _828 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _817);
    float _829 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _817);
    float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
    float _834 = _827 * _833;
    float _835 = _828 * _833;
    float _836 = _829 * _833;
    float _842 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _843 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _861 = fma(_757, cbSceneParam._m0[5u].z, fma(_756, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _755));
    float _864 = fma(_757, cbSceneParam._m0[6u].z, fma(_756, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _755));
    float _867 = fma(_757, cbSceneParam._m0[7u].z, fma(_756, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _755));
    uint _881 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _887 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * cbInstanceData._m0[_881].x;
    float _888 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * cbInstanceData._m0[_881].y;
    float _889 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * cbInstanceData._m0[_881].z;
    float _3711 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _3722 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    vec4 _901 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _842, cbSceneParam._m0[86u].y * _843));
    float _905 = ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * TEXCOORD_5.w) * _901.x;
    float _906 = dot(vec3(_755, _756, _757), vec3(_834, _835, _836));
    float _909 = _906 * 2.0;
    float _913 = (_909 * _755) - _834;
    float _914 = (_909 * _756) - _835;
    float _915 = (_909 * _757) - _836;
    float _919 = abs(dot(vec3(_834, _835, _836), vec3(_755, _756, _757)));
    float _3744 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _921 = sqrt(_758);
    float _934 = exp2((_921 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_921 * 3.0));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1275;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1000 = fma(_974, cbModelParam._m0[26u].z, fma(_970, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _966));
        float _1004 = fma(_974, cbModelParam._m0[27u].z, fma(_970, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _966));
        float _1008 = fma(_974, cbModelParam._m0[28u].z, fma(_970, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _966));
        float _1033 = _966 + _755;
        float _1034 = _970 + _756;
        float _1035 = _974 + _757;
        float _1045 = fma(_1035, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033)) - _1000;
        float _1046 = fma(_1035, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033)) - _1004;
        float _1047 = fma(_1035, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033)) - _1008;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1000 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1004 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[34u].z) + ((((((_1008 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1103 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1069.x + (-0.5));
        float _1105 = _1103 * (_1069.y + (-0.5));
        float _1106 = _1103 * (_1069.z + (-0.5));
        float _1113 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1076.x + (-0.5));
        float _1115 = _1113 * (_1076.y + (-0.5));
        float _1116 = _1113 * (_1076.z + (-0.5));
        float _1123 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1083.x + (-0.5));
        float _1125 = _1123 * (_1083.y + (-0.5));
        float _1126 = _1123 * (_1083.z + (-0.5));
        float _1133 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1090.x + (-0.5));
        float _1135 = _1133 * (_1090.y + (-0.5));
        float _1136 = _1133 * (_1090.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1157 = (dot(vec3(_755, _756, _757), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1167 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3792 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1169 + 1.0))) + _1174) * _1137;
        float _1184 = _1105 * 0.5;
        float _1185 = _1115 * 0.5;
        float _1186 = _1125 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_755, _756, _757), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3825 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1211 + 1.0))) + _1216) * _1138;
        float _1226 = _1106 * 0.5;
        float _1227 = _1116 * 0.5;
        float _1228 = _1126 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_755, _756, _757), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3858 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1253 + 1.0))) + _1258) * _1139;
        _1275 = _1106;
        _1277 = _1105;
        _1278 = _1104;
        _1279 = _1116;
        _1280 = _1115;
        _1281 = _1114;
        _1282 = _1126;
        _1283 = _1125;
        _1284 = _1124;
        _1285 = _1139;
        _1286 = _1138;
        _1287 = _1137;
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _1276;
        _1277 = _1276;
        _1278 = _1276;
        _1279 = _1276;
        _1280 = _1276;
        _1281 = _1276;
        _1282 = _1276;
        _1283 = _1276;
        _1284 = _1276;
        _1285 = _1276;
        _1286 = _1276;
        _1287 = _1276;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1315 = fma(_974, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _966));
        float _1319 = fma(_974, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _966));
        float _1323 = fma(_974, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _966));
        float _1346 = _966 + _755;
        float _1347 = _970 + _756;
        float _1348 = _974 + _757;
        float _1358 = fma(_1348, cbModelParam._m0[30u].z, fma(_1347, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1346)) - _1315;
        float _1359 = fma(_1348, cbModelParam._m0[31u].z, fma(_1347, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1346)) - _1319;
        float _1360 = fma(_1348, cbModelParam._m0[32u].z, fma(_1347, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1346)) - _1323;
        float _1364 = inversesqrt(dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360)));
        float _1377 = ((_1364 * _1358) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1315 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1364 * _1359) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1319 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1364 * _1360) / cbModelParam._m0[35u].z) + ((((((_1323 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        float _1414 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1381.x + (-0.5));
        float _1416 = _1414 * (_1381.y + (-0.5));
        float _1417 = _1414 * (_1381.z + (-0.5));
        float _1424 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1388.x + (-0.5));
        float _1426 = _1424 * (_1388.y + (-0.5));
        float _1427 = _1424 * (_1388.z + (-0.5));
        float _1434 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1395.x + (-0.5));
        float _1436 = _1434 * (_1395.y + (-0.5));
        float _1437 = _1434 * (_1395.z + (-0.5));
        float _1444 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1402.x + (-0.5));
        float _1446 = _1444 * (_1402.y + (-0.5));
        float _1447 = _1444 * (_1402.z + (-0.5));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = _1415 * 0.5;
        float _1452 = _1425 * 0.5;
        float _1453 = _1435 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_755, _756, _757), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _3921 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1478 + 1.0))) + _1483) * _1448;
        float _1493 = _1416 * 0.5;
        float _1494 = _1426 * 0.5;
        float _1495 = _1436 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_755, _756, _757), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _3954 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1520 + 1.0))) + _1525) * _1449;
        float _1535 = _1417 * 0.5;
        float _1536 = _1427 * 0.5;
        float _1537 = _1437 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_755, _756, _757), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _3987 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1562 + 1.0))) + _1567) * _1450;
        _1584 = _1417;
        _1585 = _1416;
        _1586 = _1415;
        _1587 = _1427;
        _1588 = _1426;
        _1589 = _1425;
        _1590 = _1437;
        _1591 = _1436;
        _1592 = _1435;
        _1593 = _1450;
        _1594 = _1449;
        _1595 = _1448;
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
    }
    else
    {
        _1584 = _1276;
        _1585 = _1276;
        _1586 = _1276;
        _1587 = _1276;
        _1588 = _1276;
        _1589 = _1276;
        _1590 = _1276;
        _1591 = _1276;
        _1592 = _1276;
        _1593 = _1276;
        _1594 = _1276;
        _1595 = _1276;
        _1596 = 0.0;
        _1597 = 0.0;
        _1598 = 0.0;
    }
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1288)) + _1288;
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1289)) + _1289;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1290)) + _1290;
    float _1631 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1609, cbSceneParam._m0[89u].y, _1608 * cbSceneParam._m0[89u].x));
    float _1634 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1609, cbSceneParam._m0[90u].y, _1608 * cbSceneParam._m0[90u].x));
    float _1637 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1609, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1608));
    float _1652 = _913 * 0.5;
    float _1653 = _914 * 0.5;
    float _1654 = _915 * 0.5;
    float _1655 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1658 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1661 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1695;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1668 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1275, _1279, _1282, _1285));
        float _1672 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1676 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1683 = dot(vec4(cbModelParam._m0[39u]), vec4(_1652, _1653, _1654, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1683) ? 0.0 : (isnan(0.0) ? _1683 : max(0.0, _1683))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1706;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1697 = dot(vec4(cbModelParam._m0[40u]), vec4(_1652, _1653, _1654, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1710 = (_1706 * cbModelParam._m0[1u].x) + (_1695 * (1.0 - cbModelParam._m0[1u].x));
    float _1720 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _758);
    float _1721 = isnan(_1720) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1720 : min(cbModelParam._m0[25u].z, _1720));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1768 = fma(_974, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966)) + cbModelParam._m0[13u].w;
        float _1772 = fma(_974, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966)) + cbModelParam._m0[14u].w;
        float _1776 = fma(_974, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966)) + cbModelParam._m0[15u].w;
        float _1779 = fma(_915, cbModelParam._m0[13u].z, fma(_914, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _913));
        float _1782 = fma(_915, cbModelParam._m0[14u].z, fma(_914, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _913));
        float _1785 = fma(_915, cbModelParam._m0[15u].z, fma(_914, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _913));
        float _1813;
        if (_1779 > 0.0)
        {
            _1813 = abs((1.0 - _1768) / _1779);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1768 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1813 = frontier_phi_14_12_ladder;
        }
        float _2013;
        if (_1782 > 0.0)
        {
            _2013 = abs((1.0 - _1772) / _1782);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1772 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2013 = frontier_phi_23_19_ladder;
        }
        float _2256;
        if (_1785 > 0.0)
        {
            _2256 = abs((1.0 - _1776) / _1785);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1776 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2256 = frontier_phi_35_30_ladder;
        }
        float _2258 = isnan(_2013) ? _1813 : (isnan(_1813) ? _2013 : min(_1813, _2013));
        float _2259 = isnan(_2256) ? _2258 : (isnan(_2258) ? _2256 : min(_2258, _2256));
        float _2263 = (_2259 * _1779) + _1768;
        float _2264 = (_2259 * _1782) + _1772;
        float _2265 = (_2259 * _1785) + _1776;
        float _2266 = _2259 * 9.9999997473787516355514526367188e-05;
        float _2268 = (-1.0) - _2266;
        float _2270 = _2266 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2265 > _2270) || ((_2265 < _2268) || ((_2264 > _2270) || ((_2264 < _2268) || ((_2263 < _2268) || (_2263 > _2270))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2265, cbModelParam._m0[9u].z, fma(_2264, cbModelParam._m0[9u].y, _2263 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2265, cbModelParam._m0[10u].z, fma(_2264, cbModelParam._m0[10u].y, _2263 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2265, cbModelParam._m0[11u].z, fma(_2264, cbModelParam._m0[11u].y, _2263 * cbModelParam._m0[11u].x))), _1721);
            frontier_phi_13_35_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1801 = frontier_phi_13_35_ladder_2;
        _1803 = frontier_phi_13_35_ladder_1;
        _1805 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1789 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_913, _914, _915), _1721);
        _1801 = _1789.x * cbModelParam._m0[1u].y;
        _1803 = _1789.y * cbModelParam._m0[1u].y;
        _1805 = _1789.z * cbModelParam._m0[1u].y;
    }
    float _1809 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _758);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1809 : min(cbModelParam._m0[25u].w, _1809));
    float _1899;
    float _1901;
    float _1903;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1863 = fma(_974, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966)) + cbModelParam._m0[21u].w;
        float _1867 = fma(_974, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966)) + cbModelParam._m0[22u].w;
        float _1871 = fma(_974, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966)) + cbModelParam._m0[23u].w;
        float _1874 = fma(_915, cbModelParam._m0[21u].z, fma(_914, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _913));
        float _1877 = fma(_915, cbModelParam._m0[22u].z, fma(_914, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _913));
        float _1880 = fma(_915, cbModelParam._m0[23u].z, fma(_914, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _913));
        float _2018;
        if (_1874 > 0.0)
        {
            _2018 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2018 = frontier_phi_25_21_ladder;
        }
        float _2283;
        if (_1877 > 0.0)
        {
            _2283 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2283 = frontier_phi_37_32_ladder;
        }
        float _2488;
        if (_1880 > 0.0)
        {
            _2488 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2488 = frontier_phi_46_43_ladder;
        }
        float _2490 = isnan(_2283) ? _2018 : (isnan(_2018) ? _2283 : min(_2018, _2283));
        float _2491 = isnan(_2488) ? _2490 : (isnan(_2490) ? _2488 : min(_2490, _2488));
        float _2495 = (_2491 * _1874) + _1863;
        float _2496 = (_2491 * _1877) + _1867;
        float _2497 = (_2491 * _1880) + _1871;
        float _2498 = _2491 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2498;
        float _2501 = _2498 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2497 > _2501) || ((_2497 < _2499) || ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 < _2499) || (_2495 > _2501))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2497, cbModelParam._m0[17u].z, fma(_2496, cbModelParam._m0[17u].y, _2495 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2497, cbModelParam._m0[18u].z, fma(_2496, cbModelParam._m0[18u].y, _2495 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2497, cbModelParam._m0[19u].z, fma(_2496, cbModelParam._m0[19u].y, _2495 * cbModelParam._m0[19u].x))), _1810);
            frontier_phi_22_46_ladder = _2696.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2696.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2696.x * cbModelParam._m0[1u].z;
        }
        _1899 = frontier_phi_22_46_ladder_2;
        _1901 = frontier_phi_22_46_ladder_1;
        _1903 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1883 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_913, _914, _915), _1810);
        _1899 = _1883.x * cbModelParam._m0[1u].z;
        _1901 = _1883.y * cbModelParam._m0[1u].z;
        _1903 = _1883.z * cbModelParam._m0[1u].z;
    }
    float _1915 = ((((1.0 - _934) * ((_921 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_934 * _921)) * _905;
    float _1916 = _1915 * ((cbModelParam._m0[1u].w * (_1899 - _1801)) + _1801);
    float _1917 = _1915 * ((cbModelParam._m0[1u].w * (_1901 - _1803)) + _1803);
    float _1918 = _1915 * ((cbModelParam._m0[1u].w * (_1903 - _1805)) + _1805);
    float _1921 = fma(_1918, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1916 * cbSceneParam._m0[89u].x));
    float _1924 = fma(_1918, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1916 * cbSceneParam._m0[90u].x));
    float _1927 = fma(_1918, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, _1916 * cbSceneParam._m0[91u].x));
    uvec4 _1937 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1939 = _1937.x * 14u;
    uint _1940 = _1939 + 13u;
    float _1947 = _905 + (-1.0);
    float _1952 = (cbLight._m0[_1940].x * _1947) + 1.0;
    float _1953 = (cbLight._m0[_1940].y * _1947) + 1.0;
    float _1954 = (cbLight._m0[_1940].z * _1947) + 1.0;
    float _1955 = (cbLight._m0[_1940].w * _1947) + 1.0;
    uint _1956 = _1939 + 5u;
    float _1962 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1966 = _1939 + 4u;
    float _1972 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1976 = _1939 | 1u;
    float _1987 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_755, _756, _757));
    float _1990 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_755, _756, _757));
    float _4123 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _4134 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1995 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.3183098733425140380859375;
    float _1997 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.3183098733425140380859375;
    float _2004 = ((cbLight._m0[_1956].x * _1962) * _1997) + ((cbLight._m0[_1966].x * _1972) * _1995);
    float _2005 = ((_1962 * cbLight._m0[_1956].y) * _1997) + ((_1972 * cbLight._m0[_1966].y) * _1995);
    float _2006 = ((_1962 * cbLight._m0[_1956].z) * _1997) + ((_1972 * cbLight._m0[_1966].z) * _1995);
    uvec4 _2010 = floatBitsToUint(cbLight._m0[_1939 + 12u]);
    bool _2012 = _2010.x == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_2012)
    {
        _2023 = _2004;
        _2025 = _2005;
        _2027 = _2006;
    }
    else
    {
        uint _2031 = _1939 + 6u;
        float _2047 = (dot(vec3(cbLight._m0[_1939 + 2u].xyz), vec3(_755, _756, _757)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _4145 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2050 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2023 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _2004;
        _2025 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _2005;
        _2027 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _2006;
    }
    bool _2030 = _2010.y == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_2030)
    {
        _2068 = _2023;
        _2070 = _2025;
        _2072 = _2027;
    }
    else
    {
        uint _2227 = _1939 + 7u;
        float _2243 = (dot(vec3(cbLight._m0[_1939 + 3u].xyz), vec3(_755, _756, _757)) * 0.5) + 0.5;
        float _2244 = _2243 * _2243;
        float _4161 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2245 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2246 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2068 = (((cbLight._m0[_2227].x * 0.3183098733425140380859375) * _2245) * _2246) + _2023;
        _2070 = (((cbLight._m0[_2227].y * 0.3183098733425140380859375) * _2245) * _2246) + _2025;
        _2072 = (((cbLight._m0[_2227].z * 0.3183098733425140380859375) * _2245) * _2246) + _2027;
    }
    uint _2075 = _1939 + 8u;
    float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _758) * 0.949999988079071044921875);
    float _2089 = _2088 * _2088;
    float _2090 = cbLight._m0[_1939].x + _834;
    float _2091 = cbLight._m0[_1939].y + _835;
    float _2092 = cbLight._m0[_1939].z + _836;
    float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
    float _2097 = _2096 * _2090;
    float _2098 = _2096 * _2091;
    float _2099 = _2096 * _2092;
    float _2100 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_1939].xyz));
    float _4177 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _4188 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _2104 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2105 = dot(vec3(_755, _756, _757), vec3(_2097, _2098, _2099));
    float _4199 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2109 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2097, _2098, _2099));
    float _4210 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2113 = _2089 * _2089;
    float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
    float _2128 = (exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2129 = 1.0 - _2089;
    float _2140 = (0.5 / (((_2104 * ((_2103 * _2129) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2129) + _2089) * _2103))) * _2103;
    float _4221 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2142 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
    uint _2153 = _1939 + 9u;
    float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _758) * 0.949999988079071044921875);
    float _2165 = _2164 * _2164;
    float _2166 = cbLight._m0[_1976].x + _834;
    float _2167 = cbLight._m0[_1976].y + _835;
    float _2168 = cbLight._m0[_1976].z + _836;
    float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
    float _2173 = _2172 * _2166;
    float _2174 = _2172 * _2167;
    float _2175 = _2172 * _2168;
    float _2176 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_1976].xyz));
    float _4232 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2180 = dot(vec3(_755, _756, _757), vec3(_2173, _2174, _2175));
    float _4243 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2184 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2173, _2174, _2175));
    float _4254 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2188 = _2165 * _2165;
    float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
    float _2201 = (exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2202 = 1.0 - _2165;
    float _2212 = (0.5 / (((_2104 * ((_2179 * _2202) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2202) + _2165) * _2179))) * _2179;
    float _4265 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2214 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
    float _2224 = (((_2201 * cbLight._m0[_2153].x) * _2214) * _1962) + (((_2128 * cbLight._m0[_2075].x) * _2142) * _1972);
    float _2225 = (((_2201 * cbLight._m0[_2153].y) * _2214) * _1962) + (((_2128 * cbLight._m0[_2075].y) * _2142) * _1972);
    float _2226 = (((_2201 * cbLight._m0[_2153].z) * _2214) * _1962) + (((_2128 * cbLight._m0[_2075].z) * _2142) * _1972);
    float _2288;
    float _2290;
    float _2292;
    if (_2012)
    {
        _2288 = _2224;
        _2290 = _2225;
        _2292 = _2226;
    }
    else
    {
        uint _2294 = _1939 + 2u;
        uint _2298 = _1939 + 10u;
        float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _758) * 0.949999988079071044921875);
        float _2313 = _2312 * _2312;
        float _2314 = cbLight._m0[_2294].x + _834;
        float _2315 = cbLight._m0[_2294].y + _835;
        float _2316 = cbLight._m0[_2294].z + _836;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2321 = _2320 * _2314;
        float _2322 = _2320 * _2315;
        float _2323 = _2320 * _2316;
        float _2324 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2294].xyz));
        float _4276 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2328 = dot(vec3(_755, _756, _757), vec3(_2321, _2322, _2323));
        float _4287 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2332 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2321, _2322, _2323));
        float _4298 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2336 = _2313 * _2313;
        float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
        float _2349 = (exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2350 = 1.0 - _2313;
        float _2360 = (0.5 / (((_2104 * ((_2327 * _2350) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2350) + _2313) * _2327))) * _2327;
        float _4309 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2362 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
        float _2363 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2288 = (((_2349 * cbLight._m0[_2298].x) * _2362) * _2363) + _2224;
        _2290 = (((_2349 * cbLight._m0[_2298].y) * _2362) * _2363) + _2225;
        _2292 = (((_2349 * cbLight._m0[_2298].z) * _2362) * _2363) + _2226;
    }
    float _2398;
    float _2400;
    float _2402;
    if (_2030)
    {
        _2398 = _2288;
        _2400 = _2290;
        _2402 = _2292;
    }
    else
    {
        uint _2409 = _1939 + 3u;
        uint _2413 = _1939 + 11u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _758) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _834;
        float _2430 = cbLight._m0[_2409].y + _835;
        float _2431 = cbLight._m0[_2409].z + _836;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2409].xyz));
        float _4325 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2443 = dot(vec3(_755, _756, _757), vec3(_2436, _2437, _2438));
        float _4336 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4347 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2464 = (exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2465 = 1.0 - _2428;
        float _2475 = (0.5 / (((_2104 * ((_2442 * _2465) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2465) + _2428) * _2442))) * _2442;
        float _4358 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2398 = (((_2464 * cbLight._m0[_2413].x) * _2477) * _2478) + _2288;
        _2400 = (((_2464 * cbLight._m0[_2413].y) * _2477) * _2478) + _2290;
        _2402 = (((_2464 * cbLight._m0[_2413].z) * _2477) * _2478) + _2292;
    }
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    if (_1937.y == 0u)
    {
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2553;
        float _2555 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2553;
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2553;
        uvec4 _2568 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2569 = _2568.x;
        uint _2580 = uint((float(_2568.y) * floor(float(uint(cbSceneParam._m0[85u].y * _843) / _2569))) + floor(float(uint(cbSceneParam._m0[85u].x * _842) / _2569)));
        float _2590 = (log2(_2556 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2591 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        uint _2594 = uint(isnan(14.0) ? _2591 : (isnan(_2591) ? 14.0 : min(_2591, 14.0)));
        uvec4 _2599 = texelFetch(g_lightClusterGridBuffer, int(((_2594 << 2u) + (_2580 << 6u)) >> 2u));
        uint _2600 = _2599.x;
        uint _2601 = _2568.z;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        if (((((1u << ((_2601 >> 4u) & 15u)) + 4294967295u) & _2600) == 0u) || ((_2601 & 240u) == 0u))
        {
            _2701 = 0.0;
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
        }
        else
        {
            float _2702;
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            uint _2851 = 0u;
            uint _2860;
            bool _2861;
            for (;;)
            {
                _2860 = texelFetch(g_lightClassification, int((((_2594 << 5u) + (_2580 << 9u)) + (_2851 << 2u)) >> 2u)).x;
                _2861 = _2860 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2861)
                {
                    frontier_phi_61_pred = _2845;
                    frontier_phi_61_pred_1 = _2850;
                    frontier_phi_61_pred_2 = _2849;
                    frontier_phi_61_pred_3 = _2848;
                    frontier_phi_61_pred_4 = _2847;
                    frontier_phi_61_pred_5 = _2846;
                }
                else
                {
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    uint _2975;
                    _2969 = _2845;
                    _2970 = _2846;
                    _2971 = _2847;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2860;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    for (;;)
                    {
                        uint _2979 = uint(findLSB(_2975)) + (_2851 << 5u);
                        uint _2976 = (_2975 + 4294967295u) & _2975;
                        uint _2981 = _2979 * 48u;
                        vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 3u)).x));
                        uint _3001 = (_2979 * 48u) + 4u;
                        vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 3u)).x));
                        uint _3020 = (_2979 * 48u) + 8u;
                        vec3 _3031 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x));
                        float _3035 = _2995.x - _2554;
                        float _3036 = _2995.y - _2555;
                        float _3037 = _2995.z - _2556;
                        float _3038 = dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037));
                        float _3041 = inversesqrt(_3038);
                        float _3042 = _3041 * _3035;
                        float _3043 = _3041 * _3036;
                        float _3044 = _3041 * _3037;
                        float _3045 = dot(vec3(_861, _864, _867), vec3(_3042, _3043, _3044));
                        float _3050 = 1.0 - (_3038 * _2995.w);
                        float _4384 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3051 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3052 = sqrt(_3038) * _3014.w;
                        float _3055 = 1.39999997615814208984375 / (_3052 + 1.39999997615814208984375);
                        float _3056 = _3055 * _3055;
                        float _3059 = ((1.0 - _3056) * _3045) + _3056;
                        float _3062 = _3052 * _3052;
                        float _3066 = ((isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))) * _3051) / ((_3062 * 0.699999988079071044921875) + 1.0);
                        float _3070 = (-0.0) - _2554;
                        float _3071 = (-0.0) - _2555;
                        float _3072 = (-0.0) - _2556;
                        float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
                        float _3077 = _3076 * _3070;
                        float _3078 = _3076 * _3071;
                        float _3079 = _3076 * _3072;
                        float _3087 = exp2(log2(1.0 / ((_3062 * 3.5) + 5.0)) * 0.25);
                        float _3088 = 1.0 - _921;
                        float _3095 = sqrt(1.0 - ((1.0 - (_3088 * _3088)) * (1.0 - (_3087 * _3087))));
                        float _3096 = _3095 * _3095;
                        float _3097 = _3096 * _3096;
                        float _3098 = _3077 + _3042;
                        float _3099 = _3078 + _3043;
                        float _3100 = _3079 + _3044;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3108 = dot(vec3(_861, _864, _867), vec3(_3077, _3078, _3079));
                        float _4400 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3111 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3112 = dot(vec3(_861, _864, _867), vec3(_3104 * _3098, _3104 * _3099, _3104 * _3100));
                        float _4411 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3115 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3119 = ((_3115 * _3115) * (_3097 + (-1.0))) + 1.0;
                        float _3120 = _3055 * _3096;
                        float _3121 = _3120 * _3120;
                        float _3124 = ((1.0 - _3121) * _3045) + _3121;
                        float _4422 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3125 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3126 = 1.0 - _3096;
                        float _3136 = (0.5 / (((_3125 * ((_3111 * _3126) + _3096)) + 9.9999999392252902907785028219223e-09) + (((_3125 * _3126) + _3096) * _3111))) * _3125;
                        float _4433 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3147 = (((_3097 * 3.1415927410125732421875) * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) / ((_3119 * _3119) * ((_3062 * 2.1991131305694580078125) + 3.141590118408203125))) * _3051;
                        _2904 = (_3066 * _3014.x) + _2972;
                        _2905 = (_3066 * _3014.y) + _2973;
                        _2906 = (_3066 * _3014.z) + _2974;
                        _2901 = (_3147 * _3031.x) + _2969;
                        _2902 = (_3147 * _3031.y) + _2970;
                        _2903 = (_3147 * _3031.z) + _2971;
                        if (_2976 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2969 = _2901;
                            _2970 = _2902;
                            _2971 = _2903;
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2976;
                        }
                    }
                    frontier_phi_61_pred = _2901;
                    frontier_phi_61_pred_1 = _2906;
                    frontier_phi_61_pred_2 = _2905;
                    frontier_phi_61_pred_3 = _2904;
                    frontier_phi_61_pred_4 = _2903;
                    frontier_phi_61_pred_5 = _2902;
                }
                _2702 = frontier_phi_61_pred;
                _2712 = frontier_phi_61_pred_1;
                _2710 = frontier_phi_61_pred_2;
                _2708 = frontier_phi_61_pred_3;
                _2706 = frontier_phi_61_pred_4;
                _2704 = frontier_phi_61_pred_5;
                uint _2852 = _2851 + 1u;
                if (_2852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2845 = _2702;
                    _2846 = _2704;
                    _2847 = _2706;
                    _2848 = _2708;
                    _2849 = _2710;
                    _2850 = _2712;
                    _2851 = _2852;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2701 = _2702;
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
        }
        uvec4 _2715 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2716 = _2715.z;
        uint _2718 = (_2716 >> 8u) & 15u;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((4294967295u << _2718) & _2600) == 0u)
        {
            _2813 = _2701;
            _2815 = _2703;
            _2817 = _2705;
            _2819 = _2707;
            _2821 = _2709;
            _2823 = _2711;
        }
        else
        {
            float _2838 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
            float _2839 = _2838 * _2554;
            float _2840 = _2838 * _2555;
            float _2841 = _2838 * _2556;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2718 < ((_2716 >> 12u) & 15u))
            {
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2952 = _2701;
                float _2953 = _2703;
                float _2954 = _2705;
                float _2955 = _2707;
                float _2956 = _2709;
                float _2957 = _2711;
                uint _2958 = _2718;
                uint _2967;
                bool _2968;
                for (;;)
                {
                    _2967 = texelFetch(g_lightClassification, int((((_2594 << 5u) + (_2580 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                    _2968 = _2967 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2968)
                    {
                        frontier_phi_67_pred = _2955;
                        frontier_phi_67_pred_1 = _2956;
                        frontier_phi_67_pred_2 = _2957;
                        frontier_phi_67_pred_3 = _2954;
                        frontier_phi_67_pred_4 = _2953;
                        frontier_phi_67_pred_5 = _2952;
                    }
                    else
                    {
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3165 = _2952;
                        float _3166 = _2953;
                        float _3167 = _2954;
                        float _3168 = _2955;
                        float _3169 = _2956;
                        float _3170 = _2957;
                        uint _3171 = _2967;
                        uint _3172;
                        vec4 _3197;
                        float _3198;
                        vec4 _3213;
                        vec3 _3225;
                        vec4 _3240;
                        vec4 _3256;
                        float _3302;
                        bool _3303;
                        for (;;)
                        {
                            uint _3182 = ((_2958 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3171));
                            _3172 = (_3171 + 4294967295u) & _3171;
                            uint _3184 = _3182 * 40u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3198 = _3197.w;
                            uint _3200 = (_3182 * 40u) + 4u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3215 = (_3182 * 40u) + 8u;
                            _3225 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x));
                            uint _3227 = (_3182 * 40u) + 16u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3243 = (_3182 * 40u) + 20u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3182 * 40u) + 24u;
                            vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3277 = (_3182 * 40u) + 28u;
                            vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            _3302 = fma(_2556, _3290.z, fma(_2555, _3290.y, _3290.x * _2554)) + _3290.w;
                            _3303 = !((fma(_2556, _3271.z, fma(_2555, _3271.y, _3271.x * _2554)) + _3271.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3303)
                            {
                                float _3330 = _3197.x - _2554;
                                float _3331 = _3197.y - _2555;
                                float _3332 = _3197.z - _2556;
                                float _3333 = dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332));
                                float _3336 = inversesqrt(_3333);
                                float _3337 = _3336 * _3330;
                                float _3338 = _3336 * _3331;
                                float _3339 = _3336 * _3332;
                                float _3343 = 1.0 - (_3333 / (_3198 * _3198));
                                float _4444 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3348 = sqrt(_3333) * _3213.w;
                                float _3350 = 1.39999997615814208984375 / (_3348 + 1.39999997615814208984375);
                                float _3351 = _3350 * _3350;
                                float _3354 = ((1.0 - _3351) * dot(vec3(_3337, _3338, _3339), vec3(_861, _864, _867))) + _3351;
                                float _3357 = _3348 * _3348;
                                float _3361 = (fma(_2556, _3240.z, fma(_2555, _3240.y, _3240.x * _2554)) + _3240.w) / _3302;
                                float _3362 = (fma(_2556, _3256.z, fma(_2555, _3256.y, _3256.x * _2554)) + _3256.w) / _3302;
                                float _3366 = 1.0 - dot(vec2(_3361, _3362), vec2(_3361, _3362));
                                float _4460 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3367 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3368 = _3367 * (((isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0))) * _3344) / ((_3357 * 0.699999988079071044921875) + 1.0));
                                float _3380 = exp2(log2(1.0 / ((_3357 * 3.5) + 5.0)) * 0.25);
                                float _3381 = 1.0 - _921;
                                float _3388 = sqrt(1.0 - ((1.0 - (_3381 * _3381)) * (1.0 - (_3380 * _3380))));
                                float _3389 = _3388 * _3388;
                                float _3390 = _3389 * _3389;
                                float _3391 = _3337 - _2839;
                                float _3392 = _3338 - _2840;
                                float _3393 = _3339 - _2841;
                                float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                                float _3401 = dot(vec3(_861, _864, _867), vec3((-0.0) - _2839, (-0.0) - _2840, (-0.0) - _2841));
                                float _4471 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3404 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3405 = dot(vec3(_861, _864, _867), vec3(_3397 * _3391, _3397 * _3392, _3397 * _3393));
                                float _4482 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3408 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3412 = ((_3408 * _3408) * (_3390 + (-1.0))) + 1.0;
                                float _3413 = _3350 * _3389;
                                float _3414 = _3413 * _3413;
                                float _3420 = ((1.0 - _3414) * dot(vec3(_861, _864, _867), vec3(_3337, _3338, _3339))) + _3414;
                                float _4493 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3422 = 1.0 - _3389;
                                float _3432 = (0.5 / (((_3421 * ((_3404 * _3422) + _3389)) + 9.9999999392252902907785028219223e-09) + (((_3421 * _3422) + _3389) * _3404))) * _3421;
                                float _4504 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3442 = (_3367 * _3344) * (((_3390 * 3.1415927410125732421875) * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) / ((_3412 * _3412) * ((_3357 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3442 * _3225.x;
                                frontier_phi_73_pred_1 = _3442 * _3225.y;
                                frontier_phi_73_pred_2 = _3368 * _3213.z;
                                frontier_phi_73_pred_3 = _3368 * _3213.y;
                                frontier_phi_73_pred_4 = _3368 * _3213.x;
                                frontier_phi_73_pred_5 = _3442 * _3225.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3446 = frontier_phi_73_pred;
                            _3447 = frontier_phi_73_pred_1;
                            _3451 = frontier_phi_73_pred_2;
                            _3450 = frontier_phi_73_pred_3;
                            _3449 = frontier_phi_73_pred_4;
                            _3448 = frontier_phi_73_pred_5;
                            _3155 = _3449 + _3168;
                            _3156 = _3450 + _3169;
                            _3157 = _3451 + _3170;
                            _3152 = _3446 + _3165;
                            _3153 = _3447 + _3166;
                            _3154 = _3448 + _3167;
                            if (_3172 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3172;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3155;
                        frontier_phi_67_pred_1 = _3156;
                        frontier_phi_67_pred_2 = _3157;
                        frontier_phi_67_pred_3 = _3154;
                        frontier_phi_67_pred_4 = _3153;
                        frontier_phi_67_pred_5 = _3152;
                    }
                    _2820 = frontier_phi_67_pred;
                    _2822 = frontier_phi_67_pred_1;
                    _2824 = frontier_phi_67_pred_2;
                    _2818 = frontier_phi_67_pred_3;
                    _2816 = frontier_phi_67_pred_4;
                    _2814 = frontier_phi_67_pred_5;
                    uint _2959 = _2958 + 1u;
                    if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2952 = _2814;
                        _2953 = _2816;
                        _2954 = _2818;
                        _2955 = _2820;
                        _2956 = _2822;
                        _2957 = _2824;
                        _2958 = _2959;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2822;
                frontier_phi_55_56_ladder_1 = _2824;
                frontier_phi_55_56_ladder_2 = _2820;
                frontier_phi_55_56_ladder_3 = _2818;
                frontier_phi_55_56_ladder_4 = _2816;
                frontier_phi_55_56_ladder_5 = _2814;
            }
            else
            {
                frontier_phi_55_56_ladder = _2709;
                frontier_phi_55_56_ladder_1 = _2711;
                frontier_phi_55_56_ladder_2 = _2707;
                frontier_phi_55_56_ladder_3 = _2705;
                frontier_phi_55_56_ladder_4 = _2703;
                frontier_phi_55_56_ladder_5 = _2701;
            }
            _2813 = frontier_phi_55_56_ladder_5;
            _2815 = frontier_phi_55_56_ladder_4;
            _2817 = frontier_phi_55_56_ladder_3;
            _2819 = frontier_phi_55_56_ladder_2;
            _2821 = frontier_phi_55_56_ladder;
            _2823 = frontier_phi_55_56_ladder_1;
        }
        float _2828 = isnan(1.0) ? _905 : (isnan(_905) ? 1.0 : min(_905, 1.0));
        _2613 = (_2828 * _2819) + _2068;
        _2615 = (_2828 * _2821) + _2070;
        _2617 = (_2828 * _2823) + _2072;
        _2619 = ((_2813 * 0.039999999105930328369140625) * _2828) + _2398;
        _2621 = ((_2815 * 0.039999999105930328369140625) * _2828) + _2400;
        _2623 = ((_2817 * 0.039999999105930328369140625) * _2828) + _2402;
    }
    else
    {
        _2613 = _2068;
        _2615 = _2070;
        _2617 = _2072;
        _2619 = _2398;
        _2621 = _2400;
        _2623 = _2402;
    }
    float _4520 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4531 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4542 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    uint _2643 = _245 + 6u;
    float _2651 = _842 / cbSceneParam._m0[86u].x;
    float _2652 = _843 / cbSceneParam._m0[86u].y;
    vec4 _2666 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2651, _2652, (log2((isnan(cbSceneParam._m0[77u].w) ? _776 : (isnan(_776) ? cbSceneParam._m0[77u].w : min(_776, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2668 = _2666.x;
    float _2669 = _2666.y;
    float _2670 = _2666.z;
    float _2671 = _2666.w;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_776 > cbSceneParam._m0[78u].w)
    {
        float _2726 = isnan(_776) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _776 : min(cbSceneParam._m0[80u].w, _776));
        float _2727 = _2726 / _776;
        float _2738 = _2727 * _827;
        float _2739 = _828 * _2727;
        float _2740 = (-0.0) - _2739;
        float _2741 = _2727 * _829;
        float _2743 = (cbSceneParam._m0[77u].w * _2740) / _2726;
        float _2744 = _2743 + cbSceneParam._m0[79u].w;
        float _2745 = cbSceneParam._m0[79u].w - _2739;
        float _2751 = sqrt(((_2738 * _2738) + (_2739 * _2739)) + (_2741 * _2741));
        float _2754 = (1.0 - (cbSceneParam._m0[77u].w / _2726)) * _2751;
        float _2759 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2761 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2914;
        if (abs((_2740 - _2743) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2914 = ((((_2744 > 0.0) ? exp2(_2759 * _2744) : (2.0 - exp2(_2761 * _2744))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2754;
        }
        else
        {
            float _2874 = 1.0 / cbSceneParam._m0[80u].x;
            float _2875 = isnan(_2745) ? _2744 : (isnan(_2744) ? _2745 : max(_2744, _2745));
            float _2876 = isnan(_2745) ? _2744 : (isnan(_2744) ? _2745 : min(_2744, _2745));
            float _2885 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : min(_2875, 0.0));
            float _2886 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : min(_2876, 0.0));
            _2914 = ((abs(_2751 / _2740) * cbSceneParam._m0[80u].y) * ((((_2885 - _2886) * 2.0) - ((exp2(_2759 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0)))) - exp2(_2759 * (isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0))))) * _2874)) - ((exp2(_2761 * _2885) - exp2(_2761 * _2886)) * _2874))) + (_2754 * cbSceneParam._m0[80u].z);
        }
        vec4 _2916 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2651, _2652, 1.0), 0.0);
        float _2925 = exp2((_2914 * (-1.44269502162933349609375)) * (1.0 - _2916.w));
        float _2926 = log2(_2925);
        float _2942 = log2(_2671);
        _2763 = (exp2(_2942 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].x)) * _2916.x) / cbSceneParam._m0[78u].x)) + _2668;
        _2765 = (exp2(_2942 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].y)) * _2916.y) / cbSceneParam._m0[78u].y)) + _2669;
        _2767 = (exp2(_2942 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].z)) * _2916.z) / cbSceneParam._m0[78u].z)) + _2670;
        _2769 = _2925 * _2671;
    }
    else
    {
        _2763 = _2668;
        _2765 = _2669;
        _2767 = _2670;
        _2769 = _2671;
    }
    float _2781 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2782 = _2781 == 3.0;
    float _2783 = log2(_2769);
    float _2790 = exp2(_2783 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2613 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _905))) + ((_2619 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1710)) * cbPerFrame._m0[3u].x));
    float _2791 = exp2(_2783 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2615 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _905))) + ((_2621 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1710)) * cbPerFrame._m0[3u].x));
    float _2792 = exp2(_2783 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2617 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _905))) + ((_2623 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1710)) * cbPerFrame._m0[3u].x));
    float _2801 = (_2781 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2801 * (_2782 ? _2790 : (_2790 + (cbSceneParam._m0[72u].w * _2763)));
    SV_Target.y = _2801 * (_2782 ? _2791 : (_2791 + (cbSceneParam._m0[72u].w * _2765)));
    SV_Target.z = _2801 * (_2782 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2767)));
    SV_Target.w = cbInstanceData._m0[_2643].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2643].w;
}


