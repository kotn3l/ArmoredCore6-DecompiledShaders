#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1199;
float _3584;
float _3585;
float _3586;
float _3587;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _302.x * cbMtdParam._m0[11u].x;
    float _308 = _302.y * cbMtdParam._m0[11u].y;
    float _309 = _302.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _348.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[24u].z) + _399) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3596 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _424 = (_417 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _425 = (_417 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _426 = (_417 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _348.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[24u].z) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3607 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _503 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _278.x) * ((_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424);
    float _506 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _278.y) * ((_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425);
    float _509 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _278.z) * ((_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426);
    vec4 _522 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _539 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _543 = _539.z;
    float _550 = ((_522.x - _541) * _417) + _541;
    float _551 = ((_522.y - _542) * _417) + _542;
    float _552 = ((_522.z - _543) * _417) + _543;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _577 = ((_564.z - _552) * _490) + _552;
    float _580 = ((((_564.x - _550) * _490) + _550) * 2.0) + (-1.0);
    float _582 = ((((_564.y - _551) * _490) + _551) * 2.0) + (-1.0);
    float _583 = dot(vec2(_580, _582), vec2(_580, _582));
    float _3618 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _588 = sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _614 = (((_602.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _580;
    float _615 = (((_602.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _582;
    float _619 = (cbMtdParam._m0[19u].w * (_602.z - _577)) + _577;
    float _623 = cbMtdParam._m0[22u].x + _602.w;
    float _626 = fma(_588, _225 * NORMAL.x, fma(_615, _232 * TANGENT.x, (_218 * _210) * _614));
    float _629 = fma(_588, _225 * NORMAL.y, fma(_615, _232 * TANGENT.y, (_218 * _211) * _614));
    float _632 = fma(_588, _225 * NORMAL.z, fma(_615, _232 * TANGENT.z, (_218 * _212) * _614));
    float _636 = inversesqrt(dot(vec3(_626, _629, _632), vec3(_626, _629, _632)));
    float _637 = _636 * _626;
    float _638 = _636 * _629;
    float _639 = _636 * _632;
    float _3629 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _640 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3651 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3662 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3673 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _658 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _709 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _699);
    float _710 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _699);
    float _711 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _699);
    float _715 = inversesqrt(dot(vec3(_709, _710, _711), vec3(_709, _710, _711)));
    float _716 = _709 * _715;
    float _717 = _710 * _715;
    float _718 = _711 * _715;
    vec4 _723 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _725 = _723.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _879 = sqrt(((_709 * _709) + (_710 * _710)) + (_711 * _711));
        float _885 = (cbMatDynParam._m0[5u].x * _879) + cbMatDynParam._m0[5u].y;
        float _3684 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _890 = (cbMatDynParam._m0[5u].z * _879) + cbMatDynParam._m0[5u].w;
        float _3695 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) - _886)) + _886) < ((_725 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _736 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _737 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _755 = fma(_639, cbSceneParam._m0[5u].z, fma(_638, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _637));
    float _758 = fma(_639, cbSceneParam._m0[6u].z, fma(_638, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _637));
    float _761 = fma(_639, cbSceneParam._m0[7u].z, fma(_638, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _637));
    uint _774 = _238 + 9u;
    uint _775 = _774 + uint(cbMatDynParam._m0[0u].w);
    float _781 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_775].x;
    float _782 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_775].y;
    float _783 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_775].z;
    float _3706 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    vec4 _795 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _736, cbSceneParam._m0[86u].y * _737));
    float _799 = ((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * TEXCOORD_5.w) * _795.x;
    float _800 = dot(vec3(_637, _638, _639), vec3(_716, _717, _718));
    float _803 = _800 * 2.0;
    float _807 = (_803 * _637) - _716;
    float _808 = (_803 * _638) - _717;
    float _809 = (_803 * _639) - _718;
    float _813 = abs(dot(vec3(_716, _717, _718), vec3(_637, _638, _639)));
    float _3739 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _815 = sqrt(_640);
    float _828 = exp2((_815 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_815 * 3.0));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1198;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _923 = fma(_868, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860));
        float _927 = fma(_868, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860));
        float _931 = fma(_868, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860));
        float _956 = _860 + _637;
        float _957 = _864 + _638;
        float _958 = _868 + _639;
        float _968 = fma(_958, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _956)) - _923;
        float _969 = fma(_958, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _956)) - _927;
        float _970 = fma(_958, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _956)) - _931;
        float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
        float _987 = ((_974 * _968) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_923 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_974 * _969) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_927 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_974 * _970) / cbModelParam._m0[34u].z) + ((((((_931 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        float _1026 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_992.x + (-0.5));
        float _1028 = _1026 * (_992.y + (-0.5));
        float _1029 = _1026 * (_992.z + (-0.5));
        float _1036 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_999.x + (-0.5));
        float _1038 = _1036 * (_999.y + (-0.5));
        float _1039 = _1036 * (_999.z + (-0.5));
        float _1046 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1006.x + (-0.5));
        float _1048 = _1046 * (_1006.y + (-0.5));
        float _1049 = _1046 * (_1006.z + (-0.5));
        float _1056 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1013.x + (-0.5));
        float _1058 = _1056 * (_1013.y + (-0.5));
        float _1059 = _1056 * (_1013.z + (-0.5));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = _1027 * 0.5;
        float _1064 = _1037 * 0.5;
        float _1065 = _1047 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1080 = (dot(vec3(_637, _638, _639), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1090 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3787 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1092 + 1.0))) + _1097) * _1060;
        float _1107 = _1028 * 0.5;
        float _1108 = _1038 * 0.5;
        float _1109 = _1048 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_637, _638, _639), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3820 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1134 + 1.0))) + _1139) * _1061;
        float _1149 = _1029 * 0.5;
        float _1150 = _1039 * 0.5;
        float _1151 = _1049 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_637, _638, _639), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3853 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1176 + 1.0))) + _1181) * _1062;
        _1198 = _1029;
        _1200 = _1028;
        _1201 = _1027;
        _1202 = _1039;
        _1203 = _1038;
        _1204 = _1037;
        _1205 = _1049;
        _1206 = _1048;
        _1207 = _1047;
        _1208 = _1062;
        _1209 = _1061;
        _1210 = _1060;
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
    }
    else
    {
        _1198 = _1199;
        _1200 = _1199;
        _1201 = _1199;
        _1202 = _1199;
        _1203 = _1199;
        _1204 = _1199;
        _1205 = _1199;
        _1206 = _1199;
        _1207 = _1199;
        _1208 = _1199;
        _1209 = _1199;
        _1210 = _1199;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1240 = fma(_868, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _860));
        float _1244 = fma(_868, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _860));
        float _1248 = fma(_868, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _860));
        float _1271 = _860 + _637;
        float _1272 = _864 + _638;
        float _1273 = _868 + _639;
        float _1283 = fma(_1273, cbModelParam._m0[30u].z, fma(_1272, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1271)) - _1240;
        float _1284 = fma(_1273, cbModelParam._m0[31u].z, fma(_1272, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1271)) - _1244;
        float _1285 = fma(_1273, cbModelParam._m0[32u].z, fma(_1272, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1271)) - _1248;
        float _1289 = inversesqrt(dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285)));
        float _1302 = ((_1289 * _1283) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1240 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1289 * _1284) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1244 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1289 * _1285) / cbModelParam._m0[35u].z) + ((((((_1248 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        float _1339 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1306.x + (-0.5));
        float _1341 = _1339 * (_1306.y + (-0.5));
        float _1342 = _1339 * (_1306.z + (-0.5));
        float _1349 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1313.x + (-0.5));
        float _1351 = _1349 * (_1313.y + (-0.5));
        float _1352 = _1349 * (_1313.z + (-0.5));
        float _1359 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1320.x + (-0.5));
        float _1361 = _1359 * (_1320.y + (-0.5));
        float _1362 = _1359 * (_1320.z + (-0.5));
        float _1369 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1327.x + (-0.5));
        float _1371 = _1369 * (_1327.y + (-0.5));
        float _1372 = _1369 * (_1327.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_637, _638, _639), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _3916 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1403 + 1.0))) + _1408) * _1373;
        float _1418 = _1341 * 0.5;
        float _1419 = _1351 * 0.5;
        float _1420 = _1361 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_637, _638, _639), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3949 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1445 + 1.0))) + _1450) * _1374;
        float _1460 = _1342 * 0.5;
        float _1461 = _1352 * 0.5;
        float _1462 = _1362 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_637, _638, _639), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _3982 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1487 + 1.0))) + _1492) * _1375;
        _1509 = _1342;
        _1510 = _1341;
        _1511 = _1340;
        _1512 = _1352;
        _1513 = _1351;
        _1514 = _1350;
        _1515 = _1362;
        _1516 = _1361;
        _1517 = _1360;
        _1518 = _1375;
        _1519 = _1374;
        _1520 = _1373;
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1199;
        _1510 = _1199;
        _1511 = _1199;
        _1512 = _1199;
        _1513 = _1199;
        _1514 = _1199;
        _1515 = _1199;
        _1516 = _1199;
        _1517 = _1199;
        _1518 = _1199;
        _1519 = _1199;
        _1520 = _1199;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1211)) + _1211;
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1212)) + _1212;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1213)) + _1213;
    float _1556 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1534, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1534, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1534, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1533));
    float _1577 = _807 * 0.5;
    float _1578 = _808 * 0.5;
    float _1579 = _809 * 0.5;
    float _1580 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1583 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1586 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1620;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1593 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1198, _1202, _1205, _1208));
        float _1597 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1601 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1608 = dot(vec4(cbModelParam._m0[39u]), vec4(_1577, _1578, _1579, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1608) ? 0.0 : (isnan(0.0) ? _1608 : max(0.0, _1608))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1631;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1622 = dot(vec4(cbModelParam._m0[40u]), vec4(_1577, _1578, _1579, 1.0));
        _1631 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1631 = 1.0;
    }
    float _1635 = (_1631 * cbModelParam._m0[1u].x) + (_1620 * (1.0 - cbModelParam._m0[1u].x));
    float _1645 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _640);
    float _1646 = isnan(_1645) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1645 : min(cbModelParam._m0[25u].z, _1645));
    float _1728;
    float _1730;
    float _1732;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1695 = fma(_868, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860)) + cbModelParam._m0[13u].w;
        float _1699 = fma(_868, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860)) + cbModelParam._m0[14u].w;
        float _1703 = fma(_868, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860)) + cbModelParam._m0[15u].w;
        float _1706 = fma(_809, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807));
        float _1709 = fma(_809, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807));
        float _1712 = fma(_809, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807));
        float _1740;
        if (_1706 > 0.0)
        {
            _1740 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1740 = frontier_phi_17_15_ladder;
        }
        float _1963;
        if (_1709 > 0.0)
        {
            _1963 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1963 = frontier_phi_26_22_ladder;
        }
        float _2209;
        if (_1712 > 0.0)
        {
            _2209 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2209 = frontier_phi_38_33_ladder;
        }
        float _2211 = isnan(_1963) ? _1740 : (isnan(_1740) ? _1963 : min(_1740, _1963));
        float _2212 = isnan(_2209) ? _2211 : (isnan(_2211) ? _2209 : min(_2211, _2209));
        float _2216 = (_2212 * _1706) + _1695;
        float _2217 = (_2212 * _1709) + _1699;
        float _2218 = (_2212 * _1712) + _1703;
        float _2219 = _2212 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2219;
        float _2223 = _2219 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 > _2223) || ((_2217 < _2221) || ((_2216 < _2221) || (_2216 > _2223))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2342 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2218, cbModelParam._m0[9u].z, fma(_2217, cbModelParam._m0[9u].y, _2216 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2218, cbModelParam._m0[10u].z, fma(_2217, cbModelParam._m0[10u].y, _2216 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2218, cbModelParam._m0[11u].z, fma(_2217, cbModelParam._m0[11u].y, _2216 * cbModelParam._m0[11u].x))), _1646);
            frontier_phi_16_38_ladder = _2342.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2342.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2342.x * cbModelParam._m0[1u].y;
        }
        _1728 = frontier_phi_16_38_ladder_2;
        _1730 = frontier_phi_16_38_ladder_1;
        _1732 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1716 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_807, _808, _809), _1646);
        _1728 = _1716.x * cbModelParam._m0[1u].y;
        _1730 = _1716.y * cbModelParam._m0[1u].y;
        _1732 = _1716.z * cbModelParam._m0[1u].y;
    }
    float _1736 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _640);
    float _1737 = isnan(_1736) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1736 : min(cbModelParam._m0[25u].w, _1736));
    float _1828;
    float _1830;
    float _1832;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1792 = fma(_868, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860)) + cbModelParam._m0[21u].w;
        float _1796 = fma(_868, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860)) + cbModelParam._m0[22u].w;
        float _1800 = fma(_868, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860)) + cbModelParam._m0[23u].w;
        float _1803 = fma(_809, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807));
        float _1806 = fma(_809, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807));
        float _1809 = fma(_809, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807));
        float _1968;
        if (_1803 > 0.0)
        {
            _1968 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1968 = frontier_phi_28_24_ladder;
        }
        float _2236;
        if (_1806 > 0.0)
        {
            _2236 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2236 = frontier_phi_40_35_ladder;
        }
        float _2441;
        if (_1809 > 0.0)
        {
            _2441 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2441 = frontier_phi_49_46_ladder;
        }
        float _2443 = isnan(_2236) ? _1968 : (isnan(_1968) ? _2236 : min(_1968, _2236));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1803) + _1792;
        float _2449 = (_2444 * _1806) + _1796;
        float _2450 = (_2444 * _1809) + _1800;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2451;
        float _2454 = _2451 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2450 > _2454) || ((_2450 < _2452) || ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 < _2452) || (_2448 > _2454))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2649 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2450, cbModelParam._m0[17u].z, fma(_2449, cbModelParam._m0[17u].y, _2448 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2450, cbModelParam._m0[18u].z, fma(_2449, cbModelParam._m0[18u].y, _2448 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2450, cbModelParam._m0[19u].z, fma(_2449, cbModelParam._m0[19u].y, _2448 * cbModelParam._m0[19u].x))), _1737);
            frontier_phi_25_49_ladder = _2649.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2649.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2649.x * cbModelParam._m0[1u].z;
        }
        _1828 = frontier_phi_25_49_ladder_2;
        _1830 = frontier_phi_25_49_ladder_1;
        _1832 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1812 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_807, _808, _809), _1737);
        _1828 = _1812.x * cbModelParam._m0[1u].z;
        _1830 = _1812.y * cbModelParam._m0[1u].z;
        _1832 = _1812.z * cbModelParam._m0[1u].z;
    }
    float _1844 = ((((1.0 - _828) * ((_815 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_828 * _815)) * _799;
    float _1845 = _1844 * ((cbModelParam._m0[1u].w * (_1828 - _1728)) + _1728);
    float _1846 = _1844 * ((cbModelParam._m0[1u].w * (_1830 - _1730)) + _1730);
    float _1847 = _1844 * ((cbModelParam._m0[1u].w * (_1832 - _1732)) + _1732);
    float _1850 = fma(_1847, cbSceneParam._m0[89u].z, fma(_1846, cbSceneParam._m0[89u].y, _1845 * cbSceneParam._m0[89u].x));
    float _1853 = fma(_1847, cbSceneParam._m0[90u].z, fma(_1846, cbSceneParam._m0[90u].y, _1845 * cbSceneParam._m0[90u].x));
    float _1856 = fma(_1847, cbSceneParam._m0[91u].z, fma(_1846, cbSceneParam._m0[91u].y, _1845 * cbSceneParam._m0[91u].x));
    vec4 _1864 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_736, _737));
    float _1866 = _1864.w;
    float _1878 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1866);
    float _1879 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1866);
    float _1880 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1866);
    uvec4 _1884 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1886 = _1884.x * 14u;
    uint _1887 = _1886 + 13u;
    float _1894 = _799 + (-1.0);
    float _1899 = (cbLight._m0[_1887].x * _1894) + 1.0;
    float _1900 = (cbLight._m0[_1887].y * _1894) + 1.0;
    float _1901 = (cbLight._m0[_1887].z * _1894) + 1.0;
    float _1902 = (cbLight._m0[_1887].w * _1894) + 1.0;
    uint _1903 = _1886 + 5u;
    float _1909 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
    uint _1913 = _1886 + 4u;
    float _1922 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
    uint _1926 = _1886 | 1u;
    float _1937 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_637, _638, _639));
    float _1940 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_637, _638, _639));
    float _4118 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _4129 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1945 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.3183098733425140380859375;
    float _1947 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.3183098733425140380859375;
    float _1954 = ((cbLight._m0[_1903].x * _1909) * _1947) + (((cbLight._m0[_1913].x * _1878) * _1922) * _1945);
    float _1955 = ((_1909 * cbLight._m0[_1903].y) * _1947) + (((cbLight._m0[_1913].y * _1879) * _1922) * _1945);
    float _1956 = ((_1909 * cbLight._m0[_1903].z) * _1947) + (((cbLight._m0[_1913].z * _1880) * _1922) * _1945);
    uvec4 _1960 = floatBitsToUint(cbLight._m0[_1886 + 12u]);
    bool _1962 = _1960.x == 0u;
    float _1973;
    float _1975;
    float _1977;
    if (_1962)
    {
        _1973 = _1954;
        _1975 = _1955;
        _1977 = _1956;
    }
    else
    {
        uint _1981 = _1886 + 6u;
        float _1997 = (dot(vec3(cbLight._m0[_1886 + 2u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _1998 = _1997 * _1997;
        float _4140 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2000 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _1973 = (((cbLight._m0[_1981].x * 0.3183098733425140380859375) * _1999) * _2000) + _1954;
        _1975 = (((cbLight._m0[_1981].y * 0.3183098733425140380859375) * _1999) * _2000) + _1955;
        _1977 = (((cbLight._m0[_1981].z * 0.3183098733425140380859375) * _1999) * _2000) + _1956;
    }
    bool _1980 = _1960.y == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_1980)
    {
        _2018 = _1973;
        _2020 = _1975;
        _2022 = _1977;
    }
    else
    {
        uint _2180 = _1886 + 7u;
        float _2196 = (dot(vec3(cbLight._m0[_1886 + 3u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2197 = _2196 * _2196;
        float _4156 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2198 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2199 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2018 = (((cbLight._m0[_2180].x * 0.3183098733425140380859375) * _2198) * _2199) + _1973;
        _2020 = (((cbLight._m0[_2180].y * 0.3183098733425140380859375) * _2198) * _2199) + _1975;
        _2022 = (((cbLight._m0[_2180].z * 0.3183098733425140380859375) * _2198) * _2199) + _1977;
    }
    uint _2025 = _1886 + 8u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1886].w)) * _640) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1886].x + _716;
    float _2041 = cbLight._m0[_1886].y + _717;
    float _2042 = cbLight._m0[_1886].z + _718;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_1886].xyz));
    float _4172 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _4183 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _2054 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2055 = dot(vec3(_637, _638, _639), vec3(_2047, _2048, _2049));
    float _4194 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_2047, _2048, _2049));
    float _4205 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2039 * _2039;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2078 = (exp2(log2(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2079 = 1.0 - _2039;
    float _2090 = (0.5 / (((_2054 * ((_2053 * _2079) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2079) + _2039) * _2053))) * _2053;
    float _4216 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    uint _2106 = _1886 + 9u;
    float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _640) * 0.949999988079071044921875);
    float _2118 = _2117 * _2117;
    float _2119 = cbLight._m0[_1926].x + _716;
    float _2120 = cbLight._m0[_1926].y + _717;
    float _2121 = cbLight._m0[_1926].z + _718;
    float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
    float _2126 = _2125 * _2119;
    float _2127 = _2125 * _2120;
    float _2128 = _2125 * _2121;
    float _2129 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_1926].xyz));
    float _4227 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _2133 = dot(vec3(_637, _638, _639), vec3(_2126, _2127, _2128));
    float _4238 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2137 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2126, _2127, _2128));
    float _4249 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2141 = _2118 * _2118;
    float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
    float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2155 = 1.0 - _2118;
    float _2165 = (0.5 / (((_2054 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2155) + _2118) * _2132))) * _2132;
    float _4260 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
    float _2177 = (((_2154 * cbLight._m0[_2106].x) * _2167) * _1909) + ((((cbLight._m0[_2025].x * _1878) * _2078) * _2092) * _1922);
    float _2178 = (((_2154 * cbLight._m0[_2106].y) * _2167) * _1909) + ((((cbLight._m0[_2025].y * _1879) * _2078) * _2092) * _1922);
    float _2179 = (((_2154 * cbLight._m0[_2106].z) * _2167) * _1909) + ((((cbLight._m0[_2025].z * _1880) * _2078) * _2092) * _1922);
    float _2241;
    float _2243;
    float _2245;
    if (_1962)
    {
        _2241 = _2177;
        _2243 = _2178;
        _2245 = _2179;
    }
    else
    {
        uint _2247 = _1886 + 2u;
        uint _2251 = _1886 + 10u;
        float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _640) * 0.949999988079071044921875);
        float _2266 = _2265 * _2265;
        float _2267 = cbLight._m0[_2247].x + _716;
        float _2268 = cbLight._m0[_2247].y + _717;
        float _2269 = cbLight._m0[_2247].z + _718;
        float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
        float _2274 = _2273 * _2267;
        float _2275 = _2273 * _2268;
        float _2276 = _2273 * _2269;
        float _2277 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2247].xyz));
        float _4271 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2281 = dot(vec3(_637, _638, _639), vec3(_2274, _2275, _2276));
        float _4282 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2285 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2274, _2275, _2276));
        float _4293 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2289 = _2266 * _2266;
        float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
        float _2302 = (exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2303 = 1.0 - _2266;
        float _2313 = (0.5 / (((_2054 * ((_2280 * _2303) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2303) + _2266) * _2280))) * _2280;
        float _4304 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2315 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
        float _2316 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _2241 = (((_2302 * cbLight._m0[_2251].x) * _2315) * _2316) + _2177;
        _2243 = (((_2302 * cbLight._m0[_2251].y) * _2315) * _2316) + _2178;
        _2245 = (((_2302 * cbLight._m0[_2251].z) * _2315) * _2316) + _2179;
    }
    float _2351;
    float _2353;
    float _2355;
    if (_1980)
    {
        _2351 = _2241;
        _2353 = _2243;
        _2355 = _2245;
    }
    else
    {
        uint _2362 = _1886 + 3u;
        uint _2366 = _1886 + 11u;
        float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _640) * 0.949999988079071044921875);
        float _2381 = _2380 * _2380;
        float _2382 = cbLight._m0[_2362].x + _716;
        float _2383 = cbLight._m0[_2362].y + _717;
        float _2384 = cbLight._m0[_2362].z + _718;
        float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
        float _2389 = _2388 * _2382;
        float _2390 = _2388 * _2383;
        float _2391 = _2388 * _2384;
        float _2392 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2362].xyz));
        float _4320 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2396 = dot(vec3(_637, _638, _639), vec3(_2389, _2390, _2391));
        float _4331 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2400 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2389, _2390, _2391));
        float _4342 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2404 = _2381 * _2381;
        float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
        float _2417 = (exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2418 = 1.0 - _2381;
        float _2428 = (0.5 / (((_2054 * ((_2395 * _2418) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2418) + _2381) * _2395))) * _2395;
        float _4353 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2430 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
        float _2431 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2351 = (((_2417 * cbLight._m0[_2366].x) * _2430) * _2431) + _2241;
        _2353 = (((_2417 * cbLight._m0[_2366].y) * _2430) * _2431) + _2243;
        _2355 = (((_2417 * cbLight._m0[_2366].z) * _2430) * _2431) + _2245;
    }
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    if (_1884.y == 0u)
    {
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2506;
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2506;
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2506;
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.x;
        uint _2533 = uint((float(_2521.y) * floor(float(uint(cbSceneParam._m0[85u].y * _737) / _2522))) + floor(float(uint(cbSceneParam._m0[85u].x * _736) / _2522)));
        float _2543 = (log2(_2509 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2544 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        uint _2547 = uint(isnan(14.0) ? _2544 : (isnan(_2544) ? 14.0 : min(_2544, 14.0)));
        uvec4 _2552 = texelFetch(g_lightClusterGridBuffer, int(((_2547 << 2u) + (_2533 << 6u)) >> 2u));
        uint _2553 = _2552.x;
        uint _2554 = _2521.z;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        if (((((1u << ((_2554 >> 4u) & 15u)) + 4294967295u) & _2553) == 0u) || ((_2554 & 240u) == 0u))
        {
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
        }
        else
        {
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2665;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            uint _2813 = 0u;
            uint _2822;
            bool _2823;
            for (;;)
            {
                _2822 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2813 << 2u)) >> 2u)).x;
                _2823 = _2822 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2823)
                {
                    frontier_phi_66_pred = _2807;
                    frontier_phi_66_pred_1 = _2812;
                    frontier_phi_66_pred_2 = _2811;
                    frontier_phi_66_pred_3 = _2810;
                    frontier_phi_66_pred_4 = _2809;
                    frontier_phi_66_pred_5 = _2808;
                }
                else
                {
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    uint _2958;
                    _2952 = _2807;
                    _2953 = _2808;
                    _2954 = _2809;
                    _2955 = _2810;
                    _2956 = _2811;
                    _2957 = _2812;
                    _2958 = _2822;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    for (;;)
                    {
                        uint _2962 = uint(findLSB(_2958)) + (_2813 << 5u);
                        uint _2959 = (_2958 + 4294967295u) & _2958;
                        uint _2964 = _2962 * 48u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2984 = (_2962 * 48u) + 4u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3003 = (_2962 * 48u) + 8u;
                        vec3 _3014 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x));
                        float _3018 = _2978.x - _2507;
                        float _3019 = _2978.y - _2508;
                        float _3020 = _2978.z - _2509;
                        float _3021 = dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020));
                        float _3024 = inversesqrt(_3021);
                        float _3025 = _3024 * _3018;
                        float _3026 = _3024 * _3019;
                        float _3027 = _3024 * _3020;
                        float _3028 = dot(vec3(_755, _758, _761), vec3(_3025, _3026, _3027));
                        float _3033 = 1.0 - (_3021 * _2978.w);
                        float _4379 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3034 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3035 = sqrt(_3021) * _2997.w;
                        float _3038 = 1.39999997615814208984375 / (_3035 + 1.39999997615814208984375);
                        float _3039 = _3038 * _3038;
                        float _3042 = ((1.0 - _3039) * _3028) + _3039;
                        float _3045 = _3035 * _3035;
                        float _3049 = ((isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))) * _3034) / ((_3045 * 0.699999988079071044921875) + 1.0);
                        float _3053 = (-0.0) - _2507;
                        float _3054 = (-0.0) - _2508;
                        float _3055 = (-0.0) - _2509;
                        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                        float _3060 = _3059 * _3053;
                        float _3061 = _3059 * _3054;
                        float _3062 = _3059 * _3055;
                        float _3070 = exp2(log2(1.0 / ((_3045 * 3.5) + 5.0)) * 0.25);
                        float _3071 = 1.0 - _815;
                        float _3078 = sqrt(1.0 - ((1.0 - (_3071 * _3071)) * (1.0 - (_3070 * _3070))));
                        float _3079 = _3078 * _3078;
                        float _3080 = _3079 * _3079;
                        float _3081 = _3060 + _3025;
                        float _3082 = _3061 + _3026;
                        float _3083 = _3062 + _3027;
                        float _3087 = inversesqrt(dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083)));
                        float _3091 = dot(vec3(_755, _758, _761), vec3(_3060, _3061, _3062));
                        float _4395 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3094 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3095 = dot(vec3(_755, _758, _761), vec3(_3087 * _3081, _3087 * _3082, _3087 * _3083));
                        float _4406 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3098 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                        float _3102 = ((_3098 * _3098) * (_3080 + (-1.0))) + 1.0;
                        float _3103 = _3038 * _3079;
                        float _3104 = _3103 * _3103;
                        float _3107 = ((1.0 - _3104) * _3028) + _3104;
                        float _4417 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3109 = 1.0 - _3079;
                        float _3119 = (0.5 / (((_3108 * ((_3094 * _3109) + _3079)) + 9.9999999392252902907785028219223e-09) + (((_3108 * _3109) + _3079) * _3094))) * _3108;
                        float _4428 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3130 = (((_3080 * 3.1415927410125732421875) * (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) / ((_3102 * _3102) * ((_3045 * 2.1991131305694580078125) + 3.141590118408203125))) * _3034;
                        _2882 = (_3049 * _2997.x) + _2955;
                        _2883 = (_3049 * _2997.y) + _2956;
                        _2884 = (_3049 * _2997.z) + _2957;
                        _2879 = (_3130 * _3014.x) + _2952;
                        _2880 = (_3130 * _3014.y) + _2953;
                        _2881 = (_3130 * _3014.z) + _2954;
                        if (_2959 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2952 = _2879;
                            _2953 = _2880;
                            _2954 = _2881;
                            _2955 = _2882;
                            _2956 = _2883;
                            _2957 = _2884;
                            _2958 = _2959;
                        }
                    }
                    frontier_phi_66_pred = _2879;
                    frontier_phi_66_pred_1 = _2884;
                    frontier_phi_66_pred_2 = _2883;
                    frontier_phi_66_pred_3 = _2882;
                    frontier_phi_66_pred_4 = _2881;
                    frontier_phi_66_pred_5 = _2880;
                }
                _2655 = frontier_phi_66_pred;
                _2665 = frontier_phi_66_pred_1;
                _2663 = frontier_phi_66_pred_2;
                _2661 = frontier_phi_66_pred_3;
                _2659 = frontier_phi_66_pred_4;
                _2657 = frontier_phi_66_pred_5;
                uint _2814 = _2813 + 1u;
                if (_2814 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2807 = _2655;
                    _2808 = _2657;
                    _2809 = _2659;
                    _2810 = _2661;
                    _2811 = _2663;
                    _2812 = _2665;
                    _2813 = _2814;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
        }
        uvec4 _2668 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2669 = _2668.z;
        uint _2671 = (_2669 >> 8u) & 15u;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        if (((4294967295u << _2671) & _2553) == 0u)
        {
            _2775 = _2654;
            _2777 = _2656;
            _2779 = _2658;
            _2781 = _2660;
            _2783 = _2662;
            _2785 = _2664;
        }
        else
        {
            float _2800 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
            float _2801 = _2800 * _2507;
            float _2802 = _2800 * _2508;
            float _2803 = _2800 * _2509;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2671 < ((_2669 >> 12u) & 15u))
            {
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2935 = _2654;
                float _2936 = _2656;
                float _2937 = _2658;
                float _2938 = _2660;
                float _2939 = _2662;
                float _2940 = _2664;
                uint _2941 = _2671;
                uint _2950;
                bool _2951;
                for (;;)
                {
                    _2950 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                    _2951 = _2950 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2951)
                    {
                        frontier_phi_77_pred = _2940;
                        frontier_phi_77_pred_1 = _2939;
                        frontier_phi_77_pred_2 = _2938;
                        frontier_phi_77_pred_3 = _2937;
                        frontier_phi_77_pred_4 = _2936;
                        frontier_phi_77_pred_5 = _2935;
                    }
                    else
                    {
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3157 = _2935;
                        float _3158 = _2936;
                        float _3159 = _2937;
                        float _3160 = _2938;
                        float _3161 = _2939;
                        float _3162 = _2940;
                        uint _3163 = _2950;
                        uint _3164;
                        vec4 _3189;
                        float _3190;
                        vec4 _3205;
                        vec3 _3217;
                        vec4 _3232;
                        vec4 _3247;
                        float _3293;
                        bool _3294;
                        for (;;)
                        {
                            uint _3174 = ((_2941 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3163));
                            _3164 = (_3163 + 4294967295u) & _3163;
                            uint _3176 = _3174 * 40u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3190 = _3189.w;
                            uint _3192 = (_3174 * 40u) + 4u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3207 = (_3174 * 40u) + 8u;
                            _3217 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x));
                            uint _3219 = (_3174 * 40u) + 16u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3174 * 40u) + 20u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3249 = (_3174 * 40u) + 24u;
                            vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3268 = (_3174 * 40u) + 28u;
                            vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3293 = fma(_2509, _3281.z, fma(_2508, _3281.y, _3281.x * _2507)) + _3281.w;
                            _3294 = !((fma(_2509, _3262.z, fma(_2508, _3262.y, _3262.x * _2507)) + _3262.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3294)
                            {
                                float _3321 = _3189.x - _2507;
                                float _3322 = _3189.y - _2508;
                                float _3323 = _3189.z - _2509;
                                float _3324 = dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323));
                                float _3327 = inversesqrt(_3324);
                                float _3328 = _3327 * _3321;
                                float _3329 = _3327 * _3322;
                                float _3330 = _3327 * _3323;
                                float _3334 = 1.0 - (_3324 / (_3190 * _3190));
                                float _4439 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3339 = sqrt(_3324) * _3205.w;
                                float _3341 = 1.39999997615814208984375 / (_3339 + 1.39999997615814208984375);
                                float _3342 = _3341 * _3341;
                                float _3345 = ((1.0 - _3342) * dot(vec3(_3328, _3329, _3330), vec3(_755, _758, _761))) + _3342;
                                float _3348 = _3339 * _3339;
                                float _3352 = (fma(_2509, _3232.z, fma(_2508, _3232.y, _3232.x * _2507)) + _3232.w) / _3293;
                                float _3353 = (fma(_2509, _3247.z, fma(_2508, _3247.y, _3247.x * _2507)) + _3247.w) / _3293;
                                float _3357 = 1.0 - dot(vec2(_3352, _3353), vec2(_3352, _3353));
                                float _4455 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3359 = _3358 * (((isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0))) * _3335) / ((_3348 * 0.699999988079071044921875) + 1.0));
                                float _3371 = exp2(log2(1.0 / ((_3348 * 3.5) + 5.0)) * 0.25);
                                float _3372 = 1.0 - _815;
                                float _3379 = sqrt(1.0 - ((1.0 - (_3372 * _3372)) * (1.0 - (_3371 * _3371))));
                                float _3380 = _3379 * _3379;
                                float _3381 = _3380 * _3380;
                                float _3382 = _3328 - _2801;
                                float _3383 = _3329 - _2802;
                                float _3384 = _3330 - _2803;
                                float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                                float _3392 = dot(vec3(_755, _758, _761), vec3((-0.0) - _2801, (-0.0) - _2802, (-0.0) - _2803));
                                float _4466 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3395 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3396 = dot(vec3(_755, _758, _761), vec3(_3388 * _3382, _3388 * _3383, _3388 * _3384));
                                float _4477 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3399 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3403 = ((_3399 * _3399) * (_3381 + (-1.0))) + 1.0;
                                float _3404 = _3341 * _3380;
                                float _3405 = _3404 * _3404;
                                float _3411 = ((1.0 - _3405) * dot(vec3(_755, _758, _761), vec3(_3328, _3329, _3330))) + _3405;
                                float _4488 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3413 = 1.0 - _3380;
                                float _3423 = (0.5 / (((_3412 * ((_3395 * _3413) + _3380)) + 9.9999999392252902907785028219223e-09) + (((_3412 * _3413) + _3380) * _3395))) * _3412;
                                float _4499 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3433 = (_3358 * _3335) * (((_3381 * 3.1415927410125732421875) * (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) / ((_3403 * _3403) * ((_3348 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3359 * _3205.y;
                                frontier_phi_83_pred_1 = _3359 * _3205.x;
                                frontier_phi_83_pred_2 = _3433 * _3217.z;
                                frontier_phi_83_pred_3 = _3433 * _3217.y;
                                frontier_phi_83_pred_4 = _3433 * _3217.x;
                                frontier_phi_83_pred_5 = _3359 * _3205.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3441 = frontier_phi_83_pred;
                            _3440 = frontier_phi_83_pred_1;
                            _3439 = frontier_phi_83_pred_2;
                            _3438 = frontier_phi_83_pred_3;
                            _3437 = frontier_phi_83_pred_4;
                            _3442 = frontier_phi_83_pred_5;
                            _3147 = _3440 + _3160;
                            _3148 = _3441 + _3161;
                            _3149 = _3442 + _3162;
                            _3144 = _3437 + _3157;
                            _3145 = _3438 + _3158;
                            _3146 = _3439 + _3159;
                            if (_3164 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3164;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3149;
                        frontier_phi_77_pred_1 = _3148;
                        frontier_phi_77_pred_2 = _3147;
                        frontier_phi_77_pred_3 = _3146;
                        frontier_phi_77_pred_4 = _3145;
                        frontier_phi_77_pred_5 = _3144;
                    }
                    _2786 = frontier_phi_77_pred;
                    _2784 = frontier_phi_77_pred_1;
                    _2782 = frontier_phi_77_pred_2;
                    _2780 = frontier_phi_77_pred_3;
                    _2778 = frontier_phi_77_pred_4;
                    _2776 = frontier_phi_77_pred_5;
                    uint _2942 = _2941 + 1u;
                    if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2935 = _2776;
                        _2936 = _2778;
                        _2937 = _2780;
                        _2938 = _2782;
                        _2939 = _2784;
                        _2940 = _2786;
                        _2941 = _2942;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2780;
                frontier_phi_58_59_ladder_1 = _2786;
                frontier_phi_58_59_ladder_2 = _2784;
                frontier_phi_58_59_ladder_3 = _2782;
                frontier_phi_58_59_ladder_4 = _2778;
                frontier_phi_58_59_ladder_5 = _2776;
            }
            else
            {
                frontier_phi_58_59_ladder = _2658;
                frontier_phi_58_59_ladder_1 = _2664;
                frontier_phi_58_59_ladder_2 = _2662;
                frontier_phi_58_59_ladder_3 = _2660;
                frontier_phi_58_59_ladder_4 = _2656;
                frontier_phi_58_59_ladder_5 = _2654;
            }
            _2775 = frontier_phi_58_59_ladder_5;
            _2777 = frontier_phi_58_59_ladder_4;
            _2779 = frontier_phi_58_59_ladder;
            _2781 = frontier_phi_58_59_ladder_3;
            _2783 = frontier_phi_58_59_ladder_2;
            _2785 = frontier_phi_58_59_ladder_1;
        }
        float _2790 = isnan(1.0) ? _799 : (isnan(_799) ? 1.0 : min(_799, 1.0));
        _2566 = (_2790 * _2781) + _2018;
        _2568 = (_2790 * _2783) + _2020;
        _2570 = (_2790 * _2785) + _2022;
        _2572 = ((_2775 * 0.039999999105930328369140625) * _2790) + _2351;
        _2574 = ((_2777 * 0.039999999105930328369140625) * _2790) + _2353;
        _2576 = ((_2779 * 0.039999999105930328369140625) * _2790) + _2355;
    }
    else
    {
        _2566 = _2018;
        _2568 = _2020;
        _2570 = _2022;
        _2572 = _2351;
        _2574 = _2353;
        _2576 = _2355;
    }
    float _4515 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4526 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4537 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _2593 = ((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2566 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _799))) + ((_2572 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2594 = ((isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2568 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _799))) + ((_2574 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2595 = ((isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2570 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _799))) + ((_2576 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    uint _2596 = _238 + 6u;
    float _2604 = _736 / cbSceneParam._m0[86u].x;
    float _2605 = _737 / cbSceneParam._m0[86u].y;
    vec4 _2619 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2604, _2605, (log2((isnan(cbSceneParam._m0[77u].w) ? _658 : (isnan(_658) ? cbSceneParam._m0[77u].w : min(_658, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2621 = _2619.x;
    float _2622 = _2619.y;
    float _2623 = _2619.z;
    float _2624 = _2619.w;
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    if (_658 > cbSceneParam._m0[78u].w)
    {
        float _2679 = isnan(_658) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _658 : min(cbSceneParam._m0[80u].w, _658));
        float _2680 = _2679 / _658;
        float _2691 = _2680 * _709;
        float _2692 = _710 * _2680;
        float _2693 = (-0.0) - _2692;
        float _2695 = _2680 * _711;
        float _2697 = (cbSceneParam._m0[77u].w * _2693) / _2679;
        float _2698 = _2697 + cbSceneParam._m0[79u].w;
        float _2699 = cbSceneParam._m0[79u].w - _2692;
        float _2705 = sqrt(((_2691 * _2691) + (_2692 * _2692)) + (_2695 * _2695));
        float _2708 = (1.0 - (cbSceneParam._m0[77u].w / _2679)) * _2705;
        float _2713 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2715 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2892;
        if (abs((_2693 - _2697) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2892 = ((((_2698 > 0.0) ? exp2(_2713 * _2698) : (2.0 - exp2(_2715 * _2698))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2708;
        }
        else
        {
            float _2836 = 1.0 / cbSceneParam._m0[80u].x;
            float _2837 = isnan(_2699) ? _2698 : (isnan(_2698) ? _2699 : max(_2698, _2699));
            float _2838 = isnan(_2699) ? _2698 : (isnan(_2698) ? _2699 : min(_2698, _2699));
            float _2847 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : min(_2837, 0.0));
            float _2848 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : min(_2838, 0.0));
            _2892 = ((abs(_2705 / _2693) * cbSceneParam._m0[80u].y) * ((((_2847 - _2848) * 2.0) - ((exp2(_2713 * (isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0)))) - exp2(_2713 * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0))))) * _2836)) - ((exp2(_2715 * _2847) - exp2(_2715 * _2848)) * _2836))) + (_2708 * cbSceneParam._m0[80u].z);
        }
        vec4 _2894 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2604, _2605, 1.0), 0.0);
        float _2903 = exp2((_2892 * (-1.44269502162933349609375)) * (1.0 - _2894.w));
        float _2904 = log2(_2903);
        float _2920 = log2(_2624);
        _2717 = (exp2(_2920 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].x)) * _2894.x) / cbSceneParam._m0[78u].x)) + _2621;
        _2719 = (exp2(_2920 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].y)) * _2894.y) / cbSceneParam._m0[78u].y)) + _2622;
        _2721 = (exp2(_2920 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].z)) * _2894.z) / cbSceneParam._m0[78u].z)) + _2623;
        _2723 = _2903 * _2624;
    }
    else
    {
        _2717 = _2621;
        _2719 = _2622;
        _2721 = _2623;
        _2723 = _2624;
    }
    bool _2930;
    vec4 _2733;
    vec4 _2755;
    float _2757;
    float _2761;
    float _2762;
    float _2763;
    float _2764;
    bool _2774;
    for (;;)
    {
        _2733 = cbMatDynParam._m0[0u];
        float _2735 = roundEven(_2733.y);
        bool _2736 = _2735 == 3.0;
        float _2737 = log2(_2723);
        float _2744 = exp2(_2737 * cbSceneParam._m0[78u].x) * _2593;
        float _2745 = exp2(_2737 * cbSceneParam._m0[78u].y) * _2594;
        float _2746 = exp2(_2737 * cbSceneParam._m0[78u].z) * _2595;
        float _2753 = _725 + (-0.5);
        _2755 = cbMtdParam._m0[1u];
        _2757 = _2755.y * _2753;
        float _2760 = (_2735 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2761 = _2760 * (_2736 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2717)));
        _2762 = _2760 * (_2736 ? _2745 : (_2745 + (cbSceneParam._m0[72u].w * _2719)));
        _2763 = _2760 * (_2736 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2721)));
        _2764 = _2753 * 0.999000012874603271484375;
        _2774 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2774)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2764) < 0.5)
            {
                _2930 = true;
                break;
            }
        }
        uint _2871 = _774 + uint(_2733.w);
        if ((cbInstanceData._m0[_2871].w < 1.0) && ((cbInstanceData._m0[_2871].w + _2764) < 0.5))
        {
            _2930 = true;
            break;
        }
        if ((_2757 + 1.0) < _2755.x)
        {
            _2930 = true;
            break;
        }
        _2930 = false;
        break;
    }
    float _3135;
    if (_2930)
    {
        discard_state = true;
        _3135 = 0.0;
    }
    else
    {
        _3135 = cbInstanceData._m0[_2596].w;
    }
    SV_Target.x = _2761;
    SV_Target.y = _2762;
    SV_Target.z = _2763;
    SV_Target.w = _3135;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2596].w;
    discard_exit();
}


