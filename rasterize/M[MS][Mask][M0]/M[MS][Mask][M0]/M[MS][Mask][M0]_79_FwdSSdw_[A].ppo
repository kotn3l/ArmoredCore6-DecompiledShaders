#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1531;
float _3913;
float _3914;
float _3915;
float _3916;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3925 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3936 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3947 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _374 = _369.x * cbMtdParam._m0[11u].x;
    float _375 = _369.y * cbMtdParam._m0[11u].y;
    float _376 = _369.z * cbMtdParam._m0[11u].z;
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _451 = _449.x;
    float _463 = dot(vec4(_451, _449.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _480 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _414.x) * 2.0) - ((((_451 - _463) * cbMtdParam._m0[24u].z) + _463) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3958 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _488 = (_481 * ((_395.x * cbMtdParam._m0[12u].x) - _374)) + _374;
    float _489 = (_481 * ((_395.y * cbMtdParam._m0[12u].y) - _375)) + _375;
    float _490 = (_481 * ((_395.z * cbMtdParam._m0[12u].z) - _376)) + _376;
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _529 = _527.x;
    float _539 = dot(vec4(_529, _527.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _553 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _414.y) * 2.0) - ((((_529 - _539) * cbMtdParam._m0[24u].z) + _539) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3969 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _564 = (_343.x * cbMtdParam._m0[9u].x) * ((_554 * ((_507.x * cbMtdParam._m0[13u].x) - _488)) + _488);
    float _565 = (_343.y * cbMtdParam._m0[9u].y) * ((_554 * ((_507.y * cbMtdParam._m0[13u].y) - _489)) + _489);
    float _566 = (_343.z * cbMtdParam._m0[9u].z) * ((_554 * ((_507.z * cbMtdParam._m0[13u].z) - _490)) + _490);
    float _570 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _564;
    float _573 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _565;
    float _576 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _566;
    float _584 = (((_564 - _570) * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) + _570) * 4.55000019073486328125;
    float _586 = (((_565 - _573) * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) + _573) * 4.55000019073486328125;
    float _588 = (((_566 - _576) * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) + _576) * 4.55000019073486328125;
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _649 = _647.x;
    float _650 = _647.y;
    float _651 = _647.z;
    float _658 = ((_630.x - _649) * _481) + _649;
    float _659 = ((_630.y - _650) * _481) + _650;
    float _660 = ((_630.z - _651) * _481) + _651;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _685 = ((_672.z - _660) * _554) + _660;
    float _688 = ((((_672.x - _658) * _554) + _658) * 2.0) + (-1.0);
    float _689 = ((((_672.y - _659) * _554) + _659) * 2.0) + (-1.0);
    float _690 = dot(vec2(_688, _689), vec2(_688, _689));
    float _3980 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _695 = sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))));
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _725 = (_688 + ((((_605.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_713.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _726 = (_689 + ((((_605.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_713.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _729 = fma(_695, _256, fma(_726, _263, _725 * _249));
    float _732 = fma(_695, _257, fma(_726, _264, _725 * _250));
    float _735 = fma(_695, _258, fma(_726, _265, _725 * _251));
    float _739 = inversesqrt(dot(vec3(_729, _732, _735), vec3(_729, _732, _735)));
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _768 = _766.x;
    float _769 = 1.0 - _768;
    float _775 = (cbMtdParam._m0[19u].x + dot(vec4(_739 * _729, _739 * _732, _739 * _735, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_768 - _769) * cbMtdParam._m0[24u].w) + _769) * cbMtdParam._m0[21u].z);
    float _3991 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _776 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _778 = (-0.0) - cbMtdParam._m0[24u].x;
    float _780 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
    float _788 = _776 - ((_776 * TEXCOORD_8.x) * _781);
    float _789 = _776 - ((_776 * TEXCOORD_8.y) * _781);
    float _790 = _776 - ((_776 * TEXCOORD_8.z) * _781);
    float _797 = (_788 * (cbMtdParam._m0[17u].x - _584)) + _584;
    float _798 = (_789 * (cbMtdParam._m0[17u].y - _586)) + _586;
    float _799 = (_790 * (cbMtdParam._m0[17u].z - _588)) + _588;
    vec4 _811 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _813 = _811.x;
    float _814 = 1.0 - _813;
    float _840 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_813 - _814) * cbMtdParam._m0[24u].y) + _814) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4012 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _841 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _849 = ((((cbMtdParam._m0[10u].x - _797) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _841) + _797;
    float _850 = ((((cbMtdParam._m0[10u].y - _798) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _841) + _798;
    float _851 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _799)) * _841) + _799;
    float _856 = (((_605.z - _685) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _685;
    float _860 = ((_713.z - _856) * cbMtdParam._m0[19u].w) + _856;
    vec4 _874 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _881 = (_874.x * 2.0) + (-1.0);
    float _882 = (_874.y * 2.0) + (-1.0);
    float _883 = dot(vec2(_881, _882), vec2(_881, _882));
    float _4023 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _891 = ((_874.z - _860) * _788) + _860;
    float _894 = ((cbMtdParam._m0[23u].y - _891) * _841) + _891;
    vec4 _915 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _921 = (_915.x * 2.0) + (-1.0);
    float _922 = (_915.y * 2.0) + (-1.0);
    float _923 = dot(vec2(_921, _922), vec2(_921, _922));
    float _4034 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _938 = ((sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) - _695) * _790) + _695;
    float _941 = (((_881 - _725) * _788) + _725) + (cbMtdParam._m0[21u].x * _725);
    float _942 = (((_882 - _726) * _789) + _726) + (cbMtdParam._m0[21u].x * _726);
    float _953 = (((_921 - _941) + (_941 * cbMtdParam._m0[22u].z)) * _841) + _941;
    float _954 = (((_922 - _942) + (_942 * cbMtdParam._m0[22u].z)) * _841) + _942;
    float _955 = (_841 * (sqrt(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) - _938)) + _938;
    float _957 = cbMtdParam._m0[22u].x + _713.w;
    float _960 = fma(_955, _256, fma(_954, _263, _953 * _249));
    float _963 = fma(_955, _257, fma(_954, _264, _953 * _250));
    float _966 = fma(_955, _258, fma(_954, _265, _953 * _251));
    float _970 = inversesqrt(dot(vec3(_960, _963, _966), vec3(_960, _963, _966)));
    float _971 = _970 * _960;
    float _972 = _970 * _963;
    float _973 = _970 * _966;
    float _4045 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _974 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4067 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4078 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4089 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _992 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1042 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1032);
    float _1043 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1032);
    float _1044 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1032);
    float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
    float _1049 = _1042 * _1048;
    float _1050 = _1043 * _1048;
    float _1051 = _1044 * _1048;
    vec4 _1056 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1058 = _1056.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1212 = sqrt(((_1042 * _1042) + (_1043 * _1043)) + (_1044 * _1044));
        float _1218 = (cbMatDynParam._m0[5u].x * _1212) + cbMatDynParam._m0[5u].y;
        float _4100 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1223 = (cbMatDynParam._m0[5u].z * _1212) + cbMatDynParam._m0[5u].w;
        float _4111 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) - _1219)) + _1219) < ((_1058 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1069 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1070 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1088 = fma(_973, cbSceneParam._m0[5u].z, fma(_972, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _971));
    float _1091 = fma(_973, cbSceneParam._m0[6u].z, fma(_972, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _971));
    float _1094 = fma(_973, cbSceneParam._m0[7u].z, fma(_972, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _971));
    uint _1107 = _287 + 9u;
    uint _1108 = _1107 + uint(cbMatDynParam._m0[0u].w);
    float _1114 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * cbInstanceData._m0[_1108].x;
    float _1115 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * cbInstanceData._m0[_1108].y;
    float _1116 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * cbInstanceData._m0[_1108].z;
    float _4122 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1117 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1118 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1119 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    vec4 _1128 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1069, cbSceneParam._m0[86u].y * _1070));
    float _1132 = ((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * TEXCOORD_5.w) * _1128.x;
    float _1133 = dot(vec3(_971, _972, _973), vec3(_1049, _1050, _1051));
    float _1136 = _1133 * 2.0;
    float _1140 = (_1136 * _971) - _1049;
    float _1141 = (_1136 * _972) - _1050;
    float _1142 = (_1136 * _973) - _1051;
    float _1146 = abs(dot(vec3(_1049, _1050, _1051), vec3(_971, _972, _973)));
    float _4155 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = sqrt(_974);
    float _1161 = exp2((_1148 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1148 * 3.0));
    float _1193 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1201 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1530;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1255 = fma(_1201, cbModelParam._m0[26u].z, fma(_1197, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1193));
        float _1259 = fma(_1201, cbModelParam._m0[27u].z, fma(_1197, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1193));
        float _1263 = fma(_1201, cbModelParam._m0[28u].z, fma(_1197, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1193));
        float _1288 = _1193 + _971;
        float _1289 = _1197 + _972;
        float _1290 = _1201 + _973;
        float _1300 = fma(_1290, cbModelParam._m0[26u].z, fma(_1289, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1288)) - _1255;
        float _1301 = fma(_1290, cbModelParam._m0[27u].z, fma(_1289, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1288)) - _1259;
        float _1302 = fma(_1290, cbModelParam._m0[28u].z, fma(_1289, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1288)) - _1263;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1319 = ((_1306 * _1300) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1255 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1301) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1259 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1306 * _1302) / cbModelParam._m0[34u].z) + ((((((_1263 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        float _1358 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1324.x + (-0.5));
        float _1360 = _1358 * (_1324.y + (-0.5));
        float _1361 = _1358 * (_1324.z + (-0.5));
        float _1368 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1331.x + (-0.5));
        float _1370 = _1368 * (_1331.y + (-0.5));
        float _1371 = _1368 * (_1331.z + (-0.5));
        float _1378 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1338.x + (-0.5));
        float _1380 = _1378 * (_1338.y + (-0.5));
        float _1381 = _1378 * (_1338.z + (-0.5));
        float _1388 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1345.x + (-0.5));
        float _1390 = _1388 * (_1345.y + (-0.5));
        float _1391 = _1388 * (_1345.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1412 = (dot(vec3(_971, _972, _973), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1422 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4203 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1424 + 1.0))) + _1429) * _1392;
        float _1439 = _1360 * 0.5;
        float _1440 = _1370 * 0.5;
        float _1441 = _1380 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_971, _972, _973), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4236 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1466 + 1.0))) + _1471) * _1393;
        float _1481 = _1361 * 0.5;
        float _1482 = _1371 * 0.5;
        float _1483 = _1381 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_971, _972, _973), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4269 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1508 + 1.0))) + _1513) * _1394;
        _1530 = _1361;
        _1532 = _1360;
        _1533 = _1359;
        _1534 = _1371;
        _1535 = _1370;
        _1536 = _1369;
        _1537 = _1381;
        _1538 = _1380;
        _1539 = _1379;
        _1540 = _1394;
        _1541 = _1393;
        _1542 = _1392;
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
    }
    else
    {
        _1530 = _1531;
        _1532 = _1531;
        _1533 = _1531;
        _1534 = _1531;
        _1535 = _1531;
        _1536 = _1531;
        _1537 = _1531;
        _1538 = _1531;
        _1539 = _1531;
        _1540 = _1531;
        _1541 = _1531;
        _1542 = _1531;
        _1543 = 0.0;
        _1544 = 0.0;
        _1545 = 0.0;
    }
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1572 = fma(_1201, cbModelParam._m0[30u].z, fma(_1197, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193));
        float _1576 = fma(_1201, cbModelParam._m0[31u].z, fma(_1197, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193));
        float _1580 = fma(_1201, cbModelParam._m0[32u].z, fma(_1197, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193));
        float _1603 = _1193 + _971;
        float _1604 = _1197 + _972;
        float _1605 = _1201 + _973;
        float _1615 = fma(_1605, cbModelParam._m0[30u].z, fma(_1604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1603)) - _1572;
        float _1616 = fma(_1605, cbModelParam._m0[31u].z, fma(_1604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1603)) - _1576;
        float _1617 = fma(_1605, cbModelParam._m0[32u].z, fma(_1604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1603)) - _1580;
        float _1621 = inversesqrt(dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617)));
        float _1634 = ((_1621 * _1615) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1572 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1621 * _1616) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1576 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1636 = ((_1621 * _1617) / cbModelParam._m0[35u].z) + ((((((_1580 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        float _1671 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1638.x + (-0.5));
        float _1673 = _1671 * (_1638.y + (-0.5));
        float _1674 = _1671 * (_1638.z + (-0.5));
        float _1681 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1645.x + (-0.5));
        float _1683 = _1681 * (_1645.y + (-0.5));
        float _1684 = _1681 * (_1645.z + (-0.5));
        float _1691 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1652.x + (-0.5));
        float _1693 = _1691 * (_1652.y + (-0.5));
        float _1694 = _1691 * (_1652.z + (-0.5));
        float _1701 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1659.x + (-0.5));
        float _1703 = _1701 * (_1659.y + (-0.5));
        float _1704 = _1701 * (_1659.z + (-0.5));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = _1672 * 0.5;
        float _1709 = _1682 * 0.5;
        float _1710 = _1692 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_971, _972, _973), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4332 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1735 + 1.0))) + _1740) * _1705;
        float _1750 = _1673 * 0.5;
        float _1751 = _1683 * 0.5;
        float _1752 = _1693 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_971, _972, _973), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4365 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1777 + 1.0))) + _1782) * _1706;
        float _1792 = _1674 * 0.5;
        float _1793 = _1684 * 0.5;
        float _1794 = _1694 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_971, _972, _973), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4398 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1819 + 1.0))) + _1824) * _1707;
        _1841 = _1674;
        _1842 = _1673;
        _1843 = _1672;
        _1844 = _1684;
        _1845 = _1683;
        _1846 = _1682;
        _1847 = _1694;
        _1848 = _1693;
        _1849 = _1692;
        _1850 = _1707;
        _1851 = _1706;
        _1852 = _1705;
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
    }
    else
    {
        _1841 = _1531;
        _1842 = _1531;
        _1843 = _1531;
        _1844 = _1531;
        _1845 = _1531;
        _1846 = _1531;
        _1847 = _1531;
        _1848 = _1531;
        _1849 = _1531;
        _1850 = _1531;
        _1851 = _1531;
        _1852 = _1531;
        _1853 = 0.0;
        _1854 = 0.0;
        _1855 = 0.0;
    }
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1543)) + _1543;
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1544)) + _1544;
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1545)) + _1545;
    float _1888 = fma(_1867, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1865 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1867, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1865 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1867, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1865));
    float _1909 = _1140 * 0.5;
    float _1910 = _1141 * 0.5;
    float _1911 = _1142 * 0.5;
    float _1912 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1915 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1918 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1952;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1925 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1530, _1534, _1537, _1540));
        float _1929 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1532, _1535, _1538, _1541));
        float _1933 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1940 = dot(vec4(cbModelParam._m0[39u]), vec4(_1909, _1910, _1911, 1.0));
        _1952 = dot(vec3(isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1940) ? 0.0 : (isnan(0.0) ? _1940 : max(0.0, _1940))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1952 = 1.0;
    }
    float _1963;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1954 = dot(vec4(cbModelParam._m0[40u]), vec4(_1909, _1910, _1911, 1.0));
        _1963 = dot(vec3(isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1954) ? 0.0 : (isnan(0.0) ? _1954 : max(0.0, _1954))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1963 = 1.0;
    }
    float _1967 = (_1963 * cbModelParam._m0[1u].x) + (_1952 * (1.0 - cbModelParam._m0[1u].x));
    float _1977 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _974);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1977 : min(cbModelParam._m0[25u].z, _1977));
    float _2059;
    float _2061;
    float _2063;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2026 = fma(_1201, cbModelParam._m0[13u].z, fma(_1197, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1193)) + cbModelParam._m0[13u].w;
        float _2030 = fma(_1201, cbModelParam._m0[14u].z, fma(_1197, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1193)) + cbModelParam._m0[14u].w;
        float _2034 = fma(_1201, cbModelParam._m0[15u].z, fma(_1197, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1193)) + cbModelParam._m0[15u].w;
        float _2037 = fma(_1142, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140));
        float _2040 = fma(_1142, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140));
        float _2043 = fma(_1142, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140));
        float _2071;
        if (_2037 > 0.0)
        {
            _2071 = abs((1.0 - _2026) / _2037);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2026 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2071 = frontier_phi_17_15_ladder;
        }
        float _2293;
        if (_2040 > 0.0)
        {
            _2293 = abs((1.0 - _2030) / _2040);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2030 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2293 = frontier_phi_26_22_ladder;
        }
        float _2539;
        if (_2043 > 0.0)
        {
            _2539 = abs((1.0 - _2034) / _2043);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2034 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2539 = frontier_phi_38_33_ladder;
        }
        float _2541 = isnan(_2293) ? _2071 : (isnan(_2071) ? _2293 : min(_2071, _2293));
        float _2542 = isnan(_2539) ? _2541 : (isnan(_2541) ? _2539 : min(_2541, _2539));
        float _2546 = (_2542 * _2037) + _2026;
        float _2547 = (_2542 * _2040) + _2030;
        float _2548 = (_2542 * _2043) + _2034;
        float _2549 = _2542 * 9.9999997473787516355514526367188e-05;
        float _2551 = (-1.0) - _2549;
        float _2553 = _2549 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2548 > _2553) || ((_2548 < _2551) || ((_2547 > _2553) || ((_2547 < _2551) || ((_2546 < _2551) || (_2546 > _2553))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2672 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2548, cbModelParam._m0[9u].z, fma(_2547, cbModelParam._m0[9u].y, _2546 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2548, cbModelParam._m0[10u].z, fma(_2547, cbModelParam._m0[10u].y, _2546 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2548, cbModelParam._m0[11u].z, fma(_2547, cbModelParam._m0[11u].y, _2546 * cbModelParam._m0[11u].x))), _1978);
            frontier_phi_16_38_ladder = _2672.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2672.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2672.x * cbModelParam._m0[1u].y;
        }
        _2059 = frontier_phi_16_38_ladder_2;
        _2061 = frontier_phi_16_38_ladder_1;
        _2063 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2047 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1140, _1141, _1142), _1978);
        _2059 = _2047.x * cbModelParam._m0[1u].y;
        _2061 = _2047.y * cbModelParam._m0[1u].y;
        _2063 = _2047.z * cbModelParam._m0[1u].y;
    }
    float _2067 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _974);
    float _2068 = isnan(_2067) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2067 : min(cbModelParam._m0[25u].w, _2067));
    float _2158;
    float _2160;
    float _2162;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2122 = fma(_1201, cbModelParam._m0[21u].z, fma(_1197, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1193)) + cbModelParam._m0[21u].w;
        float _2126 = fma(_1201, cbModelParam._m0[22u].z, fma(_1197, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1193)) + cbModelParam._m0[22u].w;
        float _2130 = fma(_1201, cbModelParam._m0[23u].z, fma(_1197, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1193)) + cbModelParam._m0[23u].w;
        float _2133 = fma(_1142, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140));
        float _2136 = fma(_1142, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140));
        float _2139 = fma(_1142, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140));
        float _2298;
        if (_2133 > 0.0)
        {
            _2298 = abs((1.0 - _2122) / _2133);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2122 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2298 = frontier_phi_28_24_ladder;
        }
        float _2566;
        if (_2136 > 0.0)
        {
            _2566 = abs((1.0 - _2126) / _2136);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2126 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2566 = frontier_phi_40_35_ladder;
        }
        float _2771;
        if (_2139 > 0.0)
        {
            _2771 = abs((1.0 - _2130) / _2139);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2130 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2771 = frontier_phi_49_46_ladder;
        }
        float _2773 = isnan(_2566) ? _2298 : (isnan(_2298) ? _2566 : min(_2298, _2566));
        float _2774 = isnan(_2771) ? _2773 : (isnan(_2773) ? _2771 : min(_2773, _2771));
        float _2778 = (_2774 * _2133) + _2122;
        float _2779 = (_2774 * _2136) + _2126;
        float _2780 = (_2774 * _2139) + _2130;
        float _2781 = _2774 * 9.9999997473787516355514526367188e-05;
        float _2782 = (-1.0) - _2781;
        float _2784 = _2781 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2780 > _2784) || ((_2780 < _2782) || ((_2779 > _2784) || ((_2779 < _2782) || ((_2778 < _2782) || (_2778 > _2784))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2780, cbModelParam._m0[17u].z, fma(_2779, cbModelParam._m0[17u].y, _2778 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2780, cbModelParam._m0[18u].z, fma(_2779, cbModelParam._m0[18u].y, _2778 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2780, cbModelParam._m0[19u].z, fma(_2779, cbModelParam._m0[19u].y, _2778 * cbModelParam._m0[19u].x))), _2068);
            frontier_phi_25_49_ladder = _2979.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2979.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2979.x * cbModelParam._m0[1u].z;
        }
        _2158 = frontier_phi_25_49_ladder_2;
        _2160 = frontier_phi_25_49_ladder_1;
        _2162 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2142 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1140, _1141, _1142), _2068);
        _2158 = _2142.x * cbModelParam._m0[1u].z;
        _2160 = _2142.y * cbModelParam._m0[1u].z;
        _2162 = _2142.z * cbModelParam._m0[1u].z;
    }
    float _2174 = ((((1.0 - _1161) * ((_1148 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1161 * _1148)) * _1132;
    float _2175 = _2174 * ((cbModelParam._m0[1u].w * (_2158 - _2059)) + _2059);
    float _2176 = _2174 * ((cbModelParam._m0[1u].w * (_2160 - _2061)) + _2061);
    float _2177 = _2174 * ((cbModelParam._m0[1u].w * (_2162 - _2063)) + _2063);
    float _2180 = fma(_2177, cbSceneParam._m0[89u].z, fma(_2176, cbSceneParam._m0[89u].y, _2175 * cbSceneParam._m0[89u].x));
    float _2183 = fma(_2177, cbSceneParam._m0[90u].z, fma(_2176, cbSceneParam._m0[90u].y, _2175 * cbSceneParam._m0[90u].x));
    float _2186 = fma(_2177, cbSceneParam._m0[91u].z, fma(_2176, cbSceneParam._m0[91u].y, _2175 * cbSceneParam._m0[91u].x));
    vec4 _2194 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1069, _1070));
    float _2196 = _2194.w;
    float _2208 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2196);
    float _2209 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2196);
    float _2210 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2196);
    uvec4 _2214 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2216 = _2214.x * 14u;
    uint _2217 = _2216 + 13u;
    float _2224 = _1132 + (-1.0);
    float _2229 = (cbLight._m0[_2217].x * _2224) + 1.0;
    float _2230 = (cbLight._m0[_2217].y * _2224) + 1.0;
    float _2231 = (cbLight._m0[_2217].z * _2224) + 1.0;
    float _2232 = (cbLight._m0[_2217].w * _2224) + 1.0;
    uint _2233 = _2216 + 5u;
    float _2239 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2243 = _2216 + 4u;
    float _2252 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
    uint _2256 = _2216 | 1u;
    float _2267 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_971, _972, _973));
    float _2270 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_971, _972, _973));
    float _4534 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _4545 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2275 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2277 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * 0.3183098733425140380859375;
    float _2284 = ((cbLight._m0[_2233].x * _2239) * _2277) + (((cbLight._m0[_2243].x * _2208) * _2252) * _2275);
    float _2285 = ((_2239 * cbLight._m0[_2233].y) * _2277) + (((cbLight._m0[_2243].y * _2209) * _2252) * _2275);
    float _2286 = ((_2239 * cbLight._m0[_2233].z) * _2277) + (((cbLight._m0[_2243].z * _2210) * _2252) * _2275);
    uvec4 _2290 = floatBitsToUint(cbLight._m0[_2216 + 12u]);
    bool _2292 = _2290.x == 0u;
    float _2303;
    float _2305;
    float _2307;
    if (_2292)
    {
        _2303 = _2284;
        _2305 = _2285;
        _2307 = _2286;
    }
    else
    {
        uint _2311 = _2216 + 6u;
        float _2327 = (dot(vec3(cbLight._m0[_2216 + 2u].xyz), vec3(_971, _972, _973)) * 0.5) + 0.5;
        float _2328 = _2327 * _2327;
        float _4556 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2329 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2330 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2303 = (((cbLight._m0[_2311].x * 0.3183098733425140380859375) * _2329) * _2330) + _2284;
        _2305 = (((cbLight._m0[_2311].y * 0.3183098733425140380859375) * _2329) * _2330) + _2285;
        _2307 = (((cbLight._m0[_2311].z * 0.3183098733425140380859375) * _2329) * _2330) + _2286;
    }
    bool _2310 = _2290.y == 0u;
    float _2348;
    float _2350;
    float _2352;
    if (_2310)
    {
        _2348 = _2303;
        _2350 = _2305;
        _2352 = _2307;
    }
    else
    {
        uint _2510 = _2216 + 7u;
        float _2526 = (dot(vec3(cbLight._m0[_2216 + 3u].xyz), vec3(_971, _972, _973)) * 0.5) + 0.5;
        float _2527 = _2526 * _2526;
        float _4572 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2528 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2529 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2348 = (((cbLight._m0[_2510].x * 0.3183098733425140380859375) * _2528) * _2529) + _2303;
        _2350 = (((cbLight._m0[_2510].y * 0.3183098733425140380859375) * _2528) * _2529) + _2305;
        _2352 = (((cbLight._m0[_2510].z * 0.3183098733425140380859375) * _2528) * _2529) + _2307;
    }
    uint _2355 = _2216 + 8u;
    float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _974) * 0.949999988079071044921875);
    float _2369 = _2368 * _2368;
    float _2370 = cbLight._m0[_2216].x + _1049;
    float _2371 = cbLight._m0[_2216].y + _1050;
    float _2372 = cbLight._m0[_2216].z + _1051;
    float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
    float _2377 = _2376 * _2370;
    float _2378 = _2376 * _2371;
    float _2379 = _2376 * _2372;
    float _2380 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2216].xyz));
    float _4588 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _4599 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _2384 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2385 = dot(vec3(_971, _972, _973), vec3(_2377, _2378, _2379));
    float _4610 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2377, _2378, _2379));
    float _4621 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2369 * _2369;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2408 = (exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2409 = 1.0 - _2369;
    float _2420 = (0.5 / (((_2384 * ((_2383 * _2409) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2409) + _2369) * _2383))) * _2383;
    float _4632 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2422 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    uint _2436 = _2216 + 9u;
    float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _974) * 0.949999988079071044921875);
    float _2448 = _2447 * _2447;
    float _2449 = cbLight._m0[_2256].x + _1049;
    float _2450 = cbLight._m0[_2256].y + _1050;
    float _2451 = cbLight._m0[_2256].z + _1051;
    float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
    float _2456 = _2455 * _2449;
    float _2457 = _2455 * _2450;
    float _2458 = _2455 * _2451;
    float _2459 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2256].xyz));
    float _4643 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2463 = dot(vec3(_971, _972, _973), vec3(_2456, _2457, _2458));
    float _4654 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2466 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _2467 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2456, _2457, _2458));
    float _4665 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2471 = _2448 * _2448;
    float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
    float _2484 = (exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2485 = 1.0 - _2448;
    float _2495 = (0.5 / (((_2384 * ((_2462 * _2485) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2485) + _2448) * _2462))) * _2462;
    float _4676 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2497 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
    float _2507 = (((_2484 * cbLight._m0[_2436].x) * _2497) * _2239) + ((((cbLight._m0[_2355].x * _2208) * _2408) * _2422) * _2252);
    float _2508 = (((_2484 * cbLight._m0[_2436].y) * _2497) * _2239) + ((((cbLight._m0[_2355].y * _2209) * _2408) * _2422) * _2252);
    float _2509 = (((_2484 * cbLight._m0[_2436].z) * _2497) * _2239) + ((((cbLight._m0[_2355].z * _2210) * _2408) * _2422) * _2252);
    float _2571;
    float _2573;
    float _2575;
    if (_2292)
    {
        _2571 = _2507;
        _2573 = _2508;
        _2575 = _2509;
    }
    else
    {
        uint _2577 = _2216 + 2u;
        uint _2581 = _2216 + 10u;
        float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2577].w)) * _974) * 0.949999988079071044921875);
        float _2596 = _2595 * _2595;
        float _2597 = cbLight._m0[_2577].x + _1049;
        float _2598 = cbLight._m0[_2577].y + _1050;
        float _2599 = cbLight._m0[_2577].z + _1051;
        float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
        float _2604 = _2603 * _2597;
        float _2605 = _2603 * _2598;
        float _2606 = _2603 * _2599;
        float _2607 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2577].xyz));
        float _4687 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2611 = dot(vec3(_971, _972, _973), vec3(_2604, _2605, _2606));
        float _4698 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2615 = dot(vec3(cbLight._m0[_2577].xyz), vec3(_2604, _2605, _2606));
        float _4709 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2619 = _2596 * _2596;
        float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
        float _2632 = (exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2633 = 1.0 - _2596;
        float _2643 = (0.5 / (((_2384 * ((_2610 * _2633) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2633) + _2596) * _2610))) * _2610;
        float _4720 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2645 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
        float _2646 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2571 = (((_2632 * cbLight._m0[_2581].x) * _2645) * _2646) + _2507;
        _2573 = (((_2632 * cbLight._m0[_2581].y) * _2645) * _2646) + _2508;
        _2575 = (((_2632 * cbLight._m0[_2581].z) * _2645) * _2646) + _2509;
    }
    float _2681;
    float _2683;
    float _2685;
    if (_2310)
    {
        _2681 = _2571;
        _2683 = _2573;
        _2685 = _2575;
    }
    else
    {
        uint _2692 = _2216 + 3u;
        uint _2696 = _2216 + 11u;
        float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2692].w)) * _974) * 0.949999988079071044921875);
        float _2711 = _2710 * _2710;
        float _2712 = cbLight._m0[_2692].x + _1049;
        float _2713 = cbLight._m0[_2692].y + _1050;
        float _2714 = cbLight._m0[_2692].z + _1051;
        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
        float _2719 = _2718 * _2712;
        float _2720 = _2718 * _2713;
        float _2721 = _2718 * _2714;
        float _2722 = dot(vec3(_971, _972, _973), vec3(cbLight._m0[_2692].xyz));
        float _4736 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2726 = dot(vec3(_971, _972, _973), vec3(_2719, _2720, _2721));
        float _4747 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2730 = dot(vec3(cbLight._m0[_2692].xyz), vec3(_2719, _2720, _2721));
        float _4758 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2734 = _2711 * _2711;
        float _2738 = ((_2729 * _2729) * (_2734 + (-1.0))) + 1.0;
        float _2747 = (exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2748 = 1.0 - _2711;
        float _2758 = (0.5 / (((_2384 * ((_2725 * _2748) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2748) + _2711) * _2725))) * _2725;
        float _4769 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2760 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2734 / ((_2738 * _2738) * 3.141590118408203125));
        float _2761 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2681 = (((_2747 * cbLight._m0[_2696].x) * _2760) * _2761) + _2571;
        _2683 = (((_2747 * cbLight._m0[_2696].y) * _2760) * _2761) + _2573;
        _2685 = (((_2747 * cbLight._m0[_2696].z) * _2760) * _2761) + _2575;
    }
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_2214.y == 0u)
    {
        float _2836 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2837 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2836;
        float _2838 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2836;
        float _2839 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2836;
        uvec4 _2851 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2852 = _2851.x;
        uint _2863 = uint((float(_2851.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1070) / _2852))) + floor(float(uint(cbSceneParam._m0[85u].x * _1069) / _2852)));
        float _2873 = (log2(_2839 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2874 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        uint _2877 = uint(isnan(14.0) ? _2874 : (isnan(_2874) ? 14.0 : min(_2874, 14.0)));
        uvec4 _2882 = texelFetch(g_lightClusterGridBuffer, int(((_2877 << 2u) + (_2863 << 6u)) >> 2u));
        uint _2883 = _2882.x;
        uint _2884 = _2851.z;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((((1u << ((_2884 >> 4u) & 15u)) + 4294967295u) & _2883) == 0u) || ((_2884 & 240u) == 0u))
        {
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
        }
        else
        {
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            uint _3142 = 0u;
            uint _3151;
            bool _3152;
            for (;;)
            {
                _3151 = texelFetch(g_lightClassification, int((((_2877 << 5u) + (_2863 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                _3152 = _3151 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3152)
                {
                    frontier_phi_66_pred = _3136;
                    frontier_phi_66_pred_1 = _3141;
                    frontier_phi_66_pred_2 = _3140;
                    frontier_phi_66_pred_3 = _3139;
                    frontier_phi_66_pred_4 = _3138;
                    frontier_phi_66_pred_5 = _3137;
                }
                else
                {
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    uint _3287;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3151;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    for (;;)
                    {
                        uint _3291 = uint(findLSB(_3287)) + (_3142 << 5u);
                        uint _3288 = (_3287 + 4294967295u) & _3287;
                        uint _3293 = _3291 * 48u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 3u)).x));
                        uint _3313 = (_3291 * 48u) + 4u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 3u)).x));
                        uint _3332 = (_3291 * 48u) + 8u;
                        vec3 _3343 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x));
                        float _3347 = _3307.x - _2837;
                        float _3348 = _3307.y - _2838;
                        float _3349 = _3307.z - _2839;
                        float _3350 = dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349));
                        float _3353 = inversesqrt(_3350);
                        float _3354 = _3353 * _3347;
                        float _3355 = _3353 * _3348;
                        float _3356 = _3353 * _3349;
                        float _3357 = dot(vec3(_1088, _1091, _1094), vec3(_3354, _3355, _3356));
                        float _3362 = 1.0 - (_3350 * _3307.w);
                        float _4795 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3363 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3364 = sqrt(_3350) * _3326.w;
                        float _3367 = 1.39999997615814208984375 / (_3364 + 1.39999997615814208984375);
                        float _3368 = _3367 * _3367;
                        float _3371 = ((1.0 - _3368) * _3357) + _3368;
                        float _3374 = _3364 * _3364;
                        float _3378 = ((isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))) * _3363) / ((_3374 * 0.699999988079071044921875) + 1.0);
                        float _3382 = (-0.0) - _2837;
                        float _3383 = (-0.0) - _2838;
                        float _3384 = (-0.0) - _2839;
                        float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                        float _3389 = _3388 * _3382;
                        float _3390 = _3388 * _3383;
                        float _3391 = _3388 * _3384;
                        float _3399 = exp2(log2(1.0 / ((_3374 * 3.5) + 5.0)) * 0.25);
                        float _3400 = 1.0 - _1148;
                        float _3407 = sqrt(1.0 - ((1.0 - (_3400 * _3400)) * (1.0 - (_3399 * _3399))));
                        float _3408 = _3407 * _3407;
                        float _3409 = _3408 * _3408;
                        float _3410 = _3389 + _3354;
                        float _3411 = _3390 + _3355;
                        float _3412 = _3391 + _3356;
                        float _3416 = inversesqrt(dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412)));
                        float _3420 = dot(vec3(_1088, _1091, _1094), vec3(_3389, _3390, _3391));
                        float _4811 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3423 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3424 = dot(vec3(_1088, _1091, _1094), vec3(_3416 * _3410, _3416 * _3411, _3416 * _3412));
                        float _4822 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3427 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3431 = ((_3427 * _3427) * (_3409 + (-1.0))) + 1.0;
                        float _3432 = _3367 * _3408;
                        float _3433 = _3432 * _3432;
                        float _3436 = ((1.0 - _3433) * _3357) + _3433;
                        float _4833 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3437 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3438 = 1.0 - _3408;
                        float _3448 = (0.5 / (((_3437 * ((_3423 * _3438) + _3408)) + 9.9999999392252902907785028219223e-09) + (((_3437 * _3438) + _3408) * _3423))) * _3437;
                        float _4844 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3459 = (((_3409 * 3.1415927410125732421875) * (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) / ((_3431 * _3431) * ((_3374 * 2.1991131305694580078125) + 3.141590118408203125))) * _3363;
                        _3211 = (_3378 * _3326.x) + _3284;
                        _3212 = (_3378 * _3326.y) + _3285;
                        _3213 = (_3378 * _3326.z) + _3286;
                        _3208 = (_3459 * _3343.x) + _3281;
                        _3209 = (_3459 * _3343.y) + _3282;
                        _3210 = (_3459 * _3343.z) + _3283;
                        if (_3288 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3288;
                        }
                    }
                    frontier_phi_66_pred = _3208;
                    frontier_phi_66_pred_1 = _3213;
                    frontier_phi_66_pred_2 = _3212;
                    frontier_phi_66_pred_3 = _3211;
                    frontier_phi_66_pred_4 = _3210;
                    frontier_phi_66_pred_5 = _3209;
                }
                _2985 = frontier_phi_66_pred;
                _2995 = frontier_phi_66_pred_1;
                _2993 = frontier_phi_66_pred_2;
                _2991 = frontier_phi_66_pred_3;
                _2989 = frontier_phi_66_pred_4;
                _2987 = frontier_phi_66_pred_5;
                uint _3143 = _3142 + 1u;
                if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3136 = _2985;
                    _3137 = _2987;
                    _3138 = _2989;
                    _3139 = _2991;
                    _3140 = _2993;
                    _3141 = _2995;
                    _3142 = _3143;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
        }
        uvec4 _2998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2999 = _2998.z;
        uint _3001 = (_2999 >> 8u) & 15u;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        if (((4294967295u << _3001) & _2883) == 0u)
        {
            _3104 = _2984;
            _3106 = _2986;
            _3108 = _2988;
            _3110 = _2990;
            _3112 = _2992;
            _3114 = _2994;
        }
        else
        {
            float _3129 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
            float _3130 = _3129 * _2837;
            float _3131 = _3129 * _2838;
            float _3132 = _3129 * _2839;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3001 < ((_2999 >> 12u) & 15u))
            {
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3264 = _2984;
                float _3265 = _2986;
                float _3266 = _2988;
                float _3267 = _2990;
                float _3268 = _2992;
                float _3269 = _2994;
                uint _3270 = _3001;
                uint _3279;
                bool _3280;
                for (;;)
                {
                    _3279 = texelFetch(g_lightClassification, int((((_2877 << 5u) + (_2863 << 9u)) + (_3270 << 2u)) >> 2u)).x;
                    _3280 = _3279 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3280)
                    {
                        frontier_phi_77_pred = _3269;
                        frontier_phi_77_pred_1 = _3268;
                        frontier_phi_77_pred_2 = _3267;
                        frontier_phi_77_pred_3 = _3266;
                        frontier_phi_77_pred_4 = _3265;
                        frontier_phi_77_pred_5 = _3264;
                    }
                    else
                    {
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3486 = _3264;
                        float _3487 = _3265;
                        float _3488 = _3266;
                        float _3489 = _3267;
                        float _3490 = _3268;
                        float _3491 = _3269;
                        uint _3492 = _3279;
                        uint _3493;
                        vec4 _3518;
                        float _3519;
                        vec4 _3534;
                        vec3 _3546;
                        vec4 _3561;
                        vec4 _3576;
                        float _3622;
                        bool _3623;
                        for (;;)
                        {
                            uint _3503 = ((_3270 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3492));
                            _3493 = (_3492 + 4294967295u) & _3492;
                            uint _3505 = _3503 * 40u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            _3519 = _3518.w;
                            uint _3521 = (_3503 * 40u) + 4u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3503 * 40u) + 8u;
                            _3546 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x));
                            uint _3548 = (_3503 * 40u) + 16u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3503 * 40u) + 20u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3503 * 40u) + 24u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3597 = (_3503 * 40u) + 28u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            _3622 = fma(_2839, _3610.z, fma(_2838, _3610.y, _3610.x * _2837)) + _3610.w;
                            _3623 = !((fma(_2839, _3591.z, fma(_2838, _3591.y, _3591.x * _2837)) + _3591.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3623)
                            {
                                float _3650 = _3518.x - _2837;
                                float _3651 = _3518.y - _2838;
                                float _3652 = _3518.z - _2839;
                                float _3653 = dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652));
                                float _3656 = inversesqrt(_3653);
                                float _3657 = _3656 * _3650;
                                float _3658 = _3656 * _3651;
                                float _3659 = _3656 * _3652;
                                float _3663 = 1.0 - (_3653 / (_3519 * _3519));
                                float _4855 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3668 = sqrt(_3653) * _3534.w;
                                float _3670 = 1.39999997615814208984375 / (_3668 + 1.39999997615814208984375);
                                float _3671 = _3670 * _3670;
                                float _3674 = ((1.0 - _3671) * dot(vec3(_3657, _3658, _3659), vec3(_1088, _1091, _1094))) + _3671;
                                float _3677 = _3668 * _3668;
                                float _3681 = (fma(_2839, _3561.z, fma(_2838, _3561.y, _3561.x * _2837)) + _3561.w) / _3622;
                                float _3682 = (fma(_2839, _3576.z, fma(_2838, _3576.y, _3576.x * _2837)) + _3576.w) / _3622;
                                float _3686 = 1.0 - dot(vec2(_3681, _3682), vec2(_3681, _3682));
                                float _4871 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3688 = _3687 * (((isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0))) * _3664) / ((_3677 * 0.699999988079071044921875) + 1.0));
                                float _3700 = exp2(log2(1.0 / ((_3677 * 3.5) + 5.0)) * 0.25);
                                float _3701 = 1.0 - _1148;
                                float _3708 = sqrt(1.0 - ((1.0 - (_3701 * _3701)) * (1.0 - (_3700 * _3700))));
                                float _3709 = _3708 * _3708;
                                float _3710 = _3709 * _3709;
                                float _3711 = _3657 - _3130;
                                float _3712 = _3658 - _3131;
                                float _3713 = _3659 - _3132;
                                float _3717 = inversesqrt(dot(vec3(_3711, _3712, _3713), vec3(_3711, _3712, _3713)));
                                float _3721 = dot(vec3(_1088, _1091, _1094), vec3((-0.0) - _3130, (-0.0) - _3131, (-0.0) - _3132));
                                float _4882 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3725 = dot(vec3(_1088, _1091, _1094), vec3(_3717 * _3711, _3717 * _3712, _3717 * _3713));
                                float _4893 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3728 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3732 = ((_3728 * _3728) * (_3710 + (-1.0))) + 1.0;
                                float _3733 = _3670 * _3709;
                                float _3734 = _3733 * _3733;
                                float _3740 = ((1.0 - _3734) * dot(vec3(_1088, _1091, _1094), vec3(_3657, _3658, _3659))) + _3734;
                                float _4904 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3742 = 1.0 - _3709;
                                float _3752 = (0.5 / (((_3741 * ((_3724 * _3742) + _3709)) + 9.9999999392252902907785028219223e-09) + (((_3741 * _3742) + _3709) * _3724))) * _3741;
                                float _4915 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3762 = (_3687 * _3664) * (((_3710 * 3.1415927410125732421875) * (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) / ((_3732 * _3732) * ((_3677 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3688 * _3534.y;
                                frontier_phi_83_pred_1 = _3688 * _3534.x;
                                frontier_phi_83_pred_2 = _3762 * _3546.z;
                                frontier_phi_83_pred_3 = _3762 * _3546.y;
                                frontier_phi_83_pred_4 = _3762 * _3546.x;
                                frontier_phi_83_pred_5 = _3688 * _3534.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3770 = frontier_phi_83_pred;
                            _3769 = frontier_phi_83_pred_1;
                            _3768 = frontier_phi_83_pred_2;
                            _3767 = frontier_phi_83_pred_3;
                            _3766 = frontier_phi_83_pred_4;
                            _3771 = frontier_phi_83_pred_5;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            if (_3493 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3493;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3478;
                        frontier_phi_77_pred_1 = _3477;
                        frontier_phi_77_pred_2 = _3476;
                        frontier_phi_77_pred_3 = _3475;
                        frontier_phi_77_pred_4 = _3474;
                        frontier_phi_77_pred_5 = _3473;
                    }
                    _3115 = frontier_phi_77_pred;
                    _3113 = frontier_phi_77_pred_1;
                    _3111 = frontier_phi_77_pred_2;
                    _3109 = frontier_phi_77_pred_3;
                    _3107 = frontier_phi_77_pred_4;
                    _3105 = frontier_phi_77_pred_5;
                    uint _3271 = _3270 + 1u;
                    if (_3271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3264 = _3105;
                        _3265 = _3107;
                        _3266 = _3109;
                        _3267 = _3111;
                        _3268 = _3113;
                        _3269 = _3115;
                        _3270 = _3271;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3109;
                frontier_phi_58_59_ladder_1 = _3115;
                frontier_phi_58_59_ladder_2 = _3113;
                frontier_phi_58_59_ladder_3 = _3111;
                frontier_phi_58_59_ladder_4 = _3107;
                frontier_phi_58_59_ladder_5 = _3105;
            }
            else
            {
                frontier_phi_58_59_ladder = _2988;
                frontier_phi_58_59_ladder_1 = _2994;
                frontier_phi_58_59_ladder_2 = _2992;
                frontier_phi_58_59_ladder_3 = _2990;
                frontier_phi_58_59_ladder_4 = _2986;
                frontier_phi_58_59_ladder_5 = _2984;
            }
            _3104 = frontier_phi_58_59_ladder_5;
            _3106 = frontier_phi_58_59_ladder_4;
            _3108 = frontier_phi_58_59_ladder;
            _3110 = frontier_phi_58_59_ladder_3;
            _3112 = frontier_phi_58_59_ladder_2;
            _3114 = frontier_phi_58_59_ladder_1;
        }
        float _3119 = isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0));
        _2896 = (_3119 * _3110) + _2348;
        _2898 = (_3119 * _3112) + _2350;
        _2900 = (_3119 * _3114) + _2352;
        _2902 = ((_3104 * 0.039999999105930328369140625) * _3119) + _2681;
        _2904 = ((_3106 * 0.039999999105930328369140625) * _3119) + _2683;
        _2906 = ((_3108 * 0.039999999105930328369140625) * _3119) + _2685;
    }
    else
    {
        _2896 = _2348;
        _2898 = _2350;
        _2900 = _2352;
        _2902 = _2681;
        _2904 = _2683;
        _2906 = _2685;
    }
    float _4931 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _4942 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _4953 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _2923 = ((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2896 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1132))) + ((_2902 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    float _2924 = ((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2898 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1132))) + ((_2904 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    float _2925 = ((isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2900 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1132))) + ((_2906 + ((isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    uint _2926 = _287 + 6u;
    float _2934 = _1069 / cbSceneParam._m0[86u].x;
    float _2935 = _1070 / cbSceneParam._m0[86u].y;
    vec4 _2949 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, (log2((isnan(cbSceneParam._m0[77u].w) ? _992 : (isnan(_992) ? cbSceneParam._m0[77u].w : min(_992, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2951 = _2949.x;
    float _2952 = _2949.y;
    float _2953 = _2949.z;
    float _2954 = _2949.w;
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    if (_992 > cbSceneParam._m0[78u].w)
    {
        float _3009 = isnan(_992) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _992 : min(cbSceneParam._m0[80u].w, _992));
        float _3010 = _3009 / _992;
        float _3021 = _3010 * _1042;
        float _3022 = _1043 * _3010;
        float _3023 = (-0.0) - _3022;
        float _3024 = _3010 * _1044;
        float _3026 = (cbSceneParam._m0[77u].w * _3023) / _3009;
        float _3027 = _3026 + cbSceneParam._m0[79u].w;
        float _3028 = cbSceneParam._m0[79u].w - _3022;
        float _3034 = sqrt(((_3021 * _3021) + (_3022 * _3022)) + (_3024 * _3024));
        float _3037 = (1.0 - (cbSceneParam._m0[77u].w / _3009)) * _3034;
        float _3042 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3044 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3221;
        if (abs((_3023 - _3026) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3221 = ((((_3027 > 0.0) ? exp2(_3042 * _3027) : (2.0 - exp2(_3044 * _3027))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3037;
        }
        else
        {
            float _3165 = 1.0 / cbSceneParam._m0[80u].x;
            float _3166 = isnan(_3028) ? _3027 : (isnan(_3027) ? _3028 : max(_3027, _3028));
            float _3167 = isnan(_3028) ? _3027 : (isnan(_3027) ? _3028 : min(_3027, _3028));
            float _3176 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : min(_3166, 0.0));
            float _3177 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : min(_3167, 0.0));
            _3221 = ((abs(_3034 / _3023) * cbSceneParam._m0[80u].y) * ((((_3176 - _3177) * 2.0) - ((exp2(_3042 * (isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0)))) - exp2(_3042 * (isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))))) * _3165)) - ((exp2(_3044 * _3176) - exp2(_3044 * _3177)) * _3165))) + (_3037 * cbSceneParam._m0[80u].z);
        }
        vec4 _3223 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, 1.0), 0.0);
        float _3232 = exp2((_3221 * (-1.44269502162933349609375)) * (1.0 - _3223.w));
        float _3233 = log2(_3232);
        float _3249 = log2(_2954);
        _3046 = (exp2(_3249 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].x)) * _3223.x) / cbSceneParam._m0[78u].x)) + _2951;
        _3048 = (exp2(_3249 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].y)) * _3223.y) / cbSceneParam._m0[78u].y)) + _2952;
        _3050 = (exp2(_3249 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].z)) * _3223.z) / cbSceneParam._m0[78u].z)) + _2953;
        _3052 = _3232 * _2954;
    }
    else
    {
        _3046 = _2951;
        _3048 = _2952;
        _3050 = _2953;
        _3052 = _2954;
    }
    bool _3259;
    vec4 _3062;
    vec4 _3084;
    float _3086;
    float _3090;
    float _3091;
    float _3092;
    float _3093;
    bool _3103;
    for (;;)
    {
        _3062 = cbMatDynParam._m0[0u];
        float _3064 = roundEven(_3062.y);
        bool _3065 = _3064 == 3.0;
        float _3066 = log2(_3052);
        float _3073 = exp2(_3066 * cbSceneParam._m0[78u].x) * _2923;
        float _3074 = exp2(_3066 * cbSceneParam._m0[78u].y) * _2924;
        float _3075 = exp2(_3066 * cbSceneParam._m0[78u].z) * _2925;
        float _3082 = _1058 + (-0.5);
        _3084 = cbMtdParam._m0[1u];
        _3086 = _3084.y * _3082;
        float _3089 = (_3064 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3090 = _3089 * (_3065 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3046)));
        _3091 = _3089 * (_3065 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3048)));
        _3092 = _3089 * (_3065 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3050)));
        _3093 = _3082 * 0.999000012874603271484375;
        _3103 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3103)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3093) < 0.5)
            {
                _3259 = true;
                break;
            }
        }
        uint _3200 = _1107 + uint(_3062.w);
        if ((cbInstanceData._m0[_3200].w < 1.0) && ((cbInstanceData._m0[_3200].w + _3093) < 0.5))
        {
            _3259 = true;
            break;
        }
        if ((_3086 + 1.0) < _3084.x)
        {
            _3259 = true;
            break;
        }
        _3259 = false;
        break;
    }
    float _3464;
    if (_3259)
    {
        discard_state = true;
        _3464 = 0.0;
    }
    else
    {
        _3464 = cbInstanceData._m0[_2926].w;
    }
    SV_Target.x = _3090;
    SV_Target.y = _3091;
    SV_Target.z = _3092;
    SV_Target.w = _3464;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2926].w;
    discard_exit();
}


