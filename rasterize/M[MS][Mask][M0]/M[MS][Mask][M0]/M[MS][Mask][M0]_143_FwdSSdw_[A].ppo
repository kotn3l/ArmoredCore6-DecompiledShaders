#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1498;
float _3878;
float _3879;
float _3880;
float _3881;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3890 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3901 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3912 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _382.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[24u].z) + _434) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3923 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _459 = (_452 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _460 = (_452 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _461 = (_452 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _382.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[24u].z) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3934 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _299) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _300) + cbTextureTilingScale._m0[24u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _571 = _569.x;
    float _581 = dot(vec4(_571, _569.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _593 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _382.z) * 2.0) - ((((_571 - _581) * cbMtdParam._m0[24u].z) + _581) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3945 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _601 = (_594 * ((_552.x * cbMtdParam._m0[14u].x) - _532)) + _532;
    float _602 = (_594 * ((_552.y * cbMtdParam._m0[14u].y) - _533)) + _533;
    float _603 = (_594 * ((_552.z * cbMtdParam._m0[14u].z) - _534)) + _534;
    float _607 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _601;
    float _610 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _602;
    float _613 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _603;
    float _620 = ((_601 - _607) * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) + _607;
    float _621 = ((_602 - _610) * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) + _610;
    float _622 = ((_603 - _613) * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) + _613;
    vec4 _640 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _703 = _701.x;
    float _704 = _701.y;
    float _705 = _701.z;
    float _712 = ((_684.x - _703) * _452) + _703;
    float _713 = ((_684.y - _704) * _452) + _704;
    float _714 = ((_684.z - _705) * _452) + _705;
    vec4 _726 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _737 = ((_726.x - _712) * _525) + _712;
    float _738 = ((_726.y - _713) * _525) + _713;
    float _739 = ((_726.z - _714) * _525) + _714;
    vec4 _751 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _299) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _300) + cbTextureTilingScale._m0[23u].w));
    float _764 = ((_751.z - _739) * _594) + _739;
    float _767 = ((((_751.x - _737) * _594) + _737) * 2.0) + (-1.0);
    float _768 = ((((_751.y - _738) * _594) + _738) * 2.0) + (-1.0);
    float _769 = dot(vec2(_767, _768), vec2(_767, _768));
    float _3956 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _774 = sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))));
    vec4 _792 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _804 = (_767 + ((((_659.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_792.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _805 = (_768 + ((((_659.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_792.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _808 = fma(_774, _247, fma(_805, _254, _804 * _240));
    float _811 = fma(_774, _248, fma(_805, _255, _804 * _241));
    float _814 = fma(_774, _249, fma(_805, _256, _804 * _242));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    vec4 _845 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _847 = _845.x;
    float _848 = 1.0 - _847;
    float _854 = (cbMtdParam._m0[19u].x + dot(vec4(_818 * _808, _818 * _811, _818 * _814, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_847 - _848) * cbMtdParam._m0[24u].w) + _848) * cbMtdParam._m0[21u].z);
    float _3967 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _855 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _862 = (_855 * ((_640.x * cbMtdParam._m0[18u].x) - _620)) + _620;
    float _863 = (_855 * ((_640.y * cbMtdParam._m0[18u].y) - _621)) + _621;
    float _864 = (_855 * ((_640.z * cbMtdParam._m0[18u].z) - _622)) + _622;
    float _869 = (((_659.z - _764) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _764;
    float _873 = ((_792.z - _869) * cbMtdParam._m0[19u].w) + _869;
    vec4 _886 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _893 = (_886.x * 2.0) + (-1.0);
    float _894 = (_886.y * 2.0) + (-1.0);
    float _895 = dot(vec2(_893, _894), vec2(_893, _894));
    float _3978 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _903 = ((_886.z - _873) * _855) + _873;
    float _913 = ((sqrt(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) - _774) * _855) + _774;
    float _916 = (((_893 - _804) * _855) + _804) + (cbMtdParam._m0[21u].x * _804);
    float _917 = (((_894 - _805) * _855) + _805) + (cbMtdParam._m0[21u].x * _805);
    float _921 = cbMtdParam._m0[22u].x + _792.w;
    float _924 = fma(_913, _247, fma(_917, _254, _916 * _240));
    float _927 = fma(_913, _248, fma(_917, _255, _916 * _241));
    float _930 = fma(_913, _249, fma(_917, _256, _916 * _242));
    float _934 = inversesqrt(dot(vec3(_924, _927, _930), vec3(_924, _927, _930)));
    float _935 = _934 * _924;
    float _936 = _934 * _927;
    float _937 = _934 * _930;
    float _3989 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _938 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _4011 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4022 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4033 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _956 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1008 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _998);
    float _1009 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _998);
    float _1010 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _998);
    float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
    float _1015 = _1008 * _1014;
    float _1016 = _1009 * _1014;
    float _1017 = _1010 * _1014;
    vec4 _1022 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1024 = _1022.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1178 = sqrt(((_1008 * _1008) + (_1009 * _1009)) + (_1010 * _1010));
        float _1184 = (cbMatDynParam._m0[5u].x * _1178) + cbMatDynParam._m0[5u].y;
        float _4044 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1189 = (cbMatDynParam._m0[5u].z * _1178) + cbMatDynParam._m0[5u].w;
        float _4055 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) - _1185)) + _1185) < ((_1024 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1035 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1036 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1054 = fma(_937, cbSceneParam._m0[5u].z, fma(_936, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _935));
    float _1057 = fma(_937, cbSceneParam._m0[6u].z, fma(_936, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _935));
    float _1060 = fma(_937, cbSceneParam._m0[7u].z, fma(_936, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _935));
    uint _1073 = _280 + 9u;
    uint _1074 = _1073 + uint(cbMatDynParam._m0[0u].w);
    float _1080 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_1074].x;
    float _1081 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_1074].y;
    float _1082 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_1074].z;
    float _4066 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1085 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    vec4 _1094 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1035, cbSceneParam._m0[86u].y * _1036));
    float _1098 = ((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * TEXCOORD_5.w) * _1094.x;
    float _1099 = dot(vec3(_935, _936, _937), vec3(_1015, _1016, _1017));
    float _1102 = _1099 * 2.0;
    float _1106 = (_1102 * _935) - _1015;
    float _1107 = (_1102 * _936) - _1016;
    float _1108 = (_1102 * _937) - _1017;
    float _1112 = abs(dot(vec3(_1015, _1016, _1017), vec3(_935, _936, _937)));
    float _4099 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1114 = sqrt(_938);
    float _1127 = exp2((_1114 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1114 * 3.0));
    float _1159 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1497;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1222 = fma(_1167, cbModelParam._m0[26u].z, fma(_1163, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1159));
        float _1226 = fma(_1167, cbModelParam._m0[27u].z, fma(_1163, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1159));
        float _1230 = fma(_1167, cbModelParam._m0[28u].z, fma(_1163, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1159));
        float _1255 = _1159 + _935;
        float _1256 = _1163 + _936;
        float _1257 = _1167 + _937;
        float _1267 = fma(_1257, cbModelParam._m0[26u].z, fma(_1256, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1255)) - _1222;
        float _1268 = fma(_1257, cbModelParam._m0[27u].z, fma(_1256, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1255)) - _1226;
        float _1269 = fma(_1257, cbModelParam._m0[28u].z, fma(_1256, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1255)) - _1230;
        float _1273 = inversesqrt(dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269)));
        float _1286 = ((_1273 * _1267) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1222 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1273 * _1268) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1226 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1273 * _1269) / cbModelParam._m0[34u].z) + ((((((_1230 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        float _1325 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1291.x + (-0.5));
        float _1327 = _1325 * (_1291.y + (-0.5));
        float _1328 = _1325 * (_1291.z + (-0.5));
        float _1335 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1298.x + (-0.5));
        float _1337 = _1335 * (_1298.y + (-0.5));
        float _1338 = _1335 * (_1298.z + (-0.5));
        float _1345 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1305.x + (-0.5));
        float _1347 = _1345 * (_1305.y + (-0.5));
        float _1348 = _1345 * (_1305.z + (-0.5));
        float _1355 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1312.x + (-0.5));
        float _1357 = _1355 * (_1312.y + (-0.5));
        float _1358 = _1355 * (_1312.z + (-0.5));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = _1326 * 0.5;
        float _1363 = _1336 * 0.5;
        float _1364 = _1346 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1379 = (dot(vec3(_935, _936, _937), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1389 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4147 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1391 + 1.0))) + _1396) * _1359;
        float _1406 = _1327 * 0.5;
        float _1407 = _1337 * 0.5;
        float _1408 = _1347 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_935, _936, _937), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4180 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1433 + 1.0))) + _1438) * _1360;
        float _1448 = _1328 * 0.5;
        float _1449 = _1338 * 0.5;
        float _1450 = _1348 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_935, _936, _937), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4213 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1475 + 1.0))) + _1480) * _1361;
        _1497 = _1328;
        _1499 = _1327;
        _1500 = _1326;
        _1501 = _1338;
        _1502 = _1337;
        _1503 = _1336;
        _1504 = _1348;
        _1505 = _1347;
        _1506 = _1346;
        _1507 = _1361;
        _1508 = _1360;
        _1509 = _1359;
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1512 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
    }
    else
    {
        _1497 = _1498;
        _1499 = _1498;
        _1500 = _1498;
        _1501 = _1498;
        _1502 = _1498;
        _1503 = _1498;
        _1504 = _1498;
        _1505 = _1498;
        _1506 = _1498;
        _1507 = _1498;
        _1508 = _1498;
        _1509 = _1498;
        _1510 = 0.0;
        _1511 = 0.0;
        _1512 = 0.0;
    }
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1538 = fma(_1167, cbModelParam._m0[30u].z, fma(_1163, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1159));
        float _1542 = fma(_1167, cbModelParam._m0[31u].z, fma(_1163, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1159));
        float _1546 = fma(_1167, cbModelParam._m0[32u].z, fma(_1163, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1159));
        float _1569 = _1159 + _935;
        float _1570 = _1163 + _936;
        float _1571 = _1167 + _937;
        float _1581 = fma(_1571, cbModelParam._m0[30u].z, fma(_1570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1569)) - _1538;
        float _1582 = fma(_1571, cbModelParam._m0[31u].z, fma(_1570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1569)) - _1542;
        float _1583 = fma(_1571, cbModelParam._m0[32u].z, fma(_1570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1569)) - _1546;
        float _1587 = inversesqrt(dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583)));
        float _1600 = ((_1587 * _1581) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1538 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1601 = ((_1587 * _1582) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1542 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1602 = ((_1587 * _1583) / cbModelParam._m0[35u].z) + ((((((_1546 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        float _1637 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1604.x + (-0.5));
        float _1639 = _1637 * (_1604.y + (-0.5));
        float _1640 = _1637 * (_1604.z + (-0.5));
        float _1647 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1611.x + (-0.5));
        float _1649 = _1647 * (_1611.y + (-0.5));
        float _1650 = _1647 * (_1611.z + (-0.5));
        float _1657 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1618.x + (-0.5));
        float _1659 = _1657 * (_1618.y + (-0.5));
        float _1660 = _1657 * (_1618.z + (-0.5));
        float _1667 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1625.x + (-0.5));
        float _1669 = _1667 * (_1625.y + (-0.5));
        float _1670 = _1667 * (_1625.z + (-0.5));
        float _1671 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1672 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = _1638 * 0.5;
        float _1675 = _1648 * 0.5;
        float _1676 = _1658 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_935, _936, _937), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1671 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4276 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1701 + 1.0))) + _1706) * _1671;
        float _1716 = _1639 * 0.5;
        float _1717 = _1649 * 0.5;
        float _1718 = _1659 * 0.5;
        float _1719 = dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718));
        float _1724 = (_1719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1719);
        float _1732 = (dot(vec3(_935, _936, _937), vec3(_1724 * _1716, _1724 * _1717, _1724 * _1718)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718)) / (_1672 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1743 = _1742 * 2.0;
        float _1747 = (1.0 - _1742) / (_1742 + 1.0);
        float _4309 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1757 = ((((1.0 - _1748) * (_1743 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1743 + 1.0))) + _1748) * _1672;
        float _1758 = _1640 * 0.5;
        float _1759 = _1650 * 0.5;
        float _1760 = _1660 * 0.5;
        float _1761 = dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760));
        float _1766 = (_1761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1761);
        float _1774 = (dot(vec3(_935, _936, _937), vec3(_1766 * _1758, _1766 * _1759, _1766 * _1760)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1785 = _1784 * 2.0;
        float _1789 = (1.0 - _1784) / (_1784 + 1.0);
        float _4342 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1799 = ((((1.0 - _1790) * (_1785 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1785 + 1.0))) + _1790) * _1673;
        _1807 = _1640;
        _1808 = _1639;
        _1809 = _1638;
        _1810 = _1650;
        _1811 = _1649;
        _1812 = _1648;
        _1813 = _1660;
        _1814 = _1659;
        _1815 = _1658;
        _1816 = _1673;
        _1817 = _1672;
        _1818 = _1671;
        _1819 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
        _1820 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)));
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)));
    }
    else
    {
        _1807 = _1498;
        _1808 = _1498;
        _1809 = _1498;
        _1810 = _1498;
        _1811 = _1498;
        _1812 = _1498;
        _1813 = _1498;
        _1814 = _1498;
        _1815 = _1498;
        _1816 = _1498;
        _1817 = _1498;
        _1818 = _1498;
        _1819 = 0.0;
        _1820 = 0.0;
        _1821 = 0.0;
    }
    float _1831 = (cbModelParam._m0[1u].x * (_1819 - _1510)) + _1510;
    float _1832 = (cbModelParam._m0[1u].x * (_1820 - _1511)) + _1511;
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1512)) + _1512;
    float _1854 = fma(_1833, cbSceneParam._m0[89u].z, fma(_1832, cbSceneParam._m0[89u].y, _1831 * cbSceneParam._m0[89u].x));
    float _1857 = fma(_1833, cbSceneParam._m0[90u].z, fma(_1832, cbSceneParam._m0[90u].y, _1831 * cbSceneParam._m0[90u].x));
    float _1860 = fma(_1833, cbSceneParam._m0[91u].z, fma(_1832, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1831));
    float _1875 = _1106 * 0.5;
    float _1876 = _1107 * 0.5;
    float _1877 = _1108 * 0.5;
    float _1878 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1881 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1808, _1811, _1814, _1817));
    float _1884 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1807, _1810, _1813, _1816));
    float _1918;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1891 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1497, _1501, _1504, _1507));
        float _1895 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1499, _1502, _1505, _1508));
        float _1899 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1500, _1503, _1506, _1509));
        float _1906 = dot(vec4(cbModelParam._m0[39u]), vec4(_1875, _1876, _1877, 1.0));
        _1918 = dot(vec3(isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1918 = 1.0;
    }
    float _1929;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1920 = dot(vec4(cbModelParam._m0[40u]), vec4(_1875, _1876, _1877, 1.0));
        _1929 = dot(vec3(isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1920) ? 0.0 : (isnan(0.0) ? _1920 : max(0.0, _1920))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1929 = 1.0;
    }
    float _1933 = (_1929 * cbModelParam._m0[1u].x) + (_1918 * (1.0 - cbModelParam._m0[1u].x));
    float _1943 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _938);
    float _1944 = isnan(_1943) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1943 : min(cbModelParam._m0[25u].z, _1943));
    float _2024;
    float _2026;
    float _2028;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1991 = fma(_1167, cbModelParam._m0[13u].z, fma(_1163, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1159)) + cbModelParam._m0[13u].w;
        float _1995 = fma(_1167, cbModelParam._m0[14u].z, fma(_1163, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1159)) + cbModelParam._m0[14u].w;
        float _1999 = fma(_1167, cbModelParam._m0[15u].z, fma(_1163, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1159)) + cbModelParam._m0[15u].w;
        float _2002 = fma(_1108, cbModelParam._m0[13u].z, fma(_1107, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1106));
        float _2005 = fma(_1108, cbModelParam._m0[14u].z, fma(_1107, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1106));
        float _2008 = fma(_1108, cbModelParam._m0[15u].z, fma(_1107, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1106));
        float _2036;
        if (_2002 > 0.0)
        {
            _2036 = abs((1.0 - _1991) / _2002);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1991 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2036 = frontier_phi_17_15_ladder;
        }
        float _2257;
        if (_2005 > 0.0)
        {
            _2257 = abs((1.0 - _1995) / _2005);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1995 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2257 = frontier_phi_26_22_ladder;
        }
        float _2503;
        if (_2008 > 0.0)
        {
            _2503 = abs((1.0 - _1999) / _2008);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1999 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2503 = frontier_phi_38_33_ladder;
        }
        float _2505 = isnan(_2257) ? _2036 : (isnan(_2036) ? _2257 : min(_2036, _2257));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _2002) + _1991;
        float _2511 = (_2506 * _2005) + _1995;
        float _2512 = (_2506 * _2008) + _1999;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2515 = (-1.0) - _2513;
        float _2517 = _2513 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2512 > _2517) || ((_2512 < _2515) || ((_2511 > _2517) || ((_2511 < _2515) || ((_2510 < _2515) || (_2510 > _2517))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2636 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2512, cbModelParam._m0[9u].z, fma(_2511, cbModelParam._m0[9u].y, _2510 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2512, cbModelParam._m0[10u].z, fma(_2511, cbModelParam._m0[10u].y, _2510 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2512, cbModelParam._m0[11u].z, fma(_2511, cbModelParam._m0[11u].y, _2510 * cbModelParam._m0[11u].x))), _1944);
            frontier_phi_16_38_ladder = _2636.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2636.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2636.x * cbModelParam._m0[1u].y;
        }
        _2024 = frontier_phi_16_38_ladder_2;
        _2026 = frontier_phi_16_38_ladder_1;
        _2028 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2012 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1106, _1107, _1108), _1944);
        _2024 = _2012.x * cbModelParam._m0[1u].y;
        _2026 = _2012.y * cbModelParam._m0[1u].y;
        _2028 = _2012.z * cbModelParam._m0[1u].y;
    }
    float _2032 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _938);
    float _2033 = isnan(_2032) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2032 : min(cbModelParam._m0[25u].w, _2032));
    float _2122;
    float _2124;
    float _2126;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2086 = fma(_1167, cbModelParam._m0[21u].z, fma(_1163, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1159)) + cbModelParam._m0[21u].w;
        float _2090 = fma(_1167, cbModelParam._m0[22u].z, fma(_1163, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1159)) + cbModelParam._m0[22u].w;
        float _2094 = fma(_1167, cbModelParam._m0[23u].z, fma(_1163, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1159)) + cbModelParam._m0[23u].w;
        float _2097 = fma(_1108, cbModelParam._m0[21u].z, fma(_1107, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1106));
        float _2100 = fma(_1108, cbModelParam._m0[22u].z, fma(_1107, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1106));
        float _2103 = fma(_1108, cbModelParam._m0[23u].z, fma(_1107, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1106));
        float _2262;
        if (_2097 > 0.0)
        {
            _2262 = abs((1.0 - _2086) / _2097);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2086 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2262 = frontier_phi_28_24_ladder;
        }
        float _2530;
        if (_2100 > 0.0)
        {
            _2530 = abs((1.0 - _2090) / _2100);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2090 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2530 = frontier_phi_40_35_ladder;
        }
        float _2735;
        if (_2103 > 0.0)
        {
            _2735 = abs((1.0 - _2094) / _2103);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2094 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2735 = frontier_phi_49_46_ladder;
        }
        float _2737 = isnan(_2530) ? _2262 : (isnan(_2262) ? _2530 : min(_2262, _2530));
        float _2738 = isnan(_2735) ? _2737 : (isnan(_2737) ? _2735 : min(_2737, _2735));
        float _2742 = (_2738 * _2097) + _2086;
        float _2743 = (_2738 * _2100) + _2090;
        float _2744 = (_2738 * _2103) + _2094;
        float _2745 = _2738 * 9.9999997473787516355514526367188e-05;
        float _2746 = (-1.0) - _2745;
        float _2748 = _2745 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2744 > _2748) || ((_2744 < _2746) || ((_2743 > _2748) || ((_2743 < _2746) || ((_2742 < _2746) || (_2742 > _2748))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2744, cbModelParam._m0[17u].z, fma(_2743, cbModelParam._m0[17u].y, _2742 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2744, cbModelParam._m0[18u].z, fma(_2743, cbModelParam._m0[18u].y, _2742 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2744, cbModelParam._m0[19u].z, fma(_2743, cbModelParam._m0[19u].y, _2742 * cbModelParam._m0[19u].x))), _2033);
            frontier_phi_25_49_ladder = _2943.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2943.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2943.x * cbModelParam._m0[1u].z;
        }
        _2122 = frontier_phi_25_49_ladder_2;
        _2124 = frontier_phi_25_49_ladder_1;
        _2126 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2106 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1106, _1107, _1108), _2033);
        _2122 = _2106.x * cbModelParam._m0[1u].z;
        _2124 = _2106.y * cbModelParam._m0[1u].z;
        _2126 = _2106.z * cbModelParam._m0[1u].z;
    }
    float _2138 = ((((1.0 - _1127) * ((_1114 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1127 * _1114)) * _1098;
    float _2139 = _2138 * ((cbModelParam._m0[1u].w * (_2122 - _2024)) + _2024);
    float _2140 = _2138 * ((cbModelParam._m0[1u].w * (_2124 - _2026)) + _2026);
    float _2141 = _2138 * ((cbModelParam._m0[1u].w * (_2126 - _2028)) + _2028);
    float _2144 = fma(_2141, cbSceneParam._m0[89u].z, fma(_2140, cbSceneParam._m0[89u].y, _2139 * cbSceneParam._m0[89u].x));
    float _2147 = fma(_2141, cbSceneParam._m0[90u].z, fma(_2140, cbSceneParam._m0[90u].y, _2139 * cbSceneParam._m0[90u].x));
    float _2150 = fma(_2141, cbSceneParam._m0[91u].z, fma(_2140, cbSceneParam._m0[91u].y, _2139 * cbSceneParam._m0[91u].x));
    vec4 _2158 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1035, _1036));
    float _2160 = _2158.w;
    float _2172 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2160);
    float _2173 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2160);
    float _2174 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2160);
    uvec4 _2178 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2180 = _2178.x * 14u;
    uint _2181 = _2180 + 13u;
    float _2188 = _1098 + (-1.0);
    float _2193 = (cbLight._m0[_2181].x * _2188) + 1.0;
    float _2194 = (cbLight._m0[_2181].y * _2188) + 1.0;
    float _2195 = (cbLight._m0[_2181].z * _2188) + 1.0;
    float _2196 = (cbLight._m0[_2181].w * _2188) + 1.0;
    uint _2197 = _2180 + 5u;
    float _2203 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
    uint _2207 = _2180 + 4u;
    float _2216 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
    uint _2220 = _2180 | 1u;
    float _2231 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_935, _936, _937));
    float _2234 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_935, _936, _937));
    float _4478 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _4489 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2239 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * 0.3183098733425140380859375;
    float _2241 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * 0.3183098733425140380859375;
    float _2248 = ((cbLight._m0[_2197].x * _2203) * _2241) + (((cbLight._m0[_2207].x * _2172) * _2216) * _2239);
    float _2249 = ((_2203 * cbLight._m0[_2197].y) * _2241) + (((cbLight._m0[_2207].y * _2173) * _2216) * _2239);
    float _2250 = ((_2203 * cbLight._m0[_2197].z) * _2241) + (((cbLight._m0[_2207].z * _2174) * _2216) * _2239);
    uvec4 _2254 = floatBitsToUint(cbLight._m0[_2180 + 12u]);
    bool _2256 = _2254.x == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2256)
    {
        _2267 = _2248;
        _2269 = _2249;
        _2271 = _2250;
    }
    else
    {
        uint _2275 = _2180 + 6u;
        float _2291 = (dot(vec3(cbLight._m0[_2180 + 2u].xyz), vec3(_935, _936, _937)) * 0.5) + 0.5;
        float _2292 = _2291 * _2291;
        float _4500 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2293 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2294 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
        _2267 = (((cbLight._m0[_2275].x * 0.3183098733425140380859375) * _2293) * _2294) + _2248;
        _2269 = (((cbLight._m0[_2275].y * 0.3183098733425140380859375) * _2293) * _2294) + _2249;
        _2271 = (((cbLight._m0[_2275].z * 0.3183098733425140380859375) * _2293) * _2294) + _2250;
    }
    bool _2274 = _2254.y == 0u;
    float _2312;
    float _2314;
    float _2316;
    if (_2274)
    {
        _2312 = _2267;
        _2314 = _2269;
        _2316 = _2271;
    }
    else
    {
        uint _2474 = _2180 + 7u;
        float _2490 = (dot(vec3(cbLight._m0[_2180 + 3u].xyz), vec3(_935, _936, _937)) * 0.5) + 0.5;
        float _2491 = _2490 * _2490;
        float _4516 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2492 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2493 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2312 = (((cbLight._m0[_2474].x * 0.3183098733425140380859375) * _2492) * _2493) + _2267;
        _2314 = (((cbLight._m0[_2474].y * 0.3183098733425140380859375) * _2492) * _2493) + _2269;
        _2316 = (((cbLight._m0[_2474].z * 0.3183098733425140380859375) * _2492) * _2493) + _2271;
    }
    uint _2319 = _2180 + 8u;
    float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2180].w)) * _938) * 0.949999988079071044921875);
    float _2333 = _2332 * _2332;
    float _2334 = cbLight._m0[_2180].x + _1015;
    float _2335 = cbLight._m0[_2180].y + _1016;
    float _2336 = cbLight._m0[_2180].z + _1017;
    float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
    float _2341 = _2340 * _2334;
    float _2342 = _2340 * _2335;
    float _2343 = _2340 * _2336;
    float _2344 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2180].xyz));
    float _4532 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _4543 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _2348 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2349 = dot(vec3(_935, _936, _937), vec3(_2341, _2342, _2343));
    float _4554 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2353 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_2341, _2342, _2343));
    float _4565 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2357 = _2333 * _2333;
    float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
    float _2372 = (exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2373 = 1.0 - _2333;
    float _2384 = (0.5 / (((_2348 * ((_2347 * _2373) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2373) + _2333) * _2347))) * _2347;
    float _4576 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2386 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
    uint _2400 = _2180 + 9u;
    float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _938) * 0.949999988079071044921875);
    float _2412 = _2411 * _2411;
    float _2413 = cbLight._m0[_2220].x + _1015;
    float _2414 = cbLight._m0[_2220].y + _1016;
    float _2415 = cbLight._m0[_2220].z + _1017;
    float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
    float _2420 = _2419 * _2413;
    float _2421 = _2419 * _2414;
    float _2422 = _2419 * _2415;
    float _2423 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2220].xyz));
    float _4587 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2427 = dot(vec3(_935, _936, _937), vec3(_2420, _2421, _2422));
    float _4598 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2430 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2431 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2420, _2421, _2422));
    float _4609 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2435 = _2412 * _2412;
    float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
    float _2448 = (exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2449 = 1.0 - _2412;
    float _2459 = (0.5 / (((_2348 * ((_2426 * _2449) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2449) + _2412) * _2426))) * _2426;
    float _4620 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2461 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
    float _2471 = (((_2448 * cbLight._m0[_2400].x) * _2461) * _2203) + ((((cbLight._m0[_2319].x * _2172) * _2372) * _2386) * _2216);
    float _2472 = (((_2448 * cbLight._m0[_2400].y) * _2461) * _2203) + ((((cbLight._m0[_2319].y * _2173) * _2372) * _2386) * _2216);
    float _2473 = (((_2448 * cbLight._m0[_2400].z) * _2461) * _2203) + ((((cbLight._m0[_2319].z * _2174) * _2372) * _2386) * _2216);
    float _2535;
    float _2537;
    float _2539;
    if (_2256)
    {
        _2535 = _2471;
        _2537 = _2472;
        _2539 = _2473;
    }
    else
    {
        uint _2541 = _2180 + 2u;
        uint _2545 = _2180 + 10u;
        float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2541].w)) * _938) * 0.949999988079071044921875);
        float _2560 = _2559 * _2559;
        float _2561 = cbLight._m0[_2541].x + _1015;
        float _2562 = cbLight._m0[_2541].y + _1016;
        float _2563 = cbLight._m0[_2541].z + _1017;
        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
        float _2568 = _2567 * _2561;
        float _2569 = _2567 * _2562;
        float _2570 = _2567 * _2563;
        float _2571 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2541].xyz));
        float _4631 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2575 = dot(vec3(_935, _936, _937), vec3(_2568, _2569, _2570));
        float _4642 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2579 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_2568, _2569, _2570));
        float _4653 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2583 = _2560 * _2560;
        float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
        float _2596 = (exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2597 = 1.0 - _2560;
        float _2607 = (0.5 / (((_2348 * ((_2574 * _2597) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2597) + _2560) * _2574))) * _2574;
        float _4664 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2609 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
        float _2610 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
        _2535 = (((_2596 * cbLight._m0[_2545].x) * _2609) * _2610) + _2471;
        _2537 = (((_2596 * cbLight._m0[_2545].y) * _2609) * _2610) + _2472;
        _2539 = (((_2596 * cbLight._m0[_2545].z) * _2609) * _2610) + _2473;
    }
    float _2645;
    float _2647;
    float _2649;
    if (_2274)
    {
        _2645 = _2535;
        _2647 = _2537;
        _2649 = _2539;
    }
    else
    {
        uint _2656 = _2180 + 3u;
        uint _2660 = _2180 + 11u;
        float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2656].w)) * _938) * 0.949999988079071044921875);
        float _2675 = _2674 * _2674;
        float _2676 = cbLight._m0[_2656].x + _1015;
        float _2677 = cbLight._m0[_2656].y + _1016;
        float _2678 = cbLight._m0[_2656].z + _1017;
        float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
        float _2683 = _2682 * _2676;
        float _2684 = _2682 * _2677;
        float _2685 = _2682 * _2678;
        float _2686 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2656].xyz));
        float _4680 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2690 = dot(vec3(_935, _936, _937), vec3(_2683, _2684, _2685));
        float _4691 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2693 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2694 = dot(vec3(cbLight._m0[_2656].xyz), vec3(_2683, _2684, _2685));
        float _4702 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2698 = _2675 * _2675;
        float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
        float _2711 = (exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2712 = 1.0 - _2675;
        float _2722 = (0.5 / (((_2348 * ((_2689 * _2712) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2712) + _2675) * _2689))) * _2689;
        float _4713 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2724 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
        float _2725 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2645 = (((_2711 * cbLight._m0[_2660].x) * _2724) * _2725) + _2535;
        _2647 = (((_2711 * cbLight._m0[_2660].y) * _2724) * _2725) + _2537;
        _2649 = (((_2711 * cbLight._m0[_2660].z) * _2724) * _2725) + _2539;
    }
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    if (_2178.y == 0u)
    {
        float _2800 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2801 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2800;
        float _2802 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2800;
        float _2803 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2800;
        uvec4 _2815 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2816 = _2815.x;
        uint _2827 = uint((float(_2815.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1036) / _2816))) + floor(float(uint(cbSceneParam._m0[85u].x * _1035) / _2816)));
        float _2837 = (log2(_2803 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2838 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        uint _2841 = uint(isnan(14.0) ? _2838 : (isnan(_2838) ? 14.0 : min(_2838, 14.0)));
        uvec4 _2846 = texelFetch(g_lightClusterGridBuffer, int(((_2841 << 2u) + (_2827 << 6u)) >> 2u));
        uint _2847 = _2846.x;
        uint _2848 = _2815.z;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        if (((((1u << ((_2848 >> 4u) & 15u)) + 4294967295u) & _2847) == 0u) || ((_2848 & 240u) == 0u))
        {
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
        }
        else
        {
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _2959;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            uint _3107 = 0u;
            uint _3116;
            bool _3117;
            for (;;)
            {
                _3116 = texelFetch(g_lightClassification, int((((_2841 << 5u) + (_2827 << 9u)) + (_3107 << 2u)) >> 2u)).x;
                _3117 = _3116 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3117)
                {
                    frontier_phi_66_pred = _3101;
                    frontier_phi_66_pred_1 = _3106;
                    frontier_phi_66_pred_2 = _3105;
                    frontier_phi_66_pred_3 = _3104;
                    frontier_phi_66_pred_4 = _3103;
                    frontier_phi_66_pred_5 = _3102;
                }
                else
                {
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    uint _3252;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3116;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    for (;;)
                    {
                        uint _3256 = uint(findLSB(_3252)) + (_3107 << 5u);
                        uint _3253 = (_3252 + 4294967295u) & _3252;
                        uint _3258 = _3256 * 48u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3278 = (_3256 * 48u) + 4u;
                        vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 3u)).x));
                        uint _3297 = (_3256 * 48u) + 8u;
                        vec3 _3308 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x));
                        float _3312 = _3272.x - _2801;
                        float _3313 = _3272.y - _2802;
                        float _3314 = _3272.z - _2803;
                        float _3315 = dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314));
                        float _3318 = inversesqrt(_3315);
                        float _3319 = _3318 * _3312;
                        float _3320 = _3318 * _3313;
                        float _3321 = _3318 * _3314;
                        float _3322 = dot(vec3(_1054, _1057, _1060), vec3(_3319, _3320, _3321));
                        float _3327 = 1.0 - (_3315 * _3272.w);
                        float _4739 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3328 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3329 = sqrt(_3315) * _3291.w;
                        float _3332 = 1.39999997615814208984375 / (_3329 + 1.39999997615814208984375);
                        float _3333 = _3332 * _3332;
                        float _3336 = ((1.0 - _3333) * _3322) + _3333;
                        float _3339 = _3329 * _3329;
                        float _3343 = ((isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0))) * _3328) / ((_3339 * 0.699999988079071044921875) + 1.0);
                        float _3347 = (-0.0) - _2801;
                        float _3348 = (-0.0) - _2802;
                        float _3349 = (-0.0) - _2803;
                        float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                        float _3354 = _3353 * _3347;
                        float _3355 = _3353 * _3348;
                        float _3356 = _3353 * _3349;
                        float _3364 = exp2(log2(1.0 / ((_3339 * 3.5) + 5.0)) * 0.25);
                        float _3365 = 1.0 - _1114;
                        float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                        float _3373 = _3372 * _3372;
                        float _3374 = _3373 * _3373;
                        float _3375 = _3354 + _3319;
                        float _3376 = _3355 + _3320;
                        float _3377 = _3356 + _3321;
                        float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                        float _3385 = dot(vec3(_1054, _1057, _1060), vec3(_3354, _3355, _3356));
                        float _4755 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3388 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3389 = dot(vec3(_1054, _1057, _1060), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                        float _4766 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3392 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                        float _3397 = _3332 * _3373;
                        float _3398 = _3397 * _3397;
                        float _3401 = ((1.0 - _3398) * _3322) + _3398;
                        float _4777 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3402 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3403 = 1.0 - _3373;
                        float _3413 = (0.5 / (((_3402 * ((_3388 * _3403) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3402 * _3403) + _3373) * _3388))) * _3402;
                        float _4788 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3424 = (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) / ((_3396 * _3396) * ((_3339 * 2.1991131305694580078125) + 3.141590118408203125))) * _3328;
                        _3176 = (_3343 * _3291.x) + _3249;
                        _3177 = (_3343 * _3291.y) + _3250;
                        _3178 = (_3343 * _3291.z) + _3251;
                        _3173 = (_3424 * _3308.x) + _3246;
                        _3174 = (_3424 * _3308.y) + _3247;
                        _3175 = (_3424 * _3308.z) + _3248;
                        if (_3253 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3253;
                        }
                    }
                    frontier_phi_66_pred = _3173;
                    frontier_phi_66_pred_1 = _3178;
                    frontier_phi_66_pred_2 = _3177;
                    frontier_phi_66_pred_3 = _3176;
                    frontier_phi_66_pred_4 = _3175;
                    frontier_phi_66_pred_5 = _3174;
                }
                _2949 = frontier_phi_66_pred;
                _2959 = frontier_phi_66_pred_1;
                _2957 = frontier_phi_66_pred_2;
                _2955 = frontier_phi_66_pred_3;
                _2953 = frontier_phi_66_pred_4;
                _2951 = frontier_phi_66_pred_5;
                uint _3108 = _3107 + 1u;
                if (_3108 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3101 = _2949;
                    _3102 = _2951;
                    _3103 = _2953;
                    _3104 = _2955;
                    _3105 = _2957;
                    _3106 = _2959;
                    _3107 = _3108;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
        }
        uvec4 _2962 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2963 = _2962.z;
        uint _2965 = (_2963 >> 8u) & 15u;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        if (((4294967295u << _2965) & _2847) == 0u)
        {
            _3069 = _2948;
            _3071 = _2950;
            _3073 = _2952;
            _3075 = _2954;
            _3077 = _2956;
            _3079 = _2958;
        }
        else
        {
            float _3094 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
            float _3095 = _3094 * _2801;
            float _3096 = _3094 * _2802;
            float _3097 = _3094 * _2803;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2965 < ((_2963 >> 12u) & 15u))
            {
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3229 = _2948;
                float _3230 = _2950;
                float _3231 = _2952;
                float _3232 = _2954;
                float _3233 = _2956;
                float _3234 = _2958;
                uint _3235 = _2965;
                uint _3244;
                bool _3245;
                for (;;)
                {
                    _3244 = texelFetch(g_lightClassification, int((((_2841 << 5u) + (_2827 << 9u)) + (_3235 << 2u)) >> 2u)).x;
                    _3245 = _3244 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3245)
                    {
                        frontier_phi_77_pred = _3234;
                        frontier_phi_77_pred_1 = _3233;
                        frontier_phi_77_pred_2 = _3232;
                        frontier_phi_77_pred_3 = _3231;
                        frontier_phi_77_pred_4 = _3230;
                        frontier_phi_77_pred_5 = _3229;
                    }
                    else
                    {
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3451 = _3229;
                        float _3452 = _3230;
                        float _3453 = _3231;
                        float _3454 = _3232;
                        float _3455 = _3233;
                        float _3456 = _3234;
                        uint _3457 = _3244;
                        uint _3458;
                        vec4 _3483;
                        float _3484;
                        vec4 _3499;
                        vec3 _3511;
                        vec4 _3526;
                        vec4 _3541;
                        float _3587;
                        bool _3588;
                        for (;;)
                        {
                            uint _3468 = ((_3235 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3457));
                            _3458 = (_3457 + 4294967295u) & _3457;
                            uint _3470 = _3468 * 40u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            _3484 = _3483.w;
                            uint _3486 = (_3468 * 40u) + 4u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3501 = (_3468 * 40u) + 8u;
                            _3511 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x));
                            uint _3513 = (_3468 * 40u) + 16u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3528 = (_3468 * 40u) + 20u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3468 * 40u) + 24u;
                            vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3562 = (_3468 * 40u) + 28u;
                            vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            _3587 = fma(_2803, _3575.z, fma(_2802, _3575.y, _3575.x * _2801)) + _3575.w;
                            _3588 = !((fma(_2803, _3556.z, fma(_2802, _3556.y, _3556.x * _2801)) + _3556.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3588)
                            {
                                float _3615 = _3483.x - _2801;
                                float _3616 = _3483.y - _2802;
                                float _3617 = _3483.z - _2803;
                                float _3618 = dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617));
                                float _3621 = inversesqrt(_3618);
                                float _3622 = _3621 * _3615;
                                float _3623 = _3621 * _3616;
                                float _3624 = _3621 * _3617;
                                float _3628 = 1.0 - (_3618 / (_3484 * _3484));
                                float _4799 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3633 = sqrt(_3618) * _3499.w;
                                float _3635 = 1.39999997615814208984375 / (_3633 + 1.39999997615814208984375);
                                float _3636 = _3635 * _3635;
                                float _3639 = ((1.0 - _3636) * dot(vec3(_3622, _3623, _3624), vec3(_1054, _1057, _1060))) + _3636;
                                float _3642 = _3633 * _3633;
                                float _3646 = (fma(_2803, _3526.z, fma(_2802, _3526.y, _3526.x * _2801)) + _3526.w) / _3587;
                                float _3647 = (fma(_2803, _3541.z, fma(_2802, _3541.y, _3541.x * _2801)) + _3541.w) / _3587;
                                float _3651 = 1.0 - dot(vec2(_3646, _3647), vec2(_3646, _3647));
                                float _4815 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3653 = _3652 * (((isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0))) * _3629) / ((_3642 * 0.699999988079071044921875) + 1.0));
                                float _3665 = exp2(log2(1.0 / ((_3642 * 3.5) + 5.0)) * 0.25);
                                float _3666 = 1.0 - _1114;
                                float _3673 = sqrt(1.0 - ((1.0 - (_3666 * _3666)) * (1.0 - (_3665 * _3665))));
                                float _3674 = _3673 * _3673;
                                float _3675 = _3674 * _3674;
                                float _3676 = _3622 - _3095;
                                float _3677 = _3623 - _3096;
                                float _3678 = _3624 - _3097;
                                float _3682 = inversesqrt(dot(vec3(_3676, _3677, _3678), vec3(_3676, _3677, _3678)));
                                float _3686 = dot(vec3(_1054, _1057, _1060), vec3((-0.0) - _3095, (-0.0) - _3096, (-0.0) - _3097));
                                float _4826 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3689 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3690 = dot(vec3(_1054, _1057, _1060), vec3(_3682 * _3676, _3682 * _3677, _3682 * _3678));
                                float _4837 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3693 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3697 = ((_3693 * _3693) * (_3675 + (-1.0))) + 1.0;
                                float _3698 = _3635 * _3674;
                                float _3699 = _3698 * _3698;
                                float _3705 = ((1.0 - _3699) * dot(vec3(_1054, _1057, _1060), vec3(_3622, _3623, _3624))) + _3699;
                                float _4848 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3707 = 1.0 - _3674;
                                float _3717 = (0.5 / (((_3706 * ((_3689 * _3707) + _3674)) + 9.9999999392252902907785028219223e-09) + (((_3706 * _3707) + _3674) * _3689))) * _3706;
                                float _4859 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3727 = (_3652 * _3629) * (((_3675 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3697 * _3697) * ((_3642 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3653 * _3499.y;
                                frontier_phi_83_pred_1 = _3653 * _3499.x;
                                frontier_phi_83_pred_2 = _3727 * _3511.z;
                                frontier_phi_83_pred_3 = _3727 * _3511.y;
                                frontier_phi_83_pred_4 = _3727 * _3511.x;
                                frontier_phi_83_pred_5 = _3653 * _3499.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3735 = frontier_phi_83_pred;
                            _3734 = frontier_phi_83_pred_1;
                            _3733 = frontier_phi_83_pred_2;
                            _3732 = frontier_phi_83_pred_3;
                            _3731 = frontier_phi_83_pred_4;
                            _3736 = frontier_phi_83_pred_5;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            _3438 = _3731 + _3451;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            if (_3458 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3458;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3443;
                        frontier_phi_77_pred_1 = _3442;
                        frontier_phi_77_pred_2 = _3441;
                        frontier_phi_77_pred_3 = _3440;
                        frontier_phi_77_pred_4 = _3439;
                        frontier_phi_77_pred_5 = _3438;
                    }
                    _3080 = frontier_phi_77_pred;
                    _3078 = frontier_phi_77_pred_1;
                    _3076 = frontier_phi_77_pred_2;
                    _3074 = frontier_phi_77_pred_3;
                    _3072 = frontier_phi_77_pred_4;
                    _3070 = frontier_phi_77_pred_5;
                    uint _3236 = _3235 + 1u;
                    if (_3236 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3229 = _3070;
                        _3230 = _3072;
                        _3231 = _3074;
                        _3232 = _3076;
                        _3233 = _3078;
                        _3234 = _3080;
                        _3235 = _3236;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3074;
                frontier_phi_58_59_ladder_1 = _3080;
                frontier_phi_58_59_ladder_2 = _3078;
                frontier_phi_58_59_ladder_3 = _3076;
                frontier_phi_58_59_ladder_4 = _3072;
                frontier_phi_58_59_ladder_5 = _3070;
            }
            else
            {
                frontier_phi_58_59_ladder = _2952;
                frontier_phi_58_59_ladder_1 = _2958;
                frontier_phi_58_59_ladder_2 = _2956;
                frontier_phi_58_59_ladder_3 = _2954;
                frontier_phi_58_59_ladder_4 = _2950;
                frontier_phi_58_59_ladder_5 = _2948;
            }
            _3069 = frontier_phi_58_59_ladder_5;
            _3071 = frontier_phi_58_59_ladder_4;
            _3073 = frontier_phi_58_59_ladder;
            _3075 = frontier_phi_58_59_ladder_3;
            _3077 = frontier_phi_58_59_ladder_2;
            _3079 = frontier_phi_58_59_ladder_1;
        }
        float _3084 = isnan(1.0) ? _1098 : (isnan(_1098) ? 1.0 : min(_1098, 1.0));
        _2860 = (_3084 * _3075) + _2312;
        _2862 = (_3084 * _3077) + _2314;
        _2864 = (_3084 * _3079) + _2316;
        _2866 = ((_3069 * 0.039999999105930328369140625) * _3084) + _2645;
        _2868 = ((_3071 * 0.039999999105930328369140625) * _3084) + _2647;
        _2870 = ((_3073 * 0.039999999105930328369140625) * _3084) + _2649;
    }
    else
    {
        _2860 = _2312;
        _2862 = _2314;
        _2864 = _2316;
        _2866 = _2645;
        _2868 = _2647;
        _2870 = _2649;
    }
    float _4875 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _4886 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _4897 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _2887 = ((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2860 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1098))) + ((_2866 + ((isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0))) * _1933)) * cbPerFrame._m0[3u].x);
    float _2888 = ((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2862 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1098))) + ((_2868 + ((isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0))) * _1933)) * cbPerFrame._m0[3u].x);
    float _2889 = ((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2864 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1098))) + ((_2870 + ((isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0))) * _1933)) * cbPerFrame._m0[3u].x);
    uint _2890 = _280 + 6u;
    float _2898 = _1035 / cbSceneParam._m0[86u].x;
    float _2899 = _1036 / cbSceneParam._m0[86u].y;
    vec4 _2913 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2898, _2899, (log2((isnan(cbSceneParam._m0[77u].w) ? _956 : (isnan(_956) ? cbSceneParam._m0[77u].w : min(_956, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2915 = _2913.x;
    float _2916 = _2913.y;
    float _2917 = _2913.z;
    float _2918 = _2913.w;
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    if (_956 > cbSceneParam._m0[78u].w)
    {
        float _2973 = isnan(_956) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _956 : min(cbSceneParam._m0[80u].w, _956));
        float _2974 = _2973 / _956;
        float _2985 = _2974 * _1008;
        float _2986 = _1009 * _2974;
        float _2987 = (-0.0) - _2986;
        float _2989 = _2974 * _1010;
        float _2991 = (cbSceneParam._m0[77u].w * _2987) / _2973;
        float _2992 = _2991 + cbSceneParam._m0[79u].w;
        float _2993 = cbSceneParam._m0[79u].w - _2986;
        float _2999 = sqrt(((_2985 * _2985) + (_2986 * _2986)) + (_2989 * _2989));
        float _3002 = (1.0 - (cbSceneParam._m0[77u].w / _2973)) * _2999;
        float _3007 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3009 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3186;
        if (abs((_2987 - _2991) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3186 = ((((_2992 > 0.0) ? exp2(_3007 * _2992) : (2.0 - exp2(_3009 * _2992))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3002;
        }
        else
        {
            float _3130 = 1.0 / cbSceneParam._m0[80u].x;
            float _3131 = isnan(_2993) ? _2992 : (isnan(_2992) ? _2993 : max(_2992, _2993));
            float _3132 = isnan(_2993) ? _2992 : (isnan(_2992) ? _2993 : min(_2992, _2993));
            float _3141 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : min(_3131, 0.0));
            float _3142 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : min(_3132, 0.0));
            _3186 = ((abs(_2999 / _2987) * cbSceneParam._m0[80u].y) * ((((_3141 - _3142) * 2.0) - ((exp2(_3007 * (isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0)))) - exp2(_3007 * (isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0))))) * _3130)) - ((exp2(_3009 * _3141) - exp2(_3009 * _3142)) * _3130))) + (_3002 * cbSceneParam._m0[80u].z);
        }
        vec4 _3188 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2898, _2899, 1.0), 0.0);
        float _3197 = exp2((_3186 * (-1.44269502162933349609375)) * (1.0 - _3188.w));
        float _3198 = log2(_3197);
        float _3214 = log2(_2918);
        _3011 = (exp2(_3214 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].x)) * _3188.x) / cbSceneParam._m0[78u].x)) + _2915;
        _3013 = (exp2(_3214 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].y)) * _3188.y) / cbSceneParam._m0[78u].y)) + _2916;
        _3015 = (exp2(_3214 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].z)) * _3188.z) / cbSceneParam._m0[78u].z)) + _2917;
        _3017 = _3197 * _2918;
    }
    else
    {
        _3011 = _2915;
        _3013 = _2916;
        _3015 = _2917;
        _3017 = _2918;
    }
    bool _3224;
    vec4 _3027;
    vec4 _3049;
    float _3051;
    float _3055;
    float _3056;
    float _3057;
    float _3058;
    bool _3068;
    for (;;)
    {
        _3027 = cbMatDynParam._m0[0u];
        float _3029 = roundEven(_3027.y);
        bool _3030 = _3029 == 3.0;
        float _3031 = log2(_3017);
        float _3038 = exp2(_3031 * cbSceneParam._m0[78u].x) * _2887;
        float _3039 = exp2(_3031 * cbSceneParam._m0[78u].y) * _2888;
        float _3040 = exp2(_3031 * cbSceneParam._m0[78u].z) * _2889;
        float _3047 = _1024 + (-0.5);
        _3049 = cbMtdParam._m0[1u];
        _3051 = _3049.y * _3047;
        float _3054 = (_3029 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3055 = _3054 * (_3030 ? _3038 : (_3038 + (cbSceneParam._m0[72u].w * _3011)));
        _3056 = _3054 * (_3030 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3013)));
        _3057 = _3054 * (_3030 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3015)));
        _3058 = _3047 * 0.999000012874603271484375;
        _3068 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3068)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3058) < 0.5)
            {
                _3224 = true;
                break;
            }
        }
        uint _3165 = _1073 + uint(_3027.w);
        if ((cbInstanceData._m0[_3165].w < 1.0) && ((cbInstanceData._m0[_3165].w + _3058) < 0.5))
        {
            _3224 = true;
            break;
        }
        if ((_3051 + 1.0) < _3049.x)
        {
            _3224 = true;
            break;
        }
        _3224 = false;
        break;
    }
    float _3429;
    if (_3224)
    {
        discard_state = true;
        _3429 = 0.0;
    }
    else
    {
        _3429 = cbInstanceData._m0[_2890].w;
    }
    SV_Target.x = _3055;
    SV_Target.y = _3056;
    SV_Target.z = _3057;
    SV_Target.w = _3429;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2890].w;
    discard_exit();
}


