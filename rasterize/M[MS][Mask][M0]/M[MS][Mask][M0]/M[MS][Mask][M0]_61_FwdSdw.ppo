#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1220;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _379 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _396 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _328.x) * 2.0) - ((((_367 - _379) * cbMtdParam._m0[24u].z) + _379) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3808 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _404 = (_397 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _405 = (_397 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _406 = (_397 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _423 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _455 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _469 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _328.y) * 2.0) - ((((_445 - _455) * cbMtdParam._m0[24u].z) + _455) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3819 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _477 = (_470 * ((_423.x * cbMtdParam._m0[13u].x) - _404)) + _404;
    float _478 = (_470 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _479 = (_470 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _497 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _518 = _514.z;
    float _525 = ((_497.x - _516) * _397) + _516;
    float _526 = ((_497.y - _517) * _397) + _517;
    float _527 = ((_497.z - _518) * _397) + _518;
    vec4 _539 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _552 = ((_539.z - _527) * _470) + _527;
    float _555 = ((((_539.x - _525) * _470) + _525) * 2.0) + (-1.0);
    float _557 = ((((_539.y - _526) * _470) + _526) * 2.0) + (-1.0);
    float _558 = dot(vec2(_555, _557), vec2(_555, _557));
    float _3830 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _563 = sqrt(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))));
    vec4 _577 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _604 = _602.x;
    float _605 = 1.0 - _604;
    float _618 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_604 - _605) * cbMtdParam._m0[24u].w) + _605) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3841 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _626 = (_619 * (cbMtdParam._m0[17u].x - _477)) + _477;
    float _627 = (_619 * (cbMtdParam._m0[17u].y - _478)) + _478;
    float _628 = (_619 * (cbMtdParam._m0[17u].z - _479)) + _479;
    float _632 = (cbMtdParam._m0[19u].w * (_577.z - _552)) + _552;
    vec4 _645 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _652 = (_645.x * 2.0) + (-1.0);
    float _653 = (_645.y * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3852 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _662 = (_619 * (_645.z - _632)) + _632;
    float _665 = (((_577.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _555;
    float _666 = (((_577.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _557;
    float _678 = (((_652 - _665) + (cbMtdParam._m0[21u].x * _665)) * _619) + _665;
    float _679 = (((_653 - _666) + (cbMtdParam._m0[21u].x * _666)) * _619) + _666;
    float _680 = (_619 * (sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) - _563)) + _563;
    float _684 = cbMtdParam._m0[22u].x + _577.w;
    float _687 = fma(_680, _227 * NORMAL.x, fma(_679, _234 * TANGENT.x, (_220 * _212) * _678));
    float _690 = fma(_680, _227 * NORMAL.y, fma(_679, _234 * TANGENT.y, (_220 * _213) * _678));
    float _693 = fma(_680, _227 * NORMAL.z, fma(_679, _234 * TANGENT.z, (_220 * _214) * _678));
    float _697 = inversesqrt(dot(vec3(_687, _690, _693), vec3(_687, _690, _693)));
    float _698 = _697 * _687;
    float _699 = _697 * _690;
    float _700 = _697 * _693;
    float _3863 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _701 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3885 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3896 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3907 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _719 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _771 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _761);
    float _772 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _761);
    float _773 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _761);
    float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
    float _778 = _771 * _777;
    float _779 = _772 * _777;
    float _780 = _773 * _777;
    float _786 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _787 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _805 = fma(_700, cbSceneParam._m0[5u].z, fma(_699, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _698));
    float _808 = fma(_700, cbSceneParam._m0[6u].z, fma(_699, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _698));
    float _811 = fma(_700, cbSceneParam._m0[7u].z, fma(_699, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _698));
    uint _825 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _831 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_825].x;
    float _832 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_825].y;
    float _833 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_825].z;
    float _3918 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    vec4 _845 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _786, cbSceneParam._m0[86u].y * _787));
    float _849 = ((isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * TEXCOORD_5.w) * _845.x;
    float _850 = dot(vec3(_698, _699, _700), vec3(_778, _779, _780));
    float _853 = _850 * 2.0;
    float _857 = (_853 * _698) - _778;
    float _858 = (_853 * _699) - _779;
    float _859 = (_853 * _700) - _780;
    float _863 = abs(dot(vec3(_778, _779, _780), vec3(_698, _699, _700)));
    float _3951 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _865 = sqrt(_701);
    float _878 = exp2((_865 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_865 * 3.0));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1219;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _944 = fma(_918, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910));
        float _948 = fma(_918, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910));
        float _952 = fma(_918, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910));
        float _977 = _910 + _698;
        float _978 = _914 + _699;
        float _979 = _918 + _700;
        float _989 = fma(_979, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _977)) - _944;
        float _990 = fma(_979, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _977)) - _948;
        float _991 = fma(_979, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _977)) - _952;
        float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
        float _1008 = ((_995 * _989) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_944 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_995 * _990) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_948 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_995 * _991) / cbModelParam._m0[34u].z) + ((((((_952 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        float _1047 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1013.x + (-0.5));
        float _1049 = _1047 * (_1013.y + (-0.5));
        float _1050 = _1047 * (_1013.z + (-0.5));
        float _1057 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1020.x + (-0.5));
        float _1059 = _1057 * (_1020.y + (-0.5));
        float _1060 = _1057 * (_1020.z + (-0.5));
        float _1067 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1027.x + (-0.5));
        float _1069 = _1067 * (_1027.y + (-0.5));
        float _1070 = _1067 * (_1027.z + (-0.5));
        float _1077 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1034.x + (-0.5));
        float _1079 = _1077 * (_1034.y + (-0.5));
        float _1080 = _1077 * (_1034.z + (-0.5));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = _1048 * 0.5;
        float _1085 = _1058 * 0.5;
        float _1086 = _1068 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1101 = (dot(vec3(_698, _699, _700), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1111 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3999 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1113 + 1.0))) + _1118) * _1081;
        float _1128 = _1049 * 0.5;
        float _1129 = _1059 * 0.5;
        float _1130 = _1069 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_698, _699, _700), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _4032 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1155 + 1.0))) + _1160) * _1082;
        float _1170 = _1050 * 0.5;
        float _1171 = _1060 * 0.5;
        float _1172 = _1070 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_698, _699, _700), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _4065 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1197 + 1.0))) + _1202) * _1083;
        _1219 = _1050;
        _1221 = _1049;
        _1222 = _1048;
        _1223 = _1060;
        _1224 = _1059;
        _1225 = _1058;
        _1226 = _1070;
        _1227 = _1069;
        _1228 = _1068;
        _1229 = _1083;
        _1230 = _1082;
        _1231 = _1081;
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
    }
    else
    {
        _1219 = _1220;
        _1221 = _1220;
        _1222 = _1220;
        _1223 = _1220;
        _1224 = _1220;
        _1225 = _1220;
        _1226 = _1220;
        _1227 = _1220;
        _1228 = _1220;
        _1229 = _1220;
        _1230 = _1220;
        _1231 = _1220;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1258 = fma(_918, cbModelParam._m0[30u].z, fma(_914, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _910));
        float _1262 = fma(_918, cbModelParam._m0[31u].z, fma(_914, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _910));
        float _1266 = fma(_918, cbModelParam._m0[32u].z, fma(_914, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _910));
        float _1289 = _910 + _698;
        float _1290 = _914 + _699;
        float _1291 = _918 + _700;
        float _1301 = fma(_1291, cbModelParam._m0[30u].z, fma(_1290, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1289)) - _1258;
        float _1302 = fma(_1291, cbModelParam._m0[31u].z, fma(_1290, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1289)) - _1262;
        float _1303 = fma(_1291, cbModelParam._m0[32u].z, fma(_1290, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1289)) - _1266;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1258 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1262 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[35u].z) + ((((((_1266 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1357 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1324.x + (-0.5));
        float _1359 = _1357 * (_1324.y + (-0.5));
        float _1360 = _1357 * (_1324.z + (-0.5));
        float _1367 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1331.x + (-0.5));
        float _1369 = _1367 * (_1331.y + (-0.5));
        float _1370 = _1367 * (_1331.z + (-0.5));
        float _1377 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1338.x + (-0.5));
        float _1379 = _1377 * (_1338.y + (-0.5));
        float _1380 = _1377 * (_1338.z + (-0.5));
        float _1387 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1345.x + (-0.5));
        float _1389 = _1387 * (_1345.y + (-0.5));
        float _1390 = _1387 * (_1345.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_698, _699, _700), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4128 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1421 + 1.0))) + _1426) * _1391;
        float _1436 = _1359 * 0.5;
        float _1437 = _1369 * 0.5;
        float _1438 = _1379 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_698, _699, _700), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4161 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1463 + 1.0))) + _1468) * _1392;
        float _1478 = _1360 * 0.5;
        float _1479 = _1370 * 0.5;
        float _1480 = _1380 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_698, _699, _700), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4194 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1505 + 1.0))) + _1510) * _1393;
        _1527 = _1360;
        _1528 = _1359;
        _1529 = _1358;
        _1530 = _1370;
        _1531 = _1369;
        _1532 = _1368;
        _1533 = _1380;
        _1534 = _1379;
        _1535 = _1378;
        _1536 = _1393;
        _1537 = _1392;
        _1538 = _1391;
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
    }
    else
    {
        _1527 = _1220;
        _1528 = _1220;
        _1529 = _1220;
        _1530 = _1220;
        _1531 = _1220;
        _1532 = _1220;
        _1533 = _1220;
        _1534 = _1220;
        _1535 = _1220;
        _1536 = _1220;
        _1537 = _1220;
        _1538 = _1220;
        _1539 = 0.0;
        _1540 = 0.0;
        _1541 = 0.0;
    }
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1232)) + _1232;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1233)) + _1233;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1234)) + _1234;
    float _1574 = fma(_1553, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1553, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1553, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1551));
    float _1595 = _857 * 0.5;
    float _1596 = _858 * 0.5;
    float _1597 = _859 * 0.5;
    float _1598 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1601 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1604 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1638;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1611 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1219, _1223, _1226, _1229));
        float _1615 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1221, _1224, _1227, _1230));
        float _1619 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1222, _1225, _1228, _1231));
        float _1626 = dot(vec4(cbModelParam._m0[39u]), vec4(_1595, _1596, _1597, 1.0));
        _1638 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1638 = 1.0;
    }
    float _1649;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1640 = dot(vec4(cbModelParam._m0[40u]), vec4(_1595, _1596, _1597, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1653 = (_1649 * cbModelParam._m0[1u].x) + (_1638 * (1.0 - cbModelParam._m0[1u].x));
    float _1663 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _701);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1663 : min(cbModelParam._m0[25u].z, _1663));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1712 = fma(_918, cbModelParam._m0[13u].z, fma(_914, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910)) + cbModelParam._m0[13u].w;
        float _1716 = fma(_918, cbModelParam._m0[14u].z, fma(_914, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910)) + cbModelParam._m0[14u].w;
        float _1720 = fma(_918, cbModelParam._m0[15u].z, fma(_914, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910)) + cbModelParam._m0[15u].w;
        float _1723 = fma(_859, cbModelParam._m0[13u].z, fma(_858, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857));
        float _1726 = fma(_859, cbModelParam._m0[14u].z, fma(_858, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857));
        float _1729 = fma(_859, cbModelParam._m0[15u].z, fma(_858, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857));
        float _1757;
        if (_1723 > 0.0)
        {
            _1757 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1757 = frontier_phi_14_12_ladder;
        }
        float _1927;
        if (_1726 > 0.0)
        {
            _1927 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1927 = frontier_phi_23_19_ladder;
        }
        float _2222;
        if (_1729 > 0.0)
        {
            _2222 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2222 = frontier_phi_35_30_ladder;
        }
        float _2224 = isnan(_1927) ? _1757 : (isnan(_1757) ? _1927 : min(_1757, _1927));
        float _2225 = isnan(_2222) ? _2224 : (isnan(_2224) ? _2222 : min(_2224, _2222));
        float _2229 = (_2225 * _1723) + _1712;
        float _2230 = (_2225 * _1726) + _1716;
        float _2231 = (_2225 * _1729) + _1720;
        float _2232 = _2225 * 9.9999997473787516355514526367188e-05;
        float _2234 = (-1.0) - _2232;
        float _2236 = _2232 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2231 > _2236) || ((_2231 < _2234) || ((_2230 > _2236) || ((_2230 < _2234) || ((_2229 < _2234) || (_2229 > _2236))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2231, cbModelParam._m0[9u].z, fma(_2230, cbModelParam._m0[9u].y, _2229 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2231, cbModelParam._m0[10u].z, fma(_2230, cbModelParam._m0[10u].y, _2229 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2231, cbModelParam._m0[11u].z, fma(_2230, cbModelParam._m0[11u].y, _2229 * cbModelParam._m0[11u].x))), _1664);
            frontier_phi_13_35_ladder = _2376.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2376.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2376.x * cbModelParam._m0[1u].y;
        }
        _1745 = frontier_phi_13_35_ladder_2;
        _1747 = frontier_phi_13_35_ladder_1;
        _1749 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_857, _858, _859), _1664);
        _1745 = _1733.x * cbModelParam._m0[1u].y;
        _1747 = _1733.y * cbModelParam._m0[1u].y;
        _1749 = _1733.z * cbModelParam._m0[1u].y;
    }
    float _1753 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _701);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1753 : min(cbModelParam._m0[25u].w, _1753));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1808 = fma(_918, cbModelParam._m0[21u].z, fma(_914, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910)) + cbModelParam._m0[21u].w;
        float _1812 = fma(_918, cbModelParam._m0[22u].z, fma(_914, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910)) + cbModelParam._m0[22u].w;
        float _1816 = fma(_918, cbModelParam._m0[23u].z, fma(_914, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910)) + cbModelParam._m0[23u].w;
        float _1819 = fma(_859, cbModelParam._m0[21u].z, fma(_858, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857));
        float _1822 = fma(_859, cbModelParam._m0[22u].z, fma(_858, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857));
        float _1825 = fma(_859, cbModelParam._m0[23u].z, fma(_858, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857));
        float _1932;
        if (_1819 > 0.0)
        {
            _1932 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1932 = frontier_phi_25_21_ladder;
        }
        float _2249;
        if (_1822 > 0.0)
        {
            _2249 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2249 = frontier_phi_37_32_ladder;
        }
        float _2576;
        if (_1825 > 0.0)
        {
            _2576 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2576 = frontier_phi_47_44_ladder;
        }
        float _2578 = isnan(_2249) ? _1932 : (isnan(_1932) ? _2249 : min(_1932, _2249));
        float _2579 = isnan(_2576) ? _2578 : (isnan(_2578) ? _2576 : min(_2578, _2576));
        float _2583 = (_2579 * _1819) + _1808;
        float _2584 = (_2579 * _1822) + _1812;
        float _2585 = (_2579 * _1825) + _1816;
        float _2586 = _2579 * 9.9999997473787516355514526367188e-05;
        float _2587 = (-1.0) - _2586;
        float _2589 = _2586 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2585 > _2589) || ((_2585 < _2587) || ((_2584 > _2589) || ((_2584 < _2587) || ((_2583 < _2587) || (_2583 > _2589))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2585, cbModelParam._m0[17u].z, fma(_2584, cbModelParam._m0[17u].y, _2583 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2585, cbModelParam._m0[18u].z, fma(_2584, cbModelParam._m0[18u].y, _2583 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2585, cbModelParam._m0[19u].z, fma(_2584, cbModelParam._m0[19u].y, _2583 * cbModelParam._m0[19u].x))), _1754);
            frontier_phi_22_47_ladder = _2703.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2703.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2703.x * cbModelParam._m0[1u].z;
        }
        _1844 = frontier_phi_22_47_ladder_2;
        _1846 = frontier_phi_22_47_ladder_1;
        _1848 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1828 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_857, _858, _859), _1754);
        _1844 = _1828.x * cbModelParam._m0[1u].z;
        _1846 = _1828.y * cbModelParam._m0[1u].z;
        _1848 = _1828.z * cbModelParam._m0[1u].z;
    }
    float _1860 = ((((1.0 - _878) * ((_865 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_878 * _865)) * _849;
    float _1861 = _1860 * ((cbModelParam._m0[1u].w * (_1844 - _1745)) + _1745);
    float _1862 = _1860 * ((cbModelParam._m0[1u].w * (_1846 - _1747)) + _1747);
    float _1863 = _1860 * ((cbModelParam._m0[1u].w * (_1848 - _1749)) + _1749);
    float _1866 = fma(_1863, cbSceneParam._m0[89u].z, fma(_1862, cbSceneParam._m0[89u].y, _1861 * cbSceneParam._m0[89u].x));
    float _1869 = fma(_1863, cbSceneParam._m0[90u].z, fma(_1862, cbSceneParam._m0[90u].y, _1861 * cbSceneParam._m0[90u].x));
    float _1872 = fma(_1863, cbSceneParam._m0[91u].z, fma(_1862, cbSceneParam._m0[91u].y, _1861 * cbSceneParam._m0[91u].x));
    float _1906 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1910 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1914 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1918 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1919 = _1906 / _1918;
    float _1920 = _1910 / _1918;
    float _1921 = _1914 / _1918;
    float _2068;
    float _2069;
    float _2070;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1948 = ((uint(_1921 > cbSceneParam._m0[59u].y) + uint(_1921 > cbSceneParam._m0[59u].x)) + uint(_1921 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1949 = _1948 + 43u;
        uint _1957 = _1948 + 44u;
        uint _1965 = _1948 + 45u;
        uint _1973 = _1948 + 46u;
        float _1984 = fma(_1918, cbSceneParam._m0[_1949].w, fma(_1914, cbSceneParam._m0[_1949].z, fma(_1910, cbSceneParam._m0[_1949].y, _1906 * cbSceneParam._m0[_1949].x)));
        float _1988 = fma(_1918, cbSceneParam._m0[_1957].w, fma(_1914, cbSceneParam._m0[_1957].z, fma(_1910, cbSceneParam._m0[_1957].y, _1906 * cbSceneParam._m0[_1957].x)));
        float _1996 = fma(_1918, cbSceneParam._m0[_1973].w, fma(_1914, cbSceneParam._m0[_1973].z, fma(_1910, cbSceneParam._m0[_1973].y, _1906 * cbSceneParam._m0[_1973].x)));
        float _2001 = cbSceneParam._m0[33u].z * _1996;
        float _2003 = cbSceneParam._m0[33u].w * _1996;
        float _2006 = fma(_1918, cbSceneParam._m0[_1965].w, fma(_1914, cbSceneParam._m0[_1965].z, fma(_1910, cbSceneParam._m0[_1965].y, _1906 * cbSceneParam._m0[_1965].x))) / _1996;
        float _2054 = (cbSceneParam._m0[33u].x - sqrt(((_1920 * _1920) + (_1919 * _1919)) + (_1921 * _1921))) * cbSceneParam._m0[33u].y;
        float _4320 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2061 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2001 + _1984) / _1996, (_2003 + _1988) / _1996), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2003 + _1984) / _1996, (_1988 - _2001) / _1996), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1984 - _2001) / _1996, (_1988 - _2003) / _1996), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1984 - _2003) / _1996, (_2001 + _1988) / _1996), _2006), 0.0)).x), vec4(0.25)));
        _2068 = 1.0 - (_2061 * cbSceneParam._m0[34u].x);
        _2069 = 1.0 - (_2061 * cbSceneParam._m0[34u].y);
        _2070 = 1.0 - (_2061 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2068 = 1.0;
        _2069 = 1.0;
        _2070 = 1.0;
    }
    float _2134;
    float _2136;
    float _2138;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2122 = fma(_1918, cbSceneParam._m0[63u].w, fma(_1914, cbSceneParam._m0[63u].z, fma(_1910, cbSceneParam._m0[63u].y, _1906 * cbSceneParam._m0[63u].x)));
        float _2123 = fma(_1918, cbSceneParam._m0[60u].w, fma(_1914, cbSceneParam._m0[60u].z, fma(_1910, cbSceneParam._m0[60u].y, _1906 * cbSceneParam._m0[60u].x))) / _2122;
        float _2124 = fma(_1918, cbSceneParam._m0[61u].w, fma(_1914, cbSceneParam._m0[61u].z, fma(_1910, cbSceneParam._m0[61u].y, _1906 * cbSceneParam._m0[61u].x))) / _2122;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2123 >= cbSceneParam._m0[64u].x) && (_2124 >= cbSceneParam._m0[64u].y)) && (_2123 <= cbSceneParam._m0[64u].z)) && (_2124 <= cbSceneParam._m0[64u].w))
        {
            float _2262 = fma(_1918, cbSceneParam._m0[62u].w, fma(_1914, cbSceneParam._m0[62u].z, fma(_1910, cbSceneParam._m0[62u].y, _1906 * cbSceneParam._m0[62u].x))) / _2122;
            float _2266 = isnan(cbSceneParam._m0[41u].w) ? _2262 : (isnan(_2262) ? cbSceneParam._m0[41u].w : max(_2262, cbSceneParam._m0[41u].w));
            float _2309 = (cbSceneParam._m0[33u].x - sqrt(((_1920 * _1920) + (_1919 * _1919)) + (_1921 * _1921))) * cbSceneParam._m0[33u].y;
            float _4336 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
            float _2316 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2123, cbSceneParam._m0[33u].w + _2124), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2123, _2124 - cbSceneParam._m0[33u].z), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2123 - cbSceneParam._m0[33u].z, _2124 - cbSceneParam._m0[33u].w), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2123 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2124), _2266), 0.0)).x), vec4(0.25)));
            float _2320 = 1.0 - (_2316 * cbSceneParam._m0[34u].x);
            float _2321 = 1.0 - (_2316 * cbSceneParam._m0[34u].y);
            float _2322 = 1.0 - (_2316 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2322) ? _2070 : (isnan(_2070) ? _2322 : min(_2070, _2322));
            frontier_phi_34_33_ladder_1 = isnan(_2321) ? _2069 : (isnan(_2069) ? _2321 : min(_2069, _2321));
            frontier_phi_34_33_ladder_2 = isnan(_2320) ? _2068 : (isnan(_2068) ? _2320 : min(_2068, _2320));
        }
        else
        {
            frontier_phi_34_33_ladder = _2070;
            frontier_phi_34_33_ladder_1 = _2069;
            frontier_phi_34_33_ladder_2 = _2068;
        }
        _2134 = frontier_phi_34_33_ladder_2;
        _2136 = frontier_phi_34_33_ladder_1;
        _2138 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2134 = _2068;
        _2136 = _2069;
        _2138 = _2070;
    }
    uvec4 _2143 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2145 = _2143.x * 14u;
    uint _2146 = _2145 + 13u;
    float _2153 = _849 + (-1.0);
    float _2158 = (cbLight._m0[_2146].x * _2153) + 1.0;
    float _2159 = (cbLight._m0[_2146].y * _2153) + 1.0;
    float _2160 = (cbLight._m0[_2146].z * _2153) + 1.0;
    float _2161 = (cbLight._m0[_2146].w * _2153) + 1.0;
    uint _2162 = _2145 + 5u;
    float _2168 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
    uint _2172 = _2145 + 4u;
    float _2181 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2185 = _2145 | 1u;
    float _2196 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_698, _699, _700));
    float _2199 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_698, _699, _700));
    float _4372 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _4383 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2204 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.3183098733425140380859375;
    float _2206 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 0.3183098733425140380859375;
    float _2213 = ((cbLight._m0[_2162].x * _2168) * _2206) + (((cbLight._m0[_2172].x * _2134) * _2181) * _2204);
    float _2214 = ((_2168 * cbLight._m0[_2162].y) * _2206) + (((cbLight._m0[_2172].y * _2136) * _2181) * _2204);
    float _2215 = ((_2168 * cbLight._m0[_2162].z) * _2206) + (((cbLight._m0[_2172].z * _2138) * _2181) * _2204);
    uvec4 _2219 = floatBitsToUint(cbLight._m0[_2145 + 12u]);
    bool _2221 = _2219.x == 0u;
    float _2323;
    float _2325;
    float _2327;
    if (_2221)
    {
        _2323 = _2213;
        _2325 = _2214;
        _2327 = _2215;
    }
    else
    {
        uint _2331 = _2145 + 6u;
        float _2347 = (dot(vec3(cbLight._m0[_2145 + 2u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4394 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2350 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2323 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2213;
        _2325 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2214;
        _2327 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2215;
    }
    bool _2330 = _2219.y == 0u;
    float _2385;
    float _2387;
    float _2389;
    if (_2330)
    {
        _2385 = _2323;
        _2387 = _2325;
        _2389 = _2327;
    }
    else
    {
        uint _2547 = _2145 + 7u;
        float _2563 = (dot(vec3(cbLight._m0[_2145 + 3u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2564 = _2563 * _2563;
        float _4410 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2565 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2566 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2385 = (((cbLight._m0[_2547].x * 0.3183098733425140380859375) * _2565) * _2566) + _2323;
        _2387 = (((cbLight._m0[_2547].y * 0.3183098733425140380859375) * _2565) * _2566) + _2325;
        _2389 = (((cbLight._m0[_2547].z * 0.3183098733425140380859375) * _2565) * _2566) + _2327;
    }
    uint _2392 = _2145 + 8u;
    float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _701) * 0.949999988079071044921875);
    float _2406 = _2405 * _2405;
    float _2407 = cbLight._m0[_2145].x + _778;
    float _2408 = cbLight._m0[_2145].y + _779;
    float _2409 = cbLight._m0[_2145].z + _780;
    float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
    float _2414 = _2413 * _2407;
    float _2415 = _2413 * _2408;
    float _2416 = _2413 * _2409;
    float _2417 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2145].xyz));
    float _4426 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _4437 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _2421 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2422 = dot(vec3(_698, _699, _700), vec3(_2414, _2415, _2416));
    float _4448 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2426 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2414, _2415, _2416));
    float _4459 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2430 = _2406 * _2406;
    float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
    float _2445 = (exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2446 = 1.0 - _2406;
    float _2457 = (0.5 / (((_2421 * ((_2420 * _2446) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2446) + _2406) * _2420))) * _2420;
    float _4470 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2459 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
    uint _2473 = _2145 + 9u;
    float _2484 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _701) * 0.949999988079071044921875);
    float _2485 = _2484 * _2484;
    float _2486 = cbLight._m0[_2185].x + _778;
    float _2487 = cbLight._m0[_2185].y + _779;
    float _2488 = cbLight._m0[_2185].z + _780;
    float _2492 = inversesqrt(dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488)));
    float _2493 = _2492 * _2486;
    float _2494 = _2492 * _2487;
    float _2495 = _2492 * _2488;
    float _2496 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2185].xyz));
    float _4481 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2499 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2500 = dot(vec3(_698, _699, _700), vec3(_2493, _2494, _2495));
    float _4492 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2504 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2493, _2494, _2495));
    float _4503 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2508 = _2485 * _2485;
    float _2512 = ((_2503 * _2503) * (_2508 + (-1.0))) + 1.0;
    float _2521 = (exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2522 = 1.0 - _2485;
    float _2532 = (0.5 / (((_2421 * ((_2499 * _2522) + _2485)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2522) + _2485) * _2499))) * _2499;
    float _4514 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2534 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2508 / ((_2512 * _2512) * 3.141590118408203125));
    float _2544 = (((_2521 * cbLight._m0[_2473].x) * _2534) * _2168) + ((((cbLight._m0[_2392].x * _2134) * _2445) * _2459) * _2181);
    float _2545 = (((_2521 * cbLight._m0[_2473].y) * _2534) * _2168) + ((((cbLight._m0[_2392].y * _2136) * _2445) * _2459) * _2181);
    float _2546 = (((_2521 * cbLight._m0[_2473].z) * _2534) * _2168) + ((((cbLight._m0[_2392].z * _2138) * _2445) * _2459) * _2181);
    float _2602;
    float _2604;
    float _2606;
    if (_2221)
    {
        _2602 = _2544;
        _2604 = _2545;
        _2606 = _2546;
    }
    else
    {
        uint _2608 = _2145 + 2u;
        uint _2612 = _2145 + 10u;
        float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2608].w)) * _701) * 0.949999988079071044921875);
        float _2627 = _2626 * _2626;
        float _2628 = cbLight._m0[_2608].x + _778;
        float _2629 = cbLight._m0[_2608].y + _779;
        float _2630 = cbLight._m0[_2608].z + _780;
        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
        float _2635 = _2634 * _2628;
        float _2636 = _2634 * _2629;
        float _2637 = _2634 * _2630;
        float _2638 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2608].xyz));
        float _4525 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2642 = dot(vec3(_698, _699, _700), vec3(_2635, _2636, _2637));
        float _4536 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2646 = dot(vec3(cbLight._m0[_2608].xyz), vec3(_2635, _2636, _2637));
        float _4547 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2650 = _2627 * _2627;
        float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
        float _2663 = (exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2664 = 1.0 - _2627;
        float _2674 = (0.5 / (((_2421 * ((_2641 * _2664) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2664) + _2627) * _2641))) * _2641;
        float _4558 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2676 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
        float _2677 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2602 = (((_2663 * cbLight._m0[_2612].x) * _2676) * _2677) + _2544;
        _2604 = (((_2663 * cbLight._m0[_2612].y) * _2676) * _2677) + _2545;
        _2606 = (((_2663 * cbLight._m0[_2612].z) * _2676) * _2677) + _2546;
    }
    float _2708;
    float _2710;
    float _2712;
    if (_2330)
    {
        _2708 = _2602;
        _2710 = _2604;
        _2712 = _2606;
    }
    else
    {
        uint _2719 = _2145 + 3u;
        uint _2723 = _2145 + 11u;
        float _2737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2719].w)) * _701) * 0.949999988079071044921875);
        float _2738 = _2737 * _2737;
        float _2739 = cbLight._m0[_2719].x + _778;
        float _2740 = cbLight._m0[_2719].y + _779;
        float _2741 = cbLight._m0[_2719].z + _780;
        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
        float _2746 = _2745 * _2739;
        float _2747 = _2745 * _2740;
        float _2748 = _2745 * _2741;
        float _2749 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2719].xyz));
        float _4574 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2752 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2753 = dot(vec3(_698, _699, _700), vec3(_2746, _2747, _2748));
        float _4585 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2757 = dot(vec3(cbLight._m0[_2719].xyz), vec3(_2746, _2747, _2748));
        float _4596 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2761 = _2738 * _2738;
        float _2765 = ((_2756 * _2756) * (_2761 + (-1.0))) + 1.0;
        float _2774 = (exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2775 = 1.0 - _2738;
        float _2785 = (0.5 / (((_2421 * ((_2752 * _2775) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2775) + _2738) * _2752))) * _2752;
        float _4607 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2787 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2761 / ((_2765 * _2765) * 3.141590118408203125));
        float _2788 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2708 = (((_2774 * cbLight._m0[_2723].x) * _2787) * _2788) + _2602;
        _2710 = (((_2774 * cbLight._m0[_2723].y) * _2787) * _2788) + _2604;
        _2712 = (((_2774 * cbLight._m0[_2723].z) * _2787) * _2788) + _2606;
    }
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    if (_2143.y == 0u)
    {
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.x;
        uint _2821 = uint((float(_2809.y) * floor(float(uint(cbSceneParam._m0[85u].y * _787) / _2810))) + floor(float(uint(cbSceneParam._m0[85u].x * _786) / _2810)));
        float _2831 = (log2(_1921 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2832 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        uint _2835 = uint(isnan(14.0) ? _2832 : (isnan(_2832) ? 14.0 : min(_2832, 14.0)));
        uvec4 _2840 = texelFetch(g_lightClusterGridBuffer, int(((_2835 << 2u) + (_2821 << 6u)) >> 2u));
        uint _2841 = _2840.x;
        uint _2842 = _2809.z;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        if (((((1u << ((_2842 >> 4u) & 15u)) + 4294967295u) & _2841) == 0u) || ((_2842 & 240u) == 0u))
        {
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
        }
        else
        {
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            uint _3072 = 0u;
            uint _3081;
            bool _3082;
            for (;;)
            {
                _3081 = texelFetch(g_lightClassification, int((((_2835 << 5u) + (_2821 << 9u)) + (_3072 << 2u)) >> 2u)).x;
                _3082 = _3081 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3082)
                {
                    frontier_phi_66_pred = _3071;
                    frontier_phi_66_pred_1 = _3070;
                    frontier_phi_66_pred_2 = _3069;
                    frontier_phi_66_pred_3 = _3068;
                    frontier_phi_66_pred_4 = _3067;
                    frontier_phi_66_pred_5 = _3066;
                }
                else
                {
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    uint _3196;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3070;
                    _3195 = _3071;
                    _3196 = _3081;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    for (;;)
                    {
                        uint _3200 = uint(findLSB(_3196)) + (_3072 << 5u);
                        uint _3197 = (_3196 + 4294967295u) & _3196;
                        uint _3202 = _3200 * 48u;
                        vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 3u)).x));
                        uint _3222 = (_3200 * 48u) + 4u;
                        vec4 _3235 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 3u)).x));
                        uint _3241 = (_3200 * 48u) + 8u;
                        vec3 _3252 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x));
                        float _3256 = _3216.x - _1919;
                        float _3257 = _3216.y - _1920;
                        float _3258 = _3216.z - _1921;
                        float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                        float _3262 = inversesqrt(_3259);
                        float _3263 = _3262 * _3256;
                        float _3264 = _3262 * _3257;
                        float _3265 = _3262 * _3258;
                        float _3266 = dot(vec3(_805, _808, _811), vec3(_3263, _3264, _3265));
                        float _3271 = 1.0 - (_3259 * _3216.w);
                        float _4633 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3272 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3273 = sqrt(_3259) * _3235.w;
                        float _3276 = 1.39999997615814208984375 / (_3273 + 1.39999997615814208984375);
                        float _3277 = _3276 * _3276;
                        float _3280 = ((1.0 - _3277) * _3266) + _3277;
                        float _3283 = _3273 * _3273;
                        float _3287 = ((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3272) / ((_3283 * 0.699999988079071044921875) + 1.0);
                        float _3291 = (-0.0) - _1919;
                        float _3292 = (-0.0) - _1920;
                        float _3293 = (-0.0) - _1921;
                        float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                        float _3298 = _3297 * _3291;
                        float _3299 = _3297 * _3292;
                        float _3300 = _3297 * _3293;
                        float _3307 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                        float _3308 = 1.0 - _865;
                        float _3315 = sqrt(1.0 - ((1.0 - (_3308 * _3308)) * (1.0 - (_3307 * _3307))));
                        float _3316 = _3315 * _3315;
                        float _3317 = _3316 * _3316;
                        float _3318 = _3298 + _3263;
                        float _3319 = _3299 + _3264;
                        float _3320 = _3300 + _3265;
                        float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                        float _3328 = dot(vec3(_805, _808, _811), vec3(_3298, _3299, _3300));
                        float _4649 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3331 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3332 = dot(vec3(_805, _808, _811), vec3(_3324 * _3318, _3324 * _3319, _3324 * _3320));
                        float _4660 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3335 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3339 = ((_3335 * _3335) * (_3317 + (-1.0))) + 1.0;
                        float _3340 = _3276 * _3316;
                        float _3341 = _3340 * _3340;
                        float _3344 = ((1.0 - _3341) * _3266) + _3341;
                        float _4671 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3345 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3346 = 1.0 - _3316;
                        float _3356 = (0.5 / (((_3345 * ((_3331 * _3346) + _3316)) + 9.9999999392252902907785028219223e-09) + (((_3345 * _3346) + _3316) * _3331))) * _3345;
                        float _4682 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3367 = (((_3317 * 3.1415927410125732421875) * (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) / ((_3339 * _3339) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125))) * _3272;
                        _3125 = (_3287 * _3235.x) + _3193;
                        _3126 = (_3287 * _3235.y) + _3194;
                        _3127 = (_3287 * _3235.z) + _3195;
                        _3122 = (_3367 * _3252.x) + _3190;
                        _3123 = (_3367 * _3252.y) + _3191;
                        _3124 = (_3367 * _3252.z) + _3192;
                        if (_3197 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3126;
                            _3195 = _3127;
                            _3196 = _3197;
                        }
                    }
                    frontier_phi_66_pred = _3127;
                    frontier_phi_66_pred_1 = _3126;
                    frontier_phi_66_pred_2 = _3125;
                    frontier_phi_66_pred_3 = _3124;
                    frontier_phi_66_pred_4 = _3123;
                    frontier_phi_66_pred_5 = _3122;
                }
                _2932 = frontier_phi_66_pred;
                _2930 = frontier_phi_66_pred_1;
                _2928 = frontier_phi_66_pred_2;
                _2926 = frontier_phi_66_pred_3;
                _2924 = frontier_phi_66_pred_4;
                _2922 = frontier_phi_66_pred_5;
                uint _3073 = _3072 + 1u;
                if (_3073 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3066 = _2922;
                    _3067 = _2924;
                    _3068 = _2926;
                    _3069 = _2928;
                    _3070 = _2930;
                    _3071 = _2932;
                    _3072 = _3073;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
        }
        uvec4 _2935 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2936 = _2935.z;
        uint _2938 = (_2936 >> 8u) & 15u;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        if (((4294967295u << _2938) & _2841) == 0u)
        {
            _3034 = _2921;
            _3036 = _2923;
            _3038 = _2925;
            _3040 = _2927;
            _3042 = _2929;
            _3044 = _2931;
        }
        else
        {
            float _3059 = inversesqrt(dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921)));
            float _3060 = _3059 * _1919;
            float _3061 = _3059 * _1920;
            float _3062 = _3059 * _1921;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2938 < ((_2936 >> 12u) & 15u))
            {
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3173 = _2921;
                float _3174 = _2923;
                float _3175 = _2925;
                float _3176 = _2927;
                float _3177 = _2929;
                float _3178 = _2931;
                uint _3179 = _2938;
                uint _3188;
                bool _3189;
                for (;;)
                {
                    _3188 = texelFetch(g_lightClassification, int((((_2835 << 5u) + (_2821 << 9u)) + (_3179 << 2u)) >> 2u)).x;
                    _3189 = _3188 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3189)
                    {
                        frontier_phi_72_pred = _3178;
                        frontier_phi_72_pred_1 = _3177;
                        frontier_phi_72_pred_2 = _3176;
                        frontier_phi_72_pred_3 = _3175;
                        frontier_phi_72_pred_4 = _3174;
                        frontier_phi_72_pred_5 = _3173;
                    }
                    else
                    {
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3385 = _3173;
                        float _3386 = _3174;
                        float _3387 = _3175;
                        float _3388 = _3176;
                        float _3389 = _3177;
                        float _3390 = _3178;
                        uint _3391 = _3188;
                        uint _3392;
                        vec4 _3417;
                        float _3418;
                        vec4 _3433;
                        vec3 _3445;
                        vec4 _3460;
                        vec4 _3475;
                        float _3521;
                        bool _3522;
                        for (;;)
                        {
                            uint _3402 = ((_3179 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3391));
                            _3392 = (_3391 + 4294967295u) & _3391;
                            uint _3404 = _3402 * 40u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            _3418 = _3417.w;
                            uint _3420 = (_3402 * 40u) + 4u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3402 * 40u) + 8u;
                            _3445 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x));
                            uint _3447 = (_3402 * 40u) + 16u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3402 * 40u) + 20u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3402 * 40u) + 24u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3496 = (_3402 * 40u) + 28u;
                            vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            _3521 = fma(_1921, _3509.z, fma(_1920, _3509.y, _3509.x * _1919)) + _3509.w;
                            _3522 = !((fma(_1921, _3490.z, fma(_1920, _3490.y, _3490.x * _1919)) + _3490.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3522)
                            {
                                float _3549 = _3417.x - _1919;
                                float _3550 = _3417.y - _1920;
                                float _3551 = _3417.z - _1921;
                                float _3552 = dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551));
                                float _3555 = inversesqrt(_3552);
                                float _3556 = _3555 * _3549;
                                float _3557 = _3555 * _3550;
                                float _3558 = _3555 * _3551;
                                float _3562 = 1.0 - (_3552 / (_3418 * _3418));
                                float _4693 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3567 = sqrt(_3552) * _3433.w;
                                float _3569 = 1.39999997615814208984375 / (_3567 + 1.39999997615814208984375);
                                float _3570 = _3569 * _3569;
                                float _3573 = ((1.0 - _3570) * dot(vec3(_3556, _3557, _3558), vec3(_805, _808, _811))) + _3570;
                                float _3576 = _3567 * _3567;
                                float _3580 = (fma(_1921, _3460.z, fma(_1920, _3460.y, _3460.x * _1919)) + _3460.w) / _3521;
                                float _3581 = (fma(_1921, _3475.z, fma(_1920, _3475.y, _3475.x * _1919)) + _3475.w) / _3521;
                                float _3585 = 1.0 - dot(vec2(_3580, _3581), vec2(_3580, _3581));
                                float _4709 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3587 = _3586 * (((isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0))) * _3563) / ((_3576 * 0.699999988079071044921875) + 1.0));
                                float _3599 = exp2(log2(1.0 / ((_3576 * 3.5) + 5.0)) * 0.25);
                                float _3600 = 1.0 - _865;
                                float _3607 = sqrt(1.0 - ((1.0 - (_3600 * _3600)) * (1.0 - (_3599 * _3599))));
                                float _3608 = _3607 * _3607;
                                float _3609 = _3608 * _3608;
                                float _3610 = _3556 - _3060;
                                float _3611 = _3557 - _3061;
                                float _3612 = _3558 - _3062;
                                float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                                float _3620 = dot(vec3(_805, _808, _811), vec3((-0.0) - _3060, (-0.0) - _3061, (-0.0) - _3062));
                                float _4720 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3623 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3624 = dot(vec3(_805, _808, _811), vec3(_3616 * _3610, _3616 * _3611, _3616 * _3612));
                                float _4731 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3627 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3631 = ((_3627 * _3627) * (_3609 + (-1.0))) + 1.0;
                                float _3632 = _3569 * _3608;
                                float _3633 = _3632 * _3632;
                                float _3639 = ((1.0 - _3633) * dot(vec3(_805, _808, _811), vec3(_3556, _3557, _3558))) + _3633;
                                float _4742 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3641 = 1.0 - _3608;
                                float _3651 = (0.5 / (((_3640 * ((_3623 * _3641) + _3608)) + 9.9999999392252902907785028219223e-09) + (((_3640 * _3641) + _3608) * _3623))) * _3640;
                                float _4753 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3661 = (_3586 * _3563) * (((_3609 * 3.1415927410125732421875) * (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) / ((_3631 * _3631) * ((_3576 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3587 * _3433.y;
                                frontier_phi_78_pred_1 = _3587 * _3433.x;
                                frontier_phi_78_pred_2 = _3661 * _3445.z;
                                frontier_phi_78_pred_3 = _3661 * _3445.y;
                                frontier_phi_78_pred_4 = _3661 * _3445.x;
                                frontier_phi_78_pred_5 = _3587 * _3433.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3669 = frontier_phi_78_pred;
                            _3668 = frontier_phi_78_pred_1;
                            _3667 = frontier_phi_78_pred_2;
                            _3666 = frontier_phi_78_pred_3;
                            _3665 = frontier_phi_78_pred_4;
                            _3670 = frontier_phi_78_pred_5;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            if (_3392 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3392;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3377;
                        frontier_phi_72_pred_1 = _3376;
                        frontier_phi_72_pred_2 = _3375;
                        frontier_phi_72_pred_3 = _3374;
                        frontier_phi_72_pred_4 = _3373;
                        frontier_phi_72_pred_5 = _3372;
                    }
                    _3045 = frontier_phi_72_pred;
                    _3043 = frontier_phi_72_pred_1;
                    _3041 = frontier_phi_72_pred_2;
                    _3039 = frontier_phi_72_pred_3;
                    _3037 = frontier_phi_72_pred_4;
                    _3035 = frontier_phi_72_pred_5;
                    uint _3180 = _3179 + 1u;
                    if (_3180 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3173 = _3035;
                        _3174 = _3037;
                        _3175 = _3039;
                        _3176 = _3041;
                        _3177 = _3043;
                        _3178 = _3045;
                        _3179 = _3180;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3045;
                frontier_phi_60_61_ladder_1 = _3043;
                frontier_phi_60_61_ladder_2 = _3039;
                frontier_phi_60_61_ladder_3 = _3037;
                frontier_phi_60_61_ladder_4 = _3035;
                frontier_phi_60_61_ladder_5 = _3041;
            }
            else
            {
                frontier_phi_60_61_ladder = _2931;
                frontier_phi_60_61_ladder_1 = _2929;
                frontier_phi_60_61_ladder_2 = _2925;
                frontier_phi_60_61_ladder_3 = _2923;
                frontier_phi_60_61_ladder_4 = _2921;
                frontier_phi_60_61_ladder_5 = _2927;
            }
            _3034 = frontier_phi_60_61_ladder_4;
            _3036 = frontier_phi_60_61_ladder_3;
            _3038 = frontier_phi_60_61_ladder_2;
            _3040 = frontier_phi_60_61_ladder_5;
            _3042 = frontier_phi_60_61_ladder_1;
            _3044 = frontier_phi_60_61_ladder;
        }
        float _3049 = isnan(1.0) ? _849 : (isnan(_849) ? 1.0 : min(_849, 1.0));
        _2854 = (_3049 * _3040) + _2385;
        _2856 = (_3049 * _3042) + _2387;
        _2858 = (_3049 * _3044) + _2389;
        _2860 = ((_3034 * 0.039999999105930328369140625) * _3049) + _2708;
        _2862 = ((_3036 * 0.039999999105930328369140625) * _3049) + _2710;
        _2864 = ((_3038 * 0.039999999105930328369140625) * _3049) + _2712;
    }
    else
    {
        _2854 = _2385;
        _2856 = _2387;
        _2858 = _2389;
        _2860 = _2708;
        _2862 = _2710;
        _2864 = _2712;
    }
    float _4769 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4780 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4791 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    uint _2884 = _240 + 6u;
    float _2892 = _786 / cbSceneParam._m0[86u].x;
    float _2893 = _787 / cbSceneParam._m0[86u].y;
    vec4 _2907 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2892, _2893, (log2((isnan(cbSceneParam._m0[77u].w) ? _719 : (isnan(_719) ? cbSceneParam._m0[77u].w : min(_719, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2909 = _2907.x;
    float _2910 = _2907.y;
    float _2911 = _2907.z;
    float _2912 = _2907.w;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    if (_719 > cbSceneParam._m0[78u].w)
    {
        float _2946 = isnan(_719) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _719 : min(cbSceneParam._m0[80u].w, _719));
        float _2947 = _2946 / _719;
        float _2958 = _2947 * _771;
        float _2959 = _772 * _2947;
        float _2960 = (-0.0) - _2959;
        float _2962 = _2947 * _773;
        float _2964 = (cbSceneParam._m0[77u].w * _2960) / _2946;
        float _2965 = _2964 + cbSceneParam._m0[79u].w;
        float _2966 = cbSceneParam._m0[79u].w - _2959;
        float _2972 = sqrt(((_2958 * _2958) + (_2959 * _2959)) + (_2962 * _2962));
        float _2975 = (1.0 - (cbSceneParam._m0[77u].w / _2946)) * _2972;
        float _2980 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2982 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3135;
        if (abs((_2960 - _2964) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3135 = ((((_2965 > 0.0) ? exp2(_2980 * _2965) : (2.0 - exp2(_2982 * _2965))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2975;
        }
        else
        {
            float _3095 = 1.0 / cbSceneParam._m0[80u].x;
            float _3096 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : max(_2965, _2966));
            float _3097 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : min(_2965, _2966));
            float _3106 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : min(_3096, 0.0));
            float _3107 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : min(_3097, 0.0));
            _3135 = ((abs(_2972 / _2960) * cbSceneParam._m0[80u].y) * ((((_3106 - _3107) * 2.0) - ((exp2(_2980 * (isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0)))) - exp2(_2980 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))))) * _3095)) - ((exp2(_2982 * _3106) - exp2(_2982 * _3107)) * _3095))) + (_2975 * cbSceneParam._m0[80u].z);
        }
        vec4 _3137 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2892, _2893, 1.0), 0.0);
        float _3146 = exp2((_3135 * (-1.44269502162933349609375)) * (1.0 - _3137.w));
        float _3147 = log2(_3146);
        float _3163 = log2(_2912);
        _2984 = (exp2(_3163 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].x)) * _3137.x) / cbSceneParam._m0[78u].x)) + _2909;
        _2986 = (exp2(_3163 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].y)) * _3137.y) / cbSceneParam._m0[78u].y)) + _2910;
        _2988 = (exp2(_3163 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].z)) * _3137.z) / cbSceneParam._m0[78u].z)) + _2911;
        _2990 = _3146 * _2912;
    }
    else
    {
        _2984 = _2909;
        _2986 = _2910;
        _2988 = _2911;
        _2990 = _2912;
    }
    float _3002 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3003 = _3002 == 3.0;
    float _3004 = log2(_2990);
    float _3011 = exp2(_3004 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2854 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _849))) + ((_2860 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1653)) * cbPerFrame._m0[3u].x));
    float _3012 = exp2(_3004 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2856 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _849))) + ((_2862 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1653)) * cbPerFrame._m0[3u].x));
    float _3013 = exp2(_3004 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2858 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _849))) + ((_2864 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1653)) * cbPerFrame._m0[3u].x));
    float _3022 = (_3002 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3022 * (_3003 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2984)));
    SV_Target.y = _3022 * (_3003 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2986)));
    SV_Target.z = _3022 * (_3003 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2988)));
    SV_Target.w = cbInstanceData._m0[_2884].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2884].w;
}


