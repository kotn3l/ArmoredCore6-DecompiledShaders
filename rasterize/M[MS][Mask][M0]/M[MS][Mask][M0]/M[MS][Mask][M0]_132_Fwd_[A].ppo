#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1418;
float _3774;
float _3775;
float _3776;
float _3777;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _360.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].z) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3786 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _439 = (_432 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _440 = (_432 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _441 = (_432 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _360.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[24u].z) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3797 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _512 = (_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439;
    float _513 = (_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440;
    float _514 = (_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441;
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _270) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _271) + cbTextureTilingScale._m0[24u].w));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _551 = _549.x;
    float _561 = dot(vec4(_551, _549.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _573 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _360.z) * 2.0) - ((((_551 - _561) * cbMtdParam._m0[24u].z) + _561) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3808 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _587 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_574 * ((_532.x * cbMtdParam._m0[14u].x) - _512)) + _512);
    float _590 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_574 * ((_532.y * cbMtdParam._m0[14u].y) - _513)) + _513);
    float _593 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_574 * ((_532.z * cbMtdParam._m0[14u].z) - _514)) + _514);
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _648 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _650 = _648.x;
    float _651 = _648.y;
    float _652 = _648.z;
    float _659 = ((_631.x - _650) * _432) + _650;
    float _660 = ((_631.y - _651) * _432) + _651;
    float _661 = ((_631.z - _652) * _432) + _652;
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _684 = ((_673.x - _659) * _505) + _659;
    float _685 = ((_673.y - _660) * _505) + _660;
    float _686 = ((_673.z - _661) * _505) + _661;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _270) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _271) + cbTextureTilingScale._m0[23u].w));
    float _711 = ((_698.z - _686) * _574) + _686;
    float _714 = ((((_698.x - _684) * _574) + _684) * 2.0) + (-1.0);
    float _716 = ((((_698.y - _685) * _574) + _685) * 2.0) + (-1.0);
    float _717 = dot(vec2(_714, _716), vec2(_714, _716));
    float _3819 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _722 = sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))));
    vec4 _736 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _761 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _763 = _761.x;
    float _764 = 1.0 - _763;
    float _777 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_763 - _764) * cbMtdParam._m0[24u].w) + _764) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3830 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _778 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _785 = (_778 * ((_611.x * cbMtdParam._m0[18u].x) - _587)) + _587;
    float _786 = (_778 * ((_611.y * cbMtdParam._m0[18u].y) - _590)) + _590;
    float _787 = (_778 * ((_611.z * cbMtdParam._m0[18u].z) - _593)) + _593;
    float _791 = (cbMtdParam._m0[19u].w * (_736.z - _711)) + _711;
    vec4 _804 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _811 = (_804.x * 2.0) + (-1.0);
    float _812 = (_804.y * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _3841 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _821 = (_778 * (_804.z - _791)) + _791;
    float _824 = (((_736.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _714;
    float _825 = (((_736.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _716;
    float _837 = (((_811 - _824) + (cbMtdParam._m0[21u].x * _824)) * _778) + _824;
    float _838 = (((_812 - _825) + (cbMtdParam._m0[21u].x * _825)) * _778) + _825;
    float _839 = (_778 * (sqrt(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) - _722)) + _722;
    float _843 = cbMtdParam._m0[22u].x + _736.w;
    float _846 = fma(_839, _237 * NORMAL.x, fma(_838, _244 * TANGENT.x, (_230 * _222) * _837));
    float _849 = fma(_839, _237 * NORMAL.y, fma(_838, _244 * TANGENT.y, (_230 * _223) * _837));
    float _852 = fma(_839, _237 * NORMAL.z, fma(_838, _244 * TANGENT.z, (_230 * _224) * _837));
    float _856 = inversesqrt(dot(vec3(_846, _849, _852), vec3(_846, _849, _852)));
    float _857 = _856 * _846;
    float _858 = _856 * _849;
    float _859 = _856 * _852;
    float _3852 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _860 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _3874 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _3885 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _3896 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _878 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _929 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _919);
    float _930 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _919);
    float _931 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _919);
    float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
    float _936 = _929 * _935;
    float _937 = _930 * _935;
    float _938 = _931 * _935;
    vec4 _943 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _945 = _943.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1099 = sqrt(((_929 * _929) + (_930 * _930)) + (_931 * _931));
        float _1105 = (cbMatDynParam._m0[5u].x * _1099) + cbMatDynParam._m0[5u].y;
        float _3907 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1110 = (cbMatDynParam._m0[5u].z * _1099) + cbMatDynParam._m0[5u].w;
        float _3918 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) - _1106)) + _1106) < ((_945 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _956 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _957 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _975 = fma(_859, cbSceneParam._m0[5u].z, fma(_858, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _857));
    float _978 = fma(_859, cbSceneParam._m0[6u].z, fma(_858, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _857));
    float _981 = fma(_859, cbSceneParam._m0[7u].z, fma(_858, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _857));
    uint _994 = _250 + 9u;
    uint _995 = _994 + uint(cbMatDynParam._m0[0u].w);
    float _1001 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_995].x;
    float _1002 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_995].y;
    float _1003 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_995].z;
    float _3929 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    vec4 _1015 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _956, cbSceneParam._m0[86u].y * _957));
    float _1019 = ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * TEXCOORD_5.w) * _1015.x;
    float _1020 = dot(vec3(_857, _858, _859), vec3(_936, _937, _938));
    float _1023 = _1020 * 2.0;
    float _1027 = (_1023 * _857) - _936;
    float _1028 = (_1023 * _858) - _937;
    float _1029 = (_1023 * _859) - _938;
    float _1033 = abs(dot(vec3(_936, _937, _938), vec3(_857, _858, _859)));
    float _3962 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1035 = sqrt(_860);
    float _1048 = exp2((_1035 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1035 * 3.0));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1417;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1142 = fma(_1088, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1080));
        float _1146 = fma(_1088, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1080));
        float _1150 = fma(_1088, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1080));
        float _1175 = _1080 + _857;
        float _1176 = _1084 + _858;
        float _1177 = _1088 + _859;
        float _1187 = fma(_1177, cbModelParam._m0[26u].z, fma(_1176, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1175)) - _1142;
        float _1188 = fma(_1177, cbModelParam._m0[27u].z, fma(_1176, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1175)) - _1146;
        float _1189 = fma(_1177, cbModelParam._m0[28u].z, fma(_1176, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1175)) - _1150;
        float _1193 = inversesqrt(dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189)));
        float _1206 = ((_1193 * _1187) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1142 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1193 * _1188) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1146 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1193 * _1189) / cbModelParam._m0[34u].z) + ((((((_1150 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        float _1245 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1211.x + (-0.5));
        float _1247 = _1245 * (_1211.y + (-0.5));
        float _1248 = _1245 * (_1211.z + (-0.5));
        float _1255 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1218.x + (-0.5));
        float _1257 = _1255 * (_1218.y + (-0.5));
        float _1258 = _1255 * (_1218.z + (-0.5));
        float _1265 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1225.x + (-0.5));
        float _1267 = _1265 * (_1225.y + (-0.5));
        float _1268 = _1265 * (_1225.z + (-0.5));
        float _1275 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1232.x + (-0.5));
        float _1277 = _1275 * (_1232.y + (-0.5));
        float _1278 = _1275 * (_1232.z + (-0.5));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = _1246 * 0.5;
        float _1283 = _1256 * 0.5;
        float _1284 = _1266 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1299 = (dot(vec3(_857, _858, _859), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1309 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4010 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1311 + 1.0))) + _1316) * _1279;
        float _1326 = _1247 * 0.5;
        float _1327 = _1257 * 0.5;
        float _1328 = _1267 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_857, _858, _859), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4043 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1353 + 1.0))) + _1358) * _1280;
        float _1368 = _1248 * 0.5;
        float _1369 = _1258 * 0.5;
        float _1370 = _1268 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_857, _858, _859), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4076 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1395 + 1.0))) + _1400) * _1281;
        _1417 = _1248;
        _1419 = _1247;
        _1420 = _1246;
        _1421 = _1258;
        _1422 = _1257;
        _1423 = _1256;
        _1424 = _1268;
        _1425 = _1267;
        _1426 = _1266;
        _1427 = _1281;
        _1428 = _1280;
        _1429 = _1279;
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
    }
    else
    {
        _1417 = _1418;
        _1419 = _1418;
        _1420 = _1418;
        _1421 = _1418;
        _1422 = _1418;
        _1423 = _1418;
        _1424 = _1418;
        _1425 = _1418;
        _1426 = _1418;
        _1427 = _1418;
        _1428 = _1418;
        _1429 = _1418;
        _1430 = 0.0;
        _1431 = 0.0;
        _1432 = 0.0;
    }
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1458 = fma(_1088, cbModelParam._m0[30u].z, fma(_1084, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1080));
        float _1462 = fma(_1088, cbModelParam._m0[31u].z, fma(_1084, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1080));
        float _1466 = fma(_1088, cbModelParam._m0[32u].z, fma(_1084, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1080));
        float _1489 = _1080 + _857;
        float _1490 = _1084 + _858;
        float _1491 = _1088 + _859;
        float _1501 = fma(_1491, cbModelParam._m0[30u].z, fma(_1490, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1489)) - _1458;
        float _1502 = fma(_1491, cbModelParam._m0[31u].z, fma(_1490, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1489)) - _1462;
        float _1503 = fma(_1491, cbModelParam._m0[32u].z, fma(_1490, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1489)) - _1466;
        float _1507 = inversesqrt(dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503)));
        float _1520 = ((_1507 * _1501) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1458 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1521 = ((_1507 * _1502) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1462 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1522 = ((_1507 * _1503) / cbModelParam._m0[35u].z) + ((((((_1466 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        float _1557 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1524.x + (-0.5));
        float _1559 = _1557 * (_1524.y + (-0.5));
        float _1560 = _1557 * (_1524.z + (-0.5));
        float _1567 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1531.x + (-0.5));
        float _1569 = _1567 * (_1531.y + (-0.5));
        float _1570 = _1567 * (_1531.z + (-0.5));
        float _1577 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1538.x + (-0.5));
        float _1579 = _1577 * (_1538.y + (-0.5));
        float _1580 = _1577 * (_1538.z + (-0.5));
        float _1587 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1545.x + (-0.5));
        float _1589 = _1587 * (_1545.y + (-0.5));
        float _1590 = _1587 * (_1545.z + (-0.5));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = _1558 * 0.5;
        float _1595 = _1568 * 0.5;
        float _1596 = _1578 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_857, _858, _859), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4139 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1621 + 1.0))) + _1626) * _1591;
        float _1636 = _1559 * 0.5;
        float _1637 = _1569 * 0.5;
        float _1638 = _1579 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_857, _858, _859), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4172 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1663 + 1.0))) + _1668) * _1592;
        float _1678 = _1560 * 0.5;
        float _1679 = _1570 * 0.5;
        float _1680 = _1580 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_857, _858, _859), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4205 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1705 + 1.0))) + _1710) * _1593;
        _1727 = _1560;
        _1728 = _1559;
        _1729 = _1558;
        _1730 = _1570;
        _1731 = _1569;
        _1732 = _1568;
        _1733 = _1580;
        _1734 = _1579;
        _1735 = _1578;
        _1736 = _1593;
        _1737 = _1592;
        _1738 = _1591;
        _1739 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1740 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
    }
    else
    {
        _1727 = _1418;
        _1728 = _1418;
        _1729 = _1418;
        _1730 = _1418;
        _1731 = _1418;
        _1732 = _1418;
        _1733 = _1418;
        _1734 = _1418;
        _1735 = _1418;
        _1736 = _1418;
        _1737 = _1418;
        _1738 = _1418;
        _1739 = 0.0;
        _1740 = 0.0;
        _1741 = 0.0;
    }
    float _1751 = (cbModelParam._m0[1u].x * (_1739 - _1430)) + _1430;
    float _1752 = (cbModelParam._m0[1u].x * (_1740 - _1431)) + _1431;
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1432)) + _1432;
    float _1774 = fma(_1753, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1751 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1753, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1751 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1753, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1751));
    float _1795 = _1027 * 0.5;
    float _1796 = _1028 * 0.5;
    float _1797 = _1029 * 0.5;
    float _1798 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1801 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1728, _1731, _1734, _1737));
    float _1804 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1727, _1730, _1733, _1736));
    float _1838;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1811 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1417, _1421, _1424, _1427));
        float _1815 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1419, _1422, _1425, _1428));
        float _1819 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1420, _1423, _1426, _1429));
        float _1826 = dot(vec4(cbModelParam._m0[39u]), vec4(_1795, _1796, _1797, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1849;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1840 = dot(vec4(cbModelParam._m0[40u]), vec4(_1795, _1796, _1797, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1840) ? 0.0 : (isnan(0.0) ? _1840 : max(0.0, _1840))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1853 = (_1849 * cbModelParam._m0[1u].x) + (_1838 * (1.0 - cbModelParam._m0[1u].x));
    float _1863 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _860);
    float _1864 = isnan(_1863) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1863 : min(cbModelParam._m0[25u].z, _1863));
    float _1944;
    float _1946;
    float _1948;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1911 = fma(_1088, cbModelParam._m0[13u].z, fma(_1084, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1080)) + cbModelParam._m0[13u].w;
        float _1915 = fma(_1088, cbModelParam._m0[14u].z, fma(_1084, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1080)) + cbModelParam._m0[14u].w;
        float _1919 = fma(_1088, cbModelParam._m0[15u].z, fma(_1084, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1080)) + cbModelParam._m0[15u].w;
        float _1922 = fma(_1029, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1027));
        float _1925 = fma(_1029, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1027));
        float _1928 = fma(_1029, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1027));
        float _1956;
        if (_1922 > 0.0)
        {
            _1956 = abs((1.0 - _1911) / _1922);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1911 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1956 = frontier_phi_17_15_ladder;
        }
        float _2156;
        if (_1925 > 0.0)
        {
            _2156 = abs((1.0 - _1915) / _1925);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1915 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2156 = frontier_phi_26_22_ladder;
        }
        float _2399;
        if (_1928 > 0.0)
        {
            _2399 = abs((1.0 - _1919) / _1928);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1919 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2399 = frontier_phi_38_33_ladder;
        }
        float _2401 = isnan(_2156) ? _1956 : (isnan(_1956) ? _2156 : min(_1956, _2156));
        float _2402 = isnan(_2399) ? _2401 : (isnan(_2401) ? _2399 : min(_2401, _2399));
        float _2406 = (_2402 * _1922) + _1911;
        float _2407 = (_2402 * _1925) + _1915;
        float _2408 = (_2402 * _1928) + _1919;
        float _2409 = _2402 * 9.9999997473787516355514526367188e-05;
        float _2411 = (-1.0) - _2409;
        float _2413 = _2409 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2408 > _2413) || ((_2408 < _2411) || ((_2407 > _2413) || ((_2407 < _2411) || ((_2406 < _2411) || (_2406 > _2413))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2408, cbModelParam._m0[9u].z, fma(_2407, cbModelParam._m0[9u].y, _2406 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2408, cbModelParam._m0[10u].z, fma(_2407, cbModelParam._m0[10u].y, _2406 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2408, cbModelParam._m0[11u].z, fma(_2407, cbModelParam._m0[11u].y, _2406 * cbModelParam._m0[11u].x))), _1864);
            frontier_phi_16_38_ladder = _2532.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2532.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2532.x * cbModelParam._m0[1u].y;
        }
        _1944 = frontier_phi_16_38_ladder_2;
        _1946 = frontier_phi_16_38_ladder_1;
        _1948 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1932 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1027, _1028, _1029), _1864);
        _1944 = _1932.x * cbModelParam._m0[1u].y;
        _1946 = _1932.y * cbModelParam._m0[1u].y;
        _1948 = _1932.z * cbModelParam._m0[1u].y;
    }
    float _1952 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _860);
    float _1953 = isnan(_1952) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1952 : min(cbModelParam._m0[25u].w, _1952));
    float _2042;
    float _2044;
    float _2046;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2006 = fma(_1088, cbModelParam._m0[21u].z, fma(_1084, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1080)) + cbModelParam._m0[21u].w;
        float _2010 = fma(_1088, cbModelParam._m0[22u].z, fma(_1084, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1080)) + cbModelParam._m0[22u].w;
        float _2014 = fma(_1088, cbModelParam._m0[23u].z, fma(_1084, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1080)) + cbModelParam._m0[23u].w;
        float _2017 = fma(_1029, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1027));
        float _2020 = fma(_1029, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1027));
        float _2023 = fma(_1029, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1027));
        float _2161;
        if (_2017 > 0.0)
        {
            _2161 = abs((1.0 - _2006) / _2017);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2006 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2161 = frontier_phi_28_24_ladder;
        }
        float _2426;
        if (_2020 > 0.0)
        {
            _2426 = abs((1.0 - _2010) / _2020);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2010 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2426 = frontier_phi_40_35_ladder;
        }
        float _2631;
        if (_2023 > 0.0)
        {
            _2631 = abs((1.0 - _2014) / _2023);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2014 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2631 = frontier_phi_49_46_ladder;
        }
        float _2633 = isnan(_2426) ? _2161 : (isnan(_2161) ? _2426 : min(_2161, _2426));
        float _2634 = isnan(_2631) ? _2633 : (isnan(_2633) ? _2631 : min(_2633, _2631));
        float _2638 = (_2634 * _2017) + _2006;
        float _2639 = (_2634 * _2020) + _2010;
        float _2640 = (_2634 * _2023) + _2014;
        float _2641 = _2634 * 9.9999997473787516355514526367188e-05;
        float _2642 = (-1.0) - _2641;
        float _2644 = _2641 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2640 > _2644) || ((_2640 < _2642) || ((_2639 > _2644) || ((_2639 < _2642) || ((_2638 < _2642) || (_2638 > _2644))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2839 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2640, cbModelParam._m0[17u].z, fma(_2639, cbModelParam._m0[17u].y, _2638 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2640, cbModelParam._m0[18u].z, fma(_2639, cbModelParam._m0[18u].y, _2638 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2640, cbModelParam._m0[19u].z, fma(_2639, cbModelParam._m0[19u].y, _2638 * cbModelParam._m0[19u].x))), _1953);
            frontier_phi_25_49_ladder = _2839.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2839.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2839.x * cbModelParam._m0[1u].z;
        }
        _2042 = frontier_phi_25_49_ladder_2;
        _2044 = frontier_phi_25_49_ladder_1;
        _2046 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2026 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1027, _1028, _1029), _1953);
        _2042 = _2026.x * cbModelParam._m0[1u].z;
        _2044 = _2026.y * cbModelParam._m0[1u].z;
        _2046 = _2026.z * cbModelParam._m0[1u].z;
    }
    float _2058 = ((((1.0 - _1048) * ((_1035 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1048 * _1035)) * _1019;
    float _2059 = _2058 * ((cbModelParam._m0[1u].w * (_2042 - _1944)) + _1944);
    float _2060 = _2058 * ((cbModelParam._m0[1u].w * (_2044 - _1946)) + _1946);
    float _2061 = _2058 * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2064 = fma(_2061, cbSceneParam._m0[89u].z, fma(_2060, cbSceneParam._m0[89u].y, _2059 * cbSceneParam._m0[89u].x));
    float _2067 = fma(_2061, cbSceneParam._m0[90u].z, fma(_2060, cbSceneParam._m0[90u].y, _2059 * cbSceneParam._m0[90u].x));
    float _2070 = fma(_2061, cbSceneParam._m0[91u].z, fma(_2060, cbSceneParam._m0[91u].y, _2059 * cbSceneParam._m0[91u].x));
    uvec4 _2080 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2082 = _2080.x * 14u;
    uint _2083 = _2082 + 13u;
    float _2090 = _1019 + (-1.0);
    float _2095 = (cbLight._m0[_2083].x * _2090) + 1.0;
    float _2096 = (cbLight._m0[_2083].y * _2090) + 1.0;
    float _2097 = (cbLight._m0[_2083].z * _2090) + 1.0;
    float _2098 = (cbLight._m0[_2083].w * _2090) + 1.0;
    uint _2099 = _2082 + 5u;
    float _2105 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
    uint _2109 = _2082 + 4u;
    float _2115 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
    uint _2119 = _2082 | 1u;
    float _2130 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_857, _858, _859));
    float _2133 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_857, _858, _859));
    float _4341 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _4352 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2138 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.3183098733425140380859375;
    float _2140 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.3183098733425140380859375;
    float _2147 = ((cbLight._m0[_2099].x * _2105) * _2140) + ((cbLight._m0[_2109].x * _2115) * _2138);
    float _2148 = ((_2105 * cbLight._m0[_2099].y) * _2140) + ((_2115 * cbLight._m0[_2109].y) * _2138);
    float _2149 = ((_2105 * cbLight._m0[_2099].z) * _2140) + ((_2115 * cbLight._m0[_2109].z) * _2138);
    uvec4 _2153 = floatBitsToUint(cbLight._m0[_2082 + 12u]);
    bool _2155 = _2153.x == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2155)
    {
        _2166 = _2147;
        _2168 = _2148;
        _2170 = _2149;
    }
    else
    {
        uint _2174 = _2082 + 6u;
        float _2190 = (dot(vec3(cbLight._m0[_2082 + 2u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4363 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2193 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2166 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _2147;
        _2168 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _2148;
        _2170 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _2149;
    }
    bool _2173 = _2153.y == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2173)
    {
        _2211 = _2166;
        _2213 = _2168;
        _2215 = _2170;
    }
    else
    {
        uint _2370 = _2082 + 7u;
        float _2386 = (dot(vec3(cbLight._m0[_2082 + 3u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2387 = _2386 * _2386;
        float _4379 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2388 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2389 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2211 = (((cbLight._m0[_2370].x * 0.3183098733425140380859375) * _2388) * _2389) + _2166;
        _2213 = (((cbLight._m0[_2370].y * 0.3183098733425140380859375) * _2388) * _2389) + _2168;
        _2215 = (((cbLight._m0[_2370].z * 0.3183098733425140380859375) * _2388) * _2389) + _2170;
    }
    uint _2218 = _2082 + 8u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _860) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_2082].x + _936;
    float _2234 = cbLight._m0[_2082].y + _937;
    float _2235 = cbLight._m0[_2082].z + _938;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2082].xyz));
    float _4395 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _4406 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _2247 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2248 = dot(vec3(_857, _858, _859), vec3(_2240, _2241, _2242));
    float _4417 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2240, _2241, _2242));
    float _4428 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2232 * _2232;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2272 = 1.0 - _2232;
    float _2283 = (0.5 / (((_2247 * ((_2246 * _2272) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2272) + _2232) * _2246))) * _2246;
    float _4439 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2285 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    uint _2296 = _2082 + 9u;
    float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _860) * 0.949999988079071044921875);
    float _2308 = _2307 * _2307;
    float _2309 = cbLight._m0[_2119].x + _936;
    float _2310 = cbLight._m0[_2119].y + _937;
    float _2311 = cbLight._m0[_2119].z + _938;
    float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
    float _2316 = _2315 * _2309;
    float _2317 = _2315 * _2310;
    float _2318 = _2315 * _2311;
    float _2319 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2119].xyz));
    float _4450 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2322 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2323 = dot(vec3(_857, _858, _859), vec3(_2316, _2317, _2318));
    float _4461 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2326 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2327 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2316, _2317, _2318));
    float _4472 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2331 = _2308 * _2308;
    float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
    float _2344 = (exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2345 = 1.0 - _2308;
    float _2355 = (0.5 / (((_2247 * ((_2322 * _2345) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2345) + _2308) * _2322))) * _2322;
    float _4483 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2357 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
    float _2367 = (((_2344 * cbLight._m0[_2296].x) * _2357) * _2105) + (((_2271 * cbLight._m0[_2218].x) * _2285) * _2115);
    float _2368 = (((_2344 * cbLight._m0[_2296].y) * _2357) * _2105) + (((_2271 * cbLight._m0[_2218].y) * _2285) * _2115);
    float _2369 = (((_2344 * cbLight._m0[_2296].z) * _2357) * _2105) + (((_2271 * cbLight._m0[_2218].z) * _2285) * _2115);
    float _2431;
    float _2433;
    float _2435;
    if (_2155)
    {
        _2431 = _2367;
        _2433 = _2368;
        _2435 = _2369;
    }
    else
    {
        uint _2437 = _2082 + 2u;
        uint _2441 = _2082 + 10u;
        float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _860) * 0.949999988079071044921875);
        float _2456 = _2455 * _2455;
        float _2457 = cbLight._m0[_2437].x + _936;
        float _2458 = cbLight._m0[_2437].y + _937;
        float _2459 = cbLight._m0[_2437].z + _938;
        float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
        float _2464 = _2463 * _2457;
        float _2465 = _2463 * _2458;
        float _2466 = _2463 * _2459;
        float _2467 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2437].xyz));
        float _4494 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2471 = dot(vec3(_857, _858, _859), vec3(_2464, _2465, _2466));
        float _4505 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2475 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2464, _2465, _2466));
        float _4516 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2479 = _2456 * _2456;
        float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
        float _2492 = (exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2493 = 1.0 - _2456;
        float _2503 = (0.5 / (((_2247 * ((_2470 * _2493) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2493) + _2456) * _2470))) * _2470;
        float _4527 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2505 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
        float _2506 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2431 = (((_2492 * cbLight._m0[_2441].x) * _2505) * _2506) + _2367;
        _2433 = (((_2492 * cbLight._m0[_2441].y) * _2505) * _2506) + _2368;
        _2435 = (((_2492 * cbLight._m0[_2441].z) * _2505) * _2506) + _2369;
    }
    float _2541;
    float _2543;
    float _2545;
    if (_2173)
    {
        _2541 = _2431;
        _2543 = _2433;
        _2545 = _2435;
    }
    else
    {
        uint _2552 = _2082 + 3u;
        uint _2556 = _2082 + 11u;
        float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _860) * 0.949999988079071044921875);
        float _2571 = _2570 * _2570;
        float _2572 = cbLight._m0[_2552].x + _936;
        float _2573 = cbLight._m0[_2552].y + _937;
        float _2574 = cbLight._m0[_2552].z + _938;
        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
        float _2579 = _2578 * _2572;
        float _2580 = _2578 * _2573;
        float _2581 = _2578 * _2574;
        float _2582 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2552].xyz));
        float _4543 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2586 = dot(vec3(_857, _858, _859), vec3(_2579, _2580, _2581));
        float _4554 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2590 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2579, _2580, _2581));
        float _4565 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2594 = _2571 * _2571;
        float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
        float _2607 = (exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2608 = 1.0 - _2571;
        float _2618 = (0.5 / (((_2247 * ((_2585 * _2608) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2608) + _2571) * _2585))) * _2585;
        float _4576 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2620 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
        float _2621 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2541 = (((_2607 * cbLight._m0[_2556].x) * _2620) * _2621) + _2431;
        _2543 = (((_2607 * cbLight._m0[_2556].y) * _2620) * _2621) + _2433;
        _2545 = (((_2607 * cbLight._m0[_2556].z) * _2620) * _2621) + _2435;
    }
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    if (_2080.y == 0u)
    {
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2696;
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2696;
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2696;
        uvec4 _2711 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2712 = _2711.x;
        uint _2723 = uint((float(_2711.y) * floor(float(uint(cbSceneParam._m0[85u].y * _957) / _2712))) + floor(float(uint(cbSceneParam._m0[85u].x * _956) / _2712)));
        float _2733 = (log2(_2699 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2734 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        uint _2737 = uint(isnan(14.0) ? _2734 : (isnan(_2734) ? 14.0 : min(_2734, 14.0)));
        uvec4 _2742 = texelFetch(g_lightClusterGridBuffer, int(((_2737 << 2u) + (_2723 << 6u)) >> 2u));
        uint _2743 = _2742.x;
        uint _2744 = _2711.z;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        if (((((1u << ((_2744 >> 4u) & 15u)) + 4294967295u) & _2743) == 0u) || ((_2744 & 240u) == 0u))
        {
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
        }
        else
        {
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _2855;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            uint _3003 = 0u;
            uint _3012;
            bool _3013;
            for (;;)
            {
                _3012 = texelFetch(g_lightClassification, int((((_2737 << 5u) + (_2723 << 9u)) + (_3003 << 2u)) >> 2u)).x;
                _3013 = _3012 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3013)
                {
                    frontier_phi_66_pred = _2997;
                    frontier_phi_66_pred_1 = _3002;
                    frontier_phi_66_pred_2 = _3001;
                    frontier_phi_66_pred_3 = _3000;
                    frontier_phi_66_pred_4 = _2999;
                    frontier_phi_66_pred_5 = _2998;
                }
                else
                {
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    uint _3148;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3012;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    for (;;)
                    {
                        uint _3152 = uint(findLSB(_3148)) + (_3003 << 5u);
                        uint _3149 = (_3148 + 4294967295u) & _3148;
                        uint _3154 = _3152 * 48u;
                        vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 3u)).x));
                        uint _3174 = (_3152 * 48u) + 4u;
                        vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 3u)).x));
                        uint _3193 = (_3152 * 48u) + 8u;
                        vec3 _3204 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x));
                        float _3208 = _3168.x - _2697;
                        float _3209 = _3168.y - _2698;
                        float _3210 = _3168.z - _2699;
                        float _3211 = dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210));
                        float _3214 = inversesqrt(_3211);
                        float _3215 = _3214 * _3208;
                        float _3216 = _3214 * _3209;
                        float _3217 = _3214 * _3210;
                        float _3218 = dot(vec3(_975, _978, _981), vec3(_3215, _3216, _3217));
                        float _3223 = 1.0 - (_3211 * _3168.w);
                        float _4602 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3224 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3225 = sqrt(_3211) * _3187.w;
                        float _3228 = 1.39999997615814208984375 / (_3225 + 1.39999997615814208984375);
                        float _3229 = _3228 * _3228;
                        float _3232 = ((1.0 - _3229) * _3218) + _3229;
                        float _3235 = _3225 * _3225;
                        float _3239 = ((isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))) * _3224) / ((_3235 * 0.699999988079071044921875) + 1.0);
                        float _3243 = (-0.0) - _2697;
                        float _3244 = (-0.0) - _2698;
                        float _3245 = (-0.0) - _2699;
                        float _3249 = inversesqrt(dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245)));
                        float _3250 = _3249 * _3243;
                        float _3251 = _3249 * _3244;
                        float _3252 = _3249 * _3245;
                        float _3260 = exp2(log2(1.0 / ((_3235 * 3.5) + 5.0)) * 0.25);
                        float _3261 = 1.0 - _1035;
                        float _3268 = sqrt(1.0 - ((1.0 - (_3261 * _3261)) * (1.0 - (_3260 * _3260))));
                        float _3269 = _3268 * _3268;
                        float _3270 = _3269 * _3269;
                        float _3271 = _3250 + _3215;
                        float _3272 = _3251 + _3216;
                        float _3273 = _3252 + _3217;
                        float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                        float _3281 = dot(vec3(_975, _978, _981), vec3(_3250, _3251, _3252));
                        float _4618 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3284 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3285 = dot(vec3(_975, _978, _981), vec3(_3277 * _3271, _3277 * _3272, _3277 * _3273));
                        float _4629 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3292 = ((_3288 * _3288) * (_3270 + (-1.0))) + 1.0;
                        float _3293 = _3228 * _3269;
                        float _3294 = _3293 * _3293;
                        float _3297 = ((1.0 - _3294) * _3218) + _3294;
                        float _4640 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3298 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3299 = 1.0 - _3269;
                        float _3309 = (0.5 / (((_3298 * ((_3284 * _3299) + _3269)) + 9.9999999392252902907785028219223e-09) + (((_3298 * _3299) + _3269) * _3284))) * _3298;
                        float _4651 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3320 = (((_3270 * 3.1415927410125732421875) * (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) / ((_3292 * _3292) * ((_3235 * 2.1991131305694580078125) + 3.141590118408203125))) * _3224;
                        _3072 = (_3239 * _3187.x) + _3145;
                        _3073 = (_3239 * _3187.y) + _3146;
                        _3074 = (_3239 * _3187.z) + _3147;
                        _3069 = (_3320 * _3204.x) + _3142;
                        _3070 = (_3320 * _3204.y) + _3143;
                        _3071 = (_3320 * _3204.z) + _3144;
                        if (_3149 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3149;
                        }
                    }
                    frontier_phi_66_pred = _3069;
                    frontier_phi_66_pred_1 = _3074;
                    frontier_phi_66_pred_2 = _3073;
                    frontier_phi_66_pred_3 = _3072;
                    frontier_phi_66_pred_4 = _3071;
                    frontier_phi_66_pred_5 = _3070;
                }
                _2845 = frontier_phi_66_pred;
                _2855 = frontier_phi_66_pred_1;
                _2853 = frontier_phi_66_pred_2;
                _2851 = frontier_phi_66_pred_3;
                _2849 = frontier_phi_66_pred_4;
                _2847 = frontier_phi_66_pred_5;
                uint _3004 = _3003 + 1u;
                if (_3004 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2997 = _2845;
                    _2998 = _2847;
                    _2999 = _2849;
                    _3000 = _2851;
                    _3001 = _2853;
                    _3002 = _2855;
                    _3003 = _3004;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
        }
        uvec4 _2858 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2859 = _2858.z;
        uint _2861 = (_2859 >> 8u) & 15u;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        if (((4294967295u << _2861) & _2743) == 0u)
        {
            _2965 = _2844;
            _2967 = _2846;
            _2969 = _2848;
            _2971 = _2850;
            _2973 = _2852;
            _2975 = _2854;
        }
        else
        {
            float _2990 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
            float _2991 = _2990 * _2697;
            float _2992 = _2990 * _2698;
            float _2993 = _2990 * _2699;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2861 < ((_2859 >> 12u) & 15u))
            {
                float _2966;
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _3125 = _2844;
                float _3126 = _2846;
                float _3127 = _2848;
                float _3128 = _2850;
                float _3129 = _2852;
                float _3130 = _2854;
                uint _3131 = _2861;
                uint _3140;
                bool _3141;
                for (;;)
                {
                    _3140 = texelFetch(g_lightClassification, int((((_2737 << 5u) + (_2723 << 9u)) + (_3131 << 2u)) >> 2u)).x;
                    _3141 = _3140 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3141)
                    {
                        frontier_phi_77_pred = _3130;
                        frontier_phi_77_pred_1 = _3129;
                        frontier_phi_77_pred_2 = _3128;
                        frontier_phi_77_pred_3 = _3127;
                        frontier_phi_77_pred_4 = _3126;
                        frontier_phi_77_pred_5 = _3125;
                    }
                    else
                    {
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3347 = _3125;
                        float _3348 = _3126;
                        float _3349 = _3127;
                        float _3350 = _3128;
                        float _3351 = _3129;
                        float _3352 = _3130;
                        uint _3353 = _3140;
                        uint _3354;
                        vec4 _3379;
                        float _3380;
                        vec4 _3395;
                        vec3 _3407;
                        vec4 _3422;
                        vec4 _3437;
                        float _3483;
                        bool _3484;
                        for (;;)
                        {
                            uint _3364 = ((_3131 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3353));
                            _3354 = (_3353 + 4294967295u) & _3353;
                            uint _3366 = _3364 * 40u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3380 = _3379.w;
                            uint _3382 = (_3364 * 40u) + 4u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3364 * 40u) + 8u;
                            _3407 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x));
                            uint _3409 = (_3364 * 40u) + 16u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3364 * 40u) + 20u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3364 * 40u) + 24u;
                            vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3458 = (_3364 * 40u) + 28u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            _3483 = fma(_2699, _3471.z, fma(_2698, _3471.y, _3471.x * _2697)) + _3471.w;
                            _3484 = !((fma(_2699, _3452.z, fma(_2698, _3452.y, _3452.x * _2697)) + _3452.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3484)
                            {
                                float _3511 = _3379.x - _2697;
                                float _3512 = _3379.y - _2698;
                                float _3513 = _3379.z - _2699;
                                float _3514 = dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513));
                                float _3517 = inversesqrt(_3514);
                                float _3518 = _3517 * _3511;
                                float _3519 = _3517 * _3512;
                                float _3520 = _3517 * _3513;
                                float _3524 = 1.0 - (_3514 / (_3380 * _3380));
                                float _4662 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3529 = sqrt(_3514) * _3395.w;
                                float _3531 = 1.39999997615814208984375 / (_3529 + 1.39999997615814208984375);
                                float _3532 = _3531 * _3531;
                                float _3535 = ((1.0 - _3532) * dot(vec3(_3518, _3519, _3520), vec3(_975, _978, _981))) + _3532;
                                float _3538 = _3529 * _3529;
                                float _3542 = (fma(_2699, _3422.z, fma(_2698, _3422.y, _3422.x * _2697)) + _3422.w) / _3483;
                                float _3543 = (fma(_2699, _3437.z, fma(_2698, _3437.y, _3437.x * _2697)) + _3437.w) / _3483;
                                float _3547 = 1.0 - dot(vec2(_3542, _3543), vec2(_3542, _3543));
                                float _4678 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3549 = _3548 * (((isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0))) * _3525) / ((_3538 * 0.699999988079071044921875) + 1.0));
                                float _3561 = exp2(log2(1.0 / ((_3538 * 3.5) + 5.0)) * 0.25);
                                float _3562 = 1.0 - _1035;
                                float _3569 = sqrt(1.0 - ((1.0 - (_3562 * _3562)) * (1.0 - (_3561 * _3561))));
                                float _3570 = _3569 * _3569;
                                float _3571 = _3570 * _3570;
                                float _3572 = _3518 - _2991;
                                float _3573 = _3519 - _2992;
                                float _3574 = _3520 - _2993;
                                float _3578 = inversesqrt(dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574)));
                                float _3582 = dot(vec3(_975, _978, _981), vec3((-0.0) - _2991, (-0.0) - _2992, (-0.0) - _2993));
                                float _4689 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3586 = dot(vec3(_975, _978, _981), vec3(_3578 * _3572, _3578 * _3573, _3578 * _3574));
                                float _4700 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3593 = ((_3589 * _3589) * (_3571 + (-1.0))) + 1.0;
                                float _3594 = _3531 * _3570;
                                float _3595 = _3594 * _3594;
                                float _3601 = ((1.0 - _3595) * dot(vec3(_975, _978, _981), vec3(_3518, _3519, _3520))) + _3595;
                                float _4711 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3603 = 1.0 - _3570;
                                float _3613 = (0.5 / (((_3602 * ((_3585 * _3603) + _3570)) + 9.9999999392252902907785028219223e-09) + (((_3602 * _3603) + _3570) * _3585))) * _3602;
                                float _4722 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3623 = (_3548 * _3525) * (((_3571 * 3.1415927410125732421875) * (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) / ((_3593 * _3593) * ((_3538 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3549 * _3395.y;
                                frontier_phi_83_pred_1 = _3549 * _3395.x;
                                frontier_phi_83_pred_2 = _3623 * _3407.z;
                                frontier_phi_83_pred_3 = _3623 * _3407.y;
                                frontier_phi_83_pred_4 = _3623 * _3407.x;
                                frontier_phi_83_pred_5 = _3549 * _3395.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3631 = frontier_phi_83_pred;
                            _3630 = frontier_phi_83_pred_1;
                            _3629 = frontier_phi_83_pred_2;
                            _3628 = frontier_phi_83_pred_3;
                            _3627 = frontier_phi_83_pred_4;
                            _3632 = frontier_phi_83_pred_5;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            _3334 = _3627 + _3347;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            if (_3354 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3354;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3339;
                        frontier_phi_77_pred_1 = _3338;
                        frontier_phi_77_pred_2 = _3337;
                        frontier_phi_77_pred_3 = _3336;
                        frontier_phi_77_pred_4 = _3335;
                        frontier_phi_77_pred_5 = _3334;
                    }
                    _2976 = frontier_phi_77_pred;
                    _2974 = frontier_phi_77_pred_1;
                    _2972 = frontier_phi_77_pred_2;
                    _2970 = frontier_phi_77_pred_3;
                    _2968 = frontier_phi_77_pred_4;
                    _2966 = frontier_phi_77_pred_5;
                    uint _3132 = _3131 + 1u;
                    if (_3132 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3125 = _2966;
                        _3126 = _2968;
                        _3127 = _2970;
                        _3128 = _2972;
                        _3129 = _2974;
                        _3130 = _2976;
                        _3131 = _3132;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2970;
                frontier_phi_58_59_ladder_1 = _2976;
                frontier_phi_58_59_ladder_2 = _2974;
                frontier_phi_58_59_ladder_3 = _2972;
                frontier_phi_58_59_ladder_4 = _2968;
                frontier_phi_58_59_ladder_5 = _2966;
            }
            else
            {
                frontier_phi_58_59_ladder = _2848;
                frontier_phi_58_59_ladder_1 = _2854;
                frontier_phi_58_59_ladder_2 = _2852;
                frontier_phi_58_59_ladder_3 = _2850;
                frontier_phi_58_59_ladder_4 = _2846;
                frontier_phi_58_59_ladder_5 = _2844;
            }
            _2965 = frontier_phi_58_59_ladder_5;
            _2967 = frontier_phi_58_59_ladder_4;
            _2969 = frontier_phi_58_59_ladder;
            _2971 = frontier_phi_58_59_ladder_3;
            _2973 = frontier_phi_58_59_ladder_2;
            _2975 = frontier_phi_58_59_ladder_1;
        }
        float _2980 = isnan(1.0) ? _1019 : (isnan(_1019) ? 1.0 : min(_1019, 1.0));
        _2756 = (_2980 * _2971) + _2211;
        _2758 = (_2980 * _2973) + _2213;
        _2760 = (_2980 * _2975) + _2215;
        _2762 = ((_2965 * 0.039999999105930328369140625) * _2980) + _2541;
        _2764 = ((_2967 * 0.039999999105930328369140625) * _2980) + _2543;
        _2766 = ((_2969 * 0.039999999105930328369140625) * _2980) + _2545;
    }
    else
    {
        _2756 = _2211;
        _2758 = _2213;
        _2760 = _2215;
        _2762 = _2541;
        _2764 = _2543;
        _2766 = _2545;
    }
    float _4738 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _4749 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4760 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _2783 = ((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2756 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1019))) + ((_2762 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1853)) * cbPerFrame._m0[3u].x);
    float _2784 = ((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2758 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1019))) + ((_2764 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1853)) * cbPerFrame._m0[3u].x);
    float _2785 = ((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2760 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1019))) + ((_2766 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1853)) * cbPerFrame._m0[3u].x);
    uint _2786 = _250 + 6u;
    float _2794 = _956 / cbSceneParam._m0[86u].x;
    float _2795 = _957 / cbSceneParam._m0[86u].y;
    vec4 _2809 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2794, _2795, (log2((isnan(cbSceneParam._m0[77u].w) ? _878 : (isnan(_878) ? cbSceneParam._m0[77u].w : min(_878, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2811 = _2809.x;
    float _2812 = _2809.y;
    float _2813 = _2809.z;
    float _2814 = _2809.w;
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    if (_878 > cbSceneParam._m0[78u].w)
    {
        float _2869 = isnan(_878) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _878 : min(cbSceneParam._m0[80u].w, _878));
        float _2870 = _2869 / _878;
        float _2881 = _2870 * _929;
        float _2882 = _930 * _2870;
        float _2883 = (-0.0) - _2882;
        float _2885 = _2870 * _931;
        float _2887 = (cbSceneParam._m0[77u].w * _2883) / _2869;
        float _2888 = _2887 + cbSceneParam._m0[79u].w;
        float _2889 = cbSceneParam._m0[79u].w - _2882;
        float _2895 = sqrt(((_2881 * _2881) + (_2882 * _2882)) + (_2885 * _2885));
        float _2898 = (1.0 - (cbSceneParam._m0[77u].w / _2869)) * _2895;
        float _2903 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2905 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3082;
        if (abs((_2883 - _2887) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3082 = ((((_2888 > 0.0) ? exp2(_2903 * _2888) : (2.0 - exp2(_2905 * _2888))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2898;
        }
        else
        {
            float _3026 = 1.0 / cbSceneParam._m0[80u].x;
            float _3027 = isnan(_2889) ? _2888 : (isnan(_2888) ? _2889 : max(_2888, _2889));
            float _3028 = isnan(_2889) ? _2888 : (isnan(_2888) ? _2889 : min(_2888, _2889));
            float _3037 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : min(_3027, 0.0));
            float _3038 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : min(_3028, 0.0));
            _3082 = ((abs(_2895 / _2883) * cbSceneParam._m0[80u].y) * ((((_3037 - _3038) * 2.0) - ((exp2(_2903 * (isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0)))) - exp2(_2903 * (isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0))))) * _3026)) - ((exp2(_2905 * _3037) - exp2(_2905 * _3038)) * _3026))) + (_2898 * cbSceneParam._m0[80u].z);
        }
        vec4 _3084 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2794, _2795, 1.0), 0.0);
        float _3093 = exp2((_3082 * (-1.44269502162933349609375)) * (1.0 - _3084.w));
        float _3094 = log2(_3093);
        float _3110 = log2(_2814);
        _2907 = (exp2(_3110 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3094 * cbSceneParam._m0[78u].x)) * _3084.x) / cbSceneParam._m0[78u].x)) + _2811;
        _2909 = (exp2(_3110 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3094 * cbSceneParam._m0[78u].y)) * _3084.y) / cbSceneParam._m0[78u].y)) + _2812;
        _2911 = (exp2(_3110 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3094 * cbSceneParam._m0[78u].z)) * _3084.z) / cbSceneParam._m0[78u].z)) + _2813;
        _2913 = _3093 * _2814;
    }
    else
    {
        _2907 = _2811;
        _2909 = _2812;
        _2911 = _2813;
        _2913 = _2814;
    }
    bool _3120;
    vec4 _2923;
    vec4 _2945;
    float _2947;
    float _2951;
    float _2952;
    float _2953;
    float _2954;
    bool _2964;
    for (;;)
    {
        _2923 = cbMatDynParam._m0[0u];
        float _2925 = roundEven(_2923.y);
        bool _2926 = _2925 == 3.0;
        float _2927 = log2(_2913);
        float _2934 = exp2(_2927 * cbSceneParam._m0[78u].x) * _2783;
        float _2935 = exp2(_2927 * cbSceneParam._m0[78u].y) * _2784;
        float _2936 = exp2(_2927 * cbSceneParam._m0[78u].z) * _2785;
        float _2943 = _945 + (-0.5);
        _2945 = cbMtdParam._m0[1u];
        _2947 = _2945.y * _2943;
        float _2950 = (_2925 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2951 = _2950 * (_2926 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2907)));
        _2952 = _2950 * (_2926 ? _2935 : (_2935 + (cbSceneParam._m0[72u].w * _2909)));
        _2953 = _2950 * (_2926 ? _2936 : (_2936 + (cbSceneParam._m0[72u].w * _2911)));
        _2954 = _2943 * 0.999000012874603271484375;
        _2964 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2964)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _2954) < 0.5)
            {
                _3120 = true;
                break;
            }
        }
        uint _3061 = _994 + uint(_2923.w);
        if ((cbInstanceData._m0[_3061].w < 1.0) && ((cbInstanceData._m0[_3061].w + _2954) < 0.5))
        {
            _3120 = true;
            break;
        }
        if ((_2947 + 1.0) < _2945.x)
        {
            _3120 = true;
            break;
        }
        _3120 = false;
        break;
    }
    float _3325;
    if (_3120)
    {
        discard_state = true;
        _3325 = 0.0;
    }
    else
    {
        _3325 = cbInstanceData._m0[_2786].w;
    }
    SV_Target.x = _2951;
    SV_Target.y = _2952;
    SV_Target.z = _2953;
    SV_Target.w = _3325;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2786].w;
    discard_exit();
}


