#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1416;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _363.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].z) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3742 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _439 = (_432 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _440 = (_432 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _441 = (_432 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _363.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[24u].z) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3753 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _518 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439);
    float _521 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440);
    float _524 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441);
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _582 = _580.x;
    float _583 = _580.y;
    float _584 = _580.z;
    float _591 = ((_563.x - _582) * _432) + _582;
    float _592 = ((_563.y - _583) * _432) + _583;
    float _593 = ((_563.z - _584) * _432) + _584;
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _618 = ((_605.z - _593) * _505) + _593;
    float _621 = ((((_605.x - _591) * _505) + _591) * 2.0) + (-1.0);
    float _623 = ((((_605.y - _592) * _505) + _592) * 2.0) + (-1.0);
    float _624 = dot(vec2(_621, _623), vec2(_621, _623));
    float _3764 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _655 = (((_643.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _621;
    float _656 = (((_643.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _623;
    float _659 = fma(_629, _243, fma(_656, _250, _655 * _236));
    float _662 = fma(_629, _244, fma(_656, _251, _655 * _237));
    float _665 = fma(_629, _245, fma(_656, _252, _655 * _238));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    vec4 _696 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _698 = _696.x;
    float _699 = 1.0 - _698;
    float _705 = (cbMtdParam._m0[19u].x + dot(vec4(_669 * _659, _669 * _662, _669 * _665, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_698 - _699) * cbMtdParam._m0[24u].w) + _699) * cbMtdParam._m0[21u].z);
    float _3775 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _706 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _708 = (-0.0) - cbMtdParam._m0[24u].x;
    float _710 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _710 : (isnan(_710) ? 1.0 : min(_710, 1.0));
    float _718 = _706 - ((_706 * TEXCOORD_8.x) * _711);
    float _719 = _706 - ((_706 * TEXCOORD_8.y) * _711);
    float _720 = _706 - ((_706 * TEXCOORD_8.z) * _711);
    float _727 = (_718 * ((_543.x * cbMtdParam._m0[18u].x) - _518)) + _518;
    float _728 = (_719 * ((_543.y * cbMtdParam._m0[18u].y) - _521)) + _521;
    float _729 = (_720 * ((_543.z * cbMtdParam._m0[18u].z) - _524)) + _524;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _743 = _741.x;
    float _744 = 1.0 - _743;
    float _772 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_743 - _744) * cbMtdParam._m0[24u].y) + _744) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3796 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _773 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _781 = ((((cbMtdParam._m0[10u].x - _727) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _773) + _727;
    float _782 = ((((cbMtdParam._m0[10u].y - _728) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _773) + _728;
    float _783 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _729)) * _773) + _729;
    float _787 = (cbMtdParam._m0[19u].w * (_643.z - _618)) + _618;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _808 = (_801.x * 2.0) + (-1.0);
    float _809 = (_801.y * 2.0) + (-1.0);
    float _810 = dot(vec2(_808, _809), vec2(_808, _809));
    float _3807 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _818 = ((_801.z - _787) * _718) + _787;
    float _821 = ((cbMtdParam._m0[23u].y - _818) * _773) + _818;
    vec4 _840 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _846 = (_840.x * 2.0) + (-1.0);
    float _847 = (_840.y * 2.0) + (-1.0);
    float _848 = dot(vec2(_846, _847), vec2(_846, _847));
    float _3818 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _863 = ((sqrt(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) - _629) * _720) + _629;
    float _866 = (((_808 - _655) * _718) + _655) + (cbMtdParam._m0[21u].x * _655);
    float _867 = (((_809 - _656) * _719) + _656) + (cbMtdParam._m0[21u].x * _656);
    float _878 = (((_846 - _866) + (_866 * cbMtdParam._m0[22u].z)) * _773) + _866;
    float _879 = (((_847 - _867) + (_867 * cbMtdParam._m0[22u].z)) * _773) + _867;
    float _880 = (_773 * (sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) - _863)) + _863;
    float _882 = cbMtdParam._m0[22u].x + _643.w;
    float _885 = fma(_880, _243, fma(_879, _250, _878 * _236));
    float _888 = fma(_880, _244, fma(_879, _251, _878 * _237));
    float _891 = fma(_880, _245, fma(_879, _252, _878 * _238));
    float _895 = inversesqrt(dot(vec3(_885, _888, _891), vec3(_885, _888, _891)));
    float _896 = _895 * _885;
    float _897 = _895 * _888;
    float _898 = _895 * _891;
    float _3829 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _899 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _3851 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _3862 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _3873 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _917 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _967 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _957);
    float _968 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _957);
    float _969 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _957);
    float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
    float _974 = _967 * _973;
    float _975 = _968 * _973;
    float _976 = _969 * _973;
    float _982 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _983 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1001 = fma(_898, cbSceneParam._m0[5u].z, fma(_897, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _896));
    float _1004 = fma(_898, cbSceneParam._m0[6u].z, fma(_897, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _896));
    float _1007 = fma(_898, cbSceneParam._m0[7u].z, fma(_897, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _896));
    uint _1021 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1027 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * cbInstanceData._m0[_1021].x;
    float _1028 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_1021].y;
    float _1029 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_1021].z;
    float _3884 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    vec4 _1041 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _982, cbSceneParam._m0[86u].y * _983));
    float _1045 = ((isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * TEXCOORD_5.w) * _1041.x;
    float _1046 = dot(vec3(_896, _897, _898), vec3(_974, _975, _976));
    float _1049 = _1046 * 2.0;
    float _1053 = (_1049 * _896) - _974;
    float _1054 = (_1049 * _897) - _975;
    float _1055 = (_1049 * _898) - _976;
    float _1059 = abs(dot(vec3(_974, _975, _976), vec3(_896, _897, _898)));
    float _3917 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1061 = sqrt(_899);
    float _1074 = exp2((_1061 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1061 * 3.0));
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1110 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1114 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1415;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1140 = fma(_1114, cbModelParam._m0[26u].z, fma(_1110, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1106));
        float _1144 = fma(_1114, cbModelParam._m0[27u].z, fma(_1110, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1106));
        float _1148 = fma(_1114, cbModelParam._m0[28u].z, fma(_1110, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1106));
        float _1173 = _1106 + _896;
        float _1174 = _1110 + _897;
        float _1175 = _1114 + _898;
        float _1185 = fma(_1175, cbModelParam._m0[26u].z, fma(_1174, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1173)) - _1140;
        float _1186 = fma(_1175, cbModelParam._m0[27u].z, fma(_1174, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1173)) - _1144;
        float _1187 = fma(_1175, cbModelParam._m0[28u].z, fma(_1174, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1173)) - _1148;
        float _1191 = inversesqrt(dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187)));
        float _1204 = ((_1191 * _1185) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1140 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1191 * _1186) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1144 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1191 * _1187) / cbModelParam._m0[34u].z) + ((((((_1148 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        float _1243 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1209.x + (-0.5));
        float _1245 = _1243 * (_1209.y + (-0.5));
        float _1246 = _1243 * (_1209.z + (-0.5));
        float _1253 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1216.x + (-0.5));
        float _1255 = _1253 * (_1216.y + (-0.5));
        float _1256 = _1253 * (_1216.z + (-0.5));
        float _1263 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1223.x + (-0.5));
        float _1265 = _1263 * (_1223.y + (-0.5));
        float _1266 = _1263 * (_1223.z + (-0.5));
        float _1273 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1230.x + (-0.5));
        float _1275 = _1273 * (_1230.y + (-0.5));
        float _1276 = _1273 * (_1230.z + (-0.5));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = _1244 * 0.5;
        float _1281 = _1254 * 0.5;
        float _1282 = _1264 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1297 = (dot(vec3(_896, _897, _898), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1307 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3965 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1309 + 1.0))) + _1314) * _1277;
        float _1324 = _1245 * 0.5;
        float _1325 = _1255 * 0.5;
        float _1326 = _1265 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_896, _897, _898), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3998 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1351 + 1.0))) + _1356) * _1278;
        float _1366 = _1246 * 0.5;
        float _1367 = _1256 * 0.5;
        float _1368 = _1266 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_896, _897, _898), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4031 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1393 + 1.0))) + _1398) * _1279;
        _1415 = _1246;
        _1417 = _1245;
        _1418 = _1244;
        _1419 = _1256;
        _1420 = _1255;
        _1421 = _1254;
        _1422 = _1266;
        _1423 = _1265;
        _1424 = _1264;
        _1425 = _1279;
        _1426 = _1278;
        _1427 = _1277;
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
    }
    else
    {
        _1415 = _1416;
        _1417 = _1416;
        _1418 = _1416;
        _1419 = _1416;
        _1420 = _1416;
        _1421 = _1416;
        _1422 = _1416;
        _1423 = _1416;
        _1424 = _1416;
        _1425 = _1416;
        _1426 = _1416;
        _1427 = _1416;
        _1428 = 0.0;
        _1429 = 0.0;
        _1430 = 0.0;
    }
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1454 = fma(_1114, cbModelParam._m0[30u].z, fma(_1110, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1106));
        float _1458 = fma(_1114, cbModelParam._m0[31u].z, fma(_1110, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1106));
        float _1462 = fma(_1114, cbModelParam._m0[32u].z, fma(_1110, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1106));
        float _1485 = _1106 + _896;
        float _1486 = _1110 + _897;
        float _1487 = _1114 + _898;
        float _1497 = fma(_1487, cbModelParam._m0[30u].z, fma(_1486, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1485)) - _1454;
        float _1498 = fma(_1487, cbModelParam._m0[31u].z, fma(_1486, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1485)) - _1458;
        float _1499 = fma(_1487, cbModelParam._m0[32u].z, fma(_1486, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1485)) - _1462;
        float _1503 = inversesqrt(dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499)));
        float _1516 = ((_1503 * _1497) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1454 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1503 * _1498) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1458 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1503 * _1499) / cbModelParam._m0[35u].z) + ((((((_1462 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        float _1553 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1520.x + (-0.5));
        float _1555 = _1553 * (_1520.y + (-0.5));
        float _1556 = _1553 * (_1520.z + (-0.5));
        float _1563 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1527.x + (-0.5));
        float _1565 = _1563 * (_1527.y + (-0.5));
        float _1566 = _1563 * (_1527.z + (-0.5));
        float _1573 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1534.x + (-0.5));
        float _1575 = _1573 * (_1534.y + (-0.5));
        float _1576 = _1573 * (_1534.z + (-0.5));
        float _1583 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1541.x + (-0.5));
        float _1585 = _1583 * (_1541.y + (-0.5));
        float _1586 = _1583 * (_1541.z + (-0.5));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = _1554 * 0.5;
        float _1591 = _1564 * 0.5;
        float _1592 = _1574 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_896, _897, _898), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4094 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1617 + 1.0))) + _1622) * _1587;
        float _1632 = _1555 * 0.5;
        float _1633 = _1565 * 0.5;
        float _1634 = _1575 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_896, _897, _898), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4127 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1659 + 1.0))) + _1664) * _1588;
        float _1674 = _1556 * 0.5;
        float _1675 = _1566 * 0.5;
        float _1676 = _1576 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_896, _897, _898), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4160 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1701 + 1.0))) + _1706) * _1589;
        _1723 = _1556;
        _1724 = _1555;
        _1725 = _1554;
        _1726 = _1566;
        _1727 = _1565;
        _1728 = _1564;
        _1729 = _1576;
        _1730 = _1575;
        _1731 = _1574;
        _1732 = _1589;
        _1733 = _1588;
        _1734 = _1587;
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
    }
    else
    {
        _1723 = _1416;
        _1724 = _1416;
        _1725 = _1416;
        _1726 = _1416;
        _1727 = _1416;
        _1728 = _1416;
        _1729 = _1416;
        _1730 = _1416;
        _1731 = _1416;
        _1732 = _1416;
        _1733 = _1416;
        _1734 = _1416;
        _1735 = 0.0;
        _1736 = 0.0;
        _1737 = 0.0;
    }
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1428)) + _1428;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1429)) + _1429;
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1430)) + _1430;
    float _1770 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1748, cbSceneParam._m0[89u].y, _1747 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1748, cbSceneParam._m0[90u].y, _1747 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1748, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1747));
    float _1791 = _1053 * 0.5;
    float _1792 = _1054 * 0.5;
    float _1793 = _1055 * 0.5;
    float _1794 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1797 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1800 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1834;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1807 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1415, _1419, _1422, _1425));
        float _1811 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1417, _1420, _1423, _1426));
        float _1815 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1418, _1421, _1424, _1427));
        float _1822 = dot(vec4(cbModelParam._m0[39u]), vec4(_1791, _1792, _1793, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1845;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1836 = dot(vec4(cbModelParam._m0[40u]), vec4(_1791, _1792, _1793, 1.0));
        _1845 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1845 = 1.0;
    }
    float _1849 = (_1845 * cbModelParam._m0[1u].x) + (_1834 * (1.0 - cbModelParam._m0[1u].x));
    float _1859 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _899);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1859 : min(cbModelParam._m0[25u].z, _1859));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1907 = fma(_1114, cbModelParam._m0[13u].z, fma(_1110, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1106)) + cbModelParam._m0[13u].w;
        float _1911 = fma(_1114, cbModelParam._m0[14u].z, fma(_1110, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1106)) + cbModelParam._m0[14u].w;
        float _1915 = fma(_1114, cbModelParam._m0[15u].z, fma(_1110, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1106)) + cbModelParam._m0[15u].w;
        float _1918 = fma(_1055, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1053));
        float _1921 = fma(_1055, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1053));
        float _1924 = fma(_1055, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1053));
        float _1952;
        if (_1918 > 0.0)
        {
            _1952 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1952 = frontier_phi_14_12_ladder;
        }
        float _2173;
        if (_1921 > 0.0)
        {
            _2173 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2173 = frontier_phi_23_19_ladder;
        }
        float _2419;
        if (_1924 > 0.0)
        {
            _2419 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2419 = frontier_phi_35_30_ladder;
        }
        float _2421 = isnan(_2173) ? _1952 : (isnan(_1952) ? _2173 : min(_1952, _2173));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1918) + _1907;
        float _2427 = (_2422 * _1921) + _1911;
        float _2428 = (_2422 * _1924) + _1915;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2431 = (-1.0) - _2429;
        float _2433 = _2429 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2428 > _2433) || ((_2428 < _2431) || ((_2427 > _2433) || ((_2427 < _2431) || ((_2426 < _2431) || (_2426 > _2433))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2428, cbModelParam._m0[9u].z, fma(_2427, cbModelParam._m0[9u].y, _2426 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2428, cbModelParam._m0[10u].z, fma(_2427, cbModelParam._m0[10u].y, _2426 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2428, cbModelParam._m0[11u].z, fma(_2427, cbModelParam._m0[11u].y, _2426 * cbModelParam._m0[11u].x))), _1860);
            frontier_phi_13_35_ladder = _2552.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2552.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2552.x * cbModelParam._m0[1u].y;
        }
        _1940 = frontier_phi_13_35_ladder_2;
        _1942 = frontier_phi_13_35_ladder_1;
        _1944 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1053, _1054, _1055), _1860);
        _1940 = _1928.x * cbModelParam._m0[1u].y;
        _1942 = _1928.y * cbModelParam._m0[1u].y;
        _1944 = _1928.z * cbModelParam._m0[1u].y;
    }
    float _1948 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _899);
    float _1949 = isnan(_1948) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1948 : min(cbModelParam._m0[25u].w, _1948));
    float _2038;
    float _2040;
    float _2042;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2002 = fma(_1114, cbModelParam._m0[21u].z, fma(_1110, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1106)) + cbModelParam._m0[21u].w;
        float _2006 = fma(_1114, cbModelParam._m0[22u].z, fma(_1110, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1106)) + cbModelParam._m0[22u].w;
        float _2010 = fma(_1114, cbModelParam._m0[23u].z, fma(_1110, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1106)) + cbModelParam._m0[23u].w;
        float _2013 = fma(_1055, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1053));
        float _2016 = fma(_1055, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1053));
        float _2019 = fma(_1055, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1053));
        float _2178;
        if (_2013 > 0.0)
        {
            _2178 = abs((1.0 - _2002) / _2013);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2002 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2178 = frontier_phi_25_21_ladder;
        }
        float _2446;
        if (_2016 > 0.0)
        {
            _2446 = abs((1.0 - _2006) / _2016);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2006 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2446 = frontier_phi_37_32_ladder;
        }
        float _2651;
        if (_2019 > 0.0)
        {
            _2651 = abs((1.0 - _2010) / _2019);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2010 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2651 = frontier_phi_46_43_ladder;
        }
        float _2653 = isnan(_2446) ? _2178 : (isnan(_2178) ? _2446 : min(_2178, _2446));
        float _2654 = isnan(_2651) ? _2653 : (isnan(_2653) ? _2651 : min(_2653, _2651));
        float _2658 = (_2654 * _2013) + _2002;
        float _2659 = (_2654 * _2016) + _2006;
        float _2660 = (_2654 * _2019) + _2010;
        float _2661 = _2654 * 9.9999997473787516355514526367188e-05;
        float _2662 = (-1.0) - _2661;
        float _2664 = _2661 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2660 > _2664) || ((_2660 < _2662) || ((_2659 > _2664) || ((_2659 < _2662) || ((_2658 < _2662) || (_2658 > _2664))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2859 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2660, cbModelParam._m0[17u].z, fma(_2659, cbModelParam._m0[17u].y, _2658 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2660, cbModelParam._m0[18u].z, fma(_2659, cbModelParam._m0[18u].y, _2658 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2660, cbModelParam._m0[19u].z, fma(_2659, cbModelParam._m0[19u].y, _2658 * cbModelParam._m0[19u].x))), _1949);
            frontier_phi_22_46_ladder = _2859.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2859.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2859.x * cbModelParam._m0[1u].z;
        }
        _2038 = frontier_phi_22_46_ladder_2;
        _2040 = frontier_phi_22_46_ladder_1;
        _2042 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2022 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1053, _1054, _1055), _1949);
        _2038 = _2022.x * cbModelParam._m0[1u].z;
        _2040 = _2022.y * cbModelParam._m0[1u].z;
        _2042 = _2022.z * cbModelParam._m0[1u].z;
    }
    float _2054 = ((((1.0 - _1074) * ((_1061 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1074 * _1061)) * _1045;
    float _2055 = _2054 * ((cbModelParam._m0[1u].w * (_2038 - _1940)) + _1940);
    float _2056 = _2054 * ((cbModelParam._m0[1u].w * (_2040 - _1942)) + _1942);
    float _2057 = _2054 * ((cbModelParam._m0[1u].w * (_2042 - _1944)) + _1944);
    float _2060 = fma(_2057, cbSceneParam._m0[89u].z, fma(_2056, cbSceneParam._m0[89u].y, _2055 * cbSceneParam._m0[89u].x));
    float _2063 = fma(_2057, cbSceneParam._m0[90u].z, fma(_2056, cbSceneParam._m0[90u].y, _2055 * cbSceneParam._m0[90u].x));
    float _2066 = fma(_2057, cbSceneParam._m0[91u].z, fma(_2056, cbSceneParam._m0[91u].y, _2055 * cbSceneParam._m0[91u].x));
    vec4 _2074 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_982, _983));
    float _2076 = _2074.w;
    float _2088 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2076);
    float _2089 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2076);
    float _2090 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2076);
    uvec4 _2094 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2096 = _2094.x * 14u;
    uint _2097 = _2096 + 13u;
    float _2104 = _1045 + (-1.0);
    float _2109 = (cbLight._m0[_2097].x * _2104) + 1.0;
    float _2110 = (cbLight._m0[_2097].y * _2104) + 1.0;
    float _2111 = (cbLight._m0[_2097].z * _2104) + 1.0;
    float _2112 = (cbLight._m0[_2097].w * _2104) + 1.0;
    uint _2113 = _2096 + 5u;
    float _2119 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
    uint _2123 = _2096 + 4u;
    float _2132 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
    uint _2136 = _2096 | 1u;
    float _2147 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_896, _897, _898));
    float _2150 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_896, _897, _898));
    float _4296 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _4307 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2155 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * 0.3183098733425140380859375;
    float _2157 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * 0.3183098733425140380859375;
    float _2164 = ((cbLight._m0[_2113].x * _2119) * _2157) + (((cbLight._m0[_2123].x * _2088) * _2132) * _2155);
    float _2165 = ((_2119 * cbLight._m0[_2113].y) * _2157) + (((cbLight._m0[_2123].y * _2089) * _2132) * _2155);
    float _2166 = ((_2119 * cbLight._m0[_2113].z) * _2157) + (((cbLight._m0[_2123].z * _2090) * _2132) * _2155);
    uvec4 _2170 = floatBitsToUint(cbLight._m0[_2096 + 12u]);
    bool _2172 = _2170.x == 0u;
    float _2183;
    float _2185;
    float _2187;
    if (_2172)
    {
        _2183 = _2164;
        _2185 = _2165;
        _2187 = _2166;
    }
    else
    {
        uint _2191 = _2096 + 6u;
        float _2207 = (dot(vec3(cbLight._m0[_2096 + 2u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4318 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2210 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
        _2183 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _2164;
        _2185 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _2165;
        _2187 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _2166;
    }
    bool _2190 = _2170.y == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2190)
    {
        _2228 = _2183;
        _2230 = _2185;
        _2232 = _2187;
    }
    else
    {
        uint _2390 = _2096 + 7u;
        float _2406 = (dot(vec3(cbLight._m0[_2096 + 3u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2407 = _2406 * _2406;
        float _4334 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2408 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2409 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
        _2228 = (((cbLight._m0[_2390].x * 0.3183098733425140380859375) * _2408) * _2409) + _2183;
        _2230 = (((cbLight._m0[_2390].y * 0.3183098733425140380859375) * _2408) * _2409) + _2185;
        _2232 = (((cbLight._m0[_2390].z * 0.3183098733425140380859375) * _2408) * _2409) + _2187;
    }
    uint _2235 = _2096 + 8u;
    float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _899) * 0.949999988079071044921875);
    float _2249 = _2248 * _2248;
    float _2250 = cbLight._m0[_2096].x + _974;
    float _2251 = cbLight._m0[_2096].y + _975;
    float _2252 = cbLight._m0[_2096].z + _976;
    float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
    float _2257 = _2256 * _2250;
    float _2258 = _2256 * _2251;
    float _2259 = _2256 * _2252;
    float _2260 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2096].xyz));
    float _4350 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _4361 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _2264 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2265 = dot(vec3(_896, _897, _898), vec3(_2257, _2258, _2259));
    float _4372 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2269 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2257, _2258, _2259));
    float _4383 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2273 = _2249 * _2249;
    float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
    float _2288 = (exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2289 = 1.0 - _2249;
    float _2300 = (0.5 / (((_2264 * ((_2263 * _2289) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2289) + _2249) * _2263))) * _2263;
    float _4394 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2302 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
    uint _2316 = _2096 + 9u;
    float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _899) * 0.949999988079071044921875);
    float _2328 = _2327 * _2327;
    float _2329 = cbLight._m0[_2136].x + _974;
    float _2330 = cbLight._m0[_2136].y + _975;
    float _2331 = cbLight._m0[_2136].z + _976;
    float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
    float _2336 = _2335 * _2329;
    float _2337 = _2335 * _2330;
    float _2338 = _2335 * _2331;
    float _2339 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2136].xyz));
    float _4405 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2343 = dot(vec3(_896, _897, _898), vec3(_2336, _2337, _2338));
    float _4416 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2347 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2336, _2337, _2338));
    float _4427 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2351 = _2328 * _2328;
    float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
    float _2364 = (exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2365 = 1.0 - _2328;
    float _2375 = (0.5 / (((_2264 * ((_2342 * _2365) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2365) + _2328) * _2342))) * _2342;
    float _4438 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2377 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
    float _2387 = (((_2364 * cbLight._m0[_2316].x) * _2377) * _2119) + ((((cbLight._m0[_2235].x * _2088) * _2288) * _2302) * _2132);
    float _2388 = (((_2364 * cbLight._m0[_2316].y) * _2377) * _2119) + ((((cbLight._m0[_2235].y * _2089) * _2288) * _2302) * _2132);
    float _2389 = (((_2364 * cbLight._m0[_2316].z) * _2377) * _2119) + ((((cbLight._m0[_2235].z * _2090) * _2288) * _2302) * _2132);
    float _2451;
    float _2453;
    float _2455;
    if (_2172)
    {
        _2451 = _2387;
        _2453 = _2388;
        _2455 = _2389;
    }
    else
    {
        uint _2457 = _2096 + 2u;
        uint _2461 = _2096 + 10u;
        float _2475 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _899) * 0.949999988079071044921875);
        float _2476 = _2475 * _2475;
        float _2477 = cbLight._m0[_2457].x + _974;
        float _2478 = cbLight._m0[_2457].y + _975;
        float _2479 = cbLight._m0[_2457].z + _976;
        float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
        float _2484 = _2483 * _2477;
        float _2485 = _2483 * _2478;
        float _2486 = _2483 * _2479;
        float _2487 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2457].xyz));
        float _4449 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2491 = dot(vec3(_896, _897, _898), vec3(_2484, _2485, _2486));
        float _4460 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2495 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2484, _2485, _2486));
        float _4471 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2499 = _2476 * _2476;
        float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
        float _2512 = (exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2513 = 1.0 - _2476;
        float _2523 = (0.5 / (((_2264 * ((_2490 * _2513) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2513) + _2476) * _2490))) * _2490;
        float _4482 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2525 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
        float _2526 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
        _2451 = (((_2512 * cbLight._m0[_2461].x) * _2525) * _2526) + _2387;
        _2453 = (((_2512 * cbLight._m0[_2461].y) * _2525) * _2526) + _2388;
        _2455 = (((_2512 * cbLight._m0[_2461].z) * _2525) * _2526) + _2389;
    }
    float _2561;
    float _2563;
    float _2565;
    if (_2190)
    {
        _2561 = _2451;
        _2563 = _2453;
        _2565 = _2455;
    }
    else
    {
        uint _2572 = _2096 + 3u;
        uint _2576 = _2096 + 11u;
        float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _899) * 0.949999988079071044921875);
        float _2591 = _2590 * _2590;
        float _2592 = cbLight._m0[_2572].x + _974;
        float _2593 = cbLight._m0[_2572].y + _975;
        float _2594 = cbLight._m0[_2572].z + _976;
        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
        float _2599 = _2598 * _2592;
        float _2600 = _2598 * _2593;
        float _2601 = _2598 * _2594;
        float _2602 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2572].xyz));
        float _4498 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2606 = dot(vec3(_896, _897, _898), vec3(_2599, _2600, _2601));
        float _4509 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2610 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2599, _2600, _2601));
        float _4520 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2614 = _2591 * _2591;
        float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
        float _2627 = (exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2628 = 1.0 - _2591;
        float _2638 = (0.5 / (((_2264 * ((_2605 * _2628) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2628) + _2591) * _2605))) * _2605;
        float _4531 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2640 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
        float _2641 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
        _2561 = (((_2627 * cbLight._m0[_2576].x) * _2640) * _2641) + _2451;
        _2563 = (((_2627 * cbLight._m0[_2576].y) * _2640) * _2641) + _2453;
        _2565 = (((_2627 * cbLight._m0[_2576].z) * _2640) * _2641) + _2455;
    }
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_2094.y == 0u)
    {
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2716;
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2716;
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2716;
        uvec4 _2731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2732 = _2731.x;
        uint _2743 = uint((float(_2731.y) * floor(float(uint(cbSceneParam._m0[85u].y * _983) / _2732))) + floor(float(uint(cbSceneParam._m0[85u].x * _982) / _2732)));
        float _2753 = (log2(_2719 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2754 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        uint _2757 = uint(isnan(14.0) ? _2754 : (isnan(_2754) ? 14.0 : min(_2754, 14.0)));
        uvec4 _2762 = texelFetch(g_lightClusterGridBuffer, int(((_2757 << 2u) + (_2743 << 6u)) >> 2u));
        uint _2763 = _2762.x;
        uint _2764 = _2731.z;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        if (((((1u << ((_2764 >> 4u) & 15u)) + 4294967295u) & _2763) == 0u) || ((_2764 & 240u) == 0u))
        {
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
        }
        else
        {
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            uint _3014 = 0u;
            uint _3023;
            bool _3024;
            for (;;)
            {
                _3023 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                _3024 = _3023 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3024)
                {
                    frontier_phi_61_pred = _3008;
                    frontier_phi_61_pred_1 = _3013;
                    frontier_phi_61_pred_2 = _3012;
                    frontier_phi_61_pred_3 = _3011;
                    frontier_phi_61_pred_4 = _3010;
                    frontier_phi_61_pred_5 = _3009;
                }
                else
                {
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    uint _3138;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3010;
                    _3135 = _3011;
                    _3136 = _3012;
                    _3137 = _3013;
                    _3138 = _3023;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    for (;;)
                    {
                        uint _3142 = uint(findLSB(_3138)) + (_3014 << 5u);
                        uint _3139 = (_3138 + 4294967295u) & _3138;
                        uint _3144 = _3142 * 48u;
                        vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 3u)).x));
                        uint _3164 = (_3142 * 48u) + 4u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3183 = (_3142 * 48u) + 8u;
                        vec3 _3194 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x));
                        float _3198 = _3158.x - _2717;
                        float _3199 = _3158.y - _2718;
                        float _3200 = _3158.z - _2719;
                        float _3201 = dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200));
                        float _3204 = inversesqrt(_3201);
                        float _3205 = _3204 * _3198;
                        float _3206 = _3204 * _3199;
                        float _3207 = _3204 * _3200;
                        float _3208 = dot(vec3(_1001, _1004, _1007), vec3(_3205, _3206, _3207));
                        float _3213 = 1.0 - (_3201 * _3158.w);
                        float _4557 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3215 = sqrt(_3201) * _3177.w;
                        float _3218 = 1.39999997615814208984375 / (_3215 + 1.39999997615814208984375);
                        float _3219 = _3218 * _3218;
                        float _3222 = ((1.0 - _3219) * _3208) + _3219;
                        float _3225 = _3215 * _3215;
                        float _3229 = ((isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))) * _3214) / ((_3225 * 0.699999988079071044921875) + 1.0);
                        float _3233 = (-0.0) - _2717;
                        float _3234 = (-0.0) - _2718;
                        float _3235 = (-0.0) - _2719;
                        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                        float _3240 = _3239 * _3233;
                        float _3241 = _3239 * _3234;
                        float _3242 = _3239 * _3235;
                        float _3250 = exp2(log2(1.0 / ((_3225 * 3.5) + 5.0)) * 0.25);
                        float _3251 = 1.0 - _1061;
                        float _3258 = sqrt(1.0 - ((1.0 - (_3251 * _3251)) * (1.0 - (_3250 * _3250))));
                        float _3259 = _3258 * _3258;
                        float _3260 = _3259 * _3259;
                        float _3261 = _3240 + _3205;
                        float _3262 = _3241 + _3206;
                        float _3263 = _3242 + _3207;
                        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                        float _3271 = dot(vec3(_1001, _1004, _1007), vec3(_3240, _3241, _3242));
                        float _4573 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                        float _3275 = dot(vec3(_1001, _1004, _1007), vec3(_3267 * _3261, _3267 * _3262, _3267 * _3263));
                        float _4584 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3278 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3282 = ((_3278 * _3278) * (_3260 + (-1.0))) + 1.0;
                        float _3283 = _3218 * _3259;
                        float _3284 = _3283 * _3283;
                        float _3287 = ((1.0 - _3284) * _3208) + _3284;
                        float _4595 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3288 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3289 = 1.0 - _3259;
                        float _3299 = (0.5 / (((_3288 * ((_3274 * _3289) + _3259)) + 9.9999999392252902907785028219223e-09) + (((_3288 * _3289) + _3259) * _3274))) * _3288;
                        float _4606 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3310 = (((_3260 * 3.1415927410125732421875) * (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) / ((_3282 * _3282) * ((_3225 * 2.1991131305694580078125) + 3.141590118408203125))) * _3214;
                        _3067 = (_3229 * _3177.x) + _3135;
                        _3068 = (_3229 * _3177.y) + _3136;
                        _3069 = (_3229 * _3177.z) + _3137;
                        _3064 = (_3310 * _3194.x) + _3132;
                        _3065 = (_3310 * _3194.y) + _3133;
                        _3066 = (_3310 * _3194.z) + _3134;
                        if (_3139 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3066;
                            _3135 = _3067;
                            _3136 = _3068;
                            _3137 = _3069;
                            _3138 = _3139;
                        }
                    }
                    frontier_phi_61_pred = _3064;
                    frontier_phi_61_pred_1 = _3069;
                    frontier_phi_61_pred_2 = _3068;
                    frontier_phi_61_pred_3 = _3067;
                    frontier_phi_61_pred_4 = _3066;
                    frontier_phi_61_pred_5 = _3065;
                }
                _2865 = frontier_phi_61_pred;
                _2875 = frontier_phi_61_pred_1;
                _2873 = frontier_phi_61_pred_2;
                _2871 = frontier_phi_61_pred_3;
                _2869 = frontier_phi_61_pred_4;
                _2867 = frontier_phi_61_pred_5;
                uint _3015 = _3014 + 1u;
                if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3008 = _2865;
                    _3009 = _2867;
                    _3010 = _2869;
                    _3011 = _2871;
                    _3012 = _2873;
                    _3013 = _2875;
                    _3014 = _3015;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
        }
        uvec4 _2878 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2879 = _2878.z;
        uint _2881 = (_2879 >> 8u) & 15u;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        if (((4294967295u << _2881) & _2763) == 0u)
        {
            _2976 = _2864;
            _2978 = _2866;
            _2980 = _2868;
            _2982 = _2870;
            _2984 = _2872;
            _2986 = _2874;
        }
        else
        {
            float _3001 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
            float _3002 = _3001 * _2717;
            float _3003 = _3001 * _2718;
            float _3004 = _3001 * _2719;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2881 < ((_2879 >> 12u) & 15u))
            {
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _3115 = _2864;
                float _3116 = _2866;
                float _3117 = _2868;
                float _3118 = _2870;
                float _3119 = _2872;
                float _3120 = _2874;
                uint _3121 = _2881;
                uint _3130;
                bool _3131;
                for (;;)
                {
                    _3130 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3121 << 2u)) >> 2u)).x;
                    _3131 = _3130 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3131)
                    {
                        frontier_phi_67_pred = _3118;
                        frontier_phi_67_pred_1 = _3119;
                        frontier_phi_67_pred_2 = _3120;
                        frontier_phi_67_pred_3 = _3117;
                        frontier_phi_67_pred_4 = _3116;
                        frontier_phi_67_pred_5 = _3115;
                    }
                    else
                    {
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3328 = _3115;
                        float _3329 = _3116;
                        float _3330 = _3117;
                        float _3331 = _3118;
                        float _3332 = _3119;
                        float _3333 = _3120;
                        uint _3334 = _3130;
                        uint _3335;
                        vec4 _3360;
                        float _3361;
                        vec4 _3376;
                        vec3 _3388;
                        vec4 _3403;
                        vec4 _3418;
                        float _3464;
                        bool _3465;
                        for (;;)
                        {
                            uint _3345 = ((_3121 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3334));
                            _3335 = (_3334 + 4294967295u) & _3334;
                            uint _3347 = _3345 * 40u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            _3361 = _3360.w;
                            uint _3363 = (_3345 * 40u) + 4u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3378 = (_3345 * 40u) + 8u;
                            _3388 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x));
                            uint _3390 = (_3345 * 40u) + 16u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3405 = (_3345 * 40u) + 20u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3420 = (_3345 * 40u) + 24u;
                            vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3439 = (_3345 * 40u) + 28u;
                            vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            _3464 = fma(_2719, _3452.z, fma(_2718, _3452.y, _3452.x * _2717)) + _3452.w;
                            _3465 = !((fma(_2719, _3433.z, fma(_2718, _3433.y, _3433.x * _2717)) + _3433.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3465)
                            {
                                float _3492 = _3360.x - _2717;
                                float _3493 = _3360.y - _2718;
                                float _3494 = _3360.z - _2719;
                                float _3495 = dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494));
                                float _3498 = inversesqrt(_3495);
                                float _3499 = _3498 * _3492;
                                float _3500 = _3498 * _3493;
                                float _3501 = _3498 * _3494;
                                float _3505 = 1.0 - (_3495 / (_3361 * _3361));
                                float _4617 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3510 = sqrt(_3495) * _3376.w;
                                float _3512 = 1.39999997615814208984375 / (_3510 + 1.39999997615814208984375);
                                float _3513 = _3512 * _3512;
                                float _3516 = ((1.0 - _3513) * dot(vec3(_3499, _3500, _3501), vec3(_1001, _1004, _1007))) + _3513;
                                float _3519 = _3510 * _3510;
                                float _3523 = (fma(_2719, _3403.z, fma(_2718, _3403.y, _3403.x * _2717)) + _3403.w) / _3464;
                                float _3524 = (fma(_2719, _3418.z, fma(_2718, _3418.y, _3418.x * _2717)) + _3418.w) / _3464;
                                float _3528 = 1.0 - dot(vec2(_3523, _3524), vec2(_3523, _3524));
                                float _4633 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3530 = _3529 * (((isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0))) * _3506) / ((_3519 * 0.699999988079071044921875) + 1.0));
                                float _3542 = exp2(log2(1.0 / ((_3519 * 3.5) + 5.0)) * 0.25);
                                float _3543 = 1.0 - _1061;
                                float _3550 = sqrt(1.0 - ((1.0 - (_3543 * _3543)) * (1.0 - (_3542 * _3542))));
                                float _3551 = _3550 * _3550;
                                float _3552 = _3551 * _3551;
                                float _3553 = _3499 - _3002;
                                float _3554 = _3500 - _3003;
                                float _3555 = _3501 - _3004;
                                float _3559 = inversesqrt(dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555)));
                                float _3563 = dot(vec3(_1001, _1004, _1007), vec3((-0.0) - _3002, (-0.0) - _3003, (-0.0) - _3004));
                                float _4644 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3566 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3567 = dot(vec3(_1001, _1004, _1007), vec3(_3559 * _3553, _3559 * _3554, _3559 * _3555));
                                float _4655 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3570 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3574 = ((_3570 * _3570) * (_3552 + (-1.0))) + 1.0;
                                float _3575 = _3512 * _3551;
                                float _3576 = _3575 * _3575;
                                float _3582 = ((1.0 - _3576) * dot(vec3(_1001, _1004, _1007), vec3(_3499, _3500, _3501))) + _3576;
                                float _4666 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3583 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3584 = 1.0 - _3551;
                                float _3594 = (0.5 / (((_3583 * ((_3566 * _3584) + _3551)) + 9.9999999392252902907785028219223e-09) + (((_3583 * _3584) + _3551) * _3566))) * _3583;
                                float _4677 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3604 = (_3529 * _3506) * (((_3552 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3574 * _3574) * ((_3519 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3604 * _3388.x;
                                frontier_phi_73_pred_1 = _3604 * _3388.y;
                                frontier_phi_73_pred_2 = _3530 * _3376.z;
                                frontier_phi_73_pred_3 = _3530 * _3376.y;
                                frontier_phi_73_pred_4 = _3530 * _3376.x;
                                frontier_phi_73_pred_5 = _3604 * _3388.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3608 = frontier_phi_73_pred;
                            _3609 = frontier_phi_73_pred_1;
                            _3613 = frontier_phi_73_pred_2;
                            _3612 = frontier_phi_73_pred_3;
                            _3611 = frontier_phi_73_pred_4;
                            _3610 = frontier_phi_73_pred_5;
                            _3318 = _3611 + _3331;
                            _3319 = _3612 + _3332;
                            _3320 = _3613 + _3333;
                            _3315 = _3608 + _3328;
                            _3316 = _3609 + _3329;
                            _3317 = _3610 + _3330;
                            if (_3335 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3335;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3318;
                        frontier_phi_67_pred_1 = _3319;
                        frontier_phi_67_pred_2 = _3320;
                        frontier_phi_67_pred_3 = _3317;
                        frontier_phi_67_pred_4 = _3316;
                        frontier_phi_67_pred_5 = _3315;
                    }
                    _2983 = frontier_phi_67_pred;
                    _2985 = frontier_phi_67_pred_1;
                    _2987 = frontier_phi_67_pred_2;
                    _2981 = frontier_phi_67_pred_3;
                    _2979 = frontier_phi_67_pred_4;
                    _2977 = frontier_phi_67_pred_5;
                    uint _3122 = _3121 + 1u;
                    if (_3122 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3115 = _2977;
                        _3116 = _2979;
                        _3117 = _2981;
                        _3118 = _2983;
                        _3119 = _2985;
                        _3120 = _2987;
                        _3121 = _3122;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2985;
                frontier_phi_55_56_ladder_1 = _2987;
                frontier_phi_55_56_ladder_2 = _2983;
                frontier_phi_55_56_ladder_3 = _2981;
                frontier_phi_55_56_ladder_4 = _2979;
                frontier_phi_55_56_ladder_5 = _2977;
            }
            else
            {
                frontier_phi_55_56_ladder = _2872;
                frontier_phi_55_56_ladder_1 = _2874;
                frontier_phi_55_56_ladder_2 = _2870;
                frontier_phi_55_56_ladder_3 = _2868;
                frontier_phi_55_56_ladder_4 = _2866;
                frontier_phi_55_56_ladder_5 = _2864;
            }
            _2976 = frontier_phi_55_56_ladder_5;
            _2978 = frontier_phi_55_56_ladder_4;
            _2980 = frontier_phi_55_56_ladder_3;
            _2982 = frontier_phi_55_56_ladder_2;
            _2984 = frontier_phi_55_56_ladder;
            _2986 = frontier_phi_55_56_ladder_1;
        }
        float _2991 = isnan(1.0) ? _1045 : (isnan(_1045) ? 1.0 : min(_1045, 1.0));
        _2776 = (_2991 * _2982) + _2228;
        _2778 = (_2991 * _2984) + _2230;
        _2780 = (_2991 * _2986) + _2232;
        _2782 = ((_2976 * 0.039999999105930328369140625) * _2991) + _2561;
        _2784 = ((_2978 * 0.039999999105930328369140625) * _2991) + _2563;
        _2786 = ((_2980 * 0.039999999105930328369140625) * _2991) + _2565;
    }
    else
    {
        _2776 = _2228;
        _2778 = _2230;
        _2780 = _2232;
        _2782 = _2561;
        _2784 = _2563;
        _2786 = _2565;
    }
    float _4693 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _4704 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _4715 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    uint _2806 = _255 + 6u;
    float _2814 = _982 / cbSceneParam._m0[86u].x;
    float _2815 = _983 / cbSceneParam._m0[86u].y;
    vec4 _2829 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2814, _2815, (log2((isnan(cbSceneParam._m0[77u].w) ? _917 : (isnan(_917) ? cbSceneParam._m0[77u].w : min(_917, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2831 = _2829.x;
    float _2832 = _2829.y;
    float _2833 = _2829.z;
    float _2834 = _2829.w;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_917 > cbSceneParam._m0[78u].w)
    {
        float _2889 = isnan(_917) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _917 : min(cbSceneParam._m0[80u].w, _917));
        float _2890 = _2889 / _917;
        float _2901 = _2890 * _967;
        float _2902 = _968 * _2890;
        float _2903 = (-0.0) - _2902;
        float _2904 = _2890 * _969;
        float _2906 = (cbSceneParam._m0[77u].w * _2903) / _2889;
        float _2907 = _2906 + cbSceneParam._m0[79u].w;
        float _2908 = cbSceneParam._m0[79u].w - _2902;
        float _2914 = sqrt(((_2901 * _2901) + (_2902 * _2902)) + (_2904 * _2904));
        float _2917 = (1.0 - (cbSceneParam._m0[77u].w / _2889)) * _2914;
        float _2922 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2924 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3077;
        if (abs((_2903 - _2906) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3077 = ((((_2907 > 0.0) ? exp2(_2922 * _2907) : (2.0 - exp2(_2924 * _2907))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2917;
        }
        else
        {
            float _3037 = 1.0 / cbSceneParam._m0[80u].x;
            float _3038 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : max(_2907, _2908));
            float _3039 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : min(_2907, _2908));
            float _3048 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : min(_3038, 0.0));
            float _3049 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : min(_3039, 0.0));
            _3077 = ((abs(_2914 / _2903) * cbSceneParam._m0[80u].y) * ((((_3048 - _3049) * 2.0) - ((exp2(_2922 * (isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0)))) - exp2(_2922 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))))) * _3037)) - ((exp2(_2924 * _3048) - exp2(_2924 * _3049)) * _3037))) + (_2917 * cbSceneParam._m0[80u].z);
        }
        vec4 _3079 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2814, _2815, 1.0), 0.0);
        float _3088 = exp2((_3077 * (-1.44269502162933349609375)) * (1.0 - _3079.w));
        float _3089 = log2(_3088);
        float _3105 = log2(_2834);
        _2926 = (exp2(_3105 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].x)) * _3079.x) / cbSceneParam._m0[78u].x)) + _2831;
        _2928 = (exp2(_3105 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].y)) * _3079.y) / cbSceneParam._m0[78u].y)) + _2832;
        _2930 = (exp2(_3105 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].z)) * _3079.z) / cbSceneParam._m0[78u].z)) + _2833;
        _2932 = _3088 * _2834;
    }
    else
    {
        _2926 = _2831;
        _2928 = _2832;
        _2930 = _2833;
        _2932 = _2834;
    }
    float _2944 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2945 = _2944 == 3.0;
    float _2946 = log2(_2932);
    float _2953 = exp2(_2946 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2776 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1045))) + ((_2782 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1849)) * cbPerFrame._m0[3u].x));
    float _2954 = exp2(_2946 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2778 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1045))) + ((_2784 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1849)) * cbPerFrame._m0[3u].x));
    float _2955 = exp2(_2946 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2780 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1045))) + ((_2786 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1849)) * cbPerFrame._m0[3u].x));
    float _2964 = (_2944 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2964 * (_2945 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2926)));
    SV_Target.y = _2964 * (_2945 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2928)));
    SV_Target.z = _2964 * (_2945 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2930)));
    SV_Target.w = cbInstanceData._m0[_2806].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2806].w;
}


