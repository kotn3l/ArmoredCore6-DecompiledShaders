#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1332;
float _3716;
float _3717;
float _3718;
float _3719;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[24u].z) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3728 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _438 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_425 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319);
    float _441 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_425 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320);
    float _444 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_425 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321);
    vec4 _462 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _479 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _481 = _479.x;
    float _482 = _479.y;
    float _483 = _479.z;
    float _492 = ((_462.z - _483) * _425) + _483;
    float _495 = ((((_462.x - _481) * _425) + _481) * 2.0) + (-1.0);
    float _497 = ((((_462.y - _482) * _425) + _482) * 2.0) + (-1.0);
    float _498 = dot(vec2(_495, _497), vec2(_495, _497));
    float _3739 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _503 = sqrt(1.0 - (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _531 = (((_519.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _495;
    float _532 = (((_519.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _497;
    float _535 = fma(_503, _239, fma(_532, _246, _531 * _232));
    float _538 = fma(_503, _240, fma(_532, _247, _531 * _233));
    float _541 = fma(_503, _241, fma(_532, _248, _531 * _234));
    float _545 = inversesqrt(dot(vec3(_535, _538, _541), vec3(_535, _538, _541)));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _574 = _572.x;
    float _575 = 1.0 - _574;
    float _581 = (cbMtdParam._m0[19u].x + dot(vec4(_545 * _535, _545 * _538, _545 * _541, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_574 - _575) * cbMtdParam._m0[24u].w) + _575) * cbMtdParam._m0[21u].z);
    float _3750 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _584 = (-0.0) - cbMtdParam._m0[24u].x;
    float _586 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _586 : (isnan(_586) ? 1.0 : min(_586, 1.0));
    float _594 = _582 - ((_582 * TEXCOORD_8.x) * _587);
    float _595 = _582 - ((_582 * TEXCOORD_8.y) * _587);
    float _596 = _582 - ((_582 * TEXCOORD_8.z) * _587);
    float _603 = (_594 * (cbMtdParam._m0[17u].x - _438)) + _438;
    float _604 = (_595 * (cbMtdParam._m0[17u].y - _441)) + _441;
    float _605 = (_596 * (cbMtdParam._m0[17u].z - _444)) + _444;
    vec4 _617 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _619 = _617.x;
    float _620 = 1.0 - _619;
    float _648 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_619 - _620) * cbMtdParam._m0[24u].y) + _620) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3771 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _657 = ((((cbMtdParam._m0[10u].x - _603) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _649) + _603;
    float _658 = ((((cbMtdParam._m0[10u].y - _604) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _649) + _604;
    float _659 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _605)) * _649) + _605;
    float _663 = (cbMtdParam._m0[19u].w * (_519.z - _492)) + _492;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _684 = (_677.x * 2.0) + (-1.0);
    float _685 = (_677.y * 2.0) + (-1.0);
    float _686 = dot(vec2(_684, _685), vec2(_684, _685));
    float _3782 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _694 = ((_677.z - _663) * _594) + _663;
    float _697 = ((cbMtdParam._m0[23u].y - _694) * _649) + _694;
    vec4 _716 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _722 = (_716.x * 2.0) + (-1.0);
    float _723 = (_716.y * 2.0) + (-1.0);
    float _724 = dot(vec2(_722, _723), vec2(_722, _723));
    float _3793 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _739 = ((sqrt(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) - _503) * _596) + _503;
    float _742 = (((_684 - _531) * _594) + _531) + (cbMtdParam._m0[21u].x * _531);
    float _743 = (((_685 - _532) * _595) + _532) + (cbMtdParam._m0[21u].x * _532);
    float _754 = (((_722 - _742) + (_742 * cbMtdParam._m0[22u].z)) * _649) + _742;
    float _755 = (((_723 - _743) + (_743 * cbMtdParam._m0[22u].z)) * _649) + _743;
    float _756 = (_649 * (sqrt(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) - _739)) + _739;
    float _758 = cbMtdParam._m0[22u].x + _519.w;
    float _761 = fma(_756, _239, fma(_755, _246, _754 * _232));
    float _764 = fma(_756, _240, fma(_755, _247, _754 * _233));
    float _767 = fma(_756, _241, fma(_755, _248, _754 * _234));
    float _771 = inversesqrt(dot(vec3(_761, _764, _767), vec3(_761, _764, _767)));
    float _772 = _771 * _761;
    float _773 = _771 * _764;
    float _774 = _771 * _767;
    float _3804 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _775 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _3826 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _3837 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3848 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _793 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _843 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _833);
    float _844 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _833);
    float _845 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _833);
    float _849 = inversesqrt(dot(vec3(_843, _844, _845), vec3(_843, _844, _845)));
    float _850 = _843 * _849;
    float _851 = _844 * _849;
    float _852 = _845 * _849;
    vec4 _857 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _859 = _857.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1013 = sqrt(((_843 * _843) + (_844 * _844)) + (_845 * _845));
        float _1019 = (cbMatDynParam._m0[5u].x * _1013) + cbMatDynParam._m0[5u].y;
        float _3859 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1024 = (cbMatDynParam._m0[5u].z * _1013) + cbMatDynParam._m0[5u].w;
        float _3870 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) - _1020)) + _1020) < ((_859 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _870 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _871 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _889 = fma(_774, cbSceneParam._m0[5u].z, fma(_773, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _772));
    float _892 = fma(_774, cbSceneParam._m0[6u].z, fma(_773, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _772));
    float _895 = fma(_774, cbSceneParam._m0[7u].z, fma(_773, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _772));
    uint _908 = _251 + 9u;
    uint _909 = _908 + uint(cbMatDynParam._m0[0u].w);
    float _915 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_909].x;
    float _916 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_909].y;
    float _917 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_909].z;
    float _3881 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    vec4 _929 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _870, cbSceneParam._m0[86u].y * _871));
    float _933 = ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * TEXCOORD_5.w) * _929.x;
    float _934 = dot(vec3(_772, _773, _774), vec3(_850, _851, _852));
    float _937 = _934 * 2.0;
    float _941 = (_937 * _772) - _850;
    float _942 = (_937 * _773) - _851;
    float _943 = (_937 * _774) - _852;
    float _947 = abs(dot(vec3(_850, _851, _852), vec3(_772, _773, _774)));
    float _3914 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _949 = sqrt(_775);
    float _962 = exp2((_949 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_949 * 3.0));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1331;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1056 = fma(_1002, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _994));
        float _1060 = fma(_1002, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _994));
        float _1064 = fma(_1002, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _994));
        float _1089 = _994 + _772;
        float _1090 = _998 + _773;
        float _1091 = _1002 + _774;
        float _1101 = fma(_1091, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089)) - _1056;
        float _1102 = fma(_1091, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089)) - _1060;
        float _1103 = fma(_1091, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089)) - _1064;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1056 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1060 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[34u].z) + ((((((_1064 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1159 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1125.x + (-0.5));
        float _1161 = _1159 * (_1125.y + (-0.5));
        float _1162 = _1159 * (_1125.z + (-0.5));
        float _1169 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1132.x + (-0.5));
        float _1171 = _1169 * (_1132.y + (-0.5));
        float _1172 = _1169 * (_1132.z + (-0.5));
        float _1179 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1139.x + (-0.5));
        float _1181 = _1179 * (_1139.y + (-0.5));
        float _1182 = _1179 * (_1139.z + (-0.5));
        float _1189 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1146.x + (-0.5));
        float _1191 = _1189 * (_1146.y + (-0.5));
        float _1192 = _1189 * (_1146.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1213 = (dot(vec3(_772, _773, _774), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1223 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3962 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1225 + 1.0))) + _1230) * _1193;
        float _1240 = _1161 * 0.5;
        float _1241 = _1171 * 0.5;
        float _1242 = _1181 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_772, _773, _774), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3995 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1267 + 1.0))) + _1272) * _1194;
        float _1282 = _1162 * 0.5;
        float _1283 = _1172 * 0.5;
        float _1284 = _1182 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_772, _773, _774), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4028 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1309 + 1.0))) + _1314) * _1195;
        _1331 = _1162;
        _1333 = _1161;
        _1334 = _1160;
        _1335 = _1172;
        _1336 = _1171;
        _1337 = _1170;
        _1338 = _1182;
        _1339 = _1181;
        _1340 = _1180;
        _1341 = _1195;
        _1342 = _1194;
        _1343 = _1193;
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1332;
        _1333 = _1332;
        _1334 = _1332;
        _1335 = _1332;
        _1336 = _1332;
        _1337 = _1332;
        _1338 = _1332;
        _1339 = _1332;
        _1340 = _1332;
        _1341 = _1332;
        _1342 = _1332;
        _1343 = _1332;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1374 = fma(_1002, cbModelParam._m0[30u].z, fma(_998, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _994));
        float _1378 = fma(_1002, cbModelParam._m0[31u].z, fma(_998, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _994));
        float _1382 = fma(_1002, cbModelParam._m0[32u].z, fma(_998, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _994));
        float _1405 = _994 + _772;
        float _1406 = _998 + _773;
        float _1407 = _1002 + _774;
        float _1417 = fma(_1407, cbModelParam._m0[30u].z, fma(_1406, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1405)) - _1374;
        float _1418 = fma(_1407, cbModelParam._m0[31u].z, fma(_1406, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1405)) - _1378;
        float _1419 = fma(_1407, cbModelParam._m0[32u].z, fma(_1406, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1405)) - _1382;
        float _1423 = inversesqrt(dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419)));
        float _1436 = ((_1423 * _1417) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1374 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1423 * _1418) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1378 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1423 * _1419) / cbModelParam._m0[35u].z) + ((((((_1382 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        float _1473 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1440.x + (-0.5));
        float _1475 = _1473 * (_1440.y + (-0.5));
        float _1476 = _1473 * (_1440.z + (-0.5));
        float _1483 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1447.x + (-0.5));
        float _1485 = _1483 * (_1447.y + (-0.5));
        float _1486 = _1483 * (_1447.z + (-0.5));
        float _1493 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1454.x + (-0.5));
        float _1495 = _1493 * (_1454.y + (-0.5));
        float _1496 = _1493 * (_1454.z + (-0.5));
        float _1503 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1461.x + (-0.5));
        float _1505 = _1503 * (_1461.y + (-0.5));
        float _1506 = _1503 * (_1461.z + (-0.5));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = _1474 * 0.5;
        float _1511 = _1484 * 0.5;
        float _1512 = _1494 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_772, _773, _774), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4091 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1537 + 1.0))) + _1542) * _1507;
        float _1552 = _1475 * 0.5;
        float _1553 = _1485 * 0.5;
        float _1554 = _1495 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_772, _773, _774), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4124 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1579 + 1.0))) + _1584) * _1508;
        float _1594 = _1476 * 0.5;
        float _1595 = _1486 * 0.5;
        float _1596 = _1496 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_772, _773, _774), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4157 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1621 + 1.0))) + _1626) * _1509;
        _1643 = _1476;
        _1644 = _1475;
        _1645 = _1474;
        _1646 = _1486;
        _1647 = _1485;
        _1648 = _1484;
        _1649 = _1496;
        _1650 = _1495;
        _1651 = _1494;
        _1652 = _1509;
        _1653 = _1508;
        _1654 = _1507;
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
    }
    else
    {
        _1643 = _1332;
        _1644 = _1332;
        _1645 = _1332;
        _1646 = _1332;
        _1647 = _1332;
        _1648 = _1332;
        _1649 = _1332;
        _1650 = _1332;
        _1651 = _1332;
        _1652 = _1332;
        _1653 = _1332;
        _1654 = _1332;
        _1655 = 0.0;
        _1656 = 0.0;
        _1657 = 0.0;
    }
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1344)) + _1344;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1345)) + _1345;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1346)) + _1346;
    float _1690 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1667));
    float _1711 = _941 * 0.5;
    float _1712 = _942 * 0.5;
    float _1713 = _943 * 0.5;
    float _1714 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1717 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1720 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1754;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1727 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1331, _1335, _1338, _1341));
        float _1731 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1735 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1742 = dot(vec4(cbModelParam._m0[39u]), vec4(_1711, _1712, _1713, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1765;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1756 = dot(vec4(cbModelParam._m0[40u]), vec4(_1711, _1712, _1713, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1769 = (_1765 * cbModelParam._m0[1u].x) + (_1754 * (1.0 - cbModelParam._m0[1u].x));
    float _1779 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _775);
    float _1780 = isnan(_1779) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1779 : min(cbModelParam._m0[25u].z, _1779));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1828 = fma(_1002, cbModelParam._m0[13u].z, fma(_998, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994)) + cbModelParam._m0[13u].w;
        float _1832 = fma(_1002, cbModelParam._m0[14u].z, fma(_998, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994)) + cbModelParam._m0[14u].w;
        float _1836 = fma(_1002, cbModelParam._m0[15u].z, fma(_998, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994)) + cbModelParam._m0[15u].w;
        float _1839 = fma(_943, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941));
        float _1842 = fma(_943, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941));
        float _1845 = fma(_943, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941));
        float _1873;
        if (_1839 > 0.0)
        {
            _1873 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1873 = frontier_phi_17_15_ladder;
        }
        float _2095;
        if (_1842 > 0.0)
        {
            _2095 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2095 = frontier_phi_26_22_ladder;
        }
        float _2341;
        if (_1845 > 0.0)
        {
            _2341 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2341 = frontier_phi_38_33_ladder;
        }
        float _2343 = isnan(_2095) ? _1873 : (isnan(_1873) ? _2095 : min(_1873, _2095));
        float _2344 = isnan(_2341) ? _2343 : (isnan(_2343) ? _2341 : min(_2343, _2341));
        float _2348 = (_2344 * _1839) + _1828;
        float _2349 = (_2344 * _1842) + _1832;
        float _2350 = (_2344 * _1845) + _1836;
        float _2351 = _2344 * 9.9999997473787516355514526367188e-05;
        float _2353 = (-1.0) - _2351;
        float _2355 = _2351 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2350 > _2355) || ((_2350 < _2353) || ((_2349 > _2355) || ((_2349 < _2353) || ((_2348 < _2353) || (_2348 > _2355))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2350, cbModelParam._m0[9u].z, fma(_2349, cbModelParam._m0[9u].y, _2348 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2350, cbModelParam._m0[10u].z, fma(_2349, cbModelParam._m0[10u].y, _2348 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2350, cbModelParam._m0[11u].z, fma(_2349, cbModelParam._m0[11u].y, _2348 * cbModelParam._m0[11u].x))), _1780);
            frontier_phi_16_38_ladder = _2474.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2474.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2474.x * cbModelParam._m0[1u].y;
        }
        _1861 = frontier_phi_16_38_ladder_2;
        _1863 = frontier_phi_16_38_ladder_1;
        _1865 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_941, _942, _943), _1780);
        _1861 = _1849.x * cbModelParam._m0[1u].y;
        _1863 = _1849.y * cbModelParam._m0[1u].y;
        _1865 = _1849.z * cbModelParam._m0[1u].y;
    }
    float _1869 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _775);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1869 : min(cbModelParam._m0[25u].w, _1869));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1924 = fma(_1002, cbModelParam._m0[21u].z, fma(_998, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994)) + cbModelParam._m0[21u].w;
        float _1928 = fma(_1002, cbModelParam._m0[22u].z, fma(_998, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994)) + cbModelParam._m0[22u].w;
        float _1932 = fma(_1002, cbModelParam._m0[23u].z, fma(_998, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994)) + cbModelParam._m0[23u].w;
        float _1935 = fma(_943, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941));
        float _1938 = fma(_943, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941));
        float _1941 = fma(_943, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941));
        float _2100;
        if (_1935 > 0.0)
        {
            _2100 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2100 = frontier_phi_28_24_ladder;
        }
        float _2368;
        if (_1938 > 0.0)
        {
            _2368 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2368 = frontier_phi_40_35_ladder;
        }
        float _2573;
        if (_1941 > 0.0)
        {
            _2573 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2573 = frontier_phi_49_46_ladder;
        }
        float _2575 = isnan(_2368) ? _2100 : (isnan(_2100) ? _2368 : min(_2100, _2368));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _1935) + _1924;
        float _2581 = (_2576 * _1938) + _1928;
        float _2582 = (_2576 * _1941) + _1932;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2583;
        float _2586 = _2583 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2582 > _2586) || ((_2582 < _2584) || ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 < _2584) || (_2580 > _2586))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2582, cbModelParam._m0[17u].z, fma(_2581, cbModelParam._m0[17u].y, _2580 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2582, cbModelParam._m0[18u].z, fma(_2581, cbModelParam._m0[18u].y, _2580 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2582, cbModelParam._m0[19u].z, fma(_2581, cbModelParam._m0[19u].y, _2580 * cbModelParam._m0[19u].x))), _1870);
            frontier_phi_25_49_ladder = _2781.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2781.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2781.x * cbModelParam._m0[1u].z;
        }
        _1960 = frontier_phi_25_49_ladder_2;
        _1962 = frontier_phi_25_49_ladder_1;
        _1964 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_941, _942, _943), _1870);
        _1960 = _1944.x * cbModelParam._m0[1u].z;
        _1962 = _1944.y * cbModelParam._m0[1u].z;
        _1964 = _1944.z * cbModelParam._m0[1u].z;
    }
    float _1976 = ((((1.0 - _962) * ((_949 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_962 * _949)) * _933;
    float _1977 = _1976 * ((cbModelParam._m0[1u].w * (_1960 - _1861)) + _1861);
    float _1978 = _1976 * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1979 = _1976 * ((cbModelParam._m0[1u].w * (_1964 - _1865)) + _1865);
    float _1982 = fma(_1979, cbSceneParam._m0[89u].z, fma(_1978, cbSceneParam._m0[89u].y, _1977 * cbSceneParam._m0[89u].x));
    float _1985 = fma(_1979, cbSceneParam._m0[90u].z, fma(_1978, cbSceneParam._m0[90u].y, _1977 * cbSceneParam._m0[90u].x));
    float _1988 = fma(_1979, cbSceneParam._m0[91u].z, fma(_1978, cbSceneParam._m0[91u].y, _1977 * cbSceneParam._m0[91u].x));
    vec4 _1996 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_870, _871));
    float _1998 = _1996.w;
    float _2010 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1998);
    float _2011 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1998);
    float _2012 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1998);
    uvec4 _2016 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2018 = _2016.x * 14u;
    uint _2019 = _2018 + 13u;
    float _2026 = _933 + (-1.0);
    float _2031 = (cbLight._m0[_2019].x * _2026) + 1.0;
    float _2032 = (cbLight._m0[_2019].y * _2026) + 1.0;
    float _2033 = (cbLight._m0[_2019].z * _2026) + 1.0;
    float _2034 = (cbLight._m0[_2019].w * _2026) + 1.0;
    uint _2035 = _2018 + 5u;
    float _2041 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2045 = _2018 + 4u;
    float _2054 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2058 = _2018 | 1u;
    float _2069 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_772, _773, _774));
    float _2072 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_772, _773, _774));
    float _4293 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _4304 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2077 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * 0.3183098733425140380859375;
    float _2079 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.3183098733425140380859375;
    float _2086 = ((cbLight._m0[_2035].x * _2041) * _2079) + (((cbLight._m0[_2045].x * _2010) * _2054) * _2077);
    float _2087 = ((_2041 * cbLight._m0[_2035].y) * _2079) + (((cbLight._m0[_2045].y * _2011) * _2054) * _2077);
    float _2088 = ((_2041 * cbLight._m0[_2035].z) * _2079) + (((cbLight._m0[_2045].z * _2012) * _2054) * _2077);
    uvec4 _2092 = floatBitsToUint(cbLight._m0[_2018 + 12u]);
    bool _2094 = _2092.x == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2094)
    {
        _2105 = _2086;
        _2107 = _2087;
        _2109 = _2088;
    }
    else
    {
        uint _2113 = _2018 + 6u;
        float _2129 = (dot(vec3(cbLight._m0[_2018 + 2u].xyz), vec3(_772, _773, _774)) * 0.5) + 0.5;
        float _2130 = _2129 * _2129;
        float _4315 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2131 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2132 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2105 = (((cbLight._m0[_2113].x * 0.3183098733425140380859375) * _2131) * _2132) + _2086;
        _2107 = (((cbLight._m0[_2113].y * 0.3183098733425140380859375) * _2131) * _2132) + _2087;
        _2109 = (((cbLight._m0[_2113].z * 0.3183098733425140380859375) * _2131) * _2132) + _2088;
    }
    bool _2112 = _2092.y == 0u;
    float _2150;
    float _2152;
    float _2154;
    if (_2112)
    {
        _2150 = _2105;
        _2152 = _2107;
        _2154 = _2109;
    }
    else
    {
        uint _2312 = _2018 + 7u;
        float _2328 = (dot(vec3(cbLight._m0[_2018 + 3u].xyz), vec3(_772, _773, _774)) * 0.5) + 0.5;
        float _2329 = _2328 * _2328;
        float _4331 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2330 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2331 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2150 = (((cbLight._m0[_2312].x * 0.3183098733425140380859375) * _2330) * _2331) + _2105;
        _2152 = (((cbLight._m0[_2312].y * 0.3183098733425140380859375) * _2330) * _2331) + _2107;
        _2154 = (((cbLight._m0[_2312].z * 0.3183098733425140380859375) * _2330) * _2331) + _2109;
    }
    uint _2157 = _2018 + 8u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _775) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_2018].x + _850;
    float _2173 = cbLight._m0[_2018].y + _851;
    float _2174 = cbLight._m0[_2018].z + _852;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2018].xyz));
    float _4347 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _4358 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _2186 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2187 = dot(vec3(_772, _773, _774), vec3(_2179, _2180, _2181));
    float _4369 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2191 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2179, _2180, _2181));
    float _4380 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2195 = _2171 * _2171;
    float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
    float _2210 = (exp2(log2(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2211 = 1.0 - _2171;
    float _2222 = (0.5 / (((_2186 * ((_2185 * _2211) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2211) + _2171) * _2185))) * _2185;
    float _4391 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2224 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
    uint _2238 = _2018 + 9u;
    float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _775) * 0.949999988079071044921875);
    float _2250 = _2249 * _2249;
    float _2251 = cbLight._m0[_2058].x + _850;
    float _2252 = cbLight._m0[_2058].y + _851;
    float _2253 = cbLight._m0[_2058].z + _852;
    float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
    float _2258 = _2257 * _2251;
    float _2259 = _2257 * _2252;
    float _2260 = _2257 * _2253;
    float _2261 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2058].xyz));
    float _4402 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2264 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2265 = dot(vec3(_772, _773, _774), vec3(_2258, _2259, _2260));
    float _4413 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2269 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2258, _2259, _2260));
    float _4424 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2273 = _2250 * _2250;
    float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
    float _2286 = (exp2(log2(1.0 - (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2287 = 1.0 - _2250;
    float _2297 = (0.5 / (((_2186 * ((_2264 * _2287) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2287) + _2250) * _2264))) * _2264;
    float _4435 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2299 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
    float _2309 = (((_2286 * cbLight._m0[_2238].x) * _2299) * _2041) + ((((cbLight._m0[_2157].x * _2010) * _2210) * _2224) * _2054);
    float _2310 = (((_2286 * cbLight._m0[_2238].y) * _2299) * _2041) + ((((cbLight._m0[_2157].y * _2011) * _2210) * _2224) * _2054);
    float _2311 = (((_2286 * cbLight._m0[_2238].z) * _2299) * _2041) + ((((cbLight._m0[_2157].z * _2012) * _2210) * _2224) * _2054);
    float _2373;
    float _2375;
    float _2377;
    if (_2094)
    {
        _2373 = _2309;
        _2375 = _2310;
        _2377 = _2311;
    }
    else
    {
        uint _2379 = _2018 + 2u;
        uint _2383 = _2018 + 10u;
        float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _775) * 0.949999988079071044921875);
        float _2398 = _2397 * _2397;
        float _2399 = cbLight._m0[_2379].x + _850;
        float _2400 = cbLight._m0[_2379].y + _851;
        float _2401 = cbLight._m0[_2379].z + _852;
        float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
        float _2406 = _2405 * _2399;
        float _2407 = _2405 * _2400;
        float _2408 = _2405 * _2401;
        float _2409 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2379].xyz));
        float _4446 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2413 = dot(vec3(_772, _773, _774), vec3(_2406, _2407, _2408));
        float _4457 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2417 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2406, _2407, _2408));
        float _4468 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2421 = _2398 * _2398;
        float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
        float _2434 = (exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2435 = 1.0 - _2398;
        float _2445 = (0.5 / (((_2186 * ((_2412 * _2435) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2435) + _2398) * _2412))) * _2412;
        float _4479 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2447 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
        float _2448 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2373 = (((_2434 * cbLight._m0[_2383].x) * _2447) * _2448) + _2309;
        _2375 = (((_2434 * cbLight._m0[_2383].y) * _2447) * _2448) + _2310;
        _2377 = (((_2434 * cbLight._m0[_2383].z) * _2447) * _2448) + _2311;
    }
    float _2483;
    float _2485;
    float _2487;
    if (_2112)
    {
        _2483 = _2373;
        _2485 = _2375;
        _2487 = _2377;
    }
    else
    {
        uint _2494 = _2018 + 3u;
        uint _2498 = _2018 + 11u;
        float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _775) * 0.949999988079071044921875);
        float _2513 = _2512 * _2512;
        float _2514 = cbLight._m0[_2494].x + _850;
        float _2515 = cbLight._m0[_2494].y + _851;
        float _2516 = cbLight._m0[_2494].z + _852;
        float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
        float _2521 = _2520 * _2514;
        float _2522 = _2520 * _2515;
        float _2523 = _2520 * _2516;
        float _2524 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2494].xyz));
        float _4495 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2528 = dot(vec3(_772, _773, _774), vec3(_2521, _2522, _2523));
        float _4506 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2532 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2521, _2522, _2523));
        float _4517 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2536 = _2513 * _2513;
        float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
        float _2549 = (exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2550 = 1.0 - _2513;
        float _2560 = (0.5 / (((_2186 * ((_2527 * _2550) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2550) + _2513) * _2527))) * _2527;
        float _4528 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2562 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
        float _2563 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2483 = (((_2549 * cbLight._m0[_2498].x) * _2562) * _2563) + _2373;
        _2485 = (((_2549 * cbLight._m0[_2498].y) * _2562) * _2563) + _2375;
        _2487 = (((_2549 * cbLight._m0[_2498].z) * _2562) * _2563) + _2377;
    }
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_2016.y == 0u)
    {
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2638;
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2638;
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2638;
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.x;
        uint _2665 = uint((float(_2653.y) * floor(float(uint(cbSceneParam._m0[85u].y * _871) / _2654))) + floor(float(uint(cbSceneParam._m0[85u].x * _870) / _2654)));
        float _2675 = (log2(_2641 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2676 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        uint _2679 = uint(isnan(14.0) ? _2676 : (isnan(_2676) ? 14.0 : min(_2676, 14.0)));
        uvec4 _2684 = texelFetch(g_lightClusterGridBuffer, int(((_2679 << 2u) + (_2665 << 6u)) >> 2u));
        uint _2685 = _2684.x;
        uint _2686 = _2653.z;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((((1u << ((_2686 >> 4u) & 15u)) + 4294967295u) & _2685) == 0u) || ((_2686 & 240u) == 0u))
        {
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
        }
        else
        {
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            uint _2944 = 0u;
            uint _2953;
            bool _2954;
            for (;;)
            {
                _2953 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_2944 << 2u)) >> 2u)).x;
                _2954 = _2953 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2954)
                {
                    frontier_phi_66_pred = _2938;
                    frontier_phi_66_pred_1 = _2943;
                    frontier_phi_66_pred_2 = _2942;
                    frontier_phi_66_pred_3 = _2941;
                    frontier_phi_66_pred_4 = _2940;
                    frontier_phi_66_pred_5 = _2939;
                }
                else
                {
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    uint _3089;
                    _3083 = _2938;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2953;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    for (;;)
                    {
                        uint _3093 = uint(findLSB(_3089)) + (_2944 << 5u);
                        uint _3090 = (_3089 + 4294967295u) & _3089;
                        uint _3095 = _3093 * 48u;
                        vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3095)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 3u)).x));
                        uint _3115 = (_3093 * 48u) + 4u;
                        vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3134 = (_3093 * 48u) + 8u;
                        vec3 _3145 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3134)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 2u)).x));
                        float _3149 = _3109.x - _2639;
                        float _3150 = _3109.y - _2640;
                        float _3151 = _3109.z - _2641;
                        float _3152 = dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151));
                        float _3155 = inversesqrt(_3152);
                        float _3156 = _3155 * _3149;
                        float _3157 = _3155 * _3150;
                        float _3158 = _3155 * _3151;
                        float _3159 = dot(vec3(_889, _892, _895), vec3(_3156, _3157, _3158));
                        float _3164 = 1.0 - (_3152 * _3109.w);
                        float _4554 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3165 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3166 = sqrt(_3152) * _3128.w;
                        float _3169 = 1.39999997615814208984375 / (_3166 + 1.39999997615814208984375);
                        float _3170 = _3169 * _3169;
                        float _3173 = ((1.0 - _3170) * _3159) + _3170;
                        float _3176 = _3166 * _3166;
                        float _3180 = ((isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0))) * _3165) / ((_3176 * 0.699999988079071044921875) + 1.0);
                        float _3184 = (-0.0) - _2639;
                        float _3185 = (-0.0) - _2640;
                        float _3186 = (-0.0) - _2641;
                        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                        float _3191 = _3190 * _3184;
                        float _3192 = _3190 * _3185;
                        float _3193 = _3190 * _3186;
                        float _3201 = exp2(log2(1.0 / ((_3176 * 3.5) + 5.0)) * 0.25);
                        float _3202 = 1.0 - _949;
                        float _3209 = sqrt(1.0 - ((1.0 - (_3202 * _3202)) * (1.0 - (_3201 * _3201))));
                        float _3210 = _3209 * _3209;
                        float _3211 = _3210 * _3210;
                        float _3212 = _3191 + _3156;
                        float _3213 = _3192 + _3157;
                        float _3214 = _3193 + _3158;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3222 = dot(vec3(_889, _892, _895), vec3(_3191, _3192, _3193));
                        float _4570 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3225 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3226 = dot(vec3(_889, _892, _895), vec3(_3218 * _3212, _3218 * _3213, _3218 * _3214));
                        float _4581 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3229 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3233 = ((_3229 * _3229) * (_3211 + (-1.0))) + 1.0;
                        float _3234 = _3169 * _3210;
                        float _3235 = _3234 * _3234;
                        float _3238 = ((1.0 - _3235) * _3159) + _3235;
                        float _4592 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3240 = 1.0 - _3210;
                        float _3250 = (0.5 / (((_3239 * ((_3225 * _3240) + _3210)) + 9.9999999392252902907785028219223e-09) + (((_3239 * _3240) + _3210) * _3225))) * _3239;
                        float _4603 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3261 = (((_3211 * 3.1415927410125732421875) * (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) / ((_3233 * _3233) * ((_3176 * 2.1991131305694580078125) + 3.141590118408203125))) * _3165;
                        _3013 = (_3180 * _3128.x) + _3086;
                        _3014 = (_3180 * _3128.y) + _3087;
                        _3015 = (_3180 * _3128.z) + _3088;
                        _3010 = (_3261 * _3145.x) + _3083;
                        _3011 = (_3261 * _3145.y) + _3084;
                        _3012 = (_3261 * _3145.z) + _3085;
                        if (_3090 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3083 = _3010;
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3090;
                        }
                    }
                    frontier_phi_66_pred = _3010;
                    frontier_phi_66_pred_1 = _3015;
                    frontier_phi_66_pred_2 = _3014;
                    frontier_phi_66_pred_3 = _3013;
                    frontier_phi_66_pred_4 = _3012;
                    frontier_phi_66_pred_5 = _3011;
                }
                _2787 = frontier_phi_66_pred;
                _2797 = frontier_phi_66_pred_1;
                _2795 = frontier_phi_66_pred_2;
                _2793 = frontier_phi_66_pred_3;
                _2791 = frontier_phi_66_pred_4;
                _2789 = frontier_phi_66_pred_5;
                uint _2945 = _2944 + 1u;
                if (_2945 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2938 = _2787;
                    _2939 = _2789;
                    _2940 = _2791;
                    _2941 = _2793;
                    _2942 = _2795;
                    _2943 = _2797;
                    _2944 = _2945;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
        }
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.z;
        uint _2803 = (_2801 >> 8u) & 15u;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        if (((4294967295u << _2803) & _2685) == 0u)
        {
            _2906 = _2786;
            _2908 = _2788;
            _2910 = _2790;
            _2912 = _2792;
            _2914 = _2794;
            _2916 = _2796;
        }
        else
        {
            float _2931 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
            float _2932 = _2931 * _2639;
            float _2933 = _2931 * _2640;
            float _2934 = _2931 * _2641;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2803 < ((_2801 >> 12u) & 15u))
            {
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _3066 = _2786;
                float _3067 = _2788;
                float _3068 = _2790;
                float _3069 = _2792;
                float _3070 = _2794;
                float _3071 = _2796;
                uint _3072 = _2803;
                uint _3081;
                bool _3082;
                for (;;)
                {
                    _3081 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_3072 << 2u)) >> 2u)).x;
                    _3082 = _3081 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3082)
                    {
                        frontier_phi_77_pred = _3071;
                        frontier_phi_77_pred_1 = _3070;
                        frontier_phi_77_pred_2 = _3069;
                        frontier_phi_77_pred_3 = _3068;
                        frontier_phi_77_pred_4 = _3067;
                        frontier_phi_77_pred_5 = _3066;
                    }
                    else
                    {
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3288 = _3066;
                        float _3289 = _3067;
                        float _3290 = _3068;
                        float _3291 = _3069;
                        float _3292 = _3070;
                        float _3293 = _3071;
                        uint _3294 = _3081;
                        uint _3295;
                        vec4 _3320;
                        float _3321;
                        vec4 _3336;
                        vec3 _3348;
                        vec4 _3363;
                        vec4 _3379;
                        float _3425;
                        bool _3426;
                        for (;;)
                        {
                            uint _3305 = ((_3072 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3294));
                            _3295 = (_3294 + 4294967295u) & _3294;
                            uint _3307 = _3305 * 40u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3321 = _3320.w;
                            uint _3323 = (_3305 * 40u) + 4u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3305 * 40u) + 8u;
                            _3348 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x));
                            uint _3350 = (_3305 * 40u) + 16u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3366 = (_3305 * 40u) + 20u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3381 = (_3305 * 40u) + 24u;
                            vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3400 = (_3305 * 40u) + 28u;
                            vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            _3425 = fma(_2641, _3413.z, fma(_2640, _3413.y, _3413.x * _2639)) + _3413.w;
                            _3426 = !((fma(_2641, _3394.z, fma(_2640, _3394.y, _3394.x * _2639)) + _3394.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3426)
                            {
                                float _3453 = _3320.x - _2639;
                                float _3454 = _3320.y - _2640;
                                float _3455 = _3320.z - _2641;
                                float _3456 = dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455));
                                float _3459 = inversesqrt(_3456);
                                float _3460 = _3459 * _3453;
                                float _3461 = _3459 * _3454;
                                float _3462 = _3459 * _3455;
                                float _3466 = 1.0 - (_3456 / (_3321 * _3321));
                                float _4614 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3471 = sqrt(_3456) * _3336.w;
                                float _3473 = 1.39999997615814208984375 / (_3471 + 1.39999997615814208984375);
                                float _3474 = _3473 * _3473;
                                float _3477 = ((1.0 - _3474) * dot(vec3(_3460, _3461, _3462), vec3(_889, _892, _895))) + _3474;
                                float _3480 = _3471 * _3471;
                                float _3484 = (fma(_2641, _3363.z, fma(_2640, _3363.y, _3363.x * _2639)) + _3363.w) / _3425;
                                float _3485 = (fma(_2641, _3379.z, fma(_2640, _3379.y, _3379.x * _2639)) + _3379.w) / _3425;
                                float _3489 = 1.0 - dot(vec2(_3484, _3485), vec2(_3484, _3485));
                                float _4630 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3490 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3491 = _3490 * (((isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0))) * _3467) / ((_3480 * 0.699999988079071044921875) + 1.0));
                                float _3503 = exp2(log2(1.0 / ((_3480 * 3.5) + 5.0)) * 0.25);
                                float _3504 = 1.0 - _949;
                                float _3511 = sqrt(1.0 - ((1.0 - (_3504 * _3504)) * (1.0 - (_3503 * _3503))));
                                float _3512 = _3511 * _3511;
                                float _3513 = _3512 * _3512;
                                float _3514 = _3460 - _2932;
                                float _3515 = _3461 - _2933;
                                float _3516 = _3462 - _2934;
                                float _3520 = inversesqrt(dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516)));
                                float _3524 = dot(vec3(_889, _892, _895), vec3((-0.0) - _2932, (-0.0) - _2933, (-0.0) - _2934));
                                float _4641 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3528 = dot(vec3(_889, _892, _895), vec3(_3520 * _3514, _3520 * _3515, _3520 * _3516));
                                float _4652 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3531 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3535 = ((_3531 * _3531) * (_3513 + (-1.0))) + 1.0;
                                float _3536 = _3473 * _3512;
                                float _3537 = _3536 * _3536;
                                float _3543 = ((1.0 - _3537) * dot(vec3(_889, _892, _895), vec3(_3460, _3461, _3462))) + _3537;
                                float _4663 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3545 = 1.0 - _3512;
                                float _3555 = (0.5 / (((_3544 * ((_3527 * _3545) + _3512)) + 9.9999999392252902907785028219223e-09) + (((_3544 * _3545) + _3512) * _3527))) * _3544;
                                float _4674 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3565 = (_3490 * _3467) * (((_3513 * 3.1415927410125732421875) * (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) / ((_3535 * _3535) * ((_3480 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3491 * _3336.y;
                                frontier_phi_83_pred_1 = _3491 * _3336.x;
                                frontier_phi_83_pred_2 = _3565 * _3348.z;
                                frontier_phi_83_pred_3 = _3565 * _3348.y;
                                frontier_phi_83_pred_4 = _3565 * _3348.x;
                                frontier_phi_83_pred_5 = _3491 * _3336.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3573 = frontier_phi_83_pred;
                            _3572 = frontier_phi_83_pred_1;
                            _3571 = frontier_phi_83_pred_2;
                            _3570 = frontier_phi_83_pred_3;
                            _3569 = frontier_phi_83_pred_4;
                            _3574 = frontier_phi_83_pred_5;
                            _3278 = _3572 + _3291;
                            _3279 = _3573 + _3292;
                            _3280 = _3574 + _3293;
                            _3275 = _3569 + _3288;
                            _3276 = _3570 + _3289;
                            _3277 = _3571 + _3290;
                            if (_3295 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3295;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3280;
                        frontier_phi_77_pred_1 = _3279;
                        frontier_phi_77_pred_2 = _3278;
                        frontier_phi_77_pred_3 = _3277;
                        frontier_phi_77_pred_4 = _3276;
                        frontier_phi_77_pred_5 = _3275;
                    }
                    _2917 = frontier_phi_77_pred;
                    _2915 = frontier_phi_77_pred_1;
                    _2913 = frontier_phi_77_pred_2;
                    _2911 = frontier_phi_77_pred_3;
                    _2909 = frontier_phi_77_pred_4;
                    _2907 = frontier_phi_77_pred_5;
                    uint _3073 = _3072 + 1u;
                    if (_3073 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3066 = _2907;
                        _3067 = _2909;
                        _3068 = _2911;
                        _3069 = _2913;
                        _3070 = _2915;
                        _3071 = _2917;
                        _3072 = _3073;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2911;
                frontier_phi_58_59_ladder_1 = _2917;
                frontier_phi_58_59_ladder_2 = _2915;
                frontier_phi_58_59_ladder_3 = _2913;
                frontier_phi_58_59_ladder_4 = _2909;
                frontier_phi_58_59_ladder_5 = _2907;
            }
            else
            {
                frontier_phi_58_59_ladder = _2790;
                frontier_phi_58_59_ladder_1 = _2796;
                frontier_phi_58_59_ladder_2 = _2794;
                frontier_phi_58_59_ladder_3 = _2792;
                frontier_phi_58_59_ladder_4 = _2788;
                frontier_phi_58_59_ladder_5 = _2786;
            }
            _2906 = frontier_phi_58_59_ladder_5;
            _2908 = frontier_phi_58_59_ladder_4;
            _2910 = frontier_phi_58_59_ladder;
            _2912 = frontier_phi_58_59_ladder_3;
            _2914 = frontier_phi_58_59_ladder_2;
            _2916 = frontier_phi_58_59_ladder_1;
        }
        float _2921 = isnan(1.0) ? _933 : (isnan(_933) ? 1.0 : min(_933, 1.0));
        _2698 = (_2921 * _2912) + _2150;
        _2700 = (_2921 * _2914) + _2152;
        _2702 = (_2921 * _2916) + _2154;
        _2704 = ((_2906 * 0.039999999105930328369140625) * _2921) + _2483;
        _2706 = ((_2908 * 0.039999999105930328369140625) * _2921) + _2485;
        _2708 = ((_2910 * 0.039999999105930328369140625) * _2921) + _2487;
    }
    else
    {
        _2698 = _2150;
        _2700 = _2152;
        _2702 = _2154;
        _2704 = _2483;
        _2706 = _2485;
        _2708 = _2487;
    }
    float _4690 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4701 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4712 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _2725 = ((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2698 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _933))) + ((_2704 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1769)) * cbPerFrame._m0[3u].x);
    float _2726 = ((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2700 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _933))) + ((_2706 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1769)) * cbPerFrame._m0[3u].x);
    float _2727 = ((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2702 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _933))) + ((_2708 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1769)) * cbPerFrame._m0[3u].x);
    uint _2728 = _251 + 6u;
    float _2736 = _870 / cbSceneParam._m0[86u].x;
    float _2737 = _871 / cbSceneParam._m0[86u].y;
    vec4 _2751 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, (log2((isnan(cbSceneParam._m0[77u].w) ? _793 : (isnan(_793) ? cbSceneParam._m0[77u].w : min(_793, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2753 = _2751.x;
    float _2754 = _2751.y;
    float _2755 = _2751.z;
    float _2756 = _2751.w;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_793 > cbSceneParam._m0[78u].w)
    {
        float _2811 = isnan(_793) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _793 : min(cbSceneParam._m0[80u].w, _793));
        float _2812 = _2811 / _793;
        float _2823 = _2812 * _843;
        float _2824 = _844 * _2812;
        float _2825 = (-0.0) - _2824;
        float _2826 = _2812 * _845;
        float _2828 = (cbSceneParam._m0[77u].w * _2825) / _2811;
        float _2829 = _2828 + cbSceneParam._m0[79u].w;
        float _2830 = cbSceneParam._m0[79u].w - _2824;
        float _2836 = sqrt(((_2823 * _2823) + (_2824 * _2824)) + (_2826 * _2826));
        float _2839 = (1.0 - (cbSceneParam._m0[77u].w / _2811)) * _2836;
        float _2844 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2846 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3023;
        if (abs((_2825 - _2828) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3023 = ((((_2829 > 0.0) ? exp2(_2844 * _2829) : (2.0 - exp2(_2846 * _2829))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2839;
        }
        else
        {
            float _2967 = 1.0 / cbSceneParam._m0[80u].x;
            float _2968 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : max(_2829, _2830));
            float _2969 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : min(_2829, _2830));
            float _2978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : min(_2968, 0.0));
            float _2979 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : min(_2969, 0.0));
            _3023 = ((abs(_2836 / _2825) * cbSceneParam._m0[80u].y) * ((((_2978 - _2979) * 2.0) - ((exp2(_2844 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0)))) - exp2(_2844 * (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))))) * _2967)) - ((exp2(_2846 * _2978) - exp2(_2846 * _2979)) * _2967))) + (_2839 * cbSceneParam._m0[80u].z);
        }
        vec4 _3025 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, 1.0), 0.0);
        float _3034 = exp2((_3023 * (-1.44269502162933349609375)) * (1.0 - _3025.w));
        float _3035 = log2(_3034);
        float _3051 = log2(_2756);
        _2848 = (exp2(_3051 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].x)) * _3025.x) / cbSceneParam._m0[78u].x)) + _2753;
        _2850 = (exp2(_3051 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].y)) * _3025.y) / cbSceneParam._m0[78u].y)) + _2754;
        _2852 = (exp2(_3051 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].z)) * _3025.z) / cbSceneParam._m0[78u].z)) + _2755;
        _2854 = _3034 * _2756;
    }
    else
    {
        _2848 = _2753;
        _2850 = _2754;
        _2852 = _2755;
        _2854 = _2756;
    }
    bool _3061;
    vec4 _2864;
    vec4 _2886;
    float _2888;
    float _2892;
    float _2893;
    float _2894;
    float _2895;
    bool _2905;
    for (;;)
    {
        _2864 = cbMatDynParam._m0[0u];
        float _2866 = roundEven(_2864.y);
        bool _2867 = _2866 == 3.0;
        float _2868 = log2(_2854);
        float _2875 = exp2(_2868 * cbSceneParam._m0[78u].x) * _2725;
        float _2876 = exp2(_2868 * cbSceneParam._m0[78u].y) * _2726;
        float _2877 = exp2(_2868 * cbSceneParam._m0[78u].z) * _2727;
        float _2884 = _859 + (-0.5);
        _2886 = cbMtdParam._m0[1u];
        _2888 = _2886.y * _2884;
        float _2891 = (_2866 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2892 = _2891 * (_2867 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2848)));
        _2893 = _2891 * (_2867 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2850)));
        _2894 = _2891 * (_2867 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2852)));
        _2895 = _2884 * 0.999000012874603271484375;
        _2905 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2905)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _2895) < 0.5)
            {
                _3061 = true;
                break;
            }
        }
        uint _3002 = _908 + uint(_2864.w);
        if ((cbInstanceData._m0[_3002].w < 1.0) && ((cbInstanceData._m0[_3002].w + _2895) < 0.5))
        {
            _3061 = true;
            break;
        }
        if ((_2888 + 1.0) < _2886.x)
        {
            _3061 = true;
            break;
        }
        _3061 = false;
        break;
    }
    float _3266;
    if (_3061)
    {
        discard_state = true;
        _3266 = 0.0;
    }
    else
    {
        _3266 = cbInstanceData._m0[_2728].w;
    }
    SV_Target.x = _2892;
    SV_Target.y = _2893;
    SV_Target.z = _2894;
    SV_Target.w = _3266;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2728].w;
    discard_exit();
}


