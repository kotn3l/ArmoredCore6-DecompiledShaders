#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1437;
float _4077;
float _4078;
float _4079;
float _4080;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _408 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _410 = _408.x;
    float _422 = dot(vec4(_410, _408.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _439 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _371.x) * 2.0) - ((((_410 - _422) * cbMtdParam._m0[24u].z) + _422) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4089 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _447 = (_440 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _448 = (_440 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _449 = (_440 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _466 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _486 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _488 = _486.x;
    float _498 = dot(vec4(_488, _486.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _512 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _371.y) * 2.0) - ((((_488 - _498) * cbMtdParam._m0[24u].z) + _498) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4100 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _526 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_513 * ((_466.x * cbMtdParam._m0[13u].x) - _447)) + _447);
    float _529 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_513 * ((_466.y * cbMtdParam._m0[13u].y) - _448)) + _448);
    float _532 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_513 * ((_466.z * cbMtdParam._m0[13u].z) - _449)) + _449);
    vec4 _551 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _590 = _588.x;
    float _591 = _588.y;
    float _592 = _588.z;
    float _599 = ((_571.x - _590) * _440) + _590;
    float _600 = ((_571.y - _591) * _440) + _591;
    float _601 = ((_571.z - _592) * _440) + _592;
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _626 = ((_613.z - _601) * _513) + _601;
    float _629 = ((((_613.x - _599) * _513) + _599) * 2.0) + (-1.0);
    float _631 = ((((_613.y - _600) * _513) + _600) * 2.0) + (-1.0);
    float _632 = dot(vec2(_629, _631), vec2(_629, _631));
    float _4111 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _637 = sqrt(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))));
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _676 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _678 = _676.x;
    float _679 = 1.0 - _678;
    float _685 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _688 = ((isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : min(_685, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _697 = (_688 - ((((((_678 - _679) * cbMtdParam._m0[24u].w) + _679) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _688))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4132 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _698 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _705 = (_698 * ((_551.x * cbMtdParam._m0[18u].x) - _526)) + _526;
    float _706 = (_698 * ((_551.y * cbMtdParam._m0[18u].y) - _529)) + _529;
    float _707 = (_698 * ((_551.z * cbMtdParam._m0[18u].z) - _532)) + _532;
    vec4 _719 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _721 = _719.x;
    float _722 = 1.0 - _721;
    float _749 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_721 - _722) * cbMtdParam._m0[24u].y) + _722) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4143 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _750 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _758 = ((((cbMtdParam._m0[10u].x - _705) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _750) + _705;
    float _759 = ((((cbMtdParam._m0[10u].y - _706) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _750) + _706;
    float _760 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _707)) * _750) + _707;
    float _764 = (cbMtdParam._m0[19u].w * (_651.z - _626)) + _626;
    vec4 _778 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _785 = (_778.x * 2.0) + (-1.0);
    float _786 = (_778.y * 2.0) + (-1.0);
    float _787 = dot(vec2(_785, _786), vec2(_785, _786));
    float _4154 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _795 = (_698 * (_778.z - _764)) + _764;
    float _798 = ((cbMtdParam._m0[23u].y - _795) * _750) + _795;
    vec4 _817 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _823 = (_817.x * 2.0) + (-1.0);
    float _824 = (_817.y * 2.0) + (-1.0);
    float _825 = dot(vec2(_823, _824), vec2(_823, _824));
    float _4165 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _833 = (((_651.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _629;
    float _834 = (((_651.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _631;
    float _846 = (((_785 - _833) + (cbMtdParam._m0[21u].x * _833)) * _698) + _833;
    float _847 = (((_786 - _834) + (cbMtdParam._m0[21u].x * _834)) * _698) + _834;
    float _848 = (_698 * (sqrt(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) - _637)) + _637;
    float _859 = (((_823 - _846) + (_846 * cbMtdParam._m0[22u].z)) * _750) + _846;
    float _860 = (((_824 - _847) + (_847 * cbMtdParam._m0[22u].z)) * _750) + _847;
    float _861 = ((sqrt(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) - _848) * _750) + _848;
    float _863 = cbMtdParam._m0[22u].x + _651.w;
    float _866 = fma(_861, _250 * NORMAL.x, fma(_860, _257 * TANGENT.x, (_243 * _235) * _859));
    float _869 = fma(_861, _250 * NORMAL.y, fma(_860, _257 * TANGENT.y, (_243 * _236) * _859));
    float _872 = fma(_861, _250 * NORMAL.z, fma(_860, _257 * TANGENT.z, (_243 * _237) * _859));
    float _876 = inversesqrt(dot(vec3(_866, _869, _872), vec3(_866, _869, _872)));
    float _877 = _876 * _866;
    float _878 = _876 * _869;
    float _879 = _876 * _872;
    float _4176 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _880 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4198 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4209 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4220 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _898 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _948 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _938);
    float _949 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _938);
    float _950 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _938);
    float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
    float _955 = _948 * _954;
    float _956 = _949 * _954;
    float _957 = _950 * _954;
    vec4 _962 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _964 = _962.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1118 = sqrt(((_948 * _948) + (_949 * _949)) + (_950 * _950));
        float _1124 = (cbMatDynParam._m0[5u].x * _1118) + cbMatDynParam._m0[5u].y;
        float _4231 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1129 = (cbMatDynParam._m0[5u].z * _1118) + cbMatDynParam._m0[5u].w;
        float _4242 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) - _1125)) + _1125) < ((_964 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _975 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _976 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _994 = fma(_879, cbSceneParam._m0[5u].z, fma(_878, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _877));
    float _997 = fma(_879, cbSceneParam._m0[6u].z, fma(_878, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _877));
    float _1000 = fma(_879, cbSceneParam._m0[7u].z, fma(_878, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _877));
    uint _1013 = _263 + 9u;
    uint _1014 = _1013 + uint(cbMatDynParam._m0[0u].w);
    float _1020 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * cbInstanceData._m0[_1014].x;
    float _1021 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * cbInstanceData._m0[_1014].y;
    float _1022 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * cbInstanceData._m0[_1014].z;
    float _4253 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1023 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _4264 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1024 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    vec4 _1034 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _975, cbSceneParam._m0[86u].y * _976));
    float _1038 = ((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * TEXCOORD_5.w) * _1034.x;
    float _1039 = dot(vec3(_877, _878, _879), vec3(_955, _956, _957));
    float _1042 = _1039 * 2.0;
    float _1046 = (_1042 * _877) - _955;
    float _1047 = (_1042 * _878) - _956;
    float _1048 = (_1042 * _879) - _957;
    float _1052 = abs(dot(vec3(_955, _956, _957), vec3(_877, _878, _879)));
    float _4286 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1054 = sqrt(_880);
    float _1067 = exp2((_1054 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1054 * 3.0));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1436;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1161 = fma(_1107, cbModelParam._m0[26u].z, fma(_1103, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099));
        float _1165 = fma(_1107, cbModelParam._m0[27u].z, fma(_1103, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099));
        float _1169 = fma(_1107, cbModelParam._m0[28u].z, fma(_1103, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099));
        float _1194 = _1099 + _877;
        float _1195 = _1103 + _878;
        float _1196 = _1107 + _879;
        float _1206 = fma(_1196, cbModelParam._m0[26u].z, fma(_1195, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1194)) - _1161;
        float _1207 = fma(_1196, cbModelParam._m0[27u].z, fma(_1195, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1194)) - _1165;
        float _1208 = fma(_1196, cbModelParam._m0[28u].z, fma(_1195, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1194)) - _1169;
        float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
        float _1225 = ((_1212 * _1206) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1161 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1212 * _1207) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1165 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1212 * _1208) / cbModelParam._m0[34u].z) + ((((((_1169 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        float _1264 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1230.x + (-0.5));
        float _1266 = _1264 * (_1230.y + (-0.5));
        float _1267 = _1264 * (_1230.z + (-0.5));
        float _1274 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1237.x + (-0.5));
        float _1276 = _1274 * (_1237.y + (-0.5));
        float _1277 = _1274 * (_1237.z + (-0.5));
        float _1284 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1244.x + (-0.5));
        float _1286 = _1284 * (_1244.y + (-0.5));
        float _1287 = _1284 * (_1244.z + (-0.5));
        float _1294 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1251.x + (-0.5));
        float _1296 = _1294 * (_1251.y + (-0.5));
        float _1297 = _1294 * (_1251.z + (-0.5));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = _1265 * 0.5;
        float _1302 = _1275 * 0.5;
        float _1303 = _1285 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1318 = (dot(vec3(_877, _878, _879), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1328 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4334 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1330 + 1.0))) + _1335) * _1298;
        float _1345 = _1266 * 0.5;
        float _1346 = _1276 * 0.5;
        float _1347 = _1286 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_877, _878, _879), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4367 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1372 + 1.0))) + _1377) * _1299;
        float _1387 = _1267 * 0.5;
        float _1388 = _1277 * 0.5;
        float _1389 = _1287 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_877, _878, _879), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4400 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1414 + 1.0))) + _1419) * _1300;
        _1436 = _1267;
        _1438 = _1266;
        _1439 = _1265;
        _1440 = _1277;
        _1441 = _1276;
        _1442 = _1275;
        _1443 = _1287;
        _1444 = _1286;
        _1445 = _1285;
        _1446 = _1300;
        _1447 = _1299;
        _1448 = _1298;
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1437;
        _1438 = _1437;
        _1439 = _1437;
        _1440 = _1437;
        _1441 = _1437;
        _1442 = _1437;
        _1443 = _1437;
        _1444 = _1437;
        _1445 = _1437;
        _1446 = _1437;
        _1447 = _1437;
        _1448 = _1437;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1478 = fma(_1107, cbModelParam._m0[30u].z, fma(_1103, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099));
        float _1482 = fma(_1107, cbModelParam._m0[31u].z, fma(_1103, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099));
        float _1486 = fma(_1107, cbModelParam._m0[32u].z, fma(_1103, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099));
        float _1509 = _1099 + _877;
        float _1510 = _1103 + _878;
        float _1511 = _1107 + _879;
        float _1521 = fma(_1511, cbModelParam._m0[30u].z, fma(_1510, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1509)) - _1478;
        float _1522 = fma(_1511, cbModelParam._m0[31u].z, fma(_1510, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1509)) - _1482;
        float _1523 = fma(_1511, cbModelParam._m0[32u].z, fma(_1510, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1509)) - _1486;
        float _1527 = inversesqrt(dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523)));
        float _1540 = ((_1527 * _1521) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1478 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1541 = ((_1527 * _1522) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1482 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1542 = ((_1527 * _1523) / cbModelParam._m0[35u].z) + ((((((_1486 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        float _1577 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1544.x + (-0.5));
        float _1579 = _1577 * (_1544.y + (-0.5));
        float _1580 = _1577 * (_1544.z + (-0.5));
        float _1587 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1551.x + (-0.5));
        float _1589 = _1587 * (_1551.y + (-0.5));
        float _1590 = _1587 * (_1551.z + (-0.5));
        float _1597 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1558.x + (-0.5));
        float _1599 = _1597 * (_1558.y + (-0.5));
        float _1600 = _1597 * (_1558.z + (-0.5));
        float _1607 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1565.x + (-0.5));
        float _1609 = _1607 * (_1565.y + (-0.5));
        float _1610 = _1607 * (_1565.z + (-0.5));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = _1578 * 0.5;
        float _1615 = _1588 * 0.5;
        float _1616 = _1598 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_877, _878, _879), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4463 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1641 + 1.0))) + _1646) * _1611;
        float _1656 = _1579 * 0.5;
        float _1657 = _1589 * 0.5;
        float _1658 = _1599 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_877, _878, _879), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4496 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1683 + 1.0))) + _1688) * _1612;
        float _1698 = _1580 * 0.5;
        float _1699 = _1590 * 0.5;
        float _1700 = _1600 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_877, _878, _879), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4507 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4518 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4529 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_1725 + 1.0))) + _1730) * _1613;
        _1747 = _1580;
        _1748 = _1579;
        _1749 = _1578;
        _1750 = _1590;
        _1751 = _1589;
        _1752 = _1588;
        _1753 = _1600;
        _1754 = _1599;
        _1755 = _1598;
        _1756 = _1613;
        _1757 = _1612;
        _1758 = _1611;
        _1759 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1760 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1761 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
    }
    else
    {
        _1747 = _1437;
        _1748 = _1437;
        _1749 = _1437;
        _1750 = _1437;
        _1751 = _1437;
        _1752 = _1437;
        _1753 = _1437;
        _1754 = _1437;
        _1755 = _1437;
        _1756 = _1437;
        _1757 = _1437;
        _1758 = _1437;
        _1759 = 0.0;
        _1760 = 0.0;
        _1761 = 0.0;
    }
    float _1771 = (cbModelParam._m0[1u].x * (_1759 - _1449)) + _1449;
    float _1772 = (cbModelParam._m0[1u].x * (_1760 - _1450)) + _1450;
    float _1773 = (cbModelParam._m0[1u].x * (_1761 - _1451)) + _1451;
    float _1794 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1772, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1797 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1772, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1800 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1772, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1771));
    float _1815 = _1046 * 0.5;
    float _1816 = _1047 * 0.5;
    float _1817 = _1048 * 0.5;
    float _1818 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1749, _1752, _1755, _1758));
    float _1821 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1748, _1751, _1754, _1757));
    float _1824 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1747, _1750, _1753, _1756));
    float _1858;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1831 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1436, _1440, _1443, _1446));
        float _1835 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1438, _1441, _1444, _1447));
        float _1839 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1846 = dot(vec4(cbModelParam._m0[39u]), vec4(_1815, _1816, _1817, 1.0));
        _1858 = dot(vec3(isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1846) ? 0.0 : (isnan(0.0) ? _1846 : max(0.0, _1846))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1858 = 1.0;
    }
    float _1869;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1860 = dot(vec4(cbModelParam._m0[40u]), vec4(_1815, _1816, _1817, 1.0));
        _1869 = dot(vec3(isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1860) ? 0.0 : (isnan(0.0) ? _1860 : max(0.0, _1860))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1869 = 1.0;
    }
    float _1873 = (_1869 * cbModelParam._m0[1u].x) + (_1858 * (1.0 - cbModelParam._m0[1u].x));
    float _1883 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _880);
    float _1884 = isnan(_1883) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1883 : min(cbModelParam._m0[25u].z, _1883));
    float _1964;
    float _1966;
    float _1968;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1931 = fma(_1107, cbModelParam._m0[13u].z, fma(_1103, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099)) + cbModelParam._m0[13u].w;
        float _1935 = fma(_1107, cbModelParam._m0[14u].z, fma(_1103, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099)) + cbModelParam._m0[14u].w;
        float _1939 = fma(_1107, cbModelParam._m0[15u].z, fma(_1103, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099)) + cbModelParam._m0[15u].w;
        float _1942 = fma(_1048, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046));
        float _1945 = fma(_1048, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046));
        float _1948 = fma(_1048, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046));
        float _1976;
        if (_1942 > 0.0)
        {
            _1976 = abs((1.0 - _1931) / _1942);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1931 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1976 = frontier_phi_17_15_ladder;
        }
        float _2145;
        if (_1945 > 0.0)
        {
            _2145 = abs((1.0 - _1935) / _1945);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1935 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2145 = frontier_phi_26_22_ladder;
        }
        float _2440;
        if (_1948 > 0.0)
        {
            _2440 = abs((1.0 - _1939) / _1948);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1939 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2440 = frontier_phi_38_33_ladder;
        }
        float _2442 = isnan(_2145) ? _1976 : (isnan(_1976) ? _2145 : min(_1976, _2145));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1942) + _1931;
        float _2448 = (_2443 * _1945) + _1935;
        float _2449 = (_2443 * _1948) + _1939;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2450;
        float _2454 = _2450 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 > _2454) || ((_2448 < _2452) || ((_2447 < _2452) || (_2447 > _2454))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2449, cbModelParam._m0[9u].z, fma(_2448, cbModelParam._m0[9u].y, _2447 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2449, cbModelParam._m0[10u].z, fma(_2448, cbModelParam._m0[10u].y, _2447 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2449, cbModelParam._m0[11u].z, fma(_2448, cbModelParam._m0[11u].y, _2447 * cbModelParam._m0[11u].x))), _1884);
            frontier_phi_16_38_ladder = _2594.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2594.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2594.x * cbModelParam._m0[1u].y;
        }
        _1964 = frontier_phi_16_38_ladder_2;
        _1966 = frontier_phi_16_38_ladder_1;
        _1968 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1952 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1046, _1047, _1048), _1884);
        _1964 = _1952.x * cbModelParam._m0[1u].y;
        _1966 = _1952.y * cbModelParam._m0[1u].y;
        _1968 = _1952.z * cbModelParam._m0[1u].y;
    }
    float _1972 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _880);
    float _1973 = isnan(_1972) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1972 : min(cbModelParam._m0[25u].w, _1972));
    float _2062;
    float _2064;
    float _2066;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2026 = fma(_1107, cbModelParam._m0[21u].z, fma(_1103, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099)) + cbModelParam._m0[21u].w;
        float _2030 = fma(_1107, cbModelParam._m0[22u].z, fma(_1103, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099)) + cbModelParam._m0[22u].w;
        float _2034 = fma(_1107, cbModelParam._m0[23u].z, fma(_1103, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099)) + cbModelParam._m0[23u].w;
        float _2037 = fma(_1048, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046));
        float _2040 = fma(_1048, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046));
        float _2043 = fma(_1048, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046));
        float _2150;
        if (_2037 > 0.0)
        {
            _2150 = abs((1.0 - _2026) / _2037);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2026 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2150 = frontier_phi_28_24_ladder;
        }
        float _2467;
        if (_2040 > 0.0)
        {
            _2467 = abs((1.0 - _2030) / _2040);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2030 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2467 = frontier_phi_40_35_ladder;
        }
        float _2794;
        if (_2043 > 0.0)
        {
            _2794 = abs((1.0 - _2034) / _2043);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2034 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2794 = frontier_phi_50_47_ladder;
        }
        float _2796 = isnan(_2467) ? _2150 : (isnan(_2150) ? _2467 : min(_2150, _2467));
        float _2797 = isnan(_2794) ? _2796 : (isnan(_2796) ? _2794 : min(_2796, _2794));
        float _2801 = (_2797 * _2037) + _2026;
        float _2802 = (_2797 * _2040) + _2030;
        float _2803 = (_2797 * _2043) + _2034;
        float _2804 = _2797 * 9.9999997473787516355514526367188e-05;
        float _2805 = (-1.0) - _2804;
        float _2807 = _2804 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2803 > _2807) || ((_2803 < _2805) || ((_2802 > _2807) || ((_2802 < _2805) || ((_2801 < _2805) || (_2801 > _2807))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2921 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2803, cbModelParam._m0[17u].z, fma(_2802, cbModelParam._m0[17u].y, _2801 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2803, cbModelParam._m0[18u].z, fma(_2802, cbModelParam._m0[18u].y, _2801 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2803, cbModelParam._m0[19u].z, fma(_2802, cbModelParam._m0[19u].y, _2801 * cbModelParam._m0[19u].x))), _1973);
            frontier_phi_25_50_ladder = _2921.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2921.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2921.x * cbModelParam._m0[1u].z;
        }
        _2062 = frontier_phi_25_50_ladder_2;
        _2064 = frontier_phi_25_50_ladder_1;
        _2066 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1046, _1047, _1048), _1973);
        _2062 = _2046.x * cbModelParam._m0[1u].z;
        _2064 = _2046.y * cbModelParam._m0[1u].z;
        _2066 = _2046.z * cbModelParam._m0[1u].z;
    }
    float _2078 = ((((1.0 - _1067) * ((_1054 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1067 * _1054)) * _1038;
    float _2079 = _2078 * ((cbModelParam._m0[1u].w * (_2062 - _1964)) + _1964);
    float _2080 = _2078 * ((cbModelParam._m0[1u].w * (_2064 - _1966)) + _1966);
    float _2081 = _2078 * ((cbModelParam._m0[1u].w * (_2066 - _1968)) + _1968);
    float _2084 = fma(_2081, cbSceneParam._m0[89u].z, fma(_2080, cbSceneParam._m0[89u].y, _2079 * cbSceneParam._m0[89u].x));
    float _2087 = fma(_2081, cbSceneParam._m0[90u].z, fma(_2080, cbSceneParam._m0[90u].y, _2079 * cbSceneParam._m0[90u].x));
    float _2090 = fma(_2081, cbSceneParam._m0[91u].z, fma(_2080, cbSceneParam._m0[91u].y, _2079 * cbSceneParam._m0[91u].x));
    float _2124 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2128 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2132 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2136 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2137 = _2124 / _2136;
    float _2138 = _2128 / _2136;
    float _2139 = _2132 / _2136;
    float _2286;
    float _2287;
    float _2288;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2166 = ((uint(_2139 > cbSceneParam._m0[59u].y) + uint(_2139 > cbSceneParam._m0[59u].x)) + uint(_2139 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2167 = _2166 + 43u;
        uint _2175 = _2166 + 44u;
        uint _2183 = _2166 + 45u;
        uint _2191 = _2166 + 46u;
        float _2202 = fma(_2136, cbSceneParam._m0[_2167].w, fma(_2132, cbSceneParam._m0[_2167].z, fma(_2128, cbSceneParam._m0[_2167].y, _2124 * cbSceneParam._m0[_2167].x)));
        float _2206 = fma(_2136, cbSceneParam._m0[_2175].w, fma(_2132, cbSceneParam._m0[_2175].z, fma(_2128, cbSceneParam._m0[_2175].y, _2124 * cbSceneParam._m0[_2175].x)));
        float _2214 = fma(_2136, cbSceneParam._m0[_2191].w, fma(_2132, cbSceneParam._m0[_2191].z, fma(_2128, cbSceneParam._m0[_2191].y, _2124 * cbSceneParam._m0[_2191].x)));
        float _2219 = cbSceneParam._m0[33u].z * _2214;
        float _2221 = cbSceneParam._m0[33u].w * _2214;
        float _2224 = fma(_2136, cbSceneParam._m0[_2183].w, fma(_2132, cbSceneParam._m0[_2183].z, fma(_2128, cbSceneParam._m0[_2183].y, _2124 * cbSceneParam._m0[_2183].x))) / _2214;
        float _2272 = (cbSceneParam._m0[33u].x - sqrt(((_2138 * _2138) + (_2137 * _2137)) + (_2139 * _2139))) * cbSceneParam._m0[33u].y;
        float _4655 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2279 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2219 + _2202) / _2214, (_2221 + _2206) / _2214), _2224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2221 + _2202) / _2214, (_2206 - _2219) / _2214), _2224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2202 - _2219) / _2214, (_2206 - _2221) / _2214), _2224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2202 - _2221) / _2214, (_2219 + _2206) / _2214), _2224), 0.0)).x), vec4(0.25)));
        _2286 = 1.0 - (_2279 * cbSceneParam._m0[34u].x);
        _2287 = 1.0 - (_2279 * cbSceneParam._m0[34u].y);
        _2288 = 1.0 - (_2279 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2286 = 1.0;
        _2287 = 1.0;
        _2288 = 1.0;
    }
    float _2352;
    float _2354;
    float _2356;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2340 = fma(_2136, cbSceneParam._m0[63u].w, fma(_2132, cbSceneParam._m0[63u].z, fma(_2128, cbSceneParam._m0[63u].y, _2124 * cbSceneParam._m0[63u].x)));
        float _2341 = fma(_2136, cbSceneParam._m0[60u].w, fma(_2132, cbSceneParam._m0[60u].z, fma(_2128, cbSceneParam._m0[60u].y, _2124 * cbSceneParam._m0[60u].x))) / _2340;
        float _2342 = fma(_2136, cbSceneParam._m0[61u].w, fma(_2132, cbSceneParam._m0[61u].z, fma(_2128, cbSceneParam._m0[61u].y, _2124 * cbSceneParam._m0[61u].x))) / _2340;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2341 >= cbSceneParam._m0[64u].x) && (_2342 >= cbSceneParam._m0[64u].y)) && (_2341 <= cbSceneParam._m0[64u].z)) && (_2342 <= cbSceneParam._m0[64u].w))
        {
            float _2480 = fma(_2136, cbSceneParam._m0[62u].w, fma(_2132, cbSceneParam._m0[62u].z, fma(_2128, cbSceneParam._m0[62u].y, _2124 * cbSceneParam._m0[62u].x))) / _2340;
            float _2484 = isnan(cbSceneParam._m0[41u].w) ? _2480 : (isnan(_2480) ? cbSceneParam._m0[41u].w : max(_2480, cbSceneParam._m0[41u].w));
            float _2527 = (cbSceneParam._m0[33u].x - sqrt(((_2138 * _2138) + (_2137 * _2137)) + (_2139 * _2139))) * cbSceneParam._m0[33u].y;
            float _4671 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
            float _2534 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2341, cbSceneParam._m0[33u].w + _2342), _2484), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2341, _2342 - cbSceneParam._m0[33u].z), _2484), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2341 - cbSceneParam._m0[33u].z, _2342 - cbSceneParam._m0[33u].w), _2484), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2341 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2342), _2484), 0.0)).x), vec4(0.25)));
            float _2538 = 1.0 - (_2534 * cbSceneParam._m0[34u].x);
            float _2539 = 1.0 - (_2534 * cbSceneParam._m0[34u].y);
            float _2540 = 1.0 - (_2534 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2540) ? _2288 : (isnan(_2288) ? _2540 : min(_2288, _2540));
            frontier_phi_37_36_ladder_1 = isnan(_2539) ? _2287 : (isnan(_2287) ? _2539 : min(_2287, _2539));
            frontier_phi_37_36_ladder_2 = isnan(_2538) ? _2286 : (isnan(_2286) ? _2538 : min(_2286, _2538));
        }
        else
        {
            frontier_phi_37_36_ladder = _2288;
            frontier_phi_37_36_ladder_1 = _2287;
            frontier_phi_37_36_ladder_2 = _2286;
        }
        _2352 = frontier_phi_37_36_ladder_2;
        _2354 = frontier_phi_37_36_ladder_1;
        _2356 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2352 = _2286;
        _2354 = _2287;
        _2356 = _2288;
    }
    uvec4 _2361 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2363 = _2361.x * 14u;
    uint _2364 = _2363 + 13u;
    float _2371 = _1038 + (-1.0);
    float _2376 = (cbLight._m0[_2364].x * _2371) + 1.0;
    float _2377 = (cbLight._m0[_2364].y * _2371) + 1.0;
    float _2378 = (cbLight._m0[_2364].z * _2371) + 1.0;
    float _2379 = (cbLight._m0[_2364].w * _2371) + 1.0;
    uint _2380 = _2363 + 5u;
    float _2386 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
    uint _2390 = _2363 + 4u;
    float _2399 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
    uint _2403 = _2363 | 1u;
    float _2414 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_877, _878, _879));
    float _2417 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_877, _878, _879));
    float _4707 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _4718 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2422 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * 0.3183098733425140380859375;
    float _2424 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * 0.3183098733425140380859375;
    float _2431 = ((cbLight._m0[_2380].x * _2386) * _2424) + (((cbLight._m0[_2390].x * _2352) * _2399) * _2422);
    float _2432 = ((_2386 * cbLight._m0[_2380].y) * _2424) + (((cbLight._m0[_2390].y * _2354) * _2399) * _2422);
    float _2433 = ((_2386 * cbLight._m0[_2380].z) * _2424) + (((cbLight._m0[_2390].z * _2356) * _2399) * _2422);
    uvec4 _2437 = floatBitsToUint(cbLight._m0[_2363 + 12u]);
    bool _2439 = _2437.x == 0u;
    float _2541;
    float _2543;
    float _2545;
    if (_2439)
    {
        _2541 = _2431;
        _2543 = _2432;
        _2545 = _2433;
    }
    else
    {
        uint _2549 = _2363 + 6u;
        float _2565 = (dot(vec3(cbLight._m0[_2363 + 2u].xyz), vec3(_877, _878, _879)) * 0.5) + 0.5;
        float _2566 = _2565 * _2565;
        float _4729 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2567 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2568 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        _2541 = (((cbLight._m0[_2549].x * 0.3183098733425140380859375) * _2567) * _2568) + _2431;
        _2543 = (((cbLight._m0[_2549].y * 0.3183098733425140380859375) * _2567) * _2568) + _2432;
        _2545 = (((cbLight._m0[_2549].z * 0.3183098733425140380859375) * _2567) * _2568) + _2433;
    }
    bool _2548 = _2437.y == 0u;
    float _2603;
    float _2605;
    float _2607;
    if (_2548)
    {
        _2603 = _2541;
        _2605 = _2543;
        _2607 = _2545;
    }
    else
    {
        uint _2765 = _2363 + 7u;
        float _2781 = (dot(vec3(cbLight._m0[_2363 + 3u].xyz), vec3(_877, _878, _879)) * 0.5) + 0.5;
        float _2782 = _2781 * _2781;
        float _4745 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2783 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2784 = isnan(1.0) ? _2379 : (isnan(_2379) ? 1.0 : min(_2379, 1.0));
        _2603 = (((cbLight._m0[_2765].x * 0.3183098733425140380859375) * _2783) * _2784) + _2541;
        _2605 = (((cbLight._m0[_2765].y * 0.3183098733425140380859375) * _2783) * _2784) + _2543;
        _2607 = (((cbLight._m0[_2765].z * 0.3183098733425140380859375) * _2783) * _2784) + _2545;
    }
    uint _2610 = _2363 + 8u;
    float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2363].w)) * _880) * 0.949999988079071044921875);
    float _2624 = _2623 * _2623;
    float _2625 = cbLight._m0[_2363].x + _955;
    float _2626 = cbLight._m0[_2363].y + _956;
    float _2627 = cbLight._m0[_2363].z + _957;
    float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
    float _2632 = _2631 * _2625;
    float _2633 = _2631 * _2626;
    float _2634 = _2631 * _2627;
    float _2635 = dot(vec3(_877, _878, _879), vec3(cbLight._m0[_2363].xyz));
    float _4761 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2638 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
    float _4772 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _2639 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
    float _2640 = dot(vec3(_877, _878, _879), vec3(_2632, _2633, _2634));
    float _4783 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2643 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
    float _2644 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_2632, _2633, _2634));
    float _4794 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2648 = _2624 * _2624;
    float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
    float _2663 = (exp2(log2(1.0 - (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2664 = 1.0 - _2624;
    float _2675 = (0.5 / (((_2639 * ((_2638 * _2664) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2639 * _2664) + _2624) * _2638))) * _2638;
    float _4805 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2677 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
    uint _2691 = _2363 + 9u;
    float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _880) * 0.949999988079071044921875);
    float _2703 = _2702 * _2702;
    float _2704 = cbLight._m0[_2403].x + _955;
    float _2705 = cbLight._m0[_2403].y + _956;
    float _2706 = cbLight._m0[_2403].z + _957;
    float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
    float _2711 = _2710 * _2704;
    float _2712 = _2710 * _2705;
    float _2713 = _2710 * _2706;
    float _2714 = dot(vec3(_877, _878, _879), vec3(cbLight._m0[_2403].xyz));
    float _4816 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2717 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
    float _2718 = dot(vec3(_877, _878, _879), vec3(_2711, _2712, _2713));
    float _4827 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2721 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
    float _2722 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2711, _2712, _2713));
    float _4838 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2726 = _2703 * _2703;
    float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
    float _2739 = (exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2740 = 1.0 - _2703;
    float _2750 = (0.5 / (((_2639 * ((_2717 * _2740) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2639 * _2740) + _2703) * _2717))) * _2717;
    float _4849 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
    float _2752 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
    float _2762 = (((_2739 * cbLight._m0[_2691].x) * _2752) * _2386) + ((((cbLight._m0[_2610].x * _2352) * _2663) * _2677) * _2399);
    float _2763 = (((_2739 * cbLight._m0[_2691].y) * _2752) * _2386) + ((((cbLight._m0[_2610].y * _2354) * _2663) * _2677) * _2399);
    float _2764 = (((_2739 * cbLight._m0[_2691].z) * _2752) * _2386) + ((((cbLight._m0[_2610].z * _2356) * _2663) * _2677) * _2399);
    float _2820;
    float _2822;
    float _2824;
    if (_2439)
    {
        _2820 = _2762;
        _2822 = _2763;
        _2824 = _2764;
    }
    else
    {
        uint _2826 = _2363 + 2u;
        uint _2830 = _2363 + 10u;
        float _2844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2826].w)) * _880) * 0.949999988079071044921875);
        float _2845 = _2844 * _2844;
        float _2846 = cbLight._m0[_2826].x + _955;
        float _2847 = cbLight._m0[_2826].y + _956;
        float _2848 = cbLight._m0[_2826].z + _957;
        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
        float _2853 = _2852 * _2846;
        float _2854 = _2852 * _2847;
        float _2855 = _2852 * _2848;
        float _2856 = dot(vec3(_877, _878, _879), vec3(cbLight._m0[_2826].xyz));
        float _4860 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2859 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _2860 = dot(vec3(_877, _878, _879), vec3(_2853, _2854, _2855));
        float _4871 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _2864 = dot(vec3(cbLight._m0[_2826].xyz), vec3(_2853, _2854, _2855));
        float _4882 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2868 = _2845 * _2845;
        float _2872 = ((_2863 * _2863) * (_2868 + (-1.0))) + 1.0;
        float _2881 = (exp2(log2(1.0 - (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2882 = 1.0 - _2845;
        float _2892 = (0.5 / (((_2639 * ((_2859 * _2882) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2639 * _2882) + _2845) * _2859))) * _2859;
        float _4893 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2894 = (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2868 / ((_2872 * _2872) * 3.141590118408203125));
        float _2895 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        _2820 = (((_2881 * cbLight._m0[_2830].x) * _2894) * _2895) + _2762;
        _2822 = (((_2881 * cbLight._m0[_2830].y) * _2894) * _2895) + _2763;
        _2824 = (((_2881 * cbLight._m0[_2830].z) * _2894) * _2895) + _2764;
    }
    float _2926;
    float _2928;
    float _2930;
    if (_2548)
    {
        _2926 = _2820;
        _2928 = _2822;
        _2930 = _2824;
    }
    else
    {
        uint _2937 = _2363 + 3u;
        uint _2941 = _2363 + 11u;
        float _2955 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2937].w)) * _880) * 0.949999988079071044921875);
        float _2956 = _2955 * _2955;
        float _2957 = cbLight._m0[_2937].x + _955;
        float _2958 = cbLight._m0[_2937].y + _956;
        float _2959 = cbLight._m0[_2937].z + _957;
        float _2963 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
        float _2964 = _2963 * _2957;
        float _2965 = _2963 * _2958;
        float _2966 = _2963 * _2959;
        float _2967 = dot(vec3(_877, _878, _879), vec3(cbLight._m0[_2937].xyz));
        float _4909 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2970 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
        float _2971 = dot(vec3(_877, _878, _879), vec3(_2964, _2965, _2966));
        float _4920 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2974 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
        float _2975 = dot(vec3(cbLight._m0[_2937].xyz), vec3(_2964, _2965, _2966));
        float _4931 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        float _2979 = _2956 * _2956;
        float _2983 = ((_2974 * _2974) * (_2979 + (-1.0))) + 1.0;
        float _2992 = (exp2(log2(1.0 - (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2993 = 1.0 - _2956;
        float _3003 = (0.5 / (((_2639 * ((_2970 * _2993) + _2956)) + 9.9999999392252902907785028219223e-09) + (((_2639 * _2993) + _2956) * _2970))) * _2970;
        float _4942 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3005 = (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2979 / ((_2983 * _2983) * 3.141590118408203125));
        float _3006 = isnan(1.0) ? _2379 : (isnan(_2379) ? 1.0 : min(_2379, 1.0));
        _2926 = (((_2992 * cbLight._m0[_2941].x) * _3005) * _3006) + _2820;
        _2928 = (((_2992 * cbLight._m0[_2941].y) * _3005) * _3006) + _2822;
        _2930 = (((_2992 * cbLight._m0[_2941].z) * _3005) * _3006) + _2824;
    }
    float _3072;
    float _3074;
    float _3076;
    float _3078;
    float _3080;
    float _3082;
    if (_2361.y == 0u)
    {
        uvec4 _3027 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3028 = _3027.x;
        uint _3039 = uint((float(_3027.y) * floor(float(uint(cbSceneParam._m0[85u].y * _976) / _3028))) + floor(float(uint(cbSceneParam._m0[85u].x * _975) / _3028)));
        float _3049 = (log2(_2139 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3050 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
        uint _3053 = uint(isnan(14.0) ? _3050 : (isnan(_3050) ? 14.0 : min(_3050, 14.0)));
        uvec4 _3058 = texelFetch(g_lightClusterGridBuffer, int(((_3053 << 2u) + (_3039 << 6u)) >> 2u));
        uint _3059 = _3058.x;
        uint _3060 = _3027.z;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        if (((((1u << ((_3060 >> 4u) & 15u)) + 4294967295u) & _3059) == 0u) || ((_3060 & 240u) == 0u))
        {
            _3139 = 0.0;
            _3141 = 0.0;
            _3143 = 0.0;
            _3145 = 0.0;
            _3147 = 0.0;
            _3149 = 0.0;
        }
        else
        {
            float _3140;
            float _3142;
            float _3144;
            float _3146;
            float _3148;
            float _3150;
            float _3292 = 0.0;
            float _3293 = 0.0;
            float _3294 = 0.0;
            float _3295 = 0.0;
            float _3296 = 0.0;
            float _3297 = 0.0;
            uint _3298 = 0u;
            uint _3307;
            bool _3308;
            for (;;)
            {
                _3307 = texelFetch(g_lightClassification, int((((_3053 << 5u) + (_3039 << 9u)) + (_3298 << 2u)) >> 2u)).x;
                _3308 = _3307 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3308)
                {
                    frontier_phi_71_pred = _3297;
                    frontier_phi_71_pred_1 = _3296;
                    frontier_phi_71_pred_2 = _3295;
                    frontier_phi_71_pred_3 = _3294;
                    frontier_phi_71_pred_4 = _3293;
                    frontier_phi_71_pred_5 = _3292;
                }
                else
                {
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    float _3442;
                    uint _3443;
                    _3437 = _3292;
                    _3438 = _3293;
                    _3439 = _3294;
                    _3440 = _3295;
                    _3441 = _3296;
                    _3442 = _3297;
                    _3443 = _3307;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    for (;;)
                    {
                        uint _3447 = uint(findLSB(_3443)) + (_3298 << 5u);
                        uint _3444 = (_3443 + 4294967295u) & _3443;
                        uint _3449 = _3447 * 48u;
                        vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3449)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 3u)).x));
                        uint _3469 = (_3447 * 48u) + 4u;
                        vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 3u)).x));
                        uint _3488 = (_3447 * 48u) + 8u;
                        vec3 _3499 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3488)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 2u)).x));
                        float _3503 = _3463.x - _2137;
                        float _3504 = _3463.y - _2138;
                        float _3505 = _3463.z - _2139;
                        float _3506 = dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505));
                        float _3509 = inversesqrt(_3506);
                        float _3510 = _3509 * _3503;
                        float _3511 = _3509 * _3504;
                        float _3512 = _3509 * _3505;
                        float _3513 = dot(vec3(_994, _997, _1000), vec3(_3510, _3511, _3512));
                        float _3518 = 1.0 - (_3506 * _3463.w);
                        float _4968 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3519 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                        float _3520 = sqrt(_3506) * _3482.w;
                        float _3523 = 1.39999997615814208984375 / (_3520 + 1.39999997615814208984375);
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3513) + _3524;
                        float _3530 = _3520 * _3520;
                        float _3534 = ((isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0))) * _3519) / ((_3530 * 0.699999988079071044921875) + 1.0);
                        float _3538 = (-0.0) - _2137;
                        float _3539 = (-0.0) - _2138;
                        float _3540 = (-0.0) - _2139;
                        float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                        float _3545 = _3544 * _3538;
                        float _3546 = _3544 * _3539;
                        float _3547 = _3544 * _3540;
                        float _3554 = exp2(log2(1.0 / ((_3530 * 3.5) + 5.0)) * 0.25);
                        float _3555 = 1.0 - _1054;
                        float _3562 = sqrt(1.0 - ((1.0 - (_3555 * _3555)) * (1.0 - (_3554 * _3554))));
                        float _3563 = _3562 * _3562;
                        float _3564 = _3563 * _3563;
                        float _3565 = _3545 + _3510;
                        float _3566 = _3546 + _3511;
                        float _3567 = _3547 + _3512;
                        float _3571 = inversesqrt(dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567)));
                        float _3575 = dot(vec3(_994, _997, _1000), vec3(_3545, _3546, _3547));
                        float _4984 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3578 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                        float _3579 = dot(vec3(_994, _997, _1000), vec3(_3571 * _3565, _3571 * _3566, _3571 * _3567));
                        float _4995 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                        float _3582 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                        float _3586 = ((_3582 * _3582) * (_3564 + (-1.0))) + 1.0;
                        float _3587 = _3523 * _3563;
                        float _3588 = _3587 * _3587;
                        float _3591 = ((1.0 - _3588) * _3513) + _3588;
                        float _5006 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3592 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                        float _3593 = 1.0 - _3563;
                        float _3603 = (0.5 / (((_3592 * ((_3578 * _3593) + _3563)) + 9.9999999392252902907785028219223e-09) + (((_3592 * _3593) + _3563) * _3578))) * _3592;
                        float _5017 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                        float _3614 = (((_3564 * 3.1415927410125732421875) * (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0)))) / ((_3586 * _3586) * ((_3530 * 2.1991131305694580078125) + 3.141590118408203125))) * _3519;
                        _3367 = (_3534 * _3482.x) + _3440;
                        _3368 = (_3534 * _3482.y) + _3441;
                        _3369 = (_3534 * _3482.z) + _3442;
                        _3364 = (_3614 * _3499.x) + _3437;
                        _3365 = (_3614 * _3499.y) + _3438;
                        _3366 = (_3614 * _3499.z) + _3439;
                        if (_3444 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3437 = _3364;
                            _3438 = _3365;
                            _3439 = _3366;
                            _3440 = _3367;
                            _3441 = _3368;
                            _3442 = _3369;
                            _3443 = _3444;
                        }
                    }
                    frontier_phi_71_pred = _3369;
                    frontier_phi_71_pred_1 = _3368;
                    frontier_phi_71_pred_2 = _3367;
                    frontier_phi_71_pred_3 = _3366;
                    frontier_phi_71_pred_4 = _3365;
                    frontier_phi_71_pred_5 = _3364;
                }
                _3150 = frontier_phi_71_pred;
                _3148 = frontier_phi_71_pred_1;
                _3146 = frontier_phi_71_pred_2;
                _3144 = frontier_phi_71_pred_3;
                _3142 = frontier_phi_71_pred_4;
                _3140 = frontier_phi_71_pred_5;
                uint _3299 = _3298 + 1u;
                if (_3299 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3292 = _3140;
                    _3293 = _3142;
                    _3294 = _3144;
                    _3295 = _3146;
                    _3296 = _3148;
                    _3297 = _3150;
                    _3298 = _3299;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3139 = _3140;
            _3141 = _3142;
            _3143 = _3144;
            _3145 = _3146;
            _3147 = _3148;
            _3149 = _3150;
        }
        uvec4 _3153 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3154 = _3153.z;
        uint _3156 = (_3154 >> 8u) & 15u;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        float _3268;
        float _3270;
        if (((4294967295u << _3156) & _3059) == 0u)
        {
            _3260 = _3139;
            _3262 = _3141;
            _3264 = _3143;
            _3266 = _3145;
            _3268 = _3147;
            _3270 = _3149;
        }
        else
        {
            float _3285 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
            float _3286 = _3285 * _2137;
            float _3287 = _3285 * _2138;
            float _3288 = _3285 * _2139;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3156 < ((_3154 >> 12u) & 15u))
            {
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3269;
                float _3271;
                float _3420 = _3139;
                float _3421 = _3141;
                float _3422 = _3143;
                float _3423 = _3145;
                float _3424 = _3147;
                float _3425 = _3149;
                uint _3426 = _3156;
                uint _3435;
                bool _3436;
                for (;;)
                {
                    _3435 = texelFetch(g_lightClassification, int((((_3053 << 5u) + (_3039 << 9u)) + (_3426 << 2u)) >> 2u)).x;
                    _3436 = _3435 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3436)
                    {
                        frontier_phi_82_pred = _3425;
                        frontier_phi_82_pred_1 = _3424;
                        frontier_phi_82_pred_2 = _3423;
                        frontier_phi_82_pred_3 = _3422;
                        frontier_phi_82_pred_4 = _3421;
                        frontier_phi_82_pred_5 = _3420;
                    }
                    else
                    {
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3641 = _3420;
                        float _3642 = _3421;
                        float _3643 = _3422;
                        float _3644 = _3423;
                        float _3645 = _3424;
                        float _3646 = _3425;
                        uint _3647 = _3435;
                        uint _3648;
                        vec4 _3673;
                        float _3674;
                        vec4 _3689;
                        vec3 _3701;
                        vec4 _3716;
                        vec4 _3731;
                        float _3777;
                        bool _3778;
                        for (;;)
                        {
                            uint _3658 = ((_3426 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3647));
                            _3648 = (_3647 + 4294967295u) & _3647;
                            uint _3660 = _3658 * 40u;
                            _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            _3674 = _3673.w;
                            uint _3676 = (_3658 * 40u) + 4u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3691 = (_3658 * 40u) + 8u;
                            _3701 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x));
                            uint _3703 = (_3658 * 40u) + 16u;
                            _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            uint _3718 = (_3658 * 40u) + 20u;
                            _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            uint _3733 = (_3658 * 40u) + 24u;
                            vec4 _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            uint _3752 = (_3658 * 40u) + 28u;
                            vec4 _3765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 3u)).x));
                            _3777 = fma(_2139, _3765.z, fma(_2138, _3765.y, _3765.x * _2137)) + _3765.w;
                            _3778 = !((fma(_2139, _3746.z, fma(_2138, _3746.y, _3746.x * _2137)) + _3746.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3778)
                            {
                                float _3805 = _3673.x - _2137;
                                float _3806 = _3673.y - _2138;
                                float _3807 = _3673.z - _2139;
                                float _3808 = dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807));
                                float _3811 = inversesqrt(_3808);
                                float _3812 = _3811 * _3805;
                                float _3813 = _3811 * _3806;
                                float _3814 = _3811 * _3807;
                                float _3818 = 1.0 - (_3808 / (_3674 * _3674));
                                float _5028 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3819 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3823 = sqrt(_3808) * _3689.w;
                                float _3825 = 1.39999997615814208984375 / (_3823 + 1.39999997615814208984375);
                                float _3826 = _3825 * _3825;
                                float _3829 = ((1.0 - _3826) * dot(vec3(_3812, _3813, _3814), vec3(_994, _997, _1000))) + _3826;
                                float _3832 = _3823 * _3823;
                                float _3836 = (fma(_2139, _3716.z, fma(_2138, _3716.y, _3716.x * _2137)) + _3716.w) / _3777;
                                float _3837 = (fma(_2139, _3731.z, fma(_2138, _3731.y, _3731.x * _2137)) + _3731.w) / _3777;
                                float _3841 = 1.0 - dot(vec2(_3836, _3837), vec2(_3836, _3837));
                                float _5044 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3842 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3843 = _3842 * (((isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0))) * _3819) / ((_3832 * 0.699999988079071044921875) + 1.0));
                                float _3855 = exp2(log2(1.0 / ((_3832 * 3.5) + 5.0)) * 0.25);
                                float _3856 = 1.0 - _1054;
                                float _3863 = sqrt(1.0 - ((1.0 - (_3856 * _3856)) * (1.0 - (_3855 * _3855))));
                                float _3864 = _3863 * _3863;
                                float _3865 = _3864 * _3864;
                                float _3866 = _3812 - _3286;
                                float _3867 = _3813 - _3287;
                                float _3868 = _3814 - _3288;
                                float _3872 = inversesqrt(dot(vec3(_3866, _3867, _3868), vec3(_3866, _3867, _3868)));
                                float _3876 = dot(vec3(_994, _997, _1000), vec3((-0.0) - _3286, (-0.0) - _3287, (-0.0) - _3288));
                                float _5055 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3879 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                                float _3880 = dot(vec3(_994, _997, _1000), vec3(_3872 * _3866, _3872 * _3867, _3872 * _3868));
                                float _5066 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3883 = isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0));
                                float _3887 = ((_3883 * _3883) * (_3865 + (-1.0))) + 1.0;
                                float _3888 = _3825 * _3864;
                                float _3889 = _3888 * _3888;
                                float _3895 = ((1.0 - _3889) * dot(vec3(_994, _997, _1000), vec3(_3812, _3813, _3814))) + _3889;
                                float _5077 = isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0));
                                float _3896 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
                                float _3897 = 1.0 - _3864;
                                float _3907 = (0.5 / (((_3896 * ((_3879 * _3897) + _3864)) + 9.9999999392252902907785028219223e-09) + (((_3896 * _3897) + _3864) * _3879))) * _3896;
                                float _5088 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3917 = (_3842 * _3819) * (((_3865 * 3.1415927410125732421875) * (isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0)))) / ((_3887 * _3887) * ((_3832 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3843 * _3689.z;
                                frontier_phi_88_pred_1 = _3843 * _3689.y;
                                frontier_phi_88_pred_2 = _3843 * _3689.x;
                                frontier_phi_88_pred_3 = _3917 * _3701.z;
                                frontier_phi_88_pred_4 = _3917 * _3701.y;
                                frontier_phi_88_pred_5 = _3917 * _3701.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3926 = frontier_phi_88_pred;
                            _3925 = frontier_phi_88_pred_1;
                            _3924 = frontier_phi_88_pred_2;
                            _3923 = frontier_phi_88_pred_3;
                            _3922 = frontier_phi_88_pred_4;
                            _3921 = frontier_phi_88_pred_5;
                            _3631 = _3924 + _3644;
                            _3632 = _3925 + _3645;
                            _3633 = _3926 + _3646;
                            _3628 = _3921 + _3641;
                            _3629 = _3922 + _3642;
                            _3630 = _3923 + _3643;
                            if (_3648 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3633;
                                _3647 = _3648;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3633;
                        frontier_phi_82_pred_1 = _3632;
                        frontier_phi_82_pred_2 = _3631;
                        frontier_phi_82_pred_3 = _3630;
                        frontier_phi_82_pred_4 = _3629;
                        frontier_phi_82_pred_5 = _3628;
                    }
                    _3271 = frontier_phi_82_pred;
                    _3269 = frontier_phi_82_pred_1;
                    _3267 = frontier_phi_82_pred_2;
                    _3265 = frontier_phi_82_pred_3;
                    _3263 = frontier_phi_82_pred_4;
                    _3261 = frontier_phi_82_pred_5;
                    uint _3427 = _3426 + 1u;
                    if (_3427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3420 = _3261;
                        _3421 = _3263;
                        _3422 = _3265;
                        _3423 = _3267;
                        _3424 = _3269;
                        _3425 = _3271;
                        _3426 = _3427;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3267;
                frontier_phi_63_64_ladder_1 = _3271;
                frontier_phi_63_64_ladder_2 = _3269;
                frontier_phi_63_64_ladder_3 = _3265;
                frontier_phi_63_64_ladder_4 = _3263;
                frontier_phi_63_64_ladder_5 = _3261;
            }
            else
            {
                frontier_phi_63_64_ladder = _3145;
                frontier_phi_63_64_ladder_1 = _3149;
                frontier_phi_63_64_ladder_2 = _3147;
                frontier_phi_63_64_ladder_3 = _3143;
                frontier_phi_63_64_ladder_4 = _3141;
                frontier_phi_63_64_ladder_5 = _3139;
            }
            _3260 = frontier_phi_63_64_ladder_5;
            _3262 = frontier_phi_63_64_ladder_4;
            _3264 = frontier_phi_63_64_ladder_3;
            _3266 = frontier_phi_63_64_ladder;
            _3268 = frontier_phi_63_64_ladder_2;
            _3270 = frontier_phi_63_64_ladder_1;
        }
        float _3275 = isnan(1.0) ? _1038 : (isnan(_1038) ? 1.0 : min(_1038, 1.0));
        _3072 = (_3275 * _3266) + _2603;
        _3074 = (_3275 * _3268) + _2605;
        _3076 = (_3275 * _3270) + _2607;
        _3078 = ((_3260 * 0.039999999105930328369140625) * _3275) + _2926;
        _3080 = ((_3262 * 0.039999999105930328369140625) * _3275) + _2928;
        _3082 = ((_3264 * 0.039999999105930328369140625) * _3275) + _2930;
    }
    else
    {
        _3072 = _2603;
        _3074 = _2605;
        _3076 = _2607;
        _3078 = _2926;
        _3080 = _2928;
        _3082 = _2930;
    }
    float _5104 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _5115 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _5126 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _3099 = ((isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0))) * (_3072 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1038))) + ((_3078 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1873)) * cbPerFrame._m0[3u].x);
    float _3100 = ((isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0))) * (_3074 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1038))) + ((_3080 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1873)) * cbPerFrame._m0[3u].x);
    float _3101 = ((isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0))) * (_3076 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1038))) + ((_3082 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1873)) * cbPerFrame._m0[3u].x);
    uint _3102 = _263 + 6u;
    float _3110 = _975 / cbSceneParam._m0[86u].x;
    float _3111 = _976 / cbSceneParam._m0[86u].y;
    vec4 _3125 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3110, _3111, (log2((isnan(cbSceneParam._m0[77u].w) ? _898 : (isnan(_898) ? cbSceneParam._m0[77u].w : min(_898, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3127 = _3125.x;
    float _3128 = _3125.y;
    float _3129 = _3125.z;
    float _3130 = _3125.w;
    float _3202;
    float _3204;
    float _3206;
    float _3208;
    if (_898 > cbSceneParam._m0[78u].w)
    {
        float _3164 = isnan(_898) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _898 : min(cbSceneParam._m0[80u].w, _898));
        float _3165 = _3164 / _898;
        float _3176 = _3165 * _948;
        float _3177 = _949 * _3165;
        float _3178 = (-0.0) - _3177;
        float _3180 = _3165 * _950;
        float _3182 = (cbSceneParam._m0[77u].w * _3178) / _3164;
        float _3183 = _3182 + cbSceneParam._m0[79u].w;
        float _3184 = cbSceneParam._m0[79u].w - _3177;
        float _3190 = sqrt(((_3176 * _3176) + (_3177 * _3177)) + (_3180 * _3180));
        float _3193 = (1.0 - (cbSceneParam._m0[77u].w / _3164)) * _3190;
        float _3198 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3200 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3377;
        if (abs((_3178 - _3182) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3377 = ((((_3183 > 0.0) ? exp2(_3198 * _3183) : (2.0 - exp2(_3200 * _3183))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3193;
        }
        else
        {
            float _3321 = 1.0 / cbSceneParam._m0[80u].x;
            float _3322 = isnan(_3184) ? _3183 : (isnan(_3183) ? _3184 : max(_3183, _3184));
            float _3323 = isnan(_3184) ? _3183 : (isnan(_3183) ? _3184 : min(_3183, _3184));
            float _3332 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : min(_3322, 0.0));
            float _3333 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : min(_3323, 0.0));
            _3377 = ((abs(_3190 / _3178) * cbSceneParam._m0[80u].y) * ((((_3332 - _3333) * 2.0) - ((exp2(_3198 * (isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0)))) - exp2(_3198 * (isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))))) * _3321)) - ((exp2(_3200 * _3332) - exp2(_3200 * _3333)) * _3321))) + (_3193 * cbSceneParam._m0[80u].z);
        }
        vec4 _3379 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3110, _3111, 1.0), 0.0);
        float _3388 = exp2((_3377 * (-1.44269502162933349609375)) * (1.0 - _3379.w));
        float _3389 = log2(_3388);
        float _3405 = log2(_3130);
        _3202 = (exp2(_3405 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3389 * cbSceneParam._m0[78u].x)) * _3379.x) / cbSceneParam._m0[78u].x)) + _3127;
        _3204 = (exp2(_3405 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3389 * cbSceneParam._m0[78u].y)) * _3379.y) / cbSceneParam._m0[78u].y)) + _3128;
        _3206 = (exp2(_3405 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3389 * cbSceneParam._m0[78u].z)) * _3379.z) / cbSceneParam._m0[78u].z)) + _3129;
        _3208 = _3388 * _3130;
    }
    else
    {
        _3202 = _3127;
        _3204 = _3128;
        _3206 = _3129;
        _3208 = _3130;
    }
    bool _3415;
    vec4 _3218;
    vec4 _3240;
    float _3242;
    float _3246;
    float _3247;
    float _3248;
    float _3249;
    bool _3259;
    for (;;)
    {
        _3218 = cbMatDynParam._m0[0u];
        float _3220 = roundEven(_3218.y);
        bool _3221 = _3220 == 3.0;
        float _3222 = log2(_3208);
        float _3229 = exp2(_3222 * cbSceneParam._m0[78u].x) * _3099;
        float _3230 = exp2(_3222 * cbSceneParam._m0[78u].y) * _3100;
        float _3231 = exp2(_3222 * cbSceneParam._m0[78u].z) * _3101;
        float _3238 = _964 + (-0.5);
        _3240 = cbMtdParam._m0[1u];
        _3242 = _3240.y * _3238;
        float _3245 = (_3220 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3246 = _3245 * (_3221 ? _3229 : (_3229 + (cbSceneParam._m0[72u].w * _3202)));
        _3247 = _3245 * (_3221 ? _3230 : (_3230 + (cbSceneParam._m0[72u].w * _3204)));
        _3248 = _3245 * (_3221 ? _3231 : (_3231 + (cbSceneParam._m0[72u].w * _3206)));
        _3249 = _3238 * 0.999000012874603271484375;
        _3259 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3259)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3249) < 0.5)
            {
                _3415 = true;
                break;
            }
        }
        uint _3356 = _1013 + uint(_3218.w);
        if ((cbInstanceData._m0[_3356].w < 1.0) && ((cbInstanceData._m0[_3356].w + _3249) < 0.5))
        {
            _3415 = true;
            break;
        }
        if ((_3242 + 1.0) < _3240.x)
        {
            _3415 = true;
            break;
        }
        _3415 = false;
        break;
    }
    float _3619;
    if (_3415)
    {
        discard_state = true;
        _3619 = 0.0;
    }
    else
    {
        _3619 = cbInstanceData._m0[_3102].w;
    }
    SV_Target.x = _3246;
    SV_Target.y = _3247;
    SV_Target.z = _3248;
    SV_Target.w = _3619;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3102].w;
    discard_exit();
}


