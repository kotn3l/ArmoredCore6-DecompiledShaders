#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1302;
float _3685;
float _3686;
float _3687;
float _3688;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _354.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[24u].z) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3697 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _433 = (_426 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _434 = (_426 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _435 = (_426 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _452 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _354.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[24u].z) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3708 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _506 = (_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433;
    float _507 = (_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434;
    float _508 = (_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435;
    vec4 _526 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _264) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _265) + cbTextureTilingScale._m0[24u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _545 = _543.x;
    float _555 = dot(vec4(_545, _543.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _567 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _354.z) * 2.0) - ((((_545 - _555) * cbMtdParam._m0[24u].z) + _555) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3719 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _581 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_568 * ((_526.x * cbMtdParam._m0[14u].x) - _506)) + _506);
    float _584 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_568 * ((_526.y * cbMtdParam._m0[14u].y) - _507)) + _507);
    float _587 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_568 * ((_526.z * cbMtdParam._m0[14u].z) - _508)) + _508);
    vec4 _600 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = _617.x;
    float _620 = _617.y;
    float _621 = _617.z;
    float _628 = ((_600.x - _619) * _426) + _619;
    float _629 = ((_600.y - _620) * _426) + _620;
    float _630 = ((_600.z - _621) * _426) + _621;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _653 = ((_642.x - _628) * _499) + _628;
    float _654 = ((_642.y - _629) * _499) + _629;
    float _655 = ((_642.z - _630) * _499) + _630;
    vec4 _667 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _264) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _265) + cbTextureTilingScale._m0[23u].w));
    float _680 = ((_667.z - _655) * _568) + _655;
    float _683 = ((((_667.x - _653) * _568) + _653) * 2.0) + (-1.0);
    float _685 = ((((_667.y - _654) * _568) + _654) * 2.0) + (-1.0);
    float _686 = dot(vec2(_683, _685), vec2(_683, _685));
    float _3730 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _691 = sqrt(1.0 - (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _717 = (((_705.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _683;
    float _718 = (((_705.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _685;
    float _722 = (cbMtdParam._m0[19u].w * (_705.z - _680)) + _680;
    float _726 = cbMtdParam._m0[22u].x + _705.w;
    float _729 = fma(_691, _231 * NORMAL.x, fma(_718, _238 * TANGENT.x, (_224 * _216) * _717));
    float _732 = fma(_691, _231 * NORMAL.y, fma(_718, _238 * TANGENT.y, (_224 * _217) * _717));
    float _735 = fma(_691, _231 * NORMAL.z, fma(_718, _238 * TANGENT.z, (_224 * _218) * _717));
    float _739 = inversesqrt(dot(vec3(_729, _732, _735), vec3(_729, _732, _735)));
    float _740 = _739 * _729;
    float _741 = _739 * _732;
    float _742 = _739 * _735;
    float _3741 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _743 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _3763 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3774 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _3785 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _761 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _812 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _802);
    float _813 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _802);
    float _814 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _802);
    float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
    float _819 = _812 * _818;
    float _820 = _813 * _818;
    float _821 = _814 * _818;
    vec4 _826 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _828 = _826.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _982 = sqrt(((_812 * _812) + (_813 * _813)) + (_814 * _814));
        float _988 = (cbMatDynParam._m0[5u].x * _982) + cbMatDynParam._m0[5u].y;
        float _3796 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _993 = (cbMatDynParam._m0[5u].z * _982) + cbMatDynParam._m0[5u].w;
        float _3807 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) - _989)) + _989) < ((_828 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _839 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _840 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _858 = fma(_742, cbSceneParam._m0[5u].z, fma(_741, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _740));
    float _861 = fma(_742, cbSceneParam._m0[6u].z, fma(_741, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _740));
    float _864 = fma(_742, cbSceneParam._m0[7u].z, fma(_741, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _740));
    uint _877 = _244 + 9u;
    uint _878 = _877 + uint(cbMatDynParam._m0[0u].w);
    float _884 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_878].x;
    float _885 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_878].y;
    float _886 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_878].z;
    float _3818 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    vec4 _898 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _839, cbSceneParam._m0[86u].y * _840));
    float _902 = ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * TEXCOORD_5.w) * _898.x;
    float _903 = dot(vec3(_740, _741, _742), vec3(_819, _820, _821));
    float _906 = _903 * 2.0;
    float _910 = (_906 * _740) - _819;
    float _911 = (_906 * _741) - _820;
    float _912 = (_906 * _742) - _821;
    float _916 = abs(dot(vec3(_819, _820, _821), vec3(_740, _741, _742)));
    float _3851 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _918 = sqrt(_743);
    float _931 = exp2((_918 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_918 * 3.0));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1301;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1026 = fma(_971, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963));
        float _1030 = fma(_971, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963));
        float _1034 = fma(_971, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963));
        float _1059 = _963 + _740;
        float _1060 = _967 + _741;
        float _1061 = _971 + _742;
        float _1071 = fma(_1061, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059)) - _1026;
        float _1072 = fma(_1061, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059)) - _1030;
        float _1073 = fma(_1061, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059)) - _1034;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1026 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1030 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[34u].z) + ((((((_1034 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1129 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1095.x + (-0.5));
        float _1131 = _1129 * (_1095.y + (-0.5));
        float _1132 = _1129 * (_1095.z + (-0.5));
        float _1139 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1102.x + (-0.5));
        float _1141 = _1139 * (_1102.y + (-0.5));
        float _1142 = _1139 * (_1102.z + (-0.5));
        float _1149 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1109.x + (-0.5));
        float _1151 = _1149 * (_1109.y + (-0.5));
        float _1152 = _1149 * (_1109.z + (-0.5));
        float _1159 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1116.x + (-0.5));
        float _1161 = _1159 * (_1116.y + (-0.5));
        float _1162 = _1159 * (_1116.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1183 = (dot(vec3(_740, _741, _742), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1193 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3899 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1195 + 1.0))) + _1200) * _1163;
        float _1210 = _1131 * 0.5;
        float _1211 = _1141 * 0.5;
        float _1212 = _1151 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_740, _741, _742), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3932 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1237 + 1.0))) + _1242) * _1164;
        float _1252 = _1132 * 0.5;
        float _1253 = _1142 * 0.5;
        float _1254 = _1152 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_740, _741, _742), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3965 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1279 + 1.0))) + _1284) * _1165;
        _1301 = _1132;
        _1303 = _1131;
        _1304 = _1130;
        _1305 = _1142;
        _1306 = _1141;
        _1307 = _1140;
        _1308 = _1152;
        _1309 = _1151;
        _1310 = _1150;
        _1311 = _1165;
        _1312 = _1164;
        _1313 = _1163;
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
    }
    else
    {
        _1301 = _1302;
        _1303 = _1302;
        _1304 = _1302;
        _1305 = _1302;
        _1306 = _1302;
        _1307 = _1302;
        _1308 = _1302;
        _1309 = _1302;
        _1310 = _1302;
        _1311 = _1302;
        _1312 = _1302;
        _1313 = _1302;
        _1314 = 0.0;
        _1315 = 0.0;
        _1316 = 0.0;
    }
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1342 = fma(_971, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963));
        float _1346 = fma(_971, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963));
        float _1350 = fma(_971, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963));
        float _1373 = _963 + _740;
        float _1374 = _967 + _741;
        float _1375 = _971 + _742;
        float _1385 = fma(_1375, cbModelParam._m0[30u].z, fma(_1374, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1373)) - _1342;
        float _1386 = fma(_1375, cbModelParam._m0[31u].z, fma(_1374, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1373)) - _1346;
        float _1387 = fma(_1375, cbModelParam._m0[32u].z, fma(_1374, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1373)) - _1350;
        float _1391 = inversesqrt(dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387)));
        float _1404 = ((_1391 * _1385) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1342 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1391 * _1386) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1346 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1391 * _1387) / cbModelParam._m0[35u].z) + ((((((_1350 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1441 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1408.x + (-0.5));
        float _1443 = _1441 * (_1408.y + (-0.5));
        float _1444 = _1441 * (_1408.z + (-0.5));
        float _1451 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1415.x + (-0.5));
        float _1453 = _1451 * (_1415.y + (-0.5));
        float _1454 = _1451 * (_1415.z + (-0.5));
        float _1461 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1422.x + (-0.5));
        float _1463 = _1461 * (_1422.y + (-0.5));
        float _1464 = _1461 * (_1422.z + (-0.5));
        float _1471 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1429.x + (-0.5));
        float _1473 = _1471 * (_1429.y + (-0.5));
        float _1474 = _1471 * (_1429.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_740, _741, _742), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4028 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1505 + 1.0))) + _1510) * _1475;
        float _1520 = _1443 * 0.5;
        float _1521 = _1453 * 0.5;
        float _1522 = _1463 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_740, _741, _742), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4061 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1547 + 1.0))) + _1552) * _1476;
        float _1562 = _1444 * 0.5;
        float _1563 = _1454 * 0.5;
        float _1564 = _1464 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_740, _741, _742), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4094 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1589 + 1.0))) + _1594) * _1477;
        _1611 = _1444;
        _1612 = _1443;
        _1613 = _1442;
        _1614 = _1454;
        _1615 = _1453;
        _1616 = _1452;
        _1617 = _1464;
        _1618 = _1463;
        _1619 = _1462;
        _1620 = _1477;
        _1621 = _1476;
        _1622 = _1475;
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
    }
    else
    {
        _1611 = _1302;
        _1612 = _1302;
        _1613 = _1302;
        _1614 = _1302;
        _1615 = _1302;
        _1616 = _1302;
        _1617 = _1302;
        _1618 = _1302;
        _1619 = _1302;
        _1620 = _1302;
        _1621 = _1302;
        _1622 = _1302;
        _1623 = 0.0;
        _1624 = 0.0;
        _1625 = 0.0;
    }
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1314)) + _1314;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1315)) + _1315;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1316)) + _1316;
    float _1658 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1635));
    float _1679 = _910 * 0.5;
    float _1680 = _911 * 0.5;
    float _1681 = _912 * 0.5;
    float _1682 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1685 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1688 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1722;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1695 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1301, _1305, _1308, _1311));
        float _1699 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1703 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1710 = dot(vec4(cbModelParam._m0[39u]), vec4(_1679, _1680, _1681, 1.0));
        _1722 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1722 = 1.0;
    }
    float _1733;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1724 = dot(vec4(cbModelParam._m0[40u]), vec4(_1679, _1680, _1681, 1.0));
        _1733 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1733 = 1.0;
    }
    float _1737 = (_1733 * cbModelParam._m0[1u].x) + (_1722 * (1.0 - cbModelParam._m0[1u].x));
    float _1747 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _743);
    float _1748 = isnan(_1747) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1747 : min(cbModelParam._m0[25u].z, _1747));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1796 = fma(_971, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963)) + cbModelParam._m0[13u].w;
        float _1800 = fma(_971, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963)) + cbModelParam._m0[14u].w;
        float _1804 = fma(_971, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963)) + cbModelParam._m0[15u].w;
        float _1807 = fma(_912, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910));
        float _1810 = fma(_912, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910));
        float _1813 = fma(_912, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910));
        float _1841;
        if (_1807 > 0.0)
        {
            _1841 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1841 = frontier_phi_17_15_ladder;
        }
        float _2064;
        if (_1810 > 0.0)
        {
            _2064 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2064 = frontier_phi_26_22_ladder;
        }
        float _2310;
        if (_1813 > 0.0)
        {
            _2310 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2310 = frontier_phi_38_33_ladder;
        }
        float _2312 = isnan(_2064) ? _1841 : (isnan(_1841) ? _2064 : min(_1841, _2064));
        float _2313 = isnan(_2310) ? _2312 : (isnan(_2312) ? _2310 : min(_2312, _2310));
        float _2317 = (_2313 * _1807) + _1796;
        float _2318 = (_2313 * _1810) + _1800;
        float _2319 = (_2313 * _1813) + _1804;
        float _2320 = _2313 * 9.9999997473787516355514526367188e-05;
        float _2322 = (-1.0) - _2320;
        float _2324 = _2320 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2319 > _2324) || ((_2319 < _2322) || ((_2318 > _2324) || ((_2318 < _2322) || ((_2317 < _2322) || (_2317 > _2324))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2319, cbModelParam._m0[9u].z, fma(_2318, cbModelParam._m0[9u].y, _2317 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2319, cbModelParam._m0[10u].z, fma(_2318, cbModelParam._m0[10u].y, _2317 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2319, cbModelParam._m0[11u].z, fma(_2318, cbModelParam._m0[11u].y, _2317 * cbModelParam._m0[11u].x))), _1748);
            frontier_phi_16_38_ladder = _2443.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2443.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2443.x * cbModelParam._m0[1u].y;
        }
        _1829 = frontier_phi_16_38_ladder_2;
        _1831 = frontier_phi_16_38_ladder_1;
        _1833 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_910, _911, _912), _1748);
        _1829 = _1817.x * cbModelParam._m0[1u].y;
        _1831 = _1817.y * cbModelParam._m0[1u].y;
        _1833 = _1817.z * cbModelParam._m0[1u].y;
    }
    float _1837 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _743);
    float _1838 = isnan(_1837) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1837 : min(cbModelParam._m0[25u].w, _1837));
    float _1929;
    float _1931;
    float _1933;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1893 = fma(_971, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963)) + cbModelParam._m0[21u].w;
        float _1897 = fma(_971, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963)) + cbModelParam._m0[22u].w;
        float _1901 = fma(_971, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963)) + cbModelParam._m0[23u].w;
        float _1904 = fma(_912, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910));
        float _1907 = fma(_912, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910));
        float _1910 = fma(_912, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910));
        float _2069;
        if (_1904 > 0.0)
        {
            _2069 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2069 = frontier_phi_28_24_ladder;
        }
        float _2337;
        if (_1907 > 0.0)
        {
            _2337 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2337 = frontier_phi_40_35_ladder;
        }
        float _2542;
        if (_1910 > 0.0)
        {
            _2542 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2542 = frontier_phi_49_46_ladder;
        }
        float _2544 = isnan(_2337) ? _2069 : (isnan(_2069) ? _2337 : min(_2069, _2337));
        float _2545 = isnan(_2542) ? _2544 : (isnan(_2544) ? _2542 : min(_2544, _2542));
        float _2549 = (_2545 * _1904) + _1893;
        float _2550 = (_2545 * _1907) + _1897;
        float _2551 = (_2545 * _1910) + _1901;
        float _2552 = _2545 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2552;
        float _2555 = _2552 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2551 > _2555) || ((_2551 < _2553) || ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 < _2553) || (_2549 > _2555))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2750 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2551, cbModelParam._m0[17u].z, fma(_2550, cbModelParam._m0[17u].y, _2549 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2551, cbModelParam._m0[18u].z, fma(_2550, cbModelParam._m0[18u].y, _2549 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2551, cbModelParam._m0[19u].z, fma(_2550, cbModelParam._m0[19u].y, _2549 * cbModelParam._m0[19u].x))), _1838);
            frontier_phi_25_49_ladder = _2750.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2750.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2750.x * cbModelParam._m0[1u].z;
        }
        _1929 = frontier_phi_25_49_ladder_2;
        _1931 = frontier_phi_25_49_ladder_1;
        _1933 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_910, _911, _912), _1838);
        _1929 = _1913.x * cbModelParam._m0[1u].z;
        _1931 = _1913.y * cbModelParam._m0[1u].z;
        _1933 = _1913.z * cbModelParam._m0[1u].z;
    }
    float _1945 = ((((1.0 - _931) * ((_918 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_931 * _918)) * _902;
    float _1946 = _1945 * ((cbModelParam._m0[1u].w * (_1929 - _1829)) + _1829);
    float _1947 = _1945 * ((cbModelParam._m0[1u].w * (_1931 - _1831)) + _1831);
    float _1948 = _1945 * ((cbModelParam._m0[1u].w * (_1933 - _1833)) + _1833);
    float _1951 = fma(_1948, cbSceneParam._m0[89u].z, fma(_1947, cbSceneParam._m0[89u].y, _1946 * cbSceneParam._m0[89u].x));
    float _1954 = fma(_1948, cbSceneParam._m0[90u].z, fma(_1947, cbSceneParam._m0[90u].y, _1946 * cbSceneParam._m0[90u].x));
    float _1957 = fma(_1948, cbSceneParam._m0[91u].z, fma(_1947, cbSceneParam._m0[91u].y, _1946 * cbSceneParam._m0[91u].x));
    vec4 _1965 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_839, _840));
    float _1967 = _1965.w;
    float _1979 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1967);
    float _1980 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1967);
    float _1981 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1967);
    uvec4 _1985 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _1987 = _1985.x * 14u;
    uint _1988 = _1987 + 13u;
    float _1995 = _902 + (-1.0);
    float _2000 = (cbLight._m0[_1988].x * _1995) + 1.0;
    float _2001 = (cbLight._m0[_1988].y * _1995) + 1.0;
    float _2002 = (cbLight._m0[_1988].z * _1995) + 1.0;
    float _2003 = (cbLight._m0[_1988].w * _1995) + 1.0;
    uint _2004 = _1987 + 5u;
    float _2010 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2014 = _1987 + 4u;
    float _2023 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2027 = _1987 | 1u;
    float _2038 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_740, _741, _742));
    float _2041 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_740, _741, _742));
    float _4230 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _4241 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2046 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * 0.3183098733425140380859375;
    float _2048 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * 0.3183098733425140380859375;
    float _2055 = ((cbLight._m0[_2004].x * _2010) * _2048) + (((cbLight._m0[_2014].x * _1979) * _2023) * _2046);
    float _2056 = ((_2010 * cbLight._m0[_2004].y) * _2048) + (((cbLight._m0[_2014].y * _1980) * _2023) * _2046);
    float _2057 = ((_2010 * cbLight._m0[_2004].z) * _2048) + (((cbLight._m0[_2014].z * _1981) * _2023) * _2046);
    uvec4 _2061 = floatBitsToUint(cbLight._m0[_1987 + 12u]);
    bool _2063 = _2061.x == 0u;
    float _2074;
    float _2076;
    float _2078;
    if (_2063)
    {
        _2074 = _2055;
        _2076 = _2056;
        _2078 = _2057;
    }
    else
    {
        uint _2082 = _1987 + 6u;
        float _2098 = (dot(vec3(cbLight._m0[_1987 + 2u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2099 = _2098 * _2098;
        float _4252 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2100 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2101 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2074 = (((cbLight._m0[_2082].x * 0.3183098733425140380859375) * _2100) * _2101) + _2055;
        _2076 = (((cbLight._m0[_2082].y * 0.3183098733425140380859375) * _2100) * _2101) + _2056;
        _2078 = (((cbLight._m0[_2082].z * 0.3183098733425140380859375) * _2100) * _2101) + _2057;
    }
    bool _2081 = _2061.y == 0u;
    float _2119;
    float _2121;
    float _2123;
    if (_2081)
    {
        _2119 = _2074;
        _2121 = _2076;
        _2123 = _2078;
    }
    else
    {
        uint _2281 = _1987 + 7u;
        float _2297 = (dot(vec3(cbLight._m0[_1987 + 3u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2298 = _2297 * _2297;
        float _4268 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2299 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2300 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2119 = (((cbLight._m0[_2281].x * 0.3183098733425140380859375) * _2299) * _2300) + _2074;
        _2121 = (((cbLight._m0[_2281].y * 0.3183098733425140380859375) * _2299) * _2300) + _2076;
        _2123 = (((cbLight._m0[_2281].z * 0.3183098733425140380859375) * _2299) * _2300) + _2078;
    }
    uint _2126 = _1987 + 8u;
    float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1987].w)) * _743) * 0.949999988079071044921875);
    float _2140 = _2139 * _2139;
    float _2141 = cbLight._m0[_1987].x + _819;
    float _2142 = cbLight._m0[_1987].y + _820;
    float _2143 = cbLight._m0[_1987].z + _821;
    float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
    float _2148 = _2147 * _2141;
    float _2149 = _2147 * _2142;
    float _2150 = _2147 * _2143;
    float _2151 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_1987].xyz));
    float _4284 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _4295 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _2155 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2156 = dot(vec3(_740, _741, _742), vec3(_2148, _2149, _2150));
    float _4306 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2160 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_2148, _2149, _2150));
    float _4317 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2164 = _2140 * _2140;
    float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
    float _2179 = (exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2180 = 1.0 - _2140;
    float _2191 = (0.5 / (((_2155 * ((_2154 * _2180) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_2155 * _2180) + _2140) * _2154))) * _2154;
    float _4328 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
    uint _2207 = _1987 + 9u;
    float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _743) * 0.949999988079071044921875);
    float _2219 = _2218 * _2218;
    float _2220 = cbLight._m0[_2027].x + _819;
    float _2221 = cbLight._m0[_2027].y + _820;
    float _2222 = cbLight._m0[_2027].z + _821;
    float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
    float _2227 = _2226 * _2220;
    float _2228 = _2226 * _2221;
    float _2229 = _2226 * _2222;
    float _2230 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2027].xyz));
    float _4339 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _2234 = dot(vec3(_740, _741, _742), vec3(_2227, _2228, _2229));
    float _4350 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2227, _2228, _2229));
    float _4361 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2219 * _2219;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2255 = (exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2256 = 1.0 - _2219;
    float _2266 = (0.5 / (((_2155 * ((_2233 * _2256) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2155 * _2256) + _2219) * _2233))) * _2233;
    float _4372 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2268 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    float _2278 = (((_2255 * cbLight._m0[_2207].x) * _2268) * _2010) + ((((cbLight._m0[_2126].x * _1979) * _2179) * _2193) * _2023);
    float _2279 = (((_2255 * cbLight._m0[_2207].y) * _2268) * _2010) + ((((cbLight._m0[_2126].y * _1980) * _2179) * _2193) * _2023);
    float _2280 = (((_2255 * cbLight._m0[_2207].z) * _2268) * _2010) + ((((cbLight._m0[_2126].z * _1981) * _2179) * _2193) * _2023);
    float _2342;
    float _2344;
    float _2346;
    if (_2063)
    {
        _2342 = _2278;
        _2344 = _2279;
        _2346 = _2280;
    }
    else
    {
        uint _2348 = _1987 + 2u;
        uint _2352 = _1987 + 10u;
        float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _743) * 0.949999988079071044921875);
        float _2367 = _2366 * _2366;
        float _2368 = cbLight._m0[_2348].x + _819;
        float _2369 = cbLight._m0[_2348].y + _820;
        float _2370 = cbLight._m0[_2348].z + _821;
        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
        float _2375 = _2374 * _2368;
        float _2376 = _2374 * _2369;
        float _2377 = _2374 * _2370;
        float _2378 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2348].xyz));
        float _4383 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2382 = dot(vec3(_740, _741, _742), vec3(_2375, _2376, _2377));
        float _4394 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2386 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2375, _2376, _2377));
        float _4405 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2390 = _2367 * _2367;
        float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
        float _2403 = (exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2404 = 1.0 - _2367;
        float _2414 = (0.5 / (((_2155 * ((_2381 * _2404) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2155 * _2404) + _2367) * _2381))) * _2381;
        float _4416 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2416 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
        float _2417 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2342 = (((_2403 * cbLight._m0[_2352].x) * _2416) * _2417) + _2278;
        _2344 = (((_2403 * cbLight._m0[_2352].y) * _2416) * _2417) + _2279;
        _2346 = (((_2403 * cbLight._m0[_2352].z) * _2416) * _2417) + _2280;
    }
    float _2452;
    float _2454;
    float _2456;
    if (_2081)
    {
        _2452 = _2342;
        _2454 = _2344;
        _2456 = _2346;
    }
    else
    {
        uint _2463 = _1987 + 3u;
        uint _2467 = _1987 + 11u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _743) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _819;
        float _2484 = cbLight._m0[_2463].y + _820;
        float _2485 = cbLight._m0[_2463].z + _821;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2463].xyz));
        float _4432 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2497 = dot(vec3(_740, _741, _742), vec3(_2490, _2491, _2492));
        float _4443 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4454 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2518 = (exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2519 = 1.0 - _2482;
        float _2529 = (0.5 / (((_2155 * ((_2496 * _2519) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2155 * _2519) + _2482) * _2496))) * _2496;
        float _4465 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2452 = (((_2518 * cbLight._m0[_2467].x) * _2531) * _2532) + _2342;
        _2454 = (((_2518 * cbLight._m0[_2467].y) * _2531) * _2532) + _2344;
        _2456 = (((_2518 * cbLight._m0[_2467].z) * _2531) * _2532) + _2346;
    }
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    if (_1985.y == 0u)
    {
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2608 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2607;
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2607;
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2607;
        uvec4 _2622 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2623 = _2622.x;
        uint _2634 = uint((float(_2622.y) * floor(float(uint(cbSceneParam._m0[85u].y * _840) / _2623))) + floor(float(uint(cbSceneParam._m0[85u].x * _839) / _2623)));
        float _2644 = (log2(_2610 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2645 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        uint _2648 = uint(isnan(14.0) ? _2645 : (isnan(_2645) ? 14.0 : min(_2645, 14.0)));
        uvec4 _2653 = texelFetch(g_lightClusterGridBuffer, int(((_2648 << 2u) + (_2634 << 6u)) >> 2u));
        uint _2654 = _2653.x;
        uint _2655 = _2622.z;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((((1u << ((_2655 >> 4u) & 15u)) + 4294967295u) & _2654) == 0u) || ((_2655 & 240u) == 0u))
        {
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
        }
        else
        {
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            uint _2914 = 0u;
            uint _2923;
            bool _2924;
            for (;;)
            {
                _2923 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_2914 << 2u)) >> 2u)).x;
                _2924 = _2923 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2924)
                {
                    frontier_phi_66_pred = _2908;
                    frontier_phi_66_pred_1 = _2913;
                    frontier_phi_66_pred_2 = _2912;
                    frontier_phi_66_pred_3 = _2911;
                    frontier_phi_66_pred_4 = _2910;
                    frontier_phi_66_pred_5 = _2909;
                }
                else
                {
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    uint _3059;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2910;
                    _3056 = _2911;
                    _3057 = _2912;
                    _3058 = _2913;
                    _3059 = _2923;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    for (;;)
                    {
                        uint _3063 = uint(findLSB(_3059)) + (_2914 << 5u);
                        uint _3060 = (_3059 + 4294967295u) & _3059;
                        uint _3065 = _3063 * 48u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3085 = (_3063 * 48u) + 4u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3104 = (_3063 * 48u) + 8u;
                        vec3 _3115 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x));
                        float _3119 = _3079.x - _2608;
                        float _3120 = _3079.y - _2609;
                        float _3121 = _3079.z - _2610;
                        float _3122 = dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121));
                        float _3125 = inversesqrt(_3122);
                        float _3126 = _3125 * _3119;
                        float _3127 = _3125 * _3120;
                        float _3128 = _3125 * _3121;
                        float _3129 = dot(vec3(_858, _861, _864), vec3(_3126, _3127, _3128));
                        float _3134 = 1.0 - (_3122 * _3079.w);
                        float _4491 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3136 = sqrt(_3122) * _3098.w;
                        float _3139 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3129) + _3140;
                        float _3146 = _3136 * _3136;
                        float _3150 = ((isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))) * _3135) / ((_3146 * 0.699999988079071044921875) + 1.0);
                        float _3154 = (-0.0) - _2608;
                        float _3155 = (-0.0) - _2609;
                        float _3156 = (-0.0) - _2610;
                        float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                        float _3161 = _3160 * _3154;
                        float _3162 = _3160 * _3155;
                        float _3163 = _3160 * _3156;
                        float _3171 = exp2(log2(1.0 / ((_3146 * 3.5) + 5.0)) * 0.25);
                        float _3172 = 1.0 - _918;
                        float _3179 = sqrt(1.0 - ((1.0 - (_3172 * _3172)) * (1.0 - (_3171 * _3171))));
                        float _3180 = _3179 * _3179;
                        float _3181 = _3180 * _3180;
                        float _3182 = _3161 + _3126;
                        float _3183 = _3162 + _3127;
                        float _3184 = _3163 + _3128;
                        float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                        float _3192 = dot(vec3(_858, _861, _864), vec3(_3161, _3162, _3163));
                        float _4507 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3195 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3196 = dot(vec3(_858, _861, _864), vec3(_3188 * _3182, _3188 * _3183, _3188 * _3184));
                        float _4518 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3199 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3203 = ((_3199 * _3199) * (_3181 + (-1.0))) + 1.0;
                        float _3204 = _3139 * _3180;
                        float _3205 = _3204 * _3204;
                        float _3208 = ((1.0 - _3205) * _3129) + _3205;
                        float _4529 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3210 = 1.0 - _3180;
                        float _3220 = (0.5 / (((_3209 * ((_3195 * _3210) + _3180)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3180) * _3195))) * _3209;
                        float _4540 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3231 = (((_3181 * 3.1415927410125732421875) * (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) / ((_3203 * _3203) * ((_3146 * 2.1991131305694580078125) + 3.141590118408203125))) * _3135;
                        _2983 = (_3150 * _3098.x) + _3056;
                        _2984 = (_3150 * _3098.y) + _3057;
                        _2985 = (_3150 * _3098.z) + _3058;
                        _2980 = (_3231 * _3115.x) + _3053;
                        _2981 = (_3231 * _3115.y) + _3054;
                        _2982 = (_3231 * _3115.z) + _3055;
                        if (_3060 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _2982;
                            _3056 = _2983;
                            _3057 = _2984;
                            _3058 = _2985;
                            _3059 = _3060;
                        }
                    }
                    frontier_phi_66_pred = _2980;
                    frontier_phi_66_pred_1 = _2985;
                    frontier_phi_66_pred_2 = _2984;
                    frontier_phi_66_pred_3 = _2983;
                    frontier_phi_66_pred_4 = _2982;
                    frontier_phi_66_pred_5 = _2981;
                }
                _2756 = frontier_phi_66_pred;
                _2766 = frontier_phi_66_pred_1;
                _2764 = frontier_phi_66_pred_2;
                _2762 = frontier_phi_66_pred_3;
                _2760 = frontier_phi_66_pred_4;
                _2758 = frontier_phi_66_pred_5;
                uint _2915 = _2914 + 1u;
                if (_2915 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2908 = _2756;
                    _2909 = _2758;
                    _2910 = _2760;
                    _2911 = _2762;
                    _2912 = _2764;
                    _2913 = _2766;
                    _2914 = _2915;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
        }
        uvec4 _2769 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2770 = _2769.z;
        uint _2772 = (_2770 >> 8u) & 15u;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        if (((4294967295u << _2772) & _2654) == 0u)
        {
            _2876 = _2755;
            _2878 = _2757;
            _2880 = _2759;
            _2882 = _2761;
            _2884 = _2763;
            _2886 = _2765;
        }
        else
        {
            float _2901 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
            float _2902 = _2901 * _2608;
            float _2903 = _2901 * _2609;
            float _2904 = _2901 * _2610;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2772 < ((_2770 >> 12u) & 15u))
            {
                float _2877;
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _3036 = _2755;
                float _3037 = _2757;
                float _3038 = _2759;
                float _3039 = _2761;
                float _3040 = _2763;
                float _3041 = _2765;
                uint _3042 = _2772;
                uint _3051;
                bool _3052;
                for (;;)
                {
                    _3051 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                    _3052 = _3051 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3052)
                    {
                        frontier_phi_77_pred = _3041;
                        frontier_phi_77_pred_1 = _3040;
                        frontier_phi_77_pred_2 = _3039;
                        frontier_phi_77_pred_3 = _3038;
                        frontier_phi_77_pred_4 = _3037;
                        frontier_phi_77_pred_5 = _3036;
                    }
                    else
                    {
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3258 = _3036;
                        float _3259 = _3037;
                        float _3260 = _3038;
                        float _3261 = _3039;
                        float _3262 = _3040;
                        float _3263 = _3041;
                        uint _3264 = _3051;
                        uint _3265;
                        vec4 _3290;
                        float _3291;
                        vec4 _3306;
                        vec3 _3318;
                        vec4 _3333;
                        vec4 _3348;
                        float _3394;
                        bool _3395;
                        for (;;)
                        {
                            uint _3275 = ((_3042 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3264));
                            _3265 = (_3264 + 4294967295u) & _3264;
                            uint _3277 = _3275 * 40u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            _3291 = _3290.w;
                            uint _3293 = (_3275 * 40u) + 4u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3308 = (_3275 * 40u) + 8u;
                            _3318 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x));
                            uint _3320 = (_3275 * 40u) + 16u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3275 * 40u) + 20u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3275 * 40u) + 24u;
                            vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3369 = (_3275 * 40u) + 28u;
                            vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3394 = fma(_2610, _3382.z, fma(_2609, _3382.y, _3382.x * _2608)) + _3382.w;
                            _3395 = !((fma(_2610, _3363.z, fma(_2609, _3363.y, _3363.x * _2608)) + _3363.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3395)
                            {
                                float _3422 = _3290.x - _2608;
                                float _3423 = _3290.y - _2609;
                                float _3424 = _3290.z - _2610;
                                float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                                float _3428 = inversesqrt(_3425);
                                float _3429 = _3428 * _3422;
                                float _3430 = _3428 * _3423;
                                float _3431 = _3428 * _3424;
                                float _3435 = 1.0 - (_3425 / (_3291 * _3291));
                                float _4551 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3440 = sqrt(_3425) * _3306.w;
                                float _3442 = 1.39999997615814208984375 / (_3440 + 1.39999997615814208984375);
                                float _3443 = _3442 * _3442;
                                float _3446 = ((1.0 - _3443) * dot(vec3(_3429, _3430, _3431), vec3(_858, _861, _864))) + _3443;
                                float _3449 = _3440 * _3440;
                                float _3453 = (fma(_2610, _3333.z, fma(_2609, _3333.y, _3333.x * _2608)) + _3333.w) / _3394;
                                float _3454 = (fma(_2610, _3348.z, fma(_2609, _3348.y, _3348.x * _2608)) + _3348.w) / _3394;
                                float _3458 = 1.0 - dot(vec2(_3453, _3454), vec2(_3453, _3454));
                                float _4567 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3460 = _3459 * (((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3436) / ((_3449 * 0.699999988079071044921875) + 1.0));
                                float _3472 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                                float _3473 = 1.0 - _918;
                                float _3480 = sqrt(1.0 - ((1.0 - (_3473 * _3473)) * (1.0 - (_3472 * _3472))));
                                float _3481 = _3480 * _3480;
                                float _3482 = _3481 * _3481;
                                float _3483 = _3429 - _2902;
                                float _3484 = _3430 - _2903;
                                float _3485 = _3431 - _2904;
                                float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                                float _3493 = dot(vec3(_858, _861, _864), vec3((-0.0) - _2902, (-0.0) - _2903, (-0.0) - _2904));
                                float _4578 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3496 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3497 = dot(vec3(_858, _861, _864), vec3(_3489 * _3483, _3489 * _3484, _3489 * _3485));
                                float _4589 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3500 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3504 = ((_3500 * _3500) * (_3482 + (-1.0))) + 1.0;
                                float _3505 = _3442 * _3481;
                                float _3506 = _3505 * _3505;
                                float _3512 = ((1.0 - _3506) * dot(vec3(_858, _861, _864), vec3(_3429, _3430, _3431))) + _3506;
                                float _4600 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3514 = 1.0 - _3481;
                                float _3524 = (0.5 / (((_3513 * ((_3496 * _3514) + _3481)) + 9.9999999392252902907785028219223e-09) + (((_3513 * _3514) + _3481) * _3496))) * _3513;
                                float _4611 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3534 = (_3459 * _3436) * (((_3482 * 3.1415927410125732421875) * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) / ((_3504 * _3504) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3460 * _3306.y;
                                frontier_phi_83_pred_1 = _3460 * _3306.x;
                                frontier_phi_83_pred_2 = _3534 * _3318.z;
                                frontier_phi_83_pred_3 = _3534 * _3318.y;
                                frontier_phi_83_pred_4 = _3534 * _3318.x;
                                frontier_phi_83_pred_5 = _3460 * _3306.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3542 = frontier_phi_83_pred;
                            _3541 = frontier_phi_83_pred_1;
                            _3540 = frontier_phi_83_pred_2;
                            _3539 = frontier_phi_83_pred_3;
                            _3538 = frontier_phi_83_pred_4;
                            _3543 = frontier_phi_83_pred_5;
                            _3248 = _3541 + _3261;
                            _3249 = _3542 + _3262;
                            _3250 = _3543 + _3263;
                            _3245 = _3538 + _3258;
                            _3246 = _3539 + _3259;
                            _3247 = _3540 + _3260;
                            if (_3265 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3265;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3250;
                        frontier_phi_77_pred_1 = _3249;
                        frontier_phi_77_pred_2 = _3248;
                        frontier_phi_77_pred_3 = _3247;
                        frontier_phi_77_pred_4 = _3246;
                        frontier_phi_77_pred_5 = _3245;
                    }
                    _2887 = frontier_phi_77_pred;
                    _2885 = frontier_phi_77_pred_1;
                    _2883 = frontier_phi_77_pred_2;
                    _2881 = frontier_phi_77_pred_3;
                    _2879 = frontier_phi_77_pred_4;
                    _2877 = frontier_phi_77_pred_5;
                    uint _3043 = _3042 + 1u;
                    if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3036 = _2877;
                        _3037 = _2879;
                        _3038 = _2881;
                        _3039 = _2883;
                        _3040 = _2885;
                        _3041 = _2887;
                        _3042 = _3043;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2881;
                frontier_phi_58_59_ladder_1 = _2887;
                frontier_phi_58_59_ladder_2 = _2885;
                frontier_phi_58_59_ladder_3 = _2883;
                frontier_phi_58_59_ladder_4 = _2879;
                frontier_phi_58_59_ladder_5 = _2877;
            }
            else
            {
                frontier_phi_58_59_ladder = _2759;
                frontier_phi_58_59_ladder_1 = _2765;
                frontier_phi_58_59_ladder_2 = _2763;
                frontier_phi_58_59_ladder_3 = _2761;
                frontier_phi_58_59_ladder_4 = _2757;
                frontier_phi_58_59_ladder_5 = _2755;
            }
            _2876 = frontier_phi_58_59_ladder_5;
            _2878 = frontier_phi_58_59_ladder_4;
            _2880 = frontier_phi_58_59_ladder;
            _2882 = frontier_phi_58_59_ladder_3;
            _2884 = frontier_phi_58_59_ladder_2;
            _2886 = frontier_phi_58_59_ladder_1;
        }
        float _2891 = isnan(1.0) ? _902 : (isnan(_902) ? 1.0 : min(_902, 1.0));
        _2667 = (_2891 * _2882) + _2119;
        _2669 = (_2891 * _2884) + _2121;
        _2671 = (_2891 * _2886) + _2123;
        _2673 = ((_2876 * 0.039999999105930328369140625) * _2891) + _2452;
        _2675 = ((_2878 * 0.039999999105930328369140625) * _2891) + _2454;
        _2677 = ((_2880 * 0.039999999105930328369140625) * _2891) + _2456;
    }
    else
    {
        _2667 = _2119;
        _2669 = _2121;
        _2671 = _2123;
        _2673 = _2452;
        _2675 = _2454;
        _2677 = _2456;
    }
    float _4627 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4638 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4649 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2694 = ((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2667 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _902))) + ((_2673 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    float _2695 = ((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2669 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _902))) + ((_2675 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    float _2696 = ((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2671 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _902))) + ((_2677 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    uint _2697 = _244 + 6u;
    float _2705 = _839 / cbSceneParam._m0[86u].x;
    float _2706 = _840 / cbSceneParam._m0[86u].y;
    vec4 _2720 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2705, _2706, (log2((isnan(cbSceneParam._m0[77u].w) ? _761 : (isnan(_761) ? cbSceneParam._m0[77u].w : min(_761, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2722 = _2720.x;
    float _2723 = _2720.y;
    float _2724 = _2720.z;
    float _2725 = _2720.w;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    if (_761 > cbSceneParam._m0[78u].w)
    {
        float _2780 = isnan(_761) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _761 : min(cbSceneParam._m0[80u].w, _761));
        float _2781 = _2780 / _761;
        float _2792 = _2781 * _812;
        float _2793 = _813 * _2781;
        float _2794 = (-0.0) - _2793;
        float _2796 = _2781 * _814;
        float _2798 = (cbSceneParam._m0[77u].w * _2794) / _2780;
        float _2799 = _2798 + cbSceneParam._m0[79u].w;
        float _2800 = cbSceneParam._m0[79u].w - _2793;
        float _2806 = sqrt(((_2792 * _2792) + (_2793 * _2793)) + (_2796 * _2796));
        float _2809 = (1.0 - (cbSceneParam._m0[77u].w / _2780)) * _2806;
        float _2814 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2816 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2993;
        if (abs((_2794 - _2798) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2993 = ((((_2799 > 0.0) ? exp2(_2814 * _2799) : (2.0 - exp2(_2816 * _2799))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2809;
        }
        else
        {
            float _2937 = 1.0 / cbSceneParam._m0[80u].x;
            float _2938 = isnan(_2800) ? _2799 : (isnan(_2799) ? _2800 : max(_2799, _2800));
            float _2939 = isnan(_2800) ? _2799 : (isnan(_2799) ? _2800 : min(_2799, _2800));
            float _2948 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : min(_2938, 0.0));
            float _2949 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : min(_2939, 0.0));
            _2993 = ((abs(_2806 / _2794) * cbSceneParam._m0[80u].y) * ((((_2948 - _2949) * 2.0) - ((exp2(_2814 * (isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0)))) - exp2(_2814 * (isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))))) * _2937)) - ((exp2(_2816 * _2948) - exp2(_2816 * _2949)) * _2937))) + (_2809 * cbSceneParam._m0[80u].z);
        }
        vec4 _2995 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2705, _2706, 1.0), 0.0);
        float _3004 = exp2((_2993 * (-1.44269502162933349609375)) * (1.0 - _2995.w));
        float _3005 = log2(_3004);
        float _3021 = log2(_2725);
        _2818 = (exp2(_3021 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].x)) * _2995.x) / cbSceneParam._m0[78u].x)) + _2722;
        _2820 = (exp2(_3021 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].y)) * _2995.y) / cbSceneParam._m0[78u].y)) + _2723;
        _2822 = (exp2(_3021 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].z)) * _2995.z) / cbSceneParam._m0[78u].z)) + _2724;
        _2824 = _3004 * _2725;
    }
    else
    {
        _2818 = _2722;
        _2820 = _2723;
        _2822 = _2724;
        _2824 = _2725;
    }
    bool _3031;
    vec4 _2834;
    vec4 _2856;
    float _2858;
    float _2862;
    float _2863;
    float _2864;
    float _2865;
    bool _2875;
    for (;;)
    {
        _2834 = cbMatDynParam._m0[0u];
        float _2836 = roundEven(_2834.y);
        bool _2837 = _2836 == 3.0;
        float _2838 = log2(_2824);
        float _2845 = exp2(_2838 * cbSceneParam._m0[78u].x) * _2694;
        float _2846 = exp2(_2838 * cbSceneParam._m0[78u].y) * _2695;
        float _2847 = exp2(_2838 * cbSceneParam._m0[78u].z) * _2696;
        float _2854 = _828 + (-0.5);
        _2856 = cbMtdParam._m0[1u];
        _2858 = _2856.y * _2854;
        float _2861 = (_2836 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2862 = _2861 * (_2837 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2818)));
        _2863 = _2861 * (_2837 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2820)));
        _2864 = _2861 * (_2837 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2822)));
        _2865 = _2854 * 0.999000012874603271484375;
        _2875 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2875)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _2865) < 0.5)
            {
                _3031 = true;
                break;
            }
        }
        uint _2972 = _877 + uint(_2834.w);
        if ((cbInstanceData._m0[_2972].w < 1.0) && ((cbInstanceData._m0[_2972].w + _2865) < 0.5))
        {
            _3031 = true;
            break;
        }
        if ((_2858 + 1.0) < _2856.x)
        {
            _3031 = true;
            break;
        }
        _3031 = false;
        break;
    }
    float _3236;
    if (_3031)
    {
        discard_state = true;
        _3236 = 0.0;
    }
    else
    {
        _3236 = cbInstanceData._m0[_2697].w;
    }
    SV_Target.x = _2862;
    SV_Target.y = _2863;
    SV_Target.z = _2864;
    SV_Target.w = _3236;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2697].w;
    discard_exit();
}


