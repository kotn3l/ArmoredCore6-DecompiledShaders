#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1280;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _371 = _369.x;
    float _383 = dot(vec4(_371, _369.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _400 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_371 - _383) * cbMtdParam._m0[24u].z) + _383) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3867 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _408 = (_401 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _409 = (_401 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _410 = (_401 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _429 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _466 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _468 = _466.x;
    float _469 = _466.y;
    float _470 = _466.z;
    float _479 = ((_449.z - _470) * _401) + _470;
    float _482 = ((((_449.x - _468) * _401) + _468) * 2.0) + (-1.0);
    float _484 = ((((_449.y - _469) * _401) + _469) * 2.0) + (-1.0);
    float _485 = dot(vec2(_482, _484), vec2(_482, _484));
    float _3878 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _490 = sqrt(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))));
    vec4 _506 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _518 = (((_506.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _482;
    float _519 = (((_506.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _484;
    float _522 = fma(_490, _237, fma(_519, _244, _518 * _230));
    float _525 = fma(_490, _238, fma(_519, _245, _518 * _231));
    float _528 = fma(_490, _239, fma(_519, _246, _518 * _232));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _561 = _559.x;
    float _562 = 1.0 - _561;
    float _568 = (cbMtdParam._m0[19u].x + dot(vec4(_532 * _522, _532 * _525, _532 * _528, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_561 - _562) * cbMtdParam._m0[24u].w) + _562) * cbMtdParam._m0[21u].z);
    float _3889 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _571 = (-0.0) - cbMtdParam._m0[24u].x;
    float _573 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _573 : (isnan(_573) ? 1.0 : min(_573, 1.0));
    float _581 = _569 - ((_569 * TEXCOORD_8.x) * _574);
    float _582 = _569 - ((_569 * TEXCOORD_8.y) * _574);
    float _583 = _569 - ((_569 * TEXCOORD_8.z) * _574);
    float _590 = (_581 * ((_429.x * cbMtdParam._m0[18u].x) - _408)) + _408;
    float _591 = (_582 * ((_429.y * cbMtdParam._m0[18u].y) - _409)) + _409;
    float _592 = (_583 * ((_429.z * cbMtdParam._m0[18u].z) - _410)) + _410;
    vec4 _604 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _635 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_606 - _607) * cbMtdParam._m0[24u].y) + _607) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3910 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _644 = ((((cbMtdParam._m0[10u].x - _590) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _636) + _590;
    float _645 = ((((cbMtdParam._m0[10u].y - _591) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _636) + _591;
    float _646 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _592)) * _636) + _592;
    float _650 = (cbMtdParam._m0[19u].w * (_506.z - _479)) + _479;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _671 = (_664.x * 2.0) + (-1.0);
    float _672 = (_664.y * 2.0) + (-1.0);
    float _673 = dot(vec2(_671, _672), vec2(_671, _672));
    float _3921 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _681 = ((_664.z - _650) * _581) + _650;
    float _684 = ((cbMtdParam._m0[23u].y - _681) * _636) + _681;
    vec4 _703 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _709 = (_703.x * 2.0) + (-1.0);
    float _710 = (_703.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _3932 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _726 = ((sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) - _490) * _583) + _490;
    float _729 = (((_671 - _518) * _581) + _518) + (cbMtdParam._m0[21u].x * _518);
    float _730 = (((_672 - _519) * _582) + _519) + (cbMtdParam._m0[21u].x * _519);
    float _741 = (((_709 - _729) + (_729 * cbMtdParam._m0[22u].z)) * _636) + _729;
    float _742 = (((_710 - _730) + (_730 * cbMtdParam._m0[22u].z)) * _636) + _730;
    float _743 = (_636 * (sqrt(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) - _726)) + _726;
    float _745 = cbMtdParam._m0[22u].x + _506.w;
    float _748 = fma(_743, _237, fma(_742, _244, _741 * _230));
    float _751 = fma(_743, _238, fma(_742, _245, _741 * _231));
    float _754 = fma(_743, _239, fma(_742, _246, _741 * _232));
    float _758 = inversesqrt(dot(vec3(_748, _751, _754), vec3(_748, _751, _754)));
    float _759 = _758 * _748;
    float _760 = _758 * _751;
    float _761 = _758 * _754;
    float _3943 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _762 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _3965 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _3976 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3987 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _780 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _831 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _821);
    float _832 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _821);
    float _833 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _821);
    float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
    float _838 = _831 * _837;
    float _839 = _832 * _837;
    float _840 = _833 * _837;
    float _846 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _847 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _865 = fma(_761, cbSceneParam._m0[5u].z, fma(_760, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _759));
    float _868 = fma(_761, cbSceneParam._m0[6u].z, fma(_760, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _759));
    float _871 = fma(_761, cbSceneParam._m0[7u].z, fma(_760, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _759));
    uint _885 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _891 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * cbInstanceData._m0[_885].x;
    float _892 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * cbInstanceData._m0[_885].y;
    float _893 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * cbInstanceData._m0[_885].z;
    float _3998 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _4020 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    vec4 _905 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _846, cbSceneParam._m0[86u].y * _847));
    float _909 = ((isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * TEXCOORD_5.w) * _905.x;
    float _910 = dot(vec3(_759, _760, _761), vec3(_838, _839, _840));
    float _913 = _910 * 2.0;
    float _917 = (_913 * _759) - _838;
    float _918 = (_913 * _760) - _839;
    float _919 = (_913 * _761) - _840;
    float _923 = abs(dot(vec3(_838, _839, _840), vec3(_759, _760, _761)));
    float _4031 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _925 = sqrt(_762);
    float _938 = exp2((_925 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_925 * 3.0));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1279;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1004 = fma(_978, cbModelParam._m0[26u].z, fma(_974, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _970));
        float _1008 = fma(_978, cbModelParam._m0[27u].z, fma(_974, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _970));
        float _1012 = fma(_978, cbModelParam._m0[28u].z, fma(_974, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _970));
        float _1037 = _970 + _759;
        float _1038 = _974 + _760;
        float _1039 = _978 + _761;
        float _1049 = fma(_1039, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037)) - _1004;
        float _1050 = fma(_1039, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037)) - _1008;
        float _1051 = fma(_1039, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037)) - _1012;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1004 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1008 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[34u].z) + ((((((_1012 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1107 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1073.x + (-0.5));
        float _1109 = _1107 * (_1073.y + (-0.5));
        float _1110 = _1107 * (_1073.z + (-0.5));
        float _1117 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1080.x + (-0.5));
        float _1119 = _1117 * (_1080.y + (-0.5));
        float _1120 = _1117 * (_1080.z + (-0.5));
        float _1127 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1087.x + (-0.5));
        float _1129 = _1127 * (_1087.y + (-0.5));
        float _1130 = _1127 * (_1087.z + (-0.5));
        float _1137 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1094.x + (-0.5));
        float _1139 = _1137 * (_1094.y + (-0.5));
        float _1140 = _1137 * (_1094.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1161 = (dot(vec3(_759, _760, _761), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1171 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4079 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1173 + 1.0))) + _1178) * _1141;
        float _1188 = _1109 * 0.5;
        float _1189 = _1119 * 0.5;
        float _1190 = _1129 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_759, _760, _761), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _4112 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1215 + 1.0))) + _1220) * _1142;
        float _1230 = _1110 * 0.5;
        float _1231 = _1120 * 0.5;
        float _1232 = _1130 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_759, _760, _761), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4145 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1257 + 1.0))) + _1262) * _1143;
        _1279 = _1110;
        _1281 = _1109;
        _1282 = _1108;
        _1283 = _1120;
        _1284 = _1119;
        _1285 = _1118;
        _1286 = _1130;
        _1287 = _1129;
        _1288 = _1128;
        _1289 = _1143;
        _1290 = _1142;
        _1291 = _1141;
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _1280;
        _1281 = _1280;
        _1282 = _1280;
        _1283 = _1280;
        _1284 = _1280;
        _1285 = _1280;
        _1286 = _1280;
        _1287 = _1280;
        _1288 = _1280;
        _1289 = _1280;
        _1290 = _1280;
        _1291 = _1280;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1319 = fma(_978, cbModelParam._m0[30u].z, fma(_974, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _970));
        float _1323 = fma(_978, cbModelParam._m0[31u].z, fma(_974, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _970));
        float _1327 = fma(_978, cbModelParam._m0[32u].z, fma(_974, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _970));
        float _1350 = _970 + _759;
        float _1351 = _974 + _760;
        float _1352 = _978 + _761;
        float _1362 = fma(_1352, cbModelParam._m0[30u].z, fma(_1351, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1350)) - _1319;
        float _1363 = fma(_1352, cbModelParam._m0[31u].z, fma(_1351, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1350)) - _1323;
        float _1364 = fma(_1352, cbModelParam._m0[32u].z, fma(_1351, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1350)) - _1327;
        float _1368 = inversesqrt(dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364)));
        float _1381 = ((_1368 * _1362) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1319 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1368 * _1363) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1323 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1368 * _1364) / cbModelParam._m0[35u].z) + ((((((_1327 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        float _1418 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1385.x + (-0.5));
        float _1420 = _1418 * (_1385.y + (-0.5));
        float _1421 = _1418 * (_1385.z + (-0.5));
        float _1428 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1392.x + (-0.5));
        float _1430 = _1428 * (_1392.y + (-0.5));
        float _1431 = _1428 * (_1392.z + (-0.5));
        float _1438 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1399.x + (-0.5));
        float _1440 = _1438 * (_1399.y + (-0.5));
        float _1441 = _1438 * (_1399.z + (-0.5));
        float _1448 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1406.x + (-0.5));
        float _1450 = _1448 * (_1406.y + (-0.5));
        float _1451 = _1448 * (_1406.z + (-0.5));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = _1419 * 0.5;
        float _1456 = _1429 * 0.5;
        float _1457 = _1439 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_759, _760, _761), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4208 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1482 + 1.0))) + _1487) * _1452;
        float _1497 = _1420 * 0.5;
        float _1498 = _1430 * 0.5;
        float _1499 = _1440 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_759, _760, _761), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4241 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1524 + 1.0))) + _1529) * _1453;
        float _1539 = _1421 * 0.5;
        float _1540 = _1431 * 0.5;
        float _1541 = _1441 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_759, _760, _761), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4274 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1566 + 1.0))) + _1571) * _1454;
        _1588 = _1421;
        _1589 = _1420;
        _1590 = _1419;
        _1591 = _1431;
        _1592 = _1430;
        _1593 = _1429;
        _1594 = _1441;
        _1595 = _1440;
        _1596 = _1439;
        _1597 = _1454;
        _1598 = _1453;
        _1599 = _1452;
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
    }
    else
    {
        _1588 = _1280;
        _1589 = _1280;
        _1590 = _1280;
        _1591 = _1280;
        _1592 = _1280;
        _1593 = _1280;
        _1594 = _1280;
        _1595 = _1280;
        _1596 = _1280;
        _1597 = _1280;
        _1598 = _1280;
        _1599 = _1280;
        _1600 = 0.0;
        _1601 = 0.0;
        _1602 = 0.0;
    }
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1292)) + _1292;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1293)) + _1293;
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1294)) + _1294;
    float _1635 = fma(_1614, cbSceneParam._m0[89u].z, fma(_1613, cbSceneParam._m0[89u].y, _1612 * cbSceneParam._m0[89u].x));
    float _1638 = fma(_1614, cbSceneParam._m0[90u].z, fma(_1613, cbSceneParam._m0[90u].y, _1612 * cbSceneParam._m0[90u].x));
    float _1641 = fma(_1614, cbSceneParam._m0[91u].z, fma(_1613, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1612));
    float _1656 = _917 * 0.5;
    float _1657 = _918 * 0.5;
    float _1658 = _919 * 0.5;
    float _1659 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1662 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1665 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1699;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1672 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1279, _1283, _1286, _1289));
        float _1676 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1680 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1687 = dot(vec4(cbModelParam._m0[39u]), vec4(_1656, _1657, _1658, 1.0));
        _1699 = dot(vec3(isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1687) ? 0.0 : (isnan(0.0) ? _1687 : max(0.0, _1687))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1699 = 1.0;
    }
    float _1710;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1701 = dot(vec4(cbModelParam._m0[40u]), vec4(_1656, _1657, _1658, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1714 = (_1710 * cbModelParam._m0[1u].x) + (_1699 * (1.0 - cbModelParam._m0[1u].x));
    float _1724 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _762);
    float _1725 = isnan(_1724) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1724 : min(cbModelParam._m0[25u].z, _1724));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1772 = fma(_978, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _970)) + cbModelParam._m0[13u].w;
        float _1776 = fma(_978, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _970)) + cbModelParam._m0[14u].w;
        float _1780 = fma(_978, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _970)) + cbModelParam._m0[15u].w;
        float _1783 = fma(_919, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _917));
        float _1786 = fma(_919, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _917));
        float _1789 = fma(_919, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _917));
        float _1817;
        if (_1783 > 0.0)
        {
            _1817 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1817 = frontier_phi_14_12_ladder;
        }
        float _1986;
        if (_1786 > 0.0)
        {
            _1986 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1986 = frontier_phi_23_19_ladder;
        }
        float _2281;
        if (_1789 > 0.0)
        {
            _2281 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2281 = frontier_phi_35_30_ladder;
        }
        float _2283 = isnan(_1986) ? _1817 : (isnan(_1817) ? _1986 : min(_1817, _1986));
        float _2284 = isnan(_2281) ? _2283 : (isnan(_2283) ? _2281 : min(_2283, _2281));
        float _2288 = (_2284 * _1783) + _1772;
        float _2289 = (_2284 * _1786) + _1776;
        float _2290 = (_2284 * _1789) + _1780;
        float _2291 = _2284 * 9.9999997473787516355514526367188e-05;
        float _2293 = (-1.0) - _2291;
        float _2295 = _2291 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2290 > _2295) || ((_2290 < _2293) || ((_2289 > _2295) || ((_2289 < _2293) || ((_2288 < _2293) || (_2288 > _2295))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2435 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2290, cbModelParam._m0[9u].z, fma(_2289, cbModelParam._m0[9u].y, _2288 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2290, cbModelParam._m0[10u].z, fma(_2289, cbModelParam._m0[10u].y, _2288 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2290, cbModelParam._m0[11u].z, fma(_2289, cbModelParam._m0[11u].y, _2288 * cbModelParam._m0[11u].x))), _1725);
            frontier_phi_13_35_ladder = _2435.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2435.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2435.x * cbModelParam._m0[1u].y;
        }
        _1805 = frontier_phi_13_35_ladder_2;
        _1807 = frontier_phi_13_35_ladder_1;
        _1809 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_917, _918, _919), _1725);
        _1805 = _1793.x * cbModelParam._m0[1u].y;
        _1807 = _1793.y * cbModelParam._m0[1u].y;
        _1809 = _1793.z * cbModelParam._m0[1u].y;
    }
    float _1813 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _762);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1813 : min(cbModelParam._m0[25u].w, _1813));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1867 = fma(_978, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _970)) + cbModelParam._m0[21u].w;
        float _1871 = fma(_978, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _970)) + cbModelParam._m0[22u].w;
        float _1875 = fma(_978, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _970)) + cbModelParam._m0[23u].w;
        float _1878 = fma(_919, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _917));
        float _1881 = fma(_919, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _917));
        float _1884 = fma(_919, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _917));
        float _1991;
        if (_1878 > 0.0)
        {
            _1991 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1991 = frontier_phi_25_21_ladder;
        }
        float _2308;
        if (_1881 > 0.0)
        {
            _2308 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2308 = frontier_phi_37_32_ladder;
        }
        float _2635;
        if (_1884 > 0.0)
        {
            _2635 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2635 = frontier_phi_47_44_ladder;
        }
        float _2637 = isnan(_2308) ? _1991 : (isnan(_1991) ? _2308 : min(_1991, _2308));
        float _2638 = isnan(_2635) ? _2637 : (isnan(_2637) ? _2635 : min(_2637, _2635));
        float _2642 = (_2638 * _1878) + _1867;
        float _2643 = (_2638 * _1881) + _1871;
        float _2644 = (_2638 * _1884) + _1875;
        float _2645 = _2638 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2645;
        float _2648 = _2645 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2644 > _2648) || ((_2644 < _2646) || ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 < _2646) || (_2642 > _2648))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2644, cbModelParam._m0[17u].z, fma(_2643, cbModelParam._m0[17u].y, _2642 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2644, cbModelParam._m0[18u].z, fma(_2643, cbModelParam._m0[18u].y, _2642 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2644, cbModelParam._m0[19u].z, fma(_2643, cbModelParam._m0[19u].y, _2642 * cbModelParam._m0[19u].x))), _1814);
            frontier_phi_22_47_ladder = _2762.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2762.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2762.x * cbModelParam._m0[1u].z;
        }
        _1903 = frontier_phi_22_47_ladder_2;
        _1905 = frontier_phi_22_47_ladder_1;
        _1907 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_917, _918, _919), _1814);
        _1903 = _1887.x * cbModelParam._m0[1u].z;
        _1905 = _1887.y * cbModelParam._m0[1u].z;
        _1907 = _1887.z * cbModelParam._m0[1u].z;
    }
    float _1919 = ((((1.0 - _938) * ((_925 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_938 * _925)) * _909;
    float _1920 = _1919 * ((cbModelParam._m0[1u].w * (_1903 - _1805)) + _1805);
    float _1921 = _1919 * ((cbModelParam._m0[1u].w * (_1905 - _1807)) + _1807);
    float _1922 = _1919 * ((cbModelParam._m0[1u].w * (_1907 - _1809)) + _1809);
    float _1925 = fma(_1922, cbSceneParam._m0[89u].z, fma(_1921, cbSceneParam._m0[89u].y, _1920 * cbSceneParam._m0[89u].x));
    float _1928 = fma(_1922, cbSceneParam._m0[90u].z, fma(_1921, cbSceneParam._m0[90u].y, _1920 * cbSceneParam._m0[90u].x));
    float _1931 = fma(_1922, cbSceneParam._m0[91u].z, fma(_1921, cbSceneParam._m0[91u].y, _1920 * cbSceneParam._m0[91u].x));
    float _1965 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1969 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1973 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1977 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1978 = _1965 / _1977;
    float _1979 = _1969 / _1977;
    float _1980 = _1973 / _1977;
    float _2127;
    float _2128;
    float _2129;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2007 = ((uint(_1980 > cbSceneParam._m0[59u].y) + uint(_1980 > cbSceneParam._m0[59u].x)) + uint(_1980 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2008 = _2007 + 43u;
        uint _2016 = _2007 + 44u;
        uint _2024 = _2007 + 45u;
        uint _2032 = _2007 + 46u;
        float _2043 = fma(_1977, cbSceneParam._m0[_2008].w, fma(_1973, cbSceneParam._m0[_2008].z, fma(_1969, cbSceneParam._m0[_2008].y, _1965 * cbSceneParam._m0[_2008].x)));
        float _2047 = fma(_1977, cbSceneParam._m0[_2016].w, fma(_1973, cbSceneParam._m0[_2016].z, fma(_1969, cbSceneParam._m0[_2016].y, _1965 * cbSceneParam._m0[_2016].x)));
        float _2055 = fma(_1977, cbSceneParam._m0[_2032].w, fma(_1973, cbSceneParam._m0[_2032].z, fma(_1969, cbSceneParam._m0[_2032].y, _1965 * cbSceneParam._m0[_2032].x)));
        float _2060 = cbSceneParam._m0[33u].z * _2055;
        float _2062 = cbSceneParam._m0[33u].w * _2055;
        float _2065 = fma(_1977, cbSceneParam._m0[_2024].w, fma(_1973, cbSceneParam._m0[_2024].z, fma(_1969, cbSceneParam._m0[_2024].y, _1965 * cbSceneParam._m0[_2024].x))) / _2055;
        float _2113 = (cbSceneParam._m0[33u].x - sqrt(((_1979 * _1979) + (_1978 * _1978)) + (_1980 * _1980))) * cbSceneParam._m0[33u].y;
        float _4400 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2120 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2060 + _2043) / _2055, (_2062 + _2047) / _2055), _2065), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 + _2043) / _2055, (_2047 - _2060) / _2055), _2065), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2043 - _2060) / _2055, (_2047 - _2062) / _2055), _2065), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2043 - _2062) / _2055, (_2060 + _2047) / _2055), _2065), 0.0)).x), vec4(0.25)));
        _2127 = 1.0 - (_2120 * cbSceneParam._m0[34u].x);
        _2128 = 1.0 - (_2120 * cbSceneParam._m0[34u].y);
        _2129 = 1.0 - (_2120 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2127 = 1.0;
        _2128 = 1.0;
        _2129 = 1.0;
    }
    float _2193;
    float _2195;
    float _2197;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2181 = fma(_1977, cbSceneParam._m0[63u].w, fma(_1973, cbSceneParam._m0[63u].z, fma(_1969, cbSceneParam._m0[63u].y, _1965 * cbSceneParam._m0[63u].x)));
        float _2182 = fma(_1977, cbSceneParam._m0[60u].w, fma(_1973, cbSceneParam._m0[60u].z, fma(_1969, cbSceneParam._m0[60u].y, _1965 * cbSceneParam._m0[60u].x))) / _2181;
        float _2183 = fma(_1977, cbSceneParam._m0[61u].w, fma(_1973, cbSceneParam._m0[61u].z, fma(_1969, cbSceneParam._m0[61u].y, _1965 * cbSceneParam._m0[61u].x))) / _2181;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2182 >= cbSceneParam._m0[64u].x) && (_2183 >= cbSceneParam._m0[64u].y)) && (_2182 <= cbSceneParam._m0[64u].z)) && (_2183 <= cbSceneParam._m0[64u].w))
        {
            float _2321 = fma(_1977, cbSceneParam._m0[62u].w, fma(_1973, cbSceneParam._m0[62u].z, fma(_1969, cbSceneParam._m0[62u].y, _1965 * cbSceneParam._m0[62u].x))) / _2181;
            float _2325 = isnan(cbSceneParam._m0[41u].w) ? _2321 : (isnan(_2321) ? cbSceneParam._m0[41u].w : max(_2321, cbSceneParam._m0[41u].w));
            float _2368 = (cbSceneParam._m0[33u].x - sqrt(((_1979 * _1979) + (_1978 * _1978)) + (_1980 * _1980))) * cbSceneParam._m0[33u].y;
            float _4416 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
            float _2375 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2182, cbSceneParam._m0[33u].w + _2183), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2182, _2183 - cbSceneParam._m0[33u].z), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2182 - cbSceneParam._m0[33u].z, _2183 - cbSceneParam._m0[33u].w), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2182 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2183), _2325), 0.0)).x), vec4(0.25)));
            float _2379 = 1.0 - (_2375 * cbSceneParam._m0[34u].x);
            float _2380 = 1.0 - (_2375 * cbSceneParam._m0[34u].y);
            float _2381 = 1.0 - (_2375 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2381) ? _2129 : (isnan(_2129) ? _2381 : min(_2129, _2381));
            frontier_phi_34_33_ladder_1 = isnan(_2380) ? _2128 : (isnan(_2128) ? _2380 : min(_2128, _2380));
            frontier_phi_34_33_ladder_2 = isnan(_2379) ? _2127 : (isnan(_2127) ? _2379 : min(_2127, _2379));
        }
        else
        {
            frontier_phi_34_33_ladder = _2129;
            frontier_phi_34_33_ladder_1 = _2128;
            frontier_phi_34_33_ladder_2 = _2127;
        }
        _2193 = frontier_phi_34_33_ladder_2;
        _2195 = frontier_phi_34_33_ladder_1;
        _2197 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2193 = _2127;
        _2195 = _2128;
        _2197 = _2129;
    }
    uvec4 _2202 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2204 = _2202.x * 14u;
    uint _2205 = _2204 + 13u;
    float _2212 = _909 + (-1.0);
    float _2217 = (cbLight._m0[_2205].x * _2212) + 1.0;
    float _2218 = (cbLight._m0[_2205].y * _2212) + 1.0;
    float _2219 = (cbLight._m0[_2205].z * _2212) + 1.0;
    float _2220 = (cbLight._m0[_2205].w * _2212) + 1.0;
    uint _2221 = _2204 + 5u;
    float _2227 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
    uint _2231 = _2204 + 4u;
    float _2240 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
    uint _2244 = _2204 | 1u;
    float _2255 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_759, _760, _761));
    float _2258 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_759, _760, _761));
    float _4452 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _4463 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2263 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * 0.3183098733425140380859375;
    float _2265 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * 0.3183098733425140380859375;
    float _2272 = ((cbLight._m0[_2221].x * _2227) * _2265) + (((cbLight._m0[_2231].x * _2193) * _2240) * _2263);
    float _2273 = ((_2227 * cbLight._m0[_2221].y) * _2265) + (((cbLight._m0[_2231].y * _2195) * _2240) * _2263);
    float _2274 = ((_2227 * cbLight._m0[_2221].z) * _2265) + (((cbLight._m0[_2231].z * _2197) * _2240) * _2263);
    uvec4 _2278 = floatBitsToUint(cbLight._m0[_2204 + 12u]);
    bool _2280 = _2278.x == 0u;
    float _2382;
    float _2384;
    float _2386;
    if (_2280)
    {
        _2382 = _2272;
        _2384 = _2273;
        _2386 = _2274;
    }
    else
    {
        uint _2390 = _2204 + 6u;
        float _2406 = (dot(vec3(cbLight._m0[_2204 + 2u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2407 = _2406 * _2406;
        float _4474 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2408 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2409 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2382 = (((cbLight._m0[_2390].x * 0.3183098733425140380859375) * _2408) * _2409) + _2272;
        _2384 = (((cbLight._m0[_2390].y * 0.3183098733425140380859375) * _2408) * _2409) + _2273;
        _2386 = (((cbLight._m0[_2390].z * 0.3183098733425140380859375) * _2408) * _2409) + _2274;
    }
    bool _2389 = _2278.y == 0u;
    float _2444;
    float _2446;
    float _2448;
    if (_2389)
    {
        _2444 = _2382;
        _2446 = _2384;
        _2448 = _2386;
    }
    else
    {
        uint _2606 = _2204 + 7u;
        float _2622 = (dot(vec3(cbLight._m0[_2204 + 3u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2623 = _2622 * _2622;
        float _4490 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2624 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2625 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2444 = (((cbLight._m0[_2606].x * 0.3183098733425140380859375) * _2624) * _2625) + _2382;
        _2446 = (((cbLight._m0[_2606].y * 0.3183098733425140380859375) * _2624) * _2625) + _2384;
        _2448 = (((cbLight._m0[_2606].z * 0.3183098733425140380859375) * _2624) * _2625) + _2386;
    }
    uint _2451 = _2204 + 8u;
    float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _762) * 0.949999988079071044921875);
    float _2465 = _2464 * _2464;
    float _2466 = cbLight._m0[_2204].x + _838;
    float _2467 = cbLight._m0[_2204].y + _839;
    float _2468 = cbLight._m0[_2204].z + _840;
    float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
    float _2473 = _2472 * _2466;
    float _2474 = _2472 * _2467;
    float _2475 = _2472 * _2468;
    float _2476 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2204].xyz));
    float _4506 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _4517 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _2480 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2481 = dot(vec3(_759, _760, _761), vec3(_2473, _2474, _2475));
    float _4528 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2473, _2474, _2475));
    float _4539 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2465 * _2465;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2504 = (exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2505 = 1.0 - _2465;
    float _2516 = (0.5 / (((_2480 * ((_2479 * _2505) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2505) + _2465) * _2479))) * _2479;
    float _4550 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2518 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    uint _2532 = _2204 + 9u;
    float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _762) * 0.949999988079071044921875);
    float _2544 = _2543 * _2543;
    float _2545 = cbLight._m0[_2244].x + _838;
    float _2546 = cbLight._m0[_2244].y + _839;
    float _2547 = cbLight._m0[_2244].z + _840;
    float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
    float _2552 = _2551 * _2545;
    float _2553 = _2551 * _2546;
    float _2554 = _2551 * _2547;
    float _2555 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2244].xyz));
    float _4561 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2559 = dot(vec3(_759, _760, _761), vec3(_2552, _2553, _2554));
    float _4572 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2563 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2552, _2553, _2554));
    float _4583 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2567 = _2544 * _2544;
    float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
    float _2580 = (exp2(log2(1.0 - (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2581 = 1.0 - _2544;
    float _2591 = (0.5 / (((_2480 * ((_2558 * _2581) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2581) + _2544) * _2558))) * _2558;
    float _4594 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2593 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
    float _2603 = (((_2580 * cbLight._m0[_2532].x) * _2593) * _2227) + ((((cbLight._m0[_2451].x * _2193) * _2504) * _2518) * _2240);
    float _2604 = (((_2580 * cbLight._m0[_2532].y) * _2593) * _2227) + ((((cbLight._m0[_2451].y * _2195) * _2504) * _2518) * _2240);
    float _2605 = (((_2580 * cbLight._m0[_2532].z) * _2593) * _2227) + ((((cbLight._m0[_2451].z * _2197) * _2504) * _2518) * _2240);
    float _2661;
    float _2663;
    float _2665;
    if (_2280)
    {
        _2661 = _2603;
        _2663 = _2604;
        _2665 = _2605;
    }
    else
    {
        uint _2667 = _2204 + 2u;
        uint _2671 = _2204 + 10u;
        float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _762) * 0.949999988079071044921875);
        float _2686 = _2685 * _2685;
        float _2687 = cbLight._m0[_2667].x + _838;
        float _2688 = cbLight._m0[_2667].y + _839;
        float _2689 = cbLight._m0[_2667].z + _840;
        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
        float _2694 = _2693 * _2687;
        float _2695 = _2693 * _2688;
        float _2696 = _2693 * _2689;
        float _2697 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2667].xyz));
        float _4605 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2701 = dot(vec3(_759, _760, _761), vec3(_2694, _2695, _2696));
        float _4616 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2705 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2694, _2695, _2696));
        float _4627 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2709 = _2686 * _2686;
        float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
        float _2722 = (exp2(log2(1.0 - (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2723 = 1.0 - _2686;
        float _2733 = (0.5 / (((_2480 * ((_2700 * _2723) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2723) + _2686) * _2700))) * _2700;
        float _4638 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2661 = (((_2722 * cbLight._m0[_2671].x) * _2735) * _2736) + _2603;
        _2663 = (((_2722 * cbLight._m0[_2671].y) * _2735) * _2736) + _2604;
        _2665 = (((_2722 * cbLight._m0[_2671].z) * _2735) * _2736) + _2605;
    }
    float _2767;
    float _2769;
    float _2771;
    if (_2389)
    {
        _2767 = _2661;
        _2769 = _2663;
        _2771 = _2665;
    }
    else
    {
        uint _2778 = _2204 + 3u;
        uint _2782 = _2204 + 11u;
        float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2778].w)) * _762) * 0.949999988079071044921875);
        float _2797 = _2796 * _2796;
        float _2798 = cbLight._m0[_2778].x + _838;
        float _2799 = cbLight._m0[_2778].y + _839;
        float _2800 = cbLight._m0[_2778].z + _840;
        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
        float _2805 = _2804 * _2798;
        float _2806 = _2804 * _2799;
        float _2807 = _2804 * _2800;
        float _2808 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2778].xyz));
        float _4654 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2812 = dot(vec3(_759, _760, _761), vec3(_2805, _2806, _2807));
        float _4665 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2816 = dot(vec3(cbLight._m0[_2778].xyz), vec3(_2805, _2806, _2807));
        float _4676 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2820 = _2797 * _2797;
        float _2824 = ((_2815 * _2815) * (_2820 + (-1.0))) + 1.0;
        float _2833 = (exp2(log2(1.0 - (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2834 = 1.0 - _2797;
        float _2844 = (0.5 / (((_2480 * ((_2811 * _2834) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2834) + _2797) * _2811))) * _2811;
        float _4687 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2846 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2820 / ((_2824 * _2824) * 3.141590118408203125));
        float _2847 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2767 = (((_2833 * cbLight._m0[_2782].x) * _2846) * _2847) + _2661;
        _2769 = (((_2833 * cbLight._m0[_2782].y) * _2846) * _2847) + _2663;
        _2771 = (((_2833 * cbLight._m0[_2782].z) * _2846) * _2847) + _2665;
    }
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_2202.y == 0u)
    {
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.x;
        uint _2880 = uint((float(_2868.y) * floor(float(uint(cbSceneParam._m0[85u].y * _847) / _2869))) + floor(float(uint(cbSceneParam._m0[85u].x * _846) / _2869)));
        float _2890 = (log2(_1980 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2891 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        uint _2894 = uint(isnan(14.0) ? _2891 : (isnan(_2891) ? 14.0 : min(_2891, 14.0)));
        uvec4 _2899 = texelFetch(g_lightClusterGridBuffer, int(((_2894 << 2u) + (_2880 << 6u)) >> 2u));
        uint _2900 = _2899.x;
        uint _2901 = _2868.z;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        if (((((1u << ((_2901 >> 4u) & 15u)) + 4294967295u) & _2900) == 0u) || ((_2901 & 240u) == 0u))
        {
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
        }
        else
        {
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            uint _3130 = 0u;
            uint _3139;
            bool _3140;
            for (;;)
            {
                _3139 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3130 << 2u)) >> 2u)).x;
                _3140 = _3139 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3140)
                {
                    frontier_phi_66_pred = _3129;
                    frontier_phi_66_pred_1 = _3128;
                    frontier_phi_66_pred_2 = _3127;
                    frontier_phi_66_pred_3 = _3126;
                    frontier_phi_66_pred_4 = _3125;
                    frontier_phi_66_pred_5 = _3124;
                }
                else
                {
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    uint _3254;
                    _3248 = _3124;
                    _3249 = _3125;
                    _3250 = _3126;
                    _3251 = _3127;
                    _3252 = _3128;
                    _3253 = _3129;
                    _3254 = _3139;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    for (;;)
                    {
                        uint _3258 = uint(findLSB(_3254)) + (_3130 << 5u);
                        uint _3255 = (_3254 + 4294967295u) & _3254;
                        uint _3260 = _3258 * 48u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 3u)).x));
                        uint _3280 = (_3258 * 48u) + 4u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 3u)).x));
                        uint _3299 = (_3258 * 48u) + 8u;
                        vec3 _3310 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x));
                        float _3314 = _3274.x - _1978;
                        float _3315 = _3274.y - _1979;
                        float _3316 = _3274.z - _1980;
                        float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                        float _3320 = inversesqrt(_3317);
                        float _3321 = _3320 * _3314;
                        float _3322 = _3320 * _3315;
                        float _3323 = _3320 * _3316;
                        float _3324 = dot(vec3(_865, _868, _871), vec3(_3321, _3322, _3323));
                        float _3329 = 1.0 - (_3317 * _3274.w);
                        float _4713 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3330 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3331 = sqrt(_3317) * _3293.w;
                        float _3334 = 1.39999997615814208984375 / (_3331 + 1.39999997615814208984375);
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3324) + _3335;
                        float _3341 = _3331 * _3331;
                        float _3345 = ((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3330) / ((_3341 * 0.699999988079071044921875) + 1.0);
                        float _3349 = (-0.0) - _1978;
                        float _3350 = (-0.0) - _1979;
                        float _3351 = (-0.0) - _1980;
                        float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3365 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                        float _3366 = 1.0 - _925;
                        float _3373 = sqrt(1.0 - ((1.0 - (_3366 * _3366)) * (1.0 - (_3365 * _3365))));
                        float _3374 = _3373 * _3373;
                        float _3375 = _3374 * _3374;
                        float _3376 = _3356 + _3321;
                        float _3377 = _3357 + _3322;
                        float _3378 = _3358 + _3323;
                        float _3382 = inversesqrt(dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378)));
                        float _3386 = dot(vec3(_865, _868, _871), vec3(_3356, _3357, _3358));
                        float _4729 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3389 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3390 = dot(vec3(_865, _868, _871), vec3(_3382 * _3376, _3382 * _3377, _3382 * _3378));
                        float _4740 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3393 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3397 = ((_3393 * _3393) * (_3375 + (-1.0))) + 1.0;
                        float _3398 = _3334 * _3374;
                        float _3399 = _3398 * _3398;
                        float _3402 = ((1.0 - _3399) * _3324) + _3399;
                        float _4751 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3403 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3404 = 1.0 - _3374;
                        float _3414 = (0.5 / (((_3403 * ((_3389 * _3404) + _3374)) + 9.9999999392252902907785028219223e-09) + (((_3403 * _3404) + _3374) * _3389))) * _3403;
                        float _4762 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3425 = (((_3375 * 3.1415927410125732421875) * (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) / ((_3397 * _3397) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125))) * _3330;
                        _3183 = (_3345 * _3293.x) + _3251;
                        _3184 = (_3345 * _3293.y) + _3252;
                        _3185 = (_3345 * _3293.z) + _3253;
                        _3180 = (_3425 * _3310.x) + _3248;
                        _3181 = (_3425 * _3310.y) + _3249;
                        _3182 = (_3425 * _3310.z) + _3250;
                        if (_3255 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3248 = _3180;
                            _3249 = _3181;
                            _3250 = _3182;
                            _3251 = _3183;
                            _3252 = _3184;
                            _3253 = _3185;
                            _3254 = _3255;
                        }
                    }
                    frontier_phi_66_pred = _3185;
                    frontier_phi_66_pred_1 = _3184;
                    frontier_phi_66_pred_2 = _3183;
                    frontier_phi_66_pred_3 = _3182;
                    frontier_phi_66_pred_4 = _3181;
                    frontier_phi_66_pred_5 = _3180;
                }
                _2991 = frontier_phi_66_pred;
                _2989 = frontier_phi_66_pred_1;
                _2987 = frontier_phi_66_pred_2;
                _2985 = frontier_phi_66_pred_3;
                _2983 = frontier_phi_66_pred_4;
                _2981 = frontier_phi_66_pred_5;
                uint _3131 = _3130 + 1u;
                if (_3131 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3124 = _2981;
                    _3125 = _2983;
                    _3126 = _2985;
                    _3127 = _2987;
                    _3128 = _2989;
                    _3129 = _2991;
                    _3130 = _3131;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
        }
        uvec4 _2994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2995 = _2994.z;
        uint _2997 = (_2995 >> 8u) & 15u;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        if (((4294967295u << _2997) & _2900) == 0u)
        {
            _3092 = _2980;
            _3094 = _2982;
            _3096 = _2984;
            _3098 = _2986;
            _3100 = _2988;
            _3102 = _2990;
        }
        else
        {
            float _3117 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
            float _3118 = _3117 * _1978;
            float _3119 = _3117 * _1979;
            float _3120 = _3117 * _1980;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2997 < ((_2995 >> 12u) & 15u))
            {
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3101;
                float _3103;
                float _3231 = _2980;
                float _3232 = _2982;
                float _3233 = _2984;
                float _3234 = _2986;
                float _3235 = _2988;
                float _3236 = _2990;
                uint _3237 = _2997;
                uint _3246;
                bool _3247;
                for (;;)
                {
                    _3246 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3237 << 2u)) >> 2u)).x;
                    _3247 = _3246 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3247)
                    {
                        frontier_phi_72_pred = _3236;
                        frontier_phi_72_pred_1 = _3235;
                        frontier_phi_72_pred_2 = _3234;
                        frontier_phi_72_pred_3 = _3233;
                        frontier_phi_72_pred_4 = _3232;
                        frontier_phi_72_pred_5 = _3231;
                    }
                    else
                    {
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3443 = _3231;
                        float _3444 = _3232;
                        float _3445 = _3233;
                        float _3446 = _3234;
                        float _3447 = _3235;
                        float _3448 = _3236;
                        uint _3449 = _3246;
                        uint _3450;
                        vec4 _3475;
                        float _3476;
                        vec4 _3491;
                        vec3 _3503;
                        vec4 _3518;
                        vec4 _3534;
                        float _3580;
                        bool _3581;
                        for (;;)
                        {
                            uint _3460 = ((_3237 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3449));
                            _3450 = (_3449 + 4294967295u) & _3449;
                            uint _3462 = _3460 * 40u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3476 = _3475.w;
                            uint _3478 = (_3460 * 40u) + 4u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3493 = (_3460 * 40u) + 8u;
                            _3503 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x));
                            uint _3505 = (_3460 * 40u) + 16u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3521 = (_3460 * 40u) + 20u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3460 * 40u) + 24u;
                            vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3555 = (_3460 * 40u) + 28u;
                            vec4 _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            _3580 = fma(_1980, _3568.z, fma(_1979, _3568.y, _3568.x * _1978)) + _3568.w;
                            _3581 = !((fma(_1980, _3549.z, fma(_1979, _3549.y, _3549.x * _1978)) + _3549.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3581)
                            {
                                float _3608 = _3475.x - _1978;
                                float _3609 = _3475.y - _1979;
                                float _3610 = _3475.z - _1980;
                                float _3611 = dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610));
                                float _3614 = inversesqrt(_3611);
                                float _3615 = _3614 * _3608;
                                float _3616 = _3614 * _3609;
                                float _3617 = _3614 * _3610;
                                float _3621 = 1.0 - (_3611 / (_3476 * _3476));
                                float _4773 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3622 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3626 = sqrt(_3611) * _3491.w;
                                float _3628 = 1.39999997615814208984375 / (_3626 + 1.39999997615814208984375);
                                float _3629 = _3628 * _3628;
                                float _3632 = ((1.0 - _3629) * dot(vec3(_3615, _3616, _3617), vec3(_865, _868, _871))) + _3629;
                                float _3635 = _3626 * _3626;
                                float _3639 = (fma(_1980, _3518.z, fma(_1979, _3518.y, _3518.x * _1978)) + _3518.w) / _3580;
                                float _3640 = (fma(_1980, _3534.z, fma(_1979, _3534.y, _3534.x * _1978)) + _3534.w) / _3580;
                                float _3644 = 1.0 - dot(vec2(_3639, _3640), vec2(_3639, _3640));
                                float _4789 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3646 = _3645 * (((isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0))) * _3622) / ((_3635 * 0.699999988079071044921875) + 1.0));
                                float _3658 = exp2(log2(1.0 / ((_3635 * 3.5) + 5.0)) * 0.25);
                                float _3659 = 1.0 - _925;
                                float _3666 = sqrt(1.0 - ((1.0 - (_3659 * _3659)) * (1.0 - (_3658 * _3658))));
                                float _3667 = _3666 * _3666;
                                float _3668 = _3667 * _3667;
                                float _3669 = _3615 - _3118;
                                float _3670 = _3616 - _3119;
                                float _3671 = _3617 - _3120;
                                float _3675 = inversesqrt(dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671)));
                                float _3679 = dot(vec3(_865, _868, _871), vec3((-0.0) - _3118, (-0.0) - _3119, (-0.0) - _3120));
                                float _4800 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3682 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3683 = dot(vec3(_865, _868, _871), vec3(_3675 * _3669, _3675 * _3670, _3675 * _3671));
                                float _4811 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3686 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3690 = ((_3686 * _3686) * (_3668 + (-1.0))) + 1.0;
                                float _3691 = _3628 * _3667;
                                float _3692 = _3691 * _3691;
                                float _3698 = ((1.0 - _3692) * dot(vec3(_865, _868, _871), vec3(_3615, _3616, _3617))) + _3692;
                                float _4822 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3699 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3700 = 1.0 - _3667;
                                float _3710 = (0.5 / (((_3699 * ((_3682 * _3700) + _3667)) + 9.9999999392252902907785028219223e-09) + (((_3699 * _3700) + _3667) * _3682))) * _3699;
                                float _4833 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3720 = (_3645 * _3622) * (((_3668 * 3.1415927410125732421875) * (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) / ((_3690 * _3690) * ((_3635 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3646 * _3491.y;
                                frontier_phi_78_pred_1 = _3646 * _3491.x;
                                frontier_phi_78_pred_2 = _3720 * _3503.z;
                                frontier_phi_78_pred_3 = _3720 * _3503.y;
                                frontier_phi_78_pred_4 = _3720 * _3503.x;
                                frontier_phi_78_pred_5 = _3646 * _3491.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3728 = frontier_phi_78_pred;
                            _3727 = frontier_phi_78_pred_1;
                            _3726 = frontier_phi_78_pred_2;
                            _3725 = frontier_phi_78_pred_3;
                            _3724 = frontier_phi_78_pred_4;
                            _3729 = frontier_phi_78_pred_5;
                            _3433 = _3727 + _3446;
                            _3434 = _3728 + _3447;
                            _3435 = _3729 + _3448;
                            _3430 = _3724 + _3443;
                            _3431 = _3725 + _3444;
                            _3432 = _3726 + _3445;
                            if (_3450 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3450;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3435;
                        frontier_phi_72_pred_1 = _3434;
                        frontier_phi_72_pred_2 = _3433;
                        frontier_phi_72_pred_3 = _3432;
                        frontier_phi_72_pred_4 = _3431;
                        frontier_phi_72_pred_5 = _3430;
                    }
                    _3103 = frontier_phi_72_pred;
                    _3101 = frontier_phi_72_pred_1;
                    _3099 = frontier_phi_72_pred_2;
                    _3097 = frontier_phi_72_pred_3;
                    _3095 = frontier_phi_72_pred_4;
                    _3093 = frontier_phi_72_pred_5;
                    uint _3238 = _3237 + 1u;
                    if (_3238 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3231 = _3093;
                        _3232 = _3095;
                        _3233 = _3097;
                        _3234 = _3099;
                        _3235 = _3101;
                        _3236 = _3103;
                        _3237 = _3238;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3103;
                frontier_phi_60_61_ladder_1 = _3101;
                frontier_phi_60_61_ladder_2 = _3097;
                frontier_phi_60_61_ladder_3 = _3095;
                frontier_phi_60_61_ladder_4 = _3093;
                frontier_phi_60_61_ladder_5 = _3099;
            }
            else
            {
                frontier_phi_60_61_ladder = _2990;
                frontier_phi_60_61_ladder_1 = _2988;
                frontier_phi_60_61_ladder_2 = _2984;
                frontier_phi_60_61_ladder_3 = _2982;
                frontier_phi_60_61_ladder_4 = _2980;
                frontier_phi_60_61_ladder_5 = _2986;
            }
            _3092 = frontier_phi_60_61_ladder_4;
            _3094 = frontier_phi_60_61_ladder_3;
            _3096 = frontier_phi_60_61_ladder_2;
            _3098 = frontier_phi_60_61_ladder_5;
            _3100 = frontier_phi_60_61_ladder_1;
            _3102 = frontier_phi_60_61_ladder;
        }
        float _3107 = isnan(1.0) ? _909 : (isnan(_909) ? 1.0 : min(_909, 1.0));
        _2913 = (_3107 * _3098) + _2444;
        _2915 = (_3107 * _3100) + _2446;
        _2917 = (_3107 * _3102) + _2448;
        _2919 = ((_3092 * 0.039999999105930328369140625) * _3107) + _2767;
        _2921 = ((_3094 * 0.039999999105930328369140625) * _3107) + _2769;
        _2923 = ((_3096 * 0.039999999105930328369140625) * _3107) + _2771;
    }
    else
    {
        _2913 = _2444;
        _2915 = _2446;
        _2917 = _2448;
        _2919 = _2767;
        _2921 = _2769;
        _2923 = _2771;
    }
    float _4849 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4860 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _4871 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    uint _2943 = _249 + 6u;
    float _2951 = _846 / cbSceneParam._m0[86u].x;
    float _2952 = _847 / cbSceneParam._m0[86u].y;
    vec4 _2966 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2951, _2952, (log2((isnan(cbSceneParam._m0[77u].w) ? _780 : (isnan(_780) ? cbSceneParam._m0[77u].w : min(_780, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2968 = _2966.x;
    float _2969 = _2966.y;
    float _2970 = _2966.z;
    float _2971 = _2966.w;
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    if (_780 > cbSceneParam._m0[78u].w)
    {
        float _3005 = isnan(_780) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _780 : min(cbSceneParam._m0[80u].w, _780));
        float _3006 = _3005 / _780;
        float _3017 = _3006 * _831;
        float _3018 = _832 * _3006;
        float _3019 = (-0.0) - _3018;
        float _3020 = _3006 * _833;
        float _3022 = (cbSceneParam._m0[77u].w * _3019) / _3005;
        float _3023 = _3022 + cbSceneParam._m0[79u].w;
        float _3024 = cbSceneParam._m0[79u].w - _3018;
        float _3030 = sqrt(((_3017 * _3017) + (_3018 * _3018)) + (_3020 * _3020));
        float _3033 = (1.0 - (cbSceneParam._m0[77u].w / _3005)) * _3030;
        float _3038 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3040 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3193;
        if (abs((_3019 - _3022) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3193 = ((((_3023 > 0.0) ? exp2(_3038 * _3023) : (2.0 - exp2(_3040 * _3023))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3033;
        }
        else
        {
            float _3153 = 1.0 / cbSceneParam._m0[80u].x;
            float _3154 = isnan(_3024) ? _3023 : (isnan(_3023) ? _3024 : max(_3023, _3024));
            float _3155 = isnan(_3024) ? _3023 : (isnan(_3023) ? _3024 : min(_3023, _3024));
            float _3164 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : min(_3154, 0.0));
            float _3165 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : min(_3155, 0.0));
            _3193 = ((abs(_3030 / _3019) * cbSceneParam._m0[80u].y) * ((((_3164 - _3165) * 2.0) - ((exp2(_3038 * (isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0)))) - exp2(_3038 * (isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0))))) * _3153)) - ((exp2(_3040 * _3164) - exp2(_3040 * _3165)) * _3153))) + (_3033 * cbSceneParam._m0[80u].z);
        }
        vec4 _3195 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2951, _2952, 1.0), 0.0);
        float _3204 = exp2((_3193 * (-1.44269502162933349609375)) * (1.0 - _3195.w));
        float _3205 = log2(_3204);
        float _3221 = log2(_2971);
        _3042 = (exp2(_3221 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].x)) * _3195.x) / cbSceneParam._m0[78u].x)) + _2968;
        _3044 = (exp2(_3221 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].y)) * _3195.y) / cbSceneParam._m0[78u].y)) + _2969;
        _3046 = (exp2(_3221 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].z)) * _3195.z) / cbSceneParam._m0[78u].z)) + _2970;
        _3048 = _3204 * _2971;
    }
    else
    {
        _3042 = _2968;
        _3044 = _2969;
        _3046 = _2970;
        _3048 = _2971;
    }
    float _3060 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3061 = _3060 == 3.0;
    float _3062 = log2(_3048);
    float _3069 = exp2(_3062 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2913 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _909))) + ((_2919 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1714)) * cbPerFrame._m0[3u].x));
    float _3070 = exp2(_3062 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2915 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _909))) + ((_2921 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1714)) * cbPerFrame._m0[3u].x));
    float _3071 = exp2(_3062 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2917 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _909))) + ((_2923 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1714)) * cbPerFrame._m0[3u].x));
    float _3080 = (_3060 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3080 * (_3061 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3042)));
    SV_Target.y = _3080 * (_3061 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3044)));
    SV_Target.z = _3080 * (_3061 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3046)));
    SV_Target.w = cbInstanceData._m0[_2943].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2943].w;
}


