#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1506;
float _4145;
float _4146;
float _4147;
float _4148;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _307.x * cbMtdParam._m0[11u].x;
    float _314 = _307.y * cbMtdParam._m0[11u].y;
    float _315 = _307.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _353.x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[24u].z) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4157 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _432 = (_425 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _433 = (_425 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _434 = (_425 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _471 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _473 = _471.x;
    float _483 = dot(vec4(_473, _471.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _497 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _353.y) * 2.0) - ((((_473 - _483) * cbMtdParam._m0[24u].z) + _483) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4168 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _498 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _505 = (_498 * ((_451.x * cbMtdParam._m0[13u].x) - _432)) + _432;
    float _506 = (_498 * ((_451.y * cbMtdParam._m0[13u].y) - _433)) + _433;
    float _507 = (_498 * ((_451.z * cbMtdParam._m0[13u].z) - _434)) + _434;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _286) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _287) + cbTextureTilingScale._m0[24u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _544 = _542.x;
    float _554 = dot(vec4(_544, _542.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _566 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _353.z) * 2.0) - ((((_544 - _554) * cbMtdParam._m0[24u].z) + _554) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4179 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _574 = (_567 * ((_525.x * cbMtdParam._m0[14u].x) - _505)) + _505;
    float _575 = (_567 * ((_525.y * cbMtdParam._m0[14u].y) - _506)) + _506;
    float _576 = (_567 * ((_525.z * cbMtdParam._m0[14u].z) - _507)) + _507;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _286) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _287) + cbTextureTilingScale._m0[14u].w));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _633 = _631.x;
    float _634 = _631.y;
    float _635 = _631.z;
    float _642 = ((_614.x - _633) * _425) + _633;
    float _643 = ((_614.y - _634) * _425) + _634;
    float _644 = ((_614.z - _635) * _425) + _635;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _667 = ((_656.x - _642) * _498) + _642;
    float _668 = ((_656.y - _643) * _498) + _643;
    float _669 = ((_656.z - _644) * _498) + _644;
    vec4 _681 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _286) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _287) + cbTextureTilingScale._m0[23u].w));
    float _694 = ((_681.z - _669) * _567) + _669;
    float _697 = ((((_681.x - _667) * _567) + _667) * 2.0) + (-1.0);
    float _699 = ((((_681.y - _668) * _567) + _668) * 2.0) + (-1.0);
    float _700 = dot(vec2(_697, _699), vec2(_697, _699));
    float _4190 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _705 = sqrt(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))));
    vec4 _719 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _744 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _746 = _744.x;
    float _747 = 1.0 - _746;
    float _753 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _756 = ((isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : min(_753, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _765 = (_756 - ((((((_746 - _747) * cbMtdParam._m0[24u].w) + _747) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _756))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4211 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _766 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _773 = (_766 * ((_594.x * cbMtdParam._m0[18u].x) - _574)) + _574;
    float _774 = (_766 * ((_594.y * cbMtdParam._m0[18u].y) - _575)) + _575;
    float _775 = (_766 * ((_594.z * cbMtdParam._m0[18u].z) - _576)) + _576;
    vec4 _787 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _789 = _787.x;
    float _790 = 1.0 - _789;
    float _817 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_789 - _790) * cbMtdParam._m0[24u].y) + _790) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4222 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _818 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _826 = ((((cbMtdParam._m0[10u].x - _773) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _818) + _773;
    float _827 = ((((cbMtdParam._m0[10u].y - _774) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _818) + _774;
    float _828 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _775)) * _818) + _775;
    float _832 = (cbMtdParam._m0[19u].w * (_719.z - _694)) + _694;
    vec4 _846 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _853 = (_846.x * 2.0) + (-1.0);
    float _854 = (_846.y * 2.0) + (-1.0);
    float _855 = dot(vec2(_853, _854), vec2(_853, _854));
    float _4233 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _863 = (_766 * (_846.z - _832)) + _832;
    float _866 = ((cbMtdParam._m0[23u].y - _863) * _818) + _863;
    vec4 _885 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _891 = (_885.x * 2.0) + (-1.0);
    float _892 = (_885.y * 2.0) + (-1.0);
    float _893 = dot(vec2(_891, _892), vec2(_891, _892));
    float _4244 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _901 = (((_719.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _697;
    float _902 = (((_719.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _699;
    float _914 = (((_853 - _901) + (cbMtdParam._m0[21u].x * _901)) * _766) + _901;
    float _915 = (((_854 - _902) + (cbMtdParam._m0[21u].x * _902)) * _766) + _902;
    float _916 = (_766 * (sqrt(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) - _705)) + _705;
    float _927 = (((_891 - _914) + (_914 * cbMtdParam._m0[22u].z)) * _818) + _914;
    float _928 = (((_892 - _915) + (_915 * cbMtdParam._m0[22u].z)) * _818) + _915;
    float _929 = ((sqrt(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) - _916) * _818) + _916;
    float _931 = cbMtdParam._m0[22u].x + _719.w;
    float _934 = fma(_929, _254 * NORMAL.x, fma(_928, _261 * TANGENT.x, (_247 * _239) * _927));
    float _937 = fma(_929, _254 * NORMAL.y, fma(_928, _261 * TANGENT.y, (_247 * _240) * _927));
    float _940 = fma(_929, _254 * NORMAL.z, fma(_928, _261 * TANGENT.z, (_247 * _241) * _927));
    float _944 = inversesqrt(dot(vec3(_934, _937, _940), vec3(_934, _937, _940)));
    float _945 = _944 * _934;
    float _946 = _944 * _937;
    float _947 = _944 * _940;
    float _4255 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _948 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _4266 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4277 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4288 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4299 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _966 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1017 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1007);
    float _1018 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1007);
    float _1019 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1007);
    float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
    float _1024 = _1017 * _1023;
    float _1025 = _1018 * _1023;
    float _1026 = _1019 * _1023;
    vec4 _1031 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1033 = _1031.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1187 = sqrt(((_1017 * _1017) + (_1018 * _1018)) + (_1019 * _1019));
        float _1193 = (cbMatDynParam._m0[5u].x * _1187) + cbMatDynParam._m0[5u].y;
        float _4310 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1198 = (cbMatDynParam._m0[5u].z * _1187) + cbMatDynParam._m0[5u].w;
        float _4321 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) - _1194)) + _1194) < ((_1033 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1044 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1045 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1063 = fma(_947, cbSceneParam._m0[5u].z, fma(_946, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _945));
    float _1066 = fma(_947, cbSceneParam._m0[6u].z, fma(_946, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _945));
    float _1069 = fma(_947, cbSceneParam._m0[7u].z, fma(_946, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _945));
    uint _1082 = _267 + 9u;
    uint _1083 = _1082 + uint(cbMatDynParam._m0[0u].w);
    float _1089 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * cbInstanceData._m0[_1083].x;
    float _1090 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * cbInstanceData._m0[_1083].y;
    float _1091 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * cbInstanceData._m0[_1083].z;
    float _4332 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1093 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _4354 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    vec4 _1103 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1044, cbSceneParam._m0[86u].y * _1045));
    float _1107 = ((isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * TEXCOORD_5.w) * _1103.x;
    float _1108 = dot(vec3(_945, _946, _947), vec3(_1024, _1025, _1026));
    float _1111 = _1108 * 2.0;
    float _1115 = (_1111 * _945) - _1024;
    float _1116 = (_1111 * _946) - _1025;
    float _1117 = (_1111 * _947) - _1026;
    float _1121 = abs(dot(vec3(_1024, _1025, _1026), vec3(_945, _946, _947)));
    float _4365 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1123 = sqrt(_948);
    float _1136 = exp2((_1123 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1123 * 3.0));
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1505;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1230 = fma(_1176, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168));
        float _1234 = fma(_1176, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168));
        float _1238 = fma(_1176, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168));
        float _1263 = _1168 + _945;
        float _1264 = _1172 + _946;
        float _1265 = _1176 + _947;
        float _1275 = fma(_1265, cbModelParam._m0[26u].z, fma(_1264, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1263)) - _1230;
        float _1276 = fma(_1265, cbModelParam._m0[27u].z, fma(_1264, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1263)) - _1234;
        float _1277 = fma(_1265, cbModelParam._m0[28u].z, fma(_1264, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1263)) - _1238;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1294 = ((_1281 * _1275) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1230 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1281 * _1276) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1234 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1281 * _1277) / cbModelParam._m0[34u].z) + ((((((_1238 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        float _1333 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1299.x + (-0.5));
        float _1335 = _1333 * (_1299.y + (-0.5));
        float _1336 = _1333 * (_1299.z + (-0.5));
        float _1343 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1306.x + (-0.5));
        float _1345 = _1343 * (_1306.y + (-0.5));
        float _1346 = _1343 * (_1306.z + (-0.5));
        float _1353 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1313.x + (-0.5));
        float _1355 = _1353 * (_1313.y + (-0.5));
        float _1356 = _1353 * (_1313.z + (-0.5));
        float _1363 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1320.x + (-0.5));
        float _1365 = _1363 * (_1320.y + (-0.5));
        float _1366 = _1363 * (_1320.z + (-0.5));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = _1334 * 0.5;
        float _1371 = _1344 * 0.5;
        float _1372 = _1354 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1387 = (dot(vec3(_945, _946, _947), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4391 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1397 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4402 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4413 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_1399 + 1.0))) + _1404) * _1367;
        float _1414 = _1335 * 0.5;
        float _1415 = _1345 * 0.5;
        float _1416 = _1355 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_945, _946, _947), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4424 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4435 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4446 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_1441 + 1.0))) + _1446) * _1368;
        float _1456 = _1336 * 0.5;
        float _1457 = _1346 * 0.5;
        float _1458 = _1356 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_945, _946, _947), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4457 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4468 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4479 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_1483 + 1.0))) + _1488) * _1369;
        _1505 = _1336;
        _1507 = _1335;
        _1508 = _1334;
        _1509 = _1346;
        _1510 = _1345;
        _1511 = _1344;
        _1512 = _1356;
        _1513 = _1355;
        _1514 = _1354;
        _1515 = _1369;
        _1516 = _1368;
        _1517 = _1367;
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1506;
        _1507 = _1506;
        _1508 = _1506;
        _1509 = _1506;
        _1510 = _1506;
        _1511 = _1506;
        _1512 = _1506;
        _1513 = _1506;
        _1514 = _1506;
        _1515 = _1506;
        _1516 = _1506;
        _1517 = _1506;
        _1518 = 0.0;
        _1519 = 0.0;
        _1520 = 0.0;
    }
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1546 = fma(_1176, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168));
        float _1550 = fma(_1176, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168));
        float _1554 = fma(_1176, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168));
        float _1577 = _1168 + _945;
        float _1578 = _1172 + _946;
        float _1579 = _1176 + _947;
        float _1589 = fma(_1579, cbModelParam._m0[30u].z, fma(_1578, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1577)) - _1546;
        float _1590 = fma(_1579, cbModelParam._m0[31u].z, fma(_1578, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1577)) - _1550;
        float _1591 = fma(_1579, cbModelParam._m0[32u].z, fma(_1578, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1577)) - _1554;
        float _1595 = inversesqrt(dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591)));
        float _1608 = ((_1595 * _1589) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1546 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1609 = ((_1595 * _1590) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1550 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1610 = ((_1595 * _1591) / cbModelParam._m0[35u].z) + ((((((_1554 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1626 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        float _1645 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1612.x + (-0.5));
        float _1647 = _1645 * (_1612.y + (-0.5));
        float _1648 = _1645 * (_1612.z + (-0.5));
        float _1655 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1619.x + (-0.5));
        float _1657 = _1655 * (_1619.y + (-0.5));
        float _1658 = _1655 * (_1619.z + (-0.5));
        float _1665 = exp2((_1626.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1626.x + (-0.5));
        float _1667 = _1665 * (_1626.y + (-0.5));
        float _1668 = _1665 * (_1626.z + (-0.5));
        float _1675 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1676 = _1675 * (_1633.x + (-0.5));
        float _1677 = _1675 * (_1633.y + (-0.5));
        float _1678 = _1675 * (_1633.z + (-0.5));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = _1646 * 0.5;
        float _1683 = _1656 * 0.5;
        float _1684 = _1666 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_945, _946, _947), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4520 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4531 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4542 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_1709 + 1.0))) + _1714) * _1679;
        float _1724 = _1647 * 0.5;
        float _1725 = _1657 * 0.5;
        float _1726 = _1667 * 0.5;
        float _1727 = dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726));
        float _1732 = (_1727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1727);
        float _1740 = (dot(vec3(_945, _946, _947), vec3(_1732 * _1724, _1732 * _1725, _1732 * _1726)) + 1.0) * 0.5;
        float _4553 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4564 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _1751 = _1750 * 2.0;
        float _1755 = (1.0 - _1750) / (_1750 + 1.0);
        float _4575 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _1765 = ((((1.0 - _1756) * (_1751 + 2.0)) * exp2(log2(isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_1751 + 1.0))) + _1756) * _1680;
        float _1766 = _1648 * 0.5;
        float _1767 = _1658 * 0.5;
        float _1768 = _1668 * 0.5;
        float _1769 = dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768));
        float _1774 = (_1769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1769);
        float _1782 = (dot(vec3(_945, _946, _947), vec3(_1774 * _1766, _1774 * _1767, _1774 * _1768)) + 1.0) * 0.5;
        float _4586 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1791 = sqrt(((_1767 * _1767) + (_1766 * _1766)) + (_1768 * _1768)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4597 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _1793 = _1792 * 2.0;
        float _1797 = (1.0 - _1792) / (_1792 + 1.0);
        float _4608 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _1807 = ((((1.0 - _1798) * (_1793 + 2.0)) * exp2(log2(isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_1793 + 1.0))) + _1798) * _1681;
        _1815 = _1648;
        _1816 = _1647;
        _1817 = _1646;
        _1818 = _1658;
        _1819 = _1657;
        _1820 = _1656;
        _1821 = _1668;
        _1822 = _1667;
        _1823 = _1666;
        _1824 = _1681;
        _1825 = _1680;
        _1826 = _1679;
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)));
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)));
    }
    else
    {
        _1815 = _1506;
        _1816 = _1506;
        _1817 = _1506;
        _1818 = _1506;
        _1819 = _1506;
        _1820 = _1506;
        _1821 = _1506;
        _1822 = _1506;
        _1823 = _1506;
        _1824 = _1506;
        _1825 = _1506;
        _1826 = _1506;
        _1827 = 0.0;
        _1828 = 0.0;
        _1829 = 0.0;
    }
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1518)) + _1518;
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1519)) + _1519;
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1520)) + _1520;
    float _1862 = fma(_1841, cbSceneParam._m0[89u].z, fma(_1840, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1865 = fma(_1841, cbSceneParam._m0[90u].z, fma(_1840, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1868 = fma(_1841, cbSceneParam._m0[91u].z, fma(_1840, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1839));
    float _1883 = _1115 * 0.5;
    float _1884 = _1116 * 0.5;
    float _1885 = _1117 * 0.5;
    float _1886 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1889 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1892 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1926;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1899 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1505, _1509, _1512, _1515));
        float _1903 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1507, _1510, _1513, _1516));
        float _1907 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1508, _1511, _1514, _1517));
        float _1914 = dot(vec4(cbModelParam._m0[39u]), vec4(_1883, _1884, _1885, 1.0));
        _1926 = dot(vec3(isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1914) ? 0.0 : (isnan(0.0) ? _1914 : max(0.0, _1914))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1926 = 1.0;
    }
    float _1937;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1928 = dot(vec4(cbModelParam._m0[40u]), vec4(_1883, _1884, _1885, 1.0));
        _1937 = dot(vec3(isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1928) ? 0.0 : (isnan(0.0) ? _1928 : max(0.0, _1928))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1937 = 1.0;
    }
    float _1941 = (_1937 * cbModelParam._m0[1u].x) + (_1926 * (1.0 - cbModelParam._m0[1u].x));
    float _1951 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _948);
    float _1952 = isnan(_1951) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1951 : min(cbModelParam._m0[25u].z, _1951));
    float _2032;
    float _2034;
    float _2036;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1999 = fma(_1176, cbModelParam._m0[13u].z, fma(_1172, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1168)) + cbModelParam._m0[13u].w;
        float _2003 = fma(_1176, cbModelParam._m0[14u].z, fma(_1172, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1168)) + cbModelParam._m0[14u].w;
        float _2007 = fma(_1176, cbModelParam._m0[15u].z, fma(_1172, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1168)) + cbModelParam._m0[15u].w;
        float _2010 = fma(_1117, cbModelParam._m0[13u].z, fma(_1116, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1115));
        float _2013 = fma(_1117, cbModelParam._m0[14u].z, fma(_1116, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1115));
        float _2016 = fma(_1117, cbModelParam._m0[15u].z, fma(_1116, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1115));
        float _2044;
        if (_2010 > 0.0)
        {
            _2044 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2044 = frontier_phi_17_15_ladder;
        }
        float _2213;
        if (_2013 > 0.0)
        {
            _2213 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2213 = frontier_phi_26_22_ladder;
        }
        float _2508;
        if (_2016 > 0.0)
        {
            _2508 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2508 = frontier_phi_38_33_ladder;
        }
        float _2510 = isnan(_2213) ? _2044 : (isnan(_2044) ? _2213 : min(_2044, _2213));
        float _2511 = isnan(_2508) ? _2510 : (isnan(_2510) ? _2508 : min(_2510, _2508));
        float _2515 = (_2511 * _2010) + _1999;
        float _2516 = (_2511 * _2013) + _2003;
        float _2517 = (_2511 * _2016) + _2007;
        float _2518 = _2511 * 9.9999997473787516355514526367188e-05;
        float _2520 = (-1.0) - _2518;
        float _2522 = _2518 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2517 > _2522) || ((_2517 < _2520) || ((_2516 > _2522) || ((_2516 < _2520) || ((_2515 < _2520) || (_2515 > _2522))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2662 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2517, cbModelParam._m0[9u].z, fma(_2516, cbModelParam._m0[9u].y, _2515 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2517, cbModelParam._m0[10u].z, fma(_2516, cbModelParam._m0[10u].y, _2515 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2517, cbModelParam._m0[11u].z, fma(_2516, cbModelParam._m0[11u].y, _2515 * cbModelParam._m0[11u].x))), _1952);
            frontier_phi_16_38_ladder = _2662.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2662.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2662.x * cbModelParam._m0[1u].y;
        }
        _2032 = frontier_phi_16_38_ladder_2;
        _2034 = frontier_phi_16_38_ladder_1;
        _2036 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1115, _1116, _1117), _1952);
        _2032 = _2020.x * cbModelParam._m0[1u].y;
        _2034 = _2020.y * cbModelParam._m0[1u].y;
        _2036 = _2020.z * cbModelParam._m0[1u].y;
    }
    float _2040 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _948);
    float _2041 = isnan(_2040) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2040 : min(cbModelParam._m0[25u].w, _2040));
    float _2130;
    float _2132;
    float _2134;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2094 = fma(_1176, cbModelParam._m0[21u].z, fma(_1172, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1168)) + cbModelParam._m0[21u].w;
        float _2098 = fma(_1176, cbModelParam._m0[22u].z, fma(_1172, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1168)) + cbModelParam._m0[22u].w;
        float _2102 = fma(_1176, cbModelParam._m0[23u].z, fma(_1172, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1168)) + cbModelParam._m0[23u].w;
        float _2105 = fma(_1117, cbModelParam._m0[21u].z, fma(_1116, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1115));
        float _2108 = fma(_1117, cbModelParam._m0[22u].z, fma(_1116, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1115));
        float _2111 = fma(_1117, cbModelParam._m0[23u].z, fma(_1116, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1115));
        float _2218;
        if (_2105 > 0.0)
        {
            _2218 = abs((1.0 - _2094) / _2105);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2094 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2218 = frontier_phi_28_24_ladder;
        }
        float _2535;
        if (_2108 > 0.0)
        {
            _2535 = abs((1.0 - _2098) / _2108);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2098 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2535 = frontier_phi_40_35_ladder;
        }
        float _2862;
        if (_2111 > 0.0)
        {
            _2862 = abs((1.0 - _2102) / _2111);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2102 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2862 = frontier_phi_50_47_ladder;
        }
        float _2864 = isnan(_2535) ? _2218 : (isnan(_2218) ? _2535 : min(_2218, _2535));
        float _2865 = isnan(_2862) ? _2864 : (isnan(_2864) ? _2862 : min(_2864, _2862));
        float _2869 = (_2865 * _2105) + _2094;
        float _2870 = (_2865 * _2108) + _2098;
        float _2871 = (_2865 * _2111) + _2102;
        float _2872 = _2865 * 9.9999997473787516355514526367188e-05;
        float _2873 = (-1.0) - _2872;
        float _2875 = _2872 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2871 > _2875) || ((_2871 < _2873) || ((_2870 > _2875) || ((_2870 < _2873) || ((_2869 < _2873) || (_2869 > _2875))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2871, cbModelParam._m0[17u].z, fma(_2870, cbModelParam._m0[17u].y, _2869 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2871, cbModelParam._m0[18u].z, fma(_2870, cbModelParam._m0[18u].y, _2869 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2871, cbModelParam._m0[19u].z, fma(_2870, cbModelParam._m0[19u].y, _2869 * cbModelParam._m0[19u].x))), _2041);
            frontier_phi_25_50_ladder = _2989.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2989.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2989.x * cbModelParam._m0[1u].z;
        }
        _2130 = frontier_phi_25_50_ladder_2;
        _2132 = frontier_phi_25_50_ladder_1;
        _2134 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2114 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1115, _1116, _1117), _2041);
        _2130 = _2114.x * cbModelParam._m0[1u].z;
        _2132 = _2114.y * cbModelParam._m0[1u].z;
        _2134 = _2114.z * cbModelParam._m0[1u].z;
    }
    float _2146 = ((((1.0 - _1136) * ((_1123 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1136 * _1123)) * _1107;
    float _2147 = _2146 * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2148 = _2146 * ((cbModelParam._m0[1u].w * (_2132 - _2034)) + _2034);
    float _2149 = _2146 * ((cbModelParam._m0[1u].w * (_2134 - _2036)) + _2036);
    float _2152 = fma(_2149, cbSceneParam._m0[89u].z, fma(_2148, cbSceneParam._m0[89u].y, _2147 * cbSceneParam._m0[89u].x));
    float _2155 = fma(_2149, cbSceneParam._m0[90u].z, fma(_2148, cbSceneParam._m0[90u].y, _2147 * cbSceneParam._m0[90u].x));
    float _2158 = fma(_2149, cbSceneParam._m0[91u].z, fma(_2148, cbSceneParam._m0[91u].y, _2147 * cbSceneParam._m0[91u].x));
    float _2192 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2196 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2200 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2204 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2205 = _2192 / _2204;
    float _2206 = _2196 / _2204;
    float _2207 = _2200 / _2204;
    float _2354;
    float _2355;
    float _2356;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2234 = ((uint(_2207 > cbSceneParam._m0[59u].y) + uint(_2207 > cbSceneParam._m0[59u].x)) + uint(_2207 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2235 = _2234 + 43u;
        uint _2243 = _2234 + 44u;
        uint _2251 = _2234 + 45u;
        uint _2259 = _2234 + 46u;
        float _2270 = fma(_2204, cbSceneParam._m0[_2235].w, fma(_2200, cbSceneParam._m0[_2235].z, fma(_2196, cbSceneParam._m0[_2235].y, _2192 * cbSceneParam._m0[_2235].x)));
        float _2274 = fma(_2204, cbSceneParam._m0[_2243].w, fma(_2200, cbSceneParam._m0[_2243].z, fma(_2196, cbSceneParam._m0[_2243].y, _2192 * cbSceneParam._m0[_2243].x)));
        float _2282 = fma(_2204, cbSceneParam._m0[_2259].w, fma(_2200, cbSceneParam._m0[_2259].z, fma(_2196, cbSceneParam._m0[_2259].y, _2192 * cbSceneParam._m0[_2259].x)));
        float _2287 = cbSceneParam._m0[33u].z * _2282;
        float _2289 = cbSceneParam._m0[33u].w * _2282;
        float _2292 = fma(_2204, cbSceneParam._m0[_2251].w, fma(_2200, cbSceneParam._m0[_2251].z, fma(_2196, cbSceneParam._m0[_2251].y, _2192 * cbSceneParam._m0[_2251].x))) / _2282;
        float _2340 = (cbSceneParam._m0[33u].x - sqrt(((_2206 * _2206) + (_2205 * _2205)) + (_2207 * _2207))) * cbSceneParam._m0[33u].y;
        float _4734 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2347 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2287 + _2270) / _2282, (_2289 + _2274) / _2282), _2292), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2289 + _2270) / _2282, (_2274 - _2287) / _2282), _2292), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2270 - _2287) / _2282, (_2274 - _2289) / _2282), _2292), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2270 - _2289) / _2282, (_2287 + _2274) / _2282), _2292), 0.0)).x), vec4(0.25)));
        _2354 = 1.0 - (_2347 * cbSceneParam._m0[34u].x);
        _2355 = 1.0 - (_2347 * cbSceneParam._m0[34u].y);
        _2356 = 1.0 - (_2347 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2354 = 1.0;
        _2355 = 1.0;
        _2356 = 1.0;
    }
    float _2420;
    float _2422;
    float _2424;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2408 = fma(_2204, cbSceneParam._m0[63u].w, fma(_2200, cbSceneParam._m0[63u].z, fma(_2196, cbSceneParam._m0[63u].y, _2192 * cbSceneParam._m0[63u].x)));
        float _2409 = fma(_2204, cbSceneParam._m0[60u].w, fma(_2200, cbSceneParam._m0[60u].z, fma(_2196, cbSceneParam._m0[60u].y, _2192 * cbSceneParam._m0[60u].x))) / _2408;
        float _2410 = fma(_2204, cbSceneParam._m0[61u].w, fma(_2200, cbSceneParam._m0[61u].z, fma(_2196, cbSceneParam._m0[61u].y, _2192 * cbSceneParam._m0[61u].x))) / _2408;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2409 >= cbSceneParam._m0[64u].x) && (_2410 >= cbSceneParam._m0[64u].y)) && (_2409 <= cbSceneParam._m0[64u].z)) && (_2410 <= cbSceneParam._m0[64u].w))
        {
            float _2548 = fma(_2204, cbSceneParam._m0[62u].w, fma(_2200, cbSceneParam._m0[62u].z, fma(_2196, cbSceneParam._m0[62u].y, _2192 * cbSceneParam._m0[62u].x))) / _2408;
            float _2552 = isnan(cbSceneParam._m0[41u].w) ? _2548 : (isnan(_2548) ? cbSceneParam._m0[41u].w : max(_2548, cbSceneParam._m0[41u].w));
            float _2595 = (cbSceneParam._m0[33u].x - sqrt(((_2206 * _2206) + (_2205 * _2205)) + (_2207 * _2207))) * cbSceneParam._m0[33u].y;
            float _4750 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
            float _2602 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2409, cbSceneParam._m0[33u].w + _2410), _2552), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2409, _2410 - cbSceneParam._m0[33u].z), _2552), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2409 - cbSceneParam._m0[33u].z, _2410 - cbSceneParam._m0[33u].w), _2552), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2409 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2410), _2552), 0.0)).x), vec4(0.25)));
            float _2606 = 1.0 - (_2602 * cbSceneParam._m0[34u].x);
            float _2607 = 1.0 - (_2602 * cbSceneParam._m0[34u].y);
            float _2608 = 1.0 - (_2602 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2608) ? _2356 : (isnan(_2356) ? _2608 : min(_2356, _2608));
            frontier_phi_37_36_ladder_1 = isnan(_2607) ? _2355 : (isnan(_2355) ? _2607 : min(_2355, _2607));
            frontier_phi_37_36_ladder_2 = isnan(_2606) ? _2354 : (isnan(_2354) ? _2606 : min(_2354, _2606));
        }
        else
        {
            frontier_phi_37_36_ladder = _2356;
            frontier_phi_37_36_ladder_1 = _2355;
            frontier_phi_37_36_ladder_2 = _2354;
        }
        _2420 = frontier_phi_37_36_ladder_2;
        _2422 = frontier_phi_37_36_ladder_1;
        _2424 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2420 = _2354;
        _2422 = _2355;
        _2424 = _2356;
    }
    uvec4 _2429 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2431 = _2429.x * 14u;
    uint _2432 = _2431 + 13u;
    float _2439 = _1107 + (-1.0);
    float _2444 = (cbLight._m0[_2432].x * _2439) + 1.0;
    float _2445 = (cbLight._m0[_2432].y * _2439) + 1.0;
    float _2446 = (cbLight._m0[_2432].z * _2439) + 1.0;
    float _2447 = (cbLight._m0[_2432].w * _2439) + 1.0;
    uint _2448 = _2431 + 5u;
    float _2454 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
    uint _2458 = _2431 + 4u;
    float _2467 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
    uint _2471 = _2431 | 1u;
    float _2482 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_945, _946, _947));
    float _2485 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_945, _946, _947));
    float _4786 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _4797 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2490 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * 0.3183098733425140380859375;
    float _2492 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * 0.3183098733425140380859375;
    float _2499 = ((cbLight._m0[_2448].x * _2454) * _2492) + (((cbLight._m0[_2458].x * _2420) * _2467) * _2490);
    float _2500 = ((_2454 * cbLight._m0[_2448].y) * _2492) + (((cbLight._m0[_2458].y * _2422) * _2467) * _2490);
    float _2501 = ((_2454 * cbLight._m0[_2448].z) * _2492) + (((cbLight._m0[_2458].z * _2424) * _2467) * _2490);
    uvec4 _2505 = floatBitsToUint(cbLight._m0[_2431 + 12u]);
    bool _2507 = _2505.x == 0u;
    float _2609;
    float _2611;
    float _2613;
    if (_2507)
    {
        _2609 = _2499;
        _2611 = _2500;
        _2613 = _2501;
    }
    else
    {
        uint _2617 = _2431 + 6u;
        float _2633 = (dot(vec3(cbLight._m0[_2431 + 2u].xyz), vec3(_945, _946, _947)) * 0.5) + 0.5;
        float _2634 = _2633 * _2633;
        float _4808 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2635 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2636 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
        _2609 = (((cbLight._m0[_2617].x * 0.3183098733425140380859375) * _2635) * _2636) + _2499;
        _2611 = (((cbLight._m0[_2617].y * 0.3183098733425140380859375) * _2635) * _2636) + _2500;
        _2613 = (((cbLight._m0[_2617].z * 0.3183098733425140380859375) * _2635) * _2636) + _2501;
    }
    bool _2616 = _2505.y == 0u;
    float _2671;
    float _2673;
    float _2675;
    if (_2616)
    {
        _2671 = _2609;
        _2673 = _2611;
        _2675 = _2613;
    }
    else
    {
        uint _2833 = _2431 + 7u;
        float _2849 = (dot(vec3(cbLight._m0[_2431 + 3u].xyz), vec3(_945, _946, _947)) * 0.5) + 0.5;
        float _2850 = _2849 * _2849;
        float _4824 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2851 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2852 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
        _2671 = (((cbLight._m0[_2833].x * 0.3183098733425140380859375) * _2851) * _2852) + _2609;
        _2673 = (((cbLight._m0[_2833].y * 0.3183098733425140380859375) * _2851) * _2852) + _2611;
        _2675 = (((cbLight._m0[_2833].z * 0.3183098733425140380859375) * _2851) * _2852) + _2613;
    }
    uint _2678 = _2431 + 8u;
    float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2431].w)) * _948) * 0.949999988079071044921875);
    float _2692 = _2691 * _2691;
    float _2693 = cbLight._m0[_2431].x + _1024;
    float _2694 = cbLight._m0[_2431].y + _1025;
    float _2695 = cbLight._m0[_2431].z + _1026;
    float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
    float _2700 = _2699 * _2693;
    float _2701 = _2699 * _2694;
    float _2702 = _2699 * _2695;
    float _2703 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2431].xyz));
    float _4840 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2706 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
    float _4851 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2707 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
    float _2708 = dot(vec3(_945, _946, _947), vec3(_2700, _2701, _2702));
    float _4862 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2711 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
    float _2712 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_2700, _2701, _2702));
    float _4873 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2716 = _2692 * _2692;
    float _2720 = ((_2711 * _2711) * (_2716 + (-1.0))) + 1.0;
    float _2731 = (exp2(log2(1.0 - (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2732 = 1.0 - _2692;
    float _2743 = (0.5 / (((_2707 * ((_2706 * _2732) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2707 * _2732) + _2692) * _2706))) * _2706;
    float _4884 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2745 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2716 / ((_2720 * _2720) * 3.141590118408203125));
    uint _2759 = _2431 + 9u;
    float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _948) * 0.949999988079071044921875);
    float _2771 = _2770 * _2770;
    float _2772 = cbLight._m0[_2471].x + _1024;
    float _2773 = cbLight._m0[_2471].y + _1025;
    float _2774 = cbLight._m0[_2471].z + _1026;
    float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
    float _2779 = _2778 * _2772;
    float _2780 = _2778 * _2773;
    float _2781 = _2778 * _2774;
    float _2782 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2471].xyz));
    float _4895 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2785 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
    float _2786 = dot(vec3(_945, _946, _947), vec3(_2779, _2780, _2781));
    float _4906 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
    float _2789 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
    float _2790 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2779, _2780, _2781));
    float _4917 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2794 = _2771 * _2771;
    float _2798 = ((_2789 * _2789) * (_2794 + (-1.0))) + 1.0;
    float _2807 = (exp2(log2(1.0 - (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2808 = 1.0 - _2771;
    float _2818 = (0.5 / (((_2707 * ((_2785 * _2808) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2707 * _2808) + _2771) * _2785))) * _2785;
    float _4928 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
    float _2820 = (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2794 / ((_2798 * _2798) * 3.141590118408203125));
    float _2830 = (((_2807 * cbLight._m0[_2759].x) * _2820) * _2454) + ((((cbLight._m0[_2678].x * _2420) * _2731) * _2745) * _2467);
    float _2831 = (((_2807 * cbLight._m0[_2759].y) * _2820) * _2454) + ((((cbLight._m0[_2678].y * _2422) * _2731) * _2745) * _2467);
    float _2832 = (((_2807 * cbLight._m0[_2759].z) * _2820) * _2454) + ((((cbLight._m0[_2678].z * _2424) * _2731) * _2745) * _2467);
    float _2888;
    float _2890;
    float _2892;
    if (_2507)
    {
        _2888 = _2830;
        _2890 = _2831;
        _2892 = _2832;
    }
    else
    {
        uint _2894 = _2431 + 2u;
        uint _2898 = _2431 + 10u;
        float _2912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2894].w)) * _948) * 0.949999988079071044921875);
        float _2913 = _2912 * _2912;
        float _2914 = cbLight._m0[_2894].x + _1024;
        float _2915 = cbLight._m0[_2894].y + _1025;
        float _2916 = cbLight._m0[_2894].z + _1026;
        float _2920 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
        float _2921 = _2920 * _2914;
        float _2922 = _2920 * _2915;
        float _2923 = _2920 * _2916;
        float _2924 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2894].xyz));
        float _4939 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2927 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
        float _2928 = dot(vec3(_945, _946, _947), vec3(_2921, _2922, _2923));
        float _4950 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
        float _2932 = dot(vec3(cbLight._m0[_2894].xyz), vec3(_2921, _2922, _2923));
        float _4961 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2936 = _2913 * _2913;
        float _2940 = ((_2931 * _2931) * (_2936 + (-1.0))) + 1.0;
        float _2949 = (exp2(log2(1.0 - (isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2950 = 1.0 - _2913;
        float _2960 = (0.5 / (((_2707 * ((_2927 * _2950) + _2913)) + 9.9999999392252902907785028219223e-09) + (((_2707 * _2950) + _2913) * _2927))) * _2927;
        float _4972 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2962 = (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_2936 / ((_2940 * _2940) * 3.141590118408203125));
        float _2963 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
        _2888 = (((_2949 * cbLight._m0[_2898].x) * _2962) * _2963) + _2830;
        _2890 = (((_2949 * cbLight._m0[_2898].y) * _2962) * _2963) + _2831;
        _2892 = (((_2949 * cbLight._m0[_2898].z) * _2962) * _2963) + _2832;
    }
    float _2994;
    float _2996;
    float _2998;
    if (_2616)
    {
        _2994 = _2888;
        _2996 = _2890;
        _2998 = _2892;
    }
    else
    {
        uint _3005 = _2431 + 3u;
        uint _3009 = _2431 + 11u;
        float _3023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3005].w)) * _948) * 0.949999988079071044921875);
        float _3024 = _3023 * _3023;
        float _3025 = cbLight._m0[_3005].x + _1024;
        float _3026 = cbLight._m0[_3005].y + _1025;
        float _3027 = cbLight._m0[_3005].z + _1026;
        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
        float _3032 = _3031 * _3025;
        float _3033 = _3031 * _3026;
        float _3034 = _3031 * _3027;
        float _3035 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_3005].xyz));
        float _4988 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        float _3038 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
        float _3039 = dot(vec3(_945, _946, _947), vec3(_3032, _3033, _3034));
        float _4999 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        float _3042 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
        float _3043 = dot(vec3(cbLight._m0[_3005].xyz), vec3(_3032, _3033, _3034));
        float _5010 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3047 = _3024 * _3024;
        float _3051 = ((_3042 * _3042) * (_3047 + (-1.0))) + 1.0;
        float _3060 = (exp2(log2(1.0 - (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3061 = 1.0 - _3024;
        float _3071 = (0.5 / (((_2707 * ((_3038 * _3061) + _3024)) + 9.9999999392252902907785028219223e-09) + (((_2707 * _3061) + _3024) * _3038))) * _3038;
        float _5021 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
        float _3073 = (isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_3047 / ((_3051 * _3051) * 3.141590118408203125));
        float _3074 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
        _2994 = (((_3060 * cbLight._m0[_3009].x) * _3073) * _3074) + _2888;
        _2996 = (((_3060 * cbLight._m0[_3009].y) * _3073) * _3074) + _2890;
        _2998 = (((_3060 * cbLight._m0[_3009].z) * _3073) * _3074) + _2892;
    }
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    if (_2429.y == 0u)
    {
        uvec4 _3095 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3096 = _3095.x;
        uint _3107 = uint((float(_3095.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1045) / _3096))) + floor(float(uint(cbSceneParam._m0[85u].x * _1044) / _3096)));
        float _3117 = (log2(_2207 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3118 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
        uint _3121 = uint(isnan(14.0) ? _3118 : (isnan(_3118) ? 14.0 : min(_3118, 14.0)));
        uvec4 _3126 = texelFetch(g_lightClusterGridBuffer, int(((_3121 << 2u) + (_3107 << 6u)) >> 2u));
        uint _3127 = _3126.x;
        uint _3128 = _3095.z;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        if (((((1u << ((_3128 >> 4u) & 15u)) + 4294967295u) & _3127) == 0u) || ((_3128 & 240u) == 0u))
        {
            _3207 = 0.0;
            _3209 = 0.0;
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
            _3217 = 0.0;
        }
        else
        {
            float _3208;
            float _3210;
            float _3212;
            float _3214;
            float _3216;
            float _3218;
            float _3360 = 0.0;
            float _3361 = 0.0;
            float _3362 = 0.0;
            float _3363 = 0.0;
            float _3364 = 0.0;
            float _3365 = 0.0;
            uint _3366 = 0u;
            uint _3375;
            bool _3376;
            for (;;)
            {
                _3375 = texelFetch(g_lightClassification, int((((_3121 << 5u) + (_3107 << 9u)) + (_3366 << 2u)) >> 2u)).x;
                _3376 = _3375 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3376)
                {
                    frontier_phi_71_pred = _3365;
                    frontier_phi_71_pred_1 = _3364;
                    frontier_phi_71_pred_2 = _3363;
                    frontier_phi_71_pred_3 = _3362;
                    frontier_phi_71_pred_4 = _3361;
                    frontier_phi_71_pred_5 = _3360;
                }
                else
                {
                    float _3505;
                    float _3506;
                    float _3507;
                    float _3508;
                    float _3509;
                    float _3510;
                    uint _3511;
                    _3505 = _3360;
                    _3506 = _3361;
                    _3507 = _3362;
                    _3508 = _3363;
                    _3509 = _3364;
                    _3510 = _3365;
                    _3511 = _3375;
                    float _3432;
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    for (;;)
                    {
                        uint _3515 = uint(findLSB(_3511)) + (_3366 << 5u);
                        uint _3512 = (_3511 + 4294967295u) & _3511;
                        uint _3517 = _3515 * 48u;
                        vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3517)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 3u)).x));
                        uint _3537 = (_3515 * 48u) + 4u;
                        vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3537)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 3u)).x));
                        uint _3556 = (_3515 * 48u) + 8u;
                        vec3 _3567 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3556)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 2u)).x));
                        float _3571 = _3531.x - _2205;
                        float _3572 = _3531.y - _2206;
                        float _3573 = _3531.z - _2207;
                        float _3574 = dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573));
                        float _3577 = inversesqrt(_3574);
                        float _3578 = _3577 * _3571;
                        float _3579 = _3577 * _3572;
                        float _3580 = _3577 * _3573;
                        float _3581 = dot(vec3(_1063, _1066, _1069), vec3(_3578, _3579, _3580));
                        float _3586 = 1.0 - (_3574 * _3531.w);
                        float _5047 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                        float _3587 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                        float _3588 = sqrt(_3574) * _3550.w;
                        float _3591 = 1.39999997615814208984375 / (_3588 + 1.39999997615814208984375);
                        float _3592 = _3591 * _3591;
                        float _3595 = ((1.0 - _3592) * _3581) + _3592;
                        float _3598 = _3588 * _3588;
                        float _3602 = ((isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0))) * _3587) / ((_3598 * 0.699999988079071044921875) + 1.0);
                        float _3606 = (-0.0) - _2205;
                        float _3607 = (-0.0) - _2206;
                        float _3608 = (-0.0) - _2207;
                        float _3612 = inversesqrt(dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608)));
                        float _3613 = _3612 * _3606;
                        float _3614 = _3612 * _3607;
                        float _3615 = _3612 * _3608;
                        float _3622 = exp2(log2(1.0 / ((_3598 * 3.5) + 5.0)) * 0.25);
                        float _3623 = 1.0 - _1123;
                        float _3630 = sqrt(1.0 - ((1.0 - (_3623 * _3623)) * (1.0 - (_3622 * _3622))));
                        float _3631 = _3630 * _3630;
                        float _3632 = _3631 * _3631;
                        float _3633 = _3613 + _3578;
                        float _3634 = _3614 + _3579;
                        float _3635 = _3615 + _3580;
                        float _3639 = inversesqrt(dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635)));
                        float _3643 = dot(vec3(_1063, _1066, _1069), vec3(_3613, _3614, _3615));
                        float _5063 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                        float _3646 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                        float _3647 = dot(vec3(_1063, _1066, _1069), vec3(_3639 * _3633, _3639 * _3634, _3639 * _3635));
                        float _5074 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                        float _3650 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                        float _3654 = ((_3650 * _3650) * (_3632 + (-1.0))) + 1.0;
                        float _3655 = _3591 * _3631;
                        float _3656 = _3655 * _3655;
                        float _3659 = ((1.0 - _3656) * _3581) + _3656;
                        float _5085 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                        float _3660 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
                        float _3661 = 1.0 - _3631;
                        float _3671 = (0.5 / (((_3660 * ((_3646 * _3661) + _3631)) + 9.9999999392252902907785028219223e-09) + (((_3660 * _3661) + _3631) * _3646))) * _3660;
                        float _5096 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                        float _3682 = (((_3632 * 3.1415927410125732421875) * (isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0)))) / ((_3654 * _3654) * ((_3598 * 2.1991131305694580078125) + 3.141590118408203125))) * _3587;
                        _3435 = (_3602 * _3550.x) + _3508;
                        _3436 = (_3602 * _3550.y) + _3509;
                        _3437 = (_3602 * _3550.z) + _3510;
                        _3432 = (_3682 * _3567.x) + _3505;
                        _3433 = (_3682 * _3567.y) + _3506;
                        _3434 = (_3682 * _3567.z) + _3507;
                        if (_3512 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3505 = _3432;
                            _3506 = _3433;
                            _3507 = _3434;
                            _3508 = _3435;
                            _3509 = _3436;
                            _3510 = _3437;
                            _3511 = _3512;
                        }
                    }
                    frontier_phi_71_pred = _3437;
                    frontier_phi_71_pred_1 = _3436;
                    frontier_phi_71_pred_2 = _3435;
                    frontier_phi_71_pred_3 = _3434;
                    frontier_phi_71_pred_4 = _3433;
                    frontier_phi_71_pred_5 = _3432;
                }
                _3218 = frontier_phi_71_pred;
                _3216 = frontier_phi_71_pred_1;
                _3214 = frontier_phi_71_pred_2;
                _3212 = frontier_phi_71_pred_3;
                _3210 = frontier_phi_71_pred_4;
                _3208 = frontier_phi_71_pred_5;
                uint _3367 = _3366 + 1u;
                if (_3367 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3360 = _3208;
                    _3361 = _3210;
                    _3362 = _3212;
                    _3363 = _3214;
                    _3364 = _3216;
                    _3365 = _3218;
                    _3366 = _3367;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3207 = _3208;
            _3209 = _3210;
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
            _3217 = _3218;
        }
        uvec4 _3221 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3222 = _3221.z;
        uint _3224 = (_3222 >> 8u) & 15u;
        float _3328;
        float _3330;
        float _3332;
        float _3334;
        float _3336;
        float _3338;
        if (((4294967295u << _3224) & _3127) == 0u)
        {
            _3328 = _3207;
            _3330 = _3209;
            _3332 = _3211;
            _3334 = _3213;
            _3336 = _3215;
            _3338 = _3217;
        }
        else
        {
            float _3353 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
            float _3354 = _3353 * _2205;
            float _3355 = _3353 * _2206;
            float _3356 = _3353 * _2207;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3224 < ((_3222 >> 12u) & 15u))
            {
                float _3329;
                float _3331;
                float _3333;
                float _3335;
                float _3337;
                float _3339;
                float _3488 = _3207;
                float _3489 = _3209;
                float _3490 = _3211;
                float _3491 = _3213;
                float _3492 = _3215;
                float _3493 = _3217;
                uint _3494 = _3224;
                uint _3503;
                bool _3504;
                for (;;)
                {
                    _3503 = texelFetch(g_lightClassification, int((((_3121 << 5u) + (_3107 << 9u)) + (_3494 << 2u)) >> 2u)).x;
                    _3504 = _3503 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3504)
                    {
                        frontier_phi_82_pred = _3493;
                        frontier_phi_82_pred_1 = _3492;
                        frontier_phi_82_pred_2 = _3491;
                        frontier_phi_82_pred_3 = _3490;
                        frontier_phi_82_pred_4 = _3489;
                        frontier_phi_82_pred_5 = _3488;
                    }
                    else
                    {
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3989;
                        float _3990;
                        float _3991;
                        float _3992;
                        float _3993;
                        float _3994;
                        float _3709 = _3488;
                        float _3710 = _3489;
                        float _3711 = _3490;
                        float _3712 = _3491;
                        float _3713 = _3492;
                        float _3714 = _3493;
                        uint _3715 = _3503;
                        uint _3716;
                        vec4 _3741;
                        float _3742;
                        vec4 _3757;
                        vec3 _3769;
                        vec4 _3784;
                        vec4 _3799;
                        float _3845;
                        bool _3846;
                        for (;;)
                        {
                            uint _3726 = ((_3494 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3715));
                            _3716 = (_3715 + 4294967295u) & _3715;
                            uint _3728 = _3726 * 40u;
                            _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            _3742 = _3741.w;
                            uint _3744 = (_3726 * 40u) + 4u;
                            _3757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 3u)).x));
                            uint _3759 = (_3726 * 40u) + 8u;
                            _3769 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x));
                            uint _3771 = (_3726 * 40u) + 16u;
                            _3784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 3u)).x));
                            uint _3786 = (_3726 * 40u) + 20u;
                            _3799 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 3u)).x));
                            uint _3801 = (_3726 * 40u) + 24u;
                            vec4 _3814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 3u)).x));
                            uint _3820 = (_3726 * 40u) + 28u;
                            vec4 _3833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 3u)).x));
                            _3845 = fma(_2207, _3833.z, fma(_2206, _3833.y, _3833.x * _2205)) + _3833.w;
                            _3846 = !((fma(_2207, _3814.z, fma(_2206, _3814.y, _3814.x * _2205)) + _3814.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3846)
                            {
                                float _3873 = _3741.x - _2205;
                                float _3874 = _3741.y - _2206;
                                float _3875 = _3741.z - _2207;
                                float _3876 = dot(vec3(_3873, _3874, _3875), vec3(_3873, _3874, _3875));
                                float _3879 = inversesqrt(_3876);
                                float _3880 = _3879 * _3873;
                                float _3881 = _3879 * _3874;
                                float _3882 = _3879 * _3875;
                                float _3886 = 1.0 - (_3876 / (_3742 * _3742));
                                float _5107 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3887 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                                float _3891 = sqrt(_3876) * _3757.w;
                                float _3893 = 1.39999997615814208984375 / (_3891 + 1.39999997615814208984375);
                                float _3894 = _3893 * _3893;
                                float _3897 = ((1.0 - _3894) * dot(vec3(_3880, _3881, _3882), vec3(_1063, _1066, _1069))) + _3894;
                                float _3900 = _3891 * _3891;
                                float _3904 = (fma(_2207, _3784.z, fma(_2206, _3784.y, _3784.x * _2205)) + _3784.w) / _3845;
                                float _3905 = (fma(_2207, _3799.z, fma(_2206, _3799.y, _3799.x * _2205)) + _3799.w) / _3845;
                                float _3909 = 1.0 - dot(vec2(_3904, _3905), vec2(_3904, _3905));
                                float _5123 = isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0));
                                float _3910 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
                                float _3911 = _3910 * (((isnan(0.0) ? _3897 : (isnan(_3897) ? 0.0 : max(_3897, 0.0))) * _3887) / ((_3900 * 0.699999988079071044921875) + 1.0));
                                float _3923 = exp2(log2(1.0 / ((_3900 * 3.5) + 5.0)) * 0.25);
                                float _3924 = 1.0 - _1123;
                                float _3931 = sqrt(1.0 - ((1.0 - (_3924 * _3924)) * (1.0 - (_3923 * _3923))));
                                float _3932 = _3931 * _3931;
                                float _3933 = _3932 * _3932;
                                float _3934 = _3880 - _3354;
                                float _3935 = _3881 - _3355;
                                float _3936 = _3882 - _3356;
                                float _3940 = inversesqrt(dot(vec3(_3934, _3935, _3936), vec3(_3934, _3935, _3936)));
                                float _3944 = dot(vec3(_1063, _1066, _1069), vec3((-0.0) - _3354, (-0.0) - _3355, (-0.0) - _3356));
                                float _5134 = isnan(0.0) ? _3944 : (isnan(_3944) ? 0.0 : max(_3944, 0.0));
                                float _3947 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
                                float _3948 = dot(vec3(_1063, _1066, _1069), vec3(_3940 * _3934, _3940 * _3935, _3940 * _3936));
                                float _5145 = isnan(0.0) ? _3948 : (isnan(_3948) ? 0.0 : max(_3948, 0.0));
                                float _3951 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
                                float _3955 = ((_3951 * _3951) * (_3933 + (-1.0))) + 1.0;
                                float _3956 = _3893 * _3932;
                                float _3957 = _3956 * _3956;
                                float _3963 = ((1.0 - _3957) * dot(vec3(_1063, _1066, _1069), vec3(_3880, _3881, _3882))) + _3957;
                                float _5156 = isnan(0.0) ? _3963 : (isnan(_3963) ? 0.0 : max(_3963, 0.0));
                                float _3964 = isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0));
                                float _3965 = 1.0 - _3932;
                                float _3975 = (0.5 / (((_3964 * ((_3947 * _3965) + _3932)) + 9.9999999392252902907785028219223e-09) + (((_3964 * _3965) + _3932) * _3947))) * _3964;
                                float _5167 = isnan(0.0) ? _3975 : (isnan(_3975) ? 0.0 : max(_3975, 0.0));
                                float _3985 = (_3910 * _3887) * (((_3933 * 3.1415927410125732421875) * (isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0)))) / ((_3955 * _3955) * ((_3900 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3911 * _3757.z;
                                frontier_phi_88_pred_1 = _3911 * _3757.y;
                                frontier_phi_88_pred_2 = _3911 * _3757.x;
                                frontier_phi_88_pred_3 = _3985 * _3769.z;
                                frontier_phi_88_pred_4 = _3985 * _3769.y;
                                frontier_phi_88_pred_5 = _3985 * _3769.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3994 = frontier_phi_88_pred;
                            _3993 = frontier_phi_88_pred_1;
                            _3992 = frontier_phi_88_pred_2;
                            _3991 = frontier_phi_88_pred_3;
                            _3990 = frontier_phi_88_pred_4;
                            _3989 = frontier_phi_88_pred_5;
                            _3699 = _3992 + _3712;
                            _3700 = _3993 + _3713;
                            _3701 = _3994 + _3714;
                            _3696 = _3989 + _3709;
                            _3697 = _3990 + _3710;
                            _3698 = _3991 + _3711;
                            if (_3716 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3709 = _3696;
                                _3710 = _3697;
                                _3711 = _3698;
                                _3712 = _3699;
                                _3713 = _3700;
                                _3714 = _3701;
                                _3715 = _3716;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3701;
                        frontier_phi_82_pred_1 = _3700;
                        frontier_phi_82_pred_2 = _3699;
                        frontier_phi_82_pred_3 = _3698;
                        frontier_phi_82_pred_4 = _3697;
                        frontier_phi_82_pred_5 = _3696;
                    }
                    _3339 = frontier_phi_82_pred;
                    _3337 = frontier_phi_82_pred_1;
                    _3335 = frontier_phi_82_pred_2;
                    _3333 = frontier_phi_82_pred_3;
                    _3331 = frontier_phi_82_pred_4;
                    _3329 = frontier_phi_82_pred_5;
                    uint _3495 = _3494 + 1u;
                    if (_3495 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3488 = _3329;
                        _3489 = _3331;
                        _3490 = _3333;
                        _3491 = _3335;
                        _3492 = _3337;
                        _3493 = _3339;
                        _3494 = _3495;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3335;
                frontier_phi_63_64_ladder_1 = _3339;
                frontier_phi_63_64_ladder_2 = _3337;
                frontier_phi_63_64_ladder_3 = _3333;
                frontier_phi_63_64_ladder_4 = _3331;
                frontier_phi_63_64_ladder_5 = _3329;
            }
            else
            {
                frontier_phi_63_64_ladder = _3213;
                frontier_phi_63_64_ladder_1 = _3217;
                frontier_phi_63_64_ladder_2 = _3215;
                frontier_phi_63_64_ladder_3 = _3211;
                frontier_phi_63_64_ladder_4 = _3209;
                frontier_phi_63_64_ladder_5 = _3207;
            }
            _3328 = frontier_phi_63_64_ladder_5;
            _3330 = frontier_phi_63_64_ladder_4;
            _3332 = frontier_phi_63_64_ladder_3;
            _3334 = frontier_phi_63_64_ladder;
            _3336 = frontier_phi_63_64_ladder_2;
            _3338 = frontier_phi_63_64_ladder_1;
        }
        float _3343 = isnan(1.0) ? _1107 : (isnan(_1107) ? 1.0 : min(_1107, 1.0));
        _3140 = (_3343 * _3334) + _2671;
        _3142 = (_3343 * _3336) + _2673;
        _3144 = (_3343 * _3338) + _2675;
        _3146 = ((_3328 * 0.039999999105930328369140625) * _3343) + _2994;
        _3148 = ((_3330 * 0.039999999105930328369140625) * _3343) + _2996;
        _3150 = ((_3332 * 0.039999999105930328369140625) * _3343) + _2998;
    }
    else
    {
        _3140 = _2671;
        _3142 = _2673;
        _3144 = _2675;
        _3146 = _2994;
        _3148 = _2996;
        _3150 = _2998;
    }
    float _5183 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _5194 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _5205 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _3167 = ((isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0))) * (_3140 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1107))) + ((_3146 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1941)) * cbPerFrame._m0[3u].x);
    float _3168 = ((isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0))) * (_3142 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1107))) + ((_3148 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1941)) * cbPerFrame._m0[3u].x);
    float _3169 = ((isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0))) * (_3144 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1107))) + ((_3150 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1941)) * cbPerFrame._m0[3u].x);
    uint _3170 = _267 + 6u;
    float _3178 = _1044 / cbSceneParam._m0[86u].x;
    float _3179 = _1045 / cbSceneParam._m0[86u].y;
    vec4 _3193 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3178, _3179, (log2((isnan(cbSceneParam._m0[77u].w) ? _966 : (isnan(_966) ? cbSceneParam._m0[77u].w : min(_966, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3195 = _3193.x;
    float _3196 = _3193.y;
    float _3197 = _3193.z;
    float _3198 = _3193.w;
    float _3270;
    float _3272;
    float _3274;
    float _3276;
    if (_966 > cbSceneParam._m0[78u].w)
    {
        float _3232 = isnan(_966) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _966 : min(cbSceneParam._m0[80u].w, _966));
        float _3233 = _3232 / _966;
        float _3244 = _3233 * _1017;
        float _3245 = _1018 * _3233;
        float _3246 = (-0.0) - _3245;
        float _3248 = _3233 * _1019;
        float _3250 = (cbSceneParam._m0[77u].w * _3246) / _3232;
        float _3251 = _3250 + cbSceneParam._m0[79u].w;
        float _3252 = cbSceneParam._m0[79u].w - _3245;
        float _3258 = sqrt(((_3244 * _3244) + (_3245 * _3245)) + (_3248 * _3248));
        float _3261 = (1.0 - (cbSceneParam._m0[77u].w / _3232)) * _3258;
        float _3266 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3268 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3445;
        if (abs((_3246 - _3250) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3445 = ((((_3251 > 0.0) ? exp2(_3266 * _3251) : (2.0 - exp2(_3268 * _3251))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3261;
        }
        else
        {
            float _3389 = 1.0 / cbSceneParam._m0[80u].x;
            float _3390 = isnan(_3252) ? _3251 : (isnan(_3251) ? _3252 : max(_3251, _3252));
            float _3391 = isnan(_3252) ? _3251 : (isnan(_3251) ? _3252 : min(_3251, _3252));
            float _3400 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : min(_3390, 0.0));
            float _3401 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : min(_3391, 0.0));
            _3445 = ((abs(_3258 / _3246) * cbSceneParam._m0[80u].y) * ((((_3400 - _3401) * 2.0) - ((exp2(_3266 * (isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0)))) - exp2(_3266 * (isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0))))) * _3389)) - ((exp2(_3268 * _3400) - exp2(_3268 * _3401)) * _3389))) + (_3261 * cbSceneParam._m0[80u].z);
        }
        vec4 _3447 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3178, _3179, 1.0), 0.0);
        float _3456 = exp2((_3445 * (-1.44269502162933349609375)) * (1.0 - _3447.w));
        float _3457 = log2(_3456);
        float _3473 = log2(_3198);
        _3270 = (exp2(_3473 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3457 * cbSceneParam._m0[78u].x)) * _3447.x) / cbSceneParam._m0[78u].x)) + _3195;
        _3272 = (exp2(_3473 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3457 * cbSceneParam._m0[78u].y)) * _3447.y) / cbSceneParam._m0[78u].y)) + _3196;
        _3274 = (exp2(_3473 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3457 * cbSceneParam._m0[78u].z)) * _3447.z) / cbSceneParam._m0[78u].z)) + _3197;
        _3276 = _3456 * _3198;
    }
    else
    {
        _3270 = _3195;
        _3272 = _3196;
        _3274 = _3197;
        _3276 = _3198;
    }
    bool _3483;
    vec4 _3286;
    vec4 _3308;
    float _3310;
    float _3314;
    float _3315;
    float _3316;
    float _3317;
    bool _3327;
    for (;;)
    {
        _3286 = cbMatDynParam._m0[0u];
        float _3288 = roundEven(_3286.y);
        bool _3289 = _3288 == 3.0;
        float _3290 = log2(_3276);
        float _3297 = exp2(_3290 * cbSceneParam._m0[78u].x) * _3167;
        float _3298 = exp2(_3290 * cbSceneParam._m0[78u].y) * _3168;
        float _3299 = exp2(_3290 * cbSceneParam._m0[78u].z) * _3169;
        float _3306 = _1033 + (-0.5);
        _3308 = cbMtdParam._m0[1u];
        _3310 = _3308.y * _3306;
        float _3313 = (_3288 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3314 = _3313 * (_3289 ? _3297 : (_3297 + (cbSceneParam._m0[72u].w * _3270)));
        _3315 = _3313 * (_3289 ? _3298 : (_3298 + (cbSceneParam._m0[72u].w * _3272)));
        _3316 = _3313 * (_3289 ? _3299 : (_3299 + (cbSceneParam._m0[72u].w * _3274)));
        _3317 = _3306 * 0.999000012874603271484375;
        _3327 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3327)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3317) < 0.5)
            {
                _3483 = true;
                break;
            }
        }
        uint _3424 = _1082 + uint(_3286.w);
        if ((cbInstanceData._m0[_3424].w < 1.0) && ((cbInstanceData._m0[_3424].w + _3317) < 0.5))
        {
            _3483 = true;
            break;
        }
        if ((_3310 + 1.0) < _3308.x)
        {
            _3483 = true;
            break;
        }
        _3483 = false;
        break;
    }
    float _3687;
    if (_3483)
    {
        discard_state = true;
        _3687 = 0.0;
    }
    else
    {
        _3687 = cbInstanceData._m0[_3170].w;
    }
    SV_Target.x = _3314;
    SV_Target.y = _3315;
    SV_Target.z = _3316;
    SV_Target.w = _3687;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3170].w;
    discard_exit();
}


