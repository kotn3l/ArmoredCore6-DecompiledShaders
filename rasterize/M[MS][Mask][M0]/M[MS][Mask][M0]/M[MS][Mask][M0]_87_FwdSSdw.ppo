#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1391;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _365.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].z) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3718 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _441 = (_434 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _442 = (_434 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _443 = (_434 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _482 = _480.x;
    float _492 = dot(vec4(_482, _480.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _506 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _365.y) * 2.0) - ((((_482 - _492) * cbMtdParam._m0[24u].z) + _492) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3729 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _520 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_507 * ((_460.x * cbMtdParam._m0[13u].x) - _441)) + _441);
    float _523 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_507 * ((_460.y * cbMtdParam._m0[13u].y) - _442)) + _442);
    float _526 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_507 * ((_460.z * cbMtdParam._m0[13u].z) - _443)) + _443);
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _584 = _582.x;
    float _585 = _582.y;
    float _586 = _582.z;
    float _593 = ((_565.x - _584) * _434) + _584;
    float _594 = ((_565.y - _585) * _434) + _585;
    float _595 = ((_565.z - _586) * _434) + _586;
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _620 = ((_607.z - _595) * _507) + _595;
    float _623 = ((((_607.x - _593) * _507) + _593) * 2.0) + (-1.0);
    float _625 = ((((_607.y - _594) * _507) + _594) * 2.0) + (-1.0);
    float _626 = dot(vec2(_623, _625), vec2(_623, _625));
    float _3740 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _631 = sqrt(1.0 - (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _672 = _670.x;
    float _673 = 1.0 - _672;
    float _679 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _682 = ((isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : min(_679, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _691 = (_682 - ((((((_672 - _673) * cbMtdParam._m0[24u].w) + _673) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _682))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3761 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _692 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _699 = (_692 * ((_545.x * cbMtdParam._m0[18u].x) - _520)) + _520;
    float _700 = (_692 * ((_545.y * cbMtdParam._m0[18u].y) - _523)) + _523;
    float _701 = (_692 * ((_545.z * cbMtdParam._m0[18u].z) - _526)) + _526;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _715 = _713.x;
    float _716 = 1.0 - _715;
    float _743 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_715 - _716) * cbMtdParam._m0[24u].y) + _716) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3772 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _744 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _752 = ((((cbMtdParam._m0[10u].x - _699) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _744) + _699;
    float _753 = ((((cbMtdParam._m0[10u].y - _700) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _744) + _700;
    float _754 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _701)) * _744) + _701;
    float _758 = (cbMtdParam._m0[19u].w * (_645.z - _620)) + _620;
    vec4 _772 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _779 = (_772.x * 2.0) + (-1.0);
    float _780 = (_772.y * 2.0) + (-1.0);
    float _781 = dot(vec2(_779, _780), vec2(_779, _780));
    float _3783 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _789 = (_692 * (_772.z - _758)) + _758;
    float _792 = ((cbMtdParam._m0[23u].y - _789) * _744) + _789;
    vec4 _811 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _817 = (_811.x * 2.0) + (-1.0);
    float _818 = (_811.y * 2.0) + (-1.0);
    float _819 = dot(vec2(_817, _818), vec2(_817, _818));
    float _3794 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _827 = (((_645.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _623;
    float _828 = (((_645.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _625;
    float _840 = (((_779 - _827) + (cbMtdParam._m0[21u].x * _827)) * _692) + _827;
    float _841 = (((_780 - _828) + (cbMtdParam._m0[21u].x * _828)) * _692) + _828;
    float _842 = (_692 * (sqrt(1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) - _631)) + _631;
    float _853 = (((_817 - _840) + (_840 * cbMtdParam._m0[22u].z)) * _744) + _840;
    float _854 = (((_818 - _841) + (_841 * cbMtdParam._m0[22u].z)) * _744) + _841;
    float _855 = ((sqrt(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) - _842) * _744) + _842;
    float _857 = cbMtdParam._m0[22u].x + _645.w;
    float _860 = fma(_855, _244 * NORMAL.x, fma(_854, _251 * TANGENT.x, (_237 * _229) * _853));
    float _863 = fma(_855, _244 * NORMAL.y, fma(_854, _251 * TANGENT.y, (_237 * _230) * _853));
    float _866 = fma(_855, _244 * NORMAL.z, fma(_854, _251 * TANGENT.z, (_237 * _231) * _853));
    float _870 = inversesqrt(dot(vec3(_860, _863, _866), vec3(_860, _863, _866)));
    float _871 = _870 * _860;
    float _872 = _870 * _863;
    float _873 = _870 * _866;
    float _3805 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _874 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _3827 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _3838 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _3849 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _892 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _942 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _932);
    float _943 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _932);
    float _944 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _932);
    float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
    float _949 = _942 * _948;
    float _950 = _943 * _948;
    float _951 = _944 * _948;
    float _957 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _958 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _976 = fma(_873, cbSceneParam._m0[5u].z, fma(_872, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _871));
    float _979 = fma(_873, cbSceneParam._m0[6u].z, fma(_872, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _871));
    float _982 = fma(_873, cbSceneParam._m0[7u].z, fma(_872, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _871));
    uint _996 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1002 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_996].x;
    float _1003 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * cbInstanceData._m0[_996].y;
    float _1004 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * cbInstanceData._m0[_996].z;
    float _3860 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    vec4 _1016 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _957, cbSceneParam._m0[86u].y * _958));
    float _1020 = ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * TEXCOORD_5.w) * _1016.x;
    float _1021 = dot(vec3(_871, _872, _873), vec3(_949, _950, _951));
    float _1024 = _1021 * 2.0;
    float _1028 = (_1024 * _871) - _949;
    float _1029 = (_1024 * _872) - _950;
    float _1030 = (_1024 * _873) - _951;
    float _1034 = abs(dot(vec3(_949, _950, _951), vec3(_871, _872, _873)));
    float _3893 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1036 = sqrt(_874);
    float _1049 = exp2((_1036 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1036 * 3.0));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1390;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1115 = fma(_1089, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081));
        float _1119 = fma(_1089, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081));
        float _1123 = fma(_1089, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081));
        float _1148 = _1081 + _871;
        float _1149 = _1085 + _872;
        float _1150 = _1089 + _873;
        float _1160 = fma(_1150, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148)) - _1115;
        float _1161 = fma(_1150, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148)) - _1119;
        float _1162 = fma(_1150, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148)) - _1123;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1115 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1119 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[34u].z) + ((((((_1123 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1218 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1184.x + (-0.5));
        float _1220 = _1218 * (_1184.y + (-0.5));
        float _1221 = _1218 * (_1184.z + (-0.5));
        float _1228 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1191.x + (-0.5));
        float _1230 = _1228 * (_1191.y + (-0.5));
        float _1231 = _1228 * (_1191.z + (-0.5));
        float _1238 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1198.x + (-0.5));
        float _1240 = _1238 * (_1198.y + (-0.5));
        float _1241 = _1238 * (_1198.z + (-0.5));
        float _1248 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1205.x + (-0.5));
        float _1250 = _1248 * (_1205.y + (-0.5));
        float _1251 = _1248 * (_1205.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1272 = (dot(vec3(_871, _872, _873), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1282 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3941 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1284 + 1.0))) + _1289) * _1252;
        float _1299 = _1220 * 0.5;
        float _1300 = _1230 * 0.5;
        float _1301 = _1240 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_871, _872, _873), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3974 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1326 + 1.0))) + _1331) * _1253;
        float _1341 = _1221 * 0.5;
        float _1342 = _1231 * 0.5;
        float _1343 = _1241 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_871, _872, _873), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4007 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1368 + 1.0))) + _1373) * _1254;
        _1390 = _1221;
        _1392 = _1220;
        _1393 = _1219;
        _1394 = _1231;
        _1395 = _1230;
        _1396 = _1229;
        _1397 = _1241;
        _1398 = _1240;
        _1399 = _1239;
        _1400 = _1254;
        _1401 = _1253;
        _1402 = _1252;
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1391;
        _1392 = _1391;
        _1393 = _1391;
        _1394 = _1391;
        _1395 = _1391;
        _1396 = _1391;
        _1397 = _1391;
        _1398 = _1391;
        _1399 = _1391;
        _1400 = _1391;
        _1401 = _1391;
        _1402 = _1391;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1429 = fma(_1089, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1081));
        float _1433 = fma(_1089, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1081));
        float _1437 = fma(_1089, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1081));
        float _1460 = _1081 + _871;
        float _1461 = _1085 + _872;
        float _1462 = _1089 + _873;
        float _1472 = fma(_1462, cbModelParam._m0[30u].z, fma(_1461, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1460)) - _1429;
        float _1473 = fma(_1462, cbModelParam._m0[31u].z, fma(_1461, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1460)) - _1433;
        float _1474 = fma(_1462, cbModelParam._m0[32u].z, fma(_1461, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1460)) - _1437;
        float _1478 = inversesqrt(dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474)));
        float _1491 = ((_1478 * _1472) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1429 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1492 = ((_1478 * _1473) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1433 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1478 * _1474) / cbModelParam._m0[35u].z) + ((((((_1437 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        float _1528 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1495.x + (-0.5));
        float _1530 = _1528 * (_1495.y + (-0.5));
        float _1531 = _1528 * (_1495.z + (-0.5));
        float _1538 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1502.x + (-0.5));
        float _1540 = _1538 * (_1502.y + (-0.5));
        float _1541 = _1538 * (_1502.z + (-0.5));
        float _1548 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1509.x + (-0.5));
        float _1550 = _1548 * (_1509.y + (-0.5));
        float _1551 = _1548 * (_1509.z + (-0.5));
        float _1558 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1516.x + (-0.5));
        float _1560 = _1558 * (_1516.y + (-0.5));
        float _1561 = _1558 * (_1516.z + (-0.5));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = _1529 * 0.5;
        float _1566 = _1539 * 0.5;
        float _1567 = _1549 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_871, _872, _873), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4070 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1592 + 1.0))) + _1597) * _1562;
        float _1607 = _1530 * 0.5;
        float _1608 = _1540 * 0.5;
        float _1609 = _1550 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_871, _872, _873), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4103 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1634 + 1.0))) + _1639) * _1563;
        float _1649 = _1531 * 0.5;
        float _1650 = _1541 * 0.5;
        float _1651 = _1551 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_871, _872, _873), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4136 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1676 + 1.0))) + _1681) * _1564;
        _1698 = _1531;
        _1699 = _1530;
        _1700 = _1529;
        _1701 = _1541;
        _1702 = _1540;
        _1703 = _1539;
        _1704 = _1551;
        _1705 = _1550;
        _1706 = _1549;
        _1707 = _1564;
        _1708 = _1563;
        _1709 = _1562;
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
    }
    else
    {
        _1698 = _1391;
        _1699 = _1391;
        _1700 = _1391;
        _1701 = _1391;
        _1702 = _1391;
        _1703 = _1391;
        _1704 = _1391;
        _1705 = _1391;
        _1706 = _1391;
        _1707 = _1391;
        _1708 = _1391;
        _1709 = _1391;
        _1710 = 0.0;
        _1711 = 0.0;
        _1712 = 0.0;
    }
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1403)) + _1403;
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1404)) + _1404;
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1405)) + _1405;
    float _1745 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1722));
    float _1766 = _1028 * 0.5;
    float _1767 = _1029 * 0.5;
    float _1768 = _1030 * 0.5;
    float _1769 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1772 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1775 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1809;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1782 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1390, _1394, _1397, _1400));
        float _1786 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1392, _1395, _1398, _1401));
        float _1790 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1797 = dot(vec4(cbModelParam._m0[39u]), vec4(_1766, _1767, _1768, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1797) ? 0.0 : (isnan(0.0) ? _1797 : max(0.0, _1797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1820;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1811 = dot(vec4(cbModelParam._m0[40u]), vec4(_1766, _1767, _1768, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1811) ? 0.0 : (isnan(0.0) ? _1811 : max(0.0, _1811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1824 = (_1820 * cbModelParam._m0[1u].x) + (_1809 * (1.0 - cbModelParam._m0[1u].x));
    float _1834 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _874);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1834 : min(cbModelParam._m0[25u].z, _1834));
    float _1915;
    float _1917;
    float _1919;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1882 = fma(_1089, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081)) + cbModelParam._m0[13u].w;
        float _1886 = fma(_1089, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081)) + cbModelParam._m0[14u].w;
        float _1890 = fma(_1089, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081)) + cbModelParam._m0[15u].w;
        float _1893 = fma(_1030, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028));
        float _1896 = fma(_1030, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028));
        float _1899 = fma(_1030, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028));
        float _1927;
        if (_1893 > 0.0)
        {
            _1927 = abs((1.0 - _1882) / _1893);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1882 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1927 = frontier_phi_14_12_ladder;
        }
        float _2148;
        if (_1896 > 0.0)
        {
            _2148 = abs((1.0 - _1886) / _1896);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1886 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2148 = frontier_phi_23_19_ladder;
        }
        float _2394;
        if (_1899 > 0.0)
        {
            _2394 = abs((1.0 - _1890) / _1899);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1890 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2394 = frontier_phi_35_30_ladder;
        }
        float _2396 = isnan(_2148) ? _1927 : (isnan(_1927) ? _2148 : min(_1927, _2148));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1893) + _1882;
        float _2402 = (_2397 * _1896) + _1886;
        float _2403 = (_2397 * _1899) + _1890;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2406 = (-1.0) - _2404;
        float _2408 = _2404 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2403 > _2408) || ((_2403 < _2406) || ((_2402 > _2408) || ((_2402 < _2406) || ((_2401 < _2406) || (_2401 > _2408))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2403, cbModelParam._m0[9u].z, fma(_2402, cbModelParam._m0[9u].y, _2401 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2403, cbModelParam._m0[10u].z, fma(_2402, cbModelParam._m0[10u].y, _2401 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2403, cbModelParam._m0[11u].z, fma(_2402, cbModelParam._m0[11u].y, _2401 * cbModelParam._m0[11u].x))), _1835);
            frontier_phi_13_35_ladder = _2527.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2527.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2527.x * cbModelParam._m0[1u].y;
        }
        _1915 = frontier_phi_13_35_ladder_2;
        _1917 = frontier_phi_13_35_ladder_1;
        _1919 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1903 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1028, _1029, _1030), _1835);
        _1915 = _1903.x * cbModelParam._m0[1u].y;
        _1917 = _1903.y * cbModelParam._m0[1u].y;
        _1919 = _1903.z * cbModelParam._m0[1u].y;
    }
    float _1923 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _874);
    float _1924 = isnan(_1923) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1923 : min(cbModelParam._m0[25u].w, _1923));
    float _2013;
    float _2015;
    float _2017;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1977 = fma(_1089, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081)) + cbModelParam._m0[21u].w;
        float _1981 = fma(_1089, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081)) + cbModelParam._m0[22u].w;
        float _1985 = fma(_1089, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081)) + cbModelParam._m0[23u].w;
        float _1988 = fma(_1030, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028));
        float _1991 = fma(_1030, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028));
        float _1994 = fma(_1030, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028));
        float _2153;
        if (_1988 > 0.0)
        {
            _2153 = abs((1.0 - _1977) / _1988);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1977 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2153 = frontier_phi_25_21_ladder;
        }
        float _2421;
        if (_1991 > 0.0)
        {
            _2421 = abs((1.0 - _1981) / _1991);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1981 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2421 = frontier_phi_37_32_ladder;
        }
        float _2626;
        if (_1994 > 0.0)
        {
            _2626 = abs((1.0 - _1985) / _1994);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1985 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2626 = frontier_phi_46_43_ladder;
        }
        float _2628 = isnan(_2421) ? _2153 : (isnan(_2153) ? _2421 : min(_2153, _2421));
        float _2629 = isnan(_2626) ? _2628 : (isnan(_2628) ? _2626 : min(_2628, _2626));
        float _2633 = (_2629 * _1988) + _1977;
        float _2634 = (_2629 * _1991) + _1981;
        float _2635 = (_2629 * _1994) + _1985;
        float _2636 = _2629 * 9.9999997473787516355514526367188e-05;
        float _2637 = (-1.0) - _2636;
        float _2639 = _2636 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2635 > _2639) || ((_2635 < _2637) || ((_2634 > _2639) || ((_2634 < _2637) || ((_2633 < _2637) || (_2633 > _2639))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2635, cbModelParam._m0[17u].z, fma(_2634, cbModelParam._m0[17u].y, _2633 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2635, cbModelParam._m0[18u].z, fma(_2634, cbModelParam._m0[18u].y, _2633 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2635, cbModelParam._m0[19u].z, fma(_2634, cbModelParam._m0[19u].y, _2633 * cbModelParam._m0[19u].x))), _1924);
            frontier_phi_22_46_ladder = _2834.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2834.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2834.x * cbModelParam._m0[1u].z;
        }
        _2013 = frontier_phi_22_46_ladder_2;
        _2015 = frontier_phi_22_46_ladder_1;
        _2017 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1997 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1028, _1029, _1030), _1924);
        _2013 = _1997.x * cbModelParam._m0[1u].z;
        _2015 = _1997.y * cbModelParam._m0[1u].z;
        _2017 = _1997.z * cbModelParam._m0[1u].z;
    }
    float _2029 = ((((1.0 - _1049) * ((_1036 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1049 * _1036)) * _1020;
    float _2030 = _2029 * ((cbModelParam._m0[1u].w * (_2013 - _1915)) + _1915);
    float _2031 = _2029 * ((cbModelParam._m0[1u].w * (_2015 - _1917)) + _1917);
    float _2032 = _2029 * ((cbModelParam._m0[1u].w * (_2017 - _1919)) + _1919);
    float _2035 = fma(_2032, cbSceneParam._m0[89u].z, fma(_2031, cbSceneParam._m0[89u].y, _2030 * cbSceneParam._m0[89u].x));
    float _2038 = fma(_2032, cbSceneParam._m0[90u].z, fma(_2031, cbSceneParam._m0[90u].y, _2030 * cbSceneParam._m0[90u].x));
    float _2041 = fma(_2032, cbSceneParam._m0[91u].z, fma(_2031, cbSceneParam._m0[91u].y, _2030 * cbSceneParam._m0[91u].x));
    vec4 _2049 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_957, _958));
    float _2051 = _2049.w;
    float _2063 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2051);
    float _2064 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2051);
    float _2065 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2051);
    uvec4 _2069 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2071 = _2069.x * 14u;
    uint _2072 = _2071 + 13u;
    float _2079 = _1020 + (-1.0);
    float _2084 = (cbLight._m0[_2072].x * _2079) + 1.0;
    float _2085 = (cbLight._m0[_2072].y * _2079) + 1.0;
    float _2086 = (cbLight._m0[_2072].z * _2079) + 1.0;
    float _2087 = (cbLight._m0[_2072].w * _2079) + 1.0;
    uint _2088 = _2071 + 5u;
    float _2094 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
    uint _2098 = _2071 + 4u;
    float _2107 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
    uint _2111 = _2071 | 1u;
    float _2122 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_871, _872, _873));
    float _2125 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_871, _872, _873));
    float _4272 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _4283 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2130 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * 0.3183098733425140380859375;
    float _2132 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.3183098733425140380859375;
    float _2139 = ((cbLight._m0[_2088].x * _2094) * _2132) + (((cbLight._m0[_2098].x * _2063) * _2107) * _2130);
    float _2140 = ((_2094 * cbLight._m0[_2088].y) * _2132) + (((cbLight._m0[_2098].y * _2064) * _2107) * _2130);
    float _2141 = ((_2094 * cbLight._m0[_2088].z) * _2132) + (((cbLight._m0[_2098].z * _2065) * _2107) * _2130);
    uvec4 _2145 = floatBitsToUint(cbLight._m0[_2071 + 12u]);
    bool _2147 = _2145.x == 0u;
    float _2158;
    float _2160;
    float _2162;
    if (_2147)
    {
        _2158 = _2139;
        _2160 = _2140;
        _2162 = _2141;
    }
    else
    {
        uint _2166 = _2071 + 6u;
        float _2182 = (dot(vec3(cbLight._m0[_2071 + 2u].xyz), vec3(_871, _872, _873)) * 0.5) + 0.5;
        float _2183 = _2182 * _2182;
        float _4294 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2184 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2185 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2158 = (((cbLight._m0[_2166].x * 0.3183098733425140380859375) * _2184) * _2185) + _2139;
        _2160 = (((cbLight._m0[_2166].y * 0.3183098733425140380859375) * _2184) * _2185) + _2140;
        _2162 = (((cbLight._m0[_2166].z * 0.3183098733425140380859375) * _2184) * _2185) + _2141;
    }
    bool _2165 = _2145.y == 0u;
    float _2203;
    float _2205;
    float _2207;
    if (_2165)
    {
        _2203 = _2158;
        _2205 = _2160;
        _2207 = _2162;
    }
    else
    {
        uint _2365 = _2071 + 7u;
        float _2381 = (dot(vec3(cbLight._m0[_2071 + 3u].xyz), vec3(_871, _872, _873)) * 0.5) + 0.5;
        float _2382 = _2381 * _2381;
        float _4310 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2383 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2384 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2203 = (((cbLight._m0[_2365].x * 0.3183098733425140380859375) * _2383) * _2384) + _2158;
        _2205 = (((cbLight._m0[_2365].y * 0.3183098733425140380859375) * _2383) * _2384) + _2160;
        _2207 = (((cbLight._m0[_2365].z * 0.3183098733425140380859375) * _2383) * _2384) + _2162;
    }
    uint _2210 = _2071 + 8u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _874) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_2071].x + _949;
    float _2226 = cbLight._m0[_2071].y + _950;
    float _2227 = cbLight._m0[_2071].z + _951;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2071].xyz));
    float _4326 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _4337 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _2239 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2240 = dot(vec3(_871, _872, _873), vec3(_2232, _2233, _2234));
    float _4348 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2244 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2232, _2233, _2234));
    float _4359 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2248 = _2224 * _2224;
    float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
    float _2263 = (exp2(log2(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2264 = 1.0 - _2224;
    float _2275 = (0.5 / (((_2239 * ((_2238 * _2264) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2264) + _2224) * _2238))) * _2238;
    float _4370 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2277 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
    uint _2291 = _2071 + 9u;
    float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _874) * 0.949999988079071044921875);
    float _2303 = _2302 * _2302;
    float _2304 = cbLight._m0[_2111].x + _949;
    float _2305 = cbLight._m0[_2111].y + _950;
    float _2306 = cbLight._m0[_2111].z + _951;
    float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
    float _2311 = _2310 * _2304;
    float _2312 = _2310 * _2305;
    float _2313 = _2310 * _2306;
    float _2314 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2111].xyz));
    float _4381 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2318 = dot(vec3(_871, _872, _873), vec3(_2311, _2312, _2313));
    float _4392 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2311, _2312, _2313));
    float _4403 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2303 * _2303;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2339 = (exp2(log2(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2340 = 1.0 - _2303;
    float _2350 = (0.5 / (((_2239 * ((_2317 * _2340) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2340) + _2303) * _2317))) * _2317;
    float _4414 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    float _2362 = (((_2339 * cbLight._m0[_2291].x) * _2352) * _2094) + ((((cbLight._m0[_2210].x * _2063) * _2263) * _2277) * _2107);
    float _2363 = (((_2339 * cbLight._m0[_2291].y) * _2352) * _2094) + ((((cbLight._m0[_2210].y * _2064) * _2263) * _2277) * _2107);
    float _2364 = (((_2339 * cbLight._m0[_2291].z) * _2352) * _2094) + ((((cbLight._m0[_2210].z * _2065) * _2263) * _2277) * _2107);
    float _2426;
    float _2428;
    float _2430;
    if (_2147)
    {
        _2426 = _2362;
        _2428 = _2363;
        _2430 = _2364;
    }
    else
    {
        uint _2432 = _2071 + 2u;
        uint _2436 = _2071 + 10u;
        float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _874) * 0.949999988079071044921875);
        float _2451 = _2450 * _2450;
        float _2452 = cbLight._m0[_2432].x + _949;
        float _2453 = cbLight._m0[_2432].y + _950;
        float _2454 = cbLight._m0[_2432].z + _951;
        float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
        float _2459 = _2458 * _2452;
        float _2460 = _2458 * _2453;
        float _2461 = _2458 * _2454;
        float _2462 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2432].xyz));
        float _4425 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2466 = dot(vec3(_871, _872, _873), vec3(_2459, _2460, _2461));
        float _4436 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2470 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2459, _2460, _2461));
        float _4447 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2474 = _2451 * _2451;
        float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
        float _2487 = (exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2488 = 1.0 - _2451;
        float _2498 = (0.5 / (((_2239 * ((_2465 * _2488) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2488) + _2451) * _2465))) * _2465;
        float _4458 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2500 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
        float _2501 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2426 = (((_2487 * cbLight._m0[_2436].x) * _2500) * _2501) + _2362;
        _2428 = (((_2487 * cbLight._m0[_2436].y) * _2500) * _2501) + _2363;
        _2430 = (((_2487 * cbLight._m0[_2436].z) * _2500) * _2501) + _2364;
    }
    float _2536;
    float _2538;
    float _2540;
    if (_2165)
    {
        _2536 = _2426;
        _2538 = _2428;
        _2540 = _2430;
    }
    else
    {
        uint _2547 = _2071 + 3u;
        uint _2551 = _2071 + 11u;
        float _2565 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2547].w)) * _874) * 0.949999988079071044921875);
        float _2566 = _2565 * _2565;
        float _2567 = cbLight._m0[_2547].x + _949;
        float _2568 = cbLight._m0[_2547].y + _950;
        float _2569 = cbLight._m0[_2547].z + _951;
        float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
        float _2574 = _2573 * _2567;
        float _2575 = _2573 * _2568;
        float _2576 = _2573 * _2569;
        float _2577 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2547].xyz));
        float _4474 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2581 = dot(vec3(_871, _872, _873), vec3(_2574, _2575, _2576));
        float _4485 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2585 = dot(vec3(cbLight._m0[_2547].xyz), vec3(_2574, _2575, _2576));
        float _4496 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2589 = _2566 * _2566;
        float _2593 = ((_2584 * _2584) * (_2589 + (-1.0))) + 1.0;
        float _2602 = (exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2603 = 1.0 - _2566;
        float _2613 = (0.5 / (((_2239 * ((_2580 * _2603) + _2566)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2603) + _2566) * _2580))) * _2580;
        float _4507 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2589 / ((_2593 * _2593) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2536 = (((_2602 * cbLight._m0[_2551].x) * _2615) * _2616) + _2426;
        _2538 = (((_2602 * cbLight._m0[_2551].y) * _2615) * _2616) + _2428;
        _2540 = (((_2602 * cbLight._m0[_2551].z) * _2615) * _2616) + _2430;
    }
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_2069.y == 0u)
    {
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2691;
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2691;
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2691;
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.x;
        uint _2718 = uint((float(_2706.y) * floor(float(uint(cbSceneParam._m0[85u].y * _958) / _2707))) + floor(float(uint(cbSceneParam._m0[85u].x * _957) / _2707)));
        float _2728 = (log2(_2694 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2729 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        uint _2732 = uint(isnan(14.0) ? _2729 : (isnan(_2729) ? 14.0 : min(_2729, 14.0)));
        uvec4 _2737 = texelFetch(g_lightClusterGridBuffer, int(((_2732 << 2u) + (_2718 << 6u)) >> 2u));
        uint _2738 = _2737.x;
        uint _2739 = _2706.z;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((((1u << ((_2739 >> 4u) & 15u)) + 4294967295u) & _2738) == 0u) || ((_2739 & 240u) == 0u))
        {
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
        }
        else
        {
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            uint _2990 = 0u;
            uint _2999;
            bool _3000;
            for (;;)
            {
                _2999 = texelFetch(g_lightClassification, int((((_2732 << 5u) + (_2718 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                _3000 = _2999 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3000)
                {
                    frontier_phi_61_pred = _2984;
                    frontier_phi_61_pred_1 = _2989;
                    frontier_phi_61_pred_2 = _2988;
                    frontier_phi_61_pred_3 = _2987;
                    frontier_phi_61_pred_4 = _2986;
                    frontier_phi_61_pred_5 = _2985;
                }
                else
                {
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    uint _3114;
                    _3108 = _2984;
                    _3109 = _2985;
                    _3110 = _2986;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2989;
                    _3114 = _2999;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    for (;;)
                    {
                        uint _3118 = uint(findLSB(_3114)) + (_2990 << 5u);
                        uint _3115 = (_3114 + 4294967295u) & _3114;
                        uint _3120 = _3118 * 48u;
                        vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 3u)).x));
                        uint _3140 = (_3118 * 48u) + 4u;
                        vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 3u)).x));
                        uint _3159 = (_3118 * 48u) + 8u;
                        vec3 _3170 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x));
                        float _3174 = _3134.x - _2692;
                        float _3175 = _3134.y - _2693;
                        float _3176 = _3134.z - _2694;
                        float _3177 = dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176));
                        float _3180 = inversesqrt(_3177);
                        float _3181 = _3180 * _3174;
                        float _3182 = _3180 * _3175;
                        float _3183 = _3180 * _3176;
                        float _3184 = dot(vec3(_976, _979, _982), vec3(_3181, _3182, _3183));
                        float _3189 = 1.0 - (_3177 * _3134.w);
                        float _4533 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3190 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3191 = sqrt(_3177) * _3153.w;
                        float _3194 = 1.39999997615814208984375 / (_3191 + 1.39999997615814208984375);
                        float _3195 = _3194 * _3194;
                        float _3198 = ((1.0 - _3195) * _3184) + _3195;
                        float _3201 = _3191 * _3191;
                        float _3205 = ((isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0))) * _3190) / ((_3201 * 0.699999988079071044921875) + 1.0);
                        float _3209 = (-0.0) - _2692;
                        float _3210 = (-0.0) - _2693;
                        float _3211 = (-0.0) - _2694;
                        float _3215 = inversesqrt(dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211)));
                        float _3216 = _3215 * _3209;
                        float _3217 = _3215 * _3210;
                        float _3218 = _3215 * _3211;
                        float _3226 = exp2(log2(1.0 / ((_3201 * 3.5) + 5.0)) * 0.25);
                        float _3227 = 1.0 - _1036;
                        float _3234 = sqrt(1.0 - ((1.0 - (_3227 * _3227)) * (1.0 - (_3226 * _3226))));
                        float _3235 = _3234 * _3234;
                        float _3236 = _3235 * _3235;
                        float _3237 = _3216 + _3181;
                        float _3238 = _3217 + _3182;
                        float _3239 = _3218 + _3183;
                        float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                        float _3247 = dot(vec3(_976, _979, _982), vec3(_3216, _3217, _3218));
                        float _4549 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3250 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3251 = dot(vec3(_976, _979, _982), vec3(_3243 * _3237, _3243 * _3238, _3243 * _3239));
                        float _4560 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3254 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3258 = ((_3254 * _3254) * (_3236 + (-1.0))) + 1.0;
                        float _3259 = _3194 * _3235;
                        float _3260 = _3259 * _3259;
                        float _3263 = ((1.0 - _3260) * _3184) + _3260;
                        float _4571 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3264 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3265 = 1.0 - _3235;
                        float _3275 = (0.5 / (((_3264 * ((_3250 * _3265) + _3235)) + 9.9999999392252902907785028219223e-09) + (((_3264 * _3265) + _3235) * _3250))) * _3264;
                        float _4582 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3286 = (((_3236 * 3.1415927410125732421875) * (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) / ((_3258 * _3258) * ((_3201 * 2.1991131305694580078125) + 3.141590118408203125))) * _3190;
                        _3043 = (_3205 * _3153.x) + _3111;
                        _3044 = (_3205 * _3153.y) + _3112;
                        _3045 = (_3205 * _3153.z) + _3113;
                        _3040 = (_3286 * _3170.x) + _3108;
                        _3041 = (_3286 * _3170.y) + _3109;
                        _3042 = (_3286 * _3170.z) + _3110;
                        if (_3115 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3108 = _3040;
                            _3109 = _3041;
                            _3110 = _3042;
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3045;
                            _3114 = _3115;
                        }
                    }
                    frontier_phi_61_pred = _3040;
                    frontier_phi_61_pred_1 = _3045;
                    frontier_phi_61_pred_2 = _3044;
                    frontier_phi_61_pred_3 = _3043;
                    frontier_phi_61_pred_4 = _3042;
                    frontier_phi_61_pred_5 = _3041;
                }
                _2840 = frontier_phi_61_pred;
                _2850 = frontier_phi_61_pred_1;
                _2848 = frontier_phi_61_pred_2;
                _2846 = frontier_phi_61_pred_3;
                _2844 = frontier_phi_61_pred_4;
                _2842 = frontier_phi_61_pred_5;
                uint _2991 = _2990 + 1u;
                if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2984 = _2840;
                    _2985 = _2842;
                    _2986 = _2844;
                    _2987 = _2846;
                    _2988 = _2848;
                    _2989 = _2850;
                    _2990 = _2991;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
        }
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.z;
        uint _2856 = (_2854 >> 8u) & 15u;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        if (((4294967295u << _2856) & _2738) == 0u)
        {
            _2952 = _2839;
            _2954 = _2841;
            _2956 = _2843;
            _2958 = _2845;
            _2960 = _2847;
            _2962 = _2849;
        }
        else
        {
            float _2977 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
            float _2978 = _2977 * _2692;
            float _2979 = _2977 * _2693;
            float _2980 = _2977 * _2694;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2856 < ((_2854 >> 12u) & 15u))
            {
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _3091 = _2839;
                float _3092 = _2841;
                float _3093 = _2843;
                float _3094 = _2845;
                float _3095 = _2847;
                float _3096 = _2849;
                uint _3097 = _2856;
                uint _3106;
                bool _3107;
                for (;;)
                {
                    _3106 = texelFetch(g_lightClassification, int((((_2732 << 5u) + (_2718 << 9u)) + (_3097 << 2u)) >> 2u)).x;
                    _3107 = _3106 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3107)
                    {
                        frontier_phi_67_pred = _3094;
                        frontier_phi_67_pred_1 = _3095;
                        frontier_phi_67_pred_2 = _3096;
                        frontier_phi_67_pred_3 = _3093;
                        frontier_phi_67_pred_4 = _3092;
                        frontier_phi_67_pred_5 = _3091;
                    }
                    else
                    {
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3304 = _3091;
                        float _3305 = _3092;
                        float _3306 = _3093;
                        float _3307 = _3094;
                        float _3308 = _3095;
                        float _3309 = _3096;
                        uint _3310 = _3106;
                        uint _3311;
                        vec4 _3336;
                        float _3337;
                        vec4 _3352;
                        vec3 _3364;
                        vec4 _3379;
                        vec4 _3394;
                        float _3440;
                        bool _3441;
                        for (;;)
                        {
                            uint _3321 = ((_3097 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3310));
                            _3311 = (_3310 + 4294967295u) & _3310;
                            uint _3323 = _3321 * 40u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            _3337 = _3336.w;
                            uint _3339 = (_3321 * 40u) + 4u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3321 * 40u) + 8u;
                            _3364 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x));
                            uint _3366 = (_3321 * 40u) + 16u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3381 = (_3321 * 40u) + 20u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3396 = (_3321 * 40u) + 24u;
                            vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3415 = (_3321 * 40u) + 28u;
                            vec4 _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            _3440 = fma(_2694, _3428.z, fma(_2693, _3428.y, _3428.x * _2692)) + _3428.w;
                            _3441 = !((fma(_2694, _3409.z, fma(_2693, _3409.y, _3409.x * _2692)) + _3409.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3441)
                            {
                                float _3468 = _3336.x - _2692;
                                float _3469 = _3336.y - _2693;
                                float _3470 = _3336.z - _2694;
                                float _3471 = dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470));
                                float _3474 = inversesqrt(_3471);
                                float _3475 = _3474 * _3468;
                                float _3476 = _3474 * _3469;
                                float _3477 = _3474 * _3470;
                                float _3481 = 1.0 - (_3471 / (_3337 * _3337));
                                float _4593 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3486 = sqrt(_3471) * _3352.w;
                                float _3488 = 1.39999997615814208984375 / (_3486 + 1.39999997615814208984375);
                                float _3489 = _3488 * _3488;
                                float _3492 = ((1.0 - _3489) * dot(vec3(_3475, _3476, _3477), vec3(_976, _979, _982))) + _3489;
                                float _3495 = _3486 * _3486;
                                float _3499 = (fma(_2694, _3379.z, fma(_2693, _3379.y, _3379.x * _2692)) + _3379.w) / _3440;
                                float _3500 = (fma(_2694, _3394.z, fma(_2693, _3394.y, _3394.x * _2692)) + _3394.w) / _3440;
                                float _3504 = 1.0 - dot(vec2(_3499, _3500), vec2(_3499, _3500));
                                float _4609 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3506 = _3505 * (((isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0))) * _3482) / ((_3495 * 0.699999988079071044921875) + 1.0));
                                float _3518 = exp2(log2(1.0 / ((_3495 * 3.5) + 5.0)) * 0.25);
                                float _3519 = 1.0 - _1036;
                                float _3526 = sqrt(1.0 - ((1.0 - (_3519 * _3519)) * (1.0 - (_3518 * _3518))));
                                float _3527 = _3526 * _3526;
                                float _3528 = _3527 * _3527;
                                float _3529 = _3475 - _2978;
                                float _3530 = _3476 - _2979;
                                float _3531 = _3477 - _2980;
                                float _3535 = inversesqrt(dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531)));
                                float _3539 = dot(vec3(_976, _979, _982), vec3((-0.0) - _2978, (-0.0) - _2979, (-0.0) - _2980));
                                float _4620 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3542 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3543 = dot(vec3(_976, _979, _982), vec3(_3535 * _3529, _3535 * _3530, _3535 * _3531));
                                float _4631 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3546 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3550 = ((_3546 * _3546) * (_3528 + (-1.0))) + 1.0;
                                float _3551 = _3488 * _3527;
                                float _3552 = _3551 * _3551;
                                float _3558 = ((1.0 - _3552) * dot(vec3(_976, _979, _982), vec3(_3475, _3476, _3477))) + _3552;
                                float _4642 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3560 = 1.0 - _3527;
                                float _3570 = (0.5 / (((_3559 * ((_3542 * _3560) + _3527)) + 9.9999999392252902907785028219223e-09) + (((_3559 * _3560) + _3527) * _3542))) * _3559;
                                float _4653 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3580 = (_3505 * _3482) * (((_3528 * 3.1415927410125732421875) * (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) / ((_3550 * _3550) * ((_3495 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3580 * _3364.x;
                                frontier_phi_73_pred_1 = _3580 * _3364.y;
                                frontier_phi_73_pred_2 = _3506 * _3352.z;
                                frontier_phi_73_pred_3 = _3506 * _3352.y;
                                frontier_phi_73_pred_4 = _3506 * _3352.x;
                                frontier_phi_73_pred_5 = _3580 * _3364.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3584 = frontier_phi_73_pred;
                            _3585 = frontier_phi_73_pred_1;
                            _3589 = frontier_phi_73_pred_2;
                            _3588 = frontier_phi_73_pred_3;
                            _3587 = frontier_phi_73_pred_4;
                            _3586 = frontier_phi_73_pred_5;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3296 = _3589 + _3309;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            _3293 = _3586 + _3306;
                            if (_3311 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3311;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3294;
                        frontier_phi_67_pred_1 = _3295;
                        frontier_phi_67_pred_2 = _3296;
                        frontier_phi_67_pred_3 = _3293;
                        frontier_phi_67_pred_4 = _3292;
                        frontier_phi_67_pred_5 = _3291;
                    }
                    _2959 = frontier_phi_67_pred;
                    _2961 = frontier_phi_67_pred_1;
                    _2963 = frontier_phi_67_pred_2;
                    _2957 = frontier_phi_67_pred_3;
                    _2955 = frontier_phi_67_pred_4;
                    _2953 = frontier_phi_67_pred_5;
                    uint _3098 = _3097 + 1u;
                    if (_3098 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3091 = _2953;
                        _3092 = _2955;
                        _3093 = _2957;
                        _3094 = _2959;
                        _3095 = _2961;
                        _3096 = _2963;
                        _3097 = _3098;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2961;
                frontier_phi_55_56_ladder_1 = _2963;
                frontier_phi_55_56_ladder_2 = _2959;
                frontier_phi_55_56_ladder_3 = _2957;
                frontier_phi_55_56_ladder_4 = _2955;
                frontier_phi_55_56_ladder_5 = _2953;
            }
            else
            {
                frontier_phi_55_56_ladder = _2847;
                frontier_phi_55_56_ladder_1 = _2849;
                frontier_phi_55_56_ladder_2 = _2845;
                frontier_phi_55_56_ladder_3 = _2843;
                frontier_phi_55_56_ladder_4 = _2841;
                frontier_phi_55_56_ladder_5 = _2839;
            }
            _2952 = frontier_phi_55_56_ladder_5;
            _2954 = frontier_phi_55_56_ladder_4;
            _2956 = frontier_phi_55_56_ladder_3;
            _2958 = frontier_phi_55_56_ladder_2;
            _2960 = frontier_phi_55_56_ladder;
            _2962 = frontier_phi_55_56_ladder_1;
        }
        float _2967 = isnan(1.0) ? _1020 : (isnan(_1020) ? 1.0 : min(_1020, 1.0));
        _2751 = (_2967 * _2958) + _2203;
        _2753 = (_2967 * _2960) + _2205;
        _2755 = (_2967 * _2962) + _2207;
        _2757 = ((_2952 * 0.039999999105930328369140625) * _2967) + _2536;
        _2759 = ((_2954 * 0.039999999105930328369140625) * _2967) + _2538;
        _2761 = ((_2956 * 0.039999999105930328369140625) * _2967) + _2540;
    }
    else
    {
        _2751 = _2203;
        _2753 = _2205;
        _2755 = _2207;
        _2757 = _2536;
        _2759 = _2538;
        _2761 = _2540;
    }
    float _4669 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4680 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4691 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    uint _2781 = _257 + 6u;
    float _2789 = _957 / cbSceneParam._m0[86u].x;
    float _2790 = _958 / cbSceneParam._m0[86u].y;
    vec4 _2804 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, (log2((isnan(cbSceneParam._m0[77u].w) ? _892 : (isnan(_892) ? cbSceneParam._m0[77u].w : min(_892, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2806 = _2804.x;
    float _2807 = _2804.y;
    float _2808 = _2804.z;
    float _2809 = _2804.w;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_892 > cbSceneParam._m0[78u].w)
    {
        float _2864 = isnan(_892) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _892 : min(cbSceneParam._m0[80u].w, _892));
        float _2865 = _2864 / _892;
        float _2876 = _2865 * _942;
        float _2877 = _943 * _2865;
        float _2878 = (-0.0) - _2877;
        float _2880 = _2865 * _944;
        float _2882 = (cbSceneParam._m0[77u].w * _2878) / _2864;
        float _2883 = _2882 + cbSceneParam._m0[79u].w;
        float _2884 = cbSceneParam._m0[79u].w - _2877;
        float _2890 = sqrt(((_2876 * _2876) + (_2877 * _2877)) + (_2880 * _2880));
        float _2893 = (1.0 - (cbSceneParam._m0[77u].w / _2864)) * _2890;
        float _2898 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2900 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3053;
        if (abs((_2878 - _2882) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3053 = ((((_2883 > 0.0) ? exp2(_2898 * _2883) : (2.0 - exp2(_2900 * _2883))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2893;
        }
        else
        {
            float _3013 = 1.0 / cbSceneParam._m0[80u].x;
            float _3014 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : max(_2883, _2884));
            float _3015 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : min(_2883, _2884));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            _3053 = ((abs(_2890 / _2878) * cbSceneParam._m0[80u].y) * ((((_3024 - _3025) * 2.0) - ((exp2(_2898 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0)))) - exp2(_2898 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))))) * _3013)) - ((exp2(_2900 * _3024) - exp2(_2900 * _3025)) * _3013))) + (_2893 * cbSceneParam._m0[80u].z);
        }
        vec4 _3055 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, 1.0), 0.0);
        float _3064 = exp2((_3053 * (-1.44269502162933349609375)) * (1.0 - _3055.w));
        float _3065 = log2(_3064);
        float _3081 = log2(_2809);
        _2902 = (exp2(_3081 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3065 * cbSceneParam._m0[78u].x)) * _3055.x) / cbSceneParam._m0[78u].x)) + _2806;
        _2904 = (exp2(_3081 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3065 * cbSceneParam._m0[78u].y)) * _3055.y) / cbSceneParam._m0[78u].y)) + _2807;
        _2906 = (exp2(_3081 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3065 * cbSceneParam._m0[78u].z)) * _3055.z) / cbSceneParam._m0[78u].z)) + _2808;
        _2908 = _3064 * _2809;
    }
    else
    {
        _2902 = _2806;
        _2904 = _2807;
        _2906 = _2808;
        _2908 = _2809;
    }
    float _2920 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2921 = _2920 == 3.0;
    float _2922 = log2(_2908);
    float _2929 = exp2(_2922 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2751 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1020))) + ((_2757 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1824)) * cbPerFrame._m0[3u].x));
    float _2930 = exp2(_2922 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2753 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1020))) + ((_2759 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1824)) * cbPerFrame._m0[3u].x));
    float _2931 = exp2(_2922 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2755 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1020))) + ((_2761 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1824)) * cbPerFrame._m0[3u].x));
    float _2940 = (_2920 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2940 * (_2921 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2902)));
    SV_Target.y = _2940 * (_2921 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2904)));
    SV_Target.z = _2940 * (_2921 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2906)));
    SV_Target.w = cbInstanceData._m0[_2781].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2781].w;
}


