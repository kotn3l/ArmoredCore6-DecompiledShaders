#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1092;
float _3455;
float _3456;
float _3457;
float _3458;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _294.x * cbMtdParam._m0[11u].x;
    float _300 = _294.y * cbMtdParam._m0[11u].y;
    float _301 = _294.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[24u].z) + _388) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3467 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _419 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _270.x) * ((_406 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299);
    float _422 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _270.y) * ((_406 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300);
    float _425 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _270.z) * ((_406 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301);
    vec4 _438 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _455 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _459 = _455.z;
    float _468 = ((_438.z - _459) * _406) + _459;
    float _471 = ((((_438.x - _457) * _406) + _457) * 2.0) + (-1.0);
    float _473 = ((((_438.y - _458) * _406) + _458) * 2.0) + (-1.0);
    float _474 = dot(vec2(_471, _473), vec2(_471, _473));
    float _3478 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))));
    vec4 _495 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _507 = (((_495.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _471;
    float _508 = (((_495.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _473;
    float _512 = (cbMtdParam._m0[19u].w * (_495.z - _468)) + _468;
    float _516 = cbMtdParam._m0[22u].x + _495.w;
    float _519 = fma(_479, _217 * NORMAL.x, fma(_508, _224 * TANGENT.x, (_210 * _202) * _507));
    float _522 = fma(_479, _217 * NORMAL.y, fma(_508, _224 * TANGENT.y, (_210 * _203) * _507));
    float _525 = fma(_479, _217 * NORMAL.z, fma(_508, _224 * TANGENT.z, (_210 * _204) * _507));
    float _529 = inversesqrt(dot(vec3(_519, _522, _525), vec3(_519, _522, _525)));
    float _530 = _529 * _519;
    float _531 = _529 * _522;
    float _532 = _529 * _525;
    float _3489 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _533 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3511 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _3522 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3533 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _551 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _602 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _592);
    float _603 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _592);
    float _604 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _592);
    float _608 = inversesqrt(dot(vec3(_602, _603, _604), vec3(_602, _603, _604)));
    float _609 = _602 * _608;
    float _610 = _603 * _608;
    float _611 = _604 * _608;
    vec4 _616 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _618 = _616.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _772 = sqrt(((_602 * _602) + (_603 * _603)) + (_604 * _604));
        float _778 = (cbMatDynParam._m0[5u].x * _772) + cbMatDynParam._m0[5u].y;
        float _3544 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _783 = (cbMatDynParam._m0[5u].z * _772) + cbMatDynParam._m0[5u].w;
        float _3555 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) - _779)) + _779) < ((_618 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _629 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _630 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _648 = fma(_532, cbSceneParam._m0[5u].z, fma(_531, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _530));
    float _651 = fma(_532, cbSceneParam._m0[6u].z, fma(_531, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _530));
    float _654 = fma(_532, cbSceneParam._m0[7u].z, fma(_531, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _530));
    uint _667 = _230 + 9u;
    uint _668 = _667 + uint(cbMatDynParam._m0[0u].w);
    float _674 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * cbInstanceData._m0[_668].x;
    float _675 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) * cbInstanceData._m0[_668].y;
    float _676 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * cbInstanceData._m0[_668].z;
    float _3566 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _3577 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _678 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _679 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    vec4 _688 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _629, cbSceneParam._m0[86u].y * _630));
    float _692 = ((isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * TEXCOORD_5.w) * _688.x;
    float _693 = dot(vec3(_530, _531, _532), vec3(_609, _610, _611));
    float _696 = _693 * 2.0;
    float _700 = (_696 * _530) - _609;
    float _701 = (_696 * _531) - _610;
    float _702 = (_696 * _532) - _611;
    float _706 = abs(dot(vec3(_609, _610, _611), vec3(_530, _531, _532)));
    float _3599 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _708 = sqrt(_533);
    float _721 = exp2((_708 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_708 * 3.0));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1091;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _816 = fma(_761, cbModelParam._m0[26u].z, fma(_757, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _753));
        float _820 = fma(_761, cbModelParam._m0[27u].z, fma(_757, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _753));
        float _824 = fma(_761, cbModelParam._m0[28u].z, fma(_757, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _753));
        float _849 = _753 + _530;
        float _850 = _757 + _531;
        float _851 = _761 + _532;
        float _861 = fma(_851, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849)) - _816;
        float _862 = fma(_851, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849)) - _820;
        float _863 = fma(_851, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849)) - _824;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_816 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_820 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[34u].z) + ((((((_824 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _919 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_885.x + (-0.5));
        float _921 = _919 * (_885.y + (-0.5));
        float _922 = _919 * (_885.z + (-0.5));
        float _929 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_892.x + (-0.5));
        float _931 = _929 * (_892.y + (-0.5));
        float _932 = _929 * (_892.z + (-0.5));
        float _939 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_899.x + (-0.5));
        float _941 = _939 * (_899.y + (-0.5));
        float _942 = _939 * (_899.z + (-0.5));
        float _949 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_906.x + (-0.5));
        float _951 = _949 * (_906.y + (-0.5));
        float _952 = _949 * (_906.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _973 = (dot(vec3(_530, _531, _532), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _983 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3647 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_985 + 1.0))) + _990) * _953;
        float _1000 = _921 * 0.5;
        float _1001 = _931 * 0.5;
        float _1002 = _941 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_530, _531, _532), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3680 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1027 + 1.0))) + _1032) * _954;
        float _1042 = _922 * 0.5;
        float _1043 = _932 * 0.5;
        float _1044 = _942 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_530, _531, _532), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3713 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1069 + 1.0))) + _1074) * _955;
        _1091 = _922;
        _1093 = _921;
        _1094 = _920;
        _1095 = _932;
        _1096 = _931;
        _1097 = _930;
        _1098 = _942;
        _1099 = _941;
        _1100 = _940;
        _1101 = _955;
        _1102 = _954;
        _1103 = _953;
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _1092;
        _1093 = _1092;
        _1094 = _1092;
        _1095 = _1092;
        _1096 = _1092;
        _1097 = _1092;
        _1098 = _1092;
        _1099 = _1092;
        _1100 = _1092;
        _1101 = _1092;
        _1102 = _1092;
        _1103 = _1092;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
    }
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1134 = fma(_761, cbModelParam._m0[30u].z, fma(_757, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _753));
        float _1138 = fma(_761, cbModelParam._m0[31u].z, fma(_757, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _753));
        float _1142 = fma(_761, cbModelParam._m0[32u].z, fma(_757, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _753));
        float _1165 = _753 + _530;
        float _1166 = _757 + _531;
        float _1167 = _761 + _532;
        float _1177 = fma(_1167, cbModelParam._m0[30u].z, fma(_1166, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165)) - _1134;
        float _1178 = fma(_1167, cbModelParam._m0[31u].z, fma(_1166, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165)) - _1138;
        float _1179 = fma(_1167, cbModelParam._m0[32u].z, fma(_1166, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165)) - _1142;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1134 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1138 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[35u].z) + ((((((_1142 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1233 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1200.x + (-0.5));
        float _1235 = _1233 * (_1200.y + (-0.5));
        float _1236 = _1233 * (_1200.z + (-0.5));
        float _1243 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1207.x + (-0.5));
        float _1245 = _1243 * (_1207.y + (-0.5));
        float _1246 = _1243 * (_1207.z + (-0.5));
        float _1253 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1214.x + (-0.5));
        float _1255 = _1253 * (_1214.y + (-0.5));
        float _1256 = _1253 * (_1214.z + (-0.5));
        float _1263 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1221.x + (-0.5));
        float _1265 = _1263 * (_1221.y + (-0.5));
        float _1266 = _1263 * (_1221.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_530, _531, _532), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3776 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1297 + 1.0))) + _1302) * _1267;
        float _1312 = _1235 * 0.5;
        float _1313 = _1245 * 0.5;
        float _1314 = _1255 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_530, _531, _532), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3809 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1339 + 1.0))) + _1344) * _1268;
        float _1354 = _1236 * 0.5;
        float _1355 = _1246 * 0.5;
        float _1356 = _1256 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_530, _531, _532), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _3842 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1381 + 1.0))) + _1386) * _1269;
        _1403 = _1236;
        _1404 = _1235;
        _1405 = _1234;
        _1406 = _1246;
        _1407 = _1245;
        _1408 = _1244;
        _1409 = _1256;
        _1410 = _1255;
        _1411 = _1254;
        _1412 = _1269;
        _1413 = _1268;
        _1414 = _1267;
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1092;
        _1404 = _1092;
        _1405 = _1092;
        _1406 = _1092;
        _1407 = _1092;
        _1408 = _1092;
        _1409 = _1092;
        _1410 = _1092;
        _1411 = _1092;
        _1412 = _1092;
        _1413 = _1092;
        _1414 = _1092;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1104)) + _1104;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1105)) + _1105;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1106)) + _1106;
    float _1450 = fma(_1429, cbSceneParam._m0[89u].z, fma(_1428, cbSceneParam._m0[89u].y, _1427 * cbSceneParam._m0[89u].x));
    float _1453 = fma(_1429, cbSceneParam._m0[90u].z, fma(_1428, cbSceneParam._m0[90u].y, _1427 * cbSceneParam._m0[90u].x));
    float _1456 = fma(_1429, cbSceneParam._m0[91u].z, fma(_1428, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1427));
    float _1471 = _700 * 0.5;
    float _1472 = _701 * 0.5;
    float _1473 = _702 * 0.5;
    float _1474 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1477 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1480 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1514;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1487 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1091, _1095, _1098, _1101));
        float _1491 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1495 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1502 = dot(vec4(cbModelParam._m0[39u]), vec4(_1471, _1472, _1473, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1525;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1516 = dot(vec4(cbModelParam._m0[40u]), vec4(_1471, _1472, _1473, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1529 = (_1525 * cbModelParam._m0[1u].x) + (_1514 * (1.0 - cbModelParam._m0[1u].x));
    float _1539 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _533);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1539 : min(cbModelParam._m0[25u].z, _1539));
    float _1622;
    float _1624;
    float _1626;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1589 = fma(_761, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _753)) + cbModelParam._m0[13u].w;
        float _1593 = fma(_761, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _753)) + cbModelParam._m0[14u].w;
        float _1597 = fma(_761, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _753)) + cbModelParam._m0[15u].w;
        float _1600 = fma(_702, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _700));
        float _1603 = fma(_702, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _700));
        float _1606 = fma(_702, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _700));
        float _1634;
        if (_1600 > 0.0)
        {
            _1634 = abs((1.0 - _1589) / _1600);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1589 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1634 = frontier_phi_17_15_ladder;
        }
        float _1836;
        if (_1603 > 0.0)
        {
            _1836 = abs((1.0 - _1593) / _1603);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1593 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1836 = frontier_phi_26_22_ladder;
        }
        float _2079;
        if (_1606 > 0.0)
        {
            _2079 = abs((1.0 - _1597) / _1606);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1597 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2079 = frontier_phi_38_33_ladder;
        }
        float _2081 = isnan(_1836) ? _1634 : (isnan(_1634) ? _1836 : min(_1634, _1836));
        float _2082 = isnan(_2079) ? _2081 : (isnan(_2081) ? _2079 : min(_2081, _2079));
        float _2086 = (_2082 * _1600) + _1589;
        float _2087 = (_2082 * _1603) + _1593;
        float _2088 = (_2082 * _1606) + _1597;
        float _2089 = _2082 * 9.9999997473787516355514526367188e-05;
        float _2091 = (-1.0) - _2089;
        float _2093 = _2089 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2088 > _2093) || ((_2088 < _2091) || ((_2087 > _2093) || ((_2087 < _2091) || ((_2086 < _2091) || (_2086 > _2093))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2212 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2088, cbModelParam._m0[9u].z, fma(_2087, cbModelParam._m0[9u].y, _2086 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2088, cbModelParam._m0[10u].z, fma(_2087, cbModelParam._m0[10u].y, _2086 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2088, cbModelParam._m0[11u].z, fma(_2087, cbModelParam._m0[11u].y, _2086 * cbModelParam._m0[11u].x))), _1540);
            frontier_phi_16_38_ladder = _2212.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2212.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2212.x * cbModelParam._m0[1u].y;
        }
        _1622 = frontier_phi_16_38_ladder_2;
        _1624 = frontier_phi_16_38_ladder_1;
        _1626 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_700, _701, _702), _1540);
        _1622 = _1610.x * cbModelParam._m0[1u].y;
        _1624 = _1610.y * cbModelParam._m0[1u].y;
        _1626 = _1610.z * cbModelParam._m0[1u].y;
    }
    float _1630 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _533);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1630 : min(cbModelParam._m0[25u].w, _1630));
    float _1722;
    float _1724;
    float _1726;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1686 = fma(_761, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _753)) + cbModelParam._m0[21u].w;
        float _1690 = fma(_761, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _753)) + cbModelParam._m0[22u].w;
        float _1694 = fma(_761, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _753)) + cbModelParam._m0[23u].w;
        float _1697 = fma(_702, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _700));
        float _1700 = fma(_702, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _700));
        float _1703 = fma(_702, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _700));
        float _1841;
        if (_1697 > 0.0)
        {
            _1841 = abs((1.0 - _1686) / _1697);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1686 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1841 = frontier_phi_28_24_ladder;
        }
        float _2106;
        if (_1700 > 0.0)
        {
            _2106 = abs((1.0 - _1690) / _1700);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1690 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2106 = frontier_phi_40_35_ladder;
        }
        float _2311;
        if (_1703 > 0.0)
        {
            _2311 = abs((1.0 - _1694) / _1703);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1694 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2311 = frontier_phi_49_46_ladder;
        }
        float _2313 = isnan(_2106) ? _1841 : (isnan(_1841) ? _2106 : min(_1841, _2106));
        float _2314 = isnan(_2311) ? _2313 : (isnan(_2313) ? _2311 : min(_2313, _2311));
        float _2318 = (_2314 * _1697) + _1686;
        float _2319 = (_2314 * _1700) + _1690;
        float _2320 = (_2314 * _1703) + _1694;
        float _2321 = _2314 * 9.9999997473787516355514526367188e-05;
        float _2322 = (-1.0) - _2321;
        float _2324 = _2321 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2320 > _2324) || ((_2320 < _2322) || ((_2319 > _2324) || ((_2319 < _2322) || ((_2318 < _2322) || (_2318 > _2324))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2519 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2320, cbModelParam._m0[17u].z, fma(_2319, cbModelParam._m0[17u].y, _2318 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2320, cbModelParam._m0[18u].z, fma(_2319, cbModelParam._m0[18u].y, _2318 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2320, cbModelParam._m0[19u].z, fma(_2319, cbModelParam._m0[19u].y, _2318 * cbModelParam._m0[19u].x))), _1631);
            frontier_phi_25_49_ladder = _2519.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2519.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2519.x * cbModelParam._m0[1u].z;
        }
        _1722 = frontier_phi_25_49_ladder_2;
        _1724 = frontier_phi_25_49_ladder_1;
        _1726 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1706 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_700, _701, _702), _1631);
        _1722 = _1706.x * cbModelParam._m0[1u].z;
        _1724 = _1706.y * cbModelParam._m0[1u].z;
        _1726 = _1706.z * cbModelParam._m0[1u].z;
    }
    float _1738 = ((((1.0 - _721) * ((_708 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_721 * _708)) * _692;
    float _1739 = _1738 * ((cbModelParam._m0[1u].w * (_1722 - _1622)) + _1622);
    float _1740 = _1738 * ((cbModelParam._m0[1u].w * (_1724 - _1624)) + _1624);
    float _1741 = _1738 * ((cbModelParam._m0[1u].w * (_1726 - _1626)) + _1626);
    float _1744 = fma(_1741, cbSceneParam._m0[89u].z, fma(_1740, cbSceneParam._m0[89u].y, _1739 * cbSceneParam._m0[89u].x));
    float _1747 = fma(_1741, cbSceneParam._m0[90u].z, fma(_1740, cbSceneParam._m0[90u].y, _1739 * cbSceneParam._m0[90u].x));
    float _1750 = fma(_1741, cbSceneParam._m0[91u].z, fma(_1740, cbSceneParam._m0[91u].y, _1739 * cbSceneParam._m0[91u].x));
    uvec4 _1760 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1762 = _1760.x * 14u;
    uint _1763 = _1762 + 13u;
    float _1770 = _692 + (-1.0);
    float _1775 = (cbLight._m0[_1763].x * _1770) + 1.0;
    float _1776 = (cbLight._m0[_1763].y * _1770) + 1.0;
    float _1777 = (cbLight._m0[_1763].z * _1770) + 1.0;
    float _1778 = (cbLight._m0[_1763].w * _1770) + 1.0;
    uint _1779 = _1762 + 5u;
    float _1785 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
    uint _1789 = _1762 + 4u;
    float _1795 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
    uint _1799 = _1762 | 1u;
    float _1810 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_530, _531, _532));
    float _1813 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_530, _531, _532));
    float _3978 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _3989 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1818 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.3183098733425140380859375;
    float _1820 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.3183098733425140380859375;
    float _1827 = ((cbLight._m0[_1779].x * _1785) * _1820) + ((cbLight._m0[_1789].x * _1795) * _1818);
    float _1828 = ((_1785 * cbLight._m0[_1779].y) * _1820) + ((_1795 * cbLight._m0[_1789].y) * _1818);
    float _1829 = ((_1785 * cbLight._m0[_1779].z) * _1820) + ((_1795 * cbLight._m0[_1789].z) * _1818);
    uvec4 _1833 = floatBitsToUint(cbLight._m0[_1762 + 12u]);
    bool _1835 = _1833.x == 0u;
    float _1846;
    float _1848;
    float _1850;
    if (_1835)
    {
        _1846 = _1827;
        _1848 = _1828;
        _1850 = _1829;
    }
    else
    {
        uint _1854 = _1762 + 6u;
        float _1870 = (dot(vec3(cbLight._m0[_1762 + 2u].xyz), vec3(_530, _531, _532)) * 0.5) + 0.5;
        float _1871 = _1870 * _1870;
        float _4000 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1873 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _1846 = (((cbLight._m0[_1854].x * 0.3183098733425140380859375) * _1872) * _1873) + _1827;
        _1848 = (((cbLight._m0[_1854].y * 0.3183098733425140380859375) * _1872) * _1873) + _1828;
        _1850 = (((cbLight._m0[_1854].z * 0.3183098733425140380859375) * _1872) * _1873) + _1829;
    }
    bool _1853 = _1833.y == 0u;
    float _1891;
    float _1893;
    float _1895;
    if (_1853)
    {
        _1891 = _1846;
        _1893 = _1848;
        _1895 = _1850;
    }
    else
    {
        uint _2050 = _1762 + 7u;
        float _2066 = (dot(vec3(cbLight._m0[_1762 + 3u].xyz), vec3(_530, _531, _532)) * 0.5) + 0.5;
        float _2067 = _2066 * _2066;
        float _4016 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2068 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2069 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _1891 = (((cbLight._m0[_2050].x * 0.3183098733425140380859375) * _2068) * _2069) + _1846;
        _1893 = (((cbLight._m0[_2050].y * 0.3183098733425140380859375) * _2068) * _2069) + _1848;
        _1895 = (((cbLight._m0[_2050].z * 0.3183098733425140380859375) * _2068) * _2069) + _1850;
    }
    uint _1898 = _1762 + 8u;
    float _1911 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1762].w)) * _533) * 0.949999988079071044921875);
    float _1912 = _1911 * _1911;
    float _1913 = cbLight._m0[_1762].x + _609;
    float _1914 = cbLight._m0[_1762].y + _610;
    float _1915 = cbLight._m0[_1762].z + _611;
    float _1919 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
    float _1920 = _1919 * _1913;
    float _1921 = _1919 * _1914;
    float _1922 = _1919 * _1915;
    float _1923 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_1762].xyz));
    float _4032 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _1927 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1928 = dot(vec3(_530, _531, _532), vec3(_1920, _1921, _1922));
    float _4054 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _1932 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_1920, _1921, _1922));
    float _4065 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1936 = _1912 * _1912;
    float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
    float _1951 = (exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1952 = 1.0 - _1912;
    float _1963 = (0.5 / (((_1927 * ((_1926 * _1952) + _1912)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _1952) + _1912) * _1926))) * _1926;
    float _4076 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1965 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
    uint _1976 = _1762 + 9u;
    float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1799].w)) * _533) * 0.949999988079071044921875);
    float _1988 = _1987 * _1987;
    float _1989 = cbLight._m0[_1799].x + _609;
    float _1990 = cbLight._m0[_1799].y + _610;
    float _1991 = cbLight._m0[_1799].z + _611;
    float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
    float _1996 = _1995 * _1989;
    float _1997 = _1995 * _1990;
    float _1998 = _1995 * _1991;
    float _1999 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_1799].xyz));
    float _4087 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _2003 = dot(vec3(_530, _531, _532), vec3(_1996, _1997, _1998));
    float _4098 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _2007 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_1996, _1997, _1998));
    float _4109 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2011 = _1988 * _1988;
    float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
    float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2025 = 1.0 - _1988;
    float _2035 = (0.5 / (((_1927 * ((_2002 * _2025) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2025) + _1988) * _2002))) * _2002;
    float _4120 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2037 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
    float _2047 = (((_2024 * cbLight._m0[_1976].x) * _2037) * _1785) + (((_1951 * cbLight._m0[_1898].x) * _1965) * _1795);
    float _2048 = (((_2024 * cbLight._m0[_1976].y) * _2037) * _1785) + (((_1951 * cbLight._m0[_1898].y) * _1965) * _1795);
    float _2049 = (((_2024 * cbLight._m0[_1976].z) * _2037) * _1785) + (((_1951 * cbLight._m0[_1898].z) * _1965) * _1795);
    float _2111;
    float _2113;
    float _2115;
    if (_1835)
    {
        _2111 = _2047;
        _2113 = _2048;
        _2115 = _2049;
    }
    else
    {
        uint _2117 = _1762 + 2u;
        uint _2121 = _1762 + 10u;
        float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _533) * 0.949999988079071044921875);
        float _2136 = _2135 * _2135;
        float _2137 = cbLight._m0[_2117].x + _609;
        float _2138 = cbLight._m0[_2117].y + _610;
        float _2139 = cbLight._m0[_2117].z + _611;
        float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
        float _2144 = _2143 * _2137;
        float _2145 = _2143 * _2138;
        float _2146 = _2143 * _2139;
        float _2147 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_2117].xyz));
        float _4131 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2151 = dot(vec3(_530, _531, _532), vec3(_2144, _2145, _2146));
        float _4142 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2155 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2144, _2145, _2146));
        float _4153 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2159 = _2136 * _2136;
        float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
        float _2172 = (exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2173 = 1.0 - _2136;
        float _2183 = (0.5 / (((_1927 * ((_2150 * _2173) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2173) + _2136) * _2150))) * _2150;
        float _4164 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2185 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
        float _2186 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _2111 = (((_2172 * cbLight._m0[_2121].x) * _2185) * _2186) + _2047;
        _2113 = (((_2172 * cbLight._m0[_2121].y) * _2185) * _2186) + _2048;
        _2115 = (((_2172 * cbLight._m0[_2121].z) * _2185) * _2186) + _2049;
    }
    float _2221;
    float _2223;
    float _2225;
    if (_1853)
    {
        _2221 = _2111;
        _2223 = _2113;
        _2225 = _2115;
    }
    else
    {
        uint _2232 = _1762 + 3u;
        uint _2236 = _1762 + 11u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _533) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _609;
        float _2253 = cbLight._m0[_2232].y + _610;
        float _2254 = cbLight._m0[_2232].z + _611;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_2232].xyz));
        float _4180 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2266 = dot(vec3(_530, _531, _532), vec3(_2259, _2260, _2261));
        float _4191 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4202 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2288 = 1.0 - _2251;
        float _2298 = (0.5 / (((_1927 * ((_2265 * _2288) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2288) + _2251) * _2265))) * _2265;
        float _4213 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2300 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2301 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _2221 = (((_2287 * cbLight._m0[_2236].x) * _2300) * _2301) + _2111;
        _2223 = (((_2287 * cbLight._m0[_2236].y) * _2300) * _2301) + _2113;
        _2225 = (((_2287 * cbLight._m0[_2236].z) * _2300) * _2301) + _2115;
    }
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_1760.y == 0u)
    {
        float _2376 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2377 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2376;
        float _2378 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2376;
        float _2379 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2376;
        uvec4 _2391 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2392 = _2391.x;
        uint _2403 = uint((float(_2391.y) * floor(float(uint(cbSceneParam._m0[85u].y * _630) / _2392))) + floor(float(uint(cbSceneParam._m0[85u].x * _629) / _2392)));
        float _2413 = (log2(_2379 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2414 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        uint _2417 = uint(isnan(14.0) ? _2414 : (isnan(_2414) ? 14.0 : min(_2414, 14.0)));
        uvec4 _2422 = texelFetch(g_lightClusterGridBuffer, int(((_2417 << 2u) + (_2403 << 6u)) >> 2u));
        uint _2423 = _2422.x;
        uint _2424 = _2391.z;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        if (((((1u << ((_2424 >> 4u) & 15u)) + 4294967295u) & _2423) == 0u) || ((_2424 & 240u) == 0u))
        {
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
        }
        else
        {
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2533;
            float _2535;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            uint _2683 = 0u;
            uint _2692;
            bool _2693;
            for (;;)
            {
                _2692 = texelFetch(g_lightClassification, int((((_2417 << 5u) + (_2403 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                _2693 = _2692 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2693)
                {
                    frontier_phi_66_pred = _2677;
                    frontier_phi_66_pred_1 = _2682;
                    frontier_phi_66_pred_2 = _2681;
                    frontier_phi_66_pred_3 = _2680;
                    frontier_phi_66_pred_4 = _2679;
                    frontier_phi_66_pred_5 = _2678;
                }
                else
                {
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    uint _2828;
                    _2822 = _2677;
                    _2823 = _2678;
                    _2824 = _2679;
                    _2825 = _2680;
                    _2826 = _2681;
                    _2827 = _2682;
                    _2828 = _2692;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    for (;;)
                    {
                        uint _2832 = uint(findLSB(_2828)) + (_2683 << 5u);
                        uint _2829 = (_2828 + 4294967295u) & _2828;
                        uint _2834 = _2832 * 48u;
                        vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 3u)).x));
                        uint _2854 = (_2832 * 48u) + 4u;
                        vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 3u)).x));
                        uint _2873 = (_2832 * 48u) + 8u;
                        vec3 _2884 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x));
                        float _2888 = _2848.x - _2377;
                        float _2889 = _2848.y - _2378;
                        float _2890 = _2848.z - _2379;
                        float _2891 = dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890));
                        float _2894 = inversesqrt(_2891);
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2898 = dot(vec3(_648, _651, _654), vec3(_2895, _2896, _2897));
                        float _2903 = 1.0 - (_2891 * _2848.w);
                        float _4239 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2904 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2905 = sqrt(_2891) * _2867.w;
                        float _2908 = 1.39999997615814208984375 / (_2905 + 1.39999997615814208984375);
                        float _2909 = _2908 * _2908;
                        float _2912 = ((1.0 - _2909) * _2898) + _2909;
                        float _2915 = _2905 * _2905;
                        float _2919 = ((isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))) * _2904) / ((_2915 * 0.699999988079071044921875) + 1.0);
                        float _2923 = (-0.0) - _2377;
                        float _2924 = (-0.0) - _2378;
                        float _2925 = (-0.0) - _2379;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2940 = exp2(log2(1.0 / ((_2915 * 3.5) + 5.0)) * 0.25);
                        float _2941 = 1.0 - _708;
                        float _2948 = sqrt(1.0 - ((1.0 - (_2941 * _2941)) * (1.0 - (_2940 * _2940))));
                        float _2949 = _2948 * _2948;
                        float _2950 = _2949 * _2949;
                        float _2951 = _2930 + _2895;
                        float _2952 = _2931 + _2896;
                        float _2953 = _2932 + _2897;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2961 = dot(vec3(_648, _651, _654), vec3(_2930, _2931, _2932));
                        float _4255 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2965 = dot(vec3(_648, _651, _654), vec3(_2957 * _2951, _2957 * _2952, _2957 * _2953));
                        float _4266 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2968 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                        float _2972 = ((_2968 * _2968) * (_2950 + (-1.0))) + 1.0;
                        float _2973 = _2908 * _2949;
                        float _2974 = _2973 * _2973;
                        float _2977 = ((1.0 - _2974) * _2898) + _2974;
                        float _4277 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2979 = 1.0 - _2949;
                        float _2989 = (0.5 / (((_2978 * ((_2964 * _2979) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2978 * _2979) + _2949) * _2964))) * _2978;
                        float _4288 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _3000 = (((_2950 * 3.1415927410125732421875) * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) / ((_2972 * _2972) * ((_2915 * 2.1991131305694580078125) + 3.141590118408203125))) * _2904;
                        _2752 = (_2919 * _2867.x) + _2825;
                        _2753 = (_2919 * _2867.y) + _2826;
                        _2754 = (_2919 * _2867.z) + _2827;
                        _2749 = (_3000 * _2884.x) + _2822;
                        _2750 = (_3000 * _2884.y) + _2823;
                        _2751 = (_3000 * _2884.z) + _2824;
                        if (_2829 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2822 = _2749;
                            _2823 = _2750;
                            _2824 = _2751;
                            _2825 = _2752;
                            _2826 = _2753;
                            _2827 = _2754;
                            _2828 = _2829;
                        }
                    }
                    frontier_phi_66_pred = _2749;
                    frontier_phi_66_pred_1 = _2754;
                    frontier_phi_66_pred_2 = _2753;
                    frontier_phi_66_pred_3 = _2752;
                    frontier_phi_66_pred_4 = _2751;
                    frontier_phi_66_pred_5 = _2750;
                }
                _2525 = frontier_phi_66_pred;
                _2535 = frontier_phi_66_pred_1;
                _2533 = frontier_phi_66_pred_2;
                _2531 = frontier_phi_66_pred_3;
                _2529 = frontier_phi_66_pred_4;
                _2527 = frontier_phi_66_pred_5;
                uint _2684 = _2683 + 1u;
                if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2677 = _2525;
                    _2678 = _2527;
                    _2679 = _2529;
                    _2680 = _2531;
                    _2681 = _2533;
                    _2682 = _2535;
                    _2683 = _2684;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
        }
        uvec4 _2538 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2539 = _2538.z;
        uint _2541 = (_2539 >> 8u) & 15u;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        if (((4294967295u << _2541) & _2423) == 0u)
        {
            _2645 = _2524;
            _2647 = _2526;
            _2649 = _2528;
            _2651 = _2530;
            _2653 = _2532;
            _2655 = _2534;
        }
        else
        {
            float _2670 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
            float _2671 = _2670 * _2377;
            float _2672 = _2670 * _2378;
            float _2673 = _2670 * _2379;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2541 < ((_2539 >> 12u) & 15u))
            {
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2805 = _2524;
                float _2806 = _2526;
                float _2807 = _2528;
                float _2808 = _2530;
                float _2809 = _2532;
                float _2810 = _2534;
                uint _2811 = _2541;
                uint _2820;
                bool _2821;
                for (;;)
                {
                    _2820 = texelFetch(g_lightClassification, int((((_2417 << 5u) + (_2403 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                    _2821 = _2820 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2821)
                    {
                        frontier_phi_77_pred = _2810;
                        frontier_phi_77_pred_1 = _2809;
                        frontier_phi_77_pred_2 = _2808;
                        frontier_phi_77_pred_3 = _2807;
                        frontier_phi_77_pred_4 = _2806;
                        frontier_phi_77_pred_5 = _2805;
                    }
                    else
                    {
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3027 = _2805;
                        float _3028 = _2806;
                        float _3029 = _2807;
                        float _3030 = _2808;
                        float _3031 = _2809;
                        float _3032 = _2810;
                        uint _3033 = _2820;
                        uint _3034;
                        vec4 _3059;
                        float _3060;
                        vec4 _3075;
                        vec3 _3087;
                        vec4 _3102;
                        vec4 _3118;
                        float _3164;
                        bool _3165;
                        for (;;)
                        {
                            uint _3044 = ((_2811 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3033));
                            _3034 = (_3033 + 4294967295u) & _3033;
                            uint _3046 = _3044 * 40u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            _3060 = _3059.w;
                            uint _3062 = (_3044 * 40u) + 4u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3077 = (_3044 * 40u) + 8u;
                            _3087 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x));
                            uint _3089 = (_3044 * 40u) + 16u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3105 = (_3044 * 40u) + 20u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3120 = (_3044 * 40u) + 24u;
                            vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3139 = (_3044 * 40u) + 28u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            _3164 = fma(_2379, _3152.z, fma(_2378, _3152.y, _3152.x * _2377)) + _3152.w;
                            _3165 = !((fma(_2379, _3133.z, fma(_2378, _3133.y, _3133.x * _2377)) + _3133.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3165)
                            {
                                float _3192 = _3059.x - _2377;
                                float _3193 = _3059.y - _2378;
                                float _3194 = _3059.z - _2379;
                                float _3195 = dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194));
                                float _3198 = inversesqrt(_3195);
                                float _3199 = _3198 * _3192;
                                float _3200 = _3198 * _3193;
                                float _3201 = _3198 * _3194;
                                float _3205 = 1.0 - (_3195 / (_3060 * _3060));
                                float _4299 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3206 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3210 = sqrt(_3195) * _3075.w;
                                float _3212 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                                float _3213 = _3212 * _3212;
                                float _3216 = ((1.0 - _3213) * dot(vec3(_3199, _3200, _3201), vec3(_648, _651, _654))) + _3213;
                                float _3219 = _3210 * _3210;
                                float _3223 = (fma(_2379, _3102.z, fma(_2378, _3102.y, _3102.x * _2377)) + _3102.w) / _3164;
                                float _3224 = (fma(_2379, _3118.z, fma(_2378, _3118.y, _3118.x * _2377)) + _3118.w) / _3164;
                                float _3228 = 1.0 - dot(vec2(_3223, _3224), vec2(_3223, _3224));
                                float _4315 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3230 = _3229 * (((isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))) * _3206) / ((_3219 * 0.699999988079071044921875) + 1.0));
                                float _3242 = exp2(log2(1.0 / ((_3219 * 3.5) + 5.0)) * 0.25);
                                float _3243 = 1.0 - _708;
                                float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                                float _3251 = _3250 * _3250;
                                float _3252 = _3251 * _3251;
                                float _3253 = _3199 - _2671;
                                float _3254 = _3200 - _2672;
                                float _3255 = _3201 - _2673;
                                float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                                float _3263 = dot(vec3(_648, _651, _654), vec3((-0.0) - _2671, (-0.0) - _2672, (-0.0) - _2673));
                                float _4326 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3267 = dot(vec3(_648, _651, _654), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                                float _4337 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3270 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                                float _3275 = _3212 * _3251;
                                float _3276 = _3275 * _3275;
                                float _3282 = ((1.0 - _3276) * dot(vec3(_648, _651, _654), vec3(_3199, _3200, _3201))) + _3276;
                                float _4348 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3284 = 1.0 - _3251;
                                float _3294 = (0.5 / (((_3283 * ((_3266 * _3284) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3251) * _3266))) * _3283;
                                float _4359 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3304 = (_3229 * _3206) * (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) / ((_3274 * _3274) * ((_3219 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3230 * _3075.y;
                                frontier_phi_83_pred_1 = _3230 * _3075.x;
                                frontier_phi_83_pred_2 = _3304 * _3087.z;
                                frontier_phi_83_pred_3 = _3304 * _3087.y;
                                frontier_phi_83_pred_4 = _3304 * _3087.x;
                                frontier_phi_83_pred_5 = _3230 * _3075.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3312 = frontier_phi_83_pred;
                            _3311 = frontier_phi_83_pred_1;
                            _3310 = frontier_phi_83_pred_2;
                            _3309 = frontier_phi_83_pred_3;
                            _3308 = frontier_phi_83_pred_4;
                            _3313 = frontier_phi_83_pred_5;
                            _3017 = _3311 + _3030;
                            _3018 = _3312 + _3031;
                            _3019 = _3313 + _3032;
                            _3014 = _3308 + _3027;
                            _3015 = _3309 + _3028;
                            _3016 = _3310 + _3029;
                            if (_3034 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3034;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3019;
                        frontier_phi_77_pred_1 = _3018;
                        frontier_phi_77_pred_2 = _3017;
                        frontier_phi_77_pred_3 = _3016;
                        frontier_phi_77_pred_4 = _3015;
                        frontier_phi_77_pred_5 = _3014;
                    }
                    _2656 = frontier_phi_77_pred;
                    _2654 = frontier_phi_77_pred_1;
                    _2652 = frontier_phi_77_pred_2;
                    _2650 = frontier_phi_77_pred_3;
                    _2648 = frontier_phi_77_pred_4;
                    _2646 = frontier_phi_77_pred_5;
                    uint _2812 = _2811 + 1u;
                    if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2805 = _2646;
                        _2806 = _2648;
                        _2807 = _2650;
                        _2808 = _2652;
                        _2809 = _2654;
                        _2810 = _2656;
                        _2811 = _2812;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2650;
                frontier_phi_58_59_ladder_1 = _2656;
                frontier_phi_58_59_ladder_2 = _2654;
                frontier_phi_58_59_ladder_3 = _2652;
                frontier_phi_58_59_ladder_4 = _2648;
                frontier_phi_58_59_ladder_5 = _2646;
            }
            else
            {
                frontier_phi_58_59_ladder = _2528;
                frontier_phi_58_59_ladder_1 = _2534;
                frontier_phi_58_59_ladder_2 = _2532;
                frontier_phi_58_59_ladder_3 = _2530;
                frontier_phi_58_59_ladder_4 = _2526;
                frontier_phi_58_59_ladder_5 = _2524;
            }
            _2645 = frontier_phi_58_59_ladder_5;
            _2647 = frontier_phi_58_59_ladder_4;
            _2649 = frontier_phi_58_59_ladder;
            _2651 = frontier_phi_58_59_ladder_3;
            _2653 = frontier_phi_58_59_ladder_2;
            _2655 = frontier_phi_58_59_ladder_1;
        }
        float _2660 = isnan(1.0) ? _692 : (isnan(_692) ? 1.0 : min(_692, 1.0));
        _2436 = (_2660 * _2651) + _1891;
        _2438 = (_2660 * _2653) + _1893;
        _2440 = (_2660 * _2655) + _1895;
        _2442 = ((_2645 * 0.039999999105930328369140625) * _2660) + _2221;
        _2444 = ((_2647 * 0.039999999105930328369140625) * _2660) + _2223;
        _2446 = ((_2649 * 0.039999999105930328369140625) * _2660) + _2225;
    }
    else
    {
        _2436 = _1891;
        _2438 = _1893;
        _2440 = _1895;
        _2442 = _2221;
        _2444 = _2223;
        _2446 = _2225;
    }
    float _4375 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4386 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _4397 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _2463 = ((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2436 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _692))) + ((_2442 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1529)) * cbPerFrame._m0[3u].x);
    float _2464 = ((isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2438 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _692))) + ((_2444 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1529)) * cbPerFrame._m0[3u].x);
    float _2465 = ((isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2440 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _692))) + ((_2446 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1529)) * cbPerFrame._m0[3u].x);
    uint _2466 = _230 + 6u;
    float _2474 = _629 / cbSceneParam._m0[86u].x;
    float _2475 = _630 / cbSceneParam._m0[86u].y;
    vec4 _2489 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2474, _2475, (log2((isnan(cbSceneParam._m0[77u].w) ? _551 : (isnan(_551) ? cbSceneParam._m0[77u].w : min(_551, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2491 = _2489.x;
    float _2492 = _2489.y;
    float _2493 = _2489.z;
    float _2494 = _2489.w;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    if (_551 > cbSceneParam._m0[78u].w)
    {
        float _2549 = isnan(_551) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _551 : min(cbSceneParam._m0[80u].w, _551));
        float _2550 = _2549 / _551;
        float _2561 = _2550 * _602;
        float _2562 = _603 * _2550;
        float _2563 = (-0.0) - _2562;
        float _2565 = _2550 * _604;
        float _2567 = (cbSceneParam._m0[77u].w * _2563) / _2549;
        float _2568 = _2567 + cbSceneParam._m0[79u].w;
        float _2569 = cbSceneParam._m0[79u].w - _2562;
        float _2575 = sqrt(((_2561 * _2561) + (_2562 * _2562)) + (_2565 * _2565));
        float _2578 = (1.0 - (cbSceneParam._m0[77u].w / _2549)) * _2575;
        float _2583 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2585 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2762;
        if (abs((_2563 - _2567) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2762 = ((((_2568 > 0.0) ? exp2(_2583 * _2568) : (2.0 - exp2(_2585 * _2568))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2578;
        }
        else
        {
            float _2706 = 1.0 / cbSceneParam._m0[80u].x;
            float _2707 = isnan(_2569) ? _2568 : (isnan(_2568) ? _2569 : max(_2568, _2569));
            float _2708 = isnan(_2569) ? _2568 : (isnan(_2568) ? _2569 : min(_2568, _2569));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            float _2718 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : min(_2708, 0.0));
            _2762 = ((abs(_2575 / _2563) * cbSceneParam._m0[80u].y) * ((((_2717 - _2718) * 2.0) - ((exp2(_2583 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0)))) - exp2(_2583 * (isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0))))) * _2706)) - ((exp2(_2585 * _2717) - exp2(_2585 * _2718)) * _2706))) + (_2578 * cbSceneParam._m0[80u].z);
        }
        vec4 _2764 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2474, _2475, 1.0), 0.0);
        float _2773 = exp2((_2762 * (-1.44269502162933349609375)) * (1.0 - _2764.w));
        float _2774 = log2(_2773);
        float _2790 = log2(_2494);
        _2587 = (exp2(_2790 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].x)) * _2764.x) / cbSceneParam._m0[78u].x)) + _2491;
        _2589 = (exp2(_2790 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].y)) * _2764.y) / cbSceneParam._m0[78u].y)) + _2492;
        _2591 = (exp2(_2790 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].z)) * _2764.z) / cbSceneParam._m0[78u].z)) + _2493;
        _2593 = _2773 * _2494;
    }
    else
    {
        _2587 = _2491;
        _2589 = _2492;
        _2591 = _2493;
        _2593 = _2494;
    }
    bool _2800;
    vec4 _2603;
    vec4 _2625;
    float _2627;
    float _2631;
    float _2632;
    float _2633;
    float _2634;
    bool _2644;
    for (;;)
    {
        _2603 = cbMatDynParam._m0[0u];
        float _2605 = roundEven(_2603.y);
        bool _2606 = _2605 == 3.0;
        float _2607 = log2(_2593);
        float _2614 = exp2(_2607 * cbSceneParam._m0[78u].x) * _2463;
        float _2615 = exp2(_2607 * cbSceneParam._m0[78u].y) * _2464;
        float _2616 = exp2(_2607 * cbSceneParam._m0[78u].z) * _2465;
        float _2623 = _618 + (-0.5);
        _2625 = cbMtdParam._m0[1u];
        _2627 = _2625.y * _2623;
        float _2630 = (_2605 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2631 = _2630 * (_2606 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2587)));
        _2632 = _2630 * (_2606 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2589)));
        _2633 = _2630 * (_2606 ? _2616 : (_2616 + (cbSceneParam._m0[72u].w * _2591)));
        _2634 = _2623 * 0.999000012874603271484375;
        _2644 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2644)
        {
            if ((cbInstanceData._m0[_230 + 7u].x + _2634) < 0.5)
            {
                _2800 = true;
                break;
            }
        }
        uint _2741 = _667 + uint(_2603.w);
        if ((cbInstanceData._m0[_2741].w < 1.0) && ((cbInstanceData._m0[_2741].w + _2634) < 0.5))
        {
            _2800 = true;
            break;
        }
        if ((_2627 + 1.0) < _2625.x)
        {
            _2800 = true;
            break;
        }
        _2800 = false;
        break;
    }
    float _3005;
    if (_2800)
    {
        discard_state = true;
        _3005 = 0.0;
    }
    else
    {
        _3005 = cbInstanceData._m0[_2466].w;
    }
    SV_Target.x = _2631;
    SV_Target.y = _2632;
    SV_Target.z = _2633;
    SV_Target.w = _3005;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2466].w;
    discard_exit();
}


