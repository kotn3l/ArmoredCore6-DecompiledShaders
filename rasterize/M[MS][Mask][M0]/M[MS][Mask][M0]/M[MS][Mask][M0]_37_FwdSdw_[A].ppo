#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1332;
float _3974;
float _3975;
float _3976;
float _3977;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _401 = _399.x;
    float _413 = dot(vec4(_401, _399.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _430 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_401 - _413) * cbMtdParam._m0[24u].z) + _413) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3986 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _444 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_431 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325);
    float _447 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_431 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326);
    float _450 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_431 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327);
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _506 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _508 = _506.x;
    float _509 = _506.y;
    float _510 = _506.z;
    float _519 = ((_489.z - _510) * _431) + _510;
    float _522 = ((((_489.x - _508) * _431) + _508) * 2.0) + (-1.0);
    float _524 = ((((_489.y - _509) * _431) + _509) * 2.0) + (-1.0);
    float _525 = dot(vec2(_522, _524), vec2(_522, _524));
    float _3997 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _530 = sqrt(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _573 = _571.x;
    float _574 = 1.0 - _573;
    float _580 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _583 = ((isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : min(_580, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _592 = (_583 - ((((((_573 - _574) * cbMtdParam._m0[24u].w) + _574) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _583))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4018 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _600 = (_593 * ((_469.x * cbMtdParam._m0[18u].x) - _444)) + _444;
    float _601 = (_593 * ((_469.y * cbMtdParam._m0[18u].y) - _447)) + _447;
    float _602 = (_593 * ((_469.z * cbMtdParam._m0[18u].z) - _450)) + _450;
    vec4 _614 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _616 = _614.x;
    float _617 = 1.0 - _616;
    float _644 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_616 - _617) * cbMtdParam._m0[24u].y) + _617) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4029 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _645 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _653 = ((((cbMtdParam._m0[10u].x - _600) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _645) + _600;
    float _654 = ((((cbMtdParam._m0[10u].y - _601) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _645) + _601;
    float _655 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _602)) * _645) + _602;
    float _659 = (cbMtdParam._m0[19u].w * (_546.z - _519)) + _519;
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _680 = (_673.x * 2.0) + (-1.0);
    float _681 = (_673.y * 2.0) + (-1.0);
    float _682 = dot(vec2(_680, _681), vec2(_680, _681));
    float _4040 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _690 = (_593 * (_673.z - _659)) + _659;
    float _693 = ((cbMtdParam._m0[23u].y - _690) * _645) + _690;
    vec4 _712 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _718 = (_712.x * 2.0) + (-1.0);
    float _719 = (_712.y * 2.0) + (-1.0);
    float _720 = dot(vec2(_718, _719), vec2(_718, _719));
    float _4051 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _728 = (((_546.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _522;
    float _729 = (((_546.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _524;
    float _741 = (((_680 - _728) + (cbMtdParam._m0[21u].x * _728)) * _593) + _728;
    float _742 = (((_681 - _729) + (cbMtdParam._m0[21u].x * _729)) * _593) + _729;
    float _743 = (_593 * (sqrt(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) - _530)) + _530;
    float _754 = (((_718 - _741) + (_741 * cbMtdParam._m0[22u].z)) * _645) + _741;
    float _755 = (((_719 - _742) + (_742 * cbMtdParam._m0[22u].z)) * _645) + _742;
    float _756 = ((sqrt(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) - _743) * _645) + _743;
    float _758 = cbMtdParam._m0[22u].x + _546.w;
    float _761 = fma(_756, _244 * NORMAL.x, fma(_755, _251 * TANGENT.x, (_237 * _229) * _754));
    float _764 = fma(_756, _244 * NORMAL.y, fma(_755, _251 * TANGENT.y, (_237 * _230) * _754));
    float _767 = fma(_756, _244 * NORMAL.z, fma(_755, _251 * TANGENT.z, (_237 * _231) * _754));
    float _771 = inversesqrt(dot(vec3(_761, _764, _767), vec3(_761, _764, _767)));
    float _772 = _771 * _761;
    float _773 = _771 * _764;
    float _774 = _771 * _767;
    float _4062 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _775 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4084 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4095 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4106 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _793 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _843 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _833);
    float _844 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _833);
    float _845 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _833);
    float _849 = inversesqrt(dot(vec3(_843, _844, _845), vec3(_843, _844, _845)));
    float _850 = _843 * _849;
    float _851 = _844 * _849;
    float _852 = _845 * _849;
    vec4 _857 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _859 = _857.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1013 = sqrt(((_843 * _843) + (_844 * _844)) + (_845 * _845));
        float _1019 = (cbMatDynParam._m0[5u].x * _1013) + cbMatDynParam._m0[5u].y;
        float _4117 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1024 = (cbMatDynParam._m0[5u].z * _1013) + cbMatDynParam._m0[5u].w;
        float _4128 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) - _1020)) + _1020) < ((_859 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _870 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _871 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _889 = fma(_774, cbSceneParam._m0[5u].z, fma(_773, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _772));
    float _892 = fma(_774, cbSceneParam._m0[6u].z, fma(_773, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _772));
    float _895 = fma(_774, cbSceneParam._m0[7u].z, fma(_773, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _772));
    uint _908 = _257 + 9u;
    uint _909 = _908 + uint(cbMatDynParam._m0[0u].w);
    float _915 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * cbInstanceData._m0[_909].x;
    float _916 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * cbInstanceData._m0[_909].y;
    float _917 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * cbInstanceData._m0[_909].z;
    float _4139 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    vec4 _929 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _870, cbSceneParam._m0[86u].y * _871));
    float _933 = ((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * TEXCOORD_5.w) * _929.x;
    float _934 = dot(vec3(_772, _773, _774), vec3(_850, _851, _852));
    float _937 = _934 * 2.0;
    float _941 = (_937 * _772) - _850;
    float _942 = (_937 * _773) - _851;
    float _943 = (_937 * _774) - _852;
    float _947 = abs(dot(vec3(_850, _851, _852), vec3(_772, _773, _774)));
    float _4172 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _949 = sqrt(_775);
    float _962 = exp2((_949 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_949 * 3.0));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1331;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1056 = fma(_1002, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _994));
        float _1060 = fma(_1002, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _994));
        float _1064 = fma(_1002, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _994));
        float _1089 = _994 + _772;
        float _1090 = _998 + _773;
        float _1091 = _1002 + _774;
        float _1101 = fma(_1091, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089)) - _1056;
        float _1102 = fma(_1091, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089)) - _1060;
        float _1103 = fma(_1091, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089)) - _1064;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1056 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1060 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[34u].z) + ((((((_1064 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1159 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1125.x + (-0.5));
        float _1161 = _1159 * (_1125.y + (-0.5));
        float _1162 = _1159 * (_1125.z + (-0.5));
        float _1169 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1132.x + (-0.5));
        float _1171 = _1169 * (_1132.y + (-0.5));
        float _1172 = _1169 * (_1132.z + (-0.5));
        float _1179 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1139.x + (-0.5));
        float _1181 = _1179 * (_1139.y + (-0.5));
        float _1182 = _1179 * (_1139.z + (-0.5));
        float _1189 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1146.x + (-0.5));
        float _1191 = _1189 * (_1146.y + (-0.5));
        float _1192 = _1189 * (_1146.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1213 = (dot(vec3(_772, _773, _774), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1223 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _4220 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1225 + 1.0))) + _1230) * _1193;
        float _1240 = _1161 * 0.5;
        float _1241 = _1171 * 0.5;
        float _1242 = _1181 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_772, _773, _774), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4253 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1267 + 1.0))) + _1272) * _1194;
        float _1282 = _1162 * 0.5;
        float _1283 = _1172 * 0.5;
        float _1284 = _1182 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_772, _773, _774), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4286 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1309 + 1.0))) + _1314) * _1195;
        _1331 = _1162;
        _1333 = _1161;
        _1334 = _1160;
        _1335 = _1172;
        _1336 = _1171;
        _1337 = _1170;
        _1338 = _1182;
        _1339 = _1181;
        _1340 = _1180;
        _1341 = _1195;
        _1342 = _1194;
        _1343 = _1193;
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1332;
        _1333 = _1332;
        _1334 = _1332;
        _1335 = _1332;
        _1336 = _1332;
        _1337 = _1332;
        _1338 = _1332;
        _1339 = _1332;
        _1340 = _1332;
        _1341 = _1332;
        _1342 = _1332;
        _1343 = _1332;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1374 = fma(_1002, cbModelParam._m0[30u].z, fma(_998, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _994));
        float _1378 = fma(_1002, cbModelParam._m0[31u].z, fma(_998, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _994));
        float _1382 = fma(_1002, cbModelParam._m0[32u].z, fma(_998, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _994));
        float _1405 = _994 + _772;
        float _1406 = _998 + _773;
        float _1407 = _1002 + _774;
        float _1417 = fma(_1407, cbModelParam._m0[30u].z, fma(_1406, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1405)) - _1374;
        float _1418 = fma(_1407, cbModelParam._m0[31u].z, fma(_1406, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1405)) - _1378;
        float _1419 = fma(_1407, cbModelParam._m0[32u].z, fma(_1406, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1405)) - _1382;
        float _1423 = inversesqrt(dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419)));
        float _1436 = ((_1423 * _1417) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1374 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1423 * _1418) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1378 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1423 * _1419) / cbModelParam._m0[35u].z) + ((((((_1382 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        float _1473 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1440.x + (-0.5));
        float _1475 = _1473 * (_1440.y + (-0.5));
        float _1476 = _1473 * (_1440.z + (-0.5));
        float _1483 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1447.x + (-0.5));
        float _1485 = _1483 * (_1447.y + (-0.5));
        float _1486 = _1483 * (_1447.z + (-0.5));
        float _1493 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1454.x + (-0.5));
        float _1495 = _1493 * (_1454.y + (-0.5));
        float _1496 = _1493 * (_1454.z + (-0.5));
        float _1503 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1461.x + (-0.5));
        float _1505 = _1503 * (_1461.y + (-0.5));
        float _1506 = _1503 * (_1461.z + (-0.5));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = _1474 * 0.5;
        float _1511 = _1484 * 0.5;
        float _1512 = _1494 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_772, _773, _774), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4349 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1537 + 1.0))) + _1542) * _1507;
        float _1552 = _1475 * 0.5;
        float _1553 = _1485 * 0.5;
        float _1554 = _1495 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_772, _773, _774), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4382 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1579 + 1.0))) + _1584) * _1508;
        float _1594 = _1476 * 0.5;
        float _1595 = _1486 * 0.5;
        float _1596 = _1496 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_772, _773, _774), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4393 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4404 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4415 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_1621 + 1.0))) + _1626) * _1509;
        _1643 = _1476;
        _1644 = _1475;
        _1645 = _1474;
        _1646 = _1486;
        _1647 = _1485;
        _1648 = _1484;
        _1649 = _1496;
        _1650 = _1495;
        _1651 = _1494;
        _1652 = _1509;
        _1653 = _1508;
        _1654 = _1507;
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
    }
    else
    {
        _1643 = _1332;
        _1644 = _1332;
        _1645 = _1332;
        _1646 = _1332;
        _1647 = _1332;
        _1648 = _1332;
        _1649 = _1332;
        _1650 = _1332;
        _1651 = _1332;
        _1652 = _1332;
        _1653 = _1332;
        _1654 = _1332;
        _1655 = 0.0;
        _1656 = 0.0;
        _1657 = 0.0;
    }
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1344)) + _1344;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1345)) + _1345;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1346)) + _1346;
    float _1690 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1667));
    float _1711 = _941 * 0.5;
    float _1712 = _942 * 0.5;
    float _1713 = _943 * 0.5;
    float _1714 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1717 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1720 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1754;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1727 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1331, _1335, _1338, _1341));
        float _1731 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1735 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1742 = dot(vec4(cbModelParam._m0[39u]), vec4(_1711, _1712, _1713, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1765;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1756 = dot(vec4(cbModelParam._m0[40u]), vec4(_1711, _1712, _1713, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1769 = (_1765 * cbModelParam._m0[1u].x) + (_1754 * (1.0 - cbModelParam._m0[1u].x));
    float _1779 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _775);
    float _1780 = isnan(_1779) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1779 : min(cbModelParam._m0[25u].z, _1779));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1827 = fma(_1002, cbModelParam._m0[13u].z, fma(_998, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994)) + cbModelParam._m0[13u].w;
        float _1831 = fma(_1002, cbModelParam._m0[14u].z, fma(_998, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994)) + cbModelParam._m0[14u].w;
        float _1835 = fma(_1002, cbModelParam._m0[15u].z, fma(_998, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994)) + cbModelParam._m0[15u].w;
        float _1838 = fma(_943, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941));
        float _1841 = fma(_943, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941));
        float _1844 = fma(_943, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941));
        float _1872;
        if (_1838 > 0.0)
        {
            _1872 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1872 = frontier_phi_17_15_ladder;
        }
        float _2041;
        if (_1841 > 0.0)
        {
            _2041 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2041 = frontier_phi_26_22_ladder;
        }
        float _2336;
        if (_1844 > 0.0)
        {
            _2336 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2336 = frontier_phi_38_33_ladder;
        }
        float _2338 = isnan(_2041) ? _1872 : (isnan(_1872) ? _2041 : min(_1872, _2041));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1838) + _1827;
        float _2344 = (_2339 * _1841) + _1831;
        float _2345 = (_2339 * _1844) + _1835;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2346;
        float _2350 = _2346 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 > _2350) || ((_2344 < _2348) || ((_2343 < _2348) || (_2343 > _2350))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2345, cbModelParam._m0[9u].z, fma(_2344, cbModelParam._m0[9u].y, _2343 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2345, cbModelParam._m0[10u].z, fma(_2344, cbModelParam._m0[10u].y, _2343 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2345, cbModelParam._m0[11u].z, fma(_2344, cbModelParam._m0[11u].y, _2343 * cbModelParam._m0[11u].x))), _1780);
            frontier_phi_16_38_ladder = _2490.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2490.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2490.x * cbModelParam._m0[1u].y;
        }
        _1860 = frontier_phi_16_38_ladder_2;
        _1862 = frontier_phi_16_38_ladder_1;
        _1864 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_941, _942, _943), _1780);
        _1860 = _1848.x * cbModelParam._m0[1u].y;
        _1862 = _1848.y * cbModelParam._m0[1u].y;
        _1864 = _1848.z * cbModelParam._m0[1u].y;
    }
    float _1868 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _775);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1868 : min(cbModelParam._m0[25u].w, _1868));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1922 = fma(_1002, cbModelParam._m0[21u].z, fma(_998, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994)) + cbModelParam._m0[21u].w;
        float _1926 = fma(_1002, cbModelParam._m0[22u].z, fma(_998, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994)) + cbModelParam._m0[22u].w;
        float _1930 = fma(_1002, cbModelParam._m0[23u].z, fma(_998, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994)) + cbModelParam._m0[23u].w;
        float _1933 = fma(_943, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941));
        float _1936 = fma(_943, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941));
        float _1939 = fma(_943, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941));
        float _2046;
        if (_1933 > 0.0)
        {
            _2046 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2046 = frontier_phi_28_24_ladder;
        }
        float _2363;
        if (_1936 > 0.0)
        {
            _2363 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2363 = frontier_phi_40_35_ladder;
        }
        float _2690;
        if (_1939 > 0.0)
        {
            _2690 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2690 = frontier_phi_50_47_ladder;
        }
        float _2692 = isnan(_2363) ? _2046 : (isnan(_2046) ? _2363 : min(_2046, _2363));
        float _2693 = isnan(_2690) ? _2692 : (isnan(_2692) ? _2690 : min(_2692, _2690));
        float _2697 = (_2693 * _1933) + _1922;
        float _2698 = (_2693 * _1936) + _1926;
        float _2699 = (_2693 * _1939) + _1930;
        float _2700 = _2693 * 9.9999997473787516355514526367188e-05;
        float _2701 = (-1.0) - _2700;
        float _2703 = _2700 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2699 > _2703) || ((_2699 < _2701) || ((_2698 > _2703) || ((_2698 < _2701) || ((_2697 < _2701) || (_2697 > _2703))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2699, cbModelParam._m0[17u].z, fma(_2698, cbModelParam._m0[17u].y, _2697 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2699, cbModelParam._m0[18u].z, fma(_2698, cbModelParam._m0[18u].y, _2697 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2699, cbModelParam._m0[19u].z, fma(_2698, cbModelParam._m0[19u].y, _2697 * cbModelParam._m0[19u].x))), _1869);
            frontier_phi_25_50_ladder = _2817.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2817.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2817.x * cbModelParam._m0[1u].z;
        }
        _1958 = frontier_phi_25_50_ladder_2;
        _1960 = frontier_phi_25_50_ladder_1;
        _1962 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_941, _942, _943), _1869);
        _1958 = _1942.x * cbModelParam._m0[1u].z;
        _1960 = _1942.y * cbModelParam._m0[1u].z;
        _1962 = _1942.z * cbModelParam._m0[1u].z;
    }
    float _1974 = ((((1.0 - _962) * ((_949 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_962 * _949)) * _933;
    float _1975 = _1974 * ((cbModelParam._m0[1u].w * (_1958 - _1860)) + _1860);
    float _1976 = _1974 * ((cbModelParam._m0[1u].w * (_1960 - _1862)) + _1862);
    float _1977 = _1974 * ((cbModelParam._m0[1u].w * (_1962 - _1864)) + _1864);
    float _1980 = fma(_1977, cbSceneParam._m0[89u].z, fma(_1976, cbSceneParam._m0[89u].y, _1975 * cbSceneParam._m0[89u].x));
    float _1983 = fma(_1977, cbSceneParam._m0[90u].z, fma(_1976, cbSceneParam._m0[90u].y, _1975 * cbSceneParam._m0[90u].x));
    float _1986 = fma(_1977, cbSceneParam._m0[91u].z, fma(_1976, cbSceneParam._m0[91u].y, _1975 * cbSceneParam._m0[91u].x));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2028 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2033 = _2020 / _2032;
    float _2034 = _2024 / _2032;
    float _2035 = _2028 / _2032;
    float _2182;
    float _2183;
    float _2184;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2062 = ((uint(_2035 > cbSceneParam._m0[59u].y) + uint(_2035 > cbSceneParam._m0[59u].x)) + uint(_2035 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2063 = _2062 + 43u;
        uint _2071 = _2062 + 44u;
        uint _2079 = _2062 + 45u;
        uint _2087 = _2062 + 46u;
        float _2098 = fma(_2032, cbSceneParam._m0[_2063].w, fma(_2028, cbSceneParam._m0[_2063].z, fma(_2024, cbSceneParam._m0[_2063].y, _2020 * cbSceneParam._m0[_2063].x)));
        float _2102 = fma(_2032, cbSceneParam._m0[_2071].w, fma(_2028, cbSceneParam._m0[_2071].z, fma(_2024, cbSceneParam._m0[_2071].y, _2020 * cbSceneParam._m0[_2071].x)));
        float _2110 = fma(_2032, cbSceneParam._m0[_2087].w, fma(_2028, cbSceneParam._m0[_2087].z, fma(_2024, cbSceneParam._m0[_2087].y, _2020 * cbSceneParam._m0[_2087].x)));
        float _2115 = cbSceneParam._m0[33u].z * _2110;
        float _2117 = cbSceneParam._m0[33u].w * _2110;
        float _2120 = fma(_2032, cbSceneParam._m0[_2079].w, fma(_2028, cbSceneParam._m0[_2079].z, fma(_2024, cbSceneParam._m0[_2079].y, _2020 * cbSceneParam._m0[_2079].x))) / _2110;
        float _2168 = (cbSceneParam._m0[33u].x - sqrt(((_2034 * _2034) + (_2033 * _2033)) + (_2035 * _2035))) * cbSceneParam._m0[33u].y;
        float _4541 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2175 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 + _2098) / _2110, (_2117 + _2102) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 + _2098) / _2110, (_2102 - _2115) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2098 - _2115) / _2110, (_2102 - _2117) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2098 - _2117) / _2110, (_2115 + _2102) / _2110), _2120), 0.0)).x), vec4(0.25)));
        _2182 = 1.0 - (_2175 * cbSceneParam._m0[34u].x);
        _2183 = 1.0 - (_2175 * cbSceneParam._m0[34u].y);
        _2184 = 1.0 - (_2175 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2182 = 1.0;
        _2183 = 1.0;
        _2184 = 1.0;
    }
    float _2248;
    float _2250;
    float _2252;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2236 = fma(_2032, cbSceneParam._m0[63u].w, fma(_2028, cbSceneParam._m0[63u].z, fma(_2024, cbSceneParam._m0[63u].y, _2020 * cbSceneParam._m0[63u].x)));
        float _2237 = fma(_2032, cbSceneParam._m0[60u].w, fma(_2028, cbSceneParam._m0[60u].z, fma(_2024, cbSceneParam._m0[60u].y, _2020 * cbSceneParam._m0[60u].x))) / _2236;
        float _2238 = fma(_2032, cbSceneParam._m0[61u].w, fma(_2028, cbSceneParam._m0[61u].z, fma(_2024, cbSceneParam._m0[61u].y, _2020 * cbSceneParam._m0[61u].x))) / _2236;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2237 >= cbSceneParam._m0[64u].x) && (_2238 >= cbSceneParam._m0[64u].y)) && (_2237 <= cbSceneParam._m0[64u].z)) && (_2238 <= cbSceneParam._m0[64u].w))
        {
            float _2376 = fma(_2032, cbSceneParam._m0[62u].w, fma(_2028, cbSceneParam._m0[62u].z, fma(_2024, cbSceneParam._m0[62u].y, _2020 * cbSceneParam._m0[62u].x))) / _2236;
            float _2380 = isnan(cbSceneParam._m0[41u].w) ? _2376 : (isnan(_2376) ? cbSceneParam._m0[41u].w : max(_2376, cbSceneParam._m0[41u].w));
            float _2423 = (cbSceneParam._m0[33u].x - sqrt(((_2034 * _2034) + (_2033 * _2033)) + (_2035 * _2035))) * cbSceneParam._m0[33u].y;
            float _4557 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
            float _2430 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2237, cbSceneParam._m0[33u].w + _2238), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2237, _2238 - cbSceneParam._m0[33u].z), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2237 - cbSceneParam._m0[33u].z, _2238 - cbSceneParam._m0[33u].w), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2237 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2238), _2380), 0.0)).x), vec4(0.25)));
            float _2434 = 1.0 - (_2430 * cbSceneParam._m0[34u].x);
            float _2435 = 1.0 - (_2430 * cbSceneParam._m0[34u].y);
            float _2436 = 1.0 - (_2430 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2436) ? _2184 : (isnan(_2184) ? _2436 : min(_2184, _2436));
            frontier_phi_37_36_ladder_1 = isnan(_2435) ? _2183 : (isnan(_2183) ? _2435 : min(_2183, _2435));
            frontier_phi_37_36_ladder_2 = isnan(_2434) ? _2182 : (isnan(_2182) ? _2434 : min(_2182, _2434));
        }
        else
        {
            frontier_phi_37_36_ladder = _2184;
            frontier_phi_37_36_ladder_1 = _2183;
            frontier_phi_37_36_ladder_2 = _2182;
        }
        _2248 = frontier_phi_37_36_ladder_2;
        _2250 = frontier_phi_37_36_ladder_1;
        _2252 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2248 = _2182;
        _2250 = _2183;
        _2252 = _2184;
    }
    uvec4 _2257 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2259 = _2257.x * 14u;
    uint _2260 = _2259 + 13u;
    float _2267 = _933 + (-1.0);
    float _2272 = (cbLight._m0[_2260].x * _2267) + 1.0;
    float _2273 = (cbLight._m0[_2260].y * _2267) + 1.0;
    float _2274 = (cbLight._m0[_2260].z * _2267) + 1.0;
    float _2275 = (cbLight._m0[_2260].w * _2267) + 1.0;
    uint _2276 = _2259 + 5u;
    float _2282 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    uint _2286 = _2259 + 4u;
    float _2295 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
    uint _2299 = _2259 | 1u;
    float _2310 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_772, _773, _774));
    float _2313 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_772, _773, _774));
    float _4593 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _4604 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2318 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * 0.3183098733425140380859375;
    float _2320 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * 0.3183098733425140380859375;
    float _2327 = ((cbLight._m0[_2276].x * _2282) * _2320) + (((cbLight._m0[_2286].x * _2248) * _2295) * _2318);
    float _2328 = ((_2282 * cbLight._m0[_2276].y) * _2320) + (((cbLight._m0[_2286].y * _2250) * _2295) * _2318);
    float _2329 = ((_2282 * cbLight._m0[_2276].z) * _2320) + (((cbLight._m0[_2286].z * _2252) * _2295) * _2318);
    uvec4 _2333 = floatBitsToUint(cbLight._m0[_2259 + 12u]);
    bool _2335 = _2333.x == 0u;
    float _2437;
    float _2439;
    float _2441;
    if (_2335)
    {
        _2437 = _2327;
        _2439 = _2328;
        _2441 = _2329;
    }
    else
    {
        uint _2445 = _2259 + 6u;
        float _2461 = (dot(vec3(cbLight._m0[_2259 + 2u].xyz), vec3(_772, _773, _774)) * 0.5) + 0.5;
        float _2462 = _2461 * _2461;
        float _4615 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2463 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2464 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2437 = (((cbLight._m0[_2445].x * 0.3183098733425140380859375) * _2463) * _2464) + _2327;
        _2439 = (((cbLight._m0[_2445].y * 0.3183098733425140380859375) * _2463) * _2464) + _2328;
        _2441 = (((cbLight._m0[_2445].z * 0.3183098733425140380859375) * _2463) * _2464) + _2329;
    }
    bool _2444 = _2333.y == 0u;
    float _2499;
    float _2501;
    float _2503;
    if (_2444)
    {
        _2499 = _2437;
        _2501 = _2439;
        _2503 = _2441;
    }
    else
    {
        uint _2661 = _2259 + 7u;
        float _2677 = (dot(vec3(cbLight._m0[_2259 + 3u].xyz), vec3(_772, _773, _774)) * 0.5) + 0.5;
        float _2678 = _2677 * _2677;
        float _4631 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2679 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2680 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2499 = (((cbLight._m0[_2661].x * 0.3183098733425140380859375) * _2679) * _2680) + _2437;
        _2501 = (((cbLight._m0[_2661].y * 0.3183098733425140380859375) * _2679) * _2680) + _2439;
        _2503 = (((cbLight._m0[_2661].z * 0.3183098733425140380859375) * _2679) * _2680) + _2441;
    }
    uint _2506 = _2259 + 8u;
    float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _775) * 0.949999988079071044921875);
    float _2520 = _2519 * _2519;
    float _2521 = cbLight._m0[_2259].x + _850;
    float _2522 = cbLight._m0[_2259].y + _851;
    float _2523 = cbLight._m0[_2259].z + _852;
    float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
    float _2528 = _2527 * _2521;
    float _2529 = _2527 * _2522;
    float _2530 = _2527 * _2523;
    float _2531 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2259].xyz));
    float _4647 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _4658 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _2535 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2536 = dot(vec3(_772, _773, _774), vec3(_2528, _2529, _2530));
    float _4669 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2540 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2528, _2529, _2530));
    float _4680 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2544 = _2520 * _2520;
    float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
    float _2559 = (exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2560 = 1.0 - _2520;
    float _2571 = (0.5 / (((_2535 * ((_2534 * _2560) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2560) + _2520) * _2534))) * _2534;
    float _4691 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2573 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
    uint _2587 = _2259 + 9u;
    float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _775) * 0.949999988079071044921875);
    float _2599 = _2598 * _2598;
    float _2600 = cbLight._m0[_2299].x + _850;
    float _2601 = cbLight._m0[_2299].y + _851;
    float _2602 = cbLight._m0[_2299].z + _852;
    float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
    float _2607 = _2606 * _2600;
    float _2608 = _2606 * _2601;
    float _2609 = _2606 * _2602;
    float _2610 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2299].xyz));
    float _4702 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2614 = dot(vec3(_772, _773, _774), vec3(_2607, _2608, _2609));
    float _4713 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2618 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2607, _2608, _2609));
    float _4724 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2622 = _2599 * _2599;
    float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
    float _2635 = (exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2636 = 1.0 - _2599;
    float _2646 = (0.5 / (((_2535 * ((_2613 * _2636) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2636) + _2599) * _2613))) * _2613;
    float _4735 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2648 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
    float _2658 = (((_2635 * cbLight._m0[_2587].x) * _2648) * _2282) + ((((cbLight._m0[_2506].x * _2248) * _2559) * _2573) * _2295);
    float _2659 = (((_2635 * cbLight._m0[_2587].y) * _2648) * _2282) + ((((cbLight._m0[_2506].y * _2250) * _2559) * _2573) * _2295);
    float _2660 = (((_2635 * cbLight._m0[_2587].z) * _2648) * _2282) + ((((cbLight._m0[_2506].z * _2252) * _2559) * _2573) * _2295);
    float _2716;
    float _2718;
    float _2720;
    if (_2335)
    {
        _2716 = _2658;
        _2718 = _2659;
        _2720 = _2660;
    }
    else
    {
        uint _2722 = _2259 + 2u;
        uint _2726 = _2259 + 10u;
        float _2740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2722].w)) * _775) * 0.949999988079071044921875);
        float _2741 = _2740 * _2740;
        float _2742 = cbLight._m0[_2722].x + _850;
        float _2743 = cbLight._m0[_2722].y + _851;
        float _2744 = cbLight._m0[_2722].z + _852;
        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
        float _2749 = _2748 * _2742;
        float _2750 = _2748 * _2743;
        float _2751 = _2748 * _2744;
        float _2752 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2722].xyz));
        float _4746 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2755 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2756 = dot(vec3(_772, _773, _774), vec3(_2749, _2750, _2751));
        float _4757 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2759 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2760 = dot(vec3(cbLight._m0[_2722].xyz), vec3(_2749, _2750, _2751));
        float _4768 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2764 = _2741 * _2741;
        float _2768 = ((_2759 * _2759) * (_2764 + (-1.0))) + 1.0;
        float _2777 = (exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2778 = 1.0 - _2741;
        float _2788 = (0.5 / (((_2535 * ((_2755 * _2778) + _2741)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2778) + _2741) * _2755))) * _2755;
        float _4779 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2790 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2764 / ((_2768 * _2768) * 3.141590118408203125));
        float _2791 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2716 = (((_2777 * cbLight._m0[_2726].x) * _2790) * _2791) + _2658;
        _2718 = (((_2777 * cbLight._m0[_2726].y) * _2790) * _2791) + _2659;
        _2720 = (((_2777 * cbLight._m0[_2726].z) * _2790) * _2791) + _2660;
    }
    float _2822;
    float _2824;
    float _2826;
    if (_2444)
    {
        _2822 = _2716;
        _2824 = _2718;
        _2826 = _2720;
    }
    else
    {
        uint _2833 = _2259 + 3u;
        uint _2837 = _2259 + 11u;
        float _2851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2833].w)) * _775) * 0.949999988079071044921875);
        float _2852 = _2851 * _2851;
        float _2853 = cbLight._m0[_2833].x + _850;
        float _2854 = cbLight._m0[_2833].y + _851;
        float _2855 = cbLight._m0[_2833].z + _852;
        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
        float _2860 = _2859 * _2853;
        float _2861 = _2859 * _2854;
        float _2862 = _2859 * _2855;
        float _2863 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2833].xyz));
        float _4795 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2866 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2867 = dot(vec3(_772, _773, _774), vec3(_2860, _2861, _2862));
        float _4806 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2871 = dot(vec3(cbLight._m0[_2833].xyz), vec3(_2860, _2861, _2862));
        float _4817 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2875 = _2852 * _2852;
        float _2879 = ((_2870 * _2870) * (_2875 + (-1.0))) + 1.0;
        float _2888 = (exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2889 = 1.0 - _2852;
        float _2899 = (0.5 / (((_2535 * ((_2866 * _2889) + _2852)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2889) + _2852) * _2866))) * _2866;
        float _4828 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2901 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2875 / ((_2879 * _2879) * 3.141590118408203125));
        float _2902 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2822 = (((_2888 * cbLight._m0[_2837].x) * _2901) * _2902) + _2716;
        _2824 = (((_2888 * cbLight._m0[_2837].y) * _2901) * _2902) + _2718;
        _2826 = (((_2888 * cbLight._m0[_2837].z) * _2901) * _2902) + _2720;
    }
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    if (_2257.y == 0u)
    {
        uvec4 _2923 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2924 = _2923.x;
        uint _2935 = uint((float(_2923.y) * floor(float(uint(cbSceneParam._m0[85u].y * _871) / _2924))) + floor(float(uint(cbSceneParam._m0[85u].x * _870) / _2924)));
        float _2945 = (log2(_2035 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2946 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        uint _2949 = uint(isnan(14.0) ? _2946 : (isnan(_2946) ? 14.0 : min(_2946, 14.0)));
        uvec4 _2954 = texelFetch(g_lightClusterGridBuffer, int(((_2949 << 2u) + (_2935 << 6u)) >> 2u));
        uint _2955 = _2954.x;
        uint _2956 = _2923.z;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        if (((((1u << ((_2956 >> 4u) & 15u)) + 4294967295u) & _2955) == 0u) || ((_2956 & 240u) == 0u))
        {
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
        }
        else
        {
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            uint _3194 = 0u;
            uint _3203;
            bool _3204;
            for (;;)
            {
                _3203 = texelFetch(g_lightClassification, int((((_2949 << 5u) + (_2935 << 9u)) + (_3194 << 2u)) >> 2u)).x;
                _3204 = _3203 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3204)
                {
                    frontier_phi_71_pred = _3193;
                    frontier_phi_71_pred_1 = _3192;
                    frontier_phi_71_pred_2 = _3191;
                    frontier_phi_71_pred_3 = _3190;
                    frontier_phi_71_pred_4 = _3189;
                    frontier_phi_71_pred_5 = _3188;
                }
                else
                {
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    uint _3339;
                    _3333 = _3188;
                    _3334 = _3189;
                    _3335 = _3190;
                    _3336 = _3191;
                    _3337 = _3192;
                    _3338 = _3193;
                    _3339 = _3203;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    for (;;)
                    {
                        uint _3343 = uint(findLSB(_3339)) + (_3194 << 5u);
                        uint _3340 = (_3339 + 4294967295u) & _3339;
                        uint _3345 = _3343 * 48u;
                        vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3345)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 3u)).x));
                        uint _3365 = (_3343 * 48u) + 4u;
                        vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3365)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 3u)).x));
                        uint _3384 = (_3343 * 48u) + 8u;
                        vec3 _3395 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3384)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 2u)).x));
                        float _3399 = _3359.x - _2033;
                        float _3400 = _3359.y - _2034;
                        float _3401 = _3359.z - _2035;
                        float _3402 = dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401));
                        float _3405 = inversesqrt(_3402);
                        float _3406 = _3405 * _3399;
                        float _3407 = _3405 * _3400;
                        float _3408 = _3405 * _3401;
                        float _3409 = dot(vec3(_889, _892, _895), vec3(_3406, _3407, _3408));
                        float _3414 = 1.0 - (_3402 * _3359.w);
                        float _4854 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3415 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                        float _3416 = sqrt(_3402) * _3378.w;
                        float _3419 = 1.39999997615814208984375 / (_3416 + 1.39999997615814208984375);
                        float _3420 = _3419 * _3419;
                        float _3423 = ((1.0 - _3420) * _3409) + _3420;
                        float _3426 = _3416 * _3416;
                        float _3430 = ((isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0))) * _3415) / ((_3426 * 0.699999988079071044921875) + 1.0);
                        float _3434 = (-0.0) - _2033;
                        float _3435 = (-0.0) - _2034;
                        float _3436 = (-0.0) - _2035;
                        float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                        float _3441 = _3440 * _3434;
                        float _3442 = _3440 * _3435;
                        float _3443 = _3440 * _3436;
                        float _3450 = exp2(log2(1.0 / ((_3426 * 3.5) + 5.0)) * 0.25);
                        float _3451 = 1.0 - _949;
                        float _3458 = sqrt(1.0 - ((1.0 - (_3451 * _3451)) * (1.0 - (_3450 * _3450))));
                        float _3459 = _3458 * _3458;
                        float _3460 = _3459 * _3459;
                        float _3461 = _3441 + _3406;
                        float _3462 = _3442 + _3407;
                        float _3463 = _3443 + _3408;
                        float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                        float _3471 = dot(vec3(_889, _892, _895), vec3(_3441, _3442, _3443));
                        float _4870 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3474 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3475 = dot(vec3(_889, _892, _895), vec3(_3467 * _3461, _3467 * _3462, _3467 * _3463));
                        float _4881 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3478 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                        float _3482 = ((_3478 * _3478) * (_3460 + (-1.0))) + 1.0;
                        float _3483 = _3419 * _3459;
                        float _3484 = _3483 * _3483;
                        float _3487 = ((1.0 - _3484) * _3409) + _3484;
                        float _4892 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3488 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                        float _3489 = 1.0 - _3459;
                        float _3499 = (0.5 / (((_3488 * ((_3474 * _3489) + _3459)) + 9.9999999392252902907785028219223e-09) + (((_3488 * _3489) + _3459) * _3474))) * _3488;
                        float _4903 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3510 = (((_3460 * 3.1415927410125732421875) * (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) / ((_3482 * _3482) * ((_3426 * 2.1991131305694580078125) + 3.141590118408203125))) * _3415;
                        _3263 = (_3430 * _3378.x) + _3336;
                        _3264 = (_3430 * _3378.y) + _3337;
                        _3265 = (_3430 * _3378.z) + _3338;
                        _3260 = (_3510 * _3395.x) + _3333;
                        _3261 = (_3510 * _3395.y) + _3334;
                        _3262 = (_3510 * _3395.z) + _3335;
                        if (_3340 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3333 = _3260;
                            _3334 = _3261;
                            _3335 = _3262;
                            _3336 = _3263;
                            _3337 = _3264;
                            _3338 = _3265;
                            _3339 = _3340;
                        }
                    }
                    frontier_phi_71_pred = _3265;
                    frontier_phi_71_pred_1 = _3264;
                    frontier_phi_71_pred_2 = _3263;
                    frontier_phi_71_pred_3 = _3262;
                    frontier_phi_71_pred_4 = _3261;
                    frontier_phi_71_pred_5 = _3260;
                }
                _3046 = frontier_phi_71_pred;
                _3044 = frontier_phi_71_pred_1;
                _3042 = frontier_phi_71_pred_2;
                _3040 = frontier_phi_71_pred_3;
                _3038 = frontier_phi_71_pred_4;
                _3036 = frontier_phi_71_pred_5;
                uint _3195 = _3194 + 1u;
                if (_3195 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3188 = _3036;
                    _3189 = _3038;
                    _3190 = _3040;
                    _3191 = _3042;
                    _3192 = _3044;
                    _3193 = _3046;
                    _3194 = _3195;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
        }
        uvec4 _3049 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3050 = _3049.z;
        uint _3052 = (_3050 >> 8u) & 15u;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        if (((4294967295u << _3052) & _2955) == 0u)
        {
            _3156 = _3035;
            _3158 = _3037;
            _3160 = _3039;
            _3162 = _3041;
            _3164 = _3043;
            _3166 = _3045;
        }
        else
        {
            float _3181 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
            float _3182 = _3181 * _2033;
            float _3183 = _3181 * _2034;
            float _3184 = _3181 * _2035;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3052 < ((_3050 >> 12u) & 15u))
            {
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3167;
                float _3316 = _3035;
                float _3317 = _3037;
                float _3318 = _3039;
                float _3319 = _3041;
                float _3320 = _3043;
                float _3321 = _3045;
                uint _3322 = _3052;
                uint _3331;
                bool _3332;
                for (;;)
                {
                    _3331 = texelFetch(g_lightClassification, int((((_2949 << 5u) + (_2935 << 9u)) + (_3322 << 2u)) >> 2u)).x;
                    _3332 = _3331 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3332)
                    {
                        frontier_phi_82_pred = _3321;
                        frontier_phi_82_pred_1 = _3320;
                        frontier_phi_82_pred_2 = _3319;
                        frontier_phi_82_pred_3 = _3318;
                        frontier_phi_82_pred_4 = _3317;
                        frontier_phi_82_pred_5 = _3316;
                    }
                    else
                    {
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3818;
                        float _3819;
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3537 = _3316;
                        float _3538 = _3317;
                        float _3539 = _3318;
                        float _3540 = _3319;
                        float _3541 = _3320;
                        float _3542 = _3321;
                        uint _3543 = _3331;
                        uint _3544;
                        vec4 _3569;
                        float _3570;
                        vec4 _3585;
                        vec3 _3597;
                        vec4 _3612;
                        vec4 _3628;
                        float _3674;
                        bool _3675;
                        for (;;)
                        {
                            uint _3554 = ((_3322 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3543));
                            _3544 = (_3543 + 4294967295u) & _3543;
                            uint _3556 = _3554 * 40u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            _3570 = _3569.w;
                            uint _3572 = (_3554 * 40u) + 4u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3587 = (_3554 * 40u) + 8u;
                            _3597 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x));
                            uint _3599 = (_3554 * 40u) + 16u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3615 = (_3554 * 40u) + 20u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3630 = (_3554 * 40u) + 24u;
                            vec4 _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            uint _3649 = (_3554 * 40u) + 28u;
                            vec4 _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            _3674 = fma(_2035, _3662.z, fma(_2034, _3662.y, _3662.x * _2033)) + _3662.w;
                            _3675 = !((fma(_2035, _3643.z, fma(_2034, _3643.y, _3643.x * _2033)) + _3643.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3675)
                            {
                                float _3702 = _3569.x - _2033;
                                float _3703 = _3569.y - _2034;
                                float _3704 = _3569.z - _2035;
                                float _3705 = dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704));
                                float _3708 = inversesqrt(_3705);
                                float _3709 = _3708 * _3702;
                                float _3710 = _3708 * _3703;
                                float _3711 = _3708 * _3704;
                                float _3715 = 1.0 - (_3705 / (_3570 * _3570));
                                float _4914 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3716 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                                float _3720 = sqrt(_3705) * _3585.w;
                                float _3722 = 1.39999997615814208984375 / (_3720 + 1.39999997615814208984375);
                                float _3723 = _3722 * _3722;
                                float _3726 = ((1.0 - _3723) * dot(vec3(_3709, _3710, _3711), vec3(_889, _892, _895))) + _3723;
                                float _3729 = _3720 * _3720;
                                float _3733 = (fma(_2035, _3612.z, fma(_2034, _3612.y, _3612.x * _2033)) + _3612.w) / _3674;
                                float _3734 = (fma(_2035, _3628.z, fma(_2034, _3628.y, _3628.x * _2033)) + _3628.w) / _3674;
                                float _3738 = 1.0 - dot(vec2(_3733, _3734), vec2(_3733, _3734));
                                float _4930 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3740 = _3739 * (((isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0))) * _3716) / ((_3729 * 0.699999988079071044921875) + 1.0));
                                float _3752 = exp2(log2(1.0 / ((_3729 * 3.5) + 5.0)) * 0.25);
                                float _3753 = 1.0 - _949;
                                float _3760 = sqrt(1.0 - ((1.0 - (_3753 * _3753)) * (1.0 - (_3752 * _3752))));
                                float _3761 = _3760 * _3760;
                                float _3762 = _3761 * _3761;
                                float _3763 = _3709 - _3182;
                                float _3764 = _3710 - _3183;
                                float _3765 = _3711 - _3184;
                                float _3769 = inversesqrt(dot(vec3(_3763, _3764, _3765), vec3(_3763, _3764, _3765)));
                                float _3773 = dot(vec3(_889, _892, _895), vec3((-0.0) - _3182, (-0.0) - _3183, (-0.0) - _3184));
                                float _4941 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3776 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3777 = dot(vec3(_889, _892, _895), vec3(_3769 * _3763, _3769 * _3764, _3769 * _3765));
                                float _4952 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3780 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3784 = ((_3780 * _3780) * (_3762 + (-1.0))) + 1.0;
                                float _3785 = _3722 * _3761;
                                float _3786 = _3785 * _3785;
                                float _3792 = ((1.0 - _3786) * dot(vec3(_889, _892, _895), vec3(_3709, _3710, _3711))) + _3786;
                                float _4963 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3793 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3794 = 1.0 - _3761;
                                float _3804 = (0.5 / (((_3793 * ((_3776 * _3794) + _3761)) + 9.9999999392252902907785028219223e-09) + (((_3793 * _3794) + _3761) * _3776))) * _3793;
                                float _4974 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3814 = (_3739 * _3716) * (((_3762 * 3.1415927410125732421875) * (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) / ((_3784 * _3784) * ((_3729 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3740 * _3585.z;
                                frontier_phi_88_pred_1 = _3740 * _3585.y;
                                frontier_phi_88_pred_2 = _3740 * _3585.x;
                                frontier_phi_88_pred_3 = _3814 * _3597.z;
                                frontier_phi_88_pred_4 = _3814 * _3597.y;
                                frontier_phi_88_pred_5 = _3814 * _3597.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3823 = frontier_phi_88_pred;
                            _3822 = frontier_phi_88_pred_1;
                            _3821 = frontier_phi_88_pred_2;
                            _3820 = frontier_phi_88_pred_3;
                            _3819 = frontier_phi_88_pred_4;
                            _3818 = frontier_phi_88_pred_5;
                            _3527 = _3821 + _3540;
                            _3528 = _3822 + _3541;
                            _3529 = _3823 + _3542;
                            _3524 = _3818 + _3537;
                            _3525 = _3819 + _3538;
                            _3526 = _3820 + _3539;
                            if (_3544 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3544;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3529;
                        frontier_phi_82_pred_1 = _3528;
                        frontier_phi_82_pred_2 = _3527;
                        frontier_phi_82_pred_3 = _3526;
                        frontier_phi_82_pred_4 = _3525;
                        frontier_phi_82_pred_5 = _3524;
                    }
                    _3167 = frontier_phi_82_pred;
                    _3165 = frontier_phi_82_pred_1;
                    _3163 = frontier_phi_82_pred_2;
                    _3161 = frontier_phi_82_pred_3;
                    _3159 = frontier_phi_82_pred_4;
                    _3157 = frontier_phi_82_pred_5;
                    uint _3323 = _3322 + 1u;
                    if (_3323 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3316 = _3157;
                        _3317 = _3159;
                        _3318 = _3161;
                        _3319 = _3163;
                        _3320 = _3165;
                        _3321 = _3167;
                        _3322 = _3323;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3163;
                frontier_phi_63_64_ladder_1 = _3167;
                frontier_phi_63_64_ladder_2 = _3165;
                frontier_phi_63_64_ladder_3 = _3161;
                frontier_phi_63_64_ladder_4 = _3159;
                frontier_phi_63_64_ladder_5 = _3157;
            }
            else
            {
                frontier_phi_63_64_ladder = _3041;
                frontier_phi_63_64_ladder_1 = _3045;
                frontier_phi_63_64_ladder_2 = _3043;
                frontier_phi_63_64_ladder_3 = _3039;
                frontier_phi_63_64_ladder_4 = _3037;
                frontier_phi_63_64_ladder_5 = _3035;
            }
            _3156 = frontier_phi_63_64_ladder_5;
            _3158 = frontier_phi_63_64_ladder_4;
            _3160 = frontier_phi_63_64_ladder_3;
            _3162 = frontier_phi_63_64_ladder;
            _3164 = frontier_phi_63_64_ladder_2;
            _3166 = frontier_phi_63_64_ladder_1;
        }
        float _3171 = isnan(1.0) ? _933 : (isnan(_933) ? 1.0 : min(_933, 1.0));
        _2968 = (_3171 * _3162) + _2499;
        _2970 = (_3171 * _3164) + _2501;
        _2972 = (_3171 * _3166) + _2503;
        _2974 = ((_3156 * 0.039999999105930328369140625) * _3171) + _2822;
        _2976 = ((_3158 * 0.039999999105930328369140625) * _3171) + _2824;
        _2978 = ((_3160 * 0.039999999105930328369140625) * _3171) + _2826;
    }
    else
    {
        _2968 = _2499;
        _2970 = _2501;
        _2972 = _2503;
        _2974 = _2822;
        _2976 = _2824;
        _2978 = _2826;
    }
    float _4990 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _5001 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _5012 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _2995 = ((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_2968 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _933))) + ((_2974 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1769)) * cbPerFrame._m0[3u].x);
    float _2996 = ((isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_2970 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _933))) + ((_2976 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1769)) * cbPerFrame._m0[3u].x);
    float _2997 = ((isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0))) * (_2972 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _933))) + ((_2978 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1769)) * cbPerFrame._m0[3u].x);
    uint _2998 = _257 + 6u;
    float _3006 = _870 / cbSceneParam._m0[86u].x;
    float _3007 = _871 / cbSceneParam._m0[86u].y;
    vec4 _3021 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3006, _3007, (log2((isnan(cbSceneParam._m0[77u].w) ? _793 : (isnan(_793) ? cbSceneParam._m0[77u].w : min(_793, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3023 = _3021.x;
    float _3024 = _3021.y;
    float _3025 = _3021.z;
    float _3026 = _3021.w;
    float _3098;
    float _3100;
    float _3102;
    float _3104;
    if (_793 > cbSceneParam._m0[78u].w)
    {
        float _3060 = isnan(_793) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _793 : min(cbSceneParam._m0[80u].w, _793));
        float _3061 = _3060 / _793;
        float _3072 = _3061 * _843;
        float _3073 = _844 * _3061;
        float _3074 = (-0.0) - _3073;
        float _3076 = _3061 * _845;
        float _3078 = (cbSceneParam._m0[77u].w * _3074) / _3060;
        float _3079 = _3078 + cbSceneParam._m0[79u].w;
        float _3080 = cbSceneParam._m0[79u].w - _3073;
        float _3086 = sqrt(((_3072 * _3072) + (_3073 * _3073)) + (_3076 * _3076));
        float _3089 = (1.0 - (cbSceneParam._m0[77u].w / _3060)) * _3086;
        float _3094 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3096 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3273;
        if (abs((_3074 - _3078) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3273 = ((((_3079 > 0.0) ? exp2(_3094 * _3079) : (2.0 - exp2(_3096 * _3079))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3089;
        }
        else
        {
            float _3217 = 1.0 / cbSceneParam._m0[80u].x;
            float _3218 = isnan(_3080) ? _3079 : (isnan(_3079) ? _3080 : max(_3079, _3080));
            float _3219 = isnan(_3080) ? _3079 : (isnan(_3079) ? _3080 : min(_3079, _3080));
            float _3228 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : min(_3218, 0.0));
            float _3229 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : min(_3219, 0.0));
            _3273 = ((abs(_3086 / _3074) * cbSceneParam._m0[80u].y) * ((((_3228 - _3229) * 2.0) - ((exp2(_3094 * (isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0)))) - exp2(_3094 * (isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))))) * _3217)) - ((exp2(_3096 * _3228) - exp2(_3096 * _3229)) * _3217))) + (_3089 * cbSceneParam._m0[80u].z);
        }
        vec4 _3275 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3006, _3007, 1.0), 0.0);
        float _3284 = exp2((_3273 * (-1.44269502162933349609375)) * (1.0 - _3275.w));
        float _3285 = log2(_3284);
        float _3301 = log2(_3026);
        _3098 = (exp2(_3301 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3285 * cbSceneParam._m0[78u].x)) * _3275.x) / cbSceneParam._m0[78u].x)) + _3023;
        _3100 = (exp2(_3301 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3285 * cbSceneParam._m0[78u].y)) * _3275.y) / cbSceneParam._m0[78u].y)) + _3024;
        _3102 = (exp2(_3301 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3285 * cbSceneParam._m0[78u].z)) * _3275.z) / cbSceneParam._m0[78u].z)) + _3025;
        _3104 = _3284 * _3026;
    }
    else
    {
        _3098 = _3023;
        _3100 = _3024;
        _3102 = _3025;
        _3104 = _3026;
    }
    bool _3311;
    vec4 _3114;
    vec4 _3136;
    float _3138;
    float _3142;
    float _3143;
    float _3144;
    float _3145;
    bool _3155;
    for (;;)
    {
        _3114 = cbMatDynParam._m0[0u];
        float _3116 = roundEven(_3114.y);
        bool _3117 = _3116 == 3.0;
        float _3118 = log2(_3104);
        float _3125 = exp2(_3118 * cbSceneParam._m0[78u].x) * _2995;
        float _3126 = exp2(_3118 * cbSceneParam._m0[78u].y) * _2996;
        float _3127 = exp2(_3118 * cbSceneParam._m0[78u].z) * _2997;
        float _3134 = _859 + (-0.5);
        _3136 = cbMtdParam._m0[1u];
        _3138 = _3136.y * _3134;
        float _3141 = (_3116 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3142 = _3141 * (_3117 ? _3125 : (_3125 + (cbSceneParam._m0[72u].w * _3098)));
        _3143 = _3141 * (_3117 ? _3126 : (_3126 + (cbSceneParam._m0[72u].w * _3100)));
        _3144 = _3141 * (_3117 ? _3127 : (_3127 + (cbSceneParam._m0[72u].w * _3102)));
        _3145 = _3134 * 0.999000012874603271484375;
        _3155 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3155)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3145) < 0.5)
            {
                _3311 = true;
                break;
            }
        }
        uint _3252 = _908 + uint(_3114.w);
        if ((cbInstanceData._m0[_3252].w < 1.0) && ((cbInstanceData._m0[_3252].w + _3145) < 0.5))
        {
            _3311 = true;
            break;
        }
        if ((_3138 + 1.0) < _3136.x)
        {
            _3311 = true;
            break;
        }
        _3311 = false;
        break;
    }
    float _3515;
    if (_3311)
    {
        discard_state = true;
        _3515 = 0.0;
    }
    else
    {
        _3515 = cbInstanceData._m0[_2998].w;
    }
    SV_Target.x = _3142;
    SV_Target.y = _3143;
    SV_Target.z = _3144;
    SV_Target.w = _3515;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2998].w;
    discard_exit();
}


