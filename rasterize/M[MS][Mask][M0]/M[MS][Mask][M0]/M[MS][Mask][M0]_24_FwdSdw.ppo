#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1258;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3847 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3858 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3869 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[24u].z) + _439) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3880 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _467 = (_322.x * cbMtdParam._m0[9u].x) * ((_457 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353);
    float _468 = (_322.y * cbMtdParam._m0[9u].y) * ((_457 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354);
    float _469 = (_322.z * cbMtdParam._m0[9u].z) * ((_457 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355);
    float _473 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _467;
    float _476 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _468;
    float _479 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _469;
    float _487 = (((_467 - _473) * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) + _473) * 4.55000019073486328125;
    float _489 = (((_468 - _476) * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) + _476) * 4.55000019073486328125;
    float _491 = (((_469 - _479) * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) + _479) * 4.55000019073486328125;
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _555 = _553.x;
    float _556 = _553.y;
    float _557 = _553.z;
    float _566 = ((_536.z - _557) * _457) + _557;
    float _569 = ((((_536.x - _555) * _457) + _555) * 2.0) + (-1.0);
    float _570 = ((((_536.y - _556) * _457) + _556) * 2.0) + (-1.0);
    float _571 = dot(vec2(_569, _570), vec2(_569, _570));
    float _3891 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _576 = sqrt(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _608 = (_569 + ((((_509.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_596.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _609 = (_570 + ((((_509.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_596.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _612 = fma(_576, _233, fma(_609, _240, _608 * _226));
    float _615 = fma(_576, _234, fma(_609, _241, _608 * _227));
    float _618 = fma(_576, _235, fma(_609, _242, _608 * _228));
    float _622 = inversesqrt(dot(vec3(_612, _615, _618), vec3(_612, _615, _618)));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _285) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _286) + cbTextureTilingScale._m0[11u].w));
    float _651 = _649.x;
    float _652 = 1.0 - _651;
    float _658 = (cbMtdParam._m0[19u].x + dot(vec4(_622 * _612, _622 * _615, _622 * _618, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_651 - _652) * cbMtdParam._m0[24u].w) + _652) * cbMtdParam._m0[21u].z);
    float _3902 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _666 = (_659 * (cbMtdParam._m0[17u].x - _487)) + _487;
    float _667 = (_659 * (cbMtdParam._m0[17u].y - _489)) + _489;
    float _668 = (_659 * (cbMtdParam._m0[17u].z - _491)) + _491;
    float _673 = (((_509.z - _566) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _566;
    float _677 = ((_596.z - _673) * cbMtdParam._m0[19u].w) + _673;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _285) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _286) + cbTextureTilingScale._m0[15u].w));
    float _697 = (_690.x * 2.0) + (-1.0);
    float _698 = (_690.y * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _3913 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _707 = ((_690.z - _677) * _659) + _677;
    float _717 = ((sqrt(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) - _576) * _659) + _576;
    float _720 = (((_697 - _608) * _659) + _608) + (cbMtdParam._m0[21u].x * _608);
    float _721 = (((_698 - _609) * _659) + _609) + (cbMtdParam._m0[21u].x * _609);
    float _723 = cbMtdParam._m0[22u].x + _596.w;
    float _726 = fma(_717, _233, fma(_721, _240, _720 * _226));
    float _729 = fma(_717, _234, fma(_721, _241, _720 * _227));
    float _732 = fma(_717, _235, fma(_721, _242, _720 * _228));
    float _736 = inversesqrt(dot(vec3(_726, _729, _732), vec3(_726, _729, _732)));
    float _737 = _736 * _726;
    float _738 = _736 * _729;
    float _739 = _736 * _732;
    float _3924 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _740 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _3946 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3957 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3968 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _758 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _809 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _799);
    float _810 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _799);
    float _811 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _799);
    float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
    float _816 = _809 * _815;
    float _817 = _810 * _815;
    float _818 = _811 * _815;
    float _824 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _825 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _843 = fma(_739, cbSceneParam._m0[5u].z, fma(_738, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _737));
    float _846 = fma(_739, cbSceneParam._m0[6u].z, fma(_738, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _737));
    float _849 = fma(_739, cbSceneParam._m0[7u].z, fma(_738, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _737));
    uint _863 = (_266 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _869 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * cbInstanceData._m0[_863].x;
    float _870 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_863].y;
    float _871 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * cbInstanceData._m0[_863].z;
    float _3979 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    vec4 _883 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _824, cbSceneParam._m0[86u].y * _825));
    float _887 = ((isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * TEXCOORD_5.w) * _883.x;
    float _888 = dot(vec3(_737, _738, _739), vec3(_816, _817, _818));
    float _891 = _888 * 2.0;
    float _895 = (_891 * _737) - _816;
    float _896 = (_891 * _738) - _817;
    float _897 = (_891 * _739) - _818;
    float _901 = abs(dot(vec3(_816, _817, _818), vec3(_737, _738, _739)));
    float _4012 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _903 = sqrt(_740);
    float _916 = exp2((_903 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_903 * 3.0));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1257;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _982 = fma(_956, cbModelParam._m0[26u].z, fma(_952, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948));
        float _986 = fma(_956, cbModelParam._m0[27u].z, fma(_952, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948));
        float _990 = fma(_956, cbModelParam._m0[28u].z, fma(_952, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948));
        float _1015 = _948 + _737;
        float _1016 = _952 + _738;
        float _1017 = _956 + _739;
        float _1027 = fma(_1017, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015)) - _982;
        float _1028 = fma(_1017, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015)) - _986;
        float _1029 = fma(_1017, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015)) - _990;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_982 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_986 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[34u].z) + ((((((_990 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1085 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1051.x + (-0.5));
        float _1087 = _1085 * (_1051.y + (-0.5));
        float _1088 = _1085 * (_1051.z + (-0.5));
        float _1095 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1058.x + (-0.5));
        float _1097 = _1095 * (_1058.y + (-0.5));
        float _1098 = _1095 * (_1058.z + (-0.5));
        float _1105 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1065.x + (-0.5));
        float _1107 = _1105 * (_1065.y + (-0.5));
        float _1108 = _1105 * (_1065.z + (-0.5));
        float _1115 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1072.x + (-0.5));
        float _1117 = _1115 * (_1072.y + (-0.5));
        float _1118 = _1115 * (_1072.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1139 = (dot(vec3(_737, _738, _739), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1149 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _4060 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1151 + 1.0))) + _1156) * _1119;
        float _1166 = _1087 * 0.5;
        float _1167 = _1097 * 0.5;
        float _1168 = _1107 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_737, _738, _739), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _4093 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1193 + 1.0))) + _1198) * _1120;
        float _1208 = _1088 * 0.5;
        float _1209 = _1098 * 0.5;
        float _1210 = _1108 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_737, _738, _739), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _4126 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1235 + 1.0))) + _1240) * _1121;
        _1257 = _1088;
        _1259 = _1087;
        _1260 = _1086;
        _1261 = _1098;
        _1262 = _1097;
        _1263 = _1096;
        _1264 = _1108;
        _1265 = _1107;
        _1266 = _1106;
        _1267 = _1121;
        _1268 = _1120;
        _1269 = _1119;
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _1258;
        _1259 = _1258;
        _1260 = _1258;
        _1261 = _1258;
        _1262 = _1258;
        _1263 = _1258;
        _1264 = _1258;
        _1265 = _1258;
        _1266 = _1258;
        _1267 = _1258;
        _1268 = _1258;
        _1269 = _1258;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1297 = fma(_956, cbModelParam._m0[30u].z, fma(_952, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _948));
        float _1301 = fma(_956, cbModelParam._m0[31u].z, fma(_952, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _948));
        float _1305 = fma(_956, cbModelParam._m0[32u].z, fma(_952, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _948));
        float _1328 = _948 + _737;
        float _1329 = _952 + _738;
        float _1330 = _956 + _739;
        float _1340 = fma(_1330, cbModelParam._m0[30u].z, fma(_1329, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1328)) - _1297;
        float _1341 = fma(_1330, cbModelParam._m0[31u].z, fma(_1329, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1328)) - _1301;
        float _1342 = fma(_1330, cbModelParam._m0[32u].z, fma(_1329, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1328)) - _1305;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1297 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1301 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[35u].z) + ((((((_1305 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1396 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1363.x + (-0.5));
        float _1398 = _1396 * (_1363.y + (-0.5));
        float _1399 = _1396 * (_1363.z + (-0.5));
        float _1406 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1370.x + (-0.5));
        float _1408 = _1406 * (_1370.y + (-0.5));
        float _1409 = _1406 * (_1370.z + (-0.5));
        float _1416 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1377.x + (-0.5));
        float _1418 = _1416 * (_1377.y + (-0.5));
        float _1419 = _1416 * (_1377.z + (-0.5));
        float _1426 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1384.x + (-0.5));
        float _1428 = _1426 * (_1384.y + (-0.5));
        float _1429 = _1426 * (_1384.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_737, _738, _739), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4189 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1460 + 1.0))) + _1465) * _1430;
        float _1475 = _1398 * 0.5;
        float _1476 = _1408 * 0.5;
        float _1477 = _1418 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_737, _738, _739), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4222 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1502 + 1.0))) + _1507) * _1431;
        float _1517 = _1399 * 0.5;
        float _1518 = _1409 * 0.5;
        float _1519 = _1419 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_737, _738, _739), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4255 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1544 + 1.0))) + _1549) * _1432;
        _1566 = _1399;
        _1567 = _1398;
        _1568 = _1397;
        _1569 = _1409;
        _1570 = _1408;
        _1571 = _1407;
        _1572 = _1419;
        _1573 = _1418;
        _1574 = _1417;
        _1575 = _1432;
        _1576 = _1431;
        _1577 = _1430;
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _1258;
        _1567 = _1258;
        _1568 = _1258;
        _1569 = _1258;
        _1570 = _1258;
        _1571 = _1258;
        _1572 = _1258;
        _1573 = _1258;
        _1574 = _1258;
        _1575 = _1258;
        _1576 = _1258;
        _1577 = _1258;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1270)) + _1270;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1271)) + _1271;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1272)) + _1272;
    float _1613 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1590));
    float _1634 = _895 * 0.5;
    float _1635 = _896 * 0.5;
    float _1636 = _897 * 0.5;
    float _1637 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1640 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1643 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1677;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1650 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1257, _1261, _1264, _1267));
        float _1654 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1658 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1665 = dot(vec4(cbModelParam._m0[39u]), vec4(_1634, _1635, _1636, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1688;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1679 = dot(vec4(cbModelParam._m0[40u]), vec4(_1634, _1635, _1636, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1692 = (_1688 * cbModelParam._m0[1u].x) + (_1677 * (1.0 - cbModelParam._m0[1u].x));
    float _1702 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _740);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1702 : min(cbModelParam._m0[25u].z, _1702));
    float _1784;
    float _1786;
    float _1788;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1751 = fma(_956, cbModelParam._m0[13u].z, fma(_952, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _948)) + cbModelParam._m0[13u].w;
        float _1755 = fma(_956, cbModelParam._m0[14u].z, fma(_952, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _948)) + cbModelParam._m0[14u].w;
        float _1759 = fma(_956, cbModelParam._m0[15u].z, fma(_952, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _948)) + cbModelParam._m0[15u].w;
        float _1762 = fma(_897, cbModelParam._m0[13u].z, fma(_896, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _895));
        float _1765 = fma(_897, cbModelParam._m0[14u].z, fma(_896, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _895));
        float _1768 = fma(_897, cbModelParam._m0[15u].z, fma(_896, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _895));
        float _1796;
        if (_1762 > 0.0)
        {
            _1796 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1796 = frontier_phi_14_12_ladder;
        }
        float _1966;
        if (_1765 > 0.0)
        {
            _1966 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1966 = frontier_phi_23_19_ladder;
        }
        float _2261;
        if (_1768 > 0.0)
        {
            _2261 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2261 = frontier_phi_35_30_ladder;
        }
        float _2263 = isnan(_1966) ? _1796 : (isnan(_1796) ? _1966 : min(_1796, _1966));
        float _2264 = isnan(_2261) ? _2263 : (isnan(_2263) ? _2261 : min(_2263, _2261));
        float _2268 = (_2264 * _1762) + _1751;
        float _2269 = (_2264 * _1765) + _1755;
        float _2270 = (_2264 * _1768) + _1759;
        float _2271 = _2264 * 9.9999997473787516355514526367188e-05;
        float _2273 = (-1.0) - _2271;
        float _2275 = _2271 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2270 > _2275) || ((_2270 < _2273) || ((_2269 > _2275) || ((_2269 < _2273) || ((_2268 < _2273) || (_2268 > _2275))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2270, cbModelParam._m0[9u].z, fma(_2269, cbModelParam._m0[9u].y, _2268 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2270, cbModelParam._m0[10u].z, fma(_2269, cbModelParam._m0[10u].y, _2268 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2270, cbModelParam._m0[11u].z, fma(_2269, cbModelParam._m0[11u].y, _2268 * cbModelParam._m0[11u].x))), _1703);
            frontier_phi_13_35_ladder = _2415.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2415.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2415.x * cbModelParam._m0[1u].y;
        }
        _1784 = frontier_phi_13_35_ladder_2;
        _1786 = frontier_phi_13_35_ladder_1;
        _1788 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1772 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_895, _896, _897), _1703);
        _1784 = _1772.x * cbModelParam._m0[1u].y;
        _1786 = _1772.y * cbModelParam._m0[1u].y;
        _1788 = _1772.z * cbModelParam._m0[1u].y;
    }
    float _1792 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _740);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1792 : min(cbModelParam._m0[25u].w, _1792));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1847 = fma(_956, cbModelParam._m0[21u].z, fma(_952, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _948)) + cbModelParam._m0[21u].w;
        float _1851 = fma(_956, cbModelParam._m0[22u].z, fma(_952, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _948)) + cbModelParam._m0[22u].w;
        float _1855 = fma(_956, cbModelParam._m0[23u].z, fma(_952, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _948)) + cbModelParam._m0[23u].w;
        float _1858 = fma(_897, cbModelParam._m0[21u].z, fma(_896, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _895));
        float _1861 = fma(_897, cbModelParam._m0[22u].z, fma(_896, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _895));
        float _1864 = fma(_897, cbModelParam._m0[23u].z, fma(_896, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _895));
        float _1971;
        if (_1858 > 0.0)
        {
            _1971 = abs((1.0 - _1847) / _1858);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1847 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1971 = frontier_phi_25_21_ladder;
        }
        float _2288;
        if (_1861 > 0.0)
        {
            _2288 = abs((1.0 - _1851) / _1861);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1851 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2288 = frontier_phi_37_32_ladder;
        }
        float _2615;
        if (_1864 > 0.0)
        {
            _2615 = abs((1.0 - _1855) / _1864);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1855 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2615 = frontier_phi_47_44_ladder;
        }
        float _2617 = isnan(_2288) ? _1971 : (isnan(_1971) ? _2288 : min(_1971, _2288));
        float _2618 = isnan(_2615) ? _2617 : (isnan(_2617) ? _2615 : min(_2617, _2615));
        float _2622 = (_2618 * _1858) + _1847;
        float _2623 = (_2618 * _1861) + _1851;
        float _2624 = (_2618 * _1864) + _1855;
        float _2625 = _2618 * 9.9999997473787516355514526367188e-05;
        float _2626 = (-1.0) - _2625;
        float _2628 = _2625 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2624 > _2628) || ((_2624 < _2626) || ((_2623 > _2628) || ((_2623 < _2626) || ((_2622 < _2626) || (_2622 > _2628))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2624, cbModelParam._m0[17u].z, fma(_2623, cbModelParam._m0[17u].y, _2622 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2624, cbModelParam._m0[18u].z, fma(_2623, cbModelParam._m0[18u].y, _2622 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2624, cbModelParam._m0[19u].z, fma(_2623, cbModelParam._m0[19u].y, _2622 * cbModelParam._m0[19u].x))), _1793);
            frontier_phi_22_47_ladder = _2742.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2742.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2742.x * cbModelParam._m0[1u].z;
        }
        _1883 = frontier_phi_22_47_ladder_2;
        _1885 = frontier_phi_22_47_ladder_1;
        _1887 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_895, _896, _897), _1793);
        _1883 = _1867.x * cbModelParam._m0[1u].z;
        _1885 = _1867.y * cbModelParam._m0[1u].z;
        _1887 = _1867.z * cbModelParam._m0[1u].z;
    }
    float _1899 = ((((1.0 - _916) * ((_903 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_916 * _903)) * _887;
    float _1900 = _1899 * ((cbModelParam._m0[1u].w * (_1883 - _1784)) + _1784);
    float _1901 = _1899 * ((cbModelParam._m0[1u].w * (_1885 - _1786)) + _1786);
    float _1902 = _1899 * ((cbModelParam._m0[1u].w * (_1887 - _1788)) + _1788);
    float _1905 = fma(_1902, cbSceneParam._m0[89u].z, fma(_1901, cbSceneParam._m0[89u].y, _1900 * cbSceneParam._m0[89u].x));
    float _1908 = fma(_1902, cbSceneParam._m0[90u].z, fma(_1901, cbSceneParam._m0[90u].y, _1900 * cbSceneParam._m0[90u].x));
    float _1911 = fma(_1902, cbSceneParam._m0[91u].z, fma(_1901, cbSceneParam._m0[91u].y, _1900 * cbSceneParam._m0[91u].x));
    float _1945 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1949 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1953 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1957 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1958 = _1945 / _1957;
    float _1959 = _1949 / _1957;
    float _1960 = _1953 / _1957;
    float _2107;
    float _2108;
    float _2109;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1987 = ((uint(_1960 > cbSceneParam._m0[59u].y) + uint(_1960 > cbSceneParam._m0[59u].x)) + uint(_1960 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1988 = _1987 + 43u;
        uint _1996 = _1987 + 44u;
        uint _2004 = _1987 + 45u;
        uint _2012 = _1987 + 46u;
        float _2023 = fma(_1957, cbSceneParam._m0[_1988].w, fma(_1953, cbSceneParam._m0[_1988].z, fma(_1949, cbSceneParam._m0[_1988].y, _1945 * cbSceneParam._m0[_1988].x)));
        float _2027 = fma(_1957, cbSceneParam._m0[_1996].w, fma(_1953, cbSceneParam._m0[_1996].z, fma(_1949, cbSceneParam._m0[_1996].y, _1945 * cbSceneParam._m0[_1996].x)));
        float _2035 = fma(_1957, cbSceneParam._m0[_2012].w, fma(_1953, cbSceneParam._m0[_2012].z, fma(_1949, cbSceneParam._m0[_2012].y, _1945 * cbSceneParam._m0[_2012].x)));
        float _2040 = cbSceneParam._m0[33u].z * _2035;
        float _2042 = cbSceneParam._m0[33u].w * _2035;
        float _2045 = fma(_1957, cbSceneParam._m0[_2004].w, fma(_1953, cbSceneParam._m0[_2004].z, fma(_1949, cbSceneParam._m0[_2004].y, _1945 * cbSceneParam._m0[_2004].x))) / _2035;
        float _2093 = (cbSceneParam._m0[33u].x - sqrt(((_1959 * _1959) + (_1958 * _1958)) + (_1960 * _1960))) * cbSceneParam._m0[33u].y;
        float _4381 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2100 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2040 + _2023) / _2035, (_2042 + _2027) / _2035), _2045), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2042 + _2023) / _2035, (_2027 - _2040) / _2035), _2045), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 - _2040) / _2035, (_2027 - _2042) / _2035), _2045), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 - _2042) / _2035, (_2040 + _2027) / _2035), _2045), 0.0)).x), vec4(0.25)));
        _2107 = 1.0 - (_2100 * cbSceneParam._m0[34u].x);
        _2108 = 1.0 - (_2100 * cbSceneParam._m0[34u].y);
        _2109 = 1.0 - (_2100 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2107 = 1.0;
        _2108 = 1.0;
        _2109 = 1.0;
    }
    float _2173;
    float _2175;
    float _2177;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2161 = fma(_1957, cbSceneParam._m0[63u].w, fma(_1953, cbSceneParam._m0[63u].z, fma(_1949, cbSceneParam._m0[63u].y, _1945 * cbSceneParam._m0[63u].x)));
        float _2162 = fma(_1957, cbSceneParam._m0[60u].w, fma(_1953, cbSceneParam._m0[60u].z, fma(_1949, cbSceneParam._m0[60u].y, _1945 * cbSceneParam._m0[60u].x))) / _2161;
        float _2163 = fma(_1957, cbSceneParam._m0[61u].w, fma(_1953, cbSceneParam._m0[61u].z, fma(_1949, cbSceneParam._m0[61u].y, _1945 * cbSceneParam._m0[61u].x))) / _2161;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2162 >= cbSceneParam._m0[64u].x) && (_2163 >= cbSceneParam._m0[64u].y)) && (_2162 <= cbSceneParam._m0[64u].z)) && (_2163 <= cbSceneParam._m0[64u].w))
        {
            float _2301 = fma(_1957, cbSceneParam._m0[62u].w, fma(_1953, cbSceneParam._m0[62u].z, fma(_1949, cbSceneParam._m0[62u].y, _1945 * cbSceneParam._m0[62u].x))) / _2161;
            float _2305 = isnan(cbSceneParam._m0[41u].w) ? _2301 : (isnan(_2301) ? cbSceneParam._m0[41u].w : max(_2301, cbSceneParam._m0[41u].w));
            float _2348 = (cbSceneParam._m0[33u].x - sqrt(((_1959 * _1959) + (_1958 * _1958)) + (_1960 * _1960))) * cbSceneParam._m0[33u].y;
            float _4397 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
            float _2355 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2162, cbSceneParam._m0[33u].w + _2163), _2305), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2162, _2163 - cbSceneParam._m0[33u].z), _2305), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2162 - cbSceneParam._m0[33u].z, _2163 - cbSceneParam._m0[33u].w), _2305), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2162 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2163), _2305), 0.0)).x), vec4(0.25)));
            float _2359 = 1.0 - (_2355 * cbSceneParam._m0[34u].x);
            float _2360 = 1.0 - (_2355 * cbSceneParam._m0[34u].y);
            float _2361 = 1.0 - (_2355 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2361) ? _2109 : (isnan(_2109) ? _2361 : min(_2109, _2361));
            frontier_phi_34_33_ladder_1 = isnan(_2360) ? _2108 : (isnan(_2108) ? _2360 : min(_2108, _2360));
            frontier_phi_34_33_ladder_2 = isnan(_2359) ? _2107 : (isnan(_2107) ? _2359 : min(_2107, _2359));
        }
        else
        {
            frontier_phi_34_33_ladder = _2109;
            frontier_phi_34_33_ladder_1 = _2108;
            frontier_phi_34_33_ladder_2 = _2107;
        }
        _2173 = frontier_phi_34_33_ladder_2;
        _2175 = frontier_phi_34_33_ladder_1;
        _2177 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2173 = _2107;
        _2175 = _2108;
        _2177 = _2109;
    }
    uvec4 _2182 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _2184 = _2182.x * 14u;
    uint _2185 = _2184 + 13u;
    float _2192 = _887 + (-1.0);
    float _2197 = (cbLight._m0[_2185].x * _2192) + 1.0;
    float _2198 = (cbLight._m0[_2185].y * _2192) + 1.0;
    float _2199 = (cbLight._m0[_2185].z * _2192) + 1.0;
    float _2200 = (cbLight._m0[_2185].w * _2192) + 1.0;
    uint _2201 = _2184 + 5u;
    float _2207 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
    uint _2211 = _2184 + 4u;
    float _2220 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
    uint _2224 = _2184 | 1u;
    float _2235 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_737, _738, _739));
    float _2238 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_737, _738, _739));
    float _4433 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _4444 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2243 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * 0.3183098733425140380859375;
    float _2245 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * 0.3183098733425140380859375;
    float _2252 = ((cbLight._m0[_2201].x * _2207) * _2245) + (((cbLight._m0[_2211].x * _2173) * _2220) * _2243);
    float _2253 = ((_2207 * cbLight._m0[_2201].y) * _2245) + (((cbLight._m0[_2211].y * _2175) * _2220) * _2243);
    float _2254 = ((_2207 * cbLight._m0[_2201].z) * _2245) + (((cbLight._m0[_2211].z * _2177) * _2220) * _2243);
    uvec4 _2258 = floatBitsToUint(cbLight._m0[_2184 + 12u]);
    bool _2260 = _2258.x == 0u;
    float _2362;
    float _2364;
    float _2366;
    if (_2260)
    {
        _2362 = _2252;
        _2364 = _2253;
        _2366 = _2254;
    }
    else
    {
        uint _2370 = _2184 + 6u;
        float _2386 = (dot(vec3(cbLight._m0[_2184 + 2u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2387 = _2386 * _2386;
        float _4455 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2388 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2389 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2362 = (((cbLight._m0[_2370].x * 0.3183098733425140380859375) * _2388) * _2389) + _2252;
        _2364 = (((cbLight._m0[_2370].y * 0.3183098733425140380859375) * _2388) * _2389) + _2253;
        _2366 = (((cbLight._m0[_2370].z * 0.3183098733425140380859375) * _2388) * _2389) + _2254;
    }
    bool _2369 = _2258.y == 0u;
    float _2424;
    float _2426;
    float _2428;
    if (_2369)
    {
        _2424 = _2362;
        _2426 = _2364;
        _2428 = _2366;
    }
    else
    {
        uint _2586 = _2184 + 7u;
        float _2602 = (dot(vec3(cbLight._m0[_2184 + 3u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2603 = _2602 * _2602;
        float _4471 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2604 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2605 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2424 = (((cbLight._m0[_2586].x * 0.3183098733425140380859375) * _2604) * _2605) + _2362;
        _2426 = (((cbLight._m0[_2586].y * 0.3183098733425140380859375) * _2604) * _2605) + _2364;
        _2428 = (((cbLight._m0[_2586].z * 0.3183098733425140380859375) * _2604) * _2605) + _2366;
    }
    uint _2431 = _2184 + 8u;
    float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _740) * 0.949999988079071044921875);
    float _2445 = _2444 * _2444;
    float _2446 = cbLight._m0[_2184].x + _816;
    float _2447 = cbLight._m0[_2184].y + _817;
    float _2448 = cbLight._m0[_2184].z + _818;
    float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
    float _2453 = _2452 * _2446;
    float _2454 = _2452 * _2447;
    float _2455 = _2452 * _2448;
    float _2456 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2184].xyz));
    float _4487 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _4498 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _2460 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2461 = dot(vec3(_737, _738, _739), vec3(_2453, _2454, _2455));
    float _4509 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2465 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2453, _2454, _2455));
    float _4520 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2469 = _2445 * _2445;
    float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
    float _2484 = (exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2485 = 1.0 - _2445;
    float _2496 = (0.5 / (((_2460 * ((_2459 * _2485) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2460 * _2485) + _2445) * _2459))) * _2459;
    float _4531 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2498 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
    uint _2512 = _2184 + 9u;
    float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _740) * 0.949999988079071044921875);
    float _2524 = _2523 * _2523;
    float _2525 = cbLight._m0[_2224].x + _816;
    float _2526 = cbLight._m0[_2224].y + _817;
    float _2527 = cbLight._m0[_2224].z + _818;
    float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
    float _2532 = _2531 * _2525;
    float _2533 = _2531 * _2526;
    float _2534 = _2531 * _2527;
    float _2535 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2224].xyz));
    float _4542 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2539 = dot(vec3(_737, _738, _739), vec3(_2532, _2533, _2534));
    float _4553 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2542 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2543 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2532, _2533, _2534));
    float _4564 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2547 = _2524 * _2524;
    float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
    float _2560 = (exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2561 = 1.0 - _2524;
    float _2571 = (0.5 / (((_2460 * ((_2538 * _2561) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2460 * _2561) + _2524) * _2538))) * _2538;
    float _4575 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2573 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
    float _2583 = (((_2560 * cbLight._m0[_2512].x) * _2573) * _2207) + ((((cbLight._m0[_2431].x * _2173) * _2484) * _2498) * _2220);
    float _2584 = (((_2560 * cbLight._m0[_2512].y) * _2573) * _2207) + ((((cbLight._m0[_2431].y * _2175) * _2484) * _2498) * _2220);
    float _2585 = (((_2560 * cbLight._m0[_2512].z) * _2573) * _2207) + ((((cbLight._m0[_2431].z * _2177) * _2484) * _2498) * _2220);
    float _2641;
    float _2643;
    float _2645;
    if (_2260)
    {
        _2641 = _2583;
        _2643 = _2584;
        _2645 = _2585;
    }
    else
    {
        uint _2647 = _2184 + 2u;
        uint _2651 = _2184 + 10u;
        float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2647].w)) * _740) * 0.949999988079071044921875);
        float _2666 = _2665 * _2665;
        float _2667 = cbLight._m0[_2647].x + _816;
        float _2668 = cbLight._m0[_2647].y + _817;
        float _2669 = cbLight._m0[_2647].z + _818;
        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
        float _2674 = _2673 * _2667;
        float _2675 = _2673 * _2668;
        float _2676 = _2673 * _2669;
        float _2677 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2647].xyz));
        float _4586 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2681 = dot(vec3(_737, _738, _739), vec3(_2674, _2675, _2676));
        float _4597 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2685 = dot(vec3(cbLight._m0[_2647].xyz), vec3(_2674, _2675, _2676));
        float _4608 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2689 = _2666 * _2666;
        float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
        float _2702 = (exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2703 = 1.0 - _2666;
        float _2713 = (0.5 / (((_2460 * ((_2680 * _2703) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2460 * _2703) + _2666) * _2680))) * _2680;
        float _4619 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2715 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
        float _2716 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2641 = (((_2702 * cbLight._m0[_2651].x) * _2715) * _2716) + _2583;
        _2643 = (((_2702 * cbLight._m0[_2651].y) * _2715) * _2716) + _2584;
        _2645 = (((_2702 * cbLight._m0[_2651].z) * _2715) * _2716) + _2585;
    }
    float _2747;
    float _2749;
    float _2751;
    if (_2369)
    {
        _2747 = _2641;
        _2749 = _2643;
        _2751 = _2645;
    }
    else
    {
        uint _2758 = _2184 + 3u;
        uint _2762 = _2184 + 11u;
        float _2776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2758].w)) * _740) * 0.949999988079071044921875);
        float _2777 = _2776 * _2776;
        float _2778 = cbLight._m0[_2758].x + _816;
        float _2779 = cbLight._m0[_2758].y + _817;
        float _2780 = cbLight._m0[_2758].z + _818;
        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
        float _2785 = _2784 * _2778;
        float _2786 = _2784 * _2779;
        float _2787 = _2784 * _2780;
        float _2788 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2758].xyz));
        float _4635 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2791 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2792 = dot(vec3(_737, _738, _739), vec3(_2785, _2786, _2787));
        float _4646 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2796 = dot(vec3(cbLight._m0[_2758].xyz), vec3(_2785, _2786, _2787));
        float _4657 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2800 = _2777 * _2777;
        float _2804 = ((_2795 * _2795) * (_2800 + (-1.0))) + 1.0;
        float _2813 = (exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2814 = 1.0 - _2777;
        float _2824 = (0.5 / (((_2460 * ((_2791 * _2814) + _2777)) + 9.9999999392252902907785028219223e-09) + (((_2460 * _2814) + _2777) * _2791))) * _2791;
        float _4668 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2826 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2800 / ((_2804 * _2804) * 3.141590118408203125));
        float _2827 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2747 = (((_2813 * cbLight._m0[_2762].x) * _2826) * _2827) + _2641;
        _2749 = (((_2813 * cbLight._m0[_2762].y) * _2826) * _2827) + _2643;
        _2751 = (((_2813 * cbLight._m0[_2762].z) * _2826) * _2827) + _2645;
    }
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    if (_2182.y == 0u)
    {
        uvec4 _2848 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2849 = _2848.x;
        uint _2860 = uint((float(_2848.y) * floor(float(uint(cbSceneParam._m0[85u].y * _825) / _2849))) + floor(float(uint(cbSceneParam._m0[85u].x * _824) / _2849)));
        float _2870 = (log2(_1960 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2871 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        uint _2874 = uint(isnan(14.0) ? _2871 : (isnan(_2871) ? 14.0 : min(_2871, 14.0)));
        uvec4 _2879 = texelFetch(g_lightClusterGridBuffer, int(((_2874 << 2u) + (_2860 << 6u)) >> 2u));
        uint _2880 = _2879.x;
        uint _2881 = _2848.z;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        if (((((1u << ((_2881 >> 4u) & 15u)) + 4294967295u) & _2880) == 0u) || ((_2881 & 240u) == 0u))
        {
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
        }
        else
        {
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            uint _3111 = 0u;
            uint _3120;
            bool _3121;
            for (;;)
            {
                _3120 = texelFetch(g_lightClassification, int((((_2874 << 5u) + (_2860 << 9u)) + (_3111 << 2u)) >> 2u)).x;
                _3121 = _3120 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3121)
                {
                    frontier_phi_66_pred = _3110;
                    frontier_phi_66_pred_1 = _3109;
                    frontier_phi_66_pred_2 = _3108;
                    frontier_phi_66_pred_3 = _3107;
                    frontier_phi_66_pred_4 = _3106;
                    frontier_phi_66_pred_5 = _3105;
                }
                else
                {
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    uint _3235;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3107;
                    _3232 = _3108;
                    _3233 = _3109;
                    _3234 = _3110;
                    _3235 = _3120;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    for (;;)
                    {
                        uint _3239 = uint(findLSB(_3235)) + (_3111 << 5u);
                        uint _3236 = (_3235 + 4294967295u) & _3235;
                        uint _3241 = _3239 * 48u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3261 = (_3239 * 48u) + 4u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3280 = (_3239 * 48u) + 8u;
                        vec3 _3291 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x));
                        float _3295 = _3255.x - _1958;
                        float _3296 = _3255.y - _1959;
                        float _3297 = _3255.z - _1960;
                        float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                        float _3301 = inversesqrt(_3298);
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3305 = dot(vec3(_843, _846, _849), vec3(_3302, _3303, _3304));
                        float _3310 = 1.0 - (_3298 * _3255.w);
                        float _4694 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3312 = sqrt(_3298) * _3274.w;
                        float _3315 = 1.39999997615814208984375 / (_3312 + 1.39999997615814208984375);
                        float _3316 = _3315 * _3315;
                        float _3319 = ((1.0 - _3316) * _3305) + _3316;
                        float _3322 = _3312 * _3312;
                        float _3326 = ((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3311) / ((_3322 * 0.699999988079071044921875) + 1.0);
                        float _3330 = (-0.0) - _1958;
                        float _3331 = (-0.0) - _1959;
                        float _3332 = (-0.0) - _1960;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3346 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                        float _3347 = 1.0 - _903;
                        float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                        float _3355 = _3354 * _3354;
                        float _3356 = _3355 * _3355;
                        float _3357 = _3337 + _3302;
                        float _3358 = _3338 + _3303;
                        float _3359 = _3339 + _3304;
                        float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                        float _3367 = dot(vec3(_843, _846, _849), vec3(_3337, _3338, _3339));
                        float _4710 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3371 = dot(vec3(_843, _846, _849), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                        float _4721 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3374 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                        float _3379 = _3315 * _3355;
                        float _3380 = _3379 * _3379;
                        float _3383 = ((1.0 - _3380) * _3305) + _3380;
                        float _4732 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3384 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3385 = 1.0 - _3355;
                        float _3395 = (0.5 / (((_3384 * ((_3370 * _3385) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3355) * _3370))) * _3384;
                        float _4743 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3406 = (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3378 * _3378) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125))) * _3311;
                        _3164 = (_3326 * _3274.x) + _3232;
                        _3165 = (_3326 * _3274.y) + _3233;
                        _3166 = (_3326 * _3274.z) + _3234;
                        _3161 = (_3406 * _3291.x) + _3229;
                        _3162 = (_3406 * _3291.y) + _3230;
                        _3163 = (_3406 * _3291.z) + _3231;
                        if (_3236 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3163;
                            _3232 = _3164;
                            _3233 = _3165;
                            _3234 = _3166;
                            _3235 = _3236;
                        }
                    }
                    frontier_phi_66_pred = _3166;
                    frontier_phi_66_pred_1 = _3165;
                    frontier_phi_66_pred_2 = _3164;
                    frontier_phi_66_pred_3 = _3163;
                    frontier_phi_66_pred_4 = _3162;
                    frontier_phi_66_pred_5 = _3161;
                }
                _2971 = frontier_phi_66_pred;
                _2969 = frontier_phi_66_pred_1;
                _2967 = frontier_phi_66_pred_2;
                _2965 = frontier_phi_66_pred_3;
                _2963 = frontier_phi_66_pred_4;
                _2961 = frontier_phi_66_pred_5;
                uint _3112 = _3111 + 1u;
                if (_3112 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3105 = _2961;
                    _3106 = _2963;
                    _3107 = _2965;
                    _3108 = _2967;
                    _3109 = _2969;
                    _3110 = _2971;
                    _3111 = _3112;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
        }
        uvec4 _2974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2975 = _2974.z;
        uint _2977 = (_2975 >> 8u) & 15u;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        if (((4294967295u << _2977) & _2880) == 0u)
        {
            _3073 = _2960;
            _3075 = _2962;
            _3077 = _2964;
            _3079 = _2966;
            _3081 = _2968;
            _3083 = _2970;
        }
        else
        {
            float _3098 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
            float _3099 = _3098 * _1958;
            float _3100 = _3098 * _1959;
            float _3101 = _3098 * _1960;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2977 < ((_2975 >> 12u) & 15u))
            {
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3212 = _2960;
                float _3213 = _2962;
                float _3214 = _2964;
                float _3215 = _2966;
                float _3216 = _2968;
                float _3217 = _2970;
                uint _3218 = _2977;
                uint _3227;
                bool _3228;
                for (;;)
                {
                    _3227 = texelFetch(g_lightClassification, int((((_2874 << 5u) + (_2860 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                    _3228 = _3227 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3228)
                    {
                        frontier_phi_72_pred = _3217;
                        frontier_phi_72_pred_1 = _3216;
                        frontier_phi_72_pred_2 = _3215;
                        frontier_phi_72_pred_3 = _3214;
                        frontier_phi_72_pred_4 = _3213;
                        frontier_phi_72_pred_5 = _3212;
                    }
                    else
                    {
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3424 = _3212;
                        float _3425 = _3213;
                        float _3426 = _3214;
                        float _3427 = _3215;
                        float _3428 = _3216;
                        float _3429 = _3217;
                        uint _3430 = _3227;
                        uint _3431;
                        vec4 _3456;
                        float _3457;
                        vec4 _3472;
                        vec3 _3484;
                        vec4 _3499;
                        vec4 _3514;
                        float _3560;
                        bool _3561;
                        for (;;)
                        {
                            uint _3441 = ((_3218 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3430));
                            _3431 = (_3430 + 4294967295u) & _3430;
                            uint _3443 = _3441 * 40u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            _3457 = _3456.w;
                            uint _3459 = (_3441 * 40u) + 4u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3474 = (_3441 * 40u) + 8u;
                            _3484 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x));
                            uint _3486 = (_3441 * 40u) + 16u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3501 = (_3441 * 40u) + 20u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3516 = (_3441 * 40u) + 24u;
                            vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3535 = (_3441 * 40u) + 28u;
                            vec4 _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            _3560 = fma(_1960, _3548.z, fma(_1959, _3548.y, _3548.x * _1958)) + _3548.w;
                            _3561 = !((fma(_1960, _3529.z, fma(_1959, _3529.y, _3529.x * _1958)) + _3529.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3561)
                            {
                                float _3588 = _3456.x - _1958;
                                float _3589 = _3456.y - _1959;
                                float _3590 = _3456.z - _1960;
                                float _3591 = dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590));
                                float _3594 = inversesqrt(_3591);
                                float _3595 = _3594 * _3588;
                                float _3596 = _3594 * _3589;
                                float _3597 = _3594 * _3590;
                                float _3601 = 1.0 - (_3591 / (_3457 * _3457));
                                float _4754 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3606 = sqrt(_3591) * _3472.w;
                                float _3608 = 1.39999997615814208984375 / (_3606 + 1.39999997615814208984375);
                                float _3609 = _3608 * _3608;
                                float _3612 = ((1.0 - _3609) * dot(vec3(_3595, _3596, _3597), vec3(_843, _846, _849))) + _3609;
                                float _3615 = _3606 * _3606;
                                float _3619 = (fma(_1960, _3499.z, fma(_1959, _3499.y, _3499.x * _1958)) + _3499.w) / _3560;
                                float _3620 = (fma(_1960, _3514.z, fma(_1959, _3514.y, _3514.x * _1958)) + _3514.w) / _3560;
                                float _3624 = 1.0 - dot(vec2(_3619, _3620), vec2(_3619, _3620));
                                float _4770 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3625 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3626 = _3625 * (((isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0))) * _3602) / ((_3615 * 0.699999988079071044921875) + 1.0));
                                float _3638 = exp2(log2(1.0 / ((_3615 * 3.5) + 5.0)) * 0.25);
                                float _3639 = 1.0 - _903;
                                float _3646 = sqrt(1.0 - ((1.0 - (_3639 * _3639)) * (1.0 - (_3638 * _3638))));
                                float _3647 = _3646 * _3646;
                                float _3648 = _3647 * _3647;
                                float _3649 = _3595 - _3099;
                                float _3650 = _3596 - _3100;
                                float _3651 = _3597 - _3101;
                                float _3655 = inversesqrt(dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651)));
                                float _3659 = dot(vec3(_843, _846, _849), vec3((-0.0) - _3099, (-0.0) - _3100, (-0.0) - _3101));
                                float _4781 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3662 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3663 = dot(vec3(_843, _846, _849), vec3(_3655 * _3649, _3655 * _3650, _3655 * _3651));
                                float _4792 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3666 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3670 = ((_3666 * _3666) * (_3648 + (-1.0))) + 1.0;
                                float _3671 = _3608 * _3647;
                                float _3672 = _3671 * _3671;
                                float _3678 = ((1.0 - _3672) * dot(vec3(_843, _846, _849), vec3(_3595, _3596, _3597))) + _3672;
                                float _4803 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3680 = 1.0 - _3647;
                                float _3690 = (0.5 / (((_3679 * ((_3662 * _3680) + _3647)) + 9.9999999392252902907785028219223e-09) + (((_3679 * _3680) + _3647) * _3662))) * _3679;
                                float _4814 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3700 = (_3625 * _3602) * (((_3648 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3670 * _3670) * ((_3615 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3626 * _3472.y;
                                frontier_phi_78_pred_1 = _3626 * _3472.x;
                                frontier_phi_78_pred_2 = _3700 * _3484.z;
                                frontier_phi_78_pred_3 = _3700 * _3484.y;
                                frontier_phi_78_pred_4 = _3700 * _3484.x;
                                frontier_phi_78_pred_5 = _3626 * _3472.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3708 = frontier_phi_78_pred;
                            _3707 = frontier_phi_78_pred_1;
                            _3706 = frontier_phi_78_pred_2;
                            _3705 = frontier_phi_78_pred_3;
                            _3704 = frontier_phi_78_pred_4;
                            _3709 = frontier_phi_78_pred_5;
                            _3414 = _3707 + _3427;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            if (_3431 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3431;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3416;
                        frontier_phi_72_pred_1 = _3415;
                        frontier_phi_72_pred_2 = _3414;
                        frontier_phi_72_pred_3 = _3413;
                        frontier_phi_72_pred_4 = _3412;
                        frontier_phi_72_pred_5 = _3411;
                    }
                    _3084 = frontier_phi_72_pred;
                    _3082 = frontier_phi_72_pred_1;
                    _3080 = frontier_phi_72_pred_2;
                    _3078 = frontier_phi_72_pred_3;
                    _3076 = frontier_phi_72_pred_4;
                    _3074 = frontier_phi_72_pred_5;
                    uint _3219 = _3218 + 1u;
                    if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3212 = _3074;
                        _3213 = _3076;
                        _3214 = _3078;
                        _3215 = _3080;
                        _3216 = _3082;
                        _3217 = _3084;
                        _3218 = _3219;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3084;
                frontier_phi_60_61_ladder_1 = _3082;
                frontier_phi_60_61_ladder_2 = _3078;
                frontier_phi_60_61_ladder_3 = _3076;
                frontier_phi_60_61_ladder_4 = _3074;
                frontier_phi_60_61_ladder_5 = _3080;
            }
            else
            {
                frontier_phi_60_61_ladder = _2970;
                frontier_phi_60_61_ladder_1 = _2968;
                frontier_phi_60_61_ladder_2 = _2964;
                frontier_phi_60_61_ladder_3 = _2962;
                frontier_phi_60_61_ladder_4 = _2960;
                frontier_phi_60_61_ladder_5 = _2966;
            }
            _3073 = frontier_phi_60_61_ladder_4;
            _3075 = frontier_phi_60_61_ladder_3;
            _3077 = frontier_phi_60_61_ladder_2;
            _3079 = frontier_phi_60_61_ladder_5;
            _3081 = frontier_phi_60_61_ladder_1;
            _3083 = frontier_phi_60_61_ladder;
        }
        float _3088 = isnan(1.0) ? _887 : (isnan(_887) ? 1.0 : min(_887, 1.0));
        _2893 = (_3088 * _3079) + _2424;
        _2895 = (_3088 * _3081) + _2426;
        _2897 = (_3088 * _3083) + _2428;
        _2899 = ((_3073 * 0.039999999105930328369140625) * _3088) + _2747;
        _2901 = ((_3075 * 0.039999999105930328369140625) * _3088) + _2749;
        _2903 = ((_3077 * 0.039999999105930328369140625) * _3088) + _2751;
    }
    else
    {
        _2893 = _2424;
        _2895 = _2426;
        _2897 = _2428;
        _2899 = _2747;
        _2901 = _2749;
        _2903 = _2751;
    }
    float _4830 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4841 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4852 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    uint _2923 = _266 + 6u;
    float _2931 = _824 / cbSceneParam._m0[86u].x;
    float _2932 = _825 / cbSceneParam._m0[86u].y;
    vec4 _2946 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2931, _2932, (log2((isnan(cbSceneParam._m0[77u].w) ? _758 : (isnan(_758) ? cbSceneParam._m0[77u].w : min(_758, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2948 = _2946.x;
    float _2949 = _2946.y;
    float _2950 = _2946.z;
    float _2951 = _2946.w;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    if (_758 > cbSceneParam._m0[78u].w)
    {
        float _2985 = isnan(_758) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _758 : min(cbSceneParam._m0[80u].w, _758));
        float _2986 = _2985 / _758;
        float _2997 = _2986 * _809;
        float _2998 = _810 * _2986;
        float _2999 = (-0.0) - _2998;
        float _3001 = _2986 * _811;
        float _3003 = (cbSceneParam._m0[77u].w * _2999) / _2985;
        float _3004 = _3003 + cbSceneParam._m0[79u].w;
        float _3005 = cbSceneParam._m0[79u].w - _2998;
        float _3011 = sqrt(((_2997 * _2997) + (_2998 * _2998)) + (_3001 * _3001));
        float _3014 = (1.0 - (cbSceneParam._m0[77u].w / _2985)) * _3011;
        float _3019 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3021 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3174;
        if (abs((_2999 - _3003) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3174 = ((((_3004 > 0.0) ? exp2(_3019 * _3004) : (2.0 - exp2(_3021 * _3004))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3014;
        }
        else
        {
            float _3134 = 1.0 / cbSceneParam._m0[80u].x;
            float _3135 = isnan(_3005) ? _3004 : (isnan(_3004) ? _3005 : max(_3004, _3005));
            float _3136 = isnan(_3005) ? _3004 : (isnan(_3004) ? _3005 : min(_3004, _3005));
            float _3145 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : min(_3135, 0.0));
            float _3146 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : min(_3136, 0.0));
            _3174 = ((abs(_3011 / _2999) * cbSceneParam._m0[80u].y) * ((((_3145 - _3146) * 2.0) - ((exp2(_3019 * (isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0)))) - exp2(_3019 * (isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))))) * _3134)) - ((exp2(_3021 * _3145) - exp2(_3021 * _3146)) * _3134))) + (_3014 * cbSceneParam._m0[80u].z);
        }
        vec4 _3176 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2931, _2932, 1.0), 0.0);
        float _3185 = exp2((_3174 * (-1.44269502162933349609375)) * (1.0 - _3176.w));
        float _3186 = log2(_3185);
        float _3202 = log2(_2951);
        _3023 = (exp2(_3202 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3186 * cbSceneParam._m0[78u].x)) * _3176.x) / cbSceneParam._m0[78u].x)) + _2948;
        _3025 = (exp2(_3202 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3186 * cbSceneParam._m0[78u].y)) * _3176.y) / cbSceneParam._m0[78u].y)) + _2949;
        _3027 = (exp2(_3202 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3186 * cbSceneParam._m0[78u].z)) * _3176.z) / cbSceneParam._m0[78u].z)) + _2950;
        _3029 = _3185 * _2951;
    }
    else
    {
        _3023 = _2948;
        _3025 = _2949;
        _3027 = _2950;
        _3029 = _2951;
    }
    float _3041 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3042 = _3041 == 3.0;
    float _3043 = log2(_3029);
    float _3050 = exp2(_3043 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2893 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _887))) + ((_2899 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1692)) * cbPerFrame._m0[3u].x));
    float _3051 = exp2(_3043 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2895 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _887))) + ((_2901 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1692)) * cbPerFrame._m0[3u].x));
    float _3052 = exp2(_3043 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2897 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _887))) + ((_2903 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1692)) * cbPerFrame._m0[3u].x));
    float _3061 = (_3041 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3061 * (_3042 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3023)));
    SV_Target.y = _3061 * (_3042 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3025)));
    SV_Target.z = _3061 * (_3042 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3027)));
    SV_Target.w = cbInstanceData._m0[_2923].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2923].w;
}


