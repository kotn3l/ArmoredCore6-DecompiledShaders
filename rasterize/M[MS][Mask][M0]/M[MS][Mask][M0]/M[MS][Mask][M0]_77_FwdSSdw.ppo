#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1393;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _361.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].z) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3721 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _437 = (_430 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _438 = (_430 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _439 = (_430 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _361.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[24u].z) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3732 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _516 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437);
    float _519 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438);
    float _522 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439);
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _559 = _557.x;
    float _560 = _557.y;
    float _561 = _557.z;
    float _568 = ((_540.x - _559) * _430) + _559;
    float _569 = ((_540.y - _560) * _430) + _560;
    float _570 = ((_540.z - _561) * _430) + _561;
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _595 = ((_582.z - _570) * _503) + _570;
    float _598 = ((((_582.x - _568) * _503) + _568) * 2.0) + (-1.0);
    float _600 = ((((_582.y - _569) * _503) + _569) * 2.0) + (-1.0);
    float _601 = dot(vec2(_598, _600), vec2(_598, _600));
    float _3743 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _606 = sqrt(1.0 - (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _632 = (((_620.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    float _633 = (((_620.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _600;
    float _636 = fma(_606, _241, fma(_633, _248, _632 * _234));
    float _639 = fma(_606, _242, fma(_633, _249, _632 * _235));
    float _642 = fma(_606, _243, fma(_633, _250, _632 * _236));
    float _646 = inversesqrt(dot(vec3(_636, _639, _642), vec3(_636, _639, _642)));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _675 = _673.x;
    float _676 = 1.0 - _675;
    float _682 = (cbMtdParam._m0[19u].x + dot(vec4(_646 * _636, _646 * _639, _646 * _642, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_675 - _676) * cbMtdParam._m0[24u].w) + _676) * cbMtdParam._m0[21u].z);
    float _3754 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _685 = (-0.0) - cbMtdParam._m0[24u].x;
    float _687 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _687 : (isnan(_687) ? 1.0 : min(_687, 1.0));
    float _695 = _683 - ((_683 * TEXCOORD_8.x) * _688);
    float _696 = _683 - ((_683 * TEXCOORD_8.y) * _688);
    float _697 = _683 - ((_683 * TEXCOORD_8.z) * _688);
    float _704 = (_695 * (cbMtdParam._m0[17u].x - _516)) + _516;
    float _705 = (_696 * (cbMtdParam._m0[17u].y - _519)) + _519;
    float _706 = (_697 * (cbMtdParam._m0[17u].z - _522)) + _522;
    vec4 _718 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _720 = _718.x;
    float _721 = 1.0 - _720;
    float _749 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_720 - _721) * cbMtdParam._m0[24u].y) + _721) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3775 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _750 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _758 = ((((cbMtdParam._m0[10u].x - _704) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _750) + _704;
    float _759 = ((((cbMtdParam._m0[10u].y - _705) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _750) + _705;
    float _760 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _706)) * _750) + _706;
    float _764 = (cbMtdParam._m0[19u].w * (_620.z - _595)) + _595;
    vec4 _778 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _785 = (_778.x * 2.0) + (-1.0);
    float _786 = (_778.y * 2.0) + (-1.0);
    float _787 = dot(vec2(_785, _786), vec2(_785, _786));
    float _3786 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _795 = ((_778.z - _764) * _695) + _764;
    float _798 = ((cbMtdParam._m0[23u].y - _795) * _750) + _795;
    vec4 _817 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _823 = (_817.x * 2.0) + (-1.0);
    float _824 = (_817.y * 2.0) + (-1.0);
    float _825 = dot(vec2(_823, _824), vec2(_823, _824));
    float _3797 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _840 = ((sqrt(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) - _606) * _697) + _606;
    float _843 = (((_785 - _632) * _695) + _632) + (cbMtdParam._m0[21u].x * _632);
    float _844 = (((_786 - _633) * _696) + _633) + (cbMtdParam._m0[21u].x * _633);
    float _855 = (((_823 - _843) + (_843 * cbMtdParam._m0[22u].z)) * _750) + _843;
    float _856 = (((_824 - _844) + (_844 * cbMtdParam._m0[22u].z)) * _750) + _844;
    float _857 = (_750 * (sqrt(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) - _840)) + _840;
    float _859 = cbMtdParam._m0[22u].x + _620.w;
    float _862 = fma(_857, _241, fma(_856, _248, _855 * _234));
    float _865 = fma(_857, _242, fma(_856, _249, _855 * _235));
    float _868 = fma(_857, _243, fma(_856, _250, _855 * _236));
    float _872 = inversesqrt(dot(vec3(_862, _865, _868), vec3(_862, _865, _868)));
    float _873 = _872 * _862;
    float _874 = _872 * _865;
    float _875 = _872 * _868;
    float _3808 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _876 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _3830 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _3841 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _3852 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _894 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _944 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _934);
    float _945 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _934);
    float _946 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _934);
    float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
    float _951 = _944 * _950;
    float _952 = _945 * _950;
    float _953 = _946 * _950;
    float _959 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _960 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _978 = fma(_875, cbSceneParam._m0[5u].z, fma(_874, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _873));
    float _981 = fma(_875, cbSceneParam._m0[6u].z, fma(_874, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _873));
    float _984 = fma(_875, cbSceneParam._m0[7u].z, fma(_874, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _873));
    uint _998 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1004 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * cbInstanceData._m0[_998].x;
    float _1005 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_998].y;
    float _1006 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_998].z;
    float _3863 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    vec4 _1018 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _959, cbSceneParam._m0[86u].y * _960));
    float _1022 = ((isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * TEXCOORD_5.w) * _1018.x;
    float _1023 = dot(vec3(_873, _874, _875), vec3(_951, _952, _953));
    float _1026 = _1023 * 2.0;
    float _1030 = (_1026 * _873) - _951;
    float _1031 = (_1026 * _874) - _952;
    float _1032 = (_1026 * _875) - _953;
    float _1036 = abs(dot(vec3(_951, _952, _953), vec3(_873, _874, _875)));
    float _3896 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1038 = sqrt(_876);
    float _1051 = exp2((_1038 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1038 * 3.0));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1392;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1117 = fma(_1091, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083));
        float _1121 = fma(_1091, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083));
        float _1125 = fma(_1091, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083));
        float _1150 = _1083 + _873;
        float _1151 = _1087 + _874;
        float _1152 = _1091 + _875;
        float _1162 = fma(_1152, cbModelParam._m0[26u].z, fma(_1151, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1150)) - _1117;
        float _1163 = fma(_1152, cbModelParam._m0[27u].z, fma(_1151, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1150)) - _1121;
        float _1164 = fma(_1152, cbModelParam._m0[28u].z, fma(_1151, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1150)) - _1125;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1117 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1121 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[34u].z) + ((((((_1125 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1220 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1186.x + (-0.5));
        float _1222 = _1220 * (_1186.y + (-0.5));
        float _1223 = _1220 * (_1186.z + (-0.5));
        float _1230 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1193.x + (-0.5));
        float _1232 = _1230 * (_1193.y + (-0.5));
        float _1233 = _1230 * (_1193.z + (-0.5));
        float _1240 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1200.x + (-0.5));
        float _1242 = _1240 * (_1200.y + (-0.5));
        float _1243 = _1240 * (_1200.z + (-0.5));
        float _1250 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1207.x + (-0.5));
        float _1252 = _1250 * (_1207.y + (-0.5));
        float _1253 = _1250 * (_1207.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1274 = (dot(vec3(_873, _874, _875), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1284 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3944 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1286 + 1.0))) + _1291) * _1254;
        float _1301 = _1222 * 0.5;
        float _1302 = _1232 * 0.5;
        float _1303 = _1242 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_873, _874, _875), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3977 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1328 + 1.0))) + _1333) * _1255;
        float _1343 = _1223 * 0.5;
        float _1344 = _1233 * 0.5;
        float _1345 = _1243 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_873, _874, _875), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4010 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1370 + 1.0))) + _1375) * _1256;
        _1392 = _1223;
        _1394 = _1222;
        _1395 = _1221;
        _1396 = _1233;
        _1397 = _1232;
        _1398 = _1231;
        _1399 = _1243;
        _1400 = _1242;
        _1401 = _1241;
        _1402 = _1256;
        _1403 = _1255;
        _1404 = _1254;
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1393;
        _1394 = _1393;
        _1395 = _1393;
        _1396 = _1393;
        _1397 = _1393;
        _1398 = _1393;
        _1399 = _1393;
        _1400 = _1393;
        _1401 = _1393;
        _1402 = _1393;
        _1403 = _1393;
        _1404 = _1393;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1431 = fma(_1091, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1083));
        float _1435 = fma(_1091, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1083));
        float _1439 = fma(_1091, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1083));
        float _1462 = _1083 + _873;
        float _1463 = _1087 + _874;
        float _1464 = _1091 + _875;
        float _1474 = fma(_1464, cbModelParam._m0[30u].z, fma(_1463, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1462)) - _1431;
        float _1475 = fma(_1464, cbModelParam._m0[31u].z, fma(_1463, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1462)) - _1435;
        float _1476 = fma(_1464, cbModelParam._m0[32u].z, fma(_1463, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1462)) - _1439;
        float _1480 = inversesqrt(dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476)));
        float _1493 = ((_1480 * _1474) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1431 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1480 * _1475) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1435 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1495 = ((_1480 * _1476) / cbModelParam._m0[35u].z) + ((((((_1439 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        float _1530 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1497.x + (-0.5));
        float _1532 = _1530 * (_1497.y + (-0.5));
        float _1533 = _1530 * (_1497.z + (-0.5));
        float _1540 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1504.x + (-0.5));
        float _1542 = _1540 * (_1504.y + (-0.5));
        float _1543 = _1540 * (_1504.z + (-0.5));
        float _1550 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1511.x + (-0.5));
        float _1552 = _1550 * (_1511.y + (-0.5));
        float _1553 = _1550 * (_1511.z + (-0.5));
        float _1560 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1518.x + (-0.5));
        float _1562 = _1560 * (_1518.y + (-0.5));
        float _1563 = _1560 * (_1518.z + (-0.5));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = _1531 * 0.5;
        float _1568 = _1541 * 0.5;
        float _1569 = _1551 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_873, _874, _875), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4073 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1594 + 1.0))) + _1599) * _1564;
        float _1609 = _1532 * 0.5;
        float _1610 = _1542 * 0.5;
        float _1611 = _1552 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_873, _874, _875), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4106 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1636 + 1.0))) + _1641) * _1565;
        float _1651 = _1533 * 0.5;
        float _1652 = _1543 * 0.5;
        float _1653 = _1553 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_873, _874, _875), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4139 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1678 + 1.0))) + _1683) * _1566;
        _1700 = _1533;
        _1701 = _1532;
        _1702 = _1531;
        _1703 = _1543;
        _1704 = _1542;
        _1705 = _1541;
        _1706 = _1553;
        _1707 = _1552;
        _1708 = _1551;
        _1709 = _1566;
        _1710 = _1565;
        _1711 = _1564;
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
    }
    else
    {
        _1700 = _1393;
        _1701 = _1393;
        _1702 = _1393;
        _1703 = _1393;
        _1704 = _1393;
        _1705 = _1393;
        _1706 = _1393;
        _1707 = _1393;
        _1708 = _1393;
        _1709 = _1393;
        _1710 = _1393;
        _1711 = _1393;
        _1712 = 0.0;
        _1713 = 0.0;
        _1714 = 0.0;
    }
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1405)) + _1405;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1406)) + _1406;
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1407)) + _1407;
    float _1747 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1724));
    float _1768 = _1030 * 0.5;
    float _1769 = _1031 * 0.5;
    float _1770 = _1032 * 0.5;
    float _1771 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1774 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1777 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1811;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1784 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1392, _1396, _1399, _1402));
        float _1788 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1394, _1397, _1400, _1403));
        float _1792 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1395, _1398, _1401, _1404));
        float _1799 = dot(vec4(cbModelParam._m0[39u]), vec4(_1768, _1769, _1770, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1822;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1813 = dot(vec4(cbModelParam._m0[40u]), vec4(_1768, _1769, _1770, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1826 = (_1822 * cbModelParam._m0[1u].x) + (_1811 * (1.0 - cbModelParam._m0[1u].x));
    float _1836 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _876);
    float _1837 = isnan(_1836) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1836 : min(cbModelParam._m0[25u].z, _1836));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1885 = fma(_1091, cbModelParam._m0[13u].z, fma(_1087, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083)) + cbModelParam._m0[13u].w;
        float _1889 = fma(_1091, cbModelParam._m0[14u].z, fma(_1087, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083)) + cbModelParam._m0[14u].w;
        float _1893 = fma(_1091, cbModelParam._m0[15u].z, fma(_1087, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083)) + cbModelParam._m0[15u].w;
        float _1896 = fma(_1032, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030));
        float _1899 = fma(_1032, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030));
        float _1902 = fma(_1032, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030));
        float _1930;
        if (_1896 > 0.0)
        {
            _1930 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1930 = frontier_phi_14_12_ladder;
        }
        float _2152;
        if (_1899 > 0.0)
        {
            _2152 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2152 = frontier_phi_23_19_ladder;
        }
        float _2398;
        if (_1902 > 0.0)
        {
            _2398 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2398 = frontier_phi_35_30_ladder;
        }
        float _2400 = isnan(_2152) ? _1930 : (isnan(_1930) ? _2152 : min(_1930, _2152));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1896) + _1885;
        float _2406 = (_2401 * _1899) + _1889;
        float _2407 = (_2401 * _1902) + _1893;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2410 = (-1.0) - _2408;
        float _2412 = _2408 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2407 > _2412) || ((_2407 < _2410) || ((_2406 > _2412) || ((_2406 < _2410) || ((_2405 < _2410) || (_2405 > _2412))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2407, cbModelParam._m0[9u].z, fma(_2406, cbModelParam._m0[9u].y, _2405 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2407, cbModelParam._m0[10u].z, fma(_2406, cbModelParam._m0[10u].y, _2405 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2407, cbModelParam._m0[11u].z, fma(_2406, cbModelParam._m0[11u].y, _2405 * cbModelParam._m0[11u].x))), _1837);
            frontier_phi_13_35_ladder = _2531.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2531.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2531.x * cbModelParam._m0[1u].y;
        }
        _1918 = frontier_phi_13_35_ladder_2;
        _1920 = frontier_phi_13_35_ladder_1;
        _1922 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1030, _1031, _1032), _1837);
        _1918 = _1906.x * cbModelParam._m0[1u].y;
        _1920 = _1906.y * cbModelParam._m0[1u].y;
        _1922 = _1906.z * cbModelParam._m0[1u].y;
    }
    float _1926 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _876);
    float _1927 = isnan(_1926) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1926 : min(cbModelParam._m0[25u].w, _1926));
    float _2017;
    float _2019;
    float _2021;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1981 = fma(_1091, cbModelParam._m0[21u].z, fma(_1087, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083)) + cbModelParam._m0[21u].w;
        float _1985 = fma(_1091, cbModelParam._m0[22u].z, fma(_1087, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083)) + cbModelParam._m0[22u].w;
        float _1989 = fma(_1091, cbModelParam._m0[23u].z, fma(_1087, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083)) + cbModelParam._m0[23u].w;
        float _1992 = fma(_1032, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030));
        float _1995 = fma(_1032, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030));
        float _1998 = fma(_1032, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030));
        float _2157;
        if (_1992 > 0.0)
        {
            _2157 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2157 = frontier_phi_25_21_ladder;
        }
        float _2425;
        if (_1995 > 0.0)
        {
            _2425 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2425 = frontier_phi_37_32_ladder;
        }
        float _2630;
        if (_1998 > 0.0)
        {
            _2630 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2630 = frontier_phi_46_43_ladder;
        }
        float _2632 = isnan(_2425) ? _2157 : (isnan(_2157) ? _2425 : min(_2157, _2425));
        float _2633 = isnan(_2630) ? _2632 : (isnan(_2632) ? _2630 : min(_2632, _2630));
        float _2637 = (_2633 * _1992) + _1981;
        float _2638 = (_2633 * _1995) + _1985;
        float _2639 = (_2633 * _1998) + _1989;
        float _2640 = _2633 * 9.9999997473787516355514526367188e-05;
        float _2641 = (-1.0) - _2640;
        float _2643 = _2640 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2639 > _2643) || ((_2639 < _2641) || ((_2638 > _2643) || ((_2638 < _2641) || ((_2637 < _2641) || (_2637 > _2643))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2838 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2639, cbModelParam._m0[17u].z, fma(_2638, cbModelParam._m0[17u].y, _2637 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2639, cbModelParam._m0[18u].z, fma(_2638, cbModelParam._m0[18u].y, _2637 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2639, cbModelParam._m0[19u].z, fma(_2638, cbModelParam._m0[19u].y, _2637 * cbModelParam._m0[19u].x))), _1927);
            frontier_phi_22_46_ladder = _2838.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2838.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2838.x * cbModelParam._m0[1u].z;
        }
        _2017 = frontier_phi_22_46_ladder_2;
        _2019 = frontier_phi_22_46_ladder_1;
        _2021 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2001 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1030, _1031, _1032), _1927);
        _2017 = _2001.x * cbModelParam._m0[1u].z;
        _2019 = _2001.y * cbModelParam._m0[1u].z;
        _2021 = _2001.z * cbModelParam._m0[1u].z;
    }
    float _2033 = ((((1.0 - _1051) * ((_1038 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1051 * _1038)) * _1022;
    float _2034 = _2033 * ((cbModelParam._m0[1u].w * (_2017 - _1918)) + _1918);
    float _2035 = _2033 * ((cbModelParam._m0[1u].w * (_2019 - _1920)) + _1920);
    float _2036 = _2033 * ((cbModelParam._m0[1u].w * (_2021 - _1922)) + _1922);
    float _2039 = fma(_2036, cbSceneParam._m0[89u].z, fma(_2035, cbSceneParam._m0[89u].y, _2034 * cbSceneParam._m0[89u].x));
    float _2042 = fma(_2036, cbSceneParam._m0[90u].z, fma(_2035, cbSceneParam._m0[90u].y, _2034 * cbSceneParam._m0[90u].x));
    float _2045 = fma(_2036, cbSceneParam._m0[91u].z, fma(_2035, cbSceneParam._m0[91u].y, _2034 * cbSceneParam._m0[91u].x));
    vec4 _2053 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_959, _960));
    float _2055 = _2053.w;
    float _2067 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2055);
    float _2068 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2055);
    float _2069 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2055);
    uvec4 _2073 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2075 = _2073.x * 14u;
    uint _2076 = _2075 + 13u;
    float _2083 = _1022 + (-1.0);
    float _2088 = (cbLight._m0[_2076].x * _2083) + 1.0;
    float _2089 = (cbLight._m0[_2076].y * _2083) + 1.0;
    float _2090 = (cbLight._m0[_2076].z * _2083) + 1.0;
    float _2091 = (cbLight._m0[_2076].w * _2083) + 1.0;
    uint _2092 = _2075 + 5u;
    float _2098 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
    uint _2102 = _2075 + 4u;
    float _2111 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
    uint _2115 = _2075 | 1u;
    float _2126 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_873, _874, _875));
    float _2129 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_873, _874, _875));
    float _4275 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _4286 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2134 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * 0.3183098733425140380859375;
    float _2136 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * 0.3183098733425140380859375;
    float _2143 = ((cbLight._m0[_2092].x * _2098) * _2136) + (((cbLight._m0[_2102].x * _2067) * _2111) * _2134);
    float _2144 = ((_2098 * cbLight._m0[_2092].y) * _2136) + (((cbLight._m0[_2102].y * _2068) * _2111) * _2134);
    float _2145 = ((_2098 * cbLight._m0[_2092].z) * _2136) + (((cbLight._m0[_2102].z * _2069) * _2111) * _2134);
    uvec4 _2149 = floatBitsToUint(cbLight._m0[_2075 + 12u]);
    bool _2151 = _2149.x == 0u;
    float _2162;
    float _2164;
    float _2166;
    if (_2151)
    {
        _2162 = _2143;
        _2164 = _2144;
        _2166 = _2145;
    }
    else
    {
        uint _2170 = _2075 + 6u;
        float _2186 = (dot(vec3(cbLight._m0[_2075 + 2u].xyz), vec3(_873, _874, _875)) * 0.5) + 0.5;
        float _2187 = _2186 * _2186;
        float _4297 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2188 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2189 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2162 = (((cbLight._m0[_2170].x * 0.3183098733425140380859375) * _2188) * _2189) + _2143;
        _2164 = (((cbLight._m0[_2170].y * 0.3183098733425140380859375) * _2188) * _2189) + _2144;
        _2166 = (((cbLight._m0[_2170].z * 0.3183098733425140380859375) * _2188) * _2189) + _2145;
    }
    bool _2169 = _2149.y == 0u;
    float _2207;
    float _2209;
    float _2211;
    if (_2169)
    {
        _2207 = _2162;
        _2209 = _2164;
        _2211 = _2166;
    }
    else
    {
        uint _2369 = _2075 + 7u;
        float _2385 = (dot(vec3(cbLight._m0[_2075 + 3u].xyz), vec3(_873, _874, _875)) * 0.5) + 0.5;
        float _2386 = _2385 * _2385;
        float _4313 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2387 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2388 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2207 = (((cbLight._m0[_2369].x * 0.3183098733425140380859375) * _2387) * _2388) + _2162;
        _2209 = (((cbLight._m0[_2369].y * 0.3183098733425140380859375) * _2387) * _2388) + _2164;
        _2211 = (((cbLight._m0[_2369].z * 0.3183098733425140380859375) * _2387) * _2388) + _2166;
    }
    uint _2214 = _2075 + 8u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _876) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_2075].x + _951;
    float _2230 = cbLight._m0[_2075].y + _952;
    float _2231 = cbLight._m0[_2075].z + _953;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2075].xyz));
    float _4329 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _4340 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _2243 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2244 = dot(vec3(_873, _874, _875), vec3(_2236, _2237, _2238));
    float _4351 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2248 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2236, _2237, _2238));
    float _4362 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2252 = _2228 * _2228;
    float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
    float _2267 = (exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2268 = 1.0 - _2228;
    float _2279 = (0.5 / (((_2243 * ((_2242 * _2268) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2268) + _2228) * _2242))) * _2242;
    float _4373 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2281 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
    uint _2295 = _2075 + 9u;
    float _2306 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _876) * 0.949999988079071044921875);
    float _2307 = _2306 * _2306;
    float _2308 = cbLight._m0[_2115].x + _951;
    float _2309 = cbLight._m0[_2115].y + _952;
    float _2310 = cbLight._m0[_2115].z + _953;
    float _2314 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
    float _2315 = _2314 * _2308;
    float _2316 = _2314 * _2309;
    float _2317 = _2314 * _2310;
    float _2318 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2115].xyz));
    float _4384 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2322 = dot(vec3(_873, _874, _875), vec3(_2315, _2316, _2317));
    float _4395 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2326 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2315, _2316, _2317));
    float _4406 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2330 = _2307 * _2307;
    float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
    float _2343 = (exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2344 = 1.0 - _2307;
    float _2354 = (0.5 / (((_2243 * ((_2321 * _2344) + _2307)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2344) + _2307) * _2321))) * _2321;
    float _4417 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
    float _2366 = (((_2343 * cbLight._m0[_2295].x) * _2356) * _2098) + ((((cbLight._m0[_2214].x * _2067) * _2267) * _2281) * _2111);
    float _2367 = (((_2343 * cbLight._m0[_2295].y) * _2356) * _2098) + ((((cbLight._m0[_2214].y * _2068) * _2267) * _2281) * _2111);
    float _2368 = (((_2343 * cbLight._m0[_2295].z) * _2356) * _2098) + ((((cbLight._m0[_2214].z * _2069) * _2267) * _2281) * _2111);
    float _2430;
    float _2432;
    float _2434;
    if (_2151)
    {
        _2430 = _2366;
        _2432 = _2367;
        _2434 = _2368;
    }
    else
    {
        uint _2436 = _2075 + 2u;
        uint _2440 = _2075 + 10u;
        float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _876) * 0.949999988079071044921875);
        float _2455 = _2454 * _2454;
        float _2456 = cbLight._m0[_2436].x + _951;
        float _2457 = cbLight._m0[_2436].y + _952;
        float _2458 = cbLight._m0[_2436].z + _953;
        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
        float _2463 = _2462 * _2456;
        float _2464 = _2462 * _2457;
        float _2465 = _2462 * _2458;
        float _2466 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2436].xyz));
        float _4428 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2470 = dot(vec3(_873, _874, _875), vec3(_2463, _2464, _2465));
        float _4439 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2474 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2463, _2464, _2465));
        float _4450 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2478 = _2455 * _2455;
        float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
        float _2491 = (exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2492 = 1.0 - _2455;
        float _2502 = (0.5 / (((_2243 * ((_2469 * _2492) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2492) + _2455) * _2469))) * _2469;
        float _4461 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2504 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
        float _2505 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2430 = (((_2491 * cbLight._m0[_2440].x) * _2504) * _2505) + _2366;
        _2432 = (((_2491 * cbLight._m0[_2440].y) * _2504) * _2505) + _2367;
        _2434 = (((_2491 * cbLight._m0[_2440].z) * _2504) * _2505) + _2368;
    }
    float _2540;
    float _2542;
    float _2544;
    if (_2169)
    {
        _2540 = _2430;
        _2542 = _2432;
        _2544 = _2434;
    }
    else
    {
        uint _2551 = _2075 + 3u;
        uint _2555 = _2075 + 11u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _876) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _951;
        float _2572 = cbLight._m0[_2551].y + _952;
        float _2573 = cbLight._m0[_2551].z + _953;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2551].xyz));
        float _4477 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2585 = dot(vec3(_873, _874, _875), vec3(_2578, _2579, _2580));
        float _4488 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4499 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2606 = (exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2607 = 1.0 - _2570;
        float _2617 = (0.5 / (((_2243 * ((_2584 * _2607) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2607) + _2570) * _2584))) * _2584;
        float _4510 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2619 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2620 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2540 = (((_2606 * cbLight._m0[_2555].x) * _2619) * _2620) + _2430;
        _2542 = (((_2606 * cbLight._m0[_2555].y) * _2619) * _2620) + _2432;
        _2544 = (((_2606 * cbLight._m0[_2555].z) * _2619) * _2620) + _2434;
    }
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    if (_2073.y == 0u)
    {
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2695;
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2695;
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2695;
        uvec4 _2710 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2711 = _2710.x;
        uint _2722 = uint((float(_2710.y) * floor(float(uint(cbSceneParam._m0[85u].y * _960) / _2711))) + floor(float(uint(cbSceneParam._m0[85u].x * _959) / _2711)));
        float _2732 = (log2(_2698 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2733 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        uint _2736 = uint(isnan(14.0) ? _2733 : (isnan(_2733) ? 14.0 : min(_2733, 14.0)));
        uvec4 _2741 = texelFetch(g_lightClusterGridBuffer, int(((_2736 << 2u) + (_2722 << 6u)) >> 2u));
        uint _2742 = _2741.x;
        uint _2743 = _2710.z;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        if (((((1u << ((_2743 >> 4u) & 15u)) + 4294967295u) & _2742) == 0u) || ((_2743 & 240u) == 0u))
        {
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
        }
        else
        {
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            uint _2993 = 0u;
            uint _3002;
            bool _3003;
            for (;;)
            {
                _3002 = texelFetch(g_lightClassification, int((((_2736 << 5u) + (_2722 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                _3003 = _3002 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3003)
                {
                    frontier_phi_61_pred = _2987;
                    frontier_phi_61_pred_1 = _2992;
                    frontier_phi_61_pred_2 = _2991;
                    frontier_phi_61_pred_3 = _2990;
                    frontier_phi_61_pred_4 = _2989;
                    frontier_phi_61_pred_5 = _2988;
                }
                else
                {
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    uint _3117;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2989;
                    _3114 = _2990;
                    _3115 = _2991;
                    _3116 = _2992;
                    _3117 = _3002;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    for (;;)
                    {
                        uint _3121 = uint(findLSB(_3117)) + (_2993 << 5u);
                        uint _3118 = (_3117 + 4294967295u) & _3117;
                        uint _3123 = _3121 * 48u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3143 = (_3121 * 48u) + 4u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3162 = (_3121 * 48u) + 8u;
                        vec3 _3173 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x));
                        float _3177 = _3137.x - _2696;
                        float _3178 = _3137.y - _2697;
                        float _3179 = _3137.z - _2698;
                        float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                        float _3183 = inversesqrt(_3180);
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3187 = dot(vec3(_978, _981, _984), vec3(_3184, _3185, _3186));
                        float _3192 = 1.0 - (_3180 * _3137.w);
                        float _4536 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3194 = sqrt(_3180) * _3156.w;
                        float _3197 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3187) + _3198;
                        float _3204 = _3194 * _3194;
                        float _3208 = ((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3193) / ((_3204 * 0.699999988079071044921875) + 1.0);
                        float _3212 = (-0.0) - _2696;
                        float _3213 = (-0.0) - _2697;
                        float _3214 = (-0.0) - _2698;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3229 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                        float _3230 = 1.0 - _1038;
                        float _3237 = sqrt(1.0 - ((1.0 - (_3230 * _3230)) * (1.0 - (_3229 * _3229))));
                        float _3238 = _3237 * _3237;
                        float _3239 = _3238 * _3238;
                        float _3240 = _3219 + _3184;
                        float _3241 = _3220 + _3185;
                        float _3242 = _3221 + _3186;
                        float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                        float _3250 = dot(vec3(_978, _981, _984), vec3(_3219, _3220, _3221));
                        float _4552 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3253 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3254 = dot(vec3(_978, _981, _984), vec3(_3246 * _3240, _3246 * _3241, _3246 * _3242));
                        float _4563 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3257 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3261 = ((_3257 * _3257) * (_3239 + (-1.0))) + 1.0;
                        float _3262 = _3197 * _3238;
                        float _3263 = _3262 * _3262;
                        float _3266 = ((1.0 - _3263) * _3187) + _3263;
                        float _4574 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3267 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3268 = 1.0 - _3238;
                        float _3278 = (0.5 / (((_3267 * ((_3253 * _3268) + _3238)) + 9.9999999392252902907785028219223e-09) + (((_3267 * _3268) + _3238) * _3253))) * _3267;
                        float _4585 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3289 = (((_3239 * 3.1415927410125732421875) * (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) / ((_3261 * _3261) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125))) * _3193;
                        _3046 = (_3208 * _3156.x) + _3114;
                        _3047 = (_3208 * _3156.y) + _3115;
                        _3048 = (_3208 * _3156.z) + _3116;
                        _3043 = (_3289 * _3173.x) + _3111;
                        _3044 = (_3289 * _3173.y) + _3112;
                        _3045 = (_3289 * _3173.z) + _3113;
                        if (_3118 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3045;
                            _3114 = _3046;
                            _3115 = _3047;
                            _3116 = _3048;
                            _3117 = _3118;
                        }
                    }
                    frontier_phi_61_pred = _3043;
                    frontier_phi_61_pred_1 = _3048;
                    frontier_phi_61_pred_2 = _3047;
                    frontier_phi_61_pred_3 = _3046;
                    frontier_phi_61_pred_4 = _3045;
                    frontier_phi_61_pred_5 = _3044;
                }
                _2844 = frontier_phi_61_pred;
                _2854 = frontier_phi_61_pred_1;
                _2852 = frontier_phi_61_pred_2;
                _2850 = frontier_phi_61_pred_3;
                _2848 = frontier_phi_61_pred_4;
                _2846 = frontier_phi_61_pred_5;
                uint _2994 = _2993 + 1u;
                if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2987 = _2844;
                    _2988 = _2846;
                    _2989 = _2848;
                    _2990 = _2850;
                    _2991 = _2852;
                    _2992 = _2854;
                    _2993 = _2994;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
        }
        uvec4 _2857 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2858 = _2857.z;
        uint _2860 = (_2858 >> 8u) & 15u;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((4294967295u << _2860) & _2742) == 0u)
        {
            _2955 = _2843;
            _2957 = _2845;
            _2959 = _2847;
            _2961 = _2849;
            _2963 = _2851;
            _2965 = _2853;
        }
        else
        {
            float _2980 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
            float _2981 = _2980 * _2696;
            float _2982 = _2980 * _2697;
            float _2983 = _2980 * _2698;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2860 < ((_2858 >> 12u) & 15u))
            {
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _3094 = _2843;
                float _3095 = _2845;
                float _3096 = _2847;
                float _3097 = _2849;
                float _3098 = _2851;
                float _3099 = _2853;
                uint _3100 = _2860;
                uint _3109;
                bool _3110;
                for (;;)
                {
                    _3109 = texelFetch(g_lightClassification, int((((_2736 << 5u) + (_2722 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                    _3110 = _3109 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3110)
                    {
                        frontier_phi_67_pred = _3097;
                        frontier_phi_67_pred_1 = _3098;
                        frontier_phi_67_pred_2 = _3099;
                        frontier_phi_67_pred_3 = _3096;
                        frontier_phi_67_pred_4 = _3095;
                        frontier_phi_67_pred_5 = _3094;
                    }
                    else
                    {
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3307 = _3094;
                        float _3308 = _3095;
                        float _3309 = _3096;
                        float _3310 = _3097;
                        float _3311 = _3098;
                        float _3312 = _3099;
                        uint _3313 = _3109;
                        uint _3314;
                        vec4 _3339;
                        float _3340;
                        vec4 _3355;
                        vec3 _3367;
                        vec4 _3382;
                        vec4 _3397;
                        float _3443;
                        bool _3444;
                        for (;;)
                        {
                            uint _3324 = ((_3100 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3313));
                            _3314 = (_3313 + 4294967295u) & _3313;
                            uint _3326 = _3324 * 40u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            _3340 = _3339.w;
                            uint _3342 = (_3324 * 40u) + 4u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3357 = (_3324 * 40u) + 8u;
                            _3367 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x));
                            uint _3369 = (_3324 * 40u) + 16u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3324 * 40u) + 20u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3324 * 40u) + 24u;
                            vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3418 = (_3324 * 40u) + 28u;
                            vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            _3443 = fma(_2698, _3431.z, fma(_2697, _3431.y, _3431.x * _2696)) + _3431.w;
                            _3444 = !((fma(_2698, _3412.z, fma(_2697, _3412.y, _3412.x * _2696)) + _3412.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3444)
                            {
                                float _3471 = _3339.x - _2696;
                                float _3472 = _3339.y - _2697;
                                float _3473 = _3339.z - _2698;
                                float _3474 = dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473));
                                float _3477 = inversesqrt(_3474);
                                float _3478 = _3477 * _3471;
                                float _3479 = _3477 * _3472;
                                float _3480 = _3477 * _3473;
                                float _3484 = 1.0 - (_3474 / (_3340 * _3340));
                                float _4596 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3489 = sqrt(_3474) * _3355.w;
                                float _3491 = 1.39999997615814208984375 / (_3489 + 1.39999997615814208984375);
                                float _3492 = _3491 * _3491;
                                float _3495 = ((1.0 - _3492) * dot(vec3(_3478, _3479, _3480), vec3(_978, _981, _984))) + _3492;
                                float _3498 = _3489 * _3489;
                                float _3502 = (fma(_2698, _3382.z, fma(_2697, _3382.y, _3382.x * _2696)) + _3382.w) / _3443;
                                float _3503 = (fma(_2698, _3397.z, fma(_2697, _3397.y, _3397.x * _2696)) + _3397.w) / _3443;
                                float _3507 = 1.0 - dot(vec2(_3502, _3503), vec2(_3502, _3503));
                                float _4612 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3509 = _3508 * (((isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0))) * _3485) / ((_3498 * 0.699999988079071044921875) + 1.0));
                                float _3521 = exp2(log2(1.0 / ((_3498 * 3.5) + 5.0)) * 0.25);
                                float _3522 = 1.0 - _1038;
                                float _3529 = sqrt(1.0 - ((1.0 - (_3522 * _3522)) * (1.0 - (_3521 * _3521))));
                                float _3530 = _3529 * _3529;
                                float _3531 = _3530 * _3530;
                                float _3532 = _3478 - _2981;
                                float _3533 = _3479 - _2982;
                                float _3534 = _3480 - _2983;
                                float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                                float _3542 = dot(vec3(_978, _981, _984), vec3((-0.0) - _2981, (-0.0) - _2982, (-0.0) - _2983));
                                float _4623 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3546 = dot(vec3(_978, _981, _984), vec3(_3538 * _3532, _3538 * _3533, _3538 * _3534));
                                float _4634 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3549 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3553 = ((_3549 * _3549) * (_3531 + (-1.0))) + 1.0;
                                float _3554 = _3491 * _3530;
                                float _3555 = _3554 * _3554;
                                float _3561 = ((1.0 - _3555) * dot(vec3(_978, _981, _984), vec3(_3478, _3479, _3480))) + _3555;
                                float _4645 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3563 = 1.0 - _3530;
                                float _3573 = (0.5 / (((_3562 * ((_3545 * _3563) + _3530)) + 9.9999999392252902907785028219223e-09) + (((_3562 * _3563) + _3530) * _3545))) * _3562;
                                float _4656 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3583 = (_3508 * _3485) * (((_3531 * 3.1415927410125732421875) * (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) / ((_3553 * _3553) * ((_3498 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3583 * _3367.x;
                                frontier_phi_73_pred_1 = _3583 * _3367.y;
                                frontier_phi_73_pred_2 = _3509 * _3355.z;
                                frontier_phi_73_pred_3 = _3509 * _3355.y;
                                frontier_phi_73_pred_4 = _3509 * _3355.x;
                                frontier_phi_73_pred_5 = _3583 * _3367.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3587 = frontier_phi_73_pred;
                            _3588 = frontier_phi_73_pred_1;
                            _3592 = frontier_phi_73_pred_2;
                            _3591 = frontier_phi_73_pred_3;
                            _3590 = frontier_phi_73_pred_4;
                            _3589 = frontier_phi_73_pred_5;
                            _3297 = _3590 + _3310;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3296 = _3589 + _3309;
                            if (_3314 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3314;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3297;
                        frontier_phi_67_pred_1 = _3298;
                        frontier_phi_67_pred_2 = _3299;
                        frontier_phi_67_pred_3 = _3296;
                        frontier_phi_67_pred_4 = _3295;
                        frontier_phi_67_pred_5 = _3294;
                    }
                    _2962 = frontier_phi_67_pred;
                    _2964 = frontier_phi_67_pred_1;
                    _2966 = frontier_phi_67_pred_2;
                    _2960 = frontier_phi_67_pred_3;
                    _2958 = frontier_phi_67_pred_4;
                    _2956 = frontier_phi_67_pred_5;
                    uint _3101 = _3100 + 1u;
                    if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3094 = _2956;
                        _3095 = _2958;
                        _3096 = _2960;
                        _3097 = _2962;
                        _3098 = _2964;
                        _3099 = _2966;
                        _3100 = _3101;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2964;
                frontier_phi_55_56_ladder_1 = _2966;
                frontier_phi_55_56_ladder_2 = _2962;
                frontier_phi_55_56_ladder_3 = _2960;
                frontier_phi_55_56_ladder_4 = _2958;
                frontier_phi_55_56_ladder_5 = _2956;
            }
            else
            {
                frontier_phi_55_56_ladder = _2851;
                frontier_phi_55_56_ladder_1 = _2853;
                frontier_phi_55_56_ladder_2 = _2849;
                frontier_phi_55_56_ladder_3 = _2847;
                frontier_phi_55_56_ladder_4 = _2845;
                frontier_phi_55_56_ladder_5 = _2843;
            }
            _2955 = frontier_phi_55_56_ladder_5;
            _2957 = frontier_phi_55_56_ladder_4;
            _2959 = frontier_phi_55_56_ladder_3;
            _2961 = frontier_phi_55_56_ladder_2;
            _2963 = frontier_phi_55_56_ladder;
            _2965 = frontier_phi_55_56_ladder_1;
        }
        float _2970 = isnan(1.0) ? _1022 : (isnan(_1022) ? 1.0 : min(_1022, 1.0));
        _2755 = (_2970 * _2961) + _2207;
        _2757 = (_2970 * _2963) + _2209;
        _2759 = (_2970 * _2965) + _2211;
        _2761 = ((_2955 * 0.039999999105930328369140625) * _2970) + _2540;
        _2763 = ((_2957 * 0.039999999105930328369140625) * _2970) + _2542;
        _2765 = ((_2959 * 0.039999999105930328369140625) * _2970) + _2544;
    }
    else
    {
        _2755 = _2207;
        _2757 = _2209;
        _2759 = _2211;
        _2761 = _2540;
        _2763 = _2542;
        _2765 = _2544;
    }
    float _4672 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4683 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _4694 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    uint _2785 = _253 + 6u;
    float _2793 = _959 / cbSceneParam._m0[86u].x;
    float _2794 = _960 / cbSceneParam._m0[86u].y;
    vec4 _2808 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2793, _2794, (log2((isnan(cbSceneParam._m0[77u].w) ? _894 : (isnan(_894) ? cbSceneParam._m0[77u].w : min(_894, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2810 = _2808.x;
    float _2811 = _2808.y;
    float _2812 = _2808.z;
    float _2813 = _2808.w;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    if (_894 > cbSceneParam._m0[78u].w)
    {
        float _2868 = isnan(_894) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _894 : min(cbSceneParam._m0[80u].w, _894));
        float _2869 = _2868 / _894;
        float _2880 = _2869 * _944;
        float _2881 = _945 * _2869;
        float _2882 = (-0.0) - _2881;
        float _2883 = _2869 * _946;
        float _2885 = (cbSceneParam._m0[77u].w * _2882) / _2868;
        float _2886 = _2885 + cbSceneParam._m0[79u].w;
        float _2887 = cbSceneParam._m0[79u].w - _2881;
        float _2893 = sqrt(((_2880 * _2880) + (_2881 * _2881)) + (_2883 * _2883));
        float _2896 = (1.0 - (cbSceneParam._m0[77u].w / _2868)) * _2893;
        float _2901 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2903 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3056;
        if (abs((_2882 - _2885) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3056 = ((((_2886 > 0.0) ? exp2(_2901 * _2886) : (2.0 - exp2(_2903 * _2886))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2896;
        }
        else
        {
            float _3016 = 1.0 / cbSceneParam._m0[80u].x;
            float _3017 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : max(_2886, _2887));
            float _3018 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : min(_2886, _2887));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            _3056 = ((abs(_2893 / _2882) * cbSceneParam._m0[80u].y) * ((((_3027 - _3028) * 2.0) - ((exp2(_2901 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0)))) - exp2(_2901 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))))) * _3016)) - ((exp2(_2903 * _3027) - exp2(_2903 * _3028)) * _3016))) + (_2896 * cbSceneParam._m0[80u].z);
        }
        vec4 _3058 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2793, _2794, 1.0), 0.0);
        float _3067 = exp2((_3056 * (-1.44269502162933349609375)) * (1.0 - _3058.w));
        float _3068 = log2(_3067);
        float _3084 = log2(_2813);
        _2905 = (exp2(_3084 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].x)) * _3058.x) / cbSceneParam._m0[78u].x)) + _2810;
        _2907 = (exp2(_3084 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].y)) * _3058.y) / cbSceneParam._m0[78u].y)) + _2811;
        _2909 = (exp2(_3084 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].z)) * _3058.z) / cbSceneParam._m0[78u].z)) + _2812;
        _2911 = _3067 * _2813;
    }
    else
    {
        _2905 = _2810;
        _2907 = _2811;
        _2909 = _2812;
        _2911 = _2813;
    }
    float _2923 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2924 = _2923 == 3.0;
    float _2925 = log2(_2911);
    float _2932 = exp2(_2925 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2755 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1022))) + ((_2761 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1826)) * cbPerFrame._m0[3u].x));
    float _2933 = exp2(_2925 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2757 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1022))) + ((_2763 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1826)) * cbPerFrame._m0[3u].x));
    float _2934 = exp2(_2925 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2759 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1022))) + ((_2765 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1826)) * cbPerFrame._m0[3u].x));
    float _2943 = (_2923 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2943 * (_2924 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2905)));
    SV_Target.y = _2943 * (_2924 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2907)));
    SV_Target.z = _2943 * (_2924 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2909)));
    SV_Target.w = cbInstanceData._m0[_2785].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2785].w;
}


