#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1115;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].z) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3705 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _395 = (_388 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _396 = (_388 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _397 = (_388 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _415 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _436 = _432.z;
    float _445 = ((_415.z - _436) * _388) + _436;
    float _448 = ((((_415.x - _434) * _388) + _434) * 2.0) + (-1.0);
    float _450 = ((((_415.y - _435) * _388) + _435) * 2.0) + (-1.0);
    float _451 = dot(vec2(_448, _450), vec2(_448, _450));
    float _3716 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _456 = sqrt(1.0 - (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _497 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _499 = _497.x;
    float _500 = 1.0 - _499;
    float _513 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_499 - _500) * cbMtdParam._m0[24u].w) + _500) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3727 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _521 = (_514 * (cbMtdParam._m0[17u].x - _395)) + _395;
    float _522 = (_514 * (cbMtdParam._m0[17u].y - _396)) + _396;
    float _523 = (_514 * (cbMtdParam._m0[17u].z - _397)) + _397;
    float _527 = (cbMtdParam._m0[19u].w * (_472.z - _445)) + _445;
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _547 = (_540.x * 2.0) + (-1.0);
    float _548 = (_540.y * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3738 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _557 = (_514 * (_540.z - _527)) + _527;
    float _560 = (((_472.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _448;
    float _561 = (((_472.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _450;
    float _573 = (((_547 - _560) + (cbMtdParam._m0[21u].x * _560)) * _514) + _560;
    float _574 = (((_548 - _561) + (cbMtdParam._m0[21u].x * _561)) * _514) + _561;
    float _575 = (_514 * (sqrt(1.0 - (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) - _456)) + _456;
    float _579 = cbMtdParam._m0[22u].x + _472.w;
    float _582 = fma(_575, _221 * NORMAL.x, fma(_574, _228 * TANGENT.x, (_214 * _206) * _573));
    float _585 = fma(_575, _221 * NORMAL.y, fma(_574, _228 * TANGENT.y, (_214 * _207) * _573));
    float _588 = fma(_575, _221 * NORMAL.z, fma(_574, _228 * TANGENT.z, (_214 * _208) * _573));
    float _592 = inversesqrt(dot(vec3(_582, _585, _588), vec3(_582, _585, _588)));
    float _593 = _592 * _582;
    float _594 = _592 * _585;
    float _595 = _592 * _588;
    float _3749 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _596 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3771 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3782 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3793 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _614 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _666 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _656);
    float _667 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _656);
    float _668 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _656);
    float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
    float _673 = _666 * _672;
    float _674 = _667 * _672;
    float _675 = _668 * _672;
    float _681 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _682 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _700 = fma(_595, cbSceneParam._m0[5u].z, fma(_594, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _593));
    float _703 = fma(_595, cbSceneParam._m0[6u].z, fma(_594, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _593));
    float _706 = fma(_595, cbSceneParam._m0[7u].z, fma(_594, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _593));
    uint _720 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _726 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * cbInstanceData._m0[_720].x;
    float _727 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_720].y;
    float _728 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_720].z;
    float _3804 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    vec4 _740 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _681, cbSceneParam._m0[86u].y * _682));
    float _744 = ((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * TEXCOORD_5.w) * _740.x;
    float _745 = dot(vec3(_593, _594, _595), vec3(_673, _674, _675));
    float _748 = _745 * 2.0;
    float _752 = (_748 * _593) - _673;
    float _753 = (_748 * _594) - _674;
    float _754 = (_748 * _595) - _675;
    float _758 = abs(dot(vec3(_673, _674, _675), vec3(_593, _594, _595)));
    float _3837 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _760 = sqrt(_596);
    float _773 = exp2((_760 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_760 * 3.0));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1114;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _839 = fma(_813, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805));
        float _843 = fma(_813, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805));
        float _847 = fma(_813, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805));
        float _872 = _805 + _593;
        float _873 = _809 + _594;
        float _874 = _813 + _595;
        float _884 = fma(_874, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872)) - _839;
        float _885 = fma(_874, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872)) - _843;
        float _886 = fma(_874, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872)) - _847;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_839 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_843 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[34u].z) + ((((((_847 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _942 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_908.x + (-0.5));
        float _944 = _942 * (_908.y + (-0.5));
        float _945 = _942 * (_908.z + (-0.5));
        float _952 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_915.x + (-0.5));
        float _954 = _952 * (_915.y + (-0.5));
        float _955 = _952 * (_915.z + (-0.5));
        float _962 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_922.x + (-0.5));
        float _964 = _962 * (_922.y + (-0.5));
        float _965 = _962 * (_922.z + (-0.5));
        float _972 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_929.x + (-0.5));
        float _974 = _972 * (_929.y + (-0.5));
        float _975 = _972 * (_929.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _996 = (dot(vec3(_593, _594, _595), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1006 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3885 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1008 + 1.0))) + _1013) * _976;
        float _1023 = _944 * 0.5;
        float _1024 = _954 * 0.5;
        float _1025 = _964 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_593, _594, _595), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3918 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1050 + 1.0))) + _1055) * _977;
        float _1065 = _945 * 0.5;
        float _1066 = _955 * 0.5;
        float _1067 = _965 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_593, _594, _595), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3951 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1092 + 1.0))) + _1097) * _978;
        _1114 = _945;
        _1116 = _944;
        _1117 = _943;
        _1118 = _955;
        _1119 = _954;
        _1120 = _953;
        _1121 = _965;
        _1122 = _964;
        _1123 = _963;
        _1124 = _978;
        _1125 = _977;
        _1126 = _976;
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = _1115;
        _1116 = _1115;
        _1117 = _1115;
        _1118 = _1115;
        _1119 = _1115;
        _1120 = _1115;
        _1121 = _1115;
        _1122 = _1115;
        _1123 = _1115;
        _1124 = _1115;
        _1125 = _1115;
        _1126 = _1115;
        _1127 = 0.0;
        _1128 = 0.0;
        _1129 = 0.0;
    }
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1154 = fma(_813, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805));
        float _1158 = fma(_813, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805));
        float _1162 = fma(_813, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805));
        float _1185 = _805 + _593;
        float _1186 = _809 + _594;
        float _1187 = _813 + _595;
        float _1197 = fma(_1187, cbModelParam._m0[30u].z, fma(_1186, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1185)) - _1154;
        float _1198 = fma(_1187, cbModelParam._m0[31u].z, fma(_1186, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1185)) - _1158;
        float _1199 = fma(_1187, cbModelParam._m0[32u].z, fma(_1186, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1185)) - _1162;
        float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
        float _1216 = ((_1203 * _1197) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1154 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1203 * _1198) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1158 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1203 * _1199) / cbModelParam._m0[35u].z) + ((((((_1162 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        float _1253 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1220.x + (-0.5));
        float _1255 = _1253 * (_1220.y + (-0.5));
        float _1256 = _1253 * (_1220.z + (-0.5));
        float _1263 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1227.x + (-0.5));
        float _1265 = _1263 * (_1227.y + (-0.5));
        float _1266 = _1263 * (_1227.z + (-0.5));
        float _1273 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1234.x + (-0.5));
        float _1275 = _1273 * (_1234.y + (-0.5));
        float _1276 = _1273 * (_1234.z + (-0.5));
        float _1283 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1241.x + (-0.5));
        float _1285 = _1283 * (_1241.y + (-0.5));
        float _1286 = _1283 * (_1241.z + (-0.5));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = _1254 * 0.5;
        float _1291 = _1264 * 0.5;
        float _1292 = _1274 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_593, _594, _595), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4014 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1317 + 1.0))) + _1322) * _1287;
        float _1332 = _1255 * 0.5;
        float _1333 = _1265 * 0.5;
        float _1334 = _1275 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_593, _594, _595), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4047 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1359 + 1.0))) + _1364) * _1288;
        float _1374 = _1256 * 0.5;
        float _1375 = _1266 * 0.5;
        float _1376 = _1276 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_593, _594, _595), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4080 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1401 + 1.0))) + _1406) * _1289;
        _1423 = _1256;
        _1424 = _1255;
        _1425 = _1254;
        _1426 = _1266;
        _1427 = _1265;
        _1428 = _1264;
        _1429 = _1276;
        _1430 = _1275;
        _1431 = _1274;
        _1432 = _1289;
        _1433 = _1288;
        _1434 = _1287;
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
    }
    else
    {
        _1423 = _1115;
        _1424 = _1115;
        _1425 = _1115;
        _1426 = _1115;
        _1427 = _1115;
        _1428 = _1115;
        _1429 = _1115;
        _1430 = _1115;
        _1431 = _1115;
        _1432 = _1115;
        _1433 = _1115;
        _1434 = _1115;
        _1435 = 0.0;
        _1436 = 0.0;
        _1437 = 0.0;
    }
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1127)) + _1127;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1128)) + _1128;
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1129)) + _1129;
    float _1470 = fma(_1449, cbSceneParam._m0[89u].z, fma(_1448, cbSceneParam._m0[89u].y, _1447 * cbSceneParam._m0[89u].x));
    float _1473 = fma(_1449, cbSceneParam._m0[90u].z, fma(_1448, cbSceneParam._m0[90u].y, _1447 * cbSceneParam._m0[90u].x));
    float _1476 = fma(_1449, cbSceneParam._m0[91u].z, fma(_1448, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1447));
    float _1491 = _752 * 0.5;
    float _1492 = _753 * 0.5;
    float _1493 = _754 * 0.5;
    float _1494 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1497 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1500 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1534;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1507 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1114, _1118, _1121, _1124));
        float _1511 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1515 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1522 = dot(vec4(cbModelParam._m0[39u]), vec4(_1491, _1492, _1493, 1.0));
        _1534 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1522) ? 0.0 : (isnan(0.0) ? _1522 : max(0.0, _1522))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1534 = 1.0;
    }
    float _1545;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1536 = dot(vec4(cbModelParam._m0[40u]), vec4(_1491, _1492, _1493, 1.0));
        _1545 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1545 = 1.0;
    }
    float _1549 = (_1545 * cbModelParam._m0[1u].x) + (_1534 * (1.0 - cbModelParam._m0[1u].x));
    float _1559 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _596);
    float _1560 = isnan(_1559) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1559 : min(cbModelParam._m0[25u].z, _1559));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1608 = fma(_813, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805)) + cbModelParam._m0[13u].w;
        float _1612 = fma(_813, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805)) + cbModelParam._m0[14u].w;
        float _1616 = fma(_813, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805)) + cbModelParam._m0[15u].w;
        float _1619 = fma(_754, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752));
        float _1622 = fma(_754, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752));
        float _1625 = fma(_754, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752));
        float _1653;
        if (_1619 > 0.0)
        {
            _1653 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1653 = frontier_phi_14_12_ladder;
        }
        float _1823;
        if (_1622 > 0.0)
        {
            _1823 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1823 = frontier_phi_23_19_ladder;
        }
        float _2118;
        if (_1625 > 0.0)
        {
            _2118 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2118 = frontier_phi_35_30_ladder;
        }
        float _2120 = isnan(_1823) ? _1653 : (isnan(_1653) ? _1823 : min(_1653, _1823));
        float _2121 = isnan(_2118) ? _2120 : (isnan(_2120) ? _2118 : min(_2120, _2118));
        float _2125 = (_2121 * _1619) + _1608;
        float _2126 = (_2121 * _1622) + _1612;
        float _2127 = (_2121 * _1625) + _1616;
        float _2128 = _2121 * 9.9999997473787516355514526367188e-05;
        float _2130 = (-1.0) - _2128;
        float _2132 = _2128 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2127 > _2132) || ((_2127 < _2130) || ((_2126 > _2132) || ((_2126 < _2130) || ((_2125 < _2130) || (_2125 > _2132))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2272 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2127, cbModelParam._m0[9u].z, fma(_2126, cbModelParam._m0[9u].y, _2125 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2127, cbModelParam._m0[10u].z, fma(_2126, cbModelParam._m0[10u].y, _2125 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2127, cbModelParam._m0[11u].z, fma(_2126, cbModelParam._m0[11u].y, _2125 * cbModelParam._m0[11u].x))), _1560);
            frontier_phi_13_35_ladder = _2272.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2272.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2272.x * cbModelParam._m0[1u].y;
        }
        _1641 = frontier_phi_13_35_ladder_2;
        _1643 = frontier_phi_13_35_ladder_1;
        _1645 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_752, _753, _754), _1560);
        _1641 = _1629.x * cbModelParam._m0[1u].y;
        _1643 = _1629.y * cbModelParam._m0[1u].y;
        _1645 = _1629.z * cbModelParam._m0[1u].y;
    }
    float _1649 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _596);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1649 : min(cbModelParam._m0[25u].w, _1649));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1704 = fma(_813, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805)) + cbModelParam._m0[21u].w;
        float _1708 = fma(_813, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805)) + cbModelParam._m0[22u].w;
        float _1712 = fma(_813, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805)) + cbModelParam._m0[23u].w;
        float _1715 = fma(_754, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752));
        float _1718 = fma(_754, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752));
        float _1721 = fma(_754, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752));
        float _1828;
        if (_1715 > 0.0)
        {
            _1828 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1828 = frontier_phi_25_21_ladder;
        }
        float _2145;
        if (_1718 > 0.0)
        {
            _2145 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2145 = frontier_phi_37_32_ladder;
        }
        float _2472;
        if (_1721 > 0.0)
        {
            _2472 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2472 = frontier_phi_47_44_ladder;
        }
        float _2474 = isnan(_2145) ? _1828 : (isnan(_1828) ? _2145 : min(_1828, _2145));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1715) + _1704;
        float _2480 = (_2475 * _1718) + _1708;
        float _2481 = (_2475 * _1721) + _1712;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2482;
        float _2485 = _2482 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2481 > _2485) || ((_2481 < _2483) || ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 < _2483) || (_2479 > _2485))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2599 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2481, cbModelParam._m0[17u].z, fma(_2480, cbModelParam._m0[17u].y, _2479 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2481, cbModelParam._m0[18u].z, fma(_2480, cbModelParam._m0[18u].y, _2479 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2481, cbModelParam._m0[19u].z, fma(_2480, cbModelParam._m0[19u].y, _2479 * cbModelParam._m0[19u].x))), _1650);
            frontier_phi_22_47_ladder = _2599.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2599.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2599.x * cbModelParam._m0[1u].z;
        }
        _1740 = frontier_phi_22_47_ladder_2;
        _1742 = frontier_phi_22_47_ladder_1;
        _1744 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_752, _753, _754), _1650);
        _1740 = _1724.x * cbModelParam._m0[1u].z;
        _1742 = _1724.y * cbModelParam._m0[1u].z;
        _1744 = _1724.z * cbModelParam._m0[1u].z;
    }
    float _1756 = ((((1.0 - _773) * ((_760 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_773 * _760)) * _744;
    float _1757 = _1756 * ((cbModelParam._m0[1u].w * (_1740 - _1641)) + _1641);
    float _1758 = _1756 * ((cbModelParam._m0[1u].w * (_1742 - _1643)) + _1643);
    float _1759 = _1756 * ((cbModelParam._m0[1u].w * (_1744 - _1645)) + _1645);
    float _1762 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1765 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1768 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, _1757 * cbSceneParam._m0[91u].x));
    float _1802 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1806 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1810 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1814 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1815 = _1802 / _1814;
    float _1816 = _1806 / _1814;
    float _1817 = _1810 / _1814;
    float _1964;
    float _1965;
    float _1966;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1844 = ((uint(_1817 > cbSceneParam._m0[59u].y) + uint(_1817 > cbSceneParam._m0[59u].x)) + uint(_1817 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1845 = _1844 + 43u;
        uint _1853 = _1844 + 44u;
        uint _1861 = _1844 + 45u;
        uint _1869 = _1844 + 46u;
        float _1880 = fma(_1814, cbSceneParam._m0[_1845].w, fma(_1810, cbSceneParam._m0[_1845].z, fma(_1806, cbSceneParam._m0[_1845].y, _1802 * cbSceneParam._m0[_1845].x)));
        float _1884 = fma(_1814, cbSceneParam._m0[_1853].w, fma(_1810, cbSceneParam._m0[_1853].z, fma(_1806, cbSceneParam._m0[_1853].y, _1802 * cbSceneParam._m0[_1853].x)));
        float _1892 = fma(_1814, cbSceneParam._m0[_1869].w, fma(_1810, cbSceneParam._m0[_1869].z, fma(_1806, cbSceneParam._m0[_1869].y, _1802 * cbSceneParam._m0[_1869].x)));
        float _1897 = cbSceneParam._m0[33u].z * _1892;
        float _1899 = cbSceneParam._m0[33u].w * _1892;
        float _1902 = fma(_1814, cbSceneParam._m0[_1861].w, fma(_1810, cbSceneParam._m0[_1861].z, fma(_1806, cbSceneParam._m0[_1861].y, _1802 * cbSceneParam._m0[_1861].x))) / _1892;
        float _1950 = (cbSceneParam._m0[33u].x - sqrt(((_1816 * _1816) + (_1815 * _1815)) + (_1817 * _1817))) * cbSceneParam._m0[33u].y;
        float _4206 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1957 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1897 + _1880) / _1892, (_1899 + _1884) / _1892), _1902), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1899 + _1880) / _1892, (_1884 - _1897) / _1892), _1902), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1880 - _1897) / _1892, (_1884 - _1899) / _1892), _1902), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1880 - _1899) / _1892, (_1897 + _1884) / _1892), _1902), 0.0)).x), vec4(0.25)));
        _1964 = 1.0 - (_1957 * cbSceneParam._m0[34u].x);
        _1965 = 1.0 - (_1957 * cbSceneParam._m0[34u].y);
        _1966 = 1.0 - (_1957 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1964 = 1.0;
        _1965 = 1.0;
        _1966 = 1.0;
    }
    float _2030;
    float _2032;
    float _2034;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2018 = fma(_1814, cbSceneParam._m0[63u].w, fma(_1810, cbSceneParam._m0[63u].z, fma(_1806, cbSceneParam._m0[63u].y, _1802 * cbSceneParam._m0[63u].x)));
        float _2019 = fma(_1814, cbSceneParam._m0[60u].w, fma(_1810, cbSceneParam._m0[60u].z, fma(_1806, cbSceneParam._m0[60u].y, _1802 * cbSceneParam._m0[60u].x))) / _2018;
        float _2020 = fma(_1814, cbSceneParam._m0[61u].w, fma(_1810, cbSceneParam._m0[61u].z, fma(_1806, cbSceneParam._m0[61u].y, _1802 * cbSceneParam._m0[61u].x))) / _2018;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2019 >= cbSceneParam._m0[64u].x) && (_2020 >= cbSceneParam._m0[64u].y)) && (_2019 <= cbSceneParam._m0[64u].z)) && (_2020 <= cbSceneParam._m0[64u].w))
        {
            float _2158 = fma(_1814, cbSceneParam._m0[62u].w, fma(_1810, cbSceneParam._m0[62u].z, fma(_1806, cbSceneParam._m0[62u].y, _1802 * cbSceneParam._m0[62u].x))) / _2018;
            float _2162 = isnan(cbSceneParam._m0[41u].w) ? _2158 : (isnan(_2158) ? cbSceneParam._m0[41u].w : max(_2158, cbSceneParam._m0[41u].w));
            float _2205 = (cbSceneParam._m0[33u].x - sqrt(((_1816 * _1816) + (_1815 * _1815)) + (_1817 * _1817))) * cbSceneParam._m0[33u].y;
            float _4222 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
            float _2212 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2019, cbSceneParam._m0[33u].w + _2020), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2019, _2020 - cbSceneParam._m0[33u].z), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2019 - cbSceneParam._m0[33u].z, _2020 - cbSceneParam._m0[33u].w), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2019 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2020), _2162), 0.0)).x), vec4(0.25)));
            float _2216 = 1.0 - (_2212 * cbSceneParam._m0[34u].x);
            float _2217 = 1.0 - (_2212 * cbSceneParam._m0[34u].y);
            float _2218 = 1.0 - (_2212 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2218) ? _1966 : (isnan(_1966) ? _2218 : min(_1966, _2218));
            frontier_phi_34_33_ladder_1 = isnan(_2217) ? _1965 : (isnan(_1965) ? _2217 : min(_1965, _2217));
            frontier_phi_34_33_ladder_2 = isnan(_2216) ? _1964 : (isnan(_1964) ? _2216 : min(_1964, _2216));
        }
        else
        {
            frontier_phi_34_33_ladder = _1966;
            frontier_phi_34_33_ladder_1 = _1965;
            frontier_phi_34_33_ladder_2 = _1964;
        }
        _2030 = frontier_phi_34_33_ladder_2;
        _2032 = frontier_phi_34_33_ladder_1;
        _2034 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2030 = _1964;
        _2032 = _1965;
        _2034 = _1966;
    }
    uvec4 _2039 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _2041 = _2039.x * 14u;
    uint _2042 = _2041 + 13u;
    float _2049 = _744 + (-1.0);
    float _2054 = (cbLight._m0[_2042].x * _2049) + 1.0;
    float _2055 = (cbLight._m0[_2042].y * _2049) + 1.0;
    float _2056 = (cbLight._m0[_2042].z * _2049) + 1.0;
    float _2057 = (cbLight._m0[_2042].w * _2049) + 1.0;
    uint _2058 = _2041 + 5u;
    float _2064 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2068 = _2041 + 4u;
    float _2077 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
    uint _2081 = _2041 | 1u;
    float _2092 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_593, _594, _595));
    float _2095 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_593, _594, _595));
    float _4258 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _4269 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2100 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.3183098733425140380859375;
    float _2102 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2109 = ((cbLight._m0[_2058].x * _2064) * _2102) + (((cbLight._m0[_2068].x * _2030) * _2077) * _2100);
    float _2110 = ((_2064 * cbLight._m0[_2058].y) * _2102) + (((cbLight._m0[_2068].y * _2032) * _2077) * _2100);
    float _2111 = ((_2064 * cbLight._m0[_2058].z) * _2102) + (((cbLight._m0[_2068].z * _2034) * _2077) * _2100);
    uvec4 _2115 = floatBitsToUint(cbLight._m0[_2041 + 12u]);
    bool _2117 = _2115.x == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2117)
    {
        _2219 = _2109;
        _2221 = _2110;
        _2223 = _2111;
    }
    else
    {
        uint _2227 = _2041 + 6u;
        float _2243 = (dot(vec3(cbLight._m0[_2041 + 2u].xyz), vec3(_593, _594, _595)) * 0.5) + 0.5;
        float _2244 = _2243 * _2243;
        float _4280 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2245 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2246 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2219 = (((cbLight._m0[_2227].x * 0.3183098733425140380859375) * _2245) * _2246) + _2109;
        _2221 = (((cbLight._m0[_2227].y * 0.3183098733425140380859375) * _2245) * _2246) + _2110;
        _2223 = (((cbLight._m0[_2227].z * 0.3183098733425140380859375) * _2245) * _2246) + _2111;
    }
    bool _2226 = _2115.y == 0u;
    float _2281;
    float _2283;
    float _2285;
    if (_2226)
    {
        _2281 = _2219;
        _2283 = _2221;
        _2285 = _2223;
    }
    else
    {
        uint _2443 = _2041 + 7u;
        float _2459 = (dot(vec3(cbLight._m0[_2041 + 3u].xyz), vec3(_593, _594, _595)) * 0.5) + 0.5;
        float _2460 = _2459 * _2459;
        float _4296 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2461 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2462 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2281 = (((cbLight._m0[_2443].x * 0.3183098733425140380859375) * _2461) * _2462) + _2219;
        _2283 = (((cbLight._m0[_2443].y * 0.3183098733425140380859375) * _2461) * _2462) + _2221;
        _2285 = (((cbLight._m0[_2443].z * 0.3183098733425140380859375) * _2461) * _2462) + _2223;
    }
    uint _2288 = _2041 + 8u;
    float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _596) * 0.949999988079071044921875);
    float _2302 = _2301 * _2301;
    float _2303 = cbLight._m0[_2041].x + _673;
    float _2304 = cbLight._m0[_2041].y + _674;
    float _2305 = cbLight._m0[_2041].z + _675;
    float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
    float _2310 = _2309 * _2303;
    float _2311 = _2309 * _2304;
    float _2312 = _2309 * _2305;
    float _2313 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2041].xyz));
    float _4312 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _4323 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _2317 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2318 = dot(vec3(_593, _594, _595), vec3(_2310, _2311, _2312));
    float _4334 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2310, _2311, _2312));
    float _4345 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2302 * _2302;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2341 = (exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2342 = 1.0 - _2302;
    float _2353 = (0.5 / (((_2317 * ((_2316 * _2342) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2342) + _2302) * _2316))) * _2316;
    float _4356 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2355 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    uint _2369 = _2041 + 9u;
    float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _596) * 0.949999988079071044921875);
    float _2381 = _2380 * _2380;
    float _2382 = cbLight._m0[_2081].x + _673;
    float _2383 = cbLight._m0[_2081].y + _674;
    float _2384 = cbLight._m0[_2081].z + _675;
    float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
    float _2389 = _2388 * _2382;
    float _2390 = _2388 * _2383;
    float _2391 = _2388 * _2384;
    float _2392 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2081].xyz));
    float _4367 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2396 = dot(vec3(_593, _594, _595), vec3(_2389, _2390, _2391));
    float _4378 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2400 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2389, _2390, _2391));
    float _4389 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2404 = _2381 * _2381;
    float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
    float _2417 = (exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2418 = 1.0 - _2381;
    float _2428 = (0.5 / (((_2317 * ((_2395 * _2418) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2418) + _2381) * _2395))) * _2395;
    float _4400 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
    float _2440 = (((_2417 * cbLight._m0[_2369].x) * _2430) * _2064) + ((((cbLight._m0[_2288].x * _2030) * _2341) * _2355) * _2077);
    float _2441 = (((_2417 * cbLight._m0[_2369].y) * _2430) * _2064) + ((((cbLight._m0[_2288].y * _2032) * _2341) * _2355) * _2077);
    float _2442 = (((_2417 * cbLight._m0[_2369].z) * _2430) * _2064) + ((((cbLight._m0[_2288].z * _2034) * _2341) * _2355) * _2077);
    float _2498;
    float _2500;
    float _2502;
    if (_2117)
    {
        _2498 = _2440;
        _2500 = _2441;
        _2502 = _2442;
    }
    else
    {
        uint _2504 = _2041 + 2u;
        uint _2508 = _2041 + 10u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _596) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _673;
        float _2525 = cbLight._m0[_2504].y + _674;
        float _2526 = cbLight._m0[_2504].z + _675;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2504].xyz));
        float _4411 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2538 = dot(vec3(_593, _594, _595), vec3(_2531, _2532, _2533));
        float _4422 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4433 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2559 = (exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2560 = 1.0 - _2523;
        float _2570 = (0.5 / (((_2317 * ((_2537 * _2560) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2560) + _2523) * _2537))) * _2537;
        float _4444 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2498 = (((_2559 * cbLight._m0[_2508].x) * _2572) * _2573) + _2440;
        _2500 = (((_2559 * cbLight._m0[_2508].y) * _2572) * _2573) + _2441;
        _2502 = (((_2559 * cbLight._m0[_2508].z) * _2572) * _2573) + _2442;
    }
    float _2604;
    float _2606;
    float _2608;
    if (_2226)
    {
        _2604 = _2498;
        _2606 = _2500;
        _2608 = _2502;
    }
    else
    {
        uint _2615 = _2041 + 3u;
        uint _2619 = _2041 + 11u;
        float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _596) * 0.949999988079071044921875);
        float _2634 = _2633 * _2633;
        float _2635 = cbLight._m0[_2615].x + _673;
        float _2636 = cbLight._m0[_2615].y + _674;
        float _2637 = cbLight._m0[_2615].z + _675;
        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
        float _2642 = _2641 * _2635;
        float _2643 = _2641 * _2636;
        float _2644 = _2641 * _2637;
        float _2645 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2615].xyz));
        float _4460 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2649 = dot(vec3(_593, _594, _595), vec3(_2642, _2643, _2644));
        float _4471 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2653 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2642, _2643, _2644));
        float _4482 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2657 = _2634 * _2634;
        float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
        float _2670 = (exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2671 = 1.0 - _2634;
        float _2681 = (0.5 / (((_2317 * ((_2648 * _2671) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2671) + _2634) * _2648))) * _2648;
        float _4493 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2604 = (((_2670 * cbLight._m0[_2619].x) * _2683) * _2684) + _2498;
        _2606 = (((_2670 * cbLight._m0[_2619].y) * _2683) * _2684) + _2500;
        _2608 = (((_2670 * cbLight._m0[_2619].z) * _2683) * _2684) + _2502;
    }
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    if (_2039.y == 0u)
    {
        uvec4 _2705 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2706 = _2705.x;
        uint _2717 = uint((float(_2705.y) * floor(float(uint(cbSceneParam._m0[85u].y * _682) / _2706))) + floor(float(uint(cbSceneParam._m0[85u].x * _681) / _2706)));
        float _2727 = (log2(_1817 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2728 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        uint _2731 = uint(isnan(14.0) ? _2728 : (isnan(_2728) ? 14.0 : min(_2728, 14.0)));
        uvec4 _2736 = texelFetch(g_lightClusterGridBuffer, int(((_2731 << 2u) + (_2717 << 6u)) >> 2u));
        uint _2737 = _2736.x;
        uint _2738 = _2705.z;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((((1u << ((_2738 >> 4u) & 15u)) + 4294967295u) & _2737) == 0u) || ((_2738 & 240u) == 0u))
        {
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
        }
        else
        {
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            uint _2968 = 0u;
            uint _2977;
            bool _2978;
            for (;;)
            {
                _2977 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_2968 << 2u)) >> 2u)).x;
                _2978 = _2977 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2978)
                {
                    frontier_phi_66_pred = _2967;
                    frontier_phi_66_pred_1 = _2966;
                    frontier_phi_66_pred_2 = _2965;
                    frontier_phi_66_pred_3 = _2964;
                    frontier_phi_66_pred_4 = _2963;
                    frontier_phi_66_pred_5 = _2962;
                }
                else
                {
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    uint _3092;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2967;
                    _3092 = _2977;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    for (;;)
                    {
                        uint _3096 = uint(findLSB(_3092)) + (_2968 << 5u);
                        uint _3093 = (_3092 + 4294967295u) & _3092;
                        uint _3098 = _3096 * 48u;
                        vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3118 = (_3096 * 48u) + 4u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3137 = (_3096 * 48u) + 8u;
                        vec3 _3148 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x));
                        float _3152 = _3112.x - _1815;
                        float _3153 = _3112.y - _1816;
                        float _3154 = _3112.z - _1817;
                        float _3155 = dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154));
                        float _3158 = inversesqrt(_3155);
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3162 = dot(vec3(_700, _703, _706), vec3(_3159, _3160, _3161));
                        float _3167 = 1.0 - (_3155 * _3112.w);
                        float _4519 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3169 = sqrt(_3155) * _3131.w;
                        float _3172 = 1.39999997615814208984375 / (_3169 + 1.39999997615814208984375);
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3162) + _3173;
                        float _3179 = _3169 * _3169;
                        float _3183 = ((isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))) * _3168) / ((_3179 * 0.699999988079071044921875) + 1.0);
                        float _3187 = (-0.0) - _1815;
                        float _3188 = (-0.0) - _1816;
                        float _3189 = (-0.0) - _1817;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3194 = _3193 * _3187;
                        float _3195 = _3193 * _3188;
                        float _3196 = _3193 * _3189;
                        float _3203 = exp2(log2(1.0 / ((_3179 * 3.5) + 5.0)) * 0.25);
                        float _3204 = 1.0 - _760;
                        float _3211 = sqrt(1.0 - ((1.0 - (_3204 * _3204)) * (1.0 - (_3203 * _3203))));
                        float _3212 = _3211 * _3211;
                        float _3213 = _3212 * _3212;
                        float _3214 = _3194 + _3159;
                        float _3215 = _3195 + _3160;
                        float _3216 = _3196 + _3161;
                        float _3220 = inversesqrt(dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216)));
                        float _3224 = dot(vec3(_700, _703, _706), vec3(_3194, _3195, _3196));
                        float _4535 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3227 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3228 = dot(vec3(_700, _703, _706), vec3(_3220 * _3214, _3220 * _3215, _3220 * _3216));
                        float _4546 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3231 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3235 = ((_3231 * _3231) * (_3213 + (-1.0))) + 1.0;
                        float _3236 = _3172 * _3212;
                        float _3237 = _3236 * _3236;
                        float _3240 = ((1.0 - _3237) * _3162) + _3237;
                        float _4557 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3241 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3242 = 1.0 - _3212;
                        float _3252 = (0.5 / (((_3241 * ((_3227 * _3242) + _3212)) + 9.9999999392252902907785028219223e-09) + (((_3241 * _3242) + _3212) * _3227))) * _3241;
                        float _4568 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3263 = (((_3213 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3235 * _3235) * ((_3179 * 2.1991131305694580078125) + 3.141590118408203125))) * _3168;
                        _3021 = (_3183 * _3131.x) + _3089;
                        _3022 = (_3183 * _3131.y) + _3090;
                        _3023 = (_3183 * _3131.z) + _3091;
                        _3018 = (_3263 * _3148.x) + _3086;
                        _3019 = (_3263 * _3148.y) + _3087;
                        _3020 = (_3263 * _3148.z) + _3088;
                        if (_3093 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3093;
                        }
                    }
                    frontier_phi_66_pred = _3023;
                    frontier_phi_66_pred_1 = _3022;
                    frontier_phi_66_pred_2 = _3021;
                    frontier_phi_66_pred_3 = _3020;
                    frontier_phi_66_pred_4 = _3019;
                    frontier_phi_66_pred_5 = _3018;
                }
                _2828 = frontier_phi_66_pred;
                _2826 = frontier_phi_66_pred_1;
                _2824 = frontier_phi_66_pred_2;
                _2822 = frontier_phi_66_pred_3;
                _2820 = frontier_phi_66_pred_4;
                _2818 = frontier_phi_66_pred_5;
                uint _2969 = _2968 + 1u;
                if (_2969 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2962 = _2818;
                    _2963 = _2820;
                    _2964 = _2822;
                    _2965 = _2824;
                    _2966 = _2826;
                    _2967 = _2828;
                    _2968 = _2969;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
        }
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.z;
        uint _2834 = (_2832 >> 8u) & 15u;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((4294967295u << _2834) & _2737) == 0u)
        {
            _2930 = _2817;
            _2932 = _2819;
            _2934 = _2821;
            _2936 = _2823;
            _2938 = _2825;
            _2940 = _2827;
        }
        else
        {
            float _2955 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
            float _2956 = _2955 * _1815;
            float _2957 = _2955 * _1816;
            float _2958 = _2955 * _1817;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2834 < ((_2832 >> 12u) & 15u))
            {
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _3069 = _2817;
                float _3070 = _2819;
                float _3071 = _2821;
                float _3072 = _2823;
                float _3073 = _2825;
                float _3074 = _2827;
                uint _3075 = _2834;
                uint _3084;
                bool _3085;
                for (;;)
                {
                    _3084 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                    _3085 = _3084 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3085)
                    {
                        frontier_phi_72_pred = _3074;
                        frontier_phi_72_pred_1 = _3073;
                        frontier_phi_72_pred_2 = _3072;
                        frontier_phi_72_pred_3 = _3071;
                        frontier_phi_72_pred_4 = _3070;
                        frontier_phi_72_pred_5 = _3069;
                    }
                    else
                    {
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3281 = _3069;
                        float _3282 = _3070;
                        float _3283 = _3071;
                        float _3284 = _3072;
                        float _3285 = _3073;
                        float _3286 = _3074;
                        uint _3287 = _3084;
                        uint _3288;
                        vec4 _3313;
                        float _3314;
                        vec4 _3329;
                        vec3 _3341;
                        vec4 _3356;
                        vec4 _3372;
                        float _3418;
                        bool _3419;
                        for (;;)
                        {
                            uint _3298 = ((_3075 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3287));
                            _3288 = (_3287 + 4294967295u) & _3287;
                            uint _3300 = _3298 * 40u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3314 = _3313.w;
                            uint _3316 = (_3298 * 40u) + 4u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3331 = (_3298 * 40u) + 8u;
                            _3341 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x));
                            uint _3343 = (_3298 * 40u) + 16u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3359 = (_3298 * 40u) + 20u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3298 * 40u) + 24u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3393 = (_3298 * 40u) + 28u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3418 = fma(_1817, _3406.z, fma(_1816, _3406.y, _3406.x * _1815)) + _3406.w;
                            _3419 = !((fma(_1817, _3387.z, fma(_1816, _3387.y, _3387.x * _1815)) + _3387.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3419)
                            {
                                float _3446 = _3313.x - _1815;
                                float _3447 = _3313.y - _1816;
                                float _3448 = _3313.z - _1817;
                                float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                                float _3452 = inversesqrt(_3449);
                                float _3453 = _3452 * _3446;
                                float _3454 = _3452 * _3447;
                                float _3455 = _3452 * _3448;
                                float _3459 = 1.0 - (_3449 / (_3314 * _3314));
                                float _4579 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3464 = sqrt(_3449) * _3329.w;
                                float _3466 = 1.39999997615814208984375 / (_3464 + 1.39999997615814208984375);
                                float _3467 = _3466 * _3466;
                                float _3470 = ((1.0 - _3467) * dot(vec3(_3453, _3454, _3455), vec3(_700, _703, _706))) + _3467;
                                float _3473 = _3464 * _3464;
                                float _3477 = (fma(_1817, _3356.z, fma(_1816, _3356.y, _3356.x * _1815)) + _3356.w) / _3418;
                                float _3478 = (fma(_1817, _3372.z, fma(_1816, _3372.y, _3372.x * _1815)) + _3372.w) / _3418;
                                float _3482 = 1.0 - dot(vec2(_3477, _3478), vec2(_3477, _3478));
                                float _4595 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3484 = _3483 * (((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3460) / ((_3473 * 0.699999988079071044921875) + 1.0));
                                float _3496 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                                float _3497 = 1.0 - _760;
                                float _3504 = sqrt(1.0 - ((1.0 - (_3497 * _3497)) * (1.0 - (_3496 * _3496))));
                                float _3505 = _3504 * _3504;
                                float _3506 = _3505 * _3505;
                                float _3507 = _3453 - _2956;
                                float _3508 = _3454 - _2957;
                                float _3509 = _3455 - _2958;
                                float _3513 = inversesqrt(dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509)));
                                float _3517 = dot(vec3(_700, _703, _706), vec3((-0.0) - _2956, (-0.0) - _2957, (-0.0) - _2958));
                                float _4606 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3521 = dot(vec3(_700, _703, _706), vec3(_3513 * _3507, _3513 * _3508, _3513 * _3509));
                                float _4617 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3528 = ((_3524 * _3524) * (_3506 + (-1.0))) + 1.0;
                                float _3529 = _3466 * _3505;
                                float _3530 = _3529 * _3529;
                                float _3536 = ((1.0 - _3530) * dot(vec3(_700, _703, _706), vec3(_3453, _3454, _3455))) + _3530;
                                float _4628 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3538 = 1.0 - _3505;
                                float _3548 = (0.5 / (((_3537 * ((_3520 * _3538) + _3505)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3505) * _3520))) * _3537;
                                float _4639 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3558 = (_3483 * _3460) * (((_3506 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3528 * _3528) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3484 * _3329.y;
                                frontier_phi_78_pred_1 = _3484 * _3329.x;
                                frontier_phi_78_pred_2 = _3558 * _3341.z;
                                frontier_phi_78_pred_3 = _3558 * _3341.y;
                                frontier_phi_78_pred_4 = _3558 * _3341.x;
                                frontier_phi_78_pred_5 = _3484 * _3329.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3566 = frontier_phi_78_pred;
                            _3565 = frontier_phi_78_pred_1;
                            _3564 = frontier_phi_78_pred_2;
                            _3563 = frontier_phi_78_pred_3;
                            _3562 = frontier_phi_78_pred_4;
                            _3567 = frontier_phi_78_pred_5;
                            _3271 = _3565 + _3284;
                            _3272 = _3566 + _3285;
                            _3273 = _3567 + _3286;
                            _3268 = _3562 + _3281;
                            _3269 = _3563 + _3282;
                            _3270 = _3564 + _3283;
                            if (_3288 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3288;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3273;
                        frontier_phi_72_pred_1 = _3272;
                        frontier_phi_72_pred_2 = _3271;
                        frontier_phi_72_pred_3 = _3270;
                        frontier_phi_72_pred_4 = _3269;
                        frontier_phi_72_pred_5 = _3268;
                    }
                    _2941 = frontier_phi_72_pred;
                    _2939 = frontier_phi_72_pred_1;
                    _2937 = frontier_phi_72_pred_2;
                    _2935 = frontier_phi_72_pred_3;
                    _2933 = frontier_phi_72_pred_4;
                    _2931 = frontier_phi_72_pred_5;
                    uint _3076 = _3075 + 1u;
                    if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3069 = _2931;
                        _3070 = _2933;
                        _3071 = _2935;
                        _3072 = _2937;
                        _3073 = _2939;
                        _3074 = _2941;
                        _3075 = _3076;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2941;
                frontier_phi_60_61_ladder_1 = _2939;
                frontier_phi_60_61_ladder_2 = _2935;
                frontier_phi_60_61_ladder_3 = _2933;
                frontier_phi_60_61_ladder_4 = _2931;
                frontier_phi_60_61_ladder_5 = _2937;
            }
            else
            {
                frontier_phi_60_61_ladder = _2827;
                frontier_phi_60_61_ladder_1 = _2825;
                frontier_phi_60_61_ladder_2 = _2821;
                frontier_phi_60_61_ladder_3 = _2819;
                frontier_phi_60_61_ladder_4 = _2817;
                frontier_phi_60_61_ladder_5 = _2823;
            }
            _2930 = frontier_phi_60_61_ladder_4;
            _2932 = frontier_phi_60_61_ladder_3;
            _2934 = frontier_phi_60_61_ladder_2;
            _2936 = frontier_phi_60_61_ladder_5;
            _2938 = frontier_phi_60_61_ladder_1;
            _2940 = frontier_phi_60_61_ladder;
        }
        float _2945 = isnan(1.0) ? _744 : (isnan(_744) ? 1.0 : min(_744, 1.0));
        _2750 = (_2945 * _2936) + _2281;
        _2752 = (_2945 * _2938) + _2283;
        _2754 = (_2945 * _2940) + _2285;
        _2756 = ((_2930 * 0.039999999105930328369140625) * _2945) + _2604;
        _2758 = ((_2932 * 0.039999999105930328369140625) * _2945) + _2606;
        _2760 = ((_2934 * 0.039999999105930328369140625) * _2945) + _2608;
    }
    else
    {
        _2750 = _2281;
        _2752 = _2283;
        _2754 = _2285;
        _2756 = _2604;
        _2758 = _2606;
        _2760 = _2608;
    }
    float _4655 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4666 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4677 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    uint _2780 = _234 + 6u;
    float _2788 = _681 / cbSceneParam._m0[86u].x;
    float _2789 = _682 / cbSceneParam._m0[86u].y;
    vec4 _2803 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, (log2((isnan(cbSceneParam._m0[77u].w) ? _614 : (isnan(_614) ? cbSceneParam._m0[77u].w : min(_614, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2805 = _2803.x;
    float _2806 = _2803.y;
    float _2807 = _2803.z;
    float _2808 = _2803.w;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    if (_614 > cbSceneParam._m0[78u].w)
    {
        float _2842 = isnan(_614) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _614 : min(cbSceneParam._m0[80u].w, _614));
        float _2843 = _2842 / _614;
        float _2854 = _2843 * _666;
        float _2855 = _667 * _2843;
        float _2856 = (-0.0) - _2855;
        float _2858 = _2843 * _668;
        float _2860 = (cbSceneParam._m0[77u].w * _2856) / _2842;
        float _2861 = _2860 + cbSceneParam._m0[79u].w;
        float _2862 = cbSceneParam._m0[79u].w - _2855;
        float _2868 = sqrt(((_2854 * _2854) + (_2855 * _2855)) + (_2858 * _2858));
        float _2871 = (1.0 - (cbSceneParam._m0[77u].w / _2842)) * _2868;
        float _2876 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2878 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3031;
        if (abs((_2856 - _2860) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3031 = ((((_2861 > 0.0) ? exp2(_2876 * _2861) : (2.0 - exp2(_2878 * _2861))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2871;
        }
        else
        {
            float _2991 = 1.0 / cbSceneParam._m0[80u].x;
            float _2992 = isnan(_2862) ? _2861 : (isnan(_2861) ? _2862 : max(_2861, _2862));
            float _2993 = isnan(_2862) ? _2861 : (isnan(_2861) ? _2862 : min(_2861, _2862));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            float _3003 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : min(_2993, 0.0));
            _3031 = ((abs(_2868 / _2856) * cbSceneParam._m0[80u].y) * ((((_3002 - _3003) * 2.0) - ((exp2(_2876 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0)))) - exp2(_2876 * (isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))))) * _2991)) - ((exp2(_2878 * _3002) - exp2(_2878 * _3003)) * _2991))) + (_2871 * cbSceneParam._m0[80u].z);
        }
        vec4 _3033 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, 1.0), 0.0);
        float _3042 = exp2((_3031 * (-1.44269502162933349609375)) * (1.0 - _3033.w));
        float _3043 = log2(_3042);
        float _3059 = log2(_2808);
        _2880 = (exp2(_3059 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].x)) * _3033.x) / cbSceneParam._m0[78u].x)) + _2805;
        _2882 = (exp2(_3059 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].y)) * _3033.y) / cbSceneParam._m0[78u].y)) + _2806;
        _2884 = (exp2(_3059 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].z)) * _3033.z) / cbSceneParam._m0[78u].z)) + _2807;
        _2886 = _3042 * _2808;
    }
    else
    {
        _2880 = _2805;
        _2882 = _2806;
        _2884 = _2807;
        _2886 = _2808;
    }
    float _2898 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2899 = _2898 == 3.0;
    float _2900 = log2(_2886);
    float _2907 = exp2(_2900 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2750 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _744))) + ((_2756 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1549)) * cbPerFrame._m0[3u].x));
    float _2908 = exp2(_2900 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2752 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _744))) + ((_2758 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1549)) * cbPerFrame._m0[3u].x));
    float _2909 = exp2(_2900 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2754 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _744))) + ((_2760 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1549)) * cbPerFrame._m0[3u].x));
    float _2918 = (_2898 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2918 * (_2899 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2880)));
    SV_Target.y = _2918 * (_2899 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2882)));
    SV_Target.z = _2918 * (_2899 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2884)));
    SV_Target.w = cbInstanceData._m0[_2780].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2780].w;
}


