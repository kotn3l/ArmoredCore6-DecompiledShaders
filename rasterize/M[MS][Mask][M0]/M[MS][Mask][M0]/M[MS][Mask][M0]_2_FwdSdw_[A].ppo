#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1096;
float _3742;
float _3743;
float _3744;
float _3745;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _298 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _298.x * cbMtdParam._m0[11u].x;
    float _304 = _298.y * cbMtdParam._m0[11u].y;
    float _305 = _298.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3754 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _423 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _274.x) * ((_410 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303);
    float _426 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _274.y) * ((_410 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304);
    float _429 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _274.z) * ((_410 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305);
    vec4 _442 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _459 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _461 = _459.x;
    float _462 = _459.y;
    float _463 = _459.z;
    float _472 = ((_442.z - _463) * _410) + _463;
    float _475 = ((((_442.x - _461) * _410) + _461) * 2.0) + (-1.0);
    float _477 = ((((_442.y - _462) * _410) + _462) * 2.0) + (-1.0);
    float _478 = dot(vec2(_475, _477), vec2(_475, _477));
    float _3765 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _483 = sqrt(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))));
    vec4 _499 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _511 = (((_499.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _475;
    float _512 = (((_499.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _477;
    float _516 = (cbMtdParam._m0[19u].w * (_499.z - _472)) + _472;
    float _520 = cbMtdParam._m0[22u].x + _499.w;
    float _523 = fma(_483, _221 * NORMAL.x, fma(_512, _228 * TANGENT.x, (_214 * _206) * _511));
    float _526 = fma(_483, _221 * NORMAL.y, fma(_512, _228 * TANGENT.y, (_214 * _207) * _511));
    float _529 = fma(_483, _221 * NORMAL.z, fma(_512, _228 * TANGENT.z, (_214 * _208) * _511));
    float _533 = inversesqrt(dot(vec3(_523, _526, _529), vec3(_523, _526, _529)));
    float _534 = _533 * _523;
    float _535 = _533 * _526;
    float _536 = _533 * _529;
    float _3776 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _537 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3798 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _3809 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3820 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _555 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _606 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _596);
    float _607 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _596);
    float _608 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _596);
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _613 = _606 * _612;
    float _614 = _607 * _612;
    float _615 = _608 * _612;
    vec4 _620 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _622 = _620.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _776 = sqrt(((_606 * _606) + (_607 * _607)) + (_608 * _608));
        float _782 = (cbMatDynParam._m0[5u].x * _776) + cbMatDynParam._m0[5u].y;
        float _3831 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _787 = (cbMatDynParam._m0[5u].z * _776) + cbMatDynParam._m0[5u].w;
        float _3842 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) - _783)) + _783) < ((_622 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _633 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _634 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _652 = fma(_536, cbSceneParam._m0[5u].z, fma(_535, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _534));
    float _655 = fma(_536, cbSceneParam._m0[6u].z, fma(_535, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _534));
    float _658 = fma(_536, cbSceneParam._m0[7u].z, fma(_535, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _534));
    uint _671 = _234 + 9u;
    uint _672 = _671 + uint(cbMatDynParam._m0[0u].w);
    float _678 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * cbInstanceData._m0[_672].x;
    float _679 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * cbInstanceData._m0[_672].y;
    float _680 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * cbInstanceData._m0[_672].z;
    float _3853 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _681 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _3864 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    vec4 _692 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _633, cbSceneParam._m0[86u].y * _634));
    float _696 = ((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * TEXCOORD_5.w) * _692.x;
    float _697 = dot(vec3(_534, _535, _536), vec3(_613, _614, _615));
    float _700 = _697 * 2.0;
    float _704 = (_700 * _534) - _613;
    float _705 = (_700 * _535) - _614;
    float _706 = (_700 * _536) - _615;
    float _710 = abs(dot(vec3(_613, _614, _615), vec3(_534, _535, _536)));
    float _3886 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _712 = sqrt(_537);
    float _725 = exp2((_712 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_712 * 3.0));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1095;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _820 = fma(_765, cbModelParam._m0[26u].z, fma(_761, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _757));
        float _824 = fma(_765, cbModelParam._m0[27u].z, fma(_761, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _757));
        float _828 = fma(_765, cbModelParam._m0[28u].z, fma(_761, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _757));
        float _853 = _757 + _534;
        float _854 = _761 + _535;
        float _855 = _765 + _536;
        float _865 = fma(_855, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853)) - _820;
        float _866 = fma(_855, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853)) - _824;
        float _867 = fma(_855, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853)) - _828;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_820 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_824 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[34u].z) + ((((((_828 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _923 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_889.x + (-0.5));
        float _925 = _923 * (_889.y + (-0.5));
        float _926 = _923 * (_889.z + (-0.5));
        float _933 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_896.x + (-0.5));
        float _935 = _933 * (_896.y + (-0.5));
        float _936 = _933 * (_896.z + (-0.5));
        float _943 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_903.x + (-0.5));
        float _945 = _943 * (_903.y + (-0.5));
        float _946 = _943 * (_903.z + (-0.5));
        float _953 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_910.x + (-0.5));
        float _955 = _953 * (_910.y + (-0.5));
        float _956 = _953 * (_910.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _977 = (dot(vec3(_534, _535, _536), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _987 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3934 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_989 + 1.0))) + _994) * _957;
        float _1004 = _925 * 0.5;
        float _1005 = _935 * 0.5;
        float _1006 = _945 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_534, _535, _536), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3967 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1031 + 1.0))) + _1036) * _958;
        float _1046 = _926 * 0.5;
        float _1047 = _936 * 0.5;
        float _1048 = _946 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_534, _535, _536), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _4000 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1073 + 1.0))) + _1078) * _959;
        _1095 = _926;
        _1097 = _925;
        _1098 = _924;
        _1099 = _936;
        _1100 = _935;
        _1101 = _934;
        _1102 = _946;
        _1103 = _945;
        _1104 = _944;
        _1105 = _959;
        _1106 = _958;
        _1107 = _957;
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
    }
    else
    {
        _1095 = _1096;
        _1097 = _1096;
        _1098 = _1096;
        _1099 = _1096;
        _1100 = _1096;
        _1101 = _1096;
        _1102 = _1096;
        _1103 = _1096;
        _1104 = _1096;
        _1105 = _1096;
        _1106 = _1096;
        _1107 = _1096;
        _1108 = 0.0;
        _1109 = 0.0;
        _1110 = 0.0;
    }
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1138 = fma(_765, cbModelParam._m0[30u].z, fma(_761, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _757));
        float _1142 = fma(_765, cbModelParam._m0[31u].z, fma(_761, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _757));
        float _1146 = fma(_765, cbModelParam._m0[32u].z, fma(_761, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _757));
        float _1169 = _757 + _534;
        float _1170 = _761 + _535;
        float _1171 = _765 + _536;
        float _1181 = fma(_1171, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1169)) - _1138;
        float _1182 = fma(_1171, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1169)) - _1142;
        float _1183 = fma(_1171, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1169)) - _1146;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1200 = ((_1187 * _1181) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1138 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1187 * _1182) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1142 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1187 * _1183) / cbModelParam._m0[35u].z) + ((((((_1146 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        float _1237 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1204.x + (-0.5));
        float _1239 = _1237 * (_1204.y + (-0.5));
        float _1240 = _1237 * (_1204.z + (-0.5));
        float _1247 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1211.x + (-0.5));
        float _1249 = _1247 * (_1211.y + (-0.5));
        float _1250 = _1247 * (_1211.z + (-0.5));
        float _1257 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1218.x + (-0.5));
        float _1259 = _1257 * (_1218.y + (-0.5));
        float _1260 = _1257 * (_1218.z + (-0.5));
        float _1267 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1225.x + (-0.5));
        float _1269 = _1267 * (_1225.y + (-0.5));
        float _1270 = _1267 * (_1225.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_534, _535, _536), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4063 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1301 + 1.0))) + _1306) * _1271;
        float _1316 = _1239 * 0.5;
        float _1317 = _1249 * 0.5;
        float _1318 = _1259 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_534, _535, _536), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4096 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1343 + 1.0))) + _1348) * _1272;
        float _1358 = _1240 * 0.5;
        float _1359 = _1250 * 0.5;
        float _1360 = _1260 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_534, _535, _536), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4129 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1385 + 1.0))) + _1390) * _1273;
        _1407 = _1240;
        _1408 = _1239;
        _1409 = _1238;
        _1410 = _1250;
        _1411 = _1249;
        _1412 = _1248;
        _1413 = _1260;
        _1414 = _1259;
        _1415 = _1258;
        _1416 = _1273;
        _1417 = _1272;
        _1418 = _1271;
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _1096;
        _1408 = _1096;
        _1409 = _1096;
        _1410 = _1096;
        _1411 = _1096;
        _1412 = _1096;
        _1413 = _1096;
        _1414 = _1096;
        _1415 = _1096;
        _1416 = _1096;
        _1417 = _1096;
        _1418 = _1096;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1108)) + _1108;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1109)) + _1109;
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1110)) + _1110;
    float _1454 = fma(_1433, cbSceneParam._m0[89u].z, fma(_1432, cbSceneParam._m0[89u].y, _1431 * cbSceneParam._m0[89u].x));
    float _1457 = fma(_1433, cbSceneParam._m0[90u].z, fma(_1432, cbSceneParam._m0[90u].y, _1431 * cbSceneParam._m0[90u].x));
    float _1460 = fma(_1433, cbSceneParam._m0[91u].z, fma(_1432, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1431));
    float _1475 = _704 * 0.5;
    float _1476 = _705 * 0.5;
    float _1477 = _706 * 0.5;
    float _1478 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1481 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1484 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1518;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1491 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1095, _1099, _1102, _1105));
        float _1495 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1499 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1506 = dot(vec4(cbModelParam._m0[39u]), vec4(_1475, _1476, _1477, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1529;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1520 = dot(vec4(cbModelParam._m0[40u]), vec4(_1475, _1476, _1477, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1533 = (_1529 * cbModelParam._m0[1u].x) + (_1518 * (1.0 - cbModelParam._m0[1u].x));
    float _1543 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _537);
    float _1544 = isnan(_1543) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1543 : min(cbModelParam._m0[25u].z, _1543));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1593 = fma(_765, cbModelParam._m0[13u].z, fma(_761, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _757)) + cbModelParam._m0[13u].w;
        float _1597 = fma(_765, cbModelParam._m0[14u].z, fma(_761, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _757)) + cbModelParam._m0[14u].w;
        float _1601 = fma(_765, cbModelParam._m0[15u].z, fma(_761, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _757)) + cbModelParam._m0[15u].w;
        float _1604 = fma(_706, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704));
        float _1607 = fma(_706, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704));
        float _1610 = fma(_706, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704));
        float _1638;
        if (_1604 > 0.0)
        {
            _1638 = abs((1.0 - _1593) / _1604);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1593 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1638 = frontier_phi_17_15_ladder;
        }
        float _1809;
        if (_1607 > 0.0)
        {
            _1809 = abs((1.0 - _1597) / _1607);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1597 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1809 = frontier_phi_26_22_ladder;
        }
        float _2104;
        if (_1610 > 0.0)
        {
            _2104 = abs((1.0 - _1601) / _1610);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1601 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2104 = frontier_phi_38_33_ladder;
        }
        float _2106 = isnan(_1809) ? _1638 : (isnan(_1638) ? _1809 : min(_1638, _1809));
        float _2107 = isnan(_2104) ? _2106 : (isnan(_2106) ? _2104 : min(_2106, _2104));
        float _2111 = (_2107 * _1604) + _1593;
        float _2112 = (_2107 * _1607) + _1597;
        float _2113 = (_2107 * _1610) + _1601;
        float _2114 = _2107 * 9.9999997473787516355514526367188e-05;
        float _2116 = (-1.0) - _2114;
        float _2118 = _2114 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2113 > _2118) || ((_2113 < _2116) || ((_2112 > _2118) || ((_2112 < _2116) || ((_2111 < _2116) || (_2111 > _2118))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2258 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2113, cbModelParam._m0[9u].z, fma(_2112, cbModelParam._m0[9u].y, _2111 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2113, cbModelParam._m0[10u].z, fma(_2112, cbModelParam._m0[10u].y, _2111 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2113, cbModelParam._m0[11u].z, fma(_2112, cbModelParam._m0[11u].y, _2111 * cbModelParam._m0[11u].x))), _1544);
            frontier_phi_16_38_ladder = _2258.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2258.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2258.x * cbModelParam._m0[1u].y;
        }
        _1626 = frontier_phi_16_38_ladder_2;
        _1628 = frontier_phi_16_38_ladder_1;
        _1630 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_704, _705, _706), _1544);
        _1626 = _1614.x * cbModelParam._m0[1u].y;
        _1628 = _1614.y * cbModelParam._m0[1u].y;
        _1630 = _1614.z * cbModelParam._m0[1u].y;
    }
    float _1634 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _537);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1634 : min(cbModelParam._m0[25u].w, _1634));
    float _1726;
    float _1728;
    float _1730;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1690 = fma(_765, cbModelParam._m0[21u].z, fma(_761, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _757)) + cbModelParam._m0[21u].w;
        float _1694 = fma(_765, cbModelParam._m0[22u].z, fma(_761, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _757)) + cbModelParam._m0[22u].w;
        float _1698 = fma(_765, cbModelParam._m0[23u].z, fma(_761, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _757)) + cbModelParam._m0[23u].w;
        float _1701 = fma(_706, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704));
        float _1704 = fma(_706, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704));
        float _1707 = fma(_706, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704));
        float _1814;
        if (_1701 > 0.0)
        {
            _1814 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1814 = frontier_phi_28_24_ladder;
        }
        float _2131;
        if (_1704 > 0.0)
        {
            _2131 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2131 = frontier_phi_40_35_ladder;
        }
        float _2458;
        if (_1707 > 0.0)
        {
            _2458 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2458 = frontier_phi_50_47_ladder;
        }
        float _2460 = isnan(_2131) ? _1814 : (isnan(_1814) ? _2131 : min(_1814, _2131));
        float _2461 = isnan(_2458) ? _2460 : (isnan(_2460) ? _2458 : min(_2460, _2458));
        float _2465 = (_2461 * _1701) + _1690;
        float _2466 = (_2461 * _1704) + _1694;
        float _2467 = (_2461 * _1707) + _1698;
        float _2468 = _2461 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2468;
        float _2471 = _2468 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2467 > _2471) || ((_2467 < _2469) || ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 < _2469) || (_2465 > _2471))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2585 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2467, cbModelParam._m0[17u].z, fma(_2466, cbModelParam._m0[17u].y, _2465 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2467, cbModelParam._m0[18u].z, fma(_2466, cbModelParam._m0[18u].y, _2465 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2467, cbModelParam._m0[19u].z, fma(_2466, cbModelParam._m0[19u].y, _2465 * cbModelParam._m0[19u].x))), _1635);
            frontier_phi_25_50_ladder = _2585.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2585.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2585.x * cbModelParam._m0[1u].z;
        }
        _1726 = frontier_phi_25_50_ladder_2;
        _1728 = frontier_phi_25_50_ladder_1;
        _1730 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_704, _705, _706), _1635);
        _1726 = _1710.x * cbModelParam._m0[1u].z;
        _1728 = _1710.y * cbModelParam._m0[1u].z;
        _1730 = _1710.z * cbModelParam._m0[1u].z;
    }
    float _1742 = ((((1.0 - _725) * ((_712 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_725 * _712)) * _696;
    float _1743 = _1742 * ((cbModelParam._m0[1u].w * (_1726 - _1626)) + _1626);
    float _1744 = _1742 * ((cbModelParam._m0[1u].w * (_1728 - _1628)) + _1628);
    float _1745 = _1742 * ((cbModelParam._m0[1u].w * (_1730 - _1630)) + _1630);
    float _1748 = fma(_1745, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1743 * cbSceneParam._m0[89u].x));
    float _1751 = fma(_1745, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1743 * cbSceneParam._m0[90u].x));
    float _1754 = fma(_1745, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, _1743 * cbSceneParam._m0[91u].x));
    float _1788 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1792 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1796 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1801 = _1788 / _1800;
    float _1802 = _1792 / _1800;
    float _1803 = _1796 / _1800;
    float _1950;
    float _1951;
    float _1952;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1830 = ((uint(_1803 > cbSceneParam._m0[59u].y) + uint(_1803 > cbSceneParam._m0[59u].x)) + uint(_1803 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1831 = _1830 + 43u;
        uint _1839 = _1830 + 44u;
        uint _1847 = _1830 + 45u;
        uint _1855 = _1830 + 46u;
        float _1866 = fma(_1800, cbSceneParam._m0[_1831].w, fma(_1796, cbSceneParam._m0[_1831].z, fma(_1792, cbSceneParam._m0[_1831].y, _1788 * cbSceneParam._m0[_1831].x)));
        float _1870 = fma(_1800, cbSceneParam._m0[_1839].w, fma(_1796, cbSceneParam._m0[_1839].z, fma(_1792, cbSceneParam._m0[_1839].y, _1788 * cbSceneParam._m0[_1839].x)));
        float _1878 = fma(_1800, cbSceneParam._m0[_1855].w, fma(_1796, cbSceneParam._m0[_1855].z, fma(_1792, cbSceneParam._m0[_1855].y, _1788 * cbSceneParam._m0[_1855].x)));
        float _1883 = cbSceneParam._m0[33u].z * _1878;
        float _1885 = cbSceneParam._m0[33u].w * _1878;
        float _1888 = fma(_1800, cbSceneParam._m0[_1847].w, fma(_1796, cbSceneParam._m0[_1847].z, fma(_1792, cbSceneParam._m0[_1847].y, _1788 * cbSceneParam._m0[_1847].x))) / _1878;
        float _1936 = (cbSceneParam._m0[33u].x - sqrt(((_1802 * _1802) + (_1801 * _1801)) + (_1803 * _1803))) * cbSceneParam._m0[33u].y;
        float _4255 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1943 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1883 + _1866) / _1878, (_1885 + _1870) / _1878), _1888), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1885 + _1866) / _1878, (_1870 - _1883) / _1878), _1888), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1866 - _1883) / _1878, (_1870 - _1885) / _1878), _1888), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1866 - _1885) / _1878, (_1883 + _1870) / _1878), _1888), 0.0)).x), vec4(0.25)));
        _1950 = 1.0 - (_1943 * cbSceneParam._m0[34u].x);
        _1951 = 1.0 - (_1943 * cbSceneParam._m0[34u].y);
        _1952 = 1.0 - (_1943 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1950 = 1.0;
        _1951 = 1.0;
        _1952 = 1.0;
    }
    float _2016;
    float _2018;
    float _2020;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2004 = fma(_1800, cbSceneParam._m0[63u].w, fma(_1796, cbSceneParam._m0[63u].z, fma(_1792, cbSceneParam._m0[63u].y, _1788 * cbSceneParam._m0[63u].x)));
        float _2005 = fma(_1800, cbSceneParam._m0[60u].w, fma(_1796, cbSceneParam._m0[60u].z, fma(_1792, cbSceneParam._m0[60u].y, _1788 * cbSceneParam._m0[60u].x))) / _2004;
        float _2006 = fma(_1800, cbSceneParam._m0[61u].w, fma(_1796, cbSceneParam._m0[61u].z, fma(_1792, cbSceneParam._m0[61u].y, _1788 * cbSceneParam._m0[61u].x))) / _2004;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2005 >= cbSceneParam._m0[64u].x) && (_2006 >= cbSceneParam._m0[64u].y)) && (_2005 <= cbSceneParam._m0[64u].z)) && (_2006 <= cbSceneParam._m0[64u].w))
        {
            float _2144 = fma(_1800, cbSceneParam._m0[62u].w, fma(_1796, cbSceneParam._m0[62u].z, fma(_1792, cbSceneParam._m0[62u].y, _1788 * cbSceneParam._m0[62u].x))) / _2004;
            float _2148 = isnan(cbSceneParam._m0[41u].w) ? _2144 : (isnan(_2144) ? cbSceneParam._m0[41u].w : max(_2144, cbSceneParam._m0[41u].w));
            float _2191 = (cbSceneParam._m0[33u].x - sqrt(((_1802 * _1802) + (_1801 * _1801)) + (_1803 * _1803))) * cbSceneParam._m0[33u].y;
            float _4271 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
            float _2198 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2005, cbSceneParam._m0[33u].w + _2006), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2005, _2006 - cbSceneParam._m0[33u].z), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2005 - cbSceneParam._m0[33u].z, _2006 - cbSceneParam._m0[33u].w), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2005 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2006), _2148), 0.0)).x), vec4(0.25)));
            float _2202 = 1.0 - (_2198 * cbSceneParam._m0[34u].x);
            float _2203 = 1.0 - (_2198 * cbSceneParam._m0[34u].y);
            float _2204 = 1.0 - (_2198 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2204) ? _1952 : (isnan(_1952) ? _2204 : min(_1952, _2204));
            frontier_phi_37_36_ladder_1 = isnan(_2203) ? _1951 : (isnan(_1951) ? _2203 : min(_1951, _2203));
            frontier_phi_37_36_ladder_2 = isnan(_2202) ? _1950 : (isnan(_1950) ? _2202 : min(_1950, _2202));
        }
        else
        {
            frontier_phi_37_36_ladder = _1952;
            frontier_phi_37_36_ladder_1 = _1951;
            frontier_phi_37_36_ladder_2 = _1950;
        }
        _2016 = frontier_phi_37_36_ladder_2;
        _2018 = frontier_phi_37_36_ladder_1;
        _2020 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2016 = _1950;
        _2018 = _1951;
        _2020 = _1952;
    }
    uvec4 _2025 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _2027 = _2025.x * 14u;
    uint _2028 = _2027 + 13u;
    float _2035 = _696 + (-1.0);
    float _2040 = (cbLight._m0[_2028].x * _2035) + 1.0;
    float _2041 = (cbLight._m0[_2028].y * _2035) + 1.0;
    float _2042 = (cbLight._m0[_2028].z * _2035) + 1.0;
    float _2043 = (cbLight._m0[_2028].w * _2035) + 1.0;
    uint _2044 = _2027 + 5u;
    float _2050 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
    uint _2054 = _2027 + 4u;
    float _2063 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2067 = _2027 | 1u;
    float _2078 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_534, _535, _536));
    float _2081 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_534, _535, _536));
    float _4307 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _4318 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2086 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * 0.3183098733425140380859375;
    float _2088 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * 0.3183098733425140380859375;
    float _2095 = ((cbLight._m0[_2044].x * _2050) * _2088) + (((cbLight._m0[_2054].x * _2016) * _2063) * _2086);
    float _2096 = ((_2050 * cbLight._m0[_2044].y) * _2088) + (((cbLight._m0[_2054].y * _2018) * _2063) * _2086);
    float _2097 = ((_2050 * cbLight._m0[_2044].z) * _2088) + (((cbLight._m0[_2054].z * _2020) * _2063) * _2086);
    uvec4 _2101 = floatBitsToUint(cbLight._m0[_2027 + 12u]);
    bool _2103 = _2101.x == 0u;
    float _2205;
    float _2207;
    float _2209;
    if (_2103)
    {
        _2205 = _2095;
        _2207 = _2096;
        _2209 = _2097;
    }
    else
    {
        uint _2213 = _2027 + 6u;
        float _2229 = (dot(vec3(cbLight._m0[_2027 + 2u].xyz), vec3(_534, _535, _536)) * 0.5) + 0.5;
        float _2230 = _2229 * _2229;
        float _4329 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2231 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2232 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2205 = (((cbLight._m0[_2213].x * 0.3183098733425140380859375) * _2231) * _2232) + _2095;
        _2207 = (((cbLight._m0[_2213].y * 0.3183098733425140380859375) * _2231) * _2232) + _2096;
        _2209 = (((cbLight._m0[_2213].z * 0.3183098733425140380859375) * _2231) * _2232) + _2097;
    }
    bool _2212 = _2101.y == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2212)
    {
        _2267 = _2205;
        _2269 = _2207;
        _2271 = _2209;
    }
    else
    {
        uint _2429 = _2027 + 7u;
        float _2445 = (dot(vec3(cbLight._m0[_2027 + 3u].xyz), vec3(_534, _535, _536)) * 0.5) + 0.5;
        float _2446 = _2445 * _2445;
        float _4345 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2447 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2448 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2267 = (((cbLight._m0[_2429].x * 0.3183098733425140380859375) * _2447) * _2448) + _2205;
        _2269 = (((cbLight._m0[_2429].y * 0.3183098733425140380859375) * _2447) * _2448) + _2207;
        _2271 = (((cbLight._m0[_2429].z * 0.3183098733425140380859375) * _2447) * _2448) + _2209;
    }
    uint _2274 = _2027 + 8u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _537) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_2027].x + _613;
    float _2290 = cbLight._m0[_2027].y + _614;
    float _2291 = cbLight._m0[_2027].z + _615;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_2027].xyz));
    float _4361 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _4372 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _2303 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2304 = dot(vec3(_534, _535, _536), vec3(_2296, _2297, _2298));
    float _4383 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2296, _2297, _2298));
    float _4394 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2288 * _2288;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2327 = (exp2(log2(1.0 - (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2328 = 1.0 - _2288;
    float _2339 = (0.5 / (((_2303 * ((_2302 * _2328) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2328) + _2288) * _2302))) * _2302;
    float _4405 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2341 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    uint _2355 = _2027 + 9u;
    float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _537) * 0.949999988079071044921875);
    float _2367 = _2366 * _2366;
    float _2368 = cbLight._m0[_2067].x + _613;
    float _2369 = cbLight._m0[_2067].y + _614;
    float _2370 = cbLight._m0[_2067].z + _615;
    float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
    float _2375 = _2374 * _2368;
    float _2376 = _2374 * _2369;
    float _2377 = _2374 * _2370;
    float _2378 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_2067].xyz));
    float _4416 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2382 = dot(vec3(_534, _535, _536), vec3(_2375, _2376, _2377));
    float _4427 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2375, _2376, _2377));
    float _4438 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2367 * _2367;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2403 = (exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2404 = 1.0 - _2367;
    float _2414 = (0.5 / (((_2303 * ((_2381 * _2404) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2404) + _2367) * _2381))) * _2381;
    float _4449 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2416 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    float _2426 = (((_2403 * cbLight._m0[_2355].x) * _2416) * _2050) + ((((cbLight._m0[_2274].x * _2016) * _2327) * _2341) * _2063);
    float _2427 = (((_2403 * cbLight._m0[_2355].y) * _2416) * _2050) + ((((cbLight._m0[_2274].y * _2018) * _2327) * _2341) * _2063);
    float _2428 = (((_2403 * cbLight._m0[_2355].z) * _2416) * _2050) + ((((cbLight._m0[_2274].z * _2020) * _2327) * _2341) * _2063);
    float _2484;
    float _2486;
    float _2488;
    if (_2103)
    {
        _2484 = _2426;
        _2486 = _2427;
        _2488 = _2428;
    }
    else
    {
        uint _2490 = _2027 + 2u;
        uint _2494 = _2027 + 10u;
        float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _537) * 0.949999988079071044921875);
        float _2509 = _2508 * _2508;
        float _2510 = cbLight._m0[_2490].x + _613;
        float _2511 = cbLight._m0[_2490].y + _614;
        float _2512 = cbLight._m0[_2490].z + _615;
        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
        float _2517 = _2516 * _2510;
        float _2518 = _2516 * _2511;
        float _2519 = _2516 * _2512;
        float _2520 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_2490].xyz));
        float _4460 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2524 = dot(vec3(_534, _535, _536), vec3(_2517, _2518, _2519));
        float _4471 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2528 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2517, _2518, _2519));
        float _4482 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2532 = _2509 * _2509;
        float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
        float _2545 = (exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2546 = 1.0 - _2509;
        float _2556 = (0.5 / (((_2303 * ((_2523 * _2546) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2546) + _2509) * _2523))) * _2523;
        float _4493 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2558 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
        float _2559 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2484 = (((_2545 * cbLight._m0[_2494].x) * _2558) * _2559) + _2426;
        _2486 = (((_2545 * cbLight._m0[_2494].y) * _2558) * _2559) + _2427;
        _2488 = (((_2545 * cbLight._m0[_2494].z) * _2558) * _2559) + _2428;
    }
    float _2590;
    float _2592;
    float _2594;
    if (_2212)
    {
        _2590 = _2484;
        _2592 = _2486;
        _2594 = _2488;
    }
    else
    {
        uint _2601 = _2027 + 3u;
        uint _2605 = _2027 + 11u;
        float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2601].w)) * _537) * 0.949999988079071044921875);
        float _2620 = _2619 * _2619;
        float _2621 = cbLight._m0[_2601].x + _613;
        float _2622 = cbLight._m0[_2601].y + _614;
        float _2623 = cbLight._m0[_2601].z + _615;
        float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
        float _2628 = _2627 * _2621;
        float _2629 = _2627 * _2622;
        float _2630 = _2627 * _2623;
        float _2631 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_2601].xyz));
        float _4509 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2635 = dot(vec3(_534, _535, _536), vec3(_2628, _2629, _2630));
        float _4520 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2639 = dot(vec3(cbLight._m0[_2601].xyz), vec3(_2628, _2629, _2630));
        float _4531 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2643 = _2620 * _2620;
        float _2647 = ((_2638 * _2638) * (_2643 + (-1.0))) + 1.0;
        float _2656 = (exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2657 = 1.0 - _2620;
        float _2667 = (0.5 / (((_2303 * ((_2634 * _2657) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2657) + _2620) * _2634))) * _2634;
        float _4542 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2669 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2643 / ((_2647 * _2647) * 3.141590118408203125));
        float _2670 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2590 = (((_2656 * cbLight._m0[_2605].x) * _2669) * _2670) + _2484;
        _2592 = (((_2656 * cbLight._m0[_2605].y) * _2669) * _2670) + _2486;
        _2594 = (((_2656 * cbLight._m0[_2605].z) * _2669) * _2670) + _2488;
    }
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    if (_2025.y == 0u)
    {
        uvec4 _2691 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2692 = _2691.x;
        uint _2703 = uint((float(_2691.y) * floor(float(uint(cbSceneParam._m0[85u].y * _634) / _2692))) + floor(float(uint(cbSceneParam._m0[85u].x * _633) / _2692)));
        float _2713 = (log2(_1803 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2714 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        uint _2717 = uint(isnan(14.0) ? _2714 : (isnan(_2714) ? 14.0 : min(_2714, 14.0)));
        uvec4 _2722 = texelFetch(g_lightClusterGridBuffer, int(((_2717 << 2u) + (_2703 << 6u)) >> 2u));
        uint _2723 = _2722.x;
        uint _2724 = _2691.z;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        if (((((1u << ((_2724 >> 4u) & 15u)) + 4294967295u) & _2723) == 0u) || ((_2724 & 240u) == 0u))
        {
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
        }
        else
        {
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2814;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            uint _2962 = 0u;
            uint _2971;
            bool _2972;
            for (;;)
            {
                _2971 = texelFetch(g_lightClassification, int((((_2717 << 5u) + (_2703 << 9u)) + (_2962 << 2u)) >> 2u)).x;
                _2972 = _2971 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2972)
                {
                    frontier_phi_71_pred = _2961;
                    frontier_phi_71_pred_1 = _2960;
                    frontier_phi_71_pred_2 = _2959;
                    frontier_phi_71_pred_3 = _2958;
                    frontier_phi_71_pred_4 = _2957;
                    frontier_phi_71_pred_5 = _2956;
                }
                else
                {
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    uint _3107;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2971;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    for (;;)
                    {
                        uint _3111 = uint(findLSB(_3107)) + (_2962 << 5u);
                        uint _3108 = (_3107 + 4294967295u) & _3107;
                        uint _3113 = _3111 * 48u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        uint _3133 = (_3111 * 48u) + 4u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 3u)).x));
                        uint _3152 = (_3111 * 48u) + 8u;
                        vec3 _3163 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x));
                        float _3167 = _3127.x - _1801;
                        float _3168 = _3127.y - _1802;
                        float _3169 = _3127.z - _1803;
                        float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                        float _3173 = inversesqrt(_3170);
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3177 = dot(vec3(_652, _655, _658), vec3(_3174, _3175, _3176));
                        float _3182 = 1.0 - (_3170 * _3127.w);
                        float _4568 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3184 = sqrt(_3170) * _3146.w;
                        float _3187 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3177) + _3188;
                        float _3194 = _3184 * _3184;
                        float _3198 = ((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3183) / ((_3194 * 0.699999988079071044921875) + 1.0);
                        float _3202 = (-0.0) - _1801;
                        float _3203 = (-0.0) - _1802;
                        float _3204 = (-0.0) - _1803;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3218 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                        float _3219 = 1.0 - _712;
                        float _3226 = sqrt(1.0 - ((1.0 - (_3219 * _3219)) * (1.0 - (_3218 * _3218))));
                        float _3227 = _3226 * _3226;
                        float _3228 = _3227 * _3227;
                        float _3229 = _3209 + _3174;
                        float _3230 = _3210 + _3175;
                        float _3231 = _3211 + _3176;
                        float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                        float _3239 = dot(vec3(_652, _655, _658), vec3(_3209, _3210, _3211));
                        float _4584 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3242 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3243 = dot(vec3(_652, _655, _658), vec3(_3235 * _3229, _3235 * _3230, _3235 * _3231));
                        float _4595 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3246 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3250 = ((_3246 * _3246) * (_3228 + (-1.0))) + 1.0;
                        float _3251 = _3187 * _3227;
                        float _3252 = _3251 * _3251;
                        float _3255 = ((1.0 - _3252) * _3177) + _3252;
                        float _4606 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3256 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3257 = 1.0 - _3227;
                        float _3267 = (0.5 / (((_3256 * ((_3242 * _3257) + _3227)) + 9.9999999392252902907785028219223e-09) + (((_3256 * _3257) + _3227) * _3242))) * _3256;
                        float _4617 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3278 = (((_3228 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3250 * _3250) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125))) * _3183;
                        _3031 = (_3198 * _3146.x) + _3104;
                        _3032 = (_3198 * _3146.y) + _3105;
                        _3033 = (_3198 * _3146.z) + _3106;
                        _3028 = (_3278 * _3163.x) + _3101;
                        _3029 = (_3278 * _3163.y) + _3102;
                        _3030 = (_3278 * _3163.z) + _3103;
                        if (_3108 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3108;
                        }
                    }
                    frontier_phi_71_pred = _3033;
                    frontier_phi_71_pred_1 = _3032;
                    frontier_phi_71_pred_2 = _3031;
                    frontier_phi_71_pred_3 = _3030;
                    frontier_phi_71_pred_4 = _3029;
                    frontier_phi_71_pred_5 = _3028;
                }
                _2814 = frontier_phi_71_pred;
                _2812 = frontier_phi_71_pred_1;
                _2810 = frontier_phi_71_pred_2;
                _2808 = frontier_phi_71_pred_3;
                _2806 = frontier_phi_71_pred_4;
                _2804 = frontier_phi_71_pred_5;
                uint _2963 = _2962 + 1u;
                if (_2963 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2956 = _2804;
                    _2957 = _2806;
                    _2958 = _2808;
                    _2959 = _2810;
                    _2960 = _2812;
                    _2961 = _2814;
                    _2962 = _2963;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
        }
        uvec4 _2817 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2818 = _2817.z;
        uint _2820 = (_2818 >> 8u) & 15u;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        if (((4294967295u << _2820) & _2723) == 0u)
        {
            _2924 = _2803;
            _2926 = _2805;
            _2928 = _2807;
            _2930 = _2809;
            _2932 = _2811;
            _2934 = _2813;
        }
        else
        {
            float _2949 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
            float _2950 = _2949 * _1801;
            float _2951 = _2949 * _1802;
            float _2952 = _2949 * _1803;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2820 < ((_2818 >> 12u) & 15u))
            {
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _3084 = _2803;
                float _3085 = _2805;
                float _3086 = _2807;
                float _3087 = _2809;
                float _3088 = _2811;
                float _3089 = _2813;
                uint _3090 = _2820;
                uint _3099;
                bool _3100;
                for (;;)
                {
                    _3099 = texelFetch(g_lightClassification, int((((_2717 << 5u) + (_2703 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                    _3100 = _3099 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3100)
                    {
                        frontier_phi_82_pred = _3089;
                        frontier_phi_82_pred_1 = _3088;
                        frontier_phi_82_pred_2 = _3087;
                        frontier_phi_82_pred_3 = _3086;
                        frontier_phi_82_pred_4 = _3085;
                        frontier_phi_82_pred_5 = _3084;
                    }
                    else
                    {
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3305 = _3084;
                        float _3306 = _3085;
                        float _3307 = _3086;
                        float _3308 = _3087;
                        float _3309 = _3088;
                        float _3310 = _3089;
                        uint _3311 = _3099;
                        uint _3312;
                        vec4 _3337;
                        float _3338;
                        vec4 _3353;
                        vec3 _3365;
                        vec4 _3380;
                        vec4 _3396;
                        float _3442;
                        bool _3443;
                        for (;;)
                        {
                            uint _3322 = ((_3090 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3311));
                            _3312 = (_3311 + 4294967295u) & _3311;
                            uint _3324 = _3322 * 40u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            _3338 = _3337.w;
                            uint _3340 = (_3322 * 40u) + 4u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3355 = (_3322 * 40u) + 8u;
                            _3365 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x));
                            uint _3367 = (_3322 * 40u) + 16u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3383 = (_3322 * 40u) + 20u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3322 * 40u) + 24u;
                            vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3417 = (_3322 * 40u) + 28u;
                            vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            _3442 = fma(_1803, _3430.z, fma(_1802, _3430.y, _3430.x * _1801)) + _3430.w;
                            _3443 = !((fma(_1803, _3411.z, fma(_1802, _3411.y, _3411.x * _1801)) + _3411.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3443)
                            {
                                float _3470 = _3337.x - _1801;
                                float _3471 = _3337.y - _1802;
                                float _3472 = _3337.z - _1803;
                                float _3473 = dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472));
                                float _3476 = inversesqrt(_3473);
                                float _3477 = _3476 * _3470;
                                float _3478 = _3476 * _3471;
                                float _3479 = _3476 * _3472;
                                float _3483 = 1.0 - (_3473 / (_3338 * _3338));
                                float _4628 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3488 = sqrt(_3473) * _3353.w;
                                float _3490 = 1.39999997615814208984375 / (_3488 + 1.39999997615814208984375);
                                float _3491 = _3490 * _3490;
                                float _3494 = ((1.0 - _3491) * dot(vec3(_3477, _3478, _3479), vec3(_652, _655, _658))) + _3491;
                                float _3497 = _3488 * _3488;
                                float _3501 = (fma(_1803, _3380.z, fma(_1802, _3380.y, _3380.x * _1801)) + _3380.w) / _3442;
                                float _3502 = (fma(_1803, _3396.z, fma(_1802, _3396.y, _3396.x * _1801)) + _3396.w) / _3442;
                                float _3506 = 1.0 - dot(vec2(_3501, _3502), vec2(_3501, _3502));
                                float _4644 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3508 = _3507 * (((isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0))) * _3484) / ((_3497 * 0.699999988079071044921875) + 1.0));
                                float _3520 = exp2(log2(1.0 / ((_3497 * 3.5) + 5.0)) * 0.25);
                                float _3521 = 1.0 - _712;
                                float _3528 = sqrt(1.0 - ((1.0 - (_3521 * _3521)) * (1.0 - (_3520 * _3520))));
                                float _3529 = _3528 * _3528;
                                float _3530 = _3529 * _3529;
                                float _3531 = _3477 - _2950;
                                float _3532 = _3478 - _2951;
                                float _3533 = _3479 - _2952;
                                float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                                float _3541 = dot(vec3(_652, _655, _658), vec3((-0.0) - _2950, (-0.0) - _2951, (-0.0) - _2952));
                                float _4655 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3544 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3545 = dot(vec3(_652, _655, _658), vec3(_3537 * _3531, _3537 * _3532, _3537 * _3533));
                                float _4666 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3548 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3552 = ((_3548 * _3548) * (_3530 + (-1.0))) + 1.0;
                                float _3553 = _3490 * _3529;
                                float _3554 = _3553 * _3553;
                                float _3560 = ((1.0 - _3554) * dot(vec3(_652, _655, _658), vec3(_3477, _3478, _3479))) + _3554;
                                float _4677 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3562 = 1.0 - _3529;
                                float _3572 = (0.5 / (((_3561 * ((_3544 * _3562) + _3529)) + 9.9999999392252902907785028219223e-09) + (((_3561 * _3562) + _3529) * _3544))) * _3561;
                                float _4688 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3582 = (_3507 * _3484) * (((_3530 * 3.1415927410125732421875) * (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) / ((_3552 * _3552) * ((_3497 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3508 * _3353.z;
                                frontier_phi_88_pred_1 = _3508 * _3353.y;
                                frontier_phi_88_pred_2 = _3508 * _3353.x;
                                frontier_phi_88_pred_3 = _3582 * _3365.z;
                                frontier_phi_88_pred_4 = _3582 * _3365.y;
                                frontier_phi_88_pred_5 = _3582 * _3365.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3591 = frontier_phi_88_pred;
                            _3590 = frontier_phi_88_pred_1;
                            _3589 = frontier_phi_88_pred_2;
                            _3588 = frontier_phi_88_pred_3;
                            _3587 = frontier_phi_88_pred_4;
                            _3586 = frontier_phi_88_pred_5;
                            _3295 = _3589 + _3308;
                            _3296 = _3590 + _3309;
                            _3297 = _3591 + _3310;
                            _3292 = _3586 + _3305;
                            _3293 = _3587 + _3306;
                            _3294 = _3588 + _3307;
                            if (_3312 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3312;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3297;
                        frontier_phi_82_pred_1 = _3296;
                        frontier_phi_82_pred_2 = _3295;
                        frontier_phi_82_pred_3 = _3294;
                        frontier_phi_82_pred_4 = _3293;
                        frontier_phi_82_pred_5 = _3292;
                    }
                    _2935 = frontier_phi_82_pred;
                    _2933 = frontier_phi_82_pred_1;
                    _2931 = frontier_phi_82_pred_2;
                    _2929 = frontier_phi_82_pred_3;
                    _2927 = frontier_phi_82_pred_4;
                    _2925 = frontier_phi_82_pred_5;
                    uint _3091 = _3090 + 1u;
                    if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3084 = _2925;
                        _3085 = _2927;
                        _3086 = _2929;
                        _3087 = _2931;
                        _3088 = _2933;
                        _3089 = _2935;
                        _3090 = _3091;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2931;
                frontier_phi_63_64_ladder_1 = _2935;
                frontier_phi_63_64_ladder_2 = _2933;
                frontier_phi_63_64_ladder_3 = _2929;
                frontier_phi_63_64_ladder_4 = _2927;
                frontier_phi_63_64_ladder_5 = _2925;
            }
            else
            {
                frontier_phi_63_64_ladder = _2809;
                frontier_phi_63_64_ladder_1 = _2813;
                frontier_phi_63_64_ladder_2 = _2811;
                frontier_phi_63_64_ladder_3 = _2807;
                frontier_phi_63_64_ladder_4 = _2805;
                frontier_phi_63_64_ladder_5 = _2803;
            }
            _2924 = frontier_phi_63_64_ladder_5;
            _2926 = frontier_phi_63_64_ladder_4;
            _2928 = frontier_phi_63_64_ladder_3;
            _2930 = frontier_phi_63_64_ladder;
            _2932 = frontier_phi_63_64_ladder_2;
            _2934 = frontier_phi_63_64_ladder_1;
        }
        float _2939 = isnan(1.0) ? _696 : (isnan(_696) ? 1.0 : min(_696, 1.0));
        _2736 = (_2939 * _2930) + _2267;
        _2738 = (_2939 * _2932) + _2269;
        _2740 = (_2939 * _2934) + _2271;
        _2742 = ((_2924 * 0.039999999105930328369140625) * _2939) + _2590;
        _2744 = ((_2926 * 0.039999999105930328369140625) * _2939) + _2592;
        _2746 = ((_2928 * 0.039999999105930328369140625) * _2939) + _2594;
    }
    else
    {
        _2736 = _2267;
        _2738 = _2269;
        _2740 = _2271;
        _2742 = _2590;
        _2744 = _2592;
        _2746 = _2594;
    }
    float _4704 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _4715 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4726 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _2763 = ((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2736 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _696))) + ((_2742 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1533)) * cbPerFrame._m0[3u].x);
    float _2764 = ((isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2738 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _696))) + ((_2744 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1533)) * cbPerFrame._m0[3u].x);
    float _2765 = ((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2740 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _696))) + ((_2746 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1533)) * cbPerFrame._m0[3u].x);
    uint _2766 = _234 + 6u;
    float _2774 = _633 / cbSceneParam._m0[86u].x;
    float _2775 = _634 / cbSceneParam._m0[86u].y;
    vec4 _2789 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2774, _2775, (log2((isnan(cbSceneParam._m0[77u].w) ? _555 : (isnan(_555) ? cbSceneParam._m0[77u].w : min(_555, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2791 = _2789.x;
    float _2792 = _2789.y;
    float _2793 = _2789.z;
    float _2794 = _2789.w;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    if (_555 > cbSceneParam._m0[78u].w)
    {
        float _2828 = isnan(_555) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _555 : min(cbSceneParam._m0[80u].w, _555));
        float _2829 = _2828 / _555;
        float _2840 = _2829 * _606;
        float _2841 = _607 * _2829;
        float _2842 = (-0.0) - _2841;
        float _2844 = _2829 * _608;
        float _2846 = (cbSceneParam._m0[77u].w * _2842) / _2828;
        float _2847 = _2846 + cbSceneParam._m0[79u].w;
        float _2848 = cbSceneParam._m0[79u].w - _2841;
        float _2854 = sqrt(((_2840 * _2840) + (_2841 * _2841)) + (_2844 * _2844));
        float _2857 = (1.0 - (cbSceneParam._m0[77u].w / _2828)) * _2854;
        float _2862 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2864 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3041;
        if (abs((_2842 - _2846) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3041 = ((((_2847 > 0.0) ? exp2(_2862 * _2847) : (2.0 - exp2(_2864 * _2847))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2857;
        }
        else
        {
            float _2985 = 1.0 / cbSceneParam._m0[80u].x;
            float _2986 = isnan(_2848) ? _2847 : (isnan(_2847) ? _2848 : max(_2847, _2848));
            float _2987 = isnan(_2848) ? _2847 : (isnan(_2847) ? _2848 : min(_2847, _2848));
            float _2996 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : min(_2986, 0.0));
            float _2997 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : min(_2987, 0.0));
            _3041 = ((abs(_2854 / _2842) * cbSceneParam._m0[80u].y) * ((((_2996 - _2997) * 2.0) - ((exp2(_2862 * (isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0)))) - exp2(_2862 * (isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))))) * _2985)) - ((exp2(_2864 * _2996) - exp2(_2864 * _2997)) * _2985))) + (_2857 * cbSceneParam._m0[80u].z);
        }
        vec4 _3043 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2774, _2775, 1.0), 0.0);
        float _3052 = exp2((_3041 * (-1.44269502162933349609375)) * (1.0 - _3043.w));
        float _3053 = log2(_3052);
        float _3069 = log2(_2794);
        _2866 = (exp2(_3069 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].x)) * _3043.x) / cbSceneParam._m0[78u].x)) + _2791;
        _2868 = (exp2(_3069 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].y)) * _3043.y) / cbSceneParam._m0[78u].y)) + _2792;
        _2870 = (exp2(_3069 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].z)) * _3043.z) / cbSceneParam._m0[78u].z)) + _2793;
        _2872 = _3052 * _2794;
    }
    else
    {
        _2866 = _2791;
        _2868 = _2792;
        _2870 = _2793;
        _2872 = _2794;
    }
    bool _3079;
    vec4 _2882;
    vec4 _2904;
    float _2906;
    float _2910;
    float _2911;
    float _2912;
    float _2913;
    bool _2923;
    for (;;)
    {
        _2882 = cbMatDynParam._m0[0u];
        float _2884 = roundEven(_2882.y);
        bool _2885 = _2884 == 3.0;
        float _2886 = log2(_2872);
        float _2893 = exp2(_2886 * cbSceneParam._m0[78u].x) * _2763;
        float _2894 = exp2(_2886 * cbSceneParam._m0[78u].y) * _2764;
        float _2895 = exp2(_2886 * cbSceneParam._m0[78u].z) * _2765;
        float _2902 = _622 + (-0.5);
        _2904 = cbMtdParam._m0[1u];
        _2906 = _2904.y * _2902;
        float _2909 = (_2884 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2910 = _2909 * (_2885 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2866)));
        _2911 = _2909 * (_2885 ? _2894 : (_2894 + (cbSceneParam._m0[72u].w * _2868)));
        _2912 = _2909 * (_2885 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2870)));
        _2913 = _2902 * 0.999000012874603271484375;
        _2923 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2923)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2913) < 0.5)
            {
                _3079 = true;
                break;
            }
        }
        uint _3020 = _671 + uint(_2882.w);
        if ((cbInstanceData._m0[_3020].w < 1.0) && ((cbInstanceData._m0[_3020].w + _2913) < 0.5))
        {
            _3079 = true;
            break;
        }
        if ((_2906 + 1.0) < _2904.x)
        {
            _3079 = true;
            break;
        }
        _3079 = false;
        break;
    }
    float _3283;
    if (_3079)
    {
        discard_state = true;
        _3283 = 0.0;
    }
    else
    {
        _3283 = cbInstanceData._m0[_2766].w;
    }
    SV_Target.x = _2910;
    SV_Target.y = _2911;
    SV_Target.z = _2912;
    SV_Target.w = _3283;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2766].w;
    discard_exit();
}


