#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1435;
float _3793;
float _3794;
float _3795;
float _3796;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _363.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].z) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3805 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _439 = (_432 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _440 = (_432 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _441 = (_432 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _363.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[24u].z) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3816 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _518 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439);
    float _521 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440);
    float _524 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441);
    vec4 _542 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _561 = _559.x;
    float _562 = _559.y;
    float _563 = _559.z;
    float _570 = ((_542.x - _561) * _432) + _561;
    float _571 = ((_542.y - _562) * _432) + _562;
    float _572 = ((_542.z - _563) * _432) + _563;
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _597 = ((_584.z - _572) * _505) + _572;
    float _600 = ((((_584.x - _570) * _505) + _570) * 2.0) + (-1.0);
    float _602 = ((((_584.y - _571) * _505) + _571) * 2.0) + (-1.0);
    float _603 = dot(vec2(_600, _602), vec2(_600, _602));
    float _3827 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _608 = sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _634 = (((_622.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _600;
    float _635 = (((_622.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _602;
    float _638 = fma(_608, _243, fma(_635, _250, _634 * _236));
    float _641 = fma(_608, _244, fma(_635, _251, _634 * _237));
    float _644 = fma(_608, _245, fma(_635, _252, _634 * _238));
    float _648 = inversesqrt(dot(vec3(_638, _641, _644), vec3(_638, _641, _644)));
    vec4 _675 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _677 = _675.x;
    float _678 = 1.0 - _677;
    float _684 = (cbMtdParam._m0[19u].x + dot(vec4(_648 * _638, _648 * _641, _648 * _644, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_677 - _678) * cbMtdParam._m0[24u].w) + _678) * cbMtdParam._m0[21u].z);
    float _3838 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _687 = (-0.0) - cbMtdParam._m0[24u].x;
    float _689 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _689 : (isnan(_689) ? 1.0 : min(_689, 1.0));
    float _697 = _685 - ((_685 * TEXCOORD_8.x) * _690);
    float _698 = _685 - ((_685 * TEXCOORD_8.y) * _690);
    float _699 = _685 - ((_685 * TEXCOORD_8.z) * _690);
    float _706 = (_697 * (cbMtdParam._m0[17u].x - _518)) + _518;
    float _707 = (_698 * (cbMtdParam._m0[17u].y - _521)) + _521;
    float _708 = (_699 * (cbMtdParam._m0[17u].z - _524)) + _524;
    vec4 _720 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _722 = _720.x;
    float _723 = 1.0 - _722;
    float _751 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_722 - _723) * cbMtdParam._m0[24u].y) + _723) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3859 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _752 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _760 = ((((cbMtdParam._m0[10u].x - _706) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _752) + _706;
    float _761 = ((((cbMtdParam._m0[10u].y - _707) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _752) + _707;
    float _762 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _708)) * _752) + _708;
    float _766 = (cbMtdParam._m0[19u].w * (_622.z - _597)) + _597;
    vec4 _780 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _787 = (_780.x * 2.0) + (-1.0);
    float _788 = (_780.y * 2.0) + (-1.0);
    float _789 = dot(vec2(_787, _788), vec2(_787, _788));
    float _3870 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _797 = ((_780.z - _766) * _697) + _766;
    float _800 = ((cbMtdParam._m0[23u].y - _797) * _752) + _797;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _825 = (_819.x * 2.0) + (-1.0);
    float _826 = (_819.y * 2.0) + (-1.0);
    float _827 = dot(vec2(_825, _826), vec2(_825, _826));
    float _3881 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _842 = ((sqrt(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) - _608) * _699) + _608;
    float _845 = (((_787 - _634) * _697) + _634) + (cbMtdParam._m0[21u].x * _634);
    float _846 = (((_788 - _635) * _698) + _635) + (cbMtdParam._m0[21u].x * _635);
    float _857 = (((_825 - _845) + (_845 * cbMtdParam._m0[22u].z)) * _752) + _845;
    float _858 = (((_826 - _846) + (_846 * cbMtdParam._m0[22u].z)) * _752) + _846;
    float _859 = (_752 * (sqrt(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) - _842)) + _842;
    float _861 = cbMtdParam._m0[22u].x + _622.w;
    float _864 = fma(_859, _243, fma(_858, _250, _857 * _236));
    float _867 = fma(_859, _244, fma(_858, _251, _857 * _237));
    float _870 = fma(_859, _245, fma(_858, _252, _857 * _238));
    float _874 = inversesqrt(dot(vec3(_864, _867, _870), vec3(_864, _867, _870)));
    float _875 = _874 * _864;
    float _876 = _874 * _867;
    float _877 = _874 * _870;
    float _3892 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _878 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _3914 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _3925 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _3936 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _896 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _946 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _936);
    float _947 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _936);
    float _948 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _936);
    float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
    float _953 = _946 * _952;
    float _954 = _947 * _952;
    float _955 = _948 * _952;
    vec4 _960 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _962 = _960.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1116 = sqrt(((_946 * _946) + (_947 * _947)) + (_948 * _948));
        float _1122 = (cbMatDynParam._m0[5u].x * _1116) + cbMatDynParam._m0[5u].y;
        float _3947 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1127 = (cbMatDynParam._m0[5u].z * _1116) + cbMatDynParam._m0[5u].w;
        float _3958 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) - _1123)) + _1123) < ((_962 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _973 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _974 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _992 = fma(_877, cbSceneParam._m0[5u].z, fma(_876, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _875));
    float _995 = fma(_877, cbSceneParam._m0[6u].z, fma(_876, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _875));
    float _998 = fma(_877, cbSceneParam._m0[7u].z, fma(_876, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _875));
    uint _1011 = _255 + 9u;
    uint _1012 = _1011 + uint(cbMatDynParam._m0[0u].w);
    float _1018 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_1012].x;
    float _1019 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_1012].y;
    float _1020 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_1012].z;
    float _3969 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1021 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1022 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1023 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    vec4 _1032 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _973, cbSceneParam._m0[86u].y * _974));
    float _1036 = ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * TEXCOORD_5.w) * _1032.x;
    float _1037 = dot(vec3(_875, _876, _877), vec3(_953, _954, _955));
    float _1040 = _1037 * 2.0;
    float _1044 = (_1040 * _875) - _953;
    float _1045 = (_1040 * _876) - _954;
    float _1046 = (_1040 * _877) - _955;
    float _1050 = abs(dot(vec3(_953, _954, _955), vec3(_875, _876, _877)));
    float _4002 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1052 = sqrt(_878);
    float _1065 = exp2((_1052 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1052 * 3.0));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1434;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1159 = fma(_1105, cbModelParam._m0[26u].z, fma(_1101, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1097));
        float _1163 = fma(_1105, cbModelParam._m0[27u].z, fma(_1101, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1097));
        float _1167 = fma(_1105, cbModelParam._m0[28u].z, fma(_1101, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1097));
        float _1192 = _1097 + _875;
        float _1193 = _1101 + _876;
        float _1194 = _1105 + _877;
        float _1204 = fma(_1194, cbModelParam._m0[26u].z, fma(_1193, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1192)) - _1159;
        float _1205 = fma(_1194, cbModelParam._m0[27u].z, fma(_1193, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1192)) - _1163;
        float _1206 = fma(_1194, cbModelParam._m0[28u].z, fma(_1193, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1192)) - _1167;
        float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
        float _1223 = ((_1210 * _1204) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1159 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1210 * _1205) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1163 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1210 * _1206) / cbModelParam._m0[34u].z) + ((((((_1167 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        float _1262 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1228.x + (-0.5));
        float _1264 = _1262 * (_1228.y + (-0.5));
        float _1265 = _1262 * (_1228.z + (-0.5));
        float _1272 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1235.x + (-0.5));
        float _1274 = _1272 * (_1235.y + (-0.5));
        float _1275 = _1272 * (_1235.z + (-0.5));
        float _1282 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1242.x + (-0.5));
        float _1284 = _1282 * (_1242.y + (-0.5));
        float _1285 = _1282 * (_1242.z + (-0.5));
        float _1292 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1249.x + (-0.5));
        float _1294 = _1292 * (_1249.y + (-0.5));
        float _1295 = _1292 * (_1249.z + (-0.5));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = _1263 * 0.5;
        float _1300 = _1273 * 0.5;
        float _1301 = _1283 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1316 = (dot(vec3(_875, _876, _877), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1326 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4050 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1328 + 1.0))) + _1333) * _1296;
        float _1343 = _1264 * 0.5;
        float _1344 = _1274 * 0.5;
        float _1345 = _1284 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_875, _876, _877), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4083 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1370 + 1.0))) + _1375) * _1297;
        float _1385 = _1265 * 0.5;
        float _1386 = _1275 * 0.5;
        float _1387 = _1285 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_875, _876, _877), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4116 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1412 + 1.0))) + _1417) * _1298;
        _1434 = _1265;
        _1436 = _1264;
        _1437 = _1263;
        _1438 = _1275;
        _1439 = _1274;
        _1440 = _1273;
        _1441 = _1285;
        _1442 = _1284;
        _1443 = _1283;
        _1444 = _1298;
        _1445 = _1297;
        _1446 = _1296;
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
    }
    else
    {
        _1434 = _1435;
        _1436 = _1435;
        _1437 = _1435;
        _1438 = _1435;
        _1439 = _1435;
        _1440 = _1435;
        _1441 = _1435;
        _1442 = _1435;
        _1443 = _1435;
        _1444 = _1435;
        _1445 = _1435;
        _1446 = _1435;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1476 = fma(_1105, cbModelParam._m0[30u].z, fma(_1101, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097));
        float _1480 = fma(_1105, cbModelParam._m0[31u].z, fma(_1101, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097));
        float _1484 = fma(_1105, cbModelParam._m0[32u].z, fma(_1101, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097));
        float _1507 = _1097 + _875;
        float _1508 = _1101 + _876;
        float _1509 = _1105 + _877;
        float _1519 = fma(_1509, cbModelParam._m0[30u].z, fma(_1508, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1507)) - _1476;
        float _1520 = fma(_1509, cbModelParam._m0[31u].z, fma(_1508, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1507)) - _1480;
        float _1521 = fma(_1509, cbModelParam._m0[32u].z, fma(_1508, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1507)) - _1484;
        float _1525 = inversesqrt(dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521)));
        float _1538 = ((_1525 * _1519) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1476 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1539 = ((_1525 * _1520) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1480 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1540 = ((_1525 * _1521) / cbModelParam._m0[35u].z) + ((((((_1484 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        float _1575 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1542.x + (-0.5));
        float _1577 = _1575 * (_1542.y + (-0.5));
        float _1578 = _1575 * (_1542.z + (-0.5));
        float _1585 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1549.x + (-0.5));
        float _1587 = _1585 * (_1549.y + (-0.5));
        float _1588 = _1585 * (_1549.z + (-0.5));
        float _1595 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1556.x + (-0.5));
        float _1597 = _1595 * (_1556.y + (-0.5));
        float _1598 = _1595 * (_1556.z + (-0.5));
        float _1605 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1563.x + (-0.5));
        float _1607 = _1605 * (_1563.y + (-0.5));
        float _1608 = _1605 * (_1563.z + (-0.5));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = _1576 * 0.5;
        float _1613 = _1586 * 0.5;
        float _1614 = _1596 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_875, _876, _877), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4179 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1639 + 1.0))) + _1644) * _1609;
        float _1654 = _1577 * 0.5;
        float _1655 = _1587 * 0.5;
        float _1656 = _1597 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_875, _876, _877), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4212 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1681 + 1.0))) + _1686) * _1610;
        float _1696 = _1578 * 0.5;
        float _1697 = _1588 * 0.5;
        float _1698 = _1598 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_875, _876, _877), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4245 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1723 + 1.0))) + _1728) * _1611;
        _1745 = _1578;
        _1746 = _1577;
        _1747 = _1576;
        _1748 = _1588;
        _1749 = _1587;
        _1750 = _1586;
        _1751 = _1598;
        _1752 = _1597;
        _1753 = _1596;
        _1754 = _1611;
        _1755 = _1610;
        _1756 = _1609;
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
        _1759 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
    }
    else
    {
        _1745 = _1435;
        _1746 = _1435;
        _1747 = _1435;
        _1748 = _1435;
        _1749 = _1435;
        _1750 = _1435;
        _1751 = _1435;
        _1752 = _1435;
        _1753 = _1435;
        _1754 = _1435;
        _1755 = _1435;
        _1756 = _1435;
        _1757 = 0.0;
        _1758 = 0.0;
        _1759 = 0.0;
    }
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1447)) + _1447;
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1448)) + _1448;
    float _1771 = (cbModelParam._m0[1u].x * (_1759 - _1449)) + _1449;
    float _1792 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1770, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1795 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1770, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1798 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1770, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1769));
    float _1813 = _1044 * 0.5;
    float _1814 = _1045 * 0.5;
    float _1815 = _1046 * 0.5;
    float _1816 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1747, _1750, _1753, _1756));
    float _1819 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1822 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1856;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1829 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1434, _1438, _1441, _1444));
        float _1833 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1436, _1439, _1442, _1445));
        float _1837 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1437, _1440, _1443, _1446));
        float _1844 = dot(vec4(cbModelParam._m0[39u]), vec4(_1813, _1814, _1815, 1.0));
        _1856 = dot(vec3(isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1844) ? 0.0 : (isnan(0.0) ? _1844 : max(0.0, _1844))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1856 = 1.0;
    }
    float _1867;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1858 = dot(vec4(cbModelParam._m0[40u]), vec4(_1813, _1814, _1815, 1.0));
        _1867 = dot(vec3(isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1858) ? 0.0 : (isnan(0.0) ? _1858 : max(0.0, _1858))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1867 = 1.0;
    }
    float _1871 = (_1867 * cbModelParam._m0[1u].x) + (_1856 * (1.0 - cbModelParam._m0[1u].x));
    float _1881 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _878);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1881 : min(cbModelParam._m0[25u].z, _1881));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1930 = fma(_1105, cbModelParam._m0[13u].z, fma(_1101, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1097)) + cbModelParam._m0[13u].w;
        float _1934 = fma(_1105, cbModelParam._m0[14u].z, fma(_1101, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1097)) + cbModelParam._m0[14u].w;
        float _1938 = fma(_1105, cbModelParam._m0[15u].z, fma(_1101, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1097)) + cbModelParam._m0[15u].w;
        float _1941 = fma(_1046, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044));
        float _1944 = fma(_1046, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044));
        float _1947 = fma(_1046, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044));
        float _1975;
        if (_1941 > 0.0)
        {
            _1975 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1975 = frontier_phi_17_15_ladder;
        }
        float _2176;
        if (_1944 > 0.0)
        {
            _2176 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2176 = frontier_phi_26_22_ladder;
        }
        float _2419;
        if (_1947 > 0.0)
        {
            _2419 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2419 = frontier_phi_38_33_ladder;
        }
        float _2421 = isnan(_2176) ? _1975 : (isnan(_1975) ? _2176 : min(_1975, _2176));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1941) + _1930;
        float _2427 = (_2422 * _1944) + _1934;
        float _2428 = (_2422 * _1947) + _1938;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2431 = (-1.0) - _2429;
        float _2433 = _2429 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2428 > _2433) || ((_2428 < _2431) || ((_2427 > _2433) || ((_2427 < _2431) || ((_2426 < _2431) || (_2426 > _2433))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2428, cbModelParam._m0[9u].z, fma(_2427, cbModelParam._m0[9u].y, _2426 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2428, cbModelParam._m0[10u].z, fma(_2427, cbModelParam._m0[10u].y, _2426 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2428, cbModelParam._m0[11u].z, fma(_2427, cbModelParam._m0[11u].y, _2426 * cbModelParam._m0[11u].x))), _1882);
            frontier_phi_16_38_ladder = _2552.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2552.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2552.x * cbModelParam._m0[1u].y;
        }
        _1963 = frontier_phi_16_38_ladder_2;
        _1965 = frontier_phi_16_38_ladder_1;
        _1967 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1951 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1044, _1045, _1046), _1882);
        _1963 = _1951.x * cbModelParam._m0[1u].y;
        _1965 = _1951.y * cbModelParam._m0[1u].y;
        _1967 = _1951.z * cbModelParam._m0[1u].y;
    }
    float _1971 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _878);
    float _1972 = isnan(_1971) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1971 : min(cbModelParam._m0[25u].w, _1971));
    float _2062;
    float _2064;
    float _2066;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2026 = fma(_1105, cbModelParam._m0[21u].z, fma(_1101, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1097)) + cbModelParam._m0[21u].w;
        float _2030 = fma(_1105, cbModelParam._m0[22u].z, fma(_1101, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1097)) + cbModelParam._m0[22u].w;
        float _2034 = fma(_1105, cbModelParam._m0[23u].z, fma(_1101, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1097)) + cbModelParam._m0[23u].w;
        float _2037 = fma(_1046, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044));
        float _2040 = fma(_1046, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044));
        float _2043 = fma(_1046, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044));
        float _2181;
        if (_2037 > 0.0)
        {
            _2181 = abs((1.0 - _2026) / _2037);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2026 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2181 = frontier_phi_28_24_ladder;
        }
        float _2446;
        if (_2040 > 0.0)
        {
            _2446 = abs((1.0 - _2030) / _2040);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2030 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2446 = frontier_phi_40_35_ladder;
        }
        float _2651;
        if (_2043 > 0.0)
        {
            _2651 = abs((1.0 - _2034) / _2043);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2034 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2651 = frontier_phi_49_46_ladder;
        }
        float _2653 = isnan(_2446) ? _2181 : (isnan(_2181) ? _2446 : min(_2181, _2446));
        float _2654 = isnan(_2651) ? _2653 : (isnan(_2653) ? _2651 : min(_2653, _2651));
        float _2658 = (_2654 * _2037) + _2026;
        float _2659 = (_2654 * _2040) + _2030;
        float _2660 = (_2654 * _2043) + _2034;
        float _2661 = _2654 * 9.9999997473787516355514526367188e-05;
        float _2662 = (-1.0) - _2661;
        float _2664 = _2661 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2660 > _2664) || ((_2660 < _2662) || ((_2659 > _2664) || ((_2659 < _2662) || ((_2658 < _2662) || (_2658 > _2664))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2859 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2660, cbModelParam._m0[17u].z, fma(_2659, cbModelParam._m0[17u].y, _2658 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2660, cbModelParam._m0[18u].z, fma(_2659, cbModelParam._m0[18u].y, _2658 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2660, cbModelParam._m0[19u].z, fma(_2659, cbModelParam._m0[19u].y, _2658 * cbModelParam._m0[19u].x))), _1972);
            frontier_phi_25_49_ladder = _2859.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2859.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2859.x * cbModelParam._m0[1u].z;
        }
        _2062 = frontier_phi_25_49_ladder_2;
        _2064 = frontier_phi_25_49_ladder_1;
        _2066 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1044, _1045, _1046), _1972);
        _2062 = _2046.x * cbModelParam._m0[1u].z;
        _2064 = _2046.y * cbModelParam._m0[1u].z;
        _2066 = _2046.z * cbModelParam._m0[1u].z;
    }
    float _2078 = ((((1.0 - _1065) * ((_1052 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1065 * _1052)) * _1036;
    float _2079 = _2078 * ((cbModelParam._m0[1u].w * (_2062 - _1963)) + _1963);
    float _2080 = _2078 * ((cbModelParam._m0[1u].w * (_2064 - _1965)) + _1965);
    float _2081 = _2078 * ((cbModelParam._m0[1u].w * (_2066 - _1967)) + _1967);
    float _2084 = fma(_2081, cbSceneParam._m0[89u].z, fma(_2080, cbSceneParam._m0[89u].y, _2079 * cbSceneParam._m0[89u].x));
    float _2087 = fma(_2081, cbSceneParam._m0[90u].z, fma(_2080, cbSceneParam._m0[90u].y, _2079 * cbSceneParam._m0[90u].x));
    float _2090 = fma(_2081, cbSceneParam._m0[91u].z, fma(_2080, cbSceneParam._m0[91u].y, _2079 * cbSceneParam._m0[91u].x));
    uvec4 _2100 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2102 = _2100.x * 14u;
    uint _2103 = _2102 + 13u;
    float _2110 = _1036 + (-1.0);
    float _2115 = (cbLight._m0[_2103].x * _2110) + 1.0;
    float _2116 = (cbLight._m0[_2103].y * _2110) + 1.0;
    float _2117 = (cbLight._m0[_2103].z * _2110) + 1.0;
    float _2118 = (cbLight._m0[_2103].w * _2110) + 1.0;
    uint _2119 = _2102 + 5u;
    float _2125 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
    uint _2129 = _2102 + 4u;
    float _2135 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
    uint _2139 = _2102 | 1u;
    float _2150 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_875, _876, _877));
    float _2153 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_875, _876, _877));
    float _4381 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _4392 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2160 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.3183098733425140380859375;
    float _2167 = ((cbLight._m0[_2119].x * _2125) * _2160) + ((cbLight._m0[_2129].x * _2135) * _2158);
    float _2168 = ((_2125 * cbLight._m0[_2119].y) * _2160) + ((_2135 * cbLight._m0[_2129].y) * _2158);
    float _2169 = ((_2125 * cbLight._m0[_2119].z) * _2160) + ((_2135 * cbLight._m0[_2129].z) * _2158);
    uvec4 _2173 = floatBitsToUint(cbLight._m0[_2102 + 12u]);
    bool _2175 = _2173.x == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2175)
    {
        _2186 = _2167;
        _2188 = _2168;
        _2190 = _2169;
    }
    else
    {
        uint _2194 = _2102 + 6u;
        float _2210 = (dot(vec3(cbLight._m0[_2102 + 2u].xyz), vec3(_875, _876, _877)) * 0.5) + 0.5;
        float _2211 = _2210 * _2210;
        float _4403 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2212 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2213 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2186 = (((cbLight._m0[_2194].x * 0.3183098733425140380859375) * _2212) * _2213) + _2167;
        _2188 = (((cbLight._m0[_2194].y * 0.3183098733425140380859375) * _2212) * _2213) + _2168;
        _2190 = (((cbLight._m0[_2194].z * 0.3183098733425140380859375) * _2212) * _2213) + _2169;
    }
    bool _2193 = _2173.y == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2193)
    {
        _2231 = _2186;
        _2233 = _2188;
        _2235 = _2190;
    }
    else
    {
        uint _2390 = _2102 + 7u;
        float _2406 = (dot(vec3(cbLight._m0[_2102 + 3u].xyz), vec3(_875, _876, _877)) * 0.5) + 0.5;
        float _2407 = _2406 * _2406;
        float _4419 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2408 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2409 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2231 = (((cbLight._m0[_2390].x * 0.3183098733425140380859375) * _2408) * _2409) + _2186;
        _2233 = (((cbLight._m0[_2390].y * 0.3183098733425140380859375) * _2408) * _2409) + _2188;
        _2235 = (((cbLight._m0[_2390].z * 0.3183098733425140380859375) * _2408) * _2409) + _2190;
    }
    uint _2238 = _2102 + 8u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _878) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_2102].x + _953;
    float _2254 = cbLight._m0[_2102].y + _954;
    float _2255 = cbLight._m0[_2102].z + _955;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2102].xyz));
    float _4435 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _4446 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _2267 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2268 = dot(vec3(_875, _876, _877), vec3(_2260, _2261, _2262));
    float _4457 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2272 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2260, _2261, _2262));
    float _4468 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2276 = _2252 * _2252;
    float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
    float _2291 = (exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2292 = 1.0 - _2252;
    float _2303 = (0.5 / (((_2267 * ((_2266 * _2292) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2292) + _2252) * _2266))) * _2266;
    float _4479 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
    uint _2316 = _2102 + 9u;
    float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _878) * 0.949999988079071044921875);
    float _2328 = _2327 * _2327;
    float _2329 = cbLight._m0[_2139].x + _953;
    float _2330 = cbLight._m0[_2139].y + _954;
    float _2331 = cbLight._m0[_2139].z + _955;
    float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
    float _2336 = _2335 * _2329;
    float _2337 = _2335 * _2330;
    float _2338 = _2335 * _2331;
    float _2339 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2139].xyz));
    float _4490 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2343 = dot(vec3(_875, _876, _877), vec3(_2336, _2337, _2338));
    float _4501 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2347 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2336, _2337, _2338));
    float _4512 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2351 = _2328 * _2328;
    float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
    float _2364 = (exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2365 = 1.0 - _2328;
    float _2375 = (0.5 / (((_2267 * ((_2342 * _2365) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2365) + _2328) * _2342))) * _2342;
    float _4523 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2377 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
    float _2387 = (((_2364 * cbLight._m0[_2316].x) * _2377) * _2125) + (((_2291 * cbLight._m0[_2238].x) * _2305) * _2135);
    float _2388 = (((_2364 * cbLight._m0[_2316].y) * _2377) * _2125) + (((_2291 * cbLight._m0[_2238].y) * _2305) * _2135);
    float _2389 = (((_2364 * cbLight._m0[_2316].z) * _2377) * _2125) + (((_2291 * cbLight._m0[_2238].z) * _2305) * _2135);
    float _2451;
    float _2453;
    float _2455;
    if (_2175)
    {
        _2451 = _2387;
        _2453 = _2388;
        _2455 = _2389;
    }
    else
    {
        uint _2457 = _2102 + 2u;
        uint _2461 = _2102 + 10u;
        float _2475 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _878) * 0.949999988079071044921875);
        float _2476 = _2475 * _2475;
        float _2477 = cbLight._m0[_2457].x + _953;
        float _2478 = cbLight._m0[_2457].y + _954;
        float _2479 = cbLight._m0[_2457].z + _955;
        float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
        float _2484 = _2483 * _2477;
        float _2485 = _2483 * _2478;
        float _2486 = _2483 * _2479;
        float _2487 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2457].xyz));
        float _4534 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2491 = dot(vec3(_875, _876, _877), vec3(_2484, _2485, _2486));
        float _4545 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2495 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2484, _2485, _2486));
        float _4556 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2499 = _2476 * _2476;
        float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
        float _2512 = (exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2513 = 1.0 - _2476;
        float _2523 = (0.5 / (((_2267 * ((_2490 * _2513) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2513) + _2476) * _2490))) * _2490;
        float _4567 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2525 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
        float _2526 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2451 = (((_2512 * cbLight._m0[_2461].x) * _2525) * _2526) + _2387;
        _2453 = (((_2512 * cbLight._m0[_2461].y) * _2525) * _2526) + _2388;
        _2455 = (((_2512 * cbLight._m0[_2461].z) * _2525) * _2526) + _2389;
    }
    float _2561;
    float _2563;
    float _2565;
    if (_2193)
    {
        _2561 = _2451;
        _2563 = _2453;
        _2565 = _2455;
    }
    else
    {
        uint _2572 = _2102 + 3u;
        uint _2576 = _2102 + 11u;
        float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _878) * 0.949999988079071044921875);
        float _2591 = _2590 * _2590;
        float _2592 = cbLight._m0[_2572].x + _953;
        float _2593 = cbLight._m0[_2572].y + _954;
        float _2594 = cbLight._m0[_2572].z + _955;
        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
        float _2599 = _2598 * _2592;
        float _2600 = _2598 * _2593;
        float _2601 = _2598 * _2594;
        float _2602 = dot(vec3(_875, _876, _877), vec3(cbLight._m0[_2572].xyz));
        float _4583 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2606 = dot(vec3(_875, _876, _877), vec3(_2599, _2600, _2601));
        float _4594 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2610 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2599, _2600, _2601));
        float _4605 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2614 = _2591 * _2591;
        float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
        float _2627 = (exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2628 = 1.0 - _2591;
        float _2638 = (0.5 / (((_2267 * ((_2605 * _2628) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2628) + _2591) * _2605))) * _2605;
        float _4616 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2640 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
        float _2641 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2561 = (((_2627 * cbLight._m0[_2576].x) * _2640) * _2641) + _2451;
        _2563 = (((_2627 * cbLight._m0[_2576].y) * _2640) * _2641) + _2453;
        _2565 = (((_2627 * cbLight._m0[_2576].z) * _2640) * _2641) + _2455;
    }
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_2100.y == 0u)
    {
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2716;
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2716;
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2716;
        uvec4 _2731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2732 = _2731.x;
        uint _2743 = uint((float(_2731.y) * floor(float(uint(cbSceneParam._m0[85u].y * _974) / _2732))) + floor(float(uint(cbSceneParam._m0[85u].x * _973) / _2732)));
        float _2753 = (log2(_2719 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2754 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        uint _2757 = uint(isnan(14.0) ? _2754 : (isnan(_2754) ? 14.0 : min(_2754, 14.0)));
        uvec4 _2762 = texelFetch(g_lightClusterGridBuffer, int(((_2757 << 2u) + (_2743 << 6u)) >> 2u));
        uint _2763 = _2762.x;
        uint _2764 = _2731.z;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        if (((((1u << ((_2764 >> 4u) & 15u)) + 4294967295u) & _2763) == 0u) || ((_2764 & 240u) == 0u))
        {
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
        }
        else
        {
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            uint _3022 = 0u;
            uint _3031;
            bool _3032;
            for (;;)
            {
                _3031 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                _3032 = _3031 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3032)
                {
                    frontier_phi_66_pred = _3016;
                    frontier_phi_66_pred_1 = _3021;
                    frontier_phi_66_pred_2 = _3020;
                    frontier_phi_66_pred_3 = _3019;
                    frontier_phi_66_pred_4 = _3018;
                    frontier_phi_66_pred_5 = _3017;
                }
                else
                {
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    uint _3167;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3031;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    for (;;)
                    {
                        uint _3171 = uint(findLSB(_3167)) + (_3022 << 5u);
                        uint _3168 = (_3167 + 4294967295u) & _3167;
                        uint _3173 = _3171 * 48u;
                        vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 3u)).x));
                        uint _3193 = (_3171 * 48u) + 4u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 3u)).x));
                        uint _3212 = (_3171 * 48u) + 8u;
                        vec3 _3223 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x));
                        float _3227 = _3187.x - _2717;
                        float _3228 = _3187.y - _2718;
                        float _3229 = _3187.z - _2719;
                        float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                        float _3233 = inversesqrt(_3230);
                        float _3234 = _3233 * _3227;
                        float _3235 = _3233 * _3228;
                        float _3236 = _3233 * _3229;
                        float _3237 = dot(vec3(_992, _995, _998), vec3(_3234, _3235, _3236));
                        float _3242 = 1.0 - (_3230 * _3187.w);
                        float _4642 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3243 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3244 = sqrt(_3230) * _3206.w;
                        float _3247 = 1.39999997615814208984375 / (_3244 + 1.39999997615814208984375);
                        float _3248 = _3247 * _3247;
                        float _3251 = ((1.0 - _3248) * _3237) + _3248;
                        float _3254 = _3244 * _3244;
                        float _3258 = ((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3243) / ((_3254 * 0.699999988079071044921875) + 1.0);
                        float _3262 = (-0.0) - _2717;
                        float _3263 = (-0.0) - _2718;
                        float _3264 = (-0.0) - _2719;
                        float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                        float _3269 = _3268 * _3262;
                        float _3270 = _3268 * _3263;
                        float _3271 = _3268 * _3264;
                        float _3279 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                        float _3280 = 1.0 - _1052;
                        float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                        float _3288 = _3287 * _3287;
                        float _3289 = _3288 * _3288;
                        float _3290 = _3269 + _3234;
                        float _3291 = _3270 + _3235;
                        float _3292 = _3271 + _3236;
                        float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                        float _3300 = dot(vec3(_992, _995, _998), vec3(_3269, _3270, _3271));
                        float _4658 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3303 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3304 = dot(vec3(_992, _995, _998), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                        float _4669 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                        float _3312 = _3247 * _3288;
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3237) + _3313;
                        float _4680 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3317 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3318 = 1.0 - _3288;
                        float _3328 = (0.5 / (((_3317 * ((_3303 * _3318) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3317 * _3318) + _3288) * _3303))) * _3317;
                        float _4691 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3339 = (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) / ((_3311 * _3311) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125))) * _3243;
                        _3091 = (_3258 * _3206.x) + _3164;
                        _3092 = (_3258 * _3206.y) + _3165;
                        _3093 = (_3258 * _3206.z) + _3166;
                        _3088 = (_3339 * _3223.x) + _3161;
                        _3089 = (_3339 * _3223.y) + _3162;
                        _3090 = (_3339 * _3223.z) + _3163;
                        if (_3168 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3168;
                        }
                    }
                    frontier_phi_66_pred = _3088;
                    frontier_phi_66_pred_1 = _3093;
                    frontier_phi_66_pred_2 = _3092;
                    frontier_phi_66_pred_3 = _3091;
                    frontier_phi_66_pred_4 = _3090;
                    frontier_phi_66_pred_5 = _3089;
                }
                _2865 = frontier_phi_66_pred;
                _2875 = frontier_phi_66_pred_1;
                _2873 = frontier_phi_66_pred_2;
                _2871 = frontier_phi_66_pred_3;
                _2869 = frontier_phi_66_pred_4;
                _2867 = frontier_phi_66_pred_5;
                uint _3023 = _3022 + 1u;
                if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3016 = _2865;
                    _3017 = _2867;
                    _3018 = _2869;
                    _3019 = _2871;
                    _3020 = _2873;
                    _3021 = _2875;
                    _3022 = _3023;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
        }
        uvec4 _2878 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2879 = _2878.z;
        uint _2881 = (_2879 >> 8u) & 15u;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((4294967295u << _2881) & _2763) == 0u)
        {
            _2984 = _2864;
            _2986 = _2866;
            _2988 = _2868;
            _2990 = _2870;
            _2992 = _2872;
            _2994 = _2874;
        }
        else
        {
            float _3009 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
            float _3010 = _3009 * _2717;
            float _3011 = _3009 * _2718;
            float _3012 = _3009 * _2719;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2881 < ((_2879 >> 12u) & 15u))
            {
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _3144 = _2864;
                float _3145 = _2866;
                float _3146 = _2868;
                float _3147 = _2870;
                float _3148 = _2872;
                float _3149 = _2874;
                uint _3150 = _2881;
                uint _3159;
                bool _3160;
                for (;;)
                {
                    _3159 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3150 << 2u)) >> 2u)).x;
                    _3160 = _3159 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3160)
                    {
                        frontier_phi_77_pred = _3149;
                        frontier_phi_77_pred_1 = _3148;
                        frontier_phi_77_pred_2 = _3147;
                        frontier_phi_77_pred_3 = _3146;
                        frontier_phi_77_pred_4 = _3145;
                        frontier_phi_77_pred_5 = _3144;
                    }
                    else
                    {
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3366 = _3144;
                        float _3367 = _3145;
                        float _3368 = _3146;
                        float _3369 = _3147;
                        float _3370 = _3148;
                        float _3371 = _3149;
                        uint _3372 = _3159;
                        uint _3373;
                        vec4 _3398;
                        float _3399;
                        vec4 _3414;
                        vec3 _3426;
                        vec4 _3441;
                        vec4 _3456;
                        float _3502;
                        bool _3503;
                        for (;;)
                        {
                            uint _3383 = ((_3150 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3372));
                            _3373 = (_3372 + 4294967295u) & _3372;
                            uint _3385 = _3383 * 40u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3399 = _3398.w;
                            uint _3401 = (_3383 * 40u) + 4u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3383 * 40u) + 8u;
                            _3426 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x));
                            uint _3428 = (_3383 * 40u) + 16u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3383 * 40u) + 20u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3383 * 40u) + 24u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3477 = (_3383 * 40u) + 28u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3502 = fma(_2719, _3490.z, fma(_2718, _3490.y, _3490.x * _2717)) + _3490.w;
                            _3503 = !((fma(_2719, _3471.z, fma(_2718, _3471.y, _3471.x * _2717)) + _3471.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3503)
                            {
                                float _3530 = _3398.x - _2717;
                                float _3531 = _3398.y - _2718;
                                float _3532 = _3398.z - _2719;
                                float _3533 = dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532));
                                float _3536 = inversesqrt(_3533);
                                float _3537 = _3536 * _3530;
                                float _3538 = _3536 * _3531;
                                float _3539 = _3536 * _3532;
                                float _3543 = 1.0 - (_3533 / (_3399 * _3399));
                                float _4702 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3548 = sqrt(_3533) * _3414.w;
                                float _3550 = 1.39999997615814208984375 / (_3548 + 1.39999997615814208984375);
                                float _3551 = _3550 * _3550;
                                float _3554 = ((1.0 - _3551) * dot(vec3(_3537, _3538, _3539), vec3(_992, _995, _998))) + _3551;
                                float _3557 = _3548 * _3548;
                                float _3561 = (fma(_2719, _3441.z, fma(_2718, _3441.y, _3441.x * _2717)) + _3441.w) / _3502;
                                float _3562 = (fma(_2719, _3456.z, fma(_2718, _3456.y, _3456.x * _2717)) + _3456.w) / _3502;
                                float _3566 = 1.0 - dot(vec2(_3561, _3562), vec2(_3561, _3562));
                                float _4718 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3568 = _3567 * (((isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0))) * _3544) / ((_3557 * 0.699999988079071044921875) + 1.0));
                                float _3580 = exp2(log2(1.0 / ((_3557 * 3.5) + 5.0)) * 0.25);
                                float _3581 = 1.0 - _1052;
                                float _3588 = sqrt(1.0 - ((1.0 - (_3581 * _3581)) * (1.0 - (_3580 * _3580))));
                                float _3589 = _3588 * _3588;
                                float _3590 = _3589 * _3589;
                                float _3591 = _3537 - _3010;
                                float _3592 = _3538 - _3011;
                                float _3593 = _3539 - _3012;
                                float _3597 = inversesqrt(dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593)));
                                float _3601 = dot(vec3(_992, _995, _998), vec3((-0.0) - _3010, (-0.0) - _3011, (-0.0) - _3012));
                                float _4729 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3605 = dot(vec3(_992, _995, _998), vec3(_3597 * _3591, _3597 * _3592, _3597 * _3593));
                                float _4740 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3612 = ((_3608 * _3608) * (_3590 + (-1.0))) + 1.0;
                                float _3613 = _3550 * _3589;
                                float _3614 = _3613 * _3613;
                                float _3620 = ((1.0 - _3614) * dot(vec3(_992, _995, _998), vec3(_3537, _3538, _3539))) + _3614;
                                float _4751 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3622 = 1.0 - _3589;
                                float _3632 = (0.5 / (((_3621 * ((_3604 * _3622) + _3589)) + 9.9999999392252902907785028219223e-09) + (((_3621 * _3622) + _3589) * _3604))) * _3621;
                                float _4762 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3642 = (_3567 * _3544) * (((_3590 * 3.1415927410125732421875) * (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) / ((_3612 * _3612) * ((_3557 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3568 * _3414.y;
                                frontier_phi_83_pred_1 = _3568 * _3414.x;
                                frontier_phi_83_pred_2 = _3642 * _3426.z;
                                frontier_phi_83_pred_3 = _3642 * _3426.y;
                                frontier_phi_83_pred_4 = _3642 * _3426.x;
                                frontier_phi_83_pred_5 = _3568 * _3414.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3650 = frontier_phi_83_pred;
                            _3649 = frontier_phi_83_pred_1;
                            _3648 = frontier_phi_83_pred_2;
                            _3647 = frontier_phi_83_pred_3;
                            _3646 = frontier_phi_83_pred_4;
                            _3651 = frontier_phi_83_pred_5;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            if (_3373 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3373;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3358;
                        frontier_phi_77_pred_1 = _3357;
                        frontier_phi_77_pred_2 = _3356;
                        frontier_phi_77_pred_3 = _3355;
                        frontier_phi_77_pred_4 = _3354;
                        frontier_phi_77_pred_5 = _3353;
                    }
                    _2995 = frontier_phi_77_pred;
                    _2993 = frontier_phi_77_pred_1;
                    _2991 = frontier_phi_77_pred_2;
                    _2989 = frontier_phi_77_pred_3;
                    _2987 = frontier_phi_77_pred_4;
                    _2985 = frontier_phi_77_pred_5;
                    uint _3151 = _3150 + 1u;
                    if (_3151 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3144 = _2985;
                        _3145 = _2987;
                        _3146 = _2989;
                        _3147 = _2991;
                        _3148 = _2993;
                        _3149 = _2995;
                        _3150 = _3151;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2989;
                frontier_phi_58_59_ladder_1 = _2995;
                frontier_phi_58_59_ladder_2 = _2993;
                frontier_phi_58_59_ladder_3 = _2991;
                frontier_phi_58_59_ladder_4 = _2987;
                frontier_phi_58_59_ladder_5 = _2985;
            }
            else
            {
                frontier_phi_58_59_ladder = _2868;
                frontier_phi_58_59_ladder_1 = _2874;
                frontier_phi_58_59_ladder_2 = _2872;
                frontier_phi_58_59_ladder_3 = _2870;
                frontier_phi_58_59_ladder_4 = _2866;
                frontier_phi_58_59_ladder_5 = _2864;
            }
            _2984 = frontier_phi_58_59_ladder_5;
            _2986 = frontier_phi_58_59_ladder_4;
            _2988 = frontier_phi_58_59_ladder;
            _2990 = frontier_phi_58_59_ladder_3;
            _2992 = frontier_phi_58_59_ladder_2;
            _2994 = frontier_phi_58_59_ladder_1;
        }
        float _2999 = isnan(1.0) ? _1036 : (isnan(_1036) ? 1.0 : min(_1036, 1.0));
        _2776 = (_2999 * _2990) + _2231;
        _2778 = (_2999 * _2992) + _2233;
        _2780 = (_2999 * _2994) + _2235;
        _2782 = ((_2984 * 0.039999999105930328369140625) * _2999) + _2561;
        _2784 = ((_2986 * 0.039999999105930328369140625) * _2999) + _2563;
        _2786 = ((_2988 * 0.039999999105930328369140625) * _2999) + _2565;
    }
    else
    {
        _2776 = _2231;
        _2778 = _2233;
        _2780 = _2235;
        _2782 = _2561;
        _2784 = _2563;
        _2786 = _2565;
    }
    float _4778 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _4789 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _4800 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _2803 = ((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2776 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1036))) + ((_2782 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1871)) * cbPerFrame._m0[3u].x);
    float _2804 = ((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2778 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1036))) + ((_2784 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1871)) * cbPerFrame._m0[3u].x);
    float _2805 = ((isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2780 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1036))) + ((_2786 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1871)) * cbPerFrame._m0[3u].x);
    uint _2806 = _255 + 6u;
    float _2814 = _973 / cbSceneParam._m0[86u].x;
    float _2815 = _974 / cbSceneParam._m0[86u].y;
    vec4 _2829 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2814, _2815, (log2((isnan(cbSceneParam._m0[77u].w) ? _896 : (isnan(_896) ? cbSceneParam._m0[77u].w : min(_896, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2831 = _2829.x;
    float _2832 = _2829.y;
    float _2833 = _2829.z;
    float _2834 = _2829.w;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_896 > cbSceneParam._m0[78u].w)
    {
        float _2889 = isnan(_896) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _896 : min(cbSceneParam._m0[80u].w, _896));
        float _2890 = _2889 / _896;
        float _2901 = _2890 * _946;
        float _2902 = _947 * _2890;
        float _2903 = (-0.0) - _2902;
        float _2904 = _2890 * _948;
        float _2906 = (cbSceneParam._m0[77u].w * _2903) / _2889;
        float _2907 = _2906 + cbSceneParam._m0[79u].w;
        float _2908 = cbSceneParam._m0[79u].w - _2902;
        float _2914 = sqrt(((_2901 * _2901) + (_2902 * _2902)) + (_2904 * _2904));
        float _2917 = (1.0 - (cbSceneParam._m0[77u].w / _2889)) * _2914;
        float _2922 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2924 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3101;
        if (abs((_2903 - _2906) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3101 = ((((_2907 > 0.0) ? exp2(_2922 * _2907) : (2.0 - exp2(_2924 * _2907))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2917;
        }
        else
        {
            float _3045 = 1.0 / cbSceneParam._m0[80u].x;
            float _3046 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : max(_2907, _2908));
            float _3047 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : min(_2907, _2908));
            float _3056 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : min(_3046, 0.0));
            float _3057 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : min(_3047, 0.0));
            _3101 = ((abs(_2914 / _2903) * cbSceneParam._m0[80u].y) * ((((_3056 - _3057) * 2.0) - ((exp2(_2922 * (isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0)))) - exp2(_2922 * (isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))))) * _3045)) - ((exp2(_2924 * _3056) - exp2(_2924 * _3057)) * _3045))) + (_2917 * cbSceneParam._m0[80u].z);
        }
        vec4 _3103 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2814, _2815, 1.0), 0.0);
        float _3112 = exp2((_3101 * (-1.44269502162933349609375)) * (1.0 - _3103.w));
        float _3113 = log2(_3112);
        float _3129 = log2(_2834);
        _2926 = (exp2(_3129 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].x)) * _3103.x) / cbSceneParam._m0[78u].x)) + _2831;
        _2928 = (exp2(_3129 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].y)) * _3103.y) / cbSceneParam._m0[78u].y)) + _2832;
        _2930 = (exp2(_3129 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].z)) * _3103.z) / cbSceneParam._m0[78u].z)) + _2833;
        _2932 = _3112 * _2834;
    }
    else
    {
        _2926 = _2831;
        _2928 = _2832;
        _2930 = _2833;
        _2932 = _2834;
    }
    bool _3139;
    vec4 _2942;
    vec4 _2964;
    float _2966;
    float _2970;
    float _2971;
    float _2972;
    float _2973;
    bool _2983;
    for (;;)
    {
        _2942 = cbMatDynParam._m0[0u];
        float _2944 = roundEven(_2942.y);
        bool _2945 = _2944 == 3.0;
        float _2946 = log2(_2932);
        float _2953 = exp2(_2946 * cbSceneParam._m0[78u].x) * _2803;
        float _2954 = exp2(_2946 * cbSceneParam._m0[78u].y) * _2804;
        float _2955 = exp2(_2946 * cbSceneParam._m0[78u].z) * _2805;
        float _2962 = _962 + (-0.5);
        _2964 = cbMtdParam._m0[1u];
        _2966 = _2964.y * _2962;
        float _2969 = (_2944 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2970 = _2969 * (_2945 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2926)));
        _2971 = _2969 * (_2945 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2928)));
        _2972 = _2969 * (_2945 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2930)));
        _2973 = _2962 * 0.999000012874603271484375;
        _2983 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2983)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2973) < 0.5)
            {
                _3139 = true;
                break;
            }
        }
        uint _3080 = _1011 + uint(_2942.w);
        if ((cbInstanceData._m0[_3080].w < 1.0) && ((cbInstanceData._m0[_3080].w + _2973) < 0.5))
        {
            _3139 = true;
            break;
        }
        if ((_2966 + 1.0) < _2964.x)
        {
            _3139 = true;
            break;
        }
        _3139 = false;
        break;
    }
    float _3344;
    if (_3139)
    {
        discard_state = true;
        _3344 = 0.0;
    }
    else
    {
        _3344 = cbInstanceData._m0[_2806].w;
    }
    SV_Target.x = _2970;
    SV_Target.y = _2971;
    SV_Target.z = _2972;
    SV_Target.w = _3344;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2806].w;
    discard_exit();
}


