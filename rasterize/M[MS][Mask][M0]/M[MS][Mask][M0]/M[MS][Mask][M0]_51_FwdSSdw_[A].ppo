#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1166;
float _3551;
float _3552;
float _3553;
float _3554;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _363 = _361.x;
    float _375 = dot(vec4(_363, _361.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _324.x) * 2.0) - ((((_363 - _375) * cbMtdParam._m0[24u].z) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3563 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _400 = (_393 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _401 = (_393 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _402 = (_393 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _419 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _256) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _257) + cbTextureTilingScale._m0[3u].w));
    vec4 _439 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _451 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _465 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _324.y) * 2.0) - ((((_441 - _451) * cbMtdParam._m0[24u].z) + _451) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3574 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _473 = (_466 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _474 = (_466 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _475 = (_466 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _488 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _516 = ((_488.x - _507) * _393) + _507;
    float _517 = ((_488.y - _508) * _393) + _508;
    float _518 = ((_488.z - _509) * _393) + _509;
    vec4 _530 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _256) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _257) + cbTextureTilingScale._m0[2u].w));
    float _543 = ((_530.z - _518) * _466) + _518;
    float _546 = ((((_530.x - _516) * _466) + _516) * 2.0) + (-1.0);
    float _548 = ((((_530.y - _517) * _466) + _517) * 2.0) + (-1.0);
    float _549 = dot(vec2(_546, _548), vec2(_546, _548));
    float _3585 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _554 = sqrt(1.0 - (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _580 = (((_568.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _546;
    float _581 = (((_568.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _548;
    float _585 = (cbMtdParam._m0[19u].w * (_568.z - _543)) + _543;
    float _589 = cbMtdParam._m0[22u].x + _568.w;
    float _592 = fma(_554, _223 * NORMAL.x, fma(_581, _230 * TANGENT.x, (_216 * _208) * _580));
    float _595 = fma(_554, _223 * NORMAL.y, fma(_581, _230 * TANGENT.y, (_216 * _209) * _580));
    float _598 = fma(_554, _223 * NORMAL.z, fma(_581, _230 * TANGENT.z, (_216 * _210) * _580));
    float _602 = inversesqrt(dot(vec3(_592, _595, _598), vec3(_592, _595, _598)));
    float _603 = _602 * _592;
    float _604 = _602 * _595;
    float _605 = _602 * _598;
    float _3596 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _606 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _3618 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3629 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3640 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _624 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _676 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _666);
    float _677 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _666);
    float _678 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _666);
    float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
    float _683 = _676 * _682;
    float _684 = _677 * _682;
    float _685 = _678 * _682;
    vec4 _690 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _692 = _690.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _846 = sqrt(((_676 * _676) + (_677 * _677)) + (_678 * _678));
        float _852 = (cbMatDynParam._m0[5u].x * _846) + cbMatDynParam._m0[5u].y;
        float _3651 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _857 = (cbMatDynParam._m0[5u].z * _846) + cbMatDynParam._m0[5u].w;
        float _3662 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) - _853)) + _853) < ((_692 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _703 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _704 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _722 = fma(_605, cbSceneParam._m0[5u].z, fma(_604, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _603));
    float _725 = fma(_605, cbSceneParam._m0[6u].z, fma(_604, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _603));
    float _728 = fma(_605, cbSceneParam._m0[7u].z, fma(_604, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _603));
    uint _741 = _236 + 9u;
    uint _742 = _741 + uint(cbMatDynParam._m0[0u].w);
    float _748 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_742].x;
    float _749 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_742].y;
    float _750 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_742].z;
    float _3673 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    vec4 _762 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _703, cbSceneParam._m0[86u].y * _704));
    float _766 = ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * TEXCOORD_5.w) * _762.x;
    float _767 = dot(vec3(_603, _604, _605), vec3(_683, _684, _685));
    float _770 = _767 * 2.0;
    float _774 = (_770 * _603) - _683;
    float _775 = (_770 * _604) - _684;
    float _776 = (_770 * _605) - _685;
    float _780 = abs(dot(vec3(_683, _684, _685), vec3(_603, _604, _605)));
    float _3706 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _782 = sqrt(_606);
    float _795 = exp2((_782 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_782 * 3.0));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1165;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _890 = fma(_835, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827));
        float _894 = fma(_835, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827));
        float _898 = fma(_835, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827));
        float _923 = _827 + _603;
        float _924 = _831 + _604;
        float _925 = _835 + _605;
        float _935 = fma(_925, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923)) - _890;
        float _936 = fma(_925, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923)) - _894;
        float _937 = fma(_925, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923)) - _898;
        float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
        float _954 = ((_941 * _935) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_890 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_941 * _936) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_894 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_941 * _937) / cbModelParam._m0[34u].z) + ((((((_898 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        float _993 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_959.x + (-0.5));
        float _995 = _993 * (_959.y + (-0.5));
        float _996 = _993 * (_959.z + (-0.5));
        float _1003 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_966.x + (-0.5));
        float _1005 = _1003 * (_966.y + (-0.5));
        float _1006 = _1003 * (_966.z + (-0.5));
        float _1013 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_973.x + (-0.5));
        float _1015 = _1013 * (_973.y + (-0.5));
        float _1016 = _1013 * (_973.z + (-0.5));
        float _1023 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_980.x + (-0.5));
        float _1025 = _1023 * (_980.y + (-0.5));
        float _1026 = _1023 * (_980.z + (-0.5));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = _994 * 0.5;
        float _1031 = _1004 * 0.5;
        float _1032 = _1014 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1047 = (dot(vec3(_603, _604, _605), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1057 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3754 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1059 + 1.0))) + _1064) * _1027;
        float _1074 = _995 * 0.5;
        float _1075 = _1005 * 0.5;
        float _1076 = _1015 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_603, _604, _605), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3787 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1101 + 1.0))) + _1106) * _1028;
        float _1116 = _996 * 0.5;
        float _1117 = _1006 * 0.5;
        float _1118 = _1016 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_603, _604, _605), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3820 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1143 + 1.0))) + _1148) * _1029;
        _1165 = _996;
        _1167 = _995;
        _1168 = _994;
        _1169 = _1006;
        _1170 = _1005;
        _1171 = _1004;
        _1172 = _1016;
        _1173 = _1015;
        _1174 = _1014;
        _1175 = _1029;
        _1176 = _1028;
        _1177 = _1027;
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
    }
    else
    {
        _1165 = _1166;
        _1167 = _1166;
        _1168 = _1166;
        _1169 = _1166;
        _1170 = _1166;
        _1171 = _1166;
        _1172 = _1166;
        _1173 = _1166;
        _1174 = _1166;
        _1175 = _1166;
        _1176 = _1166;
        _1177 = _1166;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1207 = fma(_835, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _827));
        float _1211 = fma(_835, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _827));
        float _1215 = fma(_835, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _827));
        float _1238 = _827 + _603;
        float _1239 = _831 + _604;
        float _1240 = _835 + _605;
        float _1250 = fma(_1240, cbModelParam._m0[30u].z, fma(_1239, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1238)) - _1207;
        float _1251 = fma(_1240, cbModelParam._m0[31u].z, fma(_1239, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1238)) - _1211;
        float _1252 = fma(_1240, cbModelParam._m0[32u].z, fma(_1239, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1238)) - _1215;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1207 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1211 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[35u].z) + ((((((_1215 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1306 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1273.x + (-0.5));
        float _1308 = _1306 * (_1273.y + (-0.5));
        float _1309 = _1306 * (_1273.z + (-0.5));
        float _1316 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1280.x + (-0.5));
        float _1318 = _1316 * (_1280.y + (-0.5));
        float _1319 = _1316 * (_1280.z + (-0.5));
        float _1326 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1287.x + (-0.5));
        float _1328 = _1326 * (_1287.y + (-0.5));
        float _1329 = _1326 * (_1287.z + (-0.5));
        float _1336 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1294.x + (-0.5));
        float _1338 = _1336 * (_1294.y + (-0.5));
        float _1339 = _1336 * (_1294.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_603, _604, _605), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3883 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1370 + 1.0))) + _1375) * _1340;
        float _1385 = _1308 * 0.5;
        float _1386 = _1318 * 0.5;
        float _1387 = _1328 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_603, _604, _605), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3916 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1412 + 1.0))) + _1417) * _1341;
        float _1427 = _1309 * 0.5;
        float _1428 = _1319 * 0.5;
        float _1429 = _1329 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_603, _604, _605), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3949 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1454 + 1.0))) + _1459) * _1342;
        _1476 = _1309;
        _1477 = _1308;
        _1478 = _1307;
        _1479 = _1319;
        _1480 = _1318;
        _1481 = _1317;
        _1482 = _1329;
        _1483 = _1328;
        _1484 = _1327;
        _1485 = _1342;
        _1486 = _1341;
        _1487 = _1340;
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
    }
    else
    {
        _1476 = _1166;
        _1477 = _1166;
        _1478 = _1166;
        _1479 = _1166;
        _1480 = _1166;
        _1481 = _1166;
        _1482 = _1166;
        _1483 = _1166;
        _1484 = _1166;
        _1485 = _1166;
        _1486 = _1166;
        _1487 = _1166;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1178)) + _1178;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1179)) + _1179;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1180)) + _1180;
    float _1523 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1500));
    float _1544 = _774 * 0.5;
    float _1545 = _775 * 0.5;
    float _1546 = _776 * 0.5;
    float _1547 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1550 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1553 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1587;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1560 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1165, _1169, _1172, _1175));
        float _1564 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1568 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1575 = dot(vec4(cbModelParam._m0[39u]), vec4(_1544, _1545, _1546, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1598;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1589 = dot(vec4(cbModelParam._m0[40u]), vec4(_1544, _1545, _1546, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1602 = (_1598 * cbModelParam._m0[1u].x) + (_1587 * (1.0 - cbModelParam._m0[1u].x));
    float _1612 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _606);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1612 : min(cbModelParam._m0[25u].z, _1612));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1662 = fma(_835, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827)) + cbModelParam._m0[13u].w;
        float _1666 = fma(_835, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827)) + cbModelParam._m0[14u].w;
        float _1670 = fma(_835, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827)) + cbModelParam._m0[15u].w;
        float _1673 = fma(_776, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774));
        float _1676 = fma(_776, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774));
        float _1679 = fma(_776, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774));
        float _1707;
        if (_1673 > 0.0)
        {
            _1707 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1707 = frontier_phi_17_15_ladder;
        }
        float _1930;
        if (_1676 > 0.0)
        {
            _1930 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1930 = frontier_phi_26_22_ladder;
        }
        float _2176;
        if (_1679 > 0.0)
        {
            _2176 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2176 = frontier_phi_38_33_ladder;
        }
        float _2178 = isnan(_1930) ? _1707 : (isnan(_1707) ? _1930 : min(_1707, _1930));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1673) + _1662;
        float _2184 = (_2179 * _1676) + _1666;
        float _2185 = (_2179 * _1679) + _1670;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2186;
        float _2190 = _2186 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 > _2190) || ((_2184 < _2188) || ((_2183 < _2188) || (_2183 > _2190))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2309 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2185, cbModelParam._m0[9u].z, fma(_2184, cbModelParam._m0[9u].y, _2183 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2185, cbModelParam._m0[10u].z, fma(_2184, cbModelParam._m0[10u].y, _2183 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2185, cbModelParam._m0[11u].z, fma(_2184, cbModelParam._m0[11u].y, _2183 * cbModelParam._m0[11u].x))), _1613);
            frontier_phi_16_38_ladder = _2309.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2309.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2309.x * cbModelParam._m0[1u].y;
        }
        _1695 = frontier_phi_16_38_ladder_2;
        _1697 = frontier_phi_16_38_ladder_1;
        _1699 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_774, _775, _776), _1613);
        _1695 = _1683.x * cbModelParam._m0[1u].y;
        _1697 = _1683.y * cbModelParam._m0[1u].y;
        _1699 = _1683.z * cbModelParam._m0[1u].y;
    }
    float _1703 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _606);
    float _1704 = isnan(_1703) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1703 : min(cbModelParam._m0[25u].w, _1703));
    float _1795;
    float _1797;
    float _1799;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1759 = fma(_835, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827)) + cbModelParam._m0[21u].w;
        float _1763 = fma(_835, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827)) + cbModelParam._m0[22u].w;
        float _1767 = fma(_835, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827)) + cbModelParam._m0[23u].w;
        float _1770 = fma(_776, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774));
        float _1773 = fma(_776, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774));
        float _1776 = fma(_776, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774));
        float _1935;
        if (_1770 > 0.0)
        {
            _1935 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1935 = frontier_phi_28_24_ladder;
        }
        float _2203;
        if (_1773 > 0.0)
        {
            _2203 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2203 = frontier_phi_40_35_ladder;
        }
        float _2408;
        if (_1776 > 0.0)
        {
            _2408 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2408 = frontier_phi_49_46_ladder;
        }
        float _2410 = isnan(_2203) ? _1935 : (isnan(_1935) ? _2203 : min(_1935, _2203));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1770) + _1759;
        float _2416 = (_2411 * _1773) + _1763;
        float _2417 = (_2411 * _1776) + _1767;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2418;
        float _2421 = _2418 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2417 > _2421) || ((_2417 < _2419) || ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 < _2419) || (_2415 > _2421))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2417, cbModelParam._m0[17u].z, fma(_2416, cbModelParam._m0[17u].y, _2415 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2417, cbModelParam._m0[18u].z, fma(_2416, cbModelParam._m0[18u].y, _2415 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2417, cbModelParam._m0[19u].z, fma(_2416, cbModelParam._m0[19u].y, _2415 * cbModelParam._m0[19u].x))), _1704);
            frontier_phi_25_49_ladder = _2616.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2616.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2616.x * cbModelParam._m0[1u].z;
        }
        _1795 = frontier_phi_25_49_ladder_2;
        _1797 = frontier_phi_25_49_ladder_1;
        _1799 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1779 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_774, _775, _776), _1704);
        _1795 = _1779.x * cbModelParam._m0[1u].z;
        _1797 = _1779.y * cbModelParam._m0[1u].z;
        _1799 = _1779.z * cbModelParam._m0[1u].z;
    }
    float _1811 = ((((1.0 - _795) * ((_782 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_795 * _782)) * _766;
    float _1812 = _1811 * ((cbModelParam._m0[1u].w * (_1795 - _1695)) + _1695);
    float _1813 = _1811 * ((cbModelParam._m0[1u].w * (_1797 - _1697)) + _1697);
    float _1814 = _1811 * ((cbModelParam._m0[1u].w * (_1799 - _1699)) + _1699);
    float _1817 = fma(_1814, cbSceneParam._m0[89u].z, fma(_1813, cbSceneParam._m0[89u].y, _1812 * cbSceneParam._m0[89u].x));
    float _1820 = fma(_1814, cbSceneParam._m0[90u].z, fma(_1813, cbSceneParam._m0[90u].y, _1812 * cbSceneParam._m0[90u].x));
    float _1823 = fma(_1814, cbSceneParam._m0[91u].z, fma(_1813, cbSceneParam._m0[91u].y, _1812 * cbSceneParam._m0[91u].x));
    vec4 _1831 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_703, _704));
    float _1833 = _1831.w;
    float _1845 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1833);
    float _1846 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1833);
    float _1847 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1833);
    uvec4 _1851 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1853 = _1851.x * 14u;
    uint _1854 = _1853 + 13u;
    float _1861 = _766 + (-1.0);
    float _1866 = (cbLight._m0[_1854].x * _1861) + 1.0;
    float _1867 = (cbLight._m0[_1854].y * _1861) + 1.0;
    float _1868 = (cbLight._m0[_1854].z * _1861) + 1.0;
    float _1869 = (cbLight._m0[_1854].w * _1861) + 1.0;
    uint _1870 = _1853 + 5u;
    float _1876 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
    uint _1880 = _1853 + 4u;
    float _1889 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
    uint _1893 = _1853 | 1u;
    float _1904 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_603, _604, _605));
    float _1907 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_603, _604, _605));
    float _4085 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _4096 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1912 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * 0.3183098733425140380859375;
    float _1914 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.3183098733425140380859375;
    float _1921 = ((cbLight._m0[_1870].x * _1876) * _1914) + (((cbLight._m0[_1880].x * _1845) * _1889) * _1912);
    float _1922 = ((_1876 * cbLight._m0[_1870].y) * _1914) + (((cbLight._m0[_1880].y * _1846) * _1889) * _1912);
    float _1923 = ((_1876 * cbLight._m0[_1870].z) * _1914) + (((cbLight._m0[_1880].z * _1847) * _1889) * _1912);
    uvec4 _1927 = floatBitsToUint(cbLight._m0[_1853 + 12u]);
    bool _1929 = _1927.x == 0u;
    float _1940;
    float _1942;
    float _1944;
    if (_1929)
    {
        _1940 = _1921;
        _1942 = _1922;
        _1944 = _1923;
    }
    else
    {
        uint _1948 = _1853 + 6u;
        float _1964 = (dot(vec3(cbLight._m0[_1853 + 2u].xyz), vec3(_603, _604, _605)) * 0.5) + 0.5;
        float _1965 = _1964 * _1964;
        float _4107 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1966 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1967 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _1940 = (((cbLight._m0[_1948].x * 0.3183098733425140380859375) * _1966) * _1967) + _1921;
        _1942 = (((cbLight._m0[_1948].y * 0.3183098733425140380859375) * _1966) * _1967) + _1922;
        _1944 = (((cbLight._m0[_1948].z * 0.3183098733425140380859375) * _1966) * _1967) + _1923;
    }
    bool _1947 = _1927.y == 0u;
    float _1985;
    float _1987;
    float _1989;
    if (_1947)
    {
        _1985 = _1940;
        _1987 = _1942;
        _1989 = _1944;
    }
    else
    {
        uint _2147 = _1853 + 7u;
        float _2163 = (dot(vec3(cbLight._m0[_1853 + 3u].xyz), vec3(_603, _604, _605)) * 0.5) + 0.5;
        float _2164 = _2163 * _2163;
        float _4123 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2165 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2166 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _1985 = (((cbLight._m0[_2147].x * 0.3183098733425140380859375) * _2165) * _2166) + _1940;
        _1987 = (((cbLight._m0[_2147].y * 0.3183098733425140380859375) * _2165) * _2166) + _1942;
        _1989 = (((cbLight._m0[_2147].z * 0.3183098733425140380859375) * _2165) * _2166) + _1944;
    }
    uint _1992 = _1853 + 8u;
    float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _606) * 0.949999988079071044921875);
    float _2006 = _2005 * _2005;
    float _2007 = cbLight._m0[_1853].x + _683;
    float _2008 = cbLight._m0[_1853].y + _684;
    float _2009 = cbLight._m0[_1853].z + _685;
    float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
    float _2014 = _2013 * _2007;
    float _2015 = _2013 * _2008;
    float _2016 = _2013 * _2009;
    float _2017 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_1853].xyz));
    float _4139 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _2021 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2022 = dot(vec3(_603, _604, _605), vec3(_2014, _2015, _2016));
    float _4161 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2026 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2014, _2015, _2016));
    float _4172 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2030 = _2006 * _2006;
    float _2034 = ((_2025 * _2025) * (_2030 + (-1.0))) + 1.0;
    float _2045 = (exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2046 = 1.0 - _2006;
    float _2057 = (0.5 / (((_2021 * ((_2020 * _2046) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2046) + _2006) * _2020))) * _2020;
    float _4183 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2059 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2030 / ((_2034 * _2034) * 3.141590118408203125));
    uint _2073 = _1853 + 9u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _606) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_1893].x + _683;
    float _2087 = cbLight._m0[_1893].y + _684;
    float _2088 = cbLight._m0[_1893].z + _685;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_1893].xyz));
    float _4194 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2100 = dot(vec3(_603, _604, _605), vec3(_2093, _2094, _2095));
    float _4205 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2093, _2094, _2095));
    float _4216 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2085 * _2085;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2122 = 1.0 - _2085;
    float _2132 = (0.5 / (((_2021 * ((_2099 * _2122) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2122) + _2085) * _2099))) * _2099;
    float _4227 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    float _2144 = (((_2121 * cbLight._m0[_2073].x) * _2134) * _1876) + ((((cbLight._m0[_1992].x * _1845) * _2045) * _2059) * _1889);
    float _2145 = (((_2121 * cbLight._m0[_2073].y) * _2134) * _1876) + ((((cbLight._m0[_1992].y * _1846) * _2045) * _2059) * _1889);
    float _2146 = (((_2121 * cbLight._m0[_2073].z) * _2134) * _1876) + ((((cbLight._m0[_1992].z * _1847) * _2045) * _2059) * _1889);
    float _2208;
    float _2210;
    float _2212;
    if (_1929)
    {
        _2208 = _2144;
        _2210 = _2145;
        _2212 = _2146;
    }
    else
    {
        uint _2214 = _1853 + 2u;
        uint _2218 = _1853 + 10u;
        float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _606) * 0.949999988079071044921875);
        float _2233 = _2232 * _2232;
        float _2234 = cbLight._m0[_2214].x + _683;
        float _2235 = cbLight._m0[_2214].y + _684;
        float _2236 = cbLight._m0[_2214].z + _685;
        float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
        float _2241 = _2240 * _2234;
        float _2242 = _2240 * _2235;
        float _2243 = _2240 * _2236;
        float _2244 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2214].xyz));
        float _4238 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2248 = dot(vec3(_603, _604, _605), vec3(_2241, _2242, _2243));
        float _4249 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2252 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2241, _2242, _2243));
        float _4260 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2256 = _2233 * _2233;
        float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
        float _2269 = (exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2270 = 1.0 - _2233;
        float _2280 = (0.5 / (((_2021 * ((_2247 * _2270) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2270) + _2233) * _2247))) * _2247;
        float _4271 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2282 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
        float _2283 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _2208 = (((_2269 * cbLight._m0[_2218].x) * _2282) * _2283) + _2144;
        _2210 = (((_2269 * cbLight._m0[_2218].y) * _2282) * _2283) + _2145;
        _2212 = (((_2269 * cbLight._m0[_2218].z) * _2282) * _2283) + _2146;
    }
    float _2318;
    float _2320;
    float _2322;
    if (_1947)
    {
        _2318 = _2208;
        _2320 = _2210;
        _2322 = _2212;
    }
    else
    {
        uint _2329 = _1853 + 3u;
        uint _2333 = _1853 + 11u;
        float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _606) * 0.949999988079071044921875);
        float _2348 = _2347 * _2347;
        float _2349 = cbLight._m0[_2329].x + _683;
        float _2350 = cbLight._m0[_2329].y + _684;
        float _2351 = cbLight._m0[_2329].z + _685;
        float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
        float _2356 = _2355 * _2349;
        float _2357 = _2355 * _2350;
        float _2358 = _2355 * _2351;
        float _2359 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2329].xyz));
        float _4287 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2363 = dot(vec3(_603, _604, _605), vec3(_2356, _2357, _2358));
        float _4298 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2367 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2356, _2357, _2358));
        float _4309 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2371 = _2348 * _2348;
        float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
        float _2384 = (exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2385 = 1.0 - _2348;
        float _2395 = (0.5 / (((_2021 * ((_2362 * _2385) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2385) + _2348) * _2362))) * _2362;
        float _4320 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2397 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
        float _2398 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _2318 = (((_2384 * cbLight._m0[_2333].x) * _2397) * _2398) + _2208;
        _2320 = (((_2384 * cbLight._m0[_2333].y) * _2397) * _2398) + _2210;
        _2322 = (((_2384 * cbLight._m0[_2333].z) * _2397) * _2398) + _2212;
    }
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_1851.y == 0u)
    {
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2473;
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2473;
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2473;
        uvec4 _2488 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2489 = _2488.x;
        uint _2500 = uint((float(_2488.y) * floor(float(uint(cbSceneParam._m0[85u].y * _704) / _2489))) + floor(float(uint(cbSceneParam._m0[85u].x * _703) / _2489)));
        float _2510 = (log2(_2476 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2511 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        uint _2514 = uint(isnan(14.0) ? _2511 : (isnan(_2511) ? 14.0 : min(_2511, 14.0)));
        uvec4 _2519 = texelFetch(g_lightClusterGridBuffer, int(((_2514 << 2u) + (_2500 << 6u)) >> 2u));
        uint _2520 = _2519.x;
        uint _2521 = _2488.z;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        if (((((1u << ((_2521 >> 4u) & 15u)) + 4294967295u) & _2520) == 0u) || ((_2521 & 240u) == 0u))
        {
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
        }
        else
        {
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            uint _2780 = 0u;
            uint _2789;
            bool _2790;
            for (;;)
            {
                _2789 = texelFetch(g_lightClassification, int((((_2514 << 5u) + (_2500 << 9u)) + (_2780 << 2u)) >> 2u)).x;
                _2790 = _2789 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2790)
                {
                    frontier_phi_66_pred = _2774;
                    frontier_phi_66_pred_1 = _2779;
                    frontier_phi_66_pred_2 = _2778;
                    frontier_phi_66_pred_3 = _2777;
                    frontier_phi_66_pred_4 = _2776;
                    frontier_phi_66_pred_5 = _2775;
                }
                else
                {
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    uint _2925;
                    _2919 = _2774;
                    _2920 = _2775;
                    _2921 = _2776;
                    _2922 = _2777;
                    _2923 = _2778;
                    _2924 = _2779;
                    _2925 = _2789;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    for (;;)
                    {
                        uint _2929 = uint(findLSB(_2925)) + (_2780 << 5u);
                        uint _2926 = (_2925 + 4294967295u) & _2925;
                        uint _2931 = _2929 * 48u;
                        vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2931)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 3u)).x));
                        uint _2951 = (_2929 * 48u) + 4u;
                        vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 3u)).x));
                        uint _2970 = (_2929 * 48u) + 8u;
                        vec3 _2981 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2970)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 2u)).x));
                        float _2985 = _2945.x - _2474;
                        float _2986 = _2945.y - _2475;
                        float _2987 = _2945.z - _2476;
                        float _2988 = dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987));
                        float _2991 = inversesqrt(_2988);
                        float _2992 = _2991 * _2985;
                        float _2993 = _2991 * _2986;
                        float _2994 = _2991 * _2987;
                        float _2995 = dot(vec3(_722, _725, _728), vec3(_2992, _2993, _2994));
                        float _3000 = 1.0 - (_2988 * _2945.w);
                        float _4346 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3001 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3002 = sqrt(_2988) * _2964.w;
                        float _3005 = 1.39999997615814208984375 / (_3002 + 1.39999997615814208984375);
                        float _3006 = _3005 * _3005;
                        float _3009 = ((1.0 - _3006) * _2995) + _3006;
                        float _3012 = _3002 * _3002;
                        float _3016 = ((isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0))) * _3001) / ((_3012 * 0.699999988079071044921875) + 1.0);
                        float _3020 = (-0.0) - _2474;
                        float _3021 = (-0.0) - _2475;
                        float _3022 = (-0.0) - _2476;
                        float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                        float _3027 = _3026 * _3020;
                        float _3028 = _3026 * _3021;
                        float _3029 = _3026 * _3022;
                        float _3037 = exp2(log2(1.0 / ((_3012 * 3.5) + 5.0)) * 0.25);
                        float _3038 = 1.0 - _782;
                        float _3045 = sqrt(1.0 - ((1.0 - (_3038 * _3038)) * (1.0 - (_3037 * _3037))));
                        float _3046 = _3045 * _3045;
                        float _3047 = _3046 * _3046;
                        float _3048 = _3027 + _2992;
                        float _3049 = _3028 + _2993;
                        float _3050 = _3029 + _2994;
                        float _3054 = inversesqrt(dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050)));
                        float _3058 = dot(vec3(_722, _725, _728), vec3(_3027, _3028, _3029));
                        float _4362 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3061 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _3062 = dot(vec3(_722, _725, _728), vec3(_3054 * _3048, _3054 * _3049, _3054 * _3050));
                        float _4373 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3065 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3069 = ((_3065 * _3065) * (_3047 + (-1.0))) + 1.0;
                        float _3070 = _3005 * _3046;
                        float _3071 = _3070 * _3070;
                        float _3074 = ((1.0 - _3071) * _2995) + _3071;
                        float _4384 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3075 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3076 = 1.0 - _3046;
                        float _3086 = (0.5 / (((_3075 * ((_3061 * _3076) + _3046)) + 9.9999999392252902907785028219223e-09) + (((_3075 * _3076) + _3046) * _3061))) * _3075;
                        float _4395 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3097 = (((_3047 * 3.1415927410125732421875) * (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) / ((_3069 * _3069) * ((_3012 * 2.1991131305694580078125) + 3.141590118408203125))) * _3001;
                        _2849 = (_3016 * _2964.x) + _2922;
                        _2850 = (_3016 * _2964.y) + _2923;
                        _2851 = (_3016 * _2964.z) + _2924;
                        _2846 = (_3097 * _2981.x) + _2919;
                        _2847 = (_3097 * _2981.y) + _2920;
                        _2848 = (_3097 * _2981.z) + _2921;
                        if (_2926 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2919 = _2846;
                            _2920 = _2847;
                            _2921 = _2848;
                            _2922 = _2849;
                            _2923 = _2850;
                            _2924 = _2851;
                            _2925 = _2926;
                        }
                    }
                    frontier_phi_66_pred = _2846;
                    frontier_phi_66_pred_1 = _2851;
                    frontier_phi_66_pred_2 = _2850;
                    frontier_phi_66_pred_3 = _2849;
                    frontier_phi_66_pred_4 = _2848;
                    frontier_phi_66_pred_5 = _2847;
                }
                _2622 = frontier_phi_66_pred;
                _2632 = frontier_phi_66_pred_1;
                _2630 = frontier_phi_66_pred_2;
                _2628 = frontier_phi_66_pred_3;
                _2626 = frontier_phi_66_pred_4;
                _2624 = frontier_phi_66_pred_5;
                uint _2781 = _2780 + 1u;
                if (_2781 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2774 = _2622;
                    _2775 = _2624;
                    _2776 = _2626;
                    _2777 = _2628;
                    _2778 = _2630;
                    _2779 = _2632;
                    _2780 = _2781;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
        }
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.z;
        uint _2638 = (_2636 >> 8u) & 15u;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        if (((4294967295u << _2638) & _2520) == 0u)
        {
            _2742 = _2621;
            _2744 = _2623;
            _2746 = _2625;
            _2748 = _2627;
            _2750 = _2629;
            _2752 = _2631;
        }
        else
        {
            float _2767 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
            float _2768 = _2767 * _2474;
            float _2769 = _2767 * _2475;
            float _2770 = _2767 * _2476;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2638 < ((_2636 >> 12u) & 15u))
            {
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2902 = _2621;
                float _2903 = _2623;
                float _2904 = _2625;
                float _2905 = _2627;
                float _2906 = _2629;
                float _2907 = _2631;
                uint _2908 = _2638;
                uint _2917;
                bool _2918;
                for (;;)
                {
                    _2917 = texelFetch(g_lightClassification, int((((_2514 << 5u) + (_2500 << 9u)) + (_2908 << 2u)) >> 2u)).x;
                    _2918 = _2917 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2918)
                    {
                        frontier_phi_77_pred = _2907;
                        frontier_phi_77_pred_1 = _2906;
                        frontier_phi_77_pred_2 = _2905;
                        frontier_phi_77_pred_3 = _2904;
                        frontier_phi_77_pred_4 = _2903;
                        frontier_phi_77_pred_5 = _2902;
                    }
                    else
                    {
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3124 = _2902;
                        float _3125 = _2903;
                        float _3126 = _2904;
                        float _3127 = _2905;
                        float _3128 = _2906;
                        float _3129 = _2907;
                        uint _3130 = _2917;
                        uint _3131;
                        vec4 _3156;
                        float _3157;
                        vec4 _3172;
                        vec3 _3184;
                        vec4 _3199;
                        vec4 _3214;
                        float _3260;
                        bool _3261;
                        for (;;)
                        {
                            uint _3141 = ((_2908 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3130));
                            _3131 = (_3130 + 4294967295u) & _3130;
                            uint _3143 = _3141 * 40u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            _3157 = _3156.w;
                            uint _3159 = (_3141 * 40u) + 4u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3174 = (_3141 * 40u) + 8u;
                            _3184 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x));
                            uint _3186 = (_3141 * 40u) + 16u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3201 = (_3141 * 40u) + 20u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3141 * 40u) + 24u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3235 = (_3141 * 40u) + 28u;
                            vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            _3260 = fma(_2476, _3248.z, fma(_2475, _3248.y, _3248.x * _2474)) + _3248.w;
                            _3261 = !((fma(_2476, _3229.z, fma(_2475, _3229.y, _3229.x * _2474)) + _3229.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3261)
                            {
                                float _3288 = _3156.x - _2474;
                                float _3289 = _3156.y - _2475;
                                float _3290 = _3156.z - _2476;
                                float _3291 = dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290));
                                float _3294 = inversesqrt(_3291);
                                float _3295 = _3294 * _3288;
                                float _3296 = _3294 * _3289;
                                float _3297 = _3294 * _3290;
                                float _3301 = 1.0 - (_3291 / (_3157 * _3157));
                                float _4406 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3306 = sqrt(_3291) * _3172.w;
                                float _3308 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                                float _3309 = _3308 * _3308;
                                float _3312 = ((1.0 - _3309) * dot(vec3(_3295, _3296, _3297), vec3(_722, _725, _728))) + _3309;
                                float _3315 = _3306 * _3306;
                                float _3319 = (fma(_2476, _3199.z, fma(_2475, _3199.y, _3199.x * _2474)) + _3199.w) / _3260;
                                float _3320 = (fma(_2476, _3214.z, fma(_2475, _3214.y, _3214.x * _2474)) + _3214.w) / _3260;
                                float _3324 = 1.0 - dot(vec2(_3319, _3320), vec2(_3319, _3320));
                                float _4422 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3326 = _3325 * (((isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))) * _3302) / ((_3315 * 0.699999988079071044921875) + 1.0));
                                float _3338 = exp2(log2(1.0 / ((_3315 * 3.5) + 5.0)) * 0.25);
                                float _3339 = 1.0 - _782;
                                float _3346 = sqrt(1.0 - ((1.0 - (_3339 * _3339)) * (1.0 - (_3338 * _3338))));
                                float _3347 = _3346 * _3346;
                                float _3348 = _3347 * _3347;
                                float _3349 = _3295 - _2768;
                                float _3350 = _3296 - _2769;
                                float _3351 = _3297 - _2770;
                                float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                                float _3359 = dot(vec3(_722, _725, _728), vec3((-0.0) - _2768, (-0.0) - _2769, (-0.0) - _2770));
                                float _4433 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3363 = dot(vec3(_722, _725, _728), vec3(_3355 * _3349, _3355 * _3350, _3355 * _3351));
                                float _4444 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3366 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3370 = ((_3366 * _3366) * (_3348 + (-1.0))) + 1.0;
                                float _3371 = _3308 * _3347;
                                float _3372 = _3371 * _3371;
                                float _3378 = ((1.0 - _3372) * dot(vec3(_722, _725, _728), vec3(_3295, _3296, _3297))) + _3372;
                                float _4455 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3380 = 1.0 - _3347;
                                float _3390 = (0.5 / (((_3379 * ((_3362 * _3380) + _3347)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3347) * _3362))) * _3379;
                                float _4466 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3400 = (_3325 * _3302) * (((_3348 * 3.1415927410125732421875) * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) / ((_3370 * _3370) * ((_3315 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3326 * _3172.y;
                                frontier_phi_83_pred_1 = _3326 * _3172.x;
                                frontier_phi_83_pred_2 = _3400 * _3184.z;
                                frontier_phi_83_pred_3 = _3400 * _3184.y;
                                frontier_phi_83_pred_4 = _3400 * _3184.x;
                                frontier_phi_83_pred_5 = _3326 * _3172.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3408 = frontier_phi_83_pred;
                            _3407 = frontier_phi_83_pred_1;
                            _3406 = frontier_phi_83_pred_2;
                            _3405 = frontier_phi_83_pred_3;
                            _3404 = frontier_phi_83_pred_4;
                            _3409 = frontier_phi_83_pred_5;
                            _3114 = _3407 + _3127;
                            _3115 = _3408 + _3128;
                            _3116 = _3409 + _3129;
                            _3111 = _3404 + _3124;
                            _3112 = _3405 + _3125;
                            _3113 = _3406 + _3126;
                            if (_3131 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3131;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3116;
                        frontier_phi_77_pred_1 = _3115;
                        frontier_phi_77_pred_2 = _3114;
                        frontier_phi_77_pred_3 = _3113;
                        frontier_phi_77_pred_4 = _3112;
                        frontier_phi_77_pred_5 = _3111;
                    }
                    _2753 = frontier_phi_77_pred;
                    _2751 = frontier_phi_77_pred_1;
                    _2749 = frontier_phi_77_pred_2;
                    _2747 = frontier_phi_77_pred_3;
                    _2745 = frontier_phi_77_pred_4;
                    _2743 = frontier_phi_77_pred_5;
                    uint _2909 = _2908 + 1u;
                    if (_2909 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2902 = _2743;
                        _2903 = _2745;
                        _2904 = _2747;
                        _2905 = _2749;
                        _2906 = _2751;
                        _2907 = _2753;
                        _2908 = _2909;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2747;
                frontier_phi_58_59_ladder_1 = _2753;
                frontier_phi_58_59_ladder_2 = _2751;
                frontier_phi_58_59_ladder_3 = _2749;
                frontier_phi_58_59_ladder_4 = _2745;
                frontier_phi_58_59_ladder_5 = _2743;
            }
            else
            {
                frontier_phi_58_59_ladder = _2625;
                frontier_phi_58_59_ladder_1 = _2631;
                frontier_phi_58_59_ladder_2 = _2629;
                frontier_phi_58_59_ladder_3 = _2627;
                frontier_phi_58_59_ladder_4 = _2623;
                frontier_phi_58_59_ladder_5 = _2621;
            }
            _2742 = frontier_phi_58_59_ladder_5;
            _2744 = frontier_phi_58_59_ladder_4;
            _2746 = frontier_phi_58_59_ladder;
            _2748 = frontier_phi_58_59_ladder_3;
            _2750 = frontier_phi_58_59_ladder_2;
            _2752 = frontier_phi_58_59_ladder_1;
        }
        float _2757 = isnan(1.0) ? _766 : (isnan(_766) ? 1.0 : min(_766, 1.0));
        _2533 = (_2757 * _2748) + _1985;
        _2535 = (_2757 * _2750) + _1987;
        _2537 = (_2757 * _2752) + _1989;
        _2539 = ((_2742 * 0.039999999105930328369140625) * _2757) + _2318;
        _2541 = ((_2744 * 0.039999999105930328369140625) * _2757) + _2320;
        _2543 = ((_2746 * 0.039999999105930328369140625) * _2757) + _2322;
    }
    else
    {
        _2533 = _1985;
        _2535 = _1987;
        _2537 = _1989;
        _2539 = _2318;
        _2541 = _2320;
        _2543 = _2322;
    }
    float _4482 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4493 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4504 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _2560 = ((isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2533 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _766))) + ((_2539 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1602)) * cbPerFrame._m0[3u].x);
    float _2561 = ((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2535 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _766))) + ((_2541 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1602)) * cbPerFrame._m0[3u].x);
    float _2562 = ((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2537 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _766))) + ((_2543 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1602)) * cbPerFrame._m0[3u].x);
    uint _2563 = _236 + 6u;
    float _2571 = _703 / cbSceneParam._m0[86u].x;
    float _2572 = _704 / cbSceneParam._m0[86u].y;
    vec4 _2586 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2571, _2572, (log2((isnan(cbSceneParam._m0[77u].w) ? _624 : (isnan(_624) ? cbSceneParam._m0[77u].w : min(_624, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2588 = _2586.x;
    float _2589 = _2586.y;
    float _2590 = _2586.z;
    float _2591 = _2586.w;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    if (_624 > cbSceneParam._m0[78u].w)
    {
        float _2646 = isnan(_624) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _624 : min(cbSceneParam._m0[80u].w, _624));
        float _2647 = _2646 / _624;
        float _2658 = _2647 * _676;
        float _2659 = _677 * _2647;
        float _2660 = (-0.0) - _2659;
        float _2662 = _2647 * _678;
        float _2664 = (cbSceneParam._m0[77u].w * _2660) / _2646;
        float _2665 = _2664 + cbSceneParam._m0[79u].w;
        float _2666 = cbSceneParam._m0[79u].w - _2659;
        float _2672 = sqrt(((_2658 * _2658) + (_2659 * _2659)) + (_2662 * _2662));
        float _2675 = (1.0 - (cbSceneParam._m0[77u].w / _2646)) * _2672;
        float _2680 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2682 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2859;
        if (abs((_2660 - _2664) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2859 = ((((_2665 > 0.0) ? exp2(_2680 * _2665) : (2.0 - exp2(_2682 * _2665))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2675;
        }
        else
        {
            float _2803 = 1.0 / cbSceneParam._m0[80u].x;
            float _2804 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : max(_2665, _2666));
            float _2805 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : min(_2665, _2666));
            float _2814 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : min(_2804, 0.0));
            float _2815 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : min(_2805, 0.0));
            _2859 = ((abs(_2672 / _2660) * cbSceneParam._m0[80u].y) * ((((_2814 - _2815) * 2.0) - ((exp2(_2680 * (isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0)))) - exp2(_2680 * (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))))) * _2803)) - ((exp2(_2682 * _2814) - exp2(_2682 * _2815)) * _2803))) + (_2675 * cbSceneParam._m0[80u].z);
        }
        vec4 _2861 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2571, _2572, 1.0), 0.0);
        float _2870 = exp2((_2859 * (-1.44269502162933349609375)) * (1.0 - _2861.w));
        float _2871 = log2(_2870);
        float _2887 = log2(_2591);
        _2684 = (exp2(_2887 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2871 * cbSceneParam._m0[78u].x)) * _2861.x) / cbSceneParam._m0[78u].x)) + _2588;
        _2686 = (exp2(_2887 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2871 * cbSceneParam._m0[78u].y)) * _2861.y) / cbSceneParam._m0[78u].y)) + _2589;
        _2688 = (exp2(_2887 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2871 * cbSceneParam._m0[78u].z)) * _2861.z) / cbSceneParam._m0[78u].z)) + _2590;
        _2690 = _2870 * _2591;
    }
    else
    {
        _2684 = _2588;
        _2686 = _2589;
        _2688 = _2590;
        _2690 = _2591;
    }
    bool _2897;
    vec4 _2700;
    vec4 _2722;
    float _2724;
    float _2728;
    float _2729;
    float _2730;
    float _2731;
    bool _2741;
    for (;;)
    {
        _2700 = cbMatDynParam._m0[0u];
        float _2702 = roundEven(_2700.y);
        bool _2703 = _2702 == 3.0;
        float _2704 = log2(_2690);
        float _2711 = exp2(_2704 * cbSceneParam._m0[78u].x) * _2560;
        float _2712 = exp2(_2704 * cbSceneParam._m0[78u].y) * _2561;
        float _2713 = exp2(_2704 * cbSceneParam._m0[78u].z) * _2562;
        float _2720 = _692 + (-0.5);
        _2722 = cbMtdParam._m0[1u];
        _2724 = _2722.y * _2720;
        float _2727 = (_2702 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2728 = _2727 * (_2703 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2684)));
        _2729 = _2727 * (_2703 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2686)));
        _2730 = _2727 * (_2703 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2688)));
        _2731 = _2720 * 0.999000012874603271484375;
        _2741 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2741)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2731) < 0.5)
            {
                _2897 = true;
                break;
            }
        }
        uint _2838 = _741 + uint(_2700.w);
        if ((cbInstanceData._m0[_2838].w < 1.0) && ((cbInstanceData._m0[_2838].w + _2731) < 0.5))
        {
            _2897 = true;
            break;
        }
        if ((_2724 + 1.0) < _2722.x)
        {
            _2897 = true;
            break;
        }
        _2897 = false;
        break;
    }
    float _3102;
    if (_2897)
    {
        discard_state = true;
        _3102 = 0.0;
    }
    else
    {
        _3102 = cbInstanceData._m0[_2563].w;
    }
    SV_Target.x = _2728;
    SV_Target.y = _2729;
    SV_Target.z = _2730;
    SV_Target.w = _3102;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2563].w;
    discard_exit();
}


