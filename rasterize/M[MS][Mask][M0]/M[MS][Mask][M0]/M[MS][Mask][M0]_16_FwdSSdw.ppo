#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1230;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _369 = _367.x;
    float _381 = dot(vec4(_369, _367.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_369 - _381) * cbMtdParam._m0[24u].z) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3561 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _406 = (_399 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _407 = (_399 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _408 = (_399 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _426 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    float _456 = ((_426.z - _447) * _399) + _447;
    float _459 = ((((_426.x - _445) * _399) + _445) * 2.0) + (-1.0);
    float _461 = ((((_426.y - _446) * _399) + _446) * 2.0) + (-1.0);
    float _462 = dot(vec2(_459, _461), vec2(_459, _461));
    float _3572 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = sqrt(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _510 = _508.x;
    float _511 = 1.0 - _510;
    float _517 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _520 = ((isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : min(_517, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _529 = (_520 - ((((((_510 - _511) * cbMtdParam._m0[24u].w) + _511) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _520))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3593 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _537 = (_530 * (cbMtdParam._m0[17u].x - _406)) + _406;
    float _538 = (_530 * (cbMtdParam._m0[17u].y - _407)) + _407;
    float _539 = (_530 * (cbMtdParam._m0[17u].z - _408)) + _408;
    vec4 _551 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _553 = _551.x;
    float _554 = 1.0 - _553;
    float _581 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_553 - _554) * cbMtdParam._m0[24u].y) + _554) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3604 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _590 = ((((cbMtdParam._m0[10u].x - _537) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _582) + _537;
    float _591 = ((((cbMtdParam._m0[10u].y - _538) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _582) + _538;
    float _592 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _539)) * _582) + _539;
    float _596 = (cbMtdParam._m0[19u].w * (_483.z - _456)) + _456;
    vec4 _610 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _617 = (_610.x * 2.0) + (-1.0);
    float _618 = (_610.y * 2.0) + (-1.0);
    float _619 = dot(vec2(_617, _618), vec2(_617, _618));
    float _3615 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _627 = (_530 * (_610.z - _596)) + _596;
    float _630 = ((cbMtdParam._m0[23u].y - _627) * _582) + _627;
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _655 = (_649.x * 2.0) + (-1.0);
    float _656 = (_649.y * 2.0) + (-1.0);
    float _657 = dot(vec2(_655, _656), vec2(_655, _656));
    float _3626 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _665 = (((_483.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _459;
    float _666 = (((_483.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _461;
    float _678 = (((_617 - _665) + (cbMtdParam._m0[21u].x * _665)) * _530) + _665;
    float _679 = (((_618 - _666) + (cbMtdParam._m0[21u].x * _666)) * _530) + _666;
    float _680 = (_530 * (sqrt(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) - _467)) + _467;
    float _691 = (((_655 - _678) + (_678 * cbMtdParam._m0[22u].z)) * _582) + _678;
    float _692 = (((_656 - _679) + (_679 * cbMtdParam._m0[22u].z)) * _582) + _679;
    float _693 = ((sqrt(1.0 - (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) - _680) * _582) + _680;
    float _695 = cbMtdParam._m0[22u].x + _483.w;
    float _698 = fma(_693, _234 * NORMAL.x, fma(_692, _241 * TANGENT.x, (_227 * _219) * _691));
    float _701 = fma(_693, _234 * NORMAL.y, fma(_692, _241 * TANGENT.y, (_227 * _220) * _691));
    float _704 = fma(_693, _234 * NORMAL.z, fma(_692, _241 * TANGENT.z, (_227 * _221) * _691));
    float _708 = inversesqrt(dot(vec3(_698, _701, _704), vec3(_698, _701, _704)));
    float _709 = _708 * _698;
    float _710 = _708 * _701;
    float _711 = _708 * _704;
    float _3637 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _712 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3659 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3670 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3681 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _730 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _781 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _771);
    float _782 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _771);
    float _783 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _771);
    float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
    float _788 = _781 * _787;
    float _789 = _782 * _787;
    float _790 = _783 * _787;
    float _796 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _797 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _815 = fma(_711, cbSceneParam._m0[5u].z, fma(_710, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _709));
    float _818 = fma(_711, cbSceneParam._m0[6u].z, fma(_710, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _709));
    float _821 = fma(_711, cbSceneParam._m0[7u].z, fma(_710, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _709));
    uint _835 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _841 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_835].x;
    float _842 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_835].y;
    float _843 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_835].z;
    float _3692 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    vec4 _855 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _796, cbSceneParam._m0[86u].y * _797));
    float _859 = ((isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * TEXCOORD_5.w) * _855.x;
    float _860 = dot(vec3(_709, _710, _711), vec3(_788, _789, _790));
    float _863 = _860 * 2.0;
    float _867 = (_863 * _709) - _788;
    float _868 = (_863 * _710) - _789;
    float _869 = (_863 * _711) - _790;
    float _873 = abs(dot(vec3(_788, _789, _790), vec3(_709, _710, _711)));
    float _3725 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _875 = sqrt(_712);
    float _888 = exp2((_875 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_875 * 3.0));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1229;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _954 = fma(_928, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920));
        float _958 = fma(_928, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920));
        float _962 = fma(_928, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920));
        float _987 = _920 + _709;
        float _988 = _924 + _710;
        float _989 = _928 + _711;
        float _999 = fma(_989, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987)) - _954;
        float _1000 = fma(_989, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987)) - _958;
        float _1001 = fma(_989, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987)) - _962;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_954 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_958 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[34u].z) + ((((((_962 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1057 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1023.x + (-0.5));
        float _1059 = _1057 * (_1023.y + (-0.5));
        float _1060 = _1057 * (_1023.z + (-0.5));
        float _1067 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1030.x + (-0.5));
        float _1069 = _1067 * (_1030.y + (-0.5));
        float _1070 = _1067 * (_1030.z + (-0.5));
        float _1077 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1037.x + (-0.5));
        float _1079 = _1077 * (_1037.y + (-0.5));
        float _1080 = _1077 * (_1037.z + (-0.5));
        float _1087 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1044.x + (-0.5));
        float _1089 = _1087 * (_1044.y + (-0.5));
        float _1090 = _1087 * (_1044.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1111 = (dot(vec3(_709, _710, _711), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1121 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3773 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1123 + 1.0))) + _1128) * _1091;
        float _1138 = _1059 * 0.5;
        float _1139 = _1069 * 0.5;
        float _1140 = _1079 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_709, _710, _711), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3806 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1165 + 1.0))) + _1170) * _1092;
        float _1180 = _1060 * 0.5;
        float _1181 = _1070 * 0.5;
        float _1182 = _1080 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_709, _710, _711), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3839 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1207 + 1.0))) + _1212) * _1093;
        _1229 = _1060;
        _1231 = _1059;
        _1232 = _1058;
        _1233 = _1070;
        _1234 = _1069;
        _1235 = _1068;
        _1236 = _1080;
        _1237 = _1079;
        _1238 = _1078;
        _1239 = _1093;
        _1240 = _1092;
        _1241 = _1091;
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _1230;
        _1231 = _1230;
        _1232 = _1230;
        _1233 = _1230;
        _1234 = _1230;
        _1235 = _1230;
        _1236 = _1230;
        _1237 = _1230;
        _1238 = _1230;
        _1239 = _1230;
        _1240 = _1230;
        _1241 = _1230;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1269 = fma(_928, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920));
        float _1273 = fma(_928, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920));
        float _1277 = fma(_928, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920));
        float _1300 = _920 + _709;
        float _1301 = _924 + _710;
        float _1302 = _928 + _711;
        float _1312 = fma(_1302, cbModelParam._m0[30u].z, fma(_1301, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1300)) - _1269;
        float _1313 = fma(_1302, cbModelParam._m0[31u].z, fma(_1301, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1300)) - _1273;
        float _1314 = fma(_1302, cbModelParam._m0[32u].z, fma(_1301, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1300)) - _1277;
        float _1318 = inversesqrt(dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314)));
        float _1331 = ((_1318 * _1312) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1269 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1318 * _1313) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1273 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1318 * _1314) / cbModelParam._m0[35u].z) + ((((((_1277 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        float _1368 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1335.x + (-0.5));
        float _1370 = _1368 * (_1335.y + (-0.5));
        float _1371 = _1368 * (_1335.z + (-0.5));
        float _1378 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1342.x + (-0.5));
        float _1380 = _1378 * (_1342.y + (-0.5));
        float _1381 = _1378 * (_1342.z + (-0.5));
        float _1388 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1349.x + (-0.5));
        float _1390 = _1388 * (_1349.y + (-0.5));
        float _1391 = _1388 * (_1349.z + (-0.5));
        float _1398 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1356.x + (-0.5));
        float _1400 = _1398 * (_1356.y + (-0.5));
        float _1401 = _1398 * (_1356.z + (-0.5));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = _1369 * 0.5;
        float _1406 = _1379 * 0.5;
        float _1407 = _1389 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_709, _710, _711), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3902 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1432 + 1.0))) + _1437) * _1402;
        float _1447 = _1370 * 0.5;
        float _1448 = _1380 * 0.5;
        float _1449 = _1390 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_709, _710, _711), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3935 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1474 + 1.0))) + _1479) * _1403;
        float _1489 = _1371 * 0.5;
        float _1490 = _1381 * 0.5;
        float _1491 = _1391 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_709, _710, _711), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _3968 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1516 + 1.0))) + _1521) * _1404;
        _1538 = _1371;
        _1539 = _1370;
        _1540 = _1369;
        _1541 = _1381;
        _1542 = _1380;
        _1543 = _1379;
        _1544 = _1391;
        _1545 = _1390;
        _1546 = _1389;
        _1547 = _1404;
        _1548 = _1403;
        _1549 = _1402;
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
    }
    else
    {
        _1538 = _1230;
        _1539 = _1230;
        _1540 = _1230;
        _1541 = _1230;
        _1542 = _1230;
        _1543 = _1230;
        _1544 = _1230;
        _1545 = _1230;
        _1546 = _1230;
        _1547 = _1230;
        _1548 = _1230;
        _1549 = _1230;
        _1550 = 0.0;
        _1551 = 0.0;
        _1552 = 0.0;
    }
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1242)) + _1242;
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1243)) + _1243;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1244)) + _1244;
    float _1585 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1563, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1563, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1563, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1562));
    float _1606 = _867 * 0.5;
    float _1607 = _868 * 0.5;
    float _1608 = _869 * 0.5;
    float _1609 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1612 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1615 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1649;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1622 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1229, _1233, _1236, _1239));
        float _1626 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1231, _1234, _1237, _1240));
        float _1630 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1637 = dot(vec4(cbModelParam._m0[39u]), vec4(_1606, _1607, _1608, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1637) ? 0.0 : (isnan(0.0) ? _1637 : max(0.0, _1637))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1660;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1651 = dot(vec4(cbModelParam._m0[40u]), vec4(_1606, _1607, _1608, 1.0));
        _1660 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1651) ? 0.0 : (isnan(0.0) ? _1651 : max(0.0, _1651))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1660 = 1.0;
    }
    float _1664 = (_1660 * cbModelParam._m0[1u].x) + (_1649 * (1.0 - cbModelParam._m0[1u].x));
    float _1674 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _712);
    float _1675 = isnan(_1674) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1674 : min(cbModelParam._m0[25u].z, _1674));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1723 = fma(_928, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920)) + cbModelParam._m0[13u].w;
        float _1727 = fma(_928, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920)) + cbModelParam._m0[14u].w;
        float _1731 = fma(_928, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920)) + cbModelParam._m0[15u].w;
        float _1734 = fma(_869, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867));
        float _1737 = fma(_869, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867));
        float _1740 = fma(_869, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867));
        float _1768;
        if (_1734 > 0.0)
        {
            _1768 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1768 = frontier_phi_14_12_ladder;
        }
        float _1990;
        if (_1737 > 0.0)
        {
            _1990 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1990 = frontier_phi_23_19_ladder;
        }
        float _2236;
        if (_1740 > 0.0)
        {
            _2236 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2236 = frontier_phi_35_30_ladder;
        }
        float _2238 = isnan(_1990) ? _1768 : (isnan(_1768) ? _1990 : min(_1768, _1990));
        float _2239 = isnan(_2236) ? _2238 : (isnan(_2238) ? _2236 : min(_2238, _2236));
        float _2243 = (_2239 * _1734) + _1723;
        float _2244 = (_2239 * _1737) + _1727;
        float _2245 = (_2239 * _1740) + _1731;
        float _2246 = _2239 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2246;
        float _2250 = _2246 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 > _2250) || ((_2244 < _2248) || ((_2243 < _2248) || (_2243 > _2250))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2245, cbModelParam._m0[9u].z, fma(_2244, cbModelParam._m0[9u].y, _2243 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2245, cbModelParam._m0[10u].z, fma(_2244, cbModelParam._m0[10u].y, _2243 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2245, cbModelParam._m0[11u].z, fma(_2244, cbModelParam._m0[11u].y, _2243 * cbModelParam._m0[11u].x))), _1675);
            frontier_phi_13_35_ladder = _2369.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2369.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2369.x * cbModelParam._m0[1u].y;
        }
        _1756 = frontier_phi_13_35_ladder_2;
        _1758 = frontier_phi_13_35_ladder_1;
        _1760 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1744 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_867, _868, _869), _1675);
        _1756 = _1744.x * cbModelParam._m0[1u].y;
        _1758 = _1744.y * cbModelParam._m0[1u].y;
        _1760 = _1744.z * cbModelParam._m0[1u].y;
    }
    float _1764 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _712);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1764 : min(cbModelParam._m0[25u].w, _1764));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1819 = fma(_928, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920)) + cbModelParam._m0[21u].w;
        float _1823 = fma(_928, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920)) + cbModelParam._m0[22u].w;
        float _1827 = fma(_928, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920)) + cbModelParam._m0[23u].w;
        float _1830 = fma(_869, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867));
        float _1833 = fma(_869, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867));
        float _1836 = fma(_869, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867));
        float _1995;
        if (_1830 > 0.0)
        {
            _1995 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1995 = frontier_phi_25_21_ladder;
        }
        float _2263;
        if (_1833 > 0.0)
        {
            _2263 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2263 = frontier_phi_37_32_ladder;
        }
        float _2468;
        if (_1836 > 0.0)
        {
            _2468 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2468 = frontier_phi_46_43_ladder;
        }
        float _2470 = isnan(_2263) ? _1995 : (isnan(_1995) ? _2263 : min(_1995, _2263));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1830) + _1819;
        float _2476 = (_2471 * _1833) + _1823;
        float _2477 = (_2471 * _1836) + _1827;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2479 = (-1.0) - _2478;
        float _2481 = _2478 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2477 > _2481) || ((_2477 < _2479) || ((_2476 > _2481) || ((_2476 < _2479) || ((_2475 < _2479) || (_2475 > _2481))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2477, cbModelParam._m0[17u].z, fma(_2476, cbModelParam._m0[17u].y, _2475 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2477, cbModelParam._m0[18u].z, fma(_2476, cbModelParam._m0[18u].y, _2475 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2477, cbModelParam._m0[19u].z, fma(_2476, cbModelParam._m0[19u].y, _2475 * cbModelParam._m0[19u].x))), _1765);
            frontier_phi_22_46_ladder = _2676.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2676.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2676.x * cbModelParam._m0[1u].z;
        }
        _1855 = frontier_phi_22_46_ladder_2;
        _1857 = frontier_phi_22_46_ladder_1;
        _1859 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_867, _868, _869), _1765);
        _1855 = _1839.x * cbModelParam._m0[1u].z;
        _1857 = _1839.y * cbModelParam._m0[1u].z;
        _1859 = _1839.z * cbModelParam._m0[1u].z;
    }
    float _1871 = ((((1.0 - _888) * ((_875 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_888 * _875)) * _859;
    float _1872 = _1871 * ((cbModelParam._m0[1u].w * (_1855 - _1756)) + _1756);
    float _1873 = _1871 * ((cbModelParam._m0[1u].w * (_1857 - _1758)) + _1758);
    float _1874 = _1871 * ((cbModelParam._m0[1u].w * (_1859 - _1760)) + _1760);
    float _1877 = fma(_1874, cbSceneParam._m0[89u].z, fma(_1873, cbSceneParam._m0[89u].y, _1872 * cbSceneParam._m0[89u].x));
    float _1880 = fma(_1874, cbSceneParam._m0[90u].z, fma(_1873, cbSceneParam._m0[90u].y, _1872 * cbSceneParam._m0[90u].x));
    float _1883 = fma(_1874, cbSceneParam._m0[91u].z, fma(_1873, cbSceneParam._m0[91u].y, _1872 * cbSceneParam._m0[91u].x));
    vec4 _1891 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_796, _797));
    float _1893 = _1891.w;
    float _1905 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1893);
    float _1906 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1893);
    float _1907 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1893);
    uvec4 _1911 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1913 = _1911.x * 14u;
    uint _1914 = _1913 + 13u;
    float _1921 = _859 + (-1.0);
    float _1926 = (cbLight._m0[_1914].x * _1921) + 1.0;
    float _1927 = (cbLight._m0[_1914].y * _1921) + 1.0;
    float _1928 = (cbLight._m0[_1914].z * _1921) + 1.0;
    float _1929 = (cbLight._m0[_1914].w * _1921) + 1.0;
    uint _1930 = _1913 + 5u;
    float _1936 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
    uint _1940 = _1913 + 4u;
    float _1949 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1953 = _1913 | 1u;
    float _1964 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_709, _710, _711));
    float _1967 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_709, _710, _711));
    float _4104 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _4115 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1972 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
    float _1974 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.3183098733425140380859375;
    float _1981 = ((cbLight._m0[_1930].x * _1936) * _1974) + (((cbLight._m0[_1940].x * _1905) * _1949) * _1972);
    float _1982 = ((_1936 * cbLight._m0[_1930].y) * _1974) + (((cbLight._m0[_1940].y * _1906) * _1949) * _1972);
    float _1983 = ((_1936 * cbLight._m0[_1930].z) * _1974) + (((cbLight._m0[_1940].z * _1907) * _1949) * _1972);
    uvec4 _1987 = floatBitsToUint(cbLight._m0[_1913 + 12u]);
    bool _1989 = _1987.x == 0u;
    float _2000;
    float _2002;
    float _2004;
    if (_1989)
    {
        _2000 = _1981;
        _2002 = _1982;
        _2004 = _1983;
    }
    else
    {
        uint _2008 = _1913 + 6u;
        float _2024 = (dot(vec3(cbLight._m0[_1913 + 2u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2025 = _2024 * _2024;
        float _4126 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2026 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2027 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2000 = (((cbLight._m0[_2008].x * 0.3183098733425140380859375) * _2026) * _2027) + _1981;
        _2002 = (((cbLight._m0[_2008].y * 0.3183098733425140380859375) * _2026) * _2027) + _1982;
        _2004 = (((cbLight._m0[_2008].z * 0.3183098733425140380859375) * _2026) * _2027) + _1983;
    }
    bool _2007 = _1987.y == 0u;
    float _2045;
    float _2047;
    float _2049;
    if (_2007)
    {
        _2045 = _2000;
        _2047 = _2002;
        _2049 = _2004;
    }
    else
    {
        uint _2207 = _1913 + 7u;
        float _2223 = (dot(vec3(cbLight._m0[_1913 + 3u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4142 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2226 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2045 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _2000;
        _2047 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _2002;
        _2049 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _2004;
    }
    uint _2052 = _1913 + 8u;
    float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1913].w)) * _712) * 0.949999988079071044921875);
    float _2066 = _2065 * _2065;
    float _2067 = cbLight._m0[_1913].x + _788;
    float _2068 = cbLight._m0[_1913].y + _789;
    float _2069 = cbLight._m0[_1913].z + _790;
    float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
    float _2074 = _2073 * _2067;
    float _2075 = _2073 * _2068;
    float _2076 = _2073 * _2069;
    float _2077 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_1913].xyz));
    float _4158 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _2081 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2082 = dot(vec3(_709, _710, _711), vec3(_2074, _2075, _2076));
    float _4180 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2086 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_2074, _2075, _2076));
    float _4191 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2090 = _2066 * _2066;
    float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
    float _2105 = (exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2106 = 1.0 - _2066;
    float _2117 = (0.5 / (((_2081 * ((_2080 * _2106) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2106) + _2066) * _2080))) * _2080;
    float _4202 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2119 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
    uint _2133 = _1913 + 9u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _712) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1953].x + _788;
    float _2147 = cbLight._m0[_1953].y + _789;
    float _2148 = cbLight._m0[_1953].z + _790;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_1953].xyz));
    float _4213 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2160 = dot(vec3(_709, _710, _711), vec3(_2153, _2154, _2155));
    float _4224 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_2153, _2154, _2155));
    float _4235 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2145 * _2145;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2181 = (exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2182 = 1.0 - _2145;
    float _2192 = (0.5 / (((_2081 * ((_2159 * _2182) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2182) + _2145) * _2159))) * _2159;
    float _4246 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2194 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    float _2204 = (((_2181 * cbLight._m0[_2133].x) * _2194) * _1936) + ((((cbLight._m0[_2052].x * _1905) * _2105) * _2119) * _1949);
    float _2205 = (((_2181 * cbLight._m0[_2133].y) * _2194) * _1936) + ((((cbLight._m0[_2052].y * _1906) * _2105) * _2119) * _1949);
    float _2206 = (((_2181 * cbLight._m0[_2133].z) * _2194) * _1936) + ((((cbLight._m0[_2052].z * _1907) * _2105) * _2119) * _1949);
    float _2268;
    float _2270;
    float _2272;
    if (_1989)
    {
        _2268 = _2204;
        _2270 = _2205;
        _2272 = _2206;
    }
    else
    {
        uint _2274 = _1913 + 2u;
        uint _2278 = _1913 + 10u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _712) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _788;
        float _2295 = cbLight._m0[_2274].y + _789;
        float _2296 = cbLight._m0[_2274].z + _790;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2274].xyz));
        float _4257 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2308 = dot(vec3(_709, _710, _711), vec3(_2301, _2302, _2303));
        float _4268 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4279 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2329 = (exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2330 = 1.0 - _2293;
        float _2340 = (0.5 / (((_2081 * ((_2307 * _2330) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2330) + _2293) * _2307))) * _2307;
        float _4290 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2342 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2343 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2268 = (((_2329 * cbLight._m0[_2278].x) * _2342) * _2343) + _2204;
        _2270 = (((_2329 * cbLight._m0[_2278].y) * _2342) * _2343) + _2205;
        _2272 = (((_2329 * cbLight._m0[_2278].z) * _2342) * _2343) + _2206;
    }
    float _2378;
    float _2380;
    float _2382;
    if (_2007)
    {
        _2378 = _2268;
        _2380 = _2270;
        _2382 = _2272;
    }
    else
    {
        uint _2389 = _1913 + 3u;
        uint _2393 = _1913 + 11u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _712) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _788;
        float _2410 = cbLight._m0[_2389].y + _789;
        float _2411 = cbLight._m0[_2389].z + _790;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2389].xyz));
        float _4306 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2423 = dot(vec3(_709, _710, _711), vec3(_2416, _2417, _2418));
        float _4317 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4328 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2444 = (exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2445 = 1.0 - _2408;
        float _2455 = (0.5 / (((_2081 * ((_2422 * _2445) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2445) + _2408) * _2422))) * _2422;
        float _4339 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2457 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2458 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2378 = (((_2444 * cbLight._m0[_2393].x) * _2457) * _2458) + _2268;
        _2380 = (((_2444 * cbLight._m0[_2393].y) * _2457) * _2458) + _2270;
        _2382 = (((_2444 * cbLight._m0[_2393].z) * _2457) * _2458) + _2272;
    }
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_1911.y == 0u)
    {
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2533;
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2533;
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2533;
        uvec4 _2548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2549 = _2548.x;
        uint _2560 = uint((float(_2548.y) * floor(float(uint(cbSceneParam._m0[85u].y * _797) / _2549))) + floor(float(uint(cbSceneParam._m0[85u].x * _796) / _2549)));
        float _2570 = (log2(_2536 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2571 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        uint _2574 = uint(isnan(14.0) ? _2571 : (isnan(_2571) ? 14.0 : min(_2571, 14.0)));
        uvec4 _2579 = texelFetch(g_lightClusterGridBuffer, int(((_2574 << 2u) + (_2560 << 6u)) >> 2u));
        uint _2580 = _2579.x;
        uint _2581 = _2548.z;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((((1u << ((_2581 >> 4u) & 15u)) + 4294967295u) & _2580) == 0u) || ((_2581 & 240u) == 0u))
        {
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
        }
        else
        {
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            uint _2832 = 0u;
            uint _2841;
            bool _2842;
            for (;;)
            {
                _2841 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                _2842 = _2841 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2842)
                {
                    frontier_phi_61_pred = _2826;
                    frontier_phi_61_pred_1 = _2831;
                    frontier_phi_61_pred_2 = _2830;
                    frontier_phi_61_pred_3 = _2829;
                    frontier_phi_61_pred_4 = _2828;
                    frontier_phi_61_pred_5 = _2827;
                }
                else
                {
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    uint _2956;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2841;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    for (;;)
                    {
                        uint _2960 = uint(findLSB(_2956)) + (_2832 << 5u);
                        uint _2957 = (_2956 + 4294967295u) & _2956;
                        uint _2962 = _2960 * 48u;
                        vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2982 = (_2960 * 48u) + 4u;
                        vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3001 = (_2960 * 48u) + 8u;
                        vec3 _3012 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x));
                        float _3016 = _2976.x - _2534;
                        float _3017 = _2976.y - _2535;
                        float _3018 = _2976.z - _2536;
                        float _3019 = dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018));
                        float _3022 = inversesqrt(_3019);
                        float _3023 = _3022 * _3016;
                        float _3024 = _3022 * _3017;
                        float _3025 = _3022 * _3018;
                        float _3026 = dot(vec3(_815, _818, _821), vec3(_3023, _3024, _3025));
                        float _3031 = 1.0 - (_3019 * _2976.w);
                        float _4365 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3032 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3033 = sqrt(_3019) * _2995.w;
                        float _3036 = 1.39999997615814208984375 / (_3033 + 1.39999997615814208984375);
                        float _3037 = _3036 * _3036;
                        float _3040 = ((1.0 - _3037) * _3026) + _3037;
                        float _3043 = _3033 * _3033;
                        float _3047 = ((isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))) * _3032) / ((_3043 * 0.699999988079071044921875) + 1.0);
                        float _3051 = (-0.0) - _2534;
                        float _3052 = (-0.0) - _2535;
                        float _3053 = (-0.0) - _2536;
                        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                        float _3058 = _3057 * _3051;
                        float _3059 = _3057 * _3052;
                        float _3060 = _3057 * _3053;
                        float _3068 = exp2(log2(1.0 / ((_3043 * 3.5) + 5.0)) * 0.25);
                        float _3069 = 1.0 - _875;
                        float _3076 = sqrt(1.0 - ((1.0 - (_3069 * _3069)) * (1.0 - (_3068 * _3068))));
                        float _3077 = _3076 * _3076;
                        float _3078 = _3077 * _3077;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3081 = _3060 + _3025;
                        float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                        float _3089 = dot(vec3(_815, _818, _821), vec3(_3058, _3059, _3060));
                        float _4381 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3093 = dot(vec3(_815, _818, _821), vec3(_3085 * _3079, _3085 * _3080, _3085 * _3081));
                        float _4392 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3100 = ((_3096 * _3096) * (_3078 + (-1.0))) + 1.0;
                        float _3101 = _3036 * _3077;
                        float _3102 = _3101 * _3101;
                        float _3105 = ((1.0 - _3102) * _3026) + _3102;
                        float _4403 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3106 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3107 = 1.0 - _3077;
                        float _3117 = (0.5 / (((_3106 * ((_3092 * _3107) + _3077)) + 9.9999999392252902907785028219223e-09) + (((_3106 * _3107) + _3077) * _3092))) * _3106;
                        float _4414 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3128 = (((_3078 * 3.1415927410125732421875) * (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) / ((_3100 * _3100) * ((_3043 * 2.1991131305694580078125) + 3.141590118408203125))) * _3032;
                        _2885 = (_3047 * _2995.x) + _2953;
                        _2886 = (_3047 * _2995.y) + _2954;
                        _2887 = (_3047 * _2995.z) + _2955;
                        _2882 = (_3128 * _3012.x) + _2950;
                        _2883 = (_3128 * _3012.y) + _2951;
                        _2884 = (_3128 * _3012.z) + _2952;
                        if (_2957 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2957;
                        }
                    }
                    frontier_phi_61_pred = _2882;
                    frontier_phi_61_pred_1 = _2887;
                    frontier_phi_61_pred_2 = _2886;
                    frontier_phi_61_pred_3 = _2885;
                    frontier_phi_61_pred_4 = _2884;
                    frontier_phi_61_pred_5 = _2883;
                }
                _2682 = frontier_phi_61_pred;
                _2692 = frontier_phi_61_pred_1;
                _2690 = frontier_phi_61_pred_2;
                _2688 = frontier_phi_61_pred_3;
                _2686 = frontier_phi_61_pred_4;
                _2684 = frontier_phi_61_pred_5;
                uint _2833 = _2832 + 1u;
                if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2826 = _2682;
                    _2827 = _2684;
                    _2828 = _2686;
                    _2829 = _2688;
                    _2830 = _2690;
                    _2831 = _2692;
                    _2832 = _2833;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
        }
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.z;
        uint _2698 = (_2696 >> 8u) & 15u;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((4294967295u << _2698) & _2580) == 0u)
        {
            _2794 = _2681;
            _2796 = _2683;
            _2798 = _2685;
            _2800 = _2687;
            _2802 = _2689;
            _2804 = _2691;
        }
        else
        {
            float _2819 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
            float _2820 = _2819 * _2534;
            float _2821 = _2819 * _2535;
            float _2822 = _2819 * _2536;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2698 < ((_2696 >> 12u) & 15u))
            {
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2933 = _2681;
                float _2934 = _2683;
                float _2935 = _2685;
                float _2936 = _2687;
                float _2937 = _2689;
                float _2938 = _2691;
                uint _2939 = _2698;
                uint _2948;
                bool _2949;
                for (;;)
                {
                    _2948 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2939 << 2u)) >> 2u)).x;
                    _2949 = _2948 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2949)
                    {
                        frontier_phi_67_pred = _2936;
                        frontier_phi_67_pred_1 = _2937;
                        frontier_phi_67_pred_2 = _2938;
                        frontier_phi_67_pred_3 = _2935;
                        frontier_phi_67_pred_4 = _2934;
                        frontier_phi_67_pred_5 = _2933;
                    }
                    else
                    {
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3146 = _2933;
                        float _3147 = _2934;
                        float _3148 = _2935;
                        float _3149 = _2936;
                        float _3150 = _2937;
                        float _3151 = _2938;
                        uint _3152 = _2948;
                        uint _3153;
                        vec4 _3178;
                        float _3179;
                        vec4 _3194;
                        vec3 _3206;
                        vec4 _3221;
                        vec4 _3237;
                        float _3283;
                        bool _3284;
                        for (;;)
                        {
                            uint _3163 = ((_2939 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3152));
                            _3153 = (_3152 + 4294967295u) & _3152;
                            uint _3165 = _3163 * 40u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3179 = _3178.w;
                            uint _3181 = (_3163 * 40u) + 4u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3196 = (_3163 * 40u) + 8u;
                            _3206 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x));
                            uint _3208 = (_3163 * 40u) + 16u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3224 = (_3163 * 40u) + 20u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3239 = (_3163 * 40u) + 24u;
                            vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3258 = (_3163 * 40u) + 28u;
                            vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            _3283 = fma(_2536, _3271.z, fma(_2535, _3271.y, _3271.x * _2534)) + _3271.w;
                            _3284 = !((fma(_2536, _3252.z, fma(_2535, _3252.y, _3252.x * _2534)) + _3252.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3284)
                            {
                                float _3311 = _3178.x - _2534;
                                float _3312 = _3178.y - _2535;
                                float _3313 = _3178.z - _2536;
                                float _3314 = dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313));
                                float _3317 = inversesqrt(_3314);
                                float _3318 = _3317 * _3311;
                                float _3319 = _3317 * _3312;
                                float _3320 = _3317 * _3313;
                                float _3324 = 1.0 - (_3314 / (_3179 * _3179));
                                float _4425 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3329 = sqrt(_3314) * _3194.w;
                                float _3331 = 1.39999997615814208984375 / (_3329 + 1.39999997615814208984375);
                                float _3332 = _3331 * _3331;
                                float _3335 = ((1.0 - _3332) * dot(vec3(_3318, _3319, _3320), vec3(_815, _818, _821))) + _3332;
                                float _3338 = _3329 * _3329;
                                float _3342 = (fma(_2536, _3221.z, fma(_2535, _3221.y, _3221.x * _2534)) + _3221.w) / _3283;
                                float _3343 = (fma(_2536, _3237.z, fma(_2535, _3237.y, _3237.x * _2534)) + _3237.w) / _3283;
                                float _3347 = 1.0 - dot(vec2(_3342, _3343), vec2(_3342, _3343));
                                float _4441 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3349 = _3348 * (((isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0))) * _3325) / ((_3338 * 0.699999988079071044921875) + 1.0));
                                float _3361 = exp2(log2(1.0 / ((_3338 * 3.5) + 5.0)) * 0.25);
                                float _3362 = 1.0 - _875;
                                float _3369 = sqrt(1.0 - ((1.0 - (_3362 * _3362)) * (1.0 - (_3361 * _3361))));
                                float _3370 = _3369 * _3369;
                                float _3371 = _3370 * _3370;
                                float _3372 = _3318 - _2820;
                                float _3373 = _3319 - _2821;
                                float _3374 = _3320 - _2822;
                                float _3378 = inversesqrt(dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374)));
                                float _3382 = dot(vec3(_815, _818, _821), vec3((-0.0) - _2820, (-0.0) - _2821, (-0.0) - _2822));
                                float _4452 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3385 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3386 = dot(vec3(_815, _818, _821), vec3(_3378 * _3372, _3378 * _3373, _3378 * _3374));
                                float _4463 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3389 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3393 = ((_3389 * _3389) * (_3371 + (-1.0))) + 1.0;
                                float _3394 = _3331 * _3370;
                                float _3395 = _3394 * _3394;
                                float _3401 = ((1.0 - _3395) * dot(vec3(_815, _818, _821), vec3(_3318, _3319, _3320))) + _3395;
                                float _4474 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3402 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3403 = 1.0 - _3370;
                                float _3413 = (0.5 / (((_3402 * ((_3385 * _3403) + _3370)) + 9.9999999392252902907785028219223e-09) + (((_3402 * _3403) + _3370) * _3385))) * _3402;
                                float _4485 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3423 = (_3348 * _3325) * (((_3371 * 3.1415927410125732421875) * (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) / ((_3393 * _3393) * ((_3338 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3423 * _3206.x;
                                frontier_phi_73_pred_1 = _3423 * _3206.y;
                                frontier_phi_73_pred_2 = _3349 * _3194.z;
                                frontier_phi_73_pred_3 = _3349 * _3194.y;
                                frontier_phi_73_pred_4 = _3349 * _3194.x;
                                frontier_phi_73_pred_5 = _3423 * _3206.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3427 = frontier_phi_73_pred;
                            _3428 = frontier_phi_73_pred_1;
                            _3432 = frontier_phi_73_pred_2;
                            _3431 = frontier_phi_73_pred_3;
                            _3430 = frontier_phi_73_pred_4;
                            _3429 = frontier_phi_73_pred_5;
                            _3136 = _3430 + _3149;
                            _3137 = _3431 + _3150;
                            _3138 = _3432 + _3151;
                            _3133 = _3427 + _3146;
                            _3134 = _3428 + _3147;
                            _3135 = _3429 + _3148;
                            if (_3153 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3153;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3136;
                        frontier_phi_67_pred_1 = _3137;
                        frontier_phi_67_pred_2 = _3138;
                        frontier_phi_67_pred_3 = _3135;
                        frontier_phi_67_pred_4 = _3134;
                        frontier_phi_67_pred_5 = _3133;
                    }
                    _2801 = frontier_phi_67_pred;
                    _2803 = frontier_phi_67_pred_1;
                    _2805 = frontier_phi_67_pred_2;
                    _2799 = frontier_phi_67_pred_3;
                    _2797 = frontier_phi_67_pred_4;
                    _2795 = frontier_phi_67_pred_5;
                    uint _2940 = _2939 + 1u;
                    if (_2940 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2933 = _2795;
                        _2934 = _2797;
                        _2935 = _2799;
                        _2936 = _2801;
                        _2937 = _2803;
                        _2938 = _2805;
                        _2939 = _2940;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2803;
                frontier_phi_55_56_ladder_1 = _2805;
                frontier_phi_55_56_ladder_2 = _2801;
                frontier_phi_55_56_ladder_3 = _2799;
                frontier_phi_55_56_ladder_4 = _2797;
                frontier_phi_55_56_ladder_5 = _2795;
            }
            else
            {
                frontier_phi_55_56_ladder = _2689;
                frontier_phi_55_56_ladder_1 = _2691;
                frontier_phi_55_56_ladder_2 = _2687;
                frontier_phi_55_56_ladder_3 = _2685;
                frontier_phi_55_56_ladder_4 = _2683;
                frontier_phi_55_56_ladder_5 = _2681;
            }
            _2794 = frontier_phi_55_56_ladder_5;
            _2796 = frontier_phi_55_56_ladder_4;
            _2798 = frontier_phi_55_56_ladder_3;
            _2800 = frontier_phi_55_56_ladder_2;
            _2802 = frontier_phi_55_56_ladder;
            _2804 = frontier_phi_55_56_ladder_1;
        }
        float _2809 = isnan(1.0) ? _859 : (isnan(_859) ? 1.0 : min(_859, 1.0));
        _2593 = (_2809 * _2800) + _2045;
        _2595 = (_2809 * _2802) + _2047;
        _2597 = (_2809 * _2804) + _2049;
        _2599 = ((_2794 * 0.039999999105930328369140625) * _2809) + _2378;
        _2601 = ((_2796 * 0.039999999105930328369140625) * _2809) + _2380;
        _2603 = ((_2798 * 0.039999999105930328369140625) * _2809) + _2382;
    }
    else
    {
        _2593 = _2045;
        _2595 = _2047;
        _2597 = _2049;
        _2599 = _2378;
        _2601 = _2380;
        _2603 = _2382;
    }
    float _4501 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4512 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4523 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    uint _2623 = _247 + 6u;
    float _2631 = _796 / cbSceneParam._m0[86u].x;
    float _2632 = _797 / cbSceneParam._m0[86u].y;
    vec4 _2646 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, (log2((isnan(cbSceneParam._m0[77u].w) ? _730 : (isnan(_730) ? cbSceneParam._m0[77u].w : min(_730, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2648 = _2646.x;
    float _2649 = _2646.y;
    float _2650 = _2646.z;
    float _2651 = _2646.w;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    if (_730 > cbSceneParam._m0[78u].w)
    {
        float _2706 = isnan(_730) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _730 : min(cbSceneParam._m0[80u].w, _730));
        float _2707 = _2706 / _730;
        float _2718 = _2707 * _781;
        float _2719 = _782 * _2707;
        float _2720 = (-0.0) - _2719;
        float _2722 = _2707 * _783;
        float _2724 = (cbSceneParam._m0[77u].w * _2720) / _2706;
        float _2725 = _2724 + cbSceneParam._m0[79u].w;
        float _2726 = cbSceneParam._m0[79u].w - _2719;
        float _2732 = sqrt(((_2718 * _2718) + (_2719 * _2719)) + (_2722 * _2722));
        float _2735 = (1.0 - (cbSceneParam._m0[77u].w / _2706)) * _2732;
        float _2740 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2742 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2895;
        if (abs((_2720 - _2724) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2895 = ((((_2725 > 0.0) ? exp2(_2740 * _2725) : (2.0 - exp2(_2742 * _2725))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2735;
        }
        else
        {
            float _2855 = 1.0 / cbSceneParam._m0[80u].x;
            float _2856 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : max(_2725, _2726));
            float _2857 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : min(_2725, _2726));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            _2895 = ((abs(_2732 / _2720) * cbSceneParam._m0[80u].y) * ((((_2866 - _2867) * 2.0) - ((exp2(_2740 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0)))) - exp2(_2740 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))))) * _2855)) - ((exp2(_2742 * _2866) - exp2(_2742 * _2867)) * _2855))) + (_2735 * cbSceneParam._m0[80u].z);
        }
        vec4 _2897 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, 1.0), 0.0);
        float _2906 = exp2((_2895 * (-1.44269502162933349609375)) * (1.0 - _2897.w));
        float _2907 = log2(_2906);
        float _2923 = log2(_2651);
        _2744 = (exp2(_2923 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].x)) * _2897.x) / cbSceneParam._m0[78u].x)) + _2648;
        _2746 = (exp2(_2923 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].y)) * _2897.y) / cbSceneParam._m0[78u].y)) + _2649;
        _2748 = (exp2(_2923 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].z)) * _2897.z) / cbSceneParam._m0[78u].z)) + _2650;
        _2750 = _2906 * _2651;
    }
    else
    {
        _2744 = _2648;
        _2746 = _2649;
        _2748 = _2650;
        _2750 = _2651;
    }
    float _2762 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2763 = _2762 == 3.0;
    float _2764 = log2(_2750);
    float _2771 = exp2(_2764 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2593 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _859))) + ((_2599 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _2772 = exp2(_2764 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2595 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _859))) + ((_2601 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _2773 = exp2(_2764 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2597 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _859))) + ((_2603 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _2782 = (_2762 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2782 * (_2763 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2744)));
    SV_Target.y = _2782 * (_2763 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2746)));
    SV_Target.z = _2782 * (_2763 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.w = cbInstanceData._m0[_2623].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2623].w;
}


