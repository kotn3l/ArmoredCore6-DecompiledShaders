#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1332;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3635 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3646 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3657 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _372.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[24u].z) + _421) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3668 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _446 = (_439 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _447 = (_439 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _448 = (_439 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _289) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _290) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _372.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[24u].z) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3679 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _519 = (_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446;
    float _520 = (_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447;
    float _521 = (_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448;
    float _525 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _519;
    float _528 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _520;
    float _531 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _521;
    float _538 = ((_519 - _525) * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) + _525;
    float _539 = ((_520 - _528) * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) + _528;
    float _540 = ((_521 - _531) * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) + _531;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _601 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _620 = _618.x;
    float _621 = _618.y;
    float _622 = _618.z;
    float _629 = ((_601.x - _620) * _439) + _620;
    float _630 = ((_601.y - _621) * _439) + _621;
    float _631 = ((_601.z - _622) * _439) + _622;
    vec4 _643 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _289) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _290) + cbTextureTilingScale._m0[2u].w));
    float _656 = ((_643.z - _631) * _512) + _631;
    float _659 = ((((_643.x - _629) * _512) + _629) * 2.0) + (-1.0);
    float _660 = ((((_643.y - _630) * _512) + _630) * 2.0) + (-1.0);
    float _661 = dot(vec2(_659, _660), vec2(_659, _660));
    float _3690 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _666 = sqrt(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))));
    vec4 _680 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _707 = _705.x;
    float _708 = 1.0 - _707;
    float _721 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_707 - _708) * cbMtdParam._m0[24u].w) + _708) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3701 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _722 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _729 = (_722 * ((_559.x * cbMtdParam._m0[18u].x) - _538)) + _538;
    float _730 = (_722 * ((_559.y * cbMtdParam._m0[18u].y) - _539)) + _539;
    float _731 = (_722 * ((_559.z * cbMtdParam._m0[18u].z) - _540)) + _540;
    float _736 = (((_578.z - _656) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _656;
    float _740 = ((_680.z - _736) * cbMtdParam._m0[19u].w) + _736;
    vec4 _753 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _760 = (_753.x * 2.0) + (-1.0);
    float _761 = (_753.y * 2.0) + (-1.0);
    float _762 = dot(vec2(_760, _761), vec2(_760, _761));
    float _3712 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _770 = (_722 * (_753.z - _740)) + _740;
    float _779 = (_659 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_578.x * 2.0) + (-1.0)))) + (((_680.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _780 = (_660 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_578.y * 2.0) + (-1.0)))) + (((_680.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _792 = (((_760 - _779) + (cbMtdParam._m0[21u].x * _779)) * _722) + _779;
    float _793 = (((_761 - _780) + (cbMtdParam._m0[21u].x * _780)) * _722) + _780;
    float _794 = (_722 * (sqrt(1.0 - (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) - _666)) + _666;
    float _796 = cbMtdParam._m0[22u].x + _680.w;
    float _799 = fma(_794, _236 * NORMAL.x, fma(_793, _243 * TANGENT.x, (_229 * _221) * _792));
    float _802 = fma(_794, _236 * NORMAL.y, fma(_793, _243 * TANGENT.y, (_229 * _222) * _792));
    float _805 = fma(_794, _236 * NORMAL.z, fma(_793, _243 * TANGENT.z, (_229 * _223) * _792));
    float _809 = inversesqrt(dot(vec3(_799, _802, _805), vec3(_799, _802, _805)));
    float _810 = _809 * _799;
    float _811 = _809 * _802;
    float _812 = _809 * _805;
    float _3723 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _813 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _3745 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _3756 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _3767 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _831 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _883 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _873);
    float _884 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _873);
    float _885 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _873);
    float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
    float _890 = _883 * _889;
    float _891 = _884 * _889;
    float _892 = _885 * _889;
    float _898 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _899 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _917 = fma(_812, cbSceneParam._m0[5u].z, fma(_811, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _810));
    float _920 = fma(_812, cbSceneParam._m0[6u].z, fma(_811, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _810));
    float _923 = fma(_812, cbSceneParam._m0[7u].z, fma(_811, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _810));
    uint _937 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _943 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_937].x;
    float _944 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_937].y;
    float _945 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_937].z;
    float _3778 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    vec4 _957 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _898, cbSceneParam._m0[86u].y * _899));
    float _961 = ((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * TEXCOORD_5.w) * _957.x;
    float _962 = dot(vec3(_810, _811, _812), vec3(_890, _891, _892));
    float _965 = _962 * 2.0;
    float _969 = (_965 * _810) - _890;
    float _970 = (_965 * _811) - _891;
    float _971 = (_965 * _812) - _892;
    float _975 = abs(dot(vec3(_890, _891, _892), vec3(_810, _811, _812)));
    float _3811 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _977 = sqrt(_813);
    float _990 = exp2((_977 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_977 * 3.0));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1331;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1056 = fma(_1030, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022));
        float _1060 = fma(_1030, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022));
        float _1064 = fma(_1030, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022));
        float _1089 = _1022 + _810;
        float _1090 = _1026 + _811;
        float _1091 = _1030 + _812;
        float _1101 = fma(_1091, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089)) - _1056;
        float _1102 = fma(_1091, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089)) - _1060;
        float _1103 = fma(_1091, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089)) - _1064;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1056 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1060 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[34u].z) + ((((((_1064 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1159 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1125.x + (-0.5));
        float _1161 = _1159 * (_1125.y + (-0.5));
        float _1162 = _1159 * (_1125.z + (-0.5));
        float _1169 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1132.x + (-0.5));
        float _1171 = _1169 * (_1132.y + (-0.5));
        float _1172 = _1169 * (_1132.z + (-0.5));
        float _1179 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1139.x + (-0.5));
        float _1181 = _1179 * (_1139.y + (-0.5));
        float _1182 = _1179 * (_1139.z + (-0.5));
        float _1189 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1146.x + (-0.5));
        float _1191 = _1189 * (_1146.y + (-0.5));
        float _1192 = _1189 * (_1146.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1213 = (dot(vec3(_810, _811, _812), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1223 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3859 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1225 + 1.0))) + _1230) * _1193;
        float _1240 = _1161 * 0.5;
        float _1241 = _1171 * 0.5;
        float _1242 = _1181 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_810, _811, _812), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3892 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1267 + 1.0))) + _1272) * _1194;
        float _1282 = _1162 * 0.5;
        float _1283 = _1172 * 0.5;
        float _1284 = _1182 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_810, _811, _812), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3925 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1309 + 1.0))) + _1314) * _1195;
        _1331 = _1162;
        _1333 = _1161;
        _1334 = _1160;
        _1335 = _1172;
        _1336 = _1171;
        _1337 = _1170;
        _1338 = _1182;
        _1339 = _1181;
        _1340 = _1180;
        _1341 = _1195;
        _1342 = _1194;
        _1343 = _1193;
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1332;
        _1333 = _1332;
        _1334 = _1332;
        _1335 = _1332;
        _1336 = _1332;
        _1337 = _1332;
        _1338 = _1332;
        _1339 = _1332;
        _1340 = _1332;
        _1341 = _1332;
        _1342 = _1332;
        _1343 = _1332;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1370 = fma(_1030, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022));
        float _1374 = fma(_1030, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022));
        float _1378 = fma(_1030, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022));
        float _1401 = _1022 + _810;
        float _1402 = _1026 + _811;
        float _1403 = _1030 + _812;
        float _1413 = fma(_1403, cbModelParam._m0[30u].z, fma(_1402, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1401)) - _1370;
        float _1414 = fma(_1403, cbModelParam._m0[31u].z, fma(_1402, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1401)) - _1374;
        float _1415 = fma(_1403, cbModelParam._m0[32u].z, fma(_1402, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1401)) - _1378;
        float _1419 = inversesqrt(dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415)));
        float _1432 = ((_1419 * _1413) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1370 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1419 * _1414) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1374 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1419 * _1415) / cbModelParam._m0[35u].z) + ((((((_1378 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        float _1469 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1436.x + (-0.5));
        float _1471 = _1469 * (_1436.y + (-0.5));
        float _1472 = _1469 * (_1436.z + (-0.5));
        float _1479 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1443.x + (-0.5));
        float _1481 = _1479 * (_1443.y + (-0.5));
        float _1482 = _1479 * (_1443.z + (-0.5));
        float _1489 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1450.x + (-0.5));
        float _1491 = _1489 * (_1450.y + (-0.5));
        float _1492 = _1489 * (_1450.z + (-0.5));
        float _1499 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1457.x + (-0.5));
        float _1501 = _1499 * (_1457.y + (-0.5));
        float _1502 = _1499 * (_1457.z + (-0.5));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = _1470 * 0.5;
        float _1507 = _1480 * 0.5;
        float _1508 = _1490 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_810, _811, _812), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _3988 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1533 + 1.0))) + _1538) * _1503;
        float _1548 = _1471 * 0.5;
        float _1549 = _1481 * 0.5;
        float _1550 = _1491 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_810, _811, _812), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4021 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1575 + 1.0))) + _1580) * _1504;
        float _1590 = _1472 * 0.5;
        float _1591 = _1482 * 0.5;
        float _1592 = _1492 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_810, _811, _812), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4054 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1617 + 1.0))) + _1622) * _1505;
        _1639 = _1472;
        _1640 = _1471;
        _1641 = _1470;
        _1642 = _1482;
        _1643 = _1481;
        _1644 = _1480;
        _1645 = _1492;
        _1646 = _1491;
        _1647 = _1490;
        _1648 = _1505;
        _1649 = _1504;
        _1650 = _1503;
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
    }
    else
    {
        _1639 = _1332;
        _1640 = _1332;
        _1641 = _1332;
        _1642 = _1332;
        _1643 = _1332;
        _1644 = _1332;
        _1645 = _1332;
        _1646 = _1332;
        _1647 = _1332;
        _1648 = _1332;
        _1649 = _1332;
        _1650 = _1332;
        _1651 = 0.0;
        _1652 = 0.0;
        _1653 = 0.0;
    }
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1344)) + _1344;
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1345)) + _1345;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1346)) + _1346;
    float _1686 = fma(_1665, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1663 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1665, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1663 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1665, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1663));
    float _1707 = _969 * 0.5;
    float _1708 = _970 * 0.5;
    float _1709 = _971 * 0.5;
    float _1710 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1713 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1716 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1750;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1723 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1331, _1335, _1338, _1341));
        float _1727 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1731 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1738 = dot(vec4(cbModelParam._m0[39u]), vec4(_1707, _1708, _1709, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1761;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1752 = dot(vec4(cbModelParam._m0[40u]), vec4(_1707, _1708, _1709, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1765 = (_1761 * cbModelParam._m0[1u].x) + (_1750 * (1.0 - cbModelParam._m0[1u].x));
    float _1775 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _813);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1775 : min(cbModelParam._m0[25u].z, _1775));
    float _1856;
    float _1858;
    float _1860;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1823 = fma(_1030, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022)) + cbModelParam._m0[13u].w;
        float _1827 = fma(_1030, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022)) + cbModelParam._m0[14u].w;
        float _1831 = fma(_1030, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022)) + cbModelParam._m0[15u].w;
        float _1834 = fma(_971, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969));
        float _1837 = fma(_971, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969));
        float _1840 = fma(_971, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969));
        float _1868;
        if (_1834 > 0.0)
        {
            _1868 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1868 = frontier_phi_14_12_ladder;
        }
        float _2068;
        if (_1837 > 0.0)
        {
            _2068 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2068 = frontier_phi_23_19_ladder;
        }
        float _2311;
        if (_1840 > 0.0)
        {
            _2311 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2311 = frontier_phi_35_30_ladder;
        }
        float _2313 = isnan(_2068) ? _1868 : (isnan(_1868) ? _2068 : min(_1868, _2068));
        float _2314 = isnan(_2311) ? _2313 : (isnan(_2313) ? _2311 : min(_2313, _2311));
        float _2318 = (_2314 * _1834) + _1823;
        float _2319 = (_2314 * _1837) + _1827;
        float _2320 = (_2314 * _1840) + _1831;
        float _2321 = _2314 * 9.9999997473787516355514526367188e-05;
        float _2323 = (-1.0) - _2321;
        float _2325 = _2321 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2320 > _2325) || ((_2320 < _2323) || ((_2319 > _2325) || ((_2319 < _2323) || ((_2318 < _2323) || (_2318 > _2325))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2320, cbModelParam._m0[9u].z, fma(_2319, cbModelParam._m0[9u].y, _2318 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2320, cbModelParam._m0[10u].z, fma(_2319, cbModelParam._m0[10u].y, _2318 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2320, cbModelParam._m0[11u].z, fma(_2319, cbModelParam._m0[11u].y, _2318 * cbModelParam._m0[11u].x))), _1776);
            frontier_phi_13_35_ladder = _2444.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2444.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2444.x * cbModelParam._m0[1u].y;
        }
        _1856 = frontier_phi_13_35_ladder_2;
        _1858 = frontier_phi_13_35_ladder_1;
        _1860 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_969, _970, _971), _1776);
        _1856 = _1844.x * cbModelParam._m0[1u].y;
        _1858 = _1844.y * cbModelParam._m0[1u].y;
        _1860 = _1844.z * cbModelParam._m0[1u].y;
    }
    float _1864 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _813);
    float _1865 = isnan(_1864) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1864 : min(cbModelParam._m0[25u].w, _1864));
    float _1954;
    float _1956;
    float _1958;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1918 = fma(_1030, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022)) + cbModelParam._m0[21u].w;
        float _1922 = fma(_1030, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022)) + cbModelParam._m0[22u].w;
        float _1926 = fma(_1030, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022)) + cbModelParam._m0[23u].w;
        float _1929 = fma(_971, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969));
        float _1932 = fma(_971, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969));
        float _1935 = fma(_971, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969));
        float _2073;
        if (_1929 > 0.0)
        {
            _2073 = abs((1.0 - _1918) / _1929);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1918 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2073 = frontier_phi_25_21_ladder;
        }
        float _2338;
        if (_1932 > 0.0)
        {
            _2338 = abs((1.0 - _1922) / _1932);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1922 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2338 = frontier_phi_37_32_ladder;
        }
        float _2543;
        if (_1935 > 0.0)
        {
            _2543 = abs((1.0 - _1926) / _1935);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1926 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2543 = frontier_phi_46_43_ladder;
        }
        float _2545 = isnan(_2338) ? _2073 : (isnan(_2073) ? _2338 : min(_2073, _2338));
        float _2546 = isnan(_2543) ? _2545 : (isnan(_2545) ? _2543 : min(_2545, _2543));
        float _2550 = (_2546 * _1929) + _1918;
        float _2551 = (_2546 * _1932) + _1922;
        float _2552 = (_2546 * _1935) + _1926;
        float _2553 = _2546 * 9.9999997473787516355514526367188e-05;
        float _2554 = (-1.0) - _2553;
        float _2556 = _2553 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2552 > _2556) || ((_2552 < _2554) || ((_2551 > _2556) || ((_2551 < _2554) || ((_2550 < _2554) || (_2550 > _2556))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2751 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2552, cbModelParam._m0[17u].z, fma(_2551, cbModelParam._m0[17u].y, _2550 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2552, cbModelParam._m0[18u].z, fma(_2551, cbModelParam._m0[18u].y, _2550 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2552, cbModelParam._m0[19u].z, fma(_2551, cbModelParam._m0[19u].y, _2550 * cbModelParam._m0[19u].x))), _1865);
            frontier_phi_22_46_ladder = _2751.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2751.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2751.x * cbModelParam._m0[1u].z;
        }
        _1954 = frontier_phi_22_46_ladder_2;
        _1956 = frontier_phi_22_46_ladder_1;
        _1958 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_969, _970, _971), _1865);
        _1954 = _1938.x * cbModelParam._m0[1u].z;
        _1956 = _1938.y * cbModelParam._m0[1u].z;
        _1958 = _1938.z * cbModelParam._m0[1u].z;
    }
    float _1970 = ((((1.0 - _990) * ((_977 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_990 * _977)) * _961;
    float _1971 = _1970 * ((cbModelParam._m0[1u].w * (_1954 - _1856)) + _1856);
    float _1972 = _1970 * ((cbModelParam._m0[1u].w * (_1956 - _1858)) + _1858);
    float _1973 = _1970 * ((cbModelParam._m0[1u].w * (_1958 - _1860)) + _1860);
    float _1976 = fma(_1973, cbSceneParam._m0[89u].z, fma(_1972, cbSceneParam._m0[89u].y, _1971 * cbSceneParam._m0[89u].x));
    float _1979 = fma(_1973, cbSceneParam._m0[90u].z, fma(_1972, cbSceneParam._m0[90u].y, _1971 * cbSceneParam._m0[90u].x));
    float _1982 = fma(_1973, cbSceneParam._m0[91u].z, fma(_1972, cbSceneParam._m0[91u].y, _1971 * cbSceneParam._m0[91u].x));
    uvec4 _1992 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1994 = _1992.x * 14u;
    uint _1995 = _1994 + 13u;
    float _2002 = _961 + (-1.0);
    float _2007 = (cbLight._m0[_1995].x * _2002) + 1.0;
    float _2008 = (cbLight._m0[_1995].y * _2002) + 1.0;
    float _2009 = (cbLight._m0[_1995].z * _2002) + 1.0;
    float _2010 = (cbLight._m0[_1995].w * _2002) + 1.0;
    uint _2011 = _1994 + 5u;
    float _2017 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
    uint _2021 = _1994 + 4u;
    float _2027 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
    uint _2031 = _1994 | 1u;
    float _2042 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_810, _811, _812));
    float _2045 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_810, _811, _812));
    float _4190 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _4201 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2050 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.3183098733425140380859375;
    float _2052 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * 0.3183098733425140380859375;
    float _2059 = ((cbLight._m0[_2011].x * _2017) * _2052) + ((cbLight._m0[_2021].x * _2027) * _2050);
    float _2060 = ((_2017 * cbLight._m0[_2011].y) * _2052) + ((_2027 * cbLight._m0[_2021].y) * _2050);
    float _2061 = ((_2017 * cbLight._m0[_2011].z) * _2052) + ((_2027 * cbLight._m0[_2021].z) * _2050);
    uvec4 _2065 = floatBitsToUint(cbLight._m0[_1994 + 12u]);
    bool _2067 = _2065.x == 0u;
    float _2078;
    float _2080;
    float _2082;
    if (_2067)
    {
        _2078 = _2059;
        _2080 = _2060;
        _2082 = _2061;
    }
    else
    {
        uint _2086 = _1994 + 6u;
        float _2102 = (dot(vec3(cbLight._m0[_1994 + 2u].xyz), vec3(_810, _811, _812)) * 0.5) + 0.5;
        float _2103 = _2102 * _2102;
        float _4212 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2105 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2078 = (((cbLight._m0[_2086].x * 0.3183098733425140380859375) * _2104) * _2105) + _2059;
        _2080 = (((cbLight._m0[_2086].y * 0.3183098733425140380859375) * _2104) * _2105) + _2060;
        _2082 = (((cbLight._m0[_2086].z * 0.3183098733425140380859375) * _2104) * _2105) + _2061;
    }
    bool _2085 = _2065.y == 0u;
    float _2123;
    float _2125;
    float _2127;
    if (_2085)
    {
        _2123 = _2078;
        _2125 = _2080;
        _2127 = _2082;
    }
    else
    {
        uint _2282 = _1994 + 7u;
        float _2298 = (dot(vec3(cbLight._m0[_1994 + 3u].xyz), vec3(_810, _811, _812)) * 0.5) + 0.5;
        float _2299 = _2298 * _2298;
        float _4228 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2300 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2301 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2123 = (((cbLight._m0[_2282].x * 0.3183098733425140380859375) * _2300) * _2301) + _2078;
        _2125 = (((cbLight._m0[_2282].y * 0.3183098733425140380859375) * _2300) * _2301) + _2080;
        _2127 = (((cbLight._m0[_2282].z * 0.3183098733425140380859375) * _2300) * _2301) + _2082;
    }
    uint _2130 = _1994 + 8u;
    float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _813) * 0.949999988079071044921875);
    float _2144 = _2143 * _2143;
    float _2145 = cbLight._m0[_1994].x + _890;
    float _2146 = cbLight._m0[_1994].y + _891;
    float _2147 = cbLight._m0[_1994].z + _892;
    float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
    float _2152 = _2151 * _2145;
    float _2153 = _2151 * _2146;
    float _2154 = _2151 * _2147;
    float _2155 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_1994].xyz));
    float _4244 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _2159 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2160 = dot(vec3(_810, _811, _812), vec3(_2152, _2153, _2154));
    float _4266 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2152, _2153, _2154));
    float _4277 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2144 * _2144;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2183 = (exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2184 = 1.0 - _2144;
    float _2195 = (0.5 / (((_2159 * ((_2158 * _2184) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2184) + _2144) * _2158))) * _2158;
    float _4288 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2197 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    uint _2208 = _1994 + 9u;
    float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _813) * 0.949999988079071044921875);
    float _2220 = _2219 * _2219;
    float _2221 = cbLight._m0[_2031].x + _890;
    float _2222 = cbLight._m0[_2031].y + _891;
    float _2223 = cbLight._m0[_2031].z + _892;
    float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
    float _2228 = _2227 * _2221;
    float _2229 = _2227 * _2222;
    float _2230 = _2227 * _2223;
    float _2231 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2031].xyz));
    float _4299 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2235 = dot(vec3(_810, _811, _812), vec3(_2228, _2229, _2230));
    float _4310 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2239 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2228, _2229, _2230));
    float _4321 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2243 = _2220 * _2220;
    float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
    float _2256 = (exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2257 = 1.0 - _2220;
    float _2267 = (0.5 / (((_2159 * ((_2234 * _2257) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2257) + _2220) * _2234))) * _2234;
    float _4332 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2269 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
    float _2279 = (((_2256 * cbLight._m0[_2208].x) * _2269) * _2017) + (((_2183 * cbLight._m0[_2130].x) * _2197) * _2027);
    float _2280 = (((_2256 * cbLight._m0[_2208].y) * _2269) * _2017) + (((_2183 * cbLight._m0[_2130].y) * _2197) * _2027);
    float _2281 = (((_2256 * cbLight._m0[_2208].z) * _2269) * _2017) + (((_2183 * cbLight._m0[_2130].z) * _2197) * _2027);
    float _2343;
    float _2345;
    float _2347;
    if (_2067)
    {
        _2343 = _2279;
        _2345 = _2280;
        _2347 = _2281;
    }
    else
    {
        uint _2349 = _1994 + 2u;
        uint _2353 = _1994 + 10u;
        float _2367 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _813) * 0.949999988079071044921875);
        float _2368 = _2367 * _2367;
        float _2369 = cbLight._m0[_2349].x + _890;
        float _2370 = cbLight._m0[_2349].y + _891;
        float _2371 = cbLight._m0[_2349].z + _892;
        float _2375 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
        float _2376 = _2375 * _2369;
        float _2377 = _2375 * _2370;
        float _2378 = _2375 * _2371;
        float _2379 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2349].xyz));
        float _4343 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2383 = dot(vec3(_810, _811, _812), vec3(_2376, _2377, _2378));
        float _4354 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2387 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2376, _2377, _2378));
        float _4365 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2391 = _2368 * _2368;
        float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
        float _2404 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2405 = 1.0 - _2368;
        float _2415 = (0.5 / (((_2159 * ((_2382 * _2405) + _2368)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2405) + _2368) * _2382))) * _2382;
        float _4376 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2417 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
        float _2418 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2343 = (((_2404 * cbLight._m0[_2353].x) * _2417) * _2418) + _2279;
        _2345 = (((_2404 * cbLight._m0[_2353].y) * _2417) * _2418) + _2280;
        _2347 = (((_2404 * cbLight._m0[_2353].z) * _2417) * _2418) + _2281;
    }
    float _2453;
    float _2455;
    float _2457;
    if (_2085)
    {
        _2453 = _2343;
        _2455 = _2345;
        _2457 = _2347;
    }
    else
    {
        uint _2464 = _1994 + 3u;
        uint _2468 = _1994 + 11u;
        float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _813) * 0.949999988079071044921875);
        float _2483 = _2482 * _2482;
        float _2484 = cbLight._m0[_2464].x + _890;
        float _2485 = cbLight._m0[_2464].y + _891;
        float _2486 = cbLight._m0[_2464].z + _892;
        float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
        float _2491 = _2490 * _2484;
        float _2492 = _2490 * _2485;
        float _2493 = _2490 * _2486;
        float _2494 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2464].xyz));
        float _4392 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2498 = dot(vec3(_810, _811, _812), vec3(_2491, _2492, _2493));
        float _4403 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2502 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2491, _2492, _2493));
        float _4414 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2506 = _2483 * _2483;
        float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
        float _2519 = (exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2520 = 1.0 - _2483;
        float _2530 = (0.5 / (((_2159 * ((_2497 * _2520) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2520) + _2483) * _2497))) * _2497;
        float _4425 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2532 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
        float _2533 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2453 = (((_2519 * cbLight._m0[_2468].x) * _2532) * _2533) + _2343;
        _2455 = (((_2519 * cbLight._m0[_2468].y) * _2532) * _2533) + _2345;
        _2457 = (((_2519 * cbLight._m0[_2468].z) * _2532) * _2533) + _2347;
    }
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    if (_1992.y == 0u)
    {
        float _2608 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2608;
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2608;
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2608;
        uvec4 _2623 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2624 = _2623.x;
        uint _2635 = uint((float(_2623.y) * floor(float(uint(cbSceneParam._m0[85u].y * _899) / _2624))) + floor(float(uint(cbSceneParam._m0[85u].x * _898) / _2624)));
        float _2645 = (log2(_2611 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2646 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        uint _2649 = uint(isnan(14.0) ? _2646 : (isnan(_2646) ? 14.0 : min(_2646, 14.0)));
        uvec4 _2654 = texelFetch(g_lightClusterGridBuffer, int(((_2649 << 2u) + (_2635 << 6u)) >> 2u));
        uint _2655 = _2654.x;
        uint _2656 = _2623.z;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        if (((((1u << ((_2656 >> 4u) & 15u)) + 4294967295u) & _2655) == 0u) || ((_2656 & 240u) == 0u))
        {
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
        }
        else
        {
            float _2757;
            float _2759;
            float _2761;
            float _2763;
            float _2765;
            float _2767;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            uint _2907 = 0u;
            uint _2916;
            bool _2917;
            for (;;)
            {
                _2916 = texelFetch(g_lightClassification, int((((_2649 << 5u) + (_2635 << 9u)) + (_2907 << 2u)) >> 2u)).x;
                _2917 = _2916 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2917)
                {
                    frontier_phi_61_pred = _2901;
                    frontier_phi_61_pred_1 = _2906;
                    frontier_phi_61_pred_2 = _2905;
                    frontier_phi_61_pred_3 = _2904;
                    frontier_phi_61_pred_4 = _2903;
                    frontier_phi_61_pred_5 = _2902;
                }
                else
                {
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    uint _3031;
                    _3025 = _2901;
                    _3026 = _2902;
                    _3027 = _2903;
                    _3028 = _2904;
                    _3029 = _2905;
                    _3030 = _2906;
                    _3031 = _2916;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    for (;;)
                    {
                        uint _3035 = uint(findLSB(_3031)) + (_2907 << 5u);
                        uint _3032 = (_3031 + 4294967295u) & _3031;
                        uint _3037 = _3035 * 48u;
                        vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3057 = (_3035 * 48u) + 4u;
                        vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 3u)).x));
                        uint _3076 = (_3035 * 48u) + 8u;
                        vec3 _3087 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x));
                        float _3091 = _3051.x - _2609;
                        float _3092 = _3051.y - _2610;
                        float _3093 = _3051.z - _2611;
                        float _3094 = dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093));
                        float _3097 = inversesqrt(_3094);
                        float _3098 = _3097 * _3091;
                        float _3099 = _3097 * _3092;
                        float _3100 = _3097 * _3093;
                        float _3101 = dot(vec3(_917, _920, _923), vec3(_3098, _3099, _3100));
                        float _3106 = 1.0 - (_3094 * _3051.w);
                        float _4451 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3107 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3108 = sqrt(_3094) * _3070.w;
                        float _3111 = 1.39999997615814208984375 / (_3108 + 1.39999997615814208984375);
                        float _3112 = _3111 * _3111;
                        float _3115 = ((1.0 - _3112) * _3101) + _3112;
                        float _3118 = _3108 * _3108;
                        float _3122 = ((isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * _3107) / ((_3118 * 0.699999988079071044921875) + 1.0);
                        float _3126 = (-0.0) - _2609;
                        float _3127 = (-0.0) - _2610;
                        float _3128 = (-0.0) - _2611;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3133 = _3132 * _3126;
                        float _3134 = _3132 * _3127;
                        float _3135 = _3132 * _3128;
                        float _3143 = exp2(log2(1.0 / ((_3118 * 3.5) + 5.0)) * 0.25);
                        float _3144 = 1.0 - _977;
                        float _3151 = sqrt(1.0 - ((1.0 - (_3144 * _3144)) * (1.0 - (_3143 * _3143))));
                        float _3152 = _3151 * _3151;
                        float _3153 = _3152 * _3152;
                        float _3154 = _3133 + _3098;
                        float _3155 = _3134 + _3099;
                        float _3156 = _3135 + _3100;
                        float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                        float _3164 = dot(vec3(_917, _920, _923), vec3(_3133, _3134, _3135));
                        float _4467 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3167 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3168 = dot(vec3(_917, _920, _923), vec3(_3160 * _3154, _3160 * _3155, _3160 * _3156));
                        float _4478 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3171 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3175 = ((_3171 * _3171) * (_3153 + (-1.0))) + 1.0;
                        float _3176 = _3111 * _3152;
                        float _3177 = _3176 * _3176;
                        float _3180 = ((1.0 - _3177) * _3101) + _3177;
                        float _4489 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3181 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3182 = 1.0 - _3152;
                        float _3192 = (0.5 / (((_3181 * ((_3167 * _3182) + _3152)) + 9.9999999392252902907785028219223e-09) + (((_3181 * _3182) + _3152) * _3167))) * _3181;
                        float _4500 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3203 = (((_3153 * 3.1415927410125732421875) * (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) / ((_3175 * _3175) * ((_3118 * 2.1991131305694580078125) + 3.141590118408203125))) * _3107;
                        _2960 = (_3122 * _3070.x) + _3028;
                        _2961 = (_3122 * _3070.y) + _3029;
                        _2962 = (_3122 * _3070.z) + _3030;
                        _2957 = (_3203 * _3087.x) + _3025;
                        _2958 = (_3203 * _3087.y) + _3026;
                        _2959 = (_3203 * _3087.z) + _3027;
                        if (_3032 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3025 = _2957;
                            _3026 = _2958;
                            _3027 = _2959;
                            _3028 = _2960;
                            _3029 = _2961;
                            _3030 = _2962;
                            _3031 = _3032;
                        }
                    }
                    frontier_phi_61_pred = _2957;
                    frontier_phi_61_pred_1 = _2962;
                    frontier_phi_61_pred_2 = _2961;
                    frontier_phi_61_pred_3 = _2960;
                    frontier_phi_61_pred_4 = _2959;
                    frontier_phi_61_pred_5 = _2958;
                }
                _2757 = frontier_phi_61_pred;
                _2767 = frontier_phi_61_pred_1;
                _2765 = frontier_phi_61_pred_2;
                _2763 = frontier_phi_61_pred_3;
                _2761 = frontier_phi_61_pred_4;
                _2759 = frontier_phi_61_pred_5;
                uint _2908 = _2907 + 1u;
                if (_2908 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2901 = _2757;
                    _2902 = _2759;
                    _2903 = _2761;
                    _2904 = _2763;
                    _2905 = _2765;
                    _2906 = _2767;
                    _2907 = _2908;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
        }
        uvec4 _2770 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2771 = _2770.z;
        uint _2773 = (_2771 >> 8u) & 15u;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        if (((4294967295u << _2773) & _2655) == 0u)
        {
            _2869 = _2756;
            _2871 = _2758;
            _2873 = _2760;
            _2875 = _2762;
            _2877 = _2764;
            _2879 = _2766;
        }
        else
        {
            float _2894 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
            float _2895 = _2894 * _2609;
            float _2896 = _2894 * _2610;
            float _2897 = _2894 * _2611;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2773 < ((_2771 >> 12u) & 15u))
            {
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _3008 = _2756;
                float _3009 = _2758;
                float _3010 = _2760;
                float _3011 = _2762;
                float _3012 = _2764;
                float _3013 = _2766;
                uint _3014 = _2773;
                uint _3023;
                bool _3024;
                for (;;)
                {
                    _3023 = texelFetch(g_lightClassification, int((((_2649 << 5u) + (_2635 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                    _3024 = _3023 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3024)
                    {
                        frontier_phi_67_pred = _3011;
                        frontier_phi_67_pred_1 = _3012;
                        frontier_phi_67_pred_2 = _3013;
                        frontier_phi_67_pred_3 = _3010;
                        frontier_phi_67_pred_4 = _3009;
                        frontier_phi_67_pred_5 = _3008;
                    }
                    else
                    {
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3221 = _3008;
                        float _3222 = _3009;
                        float _3223 = _3010;
                        float _3224 = _3011;
                        float _3225 = _3012;
                        float _3226 = _3013;
                        uint _3227 = _3023;
                        uint _3228;
                        vec4 _3253;
                        float _3254;
                        vec4 _3269;
                        vec3 _3281;
                        vec4 _3296;
                        vec4 _3311;
                        float _3357;
                        bool _3358;
                        for (;;)
                        {
                            uint _3238 = ((_3014 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3227));
                            _3228 = (_3227 + 4294967295u) & _3227;
                            uint _3240 = _3238 * 40u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            _3254 = _3253.w;
                            uint _3256 = (_3238 * 40u) + 4u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3271 = (_3238 * 40u) + 8u;
                            _3281 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x));
                            uint _3283 = (_3238 * 40u) + 16u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3298 = (_3238 * 40u) + 20u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3238 * 40u) + 24u;
                            vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3332 = (_3238 * 40u) + 28u;
                            vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            _3357 = fma(_2611, _3345.z, fma(_2610, _3345.y, _3345.x * _2609)) + _3345.w;
                            _3358 = !((fma(_2611, _3326.z, fma(_2610, _3326.y, _3326.x * _2609)) + _3326.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3358)
                            {
                                float _3385 = _3253.x - _2609;
                                float _3386 = _3253.y - _2610;
                                float _3387 = _3253.z - _2611;
                                float _3388 = dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387));
                                float _3391 = inversesqrt(_3388);
                                float _3392 = _3391 * _3385;
                                float _3393 = _3391 * _3386;
                                float _3394 = _3391 * _3387;
                                float _3398 = 1.0 - (_3388 / (_3254 * _3254));
                                float _4511 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3399 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3403 = sqrt(_3388) * _3269.w;
                                float _3405 = 1.39999997615814208984375 / (_3403 + 1.39999997615814208984375);
                                float _3406 = _3405 * _3405;
                                float _3409 = ((1.0 - _3406) * dot(vec3(_3392, _3393, _3394), vec3(_917, _920, _923))) + _3406;
                                float _3412 = _3403 * _3403;
                                float _3416 = (fma(_2611, _3296.z, fma(_2610, _3296.y, _3296.x * _2609)) + _3296.w) / _3357;
                                float _3417 = (fma(_2611, _3311.z, fma(_2610, _3311.y, _3311.x * _2609)) + _3311.w) / _3357;
                                float _3421 = 1.0 - dot(vec2(_3416, _3417), vec2(_3416, _3417));
                                float _4527 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3423 = _3422 * (((isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))) * _3399) / ((_3412 * 0.699999988079071044921875) + 1.0));
                                float _3435 = exp2(log2(1.0 / ((_3412 * 3.5) + 5.0)) * 0.25);
                                float _3436 = 1.0 - _977;
                                float _3443 = sqrt(1.0 - ((1.0 - (_3436 * _3436)) * (1.0 - (_3435 * _3435))));
                                float _3444 = _3443 * _3443;
                                float _3445 = _3444 * _3444;
                                float _3446 = _3392 - _2895;
                                float _3447 = _3393 - _2896;
                                float _3448 = _3394 - _2897;
                                float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                                float _3456 = dot(vec3(_917, _920, _923), vec3((-0.0) - _2895, (-0.0) - _2896, (-0.0) - _2897));
                                float _4538 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3459 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3460 = dot(vec3(_917, _920, _923), vec3(_3452 * _3446, _3452 * _3447, _3452 * _3448));
                                float _4549 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3463 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3467 = ((_3463 * _3463) * (_3445 + (-1.0))) + 1.0;
                                float _3468 = _3405 * _3444;
                                float _3469 = _3468 * _3468;
                                float _3475 = ((1.0 - _3469) * dot(vec3(_917, _920, _923), vec3(_3392, _3393, _3394))) + _3469;
                                float _4560 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3477 = 1.0 - _3444;
                                float _3487 = (0.5 / (((_3476 * ((_3459 * _3477) + _3444)) + 9.9999999392252902907785028219223e-09) + (((_3476 * _3477) + _3444) * _3459))) * _3476;
                                float _4571 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3497 = (_3422 * _3399) * (((_3445 * 3.1415927410125732421875) * (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) / ((_3467 * _3467) * ((_3412 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3497 * _3281.x;
                                frontier_phi_73_pred_1 = _3497 * _3281.y;
                                frontier_phi_73_pred_2 = _3423 * _3269.z;
                                frontier_phi_73_pred_3 = _3423 * _3269.y;
                                frontier_phi_73_pred_4 = _3423 * _3269.x;
                                frontier_phi_73_pred_5 = _3497 * _3281.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3501 = frontier_phi_73_pred;
                            _3502 = frontier_phi_73_pred_1;
                            _3506 = frontier_phi_73_pred_2;
                            _3505 = frontier_phi_73_pred_3;
                            _3504 = frontier_phi_73_pred_4;
                            _3503 = frontier_phi_73_pred_5;
                            _3211 = _3504 + _3224;
                            _3212 = _3505 + _3225;
                            _3213 = _3506 + _3226;
                            _3208 = _3501 + _3221;
                            _3209 = _3502 + _3222;
                            _3210 = _3503 + _3223;
                            if (_3228 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3228;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3211;
                        frontier_phi_67_pred_1 = _3212;
                        frontier_phi_67_pred_2 = _3213;
                        frontier_phi_67_pred_3 = _3210;
                        frontier_phi_67_pred_4 = _3209;
                        frontier_phi_67_pred_5 = _3208;
                    }
                    _2876 = frontier_phi_67_pred;
                    _2878 = frontier_phi_67_pred_1;
                    _2880 = frontier_phi_67_pred_2;
                    _2874 = frontier_phi_67_pred_3;
                    _2872 = frontier_phi_67_pred_4;
                    _2870 = frontier_phi_67_pred_5;
                    uint _3015 = _3014 + 1u;
                    if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3008 = _2870;
                        _3009 = _2872;
                        _3010 = _2874;
                        _3011 = _2876;
                        _3012 = _2878;
                        _3013 = _2880;
                        _3014 = _3015;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2878;
                frontier_phi_55_56_ladder_1 = _2880;
                frontier_phi_55_56_ladder_2 = _2876;
                frontier_phi_55_56_ladder_3 = _2874;
                frontier_phi_55_56_ladder_4 = _2872;
                frontier_phi_55_56_ladder_5 = _2870;
            }
            else
            {
                frontier_phi_55_56_ladder = _2764;
                frontier_phi_55_56_ladder_1 = _2766;
                frontier_phi_55_56_ladder_2 = _2762;
                frontier_phi_55_56_ladder_3 = _2760;
                frontier_phi_55_56_ladder_4 = _2758;
                frontier_phi_55_56_ladder_5 = _2756;
            }
            _2869 = frontier_phi_55_56_ladder_5;
            _2871 = frontier_phi_55_56_ladder_4;
            _2873 = frontier_phi_55_56_ladder_3;
            _2875 = frontier_phi_55_56_ladder_2;
            _2877 = frontier_phi_55_56_ladder;
            _2879 = frontier_phi_55_56_ladder_1;
        }
        float _2884 = isnan(1.0) ? _961 : (isnan(_961) ? 1.0 : min(_961, 1.0));
        _2668 = (_2884 * _2875) + _2123;
        _2670 = (_2884 * _2877) + _2125;
        _2672 = (_2884 * _2879) + _2127;
        _2674 = ((_2869 * 0.039999999105930328369140625) * _2884) + _2453;
        _2676 = ((_2871 * 0.039999999105930328369140625) * _2884) + _2455;
        _2678 = ((_2873 * 0.039999999105930328369140625) * _2884) + _2457;
    }
    else
    {
        _2668 = _2123;
        _2670 = _2125;
        _2672 = _2127;
        _2674 = _2453;
        _2676 = _2455;
        _2678 = _2457;
    }
    float _4587 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4598 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4609 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    uint _2698 = _270 + 6u;
    float _2706 = _898 / cbSceneParam._m0[86u].x;
    float _2707 = _899 / cbSceneParam._m0[86u].y;
    vec4 _2721 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2706, _2707, (log2((isnan(cbSceneParam._m0[77u].w) ? _831 : (isnan(_831) ? cbSceneParam._m0[77u].w : min(_831, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2723 = _2721.x;
    float _2724 = _2721.y;
    float _2725 = _2721.z;
    float _2726 = _2721.w;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    if (_831 > cbSceneParam._m0[78u].w)
    {
        float _2781 = isnan(_831) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _831 : min(cbSceneParam._m0[80u].w, _831));
        float _2782 = _2781 / _831;
        float _2793 = _2782 * _883;
        float _2794 = _884 * _2782;
        float _2795 = (-0.0) - _2794;
        float _2797 = _2782 * _885;
        float _2799 = (cbSceneParam._m0[77u].w * _2795) / _2781;
        float _2800 = _2799 + cbSceneParam._m0[79u].w;
        float _2801 = cbSceneParam._m0[79u].w - _2794;
        float _2807 = sqrt(((_2793 * _2793) + (_2794 * _2794)) + (_2797 * _2797));
        float _2810 = (1.0 - (cbSceneParam._m0[77u].w / _2781)) * _2807;
        float _2815 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2817 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2970;
        if (abs((_2795 - _2799) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2970 = ((((_2800 > 0.0) ? exp2(_2815 * _2800) : (2.0 - exp2(_2817 * _2800))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2810;
        }
        else
        {
            float _2930 = 1.0 / cbSceneParam._m0[80u].x;
            float _2931 = isnan(_2801) ? _2800 : (isnan(_2800) ? _2801 : max(_2800, _2801));
            float _2932 = isnan(_2801) ? _2800 : (isnan(_2800) ? _2801 : min(_2800, _2801));
            float _2941 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : min(_2931, 0.0));
            float _2942 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : min(_2932, 0.0));
            _2970 = ((abs(_2807 / _2795) * cbSceneParam._m0[80u].y) * ((((_2941 - _2942) * 2.0) - ((exp2(_2815 * (isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0)))) - exp2(_2815 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0))))) * _2930)) - ((exp2(_2817 * _2941) - exp2(_2817 * _2942)) * _2930))) + (_2810 * cbSceneParam._m0[80u].z);
        }
        vec4 _2972 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2706, _2707, 1.0), 0.0);
        float _2981 = exp2((_2970 * (-1.44269502162933349609375)) * (1.0 - _2972.w));
        float _2982 = log2(_2981);
        float _2998 = log2(_2726);
        _2819 = (exp2(_2998 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].x)) * _2972.x) / cbSceneParam._m0[78u].x)) + _2723;
        _2821 = (exp2(_2998 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].y)) * _2972.y) / cbSceneParam._m0[78u].y)) + _2724;
        _2823 = (exp2(_2998 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].z)) * _2972.z) / cbSceneParam._m0[78u].z)) + _2725;
        _2825 = _2981 * _2726;
    }
    else
    {
        _2819 = _2723;
        _2821 = _2724;
        _2823 = _2725;
        _2825 = _2726;
    }
    float _2837 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2838 = _2837 == 3.0;
    float _2839 = log2(_2825);
    float _2846 = exp2(_2839 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2668 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _961))) + ((_2674 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1765)) * cbPerFrame._m0[3u].x));
    float _2847 = exp2(_2839 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2670 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _961))) + ((_2676 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1765)) * cbPerFrame._m0[3u].x));
    float _2848 = exp2(_2839 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2672 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _961))) + ((_2678 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1765)) * cbPerFrame._m0[3u].x));
    float _2857 = (_2837 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2857 * (_2838 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2819)));
    SV_Target.y = _2857 * (_2838 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2821)));
    SV_Target.z = _2857 * (_2838 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2823)));
    SV_Target.w = cbInstanceData._m0[_2698].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2698].w;
}


