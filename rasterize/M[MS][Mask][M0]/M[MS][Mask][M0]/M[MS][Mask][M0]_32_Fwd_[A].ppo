#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1211;
float _3570;
float _3571;
float _3572;
float _3573;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _302.x * cbMtdParam._m0[11u].x;
    float _308 = _302.y * cbMtdParam._m0[11u].y;
    float _309 = _302.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _384 = _382.x;
    float _396 = dot(vec4(_384, _382.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _413 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_384 - _396) * cbMtdParam._m0[24u].z) + _396) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3582 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _427 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _278.x) * ((_414 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307);
    float _430 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _278.y) * ((_414 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308);
    float _433 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _278.z) * ((_414 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309);
    vec4 _452 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _491 = _489.x;
    float _492 = _489.y;
    float _493 = _489.z;
    float _502 = ((_472.z - _493) * _414) + _493;
    float _505 = ((((_472.x - _491) * _414) + _491) * 2.0) + (-1.0);
    float _507 = ((((_472.y - _492) * _414) + _492) * 2.0) + (-1.0);
    float _508 = dot(vec2(_505, _507), vec2(_505, _507));
    float _3593 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _513 = sqrt(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _556 = _554.x;
    float _557 = 1.0 - _556;
    float _570 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_556 - _557) * cbMtdParam._m0[24u].w) + _557) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3604 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _578 = (_571 * ((_452.x * cbMtdParam._m0[18u].x) - _427)) + _427;
    float _579 = (_571 * ((_452.y * cbMtdParam._m0[18u].y) - _430)) + _430;
    float _580 = (_571 * ((_452.z * cbMtdParam._m0[18u].z) - _433)) + _433;
    float _584 = (cbMtdParam._m0[19u].w * (_529.z - _502)) + _502;
    vec4 _597 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _604 = (_597.x * 2.0) + (-1.0);
    float _605 = (_597.y * 2.0) + (-1.0);
    float _606 = dot(vec2(_604, _605), vec2(_604, _605));
    float _3615 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _614 = (_571 * (_597.z - _584)) + _584;
    float _617 = (((_529.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _505;
    float _618 = (((_529.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _507;
    float _630 = (((_604 - _617) + (cbMtdParam._m0[21u].x * _617)) * _571) + _617;
    float _631 = (((_605 - _618) + (cbMtdParam._m0[21u].x * _618)) * _571) + _618;
    float _632 = (_571 * (sqrt(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) - _513)) + _513;
    float _636 = cbMtdParam._m0[22u].x + _529.w;
    float _639 = fma(_632, _225 * NORMAL.x, fma(_631, _232 * TANGENT.x, (_218 * _210) * _630));
    float _642 = fma(_632, _225 * NORMAL.y, fma(_631, _232 * TANGENT.y, (_218 * _211) * _630));
    float _645 = fma(_632, _225 * NORMAL.z, fma(_631, _232 * TANGENT.z, (_218 * _212) * _630));
    float _649 = inversesqrt(dot(vec3(_639, _642, _645), vec3(_639, _642, _645)));
    float _650 = _649 * _639;
    float _651 = _649 * _642;
    float _652 = _649 * _645;
    float _3626 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _653 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _3637 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3648 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3659 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3670 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _722 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _712);
    float _723 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _712);
    float _724 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _712);
    float _728 = inversesqrt(dot(vec3(_722, _723, _724), vec3(_722, _723, _724)));
    float _729 = _722 * _728;
    float _730 = _723 * _728;
    float _731 = _724 * _728;
    vec4 _736 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _738 = _736.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _892 = sqrt(((_722 * _722) + (_723 * _723)) + (_724 * _724));
        float _898 = (cbMatDynParam._m0[5u].x * _892) + cbMatDynParam._m0[5u].y;
        float _3681 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _903 = (cbMatDynParam._m0[5u].z * _892) + cbMatDynParam._m0[5u].w;
        float _3692 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) - _899)) + _899) < ((_738 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _749 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _750 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _768 = fma(_652, cbSceneParam._m0[5u].z, fma(_651, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _650));
    float _771 = fma(_652, cbSceneParam._m0[6u].z, fma(_651, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _650));
    float _774 = fma(_652, cbSceneParam._m0[7u].z, fma(_651, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _650));
    uint _787 = _238 + 9u;
    uint _788 = _787 + uint(cbMatDynParam._m0[0u].w);
    float _794 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_788].x;
    float _795 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_788].y;
    float _796 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_788].z;
    float _3703 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    vec4 _808 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _749, cbSceneParam._m0[86u].y * _750));
    float _812 = ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * TEXCOORD_5.w) * _808.x;
    float _813 = dot(vec3(_650, _651, _652), vec3(_729, _730, _731));
    float _816 = _813 * 2.0;
    float _820 = (_816 * _650) - _729;
    float _821 = (_816 * _651) - _730;
    float _822 = (_816 * _652) - _731;
    float _826 = abs(dot(vec3(_729, _730, _731), vec3(_650, _651, _652)));
    float _3736 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _828 = sqrt(_653);
    float _841 = exp2((_828 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_828 * 3.0));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1210;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _935 = fma(_881, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873));
        float _939 = fma(_881, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873));
        float _943 = fma(_881, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873));
        float _968 = _873 + _650;
        float _969 = _877 + _651;
        float _970 = _881 + _652;
        float _980 = fma(_970, cbModelParam._m0[26u].z, fma(_969, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _968)) - _935;
        float _981 = fma(_970, cbModelParam._m0[27u].z, fma(_969, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _968)) - _939;
        float _982 = fma(_970, cbModelParam._m0[28u].z, fma(_969, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _968)) - _943;
        float _986 = inversesqrt(dot(vec3(_980, _981, _982), vec3(_980, _981, _982)));
        float _999 = ((_986 * _980) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_935 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_986 * _981) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_939 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_986 * _982) / cbModelParam._m0[34u].z) + ((((((_943 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        float _1038 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1004.x + (-0.5));
        float _1040 = _1038 * (_1004.y + (-0.5));
        float _1041 = _1038 * (_1004.z + (-0.5));
        float _1048 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1011.x + (-0.5));
        float _1050 = _1048 * (_1011.y + (-0.5));
        float _1051 = _1048 * (_1011.z + (-0.5));
        float _1058 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1018.x + (-0.5));
        float _1060 = _1058 * (_1018.y + (-0.5));
        float _1061 = _1058 * (_1018.z + (-0.5));
        float _1068 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1025.x + (-0.5));
        float _1070 = _1068 * (_1025.y + (-0.5));
        float _1071 = _1068 * (_1025.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1092 = (dot(vec3(_650, _651, _652), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1102 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3784 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1104 + 1.0))) + _1109) * _1072;
        float _1119 = _1040 * 0.5;
        float _1120 = _1050 * 0.5;
        float _1121 = _1060 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_650, _651, _652), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3817 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1146 + 1.0))) + _1151) * _1073;
        float _1161 = _1041 * 0.5;
        float _1162 = _1051 * 0.5;
        float _1163 = _1061 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_650, _651, _652), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3850 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1188 + 1.0))) + _1193) * _1074;
        _1210 = _1041;
        _1212 = _1040;
        _1213 = _1039;
        _1214 = _1051;
        _1215 = _1050;
        _1216 = _1049;
        _1217 = _1061;
        _1218 = _1060;
        _1219 = _1059;
        _1220 = _1074;
        _1221 = _1073;
        _1222 = _1072;
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
    }
    else
    {
        _1210 = _1211;
        _1212 = _1211;
        _1213 = _1211;
        _1214 = _1211;
        _1215 = _1211;
        _1216 = _1211;
        _1217 = _1211;
        _1218 = _1211;
        _1219 = _1211;
        _1220 = _1211;
        _1221 = _1211;
        _1222 = _1211;
        _1223 = 0.0;
        _1224 = 0.0;
        _1225 = 0.0;
    }
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1253 = fma(_881, cbModelParam._m0[30u].z, fma(_877, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _873));
        float _1257 = fma(_881, cbModelParam._m0[31u].z, fma(_877, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _873));
        float _1261 = fma(_881, cbModelParam._m0[32u].z, fma(_877, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _873));
        float _1284 = _873 + _650;
        float _1285 = _877 + _651;
        float _1286 = _881 + _652;
        float _1296 = fma(_1286, cbModelParam._m0[30u].z, fma(_1285, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1284)) - _1253;
        float _1297 = fma(_1286, cbModelParam._m0[31u].z, fma(_1285, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1284)) - _1257;
        float _1298 = fma(_1286, cbModelParam._m0[32u].z, fma(_1285, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1284)) - _1261;
        float _1302 = inversesqrt(dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298)));
        float _1315 = ((_1302 * _1296) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1253 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1302 * _1297) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1257 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1302 * _1298) / cbModelParam._m0[35u].z) + ((((((_1261 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        float _1352 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1319.x + (-0.5));
        float _1354 = _1352 * (_1319.y + (-0.5));
        float _1355 = _1352 * (_1319.z + (-0.5));
        float _1362 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1326.x + (-0.5));
        float _1364 = _1362 * (_1326.y + (-0.5));
        float _1365 = _1362 * (_1326.z + (-0.5));
        float _1372 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1333.x + (-0.5));
        float _1374 = _1372 * (_1333.y + (-0.5));
        float _1375 = _1372 * (_1333.z + (-0.5));
        float _1382 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1340.x + (-0.5));
        float _1384 = _1382 * (_1340.y + (-0.5));
        float _1385 = _1382 * (_1340.z + (-0.5));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = _1353 * 0.5;
        float _1390 = _1363 * 0.5;
        float _1391 = _1373 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_650, _651, _652), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3913 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1416 + 1.0))) + _1421) * _1386;
        float _1431 = _1354 * 0.5;
        float _1432 = _1364 * 0.5;
        float _1433 = _1374 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_650, _651, _652), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3946 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1458 + 1.0))) + _1463) * _1387;
        float _1473 = _1355 * 0.5;
        float _1474 = _1365 * 0.5;
        float _1475 = _1375 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_650, _651, _652), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _3979 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1500 + 1.0))) + _1505) * _1388;
        _1522 = _1355;
        _1523 = _1354;
        _1524 = _1353;
        _1525 = _1365;
        _1526 = _1364;
        _1527 = _1363;
        _1528 = _1375;
        _1529 = _1374;
        _1530 = _1373;
        _1531 = _1388;
        _1532 = _1387;
        _1533 = _1386;
        _1534 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
    }
    else
    {
        _1522 = _1211;
        _1523 = _1211;
        _1524 = _1211;
        _1525 = _1211;
        _1526 = _1211;
        _1527 = _1211;
        _1528 = _1211;
        _1529 = _1211;
        _1530 = _1211;
        _1531 = _1211;
        _1532 = _1211;
        _1533 = _1211;
        _1534 = 0.0;
        _1535 = 0.0;
        _1536 = 0.0;
    }
    float _1546 = (cbModelParam._m0[1u].x * (_1534 - _1223)) + _1223;
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1224)) + _1224;
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1225)) + _1225;
    float _1569 = fma(_1548, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1546 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1548, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1546 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1548, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1546));
    float _1590 = _820 * 0.5;
    float _1591 = _821 * 0.5;
    float _1592 = _822 * 0.5;
    float _1593 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1596 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1599 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1522, _1525, _1528, _1531));
    float _1633;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1606 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1210, _1214, _1217, _1220));
        float _1610 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1614 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1213, _1216, _1219, _1222));
        float _1621 = dot(vec4(cbModelParam._m0[39u]), vec4(_1590, _1591, _1592, 1.0));
        _1633 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1621) ? 0.0 : (isnan(0.0) ? _1621 : max(0.0, _1621))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1633 = 1.0;
    }
    float _1644;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1635 = dot(vec4(cbModelParam._m0[40u]), vec4(_1590, _1591, _1592, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1635) ? 0.0 : (isnan(0.0) ? _1635 : max(0.0, _1635))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1648 = (_1644 * cbModelParam._m0[1u].x) + (_1633 * (1.0 - cbModelParam._m0[1u].x));
    float _1658 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _653);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1658 : min(cbModelParam._m0[25u].z, _1658));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1706 = fma(_881, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _873)) + cbModelParam._m0[13u].w;
        float _1710 = fma(_881, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _873)) + cbModelParam._m0[14u].w;
        float _1714 = fma(_881, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _873)) + cbModelParam._m0[15u].w;
        float _1717 = fma(_822, cbModelParam._m0[13u].z, fma(_821, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820));
        float _1720 = fma(_822, cbModelParam._m0[14u].z, fma(_821, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820));
        float _1723 = fma(_822, cbModelParam._m0[15u].z, fma(_821, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820));
        float _1751;
        if (_1717 > 0.0)
        {
            _1751 = abs((1.0 - _1706) / _1717);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1706 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1751 = frontier_phi_17_15_ladder;
        }
        float _1951;
        if (_1720 > 0.0)
        {
            _1951 = abs((1.0 - _1710) / _1720);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1710 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1951 = frontier_phi_26_22_ladder;
        }
        float _2194;
        if (_1723 > 0.0)
        {
            _2194 = abs((1.0 - _1714) / _1723);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1714 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2194 = frontier_phi_38_33_ladder;
        }
        float _2196 = isnan(_1951) ? _1751 : (isnan(_1751) ? _1951 : min(_1751, _1951));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1717) + _1706;
        float _2202 = (_2197 * _1720) + _1710;
        float _2203 = (_2197 * _1723) + _1714;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2204;
        float _2208 = _2204 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 > _2208) || ((_2202 < _2206) || ((_2201 < _2206) || (_2201 > _2208))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2327 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2203, cbModelParam._m0[9u].z, fma(_2202, cbModelParam._m0[9u].y, _2201 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2203, cbModelParam._m0[10u].z, fma(_2202, cbModelParam._m0[10u].y, _2201 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2203, cbModelParam._m0[11u].z, fma(_2202, cbModelParam._m0[11u].y, _2201 * cbModelParam._m0[11u].x))), _1659);
            frontier_phi_16_38_ladder = _2327.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2327.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2327.x * cbModelParam._m0[1u].y;
        }
        _1739 = frontier_phi_16_38_ladder_2;
        _1741 = frontier_phi_16_38_ladder_1;
        _1743 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1727 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_820, _821, _822), _1659);
        _1739 = _1727.x * cbModelParam._m0[1u].y;
        _1741 = _1727.y * cbModelParam._m0[1u].y;
        _1743 = _1727.z * cbModelParam._m0[1u].y;
    }
    float _1747 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _653);
    float _1748 = isnan(_1747) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1747 : min(cbModelParam._m0[25u].w, _1747));
    float _1837;
    float _1839;
    float _1841;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1801 = fma(_881, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _873)) + cbModelParam._m0[21u].w;
        float _1805 = fma(_881, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _873)) + cbModelParam._m0[22u].w;
        float _1809 = fma(_881, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _873)) + cbModelParam._m0[23u].w;
        float _1812 = fma(_822, cbModelParam._m0[21u].z, fma(_821, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820));
        float _1815 = fma(_822, cbModelParam._m0[22u].z, fma(_821, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820));
        float _1818 = fma(_822, cbModelParam._m0[23u].z, fma(_821, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820));
        float _1956;
        if (_1812 > 0.0)
        {
            _1956 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1956 = frontier_phi_28_24_ladder;
        }
        float _2221;
        if (_1815 > 0.0)
        {
            _2221 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2221 = frontier_phi_40_35_ladder;
        }
        float _2426;
        if (_1818 > 0.0)
        {
            _2426 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2426 = frontier_phi_49_46_ladder;
        }
        float _2428 = isnan(_2221) ? _1956 : (isnan(_1956) ? _2221 : min(_1956, _2221));
        float _2429 = isnan(_2426) ? _2428 : (isnan(_2428) ? _2426 : min(_2428, _2426));
        float _2433 = (_2429 * _1812) + _1801;
        float _2434 = (_2429 * _1815) + _1805;
        float _2435 = (_2429 * _1818) + _1809;
        float _2436 = _2429 * 9.9999997473787516355514526367188e-05;
        float _2437 = (-1.0) - _2436;
        float _2439 = _2436 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2435 > _2439) || ((_2435 < _2437) || ((_2434 > _2439) || ((_2434 < _2437) || ((_2433 < _2437) || (_2433 > _2439))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2435, cbModelParam._m0[17u].z, fma(_2434, cbModelParam._m0[17u].y, _2433 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2435, cbModelParam._m0[18u].z, fma(_2434, cbModelParam._m0[18u].y, _2433 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2435, cbModelParam._m0[19u].z, fma(_2434, cbModelParam._m0[19u].y, _2433 * cbModelParam._m0[19u].x))), _1748);
            frontier_phi_25_49_ladder = _2634.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2634.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2634.x * cbModelParam._m0[1u].z;
        }
        _1837 = frontier_phi_25_49_ladder_2;
        _1839 = frontier_phi_25_49_ladder_1;
        _1841 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_820, _821, _822), _1748);
        _1837 = _1821.x * cbModelParam._m0[1u].z;
        _1839 = _1821.y * cbModelParam._m0[1u].z;
        _1841 = _1821.z * cbModelParam._m0[1u].z;
    }
    float _1853 = ((((1.0 - _841) * ((_828 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_841 * _828)) * _812;
    float _1854 = _1853 * ((cbModelParam._m0[1u].w * (_1837 - _1739)) + _1739);
    float _1855 = _1853 * ((cbModelParam._m0[1u].w * (_1839 - _1741)) + _1741);
    float _1856 = _1853 * ((cbModelParam._m0[1u].w * (_1841 - _1743)) + _1743);
    float _1859 = fma(_1856, cbSceneParam._m0[89u].z, fma(_1855, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1862 = fma(_1856, cbSceneParam._m0[90u].z, fma(_1855, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1865 = fma(_1856, cbSceneParam._m0[91u].z, fma(_1855, cbSceneParam._m0[91u].y, _1854 * cbSceneParam._m0[91u].x));
    uvec4 _1875 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1877 = _1875.x * 14u;
    uint _1878 = _1877 + 13u;
    float _1885 = _812 + (-1.0);
    float _1890 = (cbLight._m0[_1878].x * _1885) + 1.0;
    float _1891 = (cbLight._m0[_1878].y * _1885) + 1.0;
    float _1892 = (cbLight._m0[_1878].z * _1885) + 1.0;
    float _1893 = (cbLight._m0[_1878].w * _1885) + 1.0;
    uint _1894 = _1877 + 5u;
    float _1900 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
    uint _1904 = _1877 + 4u;
    float _1910 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
    uint _1914 = _1877 | 1u;
    float _1925 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_650, _651, _652));
    float _1928 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_650, _651, _652));
    float _4115 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _4126 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1933 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.3183098733425140380859375;
    float _1935 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.3183098733425140380859375;
    float _1942 = ((cbLight._m0[_1894].x * _1900) * _1935) + ((cbLight._m0[_1904].x * _1910) * _1933);
    float _1943 = ((_1900 * cbLight._m0[_1894].y) * _1935) + ((_1910 * cbLight._m0[_1904].y) * _1933);
    float _1944 = ((_1900 * cbLight._m0[_1894].z) * _1935) + ((_1910 * cbLight._m0[_1904].z) * _1933);
    uvec4 _1948 = floatBitsToUint(cbLight._m0[_1877 + 12u]);
    bool _1950 = _1948.x == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1950)
    {
        _1961 = _1942;
        _1963 = _1943;
        _1965 = _1944;
    }
    else
    {
        uint _1969 = _1877 + 6u;
        float _1985 = (dot(vec3(cbLight._m0[_1877 + 2u].xyz), vec3(_650, _651, _652)) * 0.5) + 0.5;
        float _1986 = _1985 * _1985;
        float _4137 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1988 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _1961 = (((cbLight._m0[_1969].x * 0.3183098733425140380859375) * _1987) * _1988) + _1942;
        _1963 = (((cbLight._m0[_1969].y * 0.3183098733425140380859375) * _1987) * _1988) + _1943;
        _1965 = (((cbLight._m0[_1969].z * 0.3183098733425140380859375) * _1987) * _1988) + _1944;
    }
    bool _1968 = _1948.y == 0u;
    float _2006;
    float _2008;
    float _2010;
    if (_1968)
    {
        _2006 = _1961;
        _2008 = _1963;
        _2010 = _1965;
    }
    else
    {
        uint _2165 = _1877 + 7u;
        float _2181 = (dot(vec3(cbLight._m0[_1877 + 3u].xyz), vec3(_650, _651, _652)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4153 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2184 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
        _2006 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _1961;
        _2008 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _1963;
        _2010 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _1965;
    }
    uint _2013 = _1877 + 8u;
    float _2026 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1877].w)) * _653) * 0.949999988079071044921875);
    float _2027 = _2026 * _2026;
    float _2028 = cbLight._m0[_1877].x + _729;
    float _2029 = cbLight._m0[_1877].y + _730;
    float _2030 = cbLight._m0[_1877].z + _731;
    float _2034 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
    float _2035 = _2034 * _2028;
    float _2036 = _2034 * _2029;
    float _2037 = _2034 * _2030;
    float _2038 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_1877].xyz));
    float _4169 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _2042 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2043 = dot(vec3(_650, _651, _652), vec3(_2035, _2036, _2037));
    float _4191 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2047 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_2035, _2036, _2037));
    float _4202 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2051 = _2027 * _2027;
    float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
    float _2066 = (exp2(log2(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2067 = 1.0 - _2027;
    float _2078 = (0.5 / (((_2042 * ((_2041 * _2067) + _2027)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2067) + _2027) * _2041))) * _2041;
    float _4213 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2080 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
    uint _2091 = _1877 + 9u;
    float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _653) * 0.949999988079071044921875);
    float _2103 = _2102 * _2102;
    float _2104 = cbLight._m0[_1914].x + _729;
    float _2105 = cbLight._m0[_1914].y + _730;
    float _2106 = cbLight._m0[_1914].z + _731;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2111 = _2110 * _2104;
    float _2112 = _2110 * _2105;
    float _2113 = _2110 * _2106;
    float _2114 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_1914].xyz));
    float _4224 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2118 = dot(vec3(_650, _651, _652), vec3(_2111, _2112, _2113));
    float _4235 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _2122 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_2111, _2112, _2113));
    float _4246 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2126 = _2103 * _2103;
    float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
    float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2140 = 1.0 - _2103;
    float _2150 = (0.5 / (((_2042 * ((_2117 * _2140) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2140) + _2103) * _2117))) * _2117;
    float _4257 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
    float _2162 = (((_2139 * cbLight._m0[_2091].x) * _2152) * _1900) + (((_2066 * cbLight._m0[_2013].x) * _2080) * _1910);
    float _2163 = (((_2139 * cbLight._m0[_2091].y) * _2152) * _1900) + (((_2066 * cbLight._m0[_2013].y) * _2080) * _1910);
    float _2164 = (((_2139 * cbLight._m0[_2091].z) * _2152) * _1900) + (((_2066 * cbLight._m0[_2013].z) * _2080) * _1910);
    float _2226;
    float _2228;
    float _2230;
    if (_1950)
    {
        _2226 = _2162;
        _2228 = _2163;
        _2230 = _2164;
    }
    else
    {
        uint _2232 = _1877 + 2u;
        uint _2236 = _1877 + 10u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _653) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _729;
        float _2253 = cbLight._m0[_2232].y + _730;
        float _2254 = cbLight._m0[_2232].z + _731;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_2232].xyz));
        float _4268 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2266 = dot(vec3(_650, _651, _652), vec3(_2259, _2260, _2261));
        float _4279 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4290 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2288 = 1.0 - _2251;
        float _2298 = (0.5 / (((_2042 * ((_2265 * _2288) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2288) + _2251) * _2265))) * _2265;
        float _4301 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2300 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2301 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _2226 = (((_2287 * cbLight._m0[_2236].x) * _2300) * _2301) + _2162;
        _2228 = (((_2287 * cbLight._m0[_2236].y) * _2300) * _2301) + _2163;
        _2230 = (((_2287 * cbLight._m0[_2236].z) * _2300) * _2301) + _2164;
    }
    float _2336;
    float _2338;
    float _2340;
    if (_1968)
    {
        _2336 = _2226;
        _2338 = _2228;
        _2340 = _2230;
    }
    else
    {
        uint _2347 = _1877 + 3u;
        uint _2351 = _1877 + 11u;
        float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _653) * 0.949999988079071044921875);
        float _2366 = _2365 * _2365;
        float _2367 = cbLight._m0[_2347].x + _729;
        float _2368 = cbLight._m0[_2347].y + _730;
        float _2369 = cbLight._m0[_2347].z + _731;
        float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
        float _2374 = _2373 * _2367;
        float _2375 = _2373 * _2368;
        float _2376 = _2373 * _2369;
        float _2377 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_2347].xyz));
        float _4317 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2381 = dot(vec3(_650, _651, _652), vec3(_2374, _2375, _2376));
        float _4328 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2385 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2374, _2375, _2376));
        float _4339 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2389 = _2366 * _2366;
        float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
        float _2402 = (exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2403 = 1.0 - _2366;
        float _2413 = (0.5 / (((_2042 * ((_2380 * _2403) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2403) + _2366) * _2380))) * _2380;
        float _4350 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2415 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
        float _2416 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
        _2336 = (((_2402 * cbLight._m0[_2351].x) * _2415) * _2416) + _2226;
        _2338 = (((_2402 * cbLight._m0[_2351].y) * _2415) * _2416) + _2228;
        _2340 = (((_2402 * cbLight._m0[_2351].z) * _2415) * _2416) + _2230;
    }
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    if (_1875.y == 0u)
    {
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2491;
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2491;
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2491;
        uvec4 _2506 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2507 = _2506.x;
        uint _2518 = uint((float(_2506.y) * floor(float(uint(cbSceneParam._m0[85u].y * _750) / _2507))) + floor(float(uint(cbSceneParam._m0[85u].x * _749) / _2507)));
        float _2528 = (log2(_2494 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2529 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        uint _2532 = uint(isnan(14.0) ? _2529 : (isnan(_2529) ? 14.0 : min(_2529, 14.0)));
        uvec4 _2537 = texelFetch(g_lightClusterGridBuffer, int(((_2532 << 2u) + (_2518 << 6u)) >> 2u));
        uint _2538 = _2537.x;
        uint _2539 = _2506.z;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        if (((((1u << ((_2539 >> 4u) & 15u)) + 4294967295u) & _2538) == 0u) || ((_2539 & 240u) == 0u))
        {
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
        }
        else
        {
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            float _2796 = 0.0;
            float _2797 = 0.0;
            uint _2798 = 0u;
            uint _2807;
            bool _2808;
            for (;;)
            {
                _2807 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2798 << 2u)) >> 2u)).x;
                _2808 = _2807 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2808)
                {
                    frontier_phi_66_pred = _2792;
                    frontier_phi_66_pred_1 = _2797;
                    frontier_phi_66_pred_2 = _2796;
                    frontier_phi_66_pred_3 = _2795;
                    frontier_phi_66_pred_4 = _2794;
                    frontier_phi_66_pred_5 = _2793;
                }
                else
                {
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    uint _2943;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2794;
                    _2940 = _2795;
                    _2941 = _2796;
                    _2942 = _2797;
                    _2943 = _2807;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    for (;;)
                    {
                        uint _2947 = uint(findLSB(_2943)) + (_2798 << 5u);
                        uint _2944 = (_2943 + 4294967295u) & _2943;
                        uint _2949 = _2947 * 48u;
                        vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 3u)).x));
                        uint _2969 = (_2947 * 48u) + 4u;
                        vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 3u)).x));
                        uint _2988 = (_2947 * 48u) + 8u;
                        vec3 _2999 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x));
                        float _3003 = _2963.x - _2492;
                        float _3004 = _2963.y - _2493;
                        float _3005 = _2963.z - _2494;
                        float _3006 = dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005));
                        float _3009 = inversesqrt(_3006);
                        float _3010 = _3009 * _3003;
                        float _3011 = _3009 * _3004;
                        float _3012 = _3009 * _3005;
                        float _3013 = dot(vec3(_768, _771, _774), vec3(_3010, _3011, _3012));
                        float _3018 = 1.0 - (_3006 * _2963.w);
                        float _4376 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3019 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3020 = sqrt(_3006) * _2982.w;
                        float _3023 = 1.39999997615814208984375 / (_3020 + 1.39999997615814208984375);
                        float _3024 = _3023 * _3023;
                        float _3027 = ((1.0 - _3024) * _3013) + _3024;
                        float _3030 = _3020 * _3020;
                        float _3034 = ((isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))) * _3019) / ((_3030 * 0.699999988079071044921875) + 1.0);
                        float _3038 = (-0.0) - _2492;
                        float _3039 = (-0.0) - _2493;
                        float _3040 = (-0.0) - _2494;
                        float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3055 = exp2(log2(1.0 / ((_3030 * 3.5) + 5.0)) * 0.25);
                        float _3056 = 1.0 - _828;
                        float _3063 = sqrt(1.0 - ((1.0 - (_3056 * _3056)) * (1.0 - (_3055 * _3055))));
                        float _3064 = _3063 * _3063;
                        float _3065 = _3064 * _3064;
                        float _3066 = _3045 + _3010;
                        float _3067 = _3046 + _3011;
                        float _3068 = _3047 + _3012;
                        float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
                        float _3076 = dot(vec3(_768, _771, _774), vec3(_3045, _3046, _3047));
                        float _4392 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3080 = dot(vec3(_768, _771, _774), vec3(_3072 * _3066, _3072 * _3067, _3072 * _3068));
                        float _4403 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3083 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3087 = ((_3083 * _3083) * (_3065 + (-1.0))) + 1.0;
                        float _3088 = _3023 * _3064;
                        float _3089 = _3088 * _3088;
                        float _3092 = ((1.0 - _3089) * _3013) + _3089;
                        float _4414 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3093 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3094 = 1.0 - _3064;
                        float _3104 = (0.5 / (((_3093 * ((_3079 * _3094) + _3064)) + 9.9999999392252902907785028219223e-09) + (((_3093 * _3094) + _3064) * _3079))) * _3093;
                        float _4425 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3115 = (((_3065 * 3.1415927410125732421875) * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) / ((_3087 * _3087) * ((_3030 * 2.1991131305694580078125) + 3.141590118408203125))) * _3019;
                        _2867 = (_3034 * _2982.x) + _2940;
                        _2868 = (_3034 * _2982.y) + _2941;
                        _2869 = (_3034 * _2982.z) + _2942;
                        _2864 = (_3115 * _2999.x) + _2937;
                        _2865 = (_3115 * _2999.y) + _2938;
                        _2866 = (_3115 * _2999.z) + _2939;
                        if (_2944 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2867;
                            _2941 = _2868;
                            _2942 = _2869;
                            _2943 = _2944;
                        }
                    }
                    frontier_phi_66_pred = _2864;
                    frontier_phi_66_pred_1 = _2869;
                    frontier_phi_66_pred_2 = _2868;
                    frontier_phi_66_pred_3 = _2867;
                    frontier_phi_66_pred_4 = _2866;
                    frontier_phi_66_pred_5 = _2865;
                }
                _2640 = frontier_phi_66_pred;
                _2650 = frontier_phi_66_pred_1;
                _2648 = frontier_phi_66_pred_2;
                _2646 = frontier_phi_66_pred_3;
                _2644 = frontier_phi_66_pred_4;
                _2642 = frontier_phi_66_pred_5;
                uint _2799 = _2798 + 1u;
                if (_2799 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2792 = _2640;
                    _2793 = _2642;
                    _2794 = _2644;
                    _2795 = _2646;
                    _2796 = _2648;
                    _2797 = _2650;
                    _2798 = _2799;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
        }
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.z;
        uint _2656 = (_2654 >> 8u) & 15u;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        if (((4294967295u << _2656) & _2538) == 0u)
        {
            _2760 = _2639;
            _2762 = _2641;
            _2764 = _2643;
            _2766 = _2645;
            _2768 = _2647;
            _2770 = _2649;
        }
        else
        {
            float _2785 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
            float _2786 = _2785 * _2492;
            float _2787 = _2785 * _2493;
            float _2788 = _2785 * _2494;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2656 < ((_2654 >> 12u) & 15u))
            {
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2769;
                float _2771;
                float _2920 = _2639;
                float _2921 = _2641;
                float _2922 = _2643;
                float _2923 = _2645;
                float _2924 = _2647;
                float _2925 = _2649;
                uint _2926 = _2656;
                uint _2935;
                bool _2936;
                for (;;)
                {
                    _2935 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2926 << 2u)) >> 2u)).x;
                    _2936 = _2935 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2936)
                    {
                        frontier_phi_77_pred = _2925;
                        frontier_phi_77_pred_1 = _2924;
                        frontier_phi_77_pred_2 = _2923;
                        frontier_phi_77_pred_3 = _2922;
                        frontier_phi_77_pred_4 = _2921;
                        frontier_phi_77_pred_5 = _2920;
                    }
                    else
                    {
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3142 = _2920;
                        float _3143 = _2921;
                        float _3144 = _2922;
                        float _3145 = _2923;
                        float _3146 = _2924;
                        float _3147 = _2925;
                        uint _3148 = _2935;
                        uint _3149;
                        vec4 _3174;
                        float _3175;
                        vec4 _3190;
                        vec3 _3202;
                        vec4 _3217;
                        vec4 _3233;
                        float _3279;
                        bool _3280;
                        for (;;)
                        {
                            uint _3159 = ((_2926 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3148));
                            _3149 = (_3148 + 4294967295u) & _3148;
                            uint _3161 = _3159 * 40u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            _3175 = _3174.w;
                            uint _3177 = (_3159 * 40u) + 4u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3192 = (_3159 * 40u) + 8u;
                            _3202 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x));
                            uint _3204 = (_3159 * 40u) + 16u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3220 = (_3159 * 40u) + 20u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3235 = (_3159 * 40u) + 24u;
                            vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            uint _3254 = (_3159 * 40u) + 28u;
                            vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            _3279 = fma(_2494, _3267.z, fma(_2493, _3267.y, _3267.x * _2492)) + _3267.w;
                            _3280 = !((fma(_2494, _3248.z, fma(_2493, _3248.y, _3248.x * _2492)) + _3248.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3280)
                            {
                                float _3307 = _3174.x - _2492;
                                float _3308 = _3174.y - _2493;
                                float _3309 = _3174.z - _2494;
                                float _3310 = dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309));
                                float _3313 = inversesqrt(_3310);
                                float _3314 = _3313 * _3307;
                                float _3315 = _3313 * _3308;
                                float _3316 = _3313 * _3309;
                                float _3320 = 1.0 - (_3310 / (_3175 * _3175));
                                float _4436 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3325 = sqrt(_3310) * _3190.w;
                                float _3327 = 1.39999997615814208984375 / (_3325 + 1.39999997615814208984375);
                                float _3328 = _3327 * _3327;
                                float _3331 = ((1.0 - _3328) * dot(vec3(_3314, _3315, _3316), vec3(_768, _771, _774))) + _3328;
                                float _3334 = _3325 * _3325;
                                float _3338 = (fma(_2494, _3217.z, fma(_2493, _3217.y, _3217.x * _2492)) + _3217.w) / _3279;
                                float _3339 = (fma(_2494, _3233.z, fma(_2493, _3233.y, _3233.x * _2492)) + _3233.w) / _3279;
                                float _3343 = 1.0 - dot(vec2(_3338, _3339), vec2(_3338, _3339));
                                float _4452 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3345 = _3344 * (((isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0))) * _3321) / ((_3334 * 0.699999988079071044921875) + 1.0));
                                float _3357 = exp2(log2(1.0 / ((_3334 * 3.5) + 5.0)) * 0.25);
                                float _3358 = 1.0 - _828;
                                float _3365 = sqrt(1.0 - ((1.0 - (_3358 * _3358)) * (1.0 - (_3357 * _3357))));
                                float _3366 = _3365 * _3365;
                                float _3367 = _3366 * _3366;
                                float _3368 = _3314 - _2786;
                                float _3369 = _3315 - _2787;
                                float _3370 = _3316 - _2788;
                                float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                                float _3378 = dot(vec3(_768, _771, _774), vec3((-0.0) - _2786, (-0.0) - _2787, (-0.0) - _2788));
                                float _4463 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3381 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3382 = dot(vec3(_768, _771, _774), vec3(_3374 * _3368, _3374 * _3369, _3374 * _3370));
                                float _4474 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3385 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3389 = ((_3385 * _3385) * (_3367 + (-1.0))) + 1.0;
                                float _3390 = _3327 * _3366;
                                float _3391 = _3390 * _3390;
                                float _3397 = ((1.0 - _3391) * dot(vec3(_768, _771, _774), vec3(_3314, _3315, _3316))) + _3391;
                                float _4485 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3399 = 1.0 - _3366;
                                float _3409 = (0.5 / (((_3398 * ((_3381 * _3399) + _3366)) + 9.9999999392252902907785028219223e-09) + (((_3398 * _3399) + _3366) * _3381))) * _3398;
                                float _4496 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3419 = (_3344 * _3321) * (((_3367 * 3.1415927410125732421875) * (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) / ((_3389 * _3389) * ((_3334 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3345 * _3190.y;
                                frontier_phi_83_pred_1 = _3345 * _3190.x;
                                frontier_phi_83_pred_2 = _3419 * _3202.z;
                                frontier_phi_83_pred_3 = _3419 * _3202.y;
                                frontier_phi_83_pred_4 = _3419 * _3202.x;
                                frontier_phi_83_pred_5 = _3345 * _3190.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3427 = frontier_phi_83_pred;
                            _3426 = frontier_phi_83_pred_1;
                            _3425 = frontier_phi_83_pred_2;
                            _3424 = frontier_phi_83_pred_3;
                            _3423 = frontier_phi_83_pred_4;
                            _3428 = frontier_phi_83_pred_5;
                            _3132 = _3426 + _3145;
                            _3133 = _3427 + _3146;
                            _3134 = _3428 + _3147;
                            _3129 = _3423 + _3142;
                            _3130 = _3424 + _3143;
                            _3131 = _3425 + _3144;
                            if (_3149 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3149;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3134;
                        frontier_phi_77_pred_1 = _3133;
                        frontier_phi_77_pred_2 = _3132;
                        frontier_phi_77_pred_3 = _3131;
                        frontier_phi_77_pred_4 = _3130;
                        frontier_phi_77_pred_5 = _3129;
                    }
                    _2771 = frontier_phi_77_pred;
                    _2769 = frontier_phi_77_pred_1;
                    _2767 = frontier_phi_77_pred_2;
                    _2765 = frontier_phi_77_pred_3;
                    _2763 = frontier_phi_77_pred_4;
                    _2761 = frontier_phi_77_pred_5;
                    uint _2927 = _2926 + 1u;
                    if (_2927 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2920 = _2761;
                        _2921 = _2763;
                        _2922 = _2765;
                        _2923 = _2767;
                        _2924 = _2769;
                        _2925 = _2771;
                        _2926 = _2927;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2765;
                frontier_phi_58_59_ladder_1 = _2771;
                frontier_phi_58_59_ladder_2 = _2769;
                frontier_phi_58_59_ladder_3 = _2767;
                frontier_phi_58_59_ladder_4 = _2763;
                frontier_phi_58_59_ladder_5 = _2761;
            }
            else
            {
                frontier_phi_58_59_ladder = _2643;
                frontier_phi_58_59_ladder_1 = _2649;
                frontier_phi_58_59_ladder_2 = _2647;
                frontier_phi_58_59_ladder_3 = _2645;
                frontier_phi_58_59_ladder_4 = _2641;
                frontier_phi_58_59_ladder_5 = _2639;
            }
            _2760 = frontier_phi_58_59_ladder_5;
            _2762 = frontier_phi_58_59_ladder_4;
            _2764 = frontier_phi_58_59_ladder;
            _2766 = frontier_phi_58_59_ladder_3;
            _2768 = frontier_phi_58_59_ladder_2;
            _2770 = frontier_phi_58_59_ladder_1;
        }
        float _2775 = isnan(1.0) ? _812 : (isnan(_812) ? 1.0 : min(_812, 1.0));
        _2551 = (_2775 * _2766) + _2006;
        _2553 = (_2775 * _2768) + _2008;
        _2555 = (_2775 * _2770) + _2010;
        _2557 = ((_2760 * 0.039999999105930328369140625) * _2775) + _2336;
        _2559 = ((_2762 * 0.039999999105930328369140625) * _2775) + _2338;
        _2561 = ((_2764 * 0.039999999105930328369140625) * _2775) + _2340;
    }
    else
    {
        _2551 = _2006;
        _2553 = _2008;
        _2555 = _2010;
        _2557 = _2336;
        _2559 = _2338;
        _2561 = _2340;
    }
    float _4512 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4523 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4534 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _2578 = ((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2551 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _812))) + ((_2557 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1648)) * cbPerFrame._m0[3u].x);
    float _2579 = ((isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2553 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _812))) + ((_2559 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1648)) * cbPerFrame._m0[3u].x);
    float _2580 = ((isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2555 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _812))) + ((_2561 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1648)) * cbPerFrame._m0[3u].x);
    uint _2581 = _238 + 6u;
    float _2589 = _749 / cbSceneParam._m0[86u].x;
    float _2590 = _750 / cbSceneParam._m0[86u].y;
    vec4 _2604 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2606 = _2604.x;
    float _2607 = _2604.y;
    float _2608 = _2604.z;
    float _2609 = _2604.w;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2664 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2665 = _2664 / _671;
        float _2676 = _2665 * _722;
        float _2677 = _723 * _2665;
        float _2678 = (-0.0) - _2677;
        float _2680 = _2665 * _724;
        float _2682 = (cbSceneParam._m0[77u].w * _2678) / _2664;
        float _2683 = _2682 + cbSceneParam._m0[79u].w;
        float _2684 = cbSceneParam._m0[79u].w - _2677;
        float _2690 = sqrt(((_2676 * _2676) + (_2677 * _2677)) + (_2680 * _2680));
        float _2693 = (1.0 - (cbSceneParam._m0[77u].w / _2664)) * _2690;
        float _2698 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2700 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2877;
        if (abs((_2678 - _2682) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2877 = ((((_2683 > 0.0) ? exp2(_2698 * _2683) : (2.0 - exp2(_2700 * _2683))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2693;
        }
        else
        {
            float _2821 = 1.0 / cbSceneParam._m0[80u].x;
            float _2822 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : max(_2683, _2684));
            float _2823 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : min(_2683, _2684));
            float _2832 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : min(_2822, 0.0));
            float _2833 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : min(_2823, 0.0));
            _2877 = ((abs(_2690 / _2678) * cbSceneParam._m0[80u].y) * ((((_2832 - _2833) * 2.0) - ((exp2(_2698 * (isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0)))) - exp2(_2698 * (isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))))) * _2821)) - ((exp2(_2700 * _2832) - exp2(_2700 * _2833)) * _2821))) + (_2693 * cbSceneParam._m0[80u].z);
        }
        vec4 _2879 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, 1.0), 0.0);
        float _2888 = exp2((_2877 * (-1.44269502162933349609375)) * (1.0 - _2879.w));
        float _2889 = log2(_2888);
        float _2905 = log2(_2609);
        _2702 = (exp2(_2905 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].x)) * _2879.x) / cbSceneParam._m0[78u].x)) + _2606;
        _2704 = (exp2(_2905 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].y)) * _2879.y) / cbSceneParam._m0[78u].y)) + _2607;
        _2706 = (exp2(_2905 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].z)) * _2879.z) / cbSceneParam._m0[78u].z)) + _2608;
        _2708 = _2888 * _2609;
    }
    else
    {
        _2702 = _2606;
        _2704 = _2607;
        _2706 = _2608;
        _2708 = _2609;
    }
    bool _2915;
    vec4 _2718;
    vec4 _2740;
    float _2742;
    float _2746;
    float _2747;
    float _2748;
    float _2749;
    bool _2759;
    for (;;)
    {
        _2718 = cbMatDynParam._m0[0u];
        float _2720 = roundEven(_2718.y);
        bool _2721 = _2720 == 3.0;
        float _2722 = log2(_2708);
        float _2729 = exp2(_2722 * cbSceneParam._m0[78u].x) * _2578;
        float _2730 = exp2(_2722 * cbSceneParam._m0[78u].y) * _2579;
        float _2731 = exp2(_2722 * cbSceneParam._m0[78u].z) * _2580;
        float _2738 = _738 + (-0.5);
        _2740 = cbMtdParam._m0[1u];
        _2742 = _2740.y * _2738;
        float _2745 = (_2720 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2746 = _2745 * (_2721 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2702)));
        _2747 = _2745 * (_2721 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2704)));
        _2748 = _2745 * (_2721 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2706)));
        _2749 = _2738 * 0.999000012874603271484375;
        _2759 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2759)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2749) < 0.5)
            {
                _2915 = true;
                break;
            }
        }
        uint _2856 = _787 + uint(_2718.w);
        if ((cbInstanceData._m0[_2856].w < 1.0) && ((cbInstanceData._m0[_2856].w + _2749) < 0.5))
        {
            _2915 = true;
            break;
        }
        if ((_2742 + 1.0) < _2740.x)
        {
            _2915 = true;
            break;
        }
        _2915 = false;
        break;
    }
    float _3120;
    if (_2915)
    {
        discard_state = true;
        _3120 = 0.0;
    }
    else
    {
        _3120 = cbInstanceData._m0[_2581].w;
    }
    SV_Target.x = _2746;
    SV_Target.y = _2747;
    SV_Target.z = _2748;
    SV_Target.w = _3120;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2581].w;
    discard_exit();
}


