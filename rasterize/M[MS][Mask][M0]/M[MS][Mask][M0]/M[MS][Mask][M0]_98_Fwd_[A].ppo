#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1520;
float _3876;
float _3877;
float _3878;
float _3879;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3888 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3899 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3910 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _424 = _422.x;
    float _436 = dot(vec4(_424, _422.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _453 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _387.x) * 2.0) - ((((_424 - _436) * cbMtdParam._m0[24u].z) + _436) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3921 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _461 = (_454 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _462 = (_454 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _463 = (_454 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _502 = _500.x;
    float _512 = dot(vec4(_502, _500.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _526 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _387.y) * 2.0) - ((((_502 - _512) * cbMtdParam._m0[24u].z) + _512) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3932 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _534 = (_527 * ((_480.x * cbMtdParam._m0[13u].x) - _461)) + _461;
    float _535 = (_527 * ((_480.y * cbMtdParam._m0[13u].y) - _462)) + _462;
    float _536 = (_527 * ((_480.z * cbMtdParam._m0[13u].z) - _463)) + _463;
    float _540 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _534;
    float _543 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _535;
    float _546 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _536;
    float _553 = ((_534 - _540) * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) + _540;
    float _554 = ((_535 - _543) * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) + _543;
    float _555 = ((_536 - _546) * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) + _546;
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _304) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _305) + cbTextureTilingScale._m0[14u].w));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _637 = _635.x;
    float _638 = _635.y;
    float _639 = _635.z;
    float _646 = ((_618.x - _637) * _454) + _637;
    float _647 = ((_618.y - _638) * _454) + _638;
    float _648 = ((_618.z - _639) * _454) + _639;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _673 = ((_660.z - _648) * _527) + _648;
    float _676 = ((((_660.x - _646) * _527) + _646) * 2.0) + (-1.0);
    float _677 = ((((_660.y - _647) * _527) + _647) * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _3943 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _683 = sqrt(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _713 = (_676 + ((((_593.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_701.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _714 = (_677 + ((((_593.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_701.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _717 = fma(_683, _254, fma(_714, _261, _713 * _247));
    float _720 = fma(_683, _255, fma(_714, _262, _713 * _248));
    float _723 = fma(_683, _256, fma(_714, _263, _713 * _249));
    float _727 = inversesqrt(dot(vec3(_717, _720, _723), vec3(_717, _720, _723)));
    vec4 _754 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _756 = _754.x;
    float _757 = 1.0 - _756;
    float _763 = (cbMtdParam._m0[19u].x + dot(vec4(_727 * _717, _727 * _720, _727 * _723, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_756 - _757) * cbMtdParam._m0[24u].w) + _757) * cbMtdParam._m0[21u].z);
    float _3954 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _764 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _766 = (-0.0) - cbMtdParam._m0[24u].x;
    float _768 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _768 : (isnan(_768) ? 1.0 : min(_768, 1.0));
    float _776 = _764 - ((_764 * TEXCOORD_8.x) * _769);
    float _777 = _764 - ((_764 * TEXCOORD_8.y) * _769);
    float _778 = _764 - ((_764 * TEXCOORD_8.z) * _769);
    float _785 = (_776 * ((_574.x * cbMtdParam._m0[18u].x) - _553)) + _553;
    float _786 = (_777 * ((_574.y * cbMtdParam._m0[18u].y) - _554)) + _554;
    float _787 = (_778 * ((_574.z * cbMtdParam._m0[18u].z) - _555)) + _555;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _801 = _799.x;
    float _802 = 1.0 - _801;
    float _828 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_801 - _802) * cbMtdParam._m0[24u].y) + _802) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3975 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _829 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _837 = ((((cbMtdParam._m0[10u].x - _785) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _829) + _785;
    float _838 = ((((cbMtdParam._m0[10u].y - _786) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _829) + _786;
    float _839 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _787)) * _829) + _787;
    float _844 = (((_593.z - _673) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _673;
    float _848 = ((_701.z - _844) * cbMtdParam._m0[19u].w) + _844;
    vec4 _862 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _869 = (_862.x * 2.0) + (-1.0);
    float _870 = (_862.y * 2.0) + (-1.0);
    float _871 = dot(vec2(_869, _870), vec2(_869, _870));
    float _3986 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _879 = ((_862.z - _848) * _776) + _848;
    float _882 = ((cbMtdParam._m0[23u].y - _879) * _829) + _879;
    vec4 _903 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _909 = (_903.x * 2.0) + (-1.0);
    float _910 = (_903.y * 2.0) + (-1.0);
    float _911 = dot(vec2(_909, _910), vec2(_909, _910));
    float _3997 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _926 = ((sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) - _683) * _778) + _683;
    float _929 = (((_869 - _713) * _776) + _713) + (cbMtdParam._m0[21u].x * _713);
    float _930 = (((_870 - _714) * _777) + _714) + (cbMtdParam._m0[21u].x * _714);
    float _941 = (((_909 - _929) + (_929 * cbMtdParam._m0[22u].z)) * _829) + _929;
    float _942 = (((_910 - _930) + (_930 * cbMtdParam._m0[22u].z)) * _829) + _930;
    float _943 = (_829 * (sqrt(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) - _926)) + _926;
    float _945 = cbMtdParam._m0[22u].x + _701.w;
    float _948 = fma(_943, _254, fma(_942, _261, _941 * _247));
    float _951 = fma(_943, _255, fma(_942, _262, _941 * _248));
    float _954 = fma(_943, _256, fma(_942, _263, _941 * _249));
    float _958 = inversesqrt(dot(vec3(_948, _951, _954), vec3(_948, _951, _954)));
    float _959 = _958 * _948;
    float _960 = _958 * _951;
    float _961 = _958 * _954;
    float _4008 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _962 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4030 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4041 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4052 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _980 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1031 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1021);
    float _1032 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1021);
    float _1033 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1021);
    float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
    float _1038 = _1031 * _1037;
    float _1039 = _1032 * _1037;
    float _1040 = _1033 * _1037;
    vec4 _1045 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1047 = _1045.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1201 = sqrt(((_1031 * _1031) + (_1032 * _1032)) + (_1033 * _1033));
        float _1207 = (cbMatDynParam._m0[5u].x * _1201) + cbMatDynParam._m0[5u].y;
        float _4063 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1212 = (cbMatDynParam._m0[5u].z * _1201) + cbMatDynParam._m0[5u].w;
        float _4074 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) - _1208)) + _1208) < ((_1047 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1058 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1059 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1077 = fma(_961, cbSceneParam._m0[5u].z, fma(_960, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _959));
    float _1080 = fma(_961, cbSceneParam._m0[6u].z, fma(_960, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _959));
    float _1083 = fma(_961, cbSceneParam._m0[7u].z, fma(_960, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _959));
    uint _1096 = _285 + 9u;
    uint _1097 = _1096 + uint(cbMatDynParam._m0[0u].w);
    float _1103 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_1097].x;
    float _1104 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_1097].y;
    float _1105 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_1097].z;
    float _4085 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1107 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    vec4 _1117 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1058, cbSceneParam._m0[86u].y * _1059));
    float _1121 = ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * TEXCOORD_5.w) * _1117.x;
    float _1122 = dot(vec3(_959, _960, _961), vec3(_1038, _1039, _1040));
    float _1125 = _1122 * 2.0;
    float _1129 = (_1125 * _959) - _1038;
    float _1130 = (_1125 * _960) - _1039;
    float _1131 = (_1125 * _961) - _1040;
    float _1135 = abs(dot(vec3(_1038, _1039, _1040), vec3(_959, _960, _961)));
    float _4118 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _1137 = sqrt(_962);
    float _1150 = exp2((_1137 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1137 * 3.0));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1519;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1244 = fma(_1190, cbModelParam._m0[26u].z, fma(_1186, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1182));
        float _1248 = fma(_1190, cbModelParam._m0[27u].z, fma(_1186, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1182));
        float _1252 = fma(_1190, cbModelParam._m0[28u].z, fma(_1186, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1182));
        float _1277 = _1182 + _959;
        float _1278 = _1186 + _960;
        float _1279 = _1190 + _961;
        float _1289 = fma(_1279, cbModelParam._m0[26u].z, fma(_1278, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1277)) - _1244;
        float _1290 = fma(_1279, cbModelParam._m0[27u].z, fma(_1278, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1277)) - _1248;
        float _1291 = fma(_1279, cbModelParam._m0[28u].z, fma(_1278, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1277)) - _1252;
        float _1295 = inversesqrt(dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291)));
        float _1308 = ((_1295 * _1289) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1244 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1295 * _1290) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1248 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1295 * _1291) / cbModelParam._m0[34u].z) + ((((((_1252 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        float _1347 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1313.x + (-0.5));
        float _1349 = _1347 * (_1313.y + (-0.5));
        float _1350 = _1347 * (_1313.z + (-0.5));
        float _1357 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1320.x + (-0.5));
        float _1359 = _1357 * (_1320.y + (-0.5));
        float _1360 = _1357 * (_1320.z + (-0.5));
        float _1367 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1327.x + (-0.5));
        float _1369 = _1367 * (_1327.y + (-0.5));
        float _1370 = _1367 * (_1327.z + (-0.5));
        float _1377 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1334.x + (-0.5));
        float _1379 = _1377 * (_1334.y + (-0.5));
        float _1380 = _1377 * (_1334.z + (-0.5));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = _1348 * 0.5;
        float _1385 = _1358 * 0.5;
        float _1386 = _1368 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1401 = (dot(vec3(_959, _960, _961), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1411 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4166 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1413 + 1.0))) + _1418) * _1381;
        float _1428 = _1349 * 0.5;
        float _1429 = _1359 * 0.5;
        float _1430 = _1369 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_959, _960, _961), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4199 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1455 + 1.0))) + _1460) * _1382;
        float _1470 = _1350 * 0.5;
        float _1471 = _1360 * 0.5;
        float _1472 = _1370 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_959, _960, _961), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4232 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1497 + 1.0))) + _1502) * _1383;
        _1519 = _1350;
        _1521 = _1349;
        _1522 = _1348;
        _1523 = _1360;
        _1524 = _1359;
        _1525 = _1358;
        _1526 = _1370;
        _1527 = _1369;
        _1528 = _1368;
        _1529 = _1383;
        _1530 = _1382;
        _1531 = _1381;
        _1532 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1533 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1534 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
    }
    else
    {
        _1519 = _1520;
        _1521 = _1520;
        _1522 = _1520;
        _1523 = _1520;
        _1524 = _1520;
        _1525 = _1520;
        _1526 = _1520;
        _1527 = _1520;
        _1528 = _1520;
        _1529 = _1520;
        _1530 = _1520;
        _1531 = _1520;
        _1532 = 0.0;
        _1533 = 0.0;
        _1534 = 0.0;
    }
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1561 = fma(_1190, cbModelParam._m0[30u].z, fma(_1186, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1182));
        float _1565 = fma(_1190, cbModelParam._m0[31u].z, fma(_1186, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1182));
        float _1569 = fma(_1190, cbModelParam._m0[32u].z, fma(_1186, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1182));
        float _1592 = _1182 + _959;
        float _1593 = _1186 + _960;
        float _1594 = _1190 + _961;
        float _1604 = fma(_1594, cbModelParam._m0[30u].z, fma(_1593, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1592)) - _1561;
        float _1605 = fma(_1594, cbModelParam._m0[31u].z, fma(_1593, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1592)) - _1565;
        float _1606 = fma(_1594, cbModelParam._m0[32u].z, fma(_1593, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1592)) - _1569;
        float _1610 = inversesqrt(dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606)));
        float _1623 = ((_1610 * _1604) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1561 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1624 = ((_1610 * _1605) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1565 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1625 = ((_1610 * _1606) / cbModelParam._m0[35u].z) + ((((((_1569 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        float _1660 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1661 = _1660 * (_1627.x + (-0.5));
        float _1662 = _1660 * (_1627.y + (-0.5));
        float _1663 = _1660 * (_1627.z + (-0.5));
        float _1670 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1634.x + (-0.5));
        float _1672 = _1670 * (_1634.y + (-0.5));
        float _1673 = _1670 * (_1634.z + (-0.5));
        float _1680 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1681 = _1680 * (_1641.x + (-0.5));
        float _1682 = _1680 * (_1641.y + (-0.5));
        float _1683 = _1680 * (_1641.z + (-0.5));
        float _1690 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1691 = _1690 * (_1648.x + (-0.5));
        float _1692 = _1690 * (_1648.y + (-0.5));
        float _1693 = _1690 * (_1648.z + (-0.5));
        float _1694 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1695 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1696 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1697 = _1661 * 0.5;
        float _1698 = _1671 * 0.5;
        float _1699 = _1681 * 0.5;
        float _1700 = dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699));
        float _1705 = (_1700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1700);
        float _1713 = (dot(vec3(_959, _960, _961), vec3(_1705 * _1697, _1705 * _1698, _1705 * _1699)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1722 = sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699)) / (_1694 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1724 = _1723 * 2.0;
        float _1728 = (1.0 - _1723) / (_1723 + 1.0);
        float _4295 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1738 = ((((1.0 - _1729) * (_1724 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1724 + 1.0))) + _1729) * _1694;
        float _1739 = _1662 * 0.5;
        float _1740 = _1672 * 0.5;
        float _1741 = _1682 * 0.5;
        float _1742 = dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741));
        float _1747 = (_1742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1742);
        float _1755 = (dot(vec3(_959, _960, _961), vec3(_1747 * _1739, _1747 * _1740, _1747 * _1741)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1764 = sqrt(((_1740 * _1740) + (_1739 * _1739)) + (_1741 * _1741)) / (_1695 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1766 = _1765 * 2.0;
        float _1770 = (1.0 - _1765) / (_1765 + 1.0);
        float _4328 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1780 = ((((1.0 - _1771) * (_1766 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1766 + 1.0))) + _1771) * _1695;
        float _1781 = _1663 * 0.5;
        float _1782 = _1673 * 0.5;
        float _1783 = _1683 * 0.5;
        float _1784 = dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783));
        float _1789 = (_1784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1784);
        float _1797 = (dot(vec3(_959, _960, _961), vec3(_1789 * _1781, _1789 * _1782, _1789 * _1783)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1806 = sqrt(((_1782 * _1782) + (_1781 * _1781)) + (_1783 * _1783)) / (_1696 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1808 = _1807 * 2.0;
        float _1812 = (1.0 - _1807) / (_1807 + 1.0);
        float _4361 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1822 = ((((1.0 - _1813) * (_1808 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1808 + 1.0))) + _1813) * _1696;
        _1830 = _1663;
        _1831 = _1662;
        _1832 = _1661;
        _1833 = _1673;
        _1834 = _1672;
        _1835 = _1671;
        _1836 = _1683;
        _1837 = _1682;
        _1838 = _1681;
        _1839 = _1696;
        _1840 = _1695;
        _1841 = _1694;
        _1842 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)));
        _1843 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)));
        _1844 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)));
    }
    else
    {
        _1830 = _1520;
        _1831 = _1520;
        _1832 = _1520;
        _1833 = _1520;
        _1834 = _1520;
        _1835 = _1520;
        _1836 = _1520;
        _1837 = _1520;
        _1838 = _1520;
        _1839 = _1520;
        _1840 = _1520;
        _1841 = _1520;
        _1842 = 0.0;
        _1843 = 0.0;
        _1844 = 0.0;
    }
    float _1854 = (cbModelParam._m0[1u].x * (_1842 - _1532)) + _1532;
    float _1855 = (cbModelParam._m0[1u].x * (_1843 - _1533)) + _1533;
    float _1856 = (cbModelParam._m0[1u].x * (_1844 - _1534)) + _1534;
    float _1877 = fma(_1856, cbSceneParam._m0[89u].z, fma(_1855, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1880 = fma(_1856, cbSceneParam._m0[90u].z, fma(_1855, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1883 = fma(_1856, cbSceneParam._m0[91u].z, fma(_1855, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1854));
    float _1898 = _1129 * 0.5;
    float _1899 = _1130 * 0.5;
    float _1900 = _1131 * 0.5;
    float _1901 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1832, _1835, _1838, _1841));
    float _1904 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1831, _1834, _1837, _1840));
    float _1907 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1830, _1833, _1836, _1839));
    float _1941;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1914 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1519, _1523, _1526, _1529));
        float _1918 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1521, _1524, _1527, _1530));
        float _1922 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1522, _1525, _1528, _1531));
        float _1929 = dot(vec4(cbModelParam._m0[39u]), vec4(_1898, _1899, _1900, 1.0));
        _1941 = dot(vec3(isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1929) ? 0.0 : (isnan(0.0) ? _1929 : max(0.0, _1929))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1941 = 1.0;
    }
    float _1952;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1943 = dot(vec4(cbModelParam._m0[40u]), vec4(_1898, _1899, _1900, 1.0));
        _1952 = dot(vec3(isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1943) ? 0.0 : (isnan(0.0) ? _1943 : max(0.0, _1943))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1952 = 1.0;
    }
    float _1956 = (_1952 * cbModelParam._m0[1u].x) + (_1941 * (1.0 - cbModelParam._m0[1u].x));
    float _1966 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _962);
    float _1967 = isnan(_1966) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1966 : min(cbModelParam._m0[25u].z, _1966));
    float _2047;
    float _2049;
    float _2051;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2014 = fma(_1190, cbModelParam._m0[13u].z, fma(_1186, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1182)) + cbModelParam._m0[13u].w;
        float _2018 = fma(_1190, cbModelParam._m0[14u].z, fma(_1186, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1182)) + cbModelParam._m0[14u].w;
        float _2022 = fma(_1190, cbModelParam._m0[15u].z, fma(_1186, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1182)) + cbModelParam._m0[15u].w;
        float _2025 = fma(_1131, cbModelParam._m0[13u].z, fma(_1130, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1129));
        float _2028 = fma(_1131, cbModelParam._m0[14u].z, fma(_1130, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1129));
        float _2031 = fma(_1131, cbModelParam._m0[15u].z, fma(_1130, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1129));
        float _2059;
        if (_2025 > 0.0)
        {
            _2059 = abs((1.0 - _2014) / _2025);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2014 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2059 = frontier_phi_17_15_ladder;
        }
        float _2259;
        if (_2028 > 0.0)
        {
            _2259 = abs((1.0 - _2018) / _2028);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2018 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2259 = frontier_phi_26_22_ladder;
        }
        float _2502;
        if (_2031 > 0.0)
        {
            _2502 = abs((1.0 - _2022) / _2031);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2022 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2502 = frontier_phi_38_33_ladder;
        }
        float _2504 = isnan(_2259) ? _2059 : (isnan(_2059) ? _2259 : min(_2059, _2259));
        float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
        float _2509 = (_2505 * _2025) + _2014;
        float _2510 = (_2505 * _2028) + _2018;
        float _2511 = (_2505 * _2031) + _2022;
        float _2512 = _2505 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2512;
        float _2516 = _2512 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 > _2516) || ((_2510 < _2514) || ((_2509 < _2514) || (_2509 > _2516))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2511, cbModelParam._m0[9u].z, fma(_2510, cbModelParam._m0[9u].y, _2509 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2511, cbModelParam._m0[10u].z, fma(_2510, cbModelParam._m0[10u].y, _2509 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2511, cbModelParam._m0[11u].z, fma(_2510, cbModelParam._m0[11u].y, _2509 * cbModelParam._m0[11u].x))), _1967);
            frontier_phi_16_38_ladder = _2635.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2635.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2635.x * cbModelParam._m0[1u].y;
        }
        _2047 = frontier_phi_16_38_ladder_2;
        _2049 = frontier_phi_16_38_ladder_1;
        _2051 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2035 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1129, _1130, _1131), _1967);
        _2047 = _2035.x * cbModelParam._m0[1u].y;
        _2049 = _2035.y * cbModelParam._m0[1u].y;
        _2051 = _2035.z * cbModelParam._m0[1u].y;
    }
    float _2055 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _962);
    float _2056 = isnan(_2055) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2055 : min(cbModelParam._m0[25u].w, _2055));
    float _2145;
    float _2147;
    float _2149;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2109 = fma(_1190, cbModelParam._m0[21u].z, fma(_1186, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1182)) + cbModelParam._m0[21u].w;
        float _2113 = fma(_1190, cbModelParam._m0[22u].z, fma(_1186, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1182)) + cbModelParam._m0[22u].w;
        float _2117 = fma(_1190, cbModelParam._m0[23u].z, fma(_1186, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1182)) + cbModelParam._m0[23u].w;
        float _2120 = fma(_1131, cbModelParam._m0[21u].z, fma(_1130, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1129));
        float _2123 = fma(_1131, cbModelParam._m0[22u].z, fma(_1130, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1129));
        float _2126 = fma(_1131, cbModelParam._m0[23u].z, fma(_1130, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1129));
        float _2264;
        if (_2120 > 0.0)
        {
            _2264 = abs((1.0 - _2109) / _2120);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2109 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2264 = frontier_phi_28_24_ladder;
        }
        float _2529;
        if (_2123 > 0.0)
        {
            _2529 = abs((1.0 - _2113) / _2123);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2123 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2113 + 1.0) / _2123);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2529 = frontier_phi_40_35_ladder;
        }
        float _2734;
        if (_2126 > 0.0)
        {
            _2734 = abs((1.0 - _2117) / _2126);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2117 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2734 = frontier_phi_49_46_ladder;
        }
        float _2736 = isnan(_2529) ? _2264 : (isnan(_2264) ? _2529 : min(_2264, _2529));
        float _2737 = isnan(_2734) ? _2736 : (isnan(_2736) ? _2734 : min(_2736, _2734));
        float _2741 = (_2737 * _2120) + _2109;
        float _2742 = (_2737 * _2123) + _2113;
        float _2743 = (_2737 * _2126) + _2117;
        float _2744 = _2737 * 9.9999997473787516355514526367188e-05;
        float _2745 = (-1.0) - _2744;
        float _2747 = _2744 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2743 > _2747) || ((_2743 < _2745) || ((_2742 > _2747) || ((_2742 < _2745) || ((_2741 < _2745) || (_2741 > _2747))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2743, cbModelParam._m0[17u].z, fma(_2742, cbModelParam._m0[17u].y, _2741 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2743, cbModelParam._m0[18u].z, fma(_2742, cbModelParam._m0[18u].y, _2741 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2743, cbModelParam._m0[19u].z, fma(_2742, cbModelParam._m0[19u].y, _2741 * cbModelParam._m0[19u].x))), _2056);
            frontier_phi_25_49_ladder = _2942.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2942.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2942.x * cbModelParam._m0[1u].z;
        }
        _2145 = frontier_phi_25_49_ladder_2;
        _2147 = frontier_phi_25_49_ladder_1;
        _2149 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2129 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1129, _1130, _1131), _2056);
        _2145 = _2129.x * cbModelParam._m0[1u].z;
        _2147 = _2129.y * cbModelParam._m0[1u].z;
        _2149 = _2129.z * cbModelParam._m0[1u].z;
    }
    float _2161 = ((((1.0 - _1150) * ((_1137 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1150 * _1137)) * _1121;
    float _2162 = _2161 * ((cbModelParam._m0[1u].w * (_2145 - _2047)) + _2047);
    float _2163 = _2161 * ((cbModelParam._m0[1u].w * (_2147 - _2049)) + _2049);
    float _2164 = _2161 * ((cbModelParam._m0[1u].w * (_2149 - _2051)) + _2051);
    float _2167 = fma(_2164, cbSceneParam._m0[89u].z, fma(_2163, cbSceneParam._m0[89u].y, _2162 * cbSceneParam._m0[89u].x));
    float _2170 = fma(_2164, cbSceneParam._m0[90u].z, fma(_2163, cbSceneParam._m0[90u].y, _2162 * cbSceneParam._m0[90u].x));
    float _2173 = fma(_2164, cbSceneParam._m0[91u].z, fma(_2163, cbSceneParam._m0[91u].y, _2162 * cbSceneParam._m0[91u].x));
    uvec4 _2183 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2185 = _2183.x * 14u;
    uint _2186 = _2185 + 13u;
    float _2193 = _1121 + (-1.0);
    float _2198 = (cbLight._m0[_2186].x * _2193) + 1.0;
    float _2199 = (cbLight._m0[_2186].y * _2193) + 1.0;
    float _2200 = (cbLight._m0[_2186].z * _2193) + 1.0;
    float _2201 = (cbLight._m0[_2186].w * _2193) + 1.0;
    uint _2202 = _2185 + 5u;
    float _2208 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
    uint _2212 = _2185 + 4u;
    float _2218 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
    uint _2222 = _2185 | 1u;
    float _2233 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_959, _960, _961));
    float _2236 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_959, _960, _961));
    float _4497 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _4508 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2241 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * 0.3183098733425140380859375;
    float _2243 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * 0.3183098733425140380859375;
    float _2250 = ((cbLight._m0[_2202].x * _2208) * _2243) + ((cbLight._m0[_2212].x * _2218) * _2241);
    float _2251 = ((_2208 * cbLight._m0[_2202].y) * _2243) + ((_2218 * cbLight._m0[_2212].y) * _2241);
    float _2252 = ((_2208 * cbLight._m0[_2202].z) * _2243) + ((_2218 * cbLight._m0[_2212].z) * _2241);
    uvec4 _2256 = floatBitsToUint(cbLight._m0[_2185 + 12u]);
    bool _2258 = _2256.x == 0u;
    float _2269;
    float _2271;
    float _2273;
    if (_2258)
    {
        _2269 = _2250;
        _2271 = _2251;
        _2273 = _2252;
    }
    else
    {
        uint _2277 = _2185 + 6u;
        float _2293 = (dot(vec3(cbLight._m0[_2185 + 2u].xyz), vec3(_959, _960, _961)) * 0.5) + 0.5;
        float _2294 = _2293 * _2293;
        float _4519 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2295 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2296 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2269 = (((cbLight._m0[_2277].x * 0.3183098733425140380859375) * _2295) * _2296) + _2250;
        _2271 = (((cbLight._m0[_2277].y * 0.3183098733425140380859375) * _2295) * _2296) + _2251;
        _2273 = (((cbLight._m0[_2277].z * 0.3183098733425140380859375) * _2295) * _2296) + _2252;
    }
    bool _2276 = _2256.y == 0u;
    float _2314;
    float _2316;
    float _2318;
    if (_2276)
    {
        _2314 = _2269;
        _2316 = _2271;
        _2318 = _2273;
    }
    else
    {
        uint _2473 = _2185 + 7u;
        float _2489 = (dot(vec3(cbLight._m0[_2185 + 3u].xyz), vec3(_959, _960, _961)) * 0.5) + 0.5;
        float _2490 = _2489 * _2489;
        float _4535 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2491 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2492 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2314 = (((cbLight._m0[_2473].x * 0.3183098733425140380859375) * _2491) * _2492) + _2269;
        _2316 = (((cbLight._m0[_2473].y * 0.3183098733425140380859375) * _2491) * _2492) + _2271;
        _2318 = (((cbLight._m0[_2473].z * 0.3183098733425140380859375) * _2491) * _2492) + _2273;
    }
    uint _2321 = _2185 + 8u;
    float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _962) * 0.949999988079071044921875);
    float _2335 = _2334 * _2334;
    float _2336 = cbLight._m0[_2185].x + _1038;
    float _2337 = cbLight._m0[_2185].y + _1039;
    float _2338 = cbLight._m0[_2185].z + _1040;
    float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
    float _2343 = _2342 * _2336;
    float _2344 = _2342 * _2337;
    float _2345 = _2342 * _2338;
    float _2346 = dot(vec3(_959, _960, _961), vec3(cbLight._m0[_2185].xyz));
    float _4551 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _4562 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _2350 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2351 = dot(vec3(_959, _960, _961), vec3(_2343, _2344, _2345));
    float _4573 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2355 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2343, _2344, _2345));
    float _4584 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2359 = _2335 * _2335;
    float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
    float _2374 = (exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2375 = 1.0 - _2335;
    float _2386 = (0.5 / (((_2350 * ((_2349 * _2375) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2375) + _2335) * _2349))) * _2349;
    float _4595 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2388 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
    uint _2399 = _2185 + 9u;
    float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _962) * 0.949999988079071044921875);
    float _2411 = _2410 * _2410;
    float _2412 = cbLight._m0[_2222].x + _1038;
    float _2413 = cbLight._m0[_2222].y + _1039;
    float _2414 = cbLight._m0[_2222].z + _1040;
    float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
    float _2419 = _2418 * _2412;
    float _2420 = _2418 * _2413;
    float _2421 = _2418 * _2414;
    float _2422 = dot(vec3(_959, _960, _961), vec3(cbLight._m0[_2222].xyz));
    float _4606 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2426 = dot(vec3(_959, _960, _961), vec3(_2419, _2420, _2421));
    float _4617 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2430 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2419, _2420, _2421));
    float _4628 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2434 = _2411 * _2411;
    float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
    float _2447 = (exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2448 = 1.0 - _2411;
    float _2458 = (0.5 / (((_2350 * ((_2425 * _2448) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2448) + _2411) * _2425))) * _2425;
    float _4639 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2460 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
    float _2470 = (((_2447 * cbLight._m0[_2399].x) * _2460) * _2208) + (((_2374 * cbLight._m0[_2321].x) * _2388) * _2218);
    float _2471 = (((_2447 * cbLight._m0[_2399].y) * _2460) * _2208) + (((_2374 * cbLight._m0[_2321].y) * _2388) * _2218);
    float _2472 = (((_2447 * cbLight._m0[_2399].z) * _2460) * _2208) + (((_2374 * cbLight._m0[_2321].z) * _2388) * _2218);
    float _2534;
    float _2536;
    float _2538;
    if (_2258)
    {
        _2534 = _2470;
        _2536 = _2471;
        _2538 = _2472;
    }
    else
    {
        uint _2540 = _2185 + 2u;
        uint _2544 = _2185 + 10u;
        float _2558 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2540].w)) * _962) * 0.949999988079071044921875);
        float _2559 = _2558 * _2558;
        float _2560 = cbLight._m0[_2540].x + _1038;
        float _2561 = cbLight._m0[_2540].y + _1039;
        float _2562 = cbLight._m0[_2540].z + _1040;
        float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
        float _2567 = _2566 * _2560;
        float _2568 = _2566 * _2561;
        float _2569 = _2566 * _2562;
        float _2570 = dot(vec3(_959, _960, _961), vec3(cbLight._m0[_2540].xyz));
        float _4650 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2574 = dot(vec3(_959, _960, _961), vec3(_2567, _2568, _2569));
        float _4661 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2577 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2578 = dot(vec3(cbLight._m0[_2540].xyz), vec3(_2567, _2568, _2569));
        float _4672 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2582 = _2559 * _2559;
        float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
        float _2595 = (exp2(log2(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2596 = 1.0 - _2559;
        float _2606 = (0.5 / (((_2350 * ((_2573 * _2596) + _2559)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2596) + _2559) * _2573))) * _2573;
        float _4683 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2608 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
        float _2609 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2534 = (((_2595 * cbLight._m0[_2544].x) * _2608) * _2609) + _2470;
        _2536 = (((_2595 * cbLight._m0[_2544].y) * _2608) * _2609) + _2471;
        _2538 = (((_2595 * cbLight._m0[_2544].z) * _2608) * _2609) + _2472;
    }
    float _2644;
    float _2646;
    float _2648;
    if (_2276)
    {
        _2644 = _2534;
        _2646 = _2536;
        _2648 = _2538;
    }
    else
    {
        uint _2655 = _2185 + 3u;
        uint _2659 = _2185 + 11u;
        float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2655].w)) * _962) * 0.949999988079071044921875);
        float _2674 = _2673 * _2673;
        float _2675 = cbLight._m0[_2655].x + _1038;
        float _2676 = cbLight._m0[_2655].y + _1039;
        float _2677 = cbLight._m0[_2655].z + _1040;
        float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
        float _2682 = _2681 * _2675;
        float _2683 = _2681 * _2676;
        float _2684 = _2681 * _2677;
        float _2685 = dot(vec3(_959, _960, _961), vec3(cbLight._m0[_2655].xyz));
        float _4699 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2689 = dot(vec3(_959, _960, _961), vec3(_2682, _2683, _2684));
        float _4710 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2693 = dot(vec3(cbLight._m0[_2655].xyz), vec3(_2682, _2683, _2684));
        float _4721 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2697 = _2674 * _2674;
        float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
        float _2710 = (exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2711 = 1.0 - _2674;
        float _2721 = (0.5 / (((_2350 * ((_2688 * _2711) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2711) + _2674) * _2688))) * _2688;
        float _4732 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2723 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
        float _2724 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2644 = (((_2710 * cbLight._m0[_2659].x) * _2723) * _2724) + _2534;
        _2646 = (((_2710 * cbLight._m0[_2659].y) * _2723) * _2724) + _2536;
        _2648 = (((_2710 * cbLight._m0[_2659].z) * _2723) * _2724) + _2538;
    }
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_2183.y == 0u)
    {
        float _2799 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2800 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2799;
        float _2801 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2799;
        float _2802 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2799;
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.x;
        uint _2826 = uint((float(_2814.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1059) / _2815))) + floor(float(uint(cbSceneParam._m0[85u].x * _1058) / _2815)));
        float _2836 = (log2(_2802 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2837 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        uint _2840 = uint(isnan(14.0) ? _2837 : (isnan(_2837) ? 14.0 : min(_2837, 14.0)));
        uvec4 _2845 = texelFetch(g_lightClusterGridBuffer, int(((_2840 << 2u) + (_2826 << 6u)) >> 2u));
        uint _2846 = _2845.x;
        uint _2847 = _2814.z;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((((1u << ((_2847 >> 4u) & 15u)) + 4294967295u) & _2846) == 0u) || ((_2847 & 240u) == 0u))
        {
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
        }
        else
        {
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            uint _3105 = 0u;
            uint _3114;
            bool _3115;
            for (;;)
            {
                _3114 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3105 << 2u)) >> 2u)).x;
                _3115 = _3114 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3115)
                {
                    frontier_phi_66_pred = _3099;
                    frontier_phi_66_pred_1 = _3104;
                    frontier_phi_66_pred_2 = _3103;
                    frontier_phi_66_pred_3 = _3102;
                    frontier_phi_66_pred_4 = _3101;
                    frontier_phi_66_pred_5 = _3100;
                }
                else
                {
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    uint _3250;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3114;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    for (;;)
                    {
                        uint _3254 = uint(findLSB(_3250)) + (_3105 << 5u);
                        uint _3251 = (_3250 + 4294967295u) & _3250;
                        uint _3256 = _3254 * 48u;
                        vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 3u)).x));
                        uint _3276 = (_3254 * 48u) + 4u;
                        vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 3u)).x));
                        uint _3295 = (_3254 * 48u) + 8u;
                        vec3 _3306 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x));
                        float _3310 = _3270.x - _2800;
                        float _3311 = _3270.y - _2801;
                        float _3312 = _3270.z - _2802;
                        float _3313 = dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312));
                        float _3316 = inversesqrt(_3313);
                        float _3317 = _3316 * _3310;
                        float _3318 = _3316 * _3311;
                        float _3319 = _3316 * _3312;
                        float _3320 = dot(vec3(_1077, _1080, _1083), vec3(_3317, _3318, _3319));
                        float _3325 = 1.0 - (_3313 * _3270.w);
                        float _4758 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3326 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3327 = sqrt(_3313) * _3289.w;
                        float _3330 = 1.39999997615814208984375 / (_3327 + 1.39999997615814208984375);
                        float _3331 = _3330 * _3330;
                        float _3334 = ((1.0 - _3331) * _3320) + _3331;
                        float _3337 = _3327 * _3327;
                        float _3341 = ((isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0))) * _3326) / ((_3337 * 0.699999988079071044921875) + 1.0);
                        float _3345 = (-0.0) - _2800;
                        float _3346 = (-0.0) - _2801;
                        float _3347 = (-0.0) - _2802;
                        float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                        float _3352 = _3351 * _3345;
                        float _3353 = _3351 * _3346;
                        float _3354 = _3351 * _3347;
                        float _3362 = exp2(log2(1.0 / ((_3337 * 3.5) + 5.0)) * 0.25);
                        float _3363 = 1.0 - _1137;
                        float _3370 = sqrt(1.0 - ((1.0 - (_3363 * _3363)) * (1.0 - (_3362 * _3362))));
                        float _3371 = _3370 * _3370;
                        float _3372 = _3371 * _3371;
                        float _3373 = _3352 + _3317;
                        float _3374 = _3353 + _3318;
                        float _3375 = _3354 + _3319;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3383 = dot(vec3(_1077, _1080, _1083), vec3(_3352, _3353, _3354));
                        float _4774 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3386 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3387 = dot(vec3(_1077, _1080, _1083), vec3(_3379 * _3373, _3379 * _3374, _3379 * _3375));
                        float _4785 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3390 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3394 = ((_3390 * _3390) * (_3372 + (-1.0))) + 1.0;
                        float _3395 = _3330 * _3371;
                        float _3396 = _3395 * _3395;
                        float _3399 = ((1.0 - _3396) * _3320) + _3396;
                        float _4796 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3400 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3401 = 1.0 - _3371;
                        float _3411 = (0.5 / (((_3400 * ((_3386 * _3401) + _3371)) + 9.9999999392252902907785028219223e-09) + (((_3400 * _3401) + _3371) * _3386))) * _3400;
                        float _4807 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3422 = (((_3372 * 3.1415927410125732421875) * (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) / ((_3394 * _3394) * ((_3337 * 2.1991131305694580078125) + 3.141590118408203125))) * _3326;
                        _3174 = (_3341 * _3289.x) + _3247;
                        _3175 = (_3341 * _3289.y) + _3248;
                        _3176 = (_3341 * _3289.z) + _3249;
                        _3171 = (_3422 * _3306.x) + _3244;
                        _3172 = (_3422 * _3306.y) + _3245;
                        _3173 = (_3422 * _3306.z) + _3246;
                        if (_3251 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3251;
                        }
                    }
                    frontier_phi_66_pred = _3171;
                    frontier_phi_66_pred_1 = _3176;
                    frontier_phi_66_pred_2 = _3175;
                    frontier_phi_66_pred_3 = _3174;
                    frontier_phi_66_pred_4 = _3173;
                    frontier_phi_66_pred_5 = _3172;
                }
                _2948 = frontier_phi_66_pred;
                _2958 = frontier_phi_66_pred_1;
                _2956 = frontier_phi_66_pred_2;
                _2954 = frontier_phi_66_pred_3;
                _2952 = frontier_phi_66_pred_4;
                _2950 = frontier_phi_66_pred_5;
                uint _3106 = _3105 + 1u;
                if (_3106 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3099 = _2948;
                    _3100 = _2950;
                    _3101 = _2952;
                    _3102 = _2954;
                    _3103 = _2956;
                    _3104 = _2958;
                    _3105 = _3106;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
        }
        uvec4 _2961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2962 = _2961.z;
        uint _2964 = (_2962 >> 8u) & 15u;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        if (((4294967295u << _2964) & _2846) == 0u)
        {
            _3067 = _2947;
            _3069 = _2949;
            _3071 = _2951;
            _3073 = _2953;
            _3075 = _2955;
            _3077 = _2957;
        }
        else
        {
            float _3092 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
            float _3093 = _3092 * _2800;
            float _3094 = _3092 * _2801;
            float _3095 = _3092 * _2802;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2964 < ((_2962 >> 12u) & 15u))
            {
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3227 = _2947;
                float _3228 = _2949;
                float _3229 = _2951;
                float _3230 = _2953;
                float _3231 = _2955;
                float _3232 = _2957;
                uint _3233 = _2964;
                uint _3242;
                bool _3243;
                for (;;)
                {
                    _3242 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3233 << 2u)) >> 2u)).x;
                    _3243 = _3242 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3243)
                    {
                        frontier_phi_77_pred = _3232;
                        frontier_phi_77_pred_1 = _3231;
                        frontier_phi_77_pred_2 = _3230;
                        frontier_phi_77_pred_3 = _3229;
                        frontier_phi_77_pred_4 = _3228;
                        frontier_phi_77_pred_5 = _3227;
                    }
                    else
                    {
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3449 = _3227;
                        float _3450 = _3228;
                        float _3451 = _3229;
                        float _3452 = _3230;
                        float _3453 = _3231;
                        float _3454 = _3232;
                        uint _3455 = _3242;
                        uint _3456;
                        vec4 _3481;
                        float _3482;
                        vec4 _3497;
                        vec3 _3509;
                        vec4 _3524;
                        vec4 _3539;
                        float _3585;
                        bool _3586;
                        for (;;)
                        {
                            uint _3466 = ((_3233 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3455));
                            _3456 = (_3455 + 4294967295u) & _3455;
                            uint _3468 = _3466 * 40u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            _3482 = _3481.w;
                            uint _3484 = (_3466 * 40u) + 4u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3466 * 40u) + 8u;
                            _3509 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x));
                            uint _3511 = (_3466 * 40u) + 16u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3526 = (_3466 * 40u) + 20u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3466 * 40u) + 24u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3560 = (_3466 * 40u) + 28u;
                            vec4 _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            _3585 = fma(_2802, _3573.z, fma(_2801, _3573.y, _3573.x * _2800)) + _3573.w;
                            _3586 = !((fma(_2802, _3554.z, fma(_2801, _3554.y, _3554.x * _2800)) + _3554.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3586)
                            {
                                float _3613 = _3481.x - _2800;
                                float _3614 = _3481.y - _2801;
                                float _3615 = _3481.z - _2802;
                                float _3616 = dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615));
                                float _3619 = inversesqrt(_3616);
                                float _3620 = _3619 * _3613;
                                float _3621 = _3619 * _3614;
                                float _3622 = _3619 * _3615;
                                float _3626 = 1.0 - (_3616 / (_3482 * _3482));
                                float _4818 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3631 = sqrt(_3616) * _3497.w;
                                float _3633 = 1.39999997615814208984375 / (_3631 + 1.39999997615814208984375);
                                float _3634 = _3633 * _3633;
                                float _3637 = ((1.0 - _3634) * dot(vec3(_3620, _3621, _3622), vec3(_1077, _1080, _1083))) + _3634;
                                float _3640 = _3631 * _3631;
                                float _3644 = (fma(_2802, _3524.z, fma(_2801, _3524.y, _3524.x * _2800)) + _3524.w) / _3585;
                                float _3645 = (fma(_2802, _3539.z, fma(_2801, _3539.y, _3539.x * _2800)) + _3539.w) / _3585;
                                float _3649 = 1.0 - dot(vec2(_3644, _3645), vec2(_3644, _3645));
                                float _4834 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3651 = _3650 * (((isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0))) * _3627) / ((_3640 * 0.699999988079071044921875) + 1.0));
                                float _3663 = exp2(log2(1.0 / ((_3640 * 3.5) + 5.0)) * 0.25);
                                float _3664 = 1.0 - _1137;
                                float _3671 = sqrt(1.0 - ((1.0 - (_3664 * _3664)) * (1.0 - (_3663 * _3663))));
                                float _3672 = _3671 * _3671;
                                float _3673 = _3672 * _3672;
                                float _3674 = _3620 - _3093;
                                float _3675 = _3621 - _3094;
                                float _3676 = _3622 - _3095;
                                float _3680 = inversesqrt(dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676)));
                                float _3684 = dot(vec3(_1077, _1080, _1083), vec3((-0.0) - _3093, (-0.0) - _3094, (-0.0) - _3095));
                                float _4845 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3688 = dot(vec3(_1077, _1080, _1083), vec3(_3680 * _3674, _3680 * _3675, _3680 * _3676));
                                float _4856 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3691 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3695 = ((_3691 * _3691) * (_3673 + (-1.0))) + 1.0;
                                float _3696 = _3633 * _3672;
                                float _3697 = _3696 * _3696;
                                float _3703 = ((1.0 - _3697) * dot(vec3(_1077, _1080, _1083), vec3(_3620, _3621, _3622))) + _3697;
                                float _4867 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3705 = 1.0 - _3672;
                                float _3715 = (0.5 / (((_3704 * ((_3687 * _3705) + _3672)) + 9.9999999392252902907785028219223e-09) + (((_3704 * _3705) + _3672) * _3687))) * _3704;
                                float _4878 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3725 = (_3650 * _3627) * (((_3673 * 3.1415927410125732421875) * (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) / ((_3695 * _3695) * ((_3640 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3651 * _3497.y;
                                frontier_phi_83_pred_1 = _3651 * _3497.x;
                                frontier_phi_83_pred_2 = _3725 * _3509.z;
                                frontier_phi_83_pred_3 = _3725 * _3509.y;
                                frontier_phi_83_pred_4 = _3725 * _3509.x;
                                frontier_phi_83_pred_5 = _3651 * _3497.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3733 = frontier_phi_83_pred;
                            _3732 = frontier_phi_83_pred_1;
                            _3731 = frontier_phi_83_pred_2;
                            _3730 = frontier_phi_83_pred_3;
                            _3729 = frontier_phi_83_pred_4;
                            _3734 = frontier_phi_83_pred_5;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            _3441 = _3734 + _3454;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3438 = _3731 + _3451;
                            if (_3456 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3456;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3441;
                        frontier_phi_77_pred_1 = _3440;
                        frontier_phi_77_pred_2 = _3439;
                        frontier_phi_77_pred_3 = _3438;
                        frontier_phi_77_pred_4 = _3437;
                        frontier_phi_77_pred_5 = _3436;
                    }
                    _3078 = frontier_phi_77_pred;
                    _3076 = frontier_phi_77_pred_1;
                    _3074 = frontier_phi_77_pred_2;
                    _3072 = frontier_phi_77_pred_3;
                    _3070 = frontier_phi_77_pred_4;
                    _3068 = frontier_phi_77_pred_5;
                    uint _3234 = _3233 + 1u;
                    if (_3234 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3227 = _3068;
                        _3228 = _3070;
                        _3229 = _3072;
                        _3230 = _3074;
                        _3231 = _3076;
                        _3232 = _3078;
                        _3233 = _3234;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3072;
                frontier_phi_58_59_ladder_1 = _3078;
                frontier_phi_58_59_ladder_2 = _3076;
                frontier_phi_58_59_ladder_3 = _3074;
                frontier_phi_58_59_ladder_4 = _3070;
                frontier_phi_58_59_ladder_5 = _3068;
            }
            else
            {
                frontier_phi_58_59_ladder = _2951;
                frontier_phi_58_59_ladder_1 = _2957;
                frontier_phi_58_59_ladder_2 = _2955;
                frontier_phi_58_59_ladder_3 = _2953;
                frontier_phi_58_59_ladder_4 = _2949;
                frontier_phi_58_59_ladder_5 = _2947;
            }
            _3067 = frontier_phi_58_59_ladder_5;
            _3069 = frontier_phi_58_59_ladder_4;
            _3071 = frontier_phi_58_59_ladder;
            _3073 = frontier_phi_58_59_ladder_3;
            _3075 = frontier_phi_58_59_ladder_2;
            _3077 = frontier_phi_58_59_ladder_1;
        }
        float _3082 = isnan(1.0) ? _1121 : (isnan(_1121) ? 1.0 : min(_1121, 1.0));
        _2859 = (_3082 * _3073) + _2314;
        _2861 = (_3082 * _3075) + _2316;
        _2863 = (_3082 * _3077) + _2318;
        _2865 = ((_3067 * 0.039999999105930328369140625) * _3082) + _2644;
        _2867 = ((_3069 * 0.039999999105930328369140625) * _3082) + _2646;
        _2869 = ((_3071 * 0.039999999105930328369140625) * _3082) + _2648;
    }
    else
    {
        _2859 = _2314;
        _2861 = _2316;
        _2863 = _2318;
        _2865 = _2644;
        _2867 = _2646;
        _2869 = _2648;
    }
    float _4894 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _4905 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _4916 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2886 = ((isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2859 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1121))) + ((_2865 + ((isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0))) * _1956)) * cbPerFrame._m0[3u].x);
    float _2887 = ((isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2861 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1121))) + ((_2867 + ((isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0))) * _1956)) * cbPerFrame._m0[3u].x);
    float _2888 = ((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2863 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1121))) + ((_2869 + ((isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0))) * _1956)) * cbPerFrame._m0[3u].x);
    uint _2889 = _285 + 6u;
    float _2897 = _1058 / cbSceneParam._m0[86u].x;
    float _2898 = _1059 / cbSceneParam._m0[86u].y;
    vec4 _2912 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, (log2((isnan(cbSceneParam._m0[77u].w) ? _980 : (isnan(_980) ? cbSceneParam._m0[77u].w : min(_980, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2914 = _2912.x;
    float _2915 = _2912.y;
    float _2916 = _2912.z;
    float _2917 = _2912.w;
    float _3009;
    float _3011;
    float _3013;
    float _3015;
    if (_980 > cbSceneParam._m0[78u].w)
    {
        float _2972 = isnan(_980) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _980 : min(cbSceneParam._m0[80u].w, _980));
        float _2973 = _2972 / _980;
        float _2984 = _2973 * _1031;
        float _2985 = _1032 * _2973;
        float _2986 = (-0.0) - _2985;
        float _2987 = _2973 * _1033;
        float _2989 = (cbSceneParam._m0[77u].w * _2986) / _2972;
        float _2990 = _2989 + cbSceneParam._m0[79u].w;
        float _2991 = cbSceneParam._m0[79u].w - _2985;
        float _2997 = sqrt(((_2984 * _2984) + (_2985 * _2985)) + (_2987 * _2987));
        float _3000 = (1.0 - (cbSceneParam._m0[77u].w / _2972)) * _2997;
        float _3005 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3007 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3184;
        if (abs((_2986 - _2989) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3184 = ((((_2990 > 0.0) ? exp2(_3005 * _2990) : (2.0 - exp2(_3007 * _2990))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3000;
        }
        else
        {
            float _3128 = 1.0 / cbSceneParam._m0[80u].x;
            float _3129 = isnan(_2991) ? _2990 : (isnan(_2990) ? _2991 : max(_2990, _2991));
            float _3130 = isnan(_2991) ? _2990 : (isnan(_2990) ? _2991 : min(_2990, _2991));
            float _3139 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : min(_3129, 0.0));
            float _3140 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : min(_3130, 0.0));
            _3184 = ((abs(_2997 / _2986) * cbSceneParam._m0[80u].y) * ((((_3139 - _3140) * 2.0) - ((exp2(_3005 * (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0)))) - exp2(_3005 * (isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))))) * _3128)) - ((exp2(_3007 * _3139) - exp2(_3007 * _3140)) * _3128))) + (_3000 * cbSceneParam._m0[80u].z);
        }
        vec4 _3186 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, 1.0), 0.0);
        float _3195 = exp2((_3184 * (-1.44269502162933349609375)) * (1.0 - _3186.w));
        float _3196 = log2(_3195);
        float _3212 = log2(_2917);
        _3009 = (exp2(_3212 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3196 * cbSceneParam._m0[78u].x)) * _3186.x) / cbSceneParam._m0[78u].x)) + _2914;
        _3011 = (exp2(_3212 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3196 * cbSceneParam._m0[78u].y)) * _3186.y) / cbSceneParam._m0[78u].y)) + _2915;
        _3013 = (exp2(_3212 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3196 * cbSceneParam._m0[78u].z)) * _3186.z) / cbSceneParam._m0[78u].z)) + _2916;
        _3015 = _3195 * _2917;
    }
    else
    {
        _3009 = _2914;
        _3011 = _2915;
        _3013 = _2916;
        _3015 = _2917;
    }
    bool _3222;
    vec4 _3025;
    vec4 _3047;
    float _3049;
    float _3053;
    float _3054;
    float _3055;
    float _3056;
    bool _3066;
    for (;;)
    {
        _3025 = cbMatDynParam._m0[0u];
        float _3027 = roundEven(_3025.y);
        bool _3028 = _3027 == 3.0;
        float _3029 = log2(_3015);
        float _3036 = exp2(_3029 * cbSceneParam._m0[78u].x) * _2886;
        float _3037 = exp2(_3029 * cbSceneParam._m0[78u].y) * _2887;
        float _3038 = exp2(_3029 * cbSceneParam._m0[78u].z) * _2888;
        float _3045 = _1047 + (-0.5);
        _3047 = cbMtdParam._m0[1u];
        _3049 = _3047.y * _3045;
        float _3052 = (_3027 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3053 = _3052 * (_3028 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3009)));
        _3054 = _3052 * (_3028 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3011)));
        _3055 = _3052 * (_3028 ? _3038 : (_3038 + (cbSceneParam._m0[72u].w * _3013)));
        _3056 = _3045 * 0.999000012874603271484375;
        _3066 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3066)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3056) < 0.5)
            {
                _3222 = true;
                break;
            }
        }
        uint _3163 = _1096 + uint(_3025.w);
        if ((cbInstanceData._m0[_3163].w < 1.0) && ((cbInstanceData._m0[_3163].w + _3056) < 0.5))
        {
            _3222 = true;
            break;
        }
        if ((_3049 + 1.0) < _3047.x)
        {
            _3222 = true;
            break;
        }
        _3222 = false;
        break;
    }
    float _3427;
    if (_3222)
    {
        discard_state = true;
        _3427 = 0.0;
    }
    else
    {
        _3427 = cbInstanceData._m0[_2889].w;
    }
    SV_Target.x = _3053;
    SV_Target.y = _3054;
    SV_Target.z = _3055;
    SV_Target.w = _3427;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2889].w;
    discard_exit();
}


