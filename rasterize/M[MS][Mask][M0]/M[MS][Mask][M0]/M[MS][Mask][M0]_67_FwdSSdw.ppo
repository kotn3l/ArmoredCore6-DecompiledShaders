#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1368;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _363.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].z) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3697 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _439 = (_432 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _440 = (_432 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _441 = (_432 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _363.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[24u].z) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3708 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _518 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439);
    float _521 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440);
    float _524 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441);
    vec4 _542 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _561 = _559.x;
    float _562 = _559.y;
    float _563 = _559.z;
    float _570 = ((_542.x - _561) * _432) + _561;
    float _571 = ((_542.y - _562) * _432) + _562;
    float _572 = ((_542.z - _563) * _432) + _563;
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _597 = ((_584.z - _572) * _505) + _572;
    float _600 = ((((_584.x - _570) * _505) + _570) * 2.0) + (-1.0);
    float _602 = ((((_584.y - _571) * _505) + _571) * 2.0) + (-1.0);
    float _603 = dot(vec2(_600, _602), vec2(_600, _602));
    float _3719 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _608 = sqrt(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _649 = _647.x;
    float _650 = 1.0 - _649;
    float _656 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _659 = ((isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : min(_656, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _668 = (_659 - ((((((_649 - _650) * cbMtdParam._m0[24u].w) + _650) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _659))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3740 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _676 = (_669 * (cbMtdParam._m0[17u].x - _518)) + _518;
    float _677 = (_669 * (cbMtdParam._m0[17u].y - _521)) + _521;
    float _678 = (_669 * (cbMtdParam._m0[17u].z - _524)) + _524;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _692 = _690.x;
    float _693 = 1.0 - _692;
    float _720 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_692 - _693) * cbMtdParam._m0[24u].y) + _693) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3751 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _721 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _729 = ((((cbMtdParam._m0[10u].x - _676) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _721) + _676;
    float _730 = ((((cbMtdParam._m0[10u].y - _677) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _721) + _677;
    float _731 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _678)) * _721) + _678;
    float _735 = (cbMtdParam._m0[19u].w * (_622.z - _597)) + _597;
    vec4 _749 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _756 = (_749.x * 2.0) + (-1.0);
    float _757 = (_749.y * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _3762 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _766 = (_669 * (_749.z - _735)) + _735;
    float _769 = ((cbMtdParam._m0[23u].y - _766) * _721) + _766;
    vec4 _788 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _794 = (_788.x * 2.0) + (-1.0);
    float _795 = (_788.y * 2.0) + (-1.0);
    float _796 = dot(vec2(_794, _795), vec2(_794, _795));
    float _3773 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _804 = (((_622.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _600;
    float _805 = (((_622.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _602;
    float _817 = (((_756 - _804) + (cbMtdParam._m0[21u].x * _804)) * _669) + _804;
    float _818 = (((_757 - _805) + (cbMtdParam._m0[21u].x * _805)) * _669) + _805;
    float _819 = (_669 * (sqrt(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) - _608)) + _608;
    float _830 = (((_794 - _817) + (_817 * cbMtdParam._m0[22u].z)) * _721) + _817;
    float _831 = (((_795 - _818) + (_818 * cbMtdParam._m0[22u].z)) * _721) + _818;
    float _832 = ((sqrt(1.0 - (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) - _819) * _721) + _819;
    float _834 = cbMtdParam._m0[22u].x + _622.w;
    float _837 = fma(_832, _242 * NORMAL.x, fma(_831, _249 * TANGENT.x, (_235 * _227) * _830));
    float _840 = fma(_832, _242 * NORMAL.y, fma(_831, _249 * TANGENT.y, (_235 * _228) * _830));
    float _843 = fma(_832, _242 * NORMAL.z, fma(_831, _249 * TANGENT.z, (_235 * _229) * _830));
    float _847 = inversesqrt(dot(vec3(_837, _840, _843), vec3(_837, _840, _843)));
    float _848 = _847 * _837;
    float _849 = _847 * _840;
    float _850 = _847 * _843;
    float _3784 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _851 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _3806 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _3817 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _3828 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _869 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _919 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _909);
    float _920 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _909);
    float _921 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _909);
    float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
    float _926 = _919 * _925;
    float _927 = _920 * _925;
    float _928 = _921 * _925;
    float _934 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _935 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _953 = fma(_850, cbSceneParam._m0[5u].z, fma(_849, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _848));
    float _956 = fma(_850, cbSceneParam._m0[6u].z, fma(_849, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _848));
    float _959 = fma(_850, cbSceneParam._m0[7u].z, fma(_849, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _848));
    uint _973 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _979 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * cbInstanceData._m0[_973].x;
    float _980 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * cbInstanceData._m0[_973].y;
    float _981 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * cbInstanceData._m0[_973].z;
    float _3839 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    vec4 _993 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _934, cbSceneParam._m0[86u].y * _935));
    float _997 = ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * TEXCOORD_5.w) * _993.x;
    float _998 = dot(vec3(_848, _849, _850), vec3(_926, _927, _928));
    float _1001 = _998 * 2.0;
    float _1005 = (_1001 * _848) - _926;
    float _1006 = (_1001 * _849) - _927;
    float _1007 = (_1001 * _850) - _928;
    float _1011 = abs(dot(vec3(_926, _927, _928), vec3(_848, _849, _850)));
    float _3872 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1013 = sqrt(_851);
    float _1026 = exp2((_1013 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1013 * 3.0));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1367;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1092 = fma(_1066, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058));
        float _1096 = fma(_1066, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058));
        float _1100 = fma(_1066, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058));
        float _1125 = _1058 + _848;
        float _1126 = _1062 + _849;
        float _1127 = _1066 + _850;
        float _1137 = fma(_1127, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125)) - _1092;
        float _1138 = fma(_1127, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125)) - _1096;
        float _1139 = fma(_1127, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125)) - _1100;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1092 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1096 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[34u].z) + ((((((_1100 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1195 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1161.x + (-0.5));
        float _1197 = _1195 * (_1161.y + (-0.5));
        float _1198 = _1195 * (_1161.z + (-0.5));
        float _1205 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1168.x + (-0.5));
        float _1207 = _1205 * (_1168.y + (-0.5));
        float _1208 = _1205 * (_1168.z + (-0.5));
        float _1215 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1175.x + (-0.5));
        float _1217 = _1215 * (_1175.y + (-0.5));
        float _1218 = _1215 * (_1175.z + (-0.5));
        float _1225 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1182.x + (-0.5));
        float _1227 = _1225 * (_1182.y + (-0.5));
        float _1228 = _1225 * (_1182.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1249 = (dot(vec3(_848, _849, _850), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1259 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3920 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1261 + 1.0))) + _1266) * _1229;
        float _1276 = _1197 * 0.5;
        float _1277 = _1207 * 0.5;
        float _1278 = _1217 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_848, _849, _850), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3953 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1303 + 1.0))) + _1308) * _1230;
        float _1318 = _1198 * 0.5;
        float _1319 = _1208 * 0.5;
        float _1320 = _1218 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_848, _849, _850), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3986 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1345 + 1.0))) + _1350) * _1231;
        _1367 = _1198;
        _1369 = _1197;
        _1370 = _1196;
        _1371 = _1208;
        _1372 = _1207;
        _1373 = _1206;
        _1374 = _1218;
        _1375 = _1217;
        _1376 = _1216;
        _1377 = _1231;
        _1378 = _1230;
        _1379 = _1229;
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1368;
        _1369 = _1368;
        _1370 = _1368;
        _1371 = _1368;
        _1372 = _1368;
        _1373 = _1368;
        _1374 = _1368;
        _1375 = _1368;
        _1376 = _1368;
        _1377 = _1368;
        _1378 = _1368;
        _1379 = _1368;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1406 = fma(_1066, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1058));
        float _1410 = fma(_1066, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1058));
        float _1414 = fma(_1066, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1058));
        float _1437 = _1058 + _848;
        float _1438 = _1062 + _849;
        float _1439 = _1066 + _850;
        float _1449 = fma(_1439, cbModelParam._m0[30u].z, fma(_1438, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1437)) - _1406;
        float _1450 = fma(_1439, cbModelParam._m0[31u].z, fma(_1438, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1437)) - _1410;
        float _1451 = fma(_1439, cbModelParam._m0[32u].z, fma(_1438, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1437)) - _1414;
        float _1455 = inversesqrt(dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451)));
        float _1468 = ((_1455 * _1449) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1406 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1455 * _1450) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1410 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1455 * _1451) / cbModelParam._m0[35u].z) + ((((((_1414 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        float _1505 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1472.x + (-0.5));
        float _1507 = _1505 * (_1472.y + (-0.5));
        float _1508 = _1505 * (_1472.z + (-0.5));
        float _1515 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1479.x + (-0.5));
        float _1517 = _1515 * (_1479.y + (-0.5));
        float _1518 = _1515 * (_1479.z + (-0.5));
        float _1525 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1486.x + (-0.5));
        float _1527 = _1525 * (_1486.y + (-0.5));
        float _1528 = _1525 * (_1486.z + (-0.5));
        float _1535 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1493.x + (-0.5));
        float _1537 = _1535 * (_1493.y + (-0.5));
        float _1538 = _1535 * (_1493.z + (-0.5));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = _1506 * 0.5;
        float _1543 = _1516 * 0.5;
        float _1544 = _1526 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_848, _849, _850), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4049 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1569 + 1.0))) + _1574) * _1539;
        float _1584 = _1507 * 0.5;
        float _1585 = _1517 * 0.5;
        float _1586 = _1527 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_848, _849, _850), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4082 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1611 + 1.0))) + _1616) * _1540;
        float _1626 = _1508 * 0.5;
        float _1627 = _1518 * 0.5;
        float _1628 = _1528 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_848, _849, _850), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4115 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1653 + 1.0))) + _1658) * _1541;
        _1675 = _1508;
        _1676 = _1507;
        _1677 = _1506;
        _1678 = _1518;
        _1679 = _1517;
        _1680 = _1516;
        _1681 = _1528;
        _1682 = _1527;
        _1683 = _1526;
        _1684 = _1541;
        _1685 = _1540;
        _1686 = _1539;
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
    }
    else
    {
        _1675 = _1368;
        _1676 = _1368;
        _1677 = _1368;
        _1678 = _1368;
        _1679 = _1368;
        _1680 = _1368;
        _1681 = _1368;
        _1682 = _1368;
        _1683 = _1368;
        _1684 = _1368;
        _1685 = _1368;
        _1686 = _1368;
        _1687 = 0.0;
        _1688 = 0.0;
        _1689 = 0.0;
    }
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1380)) + _1380;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1381)) + _1381;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1382)) + _1382;
    float _1722 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1700, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1725 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1700, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1728 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1700, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1699));
    float _1743 = _1005 * 0.5;
    float _1744 = _1006 * 0.5;
    float _1745 = _1007 * 0.5;
    float _1746 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1749 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1752 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1786;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1759 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1367, _1371, _1374, _1377));
        float _1763 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1767 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1774 = dot(vec4(cbModelParam._m0[39u]), vec4(_1743, _1744, _1745, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1797;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1788 = dot(vec4(cbModelParam._m0[40u]), vec4(_1743, _1744, _1745, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1801 = (_1797 * cbModelParam._m0[1u].x) + (_1786 * (1.0 - cbModelParam._m0[1u].x));
    float _1811 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _851);
    float _1812 = isnan(_1811) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1811 : min(cbModelParam._m0[25u].z, _1811));
    float _1893;
    float _1895;
    float _1897;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1860 = fma(_1066, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1058)) + cbModelParam._m0[13u].w;
        float _1864 = fma(_1066, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1058)) + cbModelParam._m0[14u].w;
        float _1868 = fma(_1066, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1058)) + cbModelParam._m0[15u].w;
        float _1871 = fma(_1007, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005));
        float _1874 = fma(_1007, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005));
        float _1877 = fma(_1007, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005));
        float _1905;
        if (_1871 > 0.0)
        {
            _1905 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1905 = frontier_phi_14_12_ladder;
        }
        float _2127;
        if (_1874 > 0.0)
        {
            _2127 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2127 = frontier_phi_23_19_ladder;
        }
        float _2373;
        if (_1877 > 0.0)
        {
            _2373 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2373 = frontier_phi_35_30_ladder;
        }
        float _2375 = isnan(_2127) ? _1905 : (isnan(_1905) ? _2127 : min(_1905, _2127));
        float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
        float _2380 = (_2376 * _1871) + _1860;
        float _2381 = (_2376 * _1874) + _1864;
        float _2382 = (_2376 * _1877) + _1868;
        float _2383 = _2376 * 9.9999997473787516355514526367188e-05;
        float _2385 = (-1.0) - _2383;
        float _2387 = _2383 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2382 > _2387) || ((_2382 < _2385) || ((_2381 > _2387) || ((_2381 < _2385) || ((_2380 < _2385) || (_2380 > _2387))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2382, cbModelParam._m0[9u].z, fma(_2381, cbModelParam._m0[9u].y, _2380 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2382, cbModelParam._m0[10u].z, fma(_2381, cbModelParam._m0[10u].y, _2380 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2382, cbModelParam._m0[11u].z, fma(_2381, cbModelParam._m0[11u].y, _2380 * cbModelParam._m0[11u].x))), _1812);
            frontier_phi_13_35_ladder = _2506.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2506.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2506.x * cbModelParam._m0[1u].y;
        }
        _1893 = frontier_phi_13_35_ladder_2;
        _1895 = frontier_phi_13_35_ladder_1;
        _1897 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1881 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1005, _1006, _1007), _1812);
        _1893 = _1881.x * cbModelParam._m0[1u].y;
        _1895 = _1881.y * cbModelParam._m0[1u].y;
        _1897 = _1881.z * cbModelParam._m0[1u].y;
    }
    float _1901 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _851);
    float _1902 = isnan(_1901) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1901 : min(cbModelParam._m0[25u].w, _1901));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1956 = fma(_1066, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1058)) + cbModelParam._m0[21u].w;
        float _1960 = fma(_1066, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1058)) + cbModelParam._m0[22u].w;
        float _1964 = fma(_1066, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1058)) + cbModelParam._m0[23u].w;
        float _1967 = fma(_1007, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005));
        float _1970 = fma(_1007, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005));
        float _1973 = fma(_1007, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005));
        float _2132;
        if (_1967 > 0.0)
        {
            _2132 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2132 = frontier_phi_25_21_ladder;
        }
        float _2400;
        if (_1970 > 0.0)
        {
            _2400 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2400 = frontier_phi_37_32_ladder;
        }
        float _2605;
        if (_1973 > 0.0)
        {
            _2605 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2605 = frontier_phi_46_43_ladder;
        }
        float _2607 = isnan(_2400) ? _2132 : (isnan(_2132) ? _2400 : min(_2132, _2400));
        float _2608 = isnan(_2605) ? _2607 : (isnan(_2607) ? _2605 : min(_2607, _2605));
        float _2612 = (_2608 * _1967) + _1956;
        float _2613 = (_2608 * _1970) + _1960;
        float _2614 = (_2608 * _1973) + _1964;
        float _2615 = _2608 * 9.9999997473787516355514526367188e-05;
        float _2616 = (-1.0) - _2615;
        float _2618 = _2615 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2614 > _2618) || ((_2614 < _2616) || ((_2613 > _2618) || ((_2613 < _2616) || ((_2612 < _2616) || (_2612 > _2618))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2813 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2614, cbModelParam._m0[17u].z, fma(_2613, cbModelParam._m0[17u].y, _2612 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2614, cbModelParam._m0[18u].z, fma(_2613, cbModelParam._m0[18u].y, _2612 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2614, cbModelParam._m0[19u].z, fma(_2613, cbModelParam._m0[19u].y, _2612 * cbModelParam._m0[19u].x))), _1902);
            frontier_phi_22_46_ladder = _2813.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2813.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2813.x * cbModelParam._m0[1u].z;
        }
        _1992 = frontier_phi_22_46_ladder_2;
        _1994 = frontier_phi_22_46_ladder_1;
        _1996 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1005, _1006, _1007), _1902);
        _1992 = _1976.x * cbModelParam._m0[1u].z;
        _1994 = _1976.y * cbModelParam._m0[1u].z;
        _1996 = _1976.z * cbModelParam._m0[1u].z;
    }
    float _2008 = ((((1.0 - _1026) * ((_1013 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1026 * _1013)) * _997;
    float _2009 = _2008 * ((cbModelParam._m0[1u].w * (_1992 - _1893)) + _1893);
    float _2010 = _2008 * ((cbModelParam._m0[1u].w * (_1994 - _1895)) + _1895);
    float _2011 = _2008 * ((cbModelParam._m0[1u].w * (_1996 - _1897)) + _1897);
    float _2014 = fma(_2011, cbSceneParam._m0[89u].z, fma(_2010, cbSceneParam._m0[89u].y, _2009 * cbSceneParam._m0[89u].x));
    float _2017 = fma(_2011, cbSceneParam._m0[90u].z, fma(_2010, cbSceneParam._m0[90u].y, _2009 * cbSceneParam._m0[90u].x));
    float _2020 = fma(_2011, cbSceneParam._m0[91u].z, fma(_2010, cbSceneParam._m0[91u].y, _2009 * cbSceneParam._m0[91u].x));
    vec4 _2028 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_934, _935));
    float _2030 = _2028.w;
    float _2042 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2030);
    float _2043 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2030);
    float _2044 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2030);
    uvec4 _2048 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2050 = _2048.x * 14u;
    uint _2051 = _2050 + 13u;
    float _2058 = _997 + (-1.0);
    float _2063 = (cbLight._m0[_2051].x * _2058) + 1.0;
    float _2064 = (cbLight._m0[_2051].y * _2058) + 1.0;
    float _2065 = (cbLight._m0[_2051].z * _2058) + 1.0;
    float _2066 = (cbLight._m0[_2051].w * _2058) + 1.0;
    uint _2067 = _2050 + 5u;
    float _2073 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2077 = _2050 + 4u;
    float _2086 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
    uint _2090 = _2050 | 1u;
    float _2101 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_848, _849, _850));
    float _2104 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_848, _849, _850));
    float _4251 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _4262 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2109 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.3183098733425140380859375;
    float _2111 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * 0.3183098733425140380859375;
    float _2118 = ((cbLight._m0[_2067].x * _2073) * _2111) + (((cbLight._m0[_2077].x * _2042) * _2086) * _2109);
    float _2119 = ((_2073 * cbLight._m0[_2067].y) * _2111) + (((cbLight._m0[_2077].y * _2043) * _2086) * _2109);
    float _2120 = ((_2073 * cbLight._m0[_2067].z) * _2111) + (((cbLight._m0[_2077].z * _2044) * _2086) * _2109);
    uvec4 _2124 = floatBitsToUint(cbLight._m0[_2050 + 12u]);
    bool _2126 = _2124.x == 0u;
    float _2137;
    float _2139;
    float _2141;
    if (_2126)
    {
        _2137 = _2118;
        _2139 = _2119;
        _2141 = _2120;
    }
    else
    {
        uint _2145 = _2050 + 6u;
        float _2161 = (dot(vec3(cbLight._m0[_2050 + 2u].xyz), vec3(_848, _849, _850)) * 0.5) + 0.5;
        float _2162 = _2161 * _2161;
        float _4273 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2163 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2164 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2137 = (((cbLight._m0[_2145].x * 0.3183098733425140380859375) * _2163) * _2164) + _2118;
        _2139 = (((cbLight._m0[_2145].y * 0.3183098733425140380859375) * _2163) * _2164) + _2119;
        _2141 = (((cbLight._m0[_2145].z * 0.3183098733425140380859375) * _2163) * _2164) + _2120;
    }
    bool _2144 = _2124.y == 0u;
    float _2182;
    float _2184;
    float _2186;
    if (_2144)
    {
        _2182 = _2137;
        _2184 = _2139;
        _2186 = _2141;
    }
    else
    {
        uint _2344 = _2050 + 7u;
        float _2360 = (dot(vec3(cbLight._m0[_2050 + 3u].xyz), vec3(_848, _849, _850)) * 0.5) + 0.5;
        float _2361 = _2360 * _2360;
        float _4289 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2362 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2363 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2182 = (((cbLight._m0[_2344].x * 0.3183098733425140380859375) * _2362) * _2363) + _2137;
        _2184 = (((cbLight._m0[_2344].y * 0.3183098733425140380859375) * _2362) * _2363) + _2139;
        _2186 = (((cbLight._m0[_2344].z * 0.3183098733425140380859375) * _2362) * _2363) + _2141;
    }
    uint _2189 = _2050 + 8u;
    float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _851) * 0.949999988079071044921875);
    float _2203 = _2202 * _2202;
    float _2204 = cbLight._m0[_2050].x + _926;
    float _2205 = cbLight._m0[_2050].y + _927;
    float _2206 = cbLight._m0[_2050].z + _928;
    float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
    float _2211 = _2210 * _2204;
    float _2212 = _2210 * _2205;
    float _2213 = _2210 * _2206;
    float _2214 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2050].xyz));
    float _4305 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _4316 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2218 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2219 = dot(vec3(_848, _849, _850), vec3(_2211, _2212, _2213));
    float _4327 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2223 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2211, _2212, _2213));
    float _4338 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2227 = _2203 * _2203;
    float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
    float _2242 = (exp2(log2(1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2243 = 1.0 - _2203;
    float _2254 = (0.5 / (((_2218 * ((_2217 * _2243) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2243) + _2203) * _2217))) * _2217;
    float _4349 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2256 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
    uint _2270 = _2050 + 9u;
    float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _851) * 0.949999988079071044921875);
    float _2282 = _2281 * _2281;
    float _2283 = cbLight._m0[_2090].x + _926;
    float _2284 = cbLight._m0[_2090].y + _927;
    float _2285 = cbLight._m0[_2090].z + _928;
    float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
    float _2290 = _2289 * _2283;
    float _2291 = _2289 * _2284;
    float _2292 = _2289 * _2285;
    float _2293 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2090].xyz));
    float _4360 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2297 = dot(vec3(_848, _849, _850), vec3(_2290, _2291, _2292));
    float _4371 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2301 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2290, _2291, _2292));
    float _4382 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2305 = _2282 * _2282;
    float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
    float _2318 = (exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2319 = 1.0 - _2282;
    float _2329 = (0.5 / (((_2218 * ((_2296 * _2319) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2319) + _2282) * _2296))) * _2296;
    float _4393 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2331 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
    float _2341 = (((_2318 * cbLight._m0[_2270].x) * _2331) * _2073) + ((((cbLight._m0[_2189].x * _2042) * _2242) * _2256) * _2086);
    float _2342 = (((_2318 * cbLight._m0[_2270].y) * _2331) * _2073) + ((((cbLight._m0[_2189].y * _2043) * _2242) * _2256) * _2086);
    float _2343 = (((_2318 * cbLight._m0[_2270].z) * _2331) * _2073) + ((((cbLight._m0[_2189].z * _2044) * _2242) * _2256) * _2086);
    float _2405;
    float _2407;
    float _2409;
    if (_2126)
    {
        _2405 = _2341;
        _2407 = _2342;
        _2409 = _2343;
    }
    else
    {
        uint _2411 = _2050 + 2u;
        uint _2415 = _2050 + 10u;
        float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2411].w)) * _851) * 0.949999988079071044921875);
        float _2430 = _2429 * _2429;
        float _2431 = cbLight._m0[_2411].x + _926;
        float _2432 = cbLight._m0[_2411].y + _927;
        float _2433 = cbLight._m0[_2411].z + _928;
        float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
        float _2438 = _2437 * _2431;
        float _2439 = _2437 * _2432;
        float _2440 = _2437 * _2433;
        float _2441 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2411].xyz));
        float _4404 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2445 = dot(vec3(_848, _849, _850), vec3(_2438, _2439, _2440));
        float _4415 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2449 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_2438, _2439, _2440));
        float _4426 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2453 = _2430 * _2430;
        float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
        float _2466 = (exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2467 = 1.0 - _2430;
        float _2477 = (0.5 / (((_2218 * ((_2444 * _2467) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2467) + _2430) * _2444))) * _2444;
        float _4437 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2479 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
        float _2480 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2405 = (((_2466 * cbLight._m0[_2415].x) * _2479) * _2480) + _2341;
        _2407 = (((_2466 * cbLight._m0[_2415].y) * _2479) * _2480) + _2342;
        _2409 = (((_2466 * cbLight._m0[_2415].z) * _2479) * _2480) + _2343;
    }
    float _2515;
    float _2517;
    float _2519;
    if (_2144)
    {
        _2515 = _2405;
        _2517 = _2407;
        _2519 = _2409;
    }
    else
    {
        uint _2526 = _2050 + 3u;
        uint _2530 = _2050 + 11u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _851) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _926;
        float _2547 = cbLight._m0[_2526].y + _927;
        float _2548 = cbLight._m0[_2526].z + _928;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2526].xyz));
        float _4453 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2560 = dot(vec3(_848, _849, _850), vec3(_2553, _2554, _2555));
        float _4464 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4475 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2581 = (exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2582 = 1.0 - _2545;
        float _2592 = (0.5 / (((_2218 * ((_2559 * _2582) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2582) + _2545) * _2559))) * _2559;
        float _4486 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2515 = (((_2581 * cbLight._m0[_2530].x) * _2594) * _2595) + _2405;
        _2517 = (((_2581 * cbLight._m0[_2530].y) * _2594) * _2595) + _2407;
        _2519 = (((_2581 * cbLight._m0[_2530].z) * _2594) * _2595) + _2409;
    }
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    if (_2048.y == 0u)
    {
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2670;
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2670;
        float _2673 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2670;
        uvec4 _2685 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2686 = _2685.x;
        uint _2697 = uint((float(_2685.y) * floor(float(uint(cbSceneParam._m0[85u].y * _935) / _2686))) + floor(float(uint(cbSceneParam._m0[85u].x * _934) / _2686)));
        float _2707 = (log2(_2673 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2708 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        uint _2711 = uint(isnan(14.0) ? _2708 : (isnan(_2708) ? 14.0 : min(_2708, 14.0)));
        uvec4 _2716 = texelFetch(g_lightClusterGridBuffer, int(((_2711 << 2u) + (_2697 << 6u)) >> 2u));
        uint _2717 = _2716.x;
        uint _2718 = _2685.z;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        if (((((1u << ((_2718 >> 4u) & 15u)) + 4294967295u) & _2717) == 0u) || ((_2718 & 240u) == 0u))
        {
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
        }
        else
        {
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            uint _2969 = 0u;
            uint _2978;
            bool _2979;
            for (;;)
            {
                _2978 = texelFetch(g_lightClassification, int((((_2711 << 5u) + (_2697 << 9u)) + (_2969 << 2u)) >> 2u)).x;
                _2979 = _2978 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2979)
                {
                    frontier_phi_61_pred = _2963;
                    frontier_phi_61_pred_1 = _2968;
                    frontier_phi_61_pred_2 = _2967;
                    frontier_phi_61_pred_3 = _2966;
                    frontier_phi_61_pred_4 = _2965;
                    frontier_phi_61_pred_5 = _2964;
                }
                else
                {
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    uint _3093;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2967;
                    _3092 = _2968;
                    _3093 = _2978;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    for (;;)
                    {
                        uint _3097 = uint(findLSB(_3093)) + (_2969 << 5u);
                        uint _3094 = (_3093 + 4294967295u) & _3093;
                        uint _3099 = _3097 * 48u;
                        vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 3u)).x));
                        uint _3119 = (_3097 * 48u) + 4u;
                        vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 3u)).x));
                        uint _3138 = (_3097 * 48u) + 8u;
                        vec3 _3149 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x));
                        float _3153 = _3113.x - _2671;
                        float _3154 = _3113.y - _2672;
                        float _3155 = _3113.z - _2673;
                        float _3156 = dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155));
                        float _3159 = inversesqrt(_3156);
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3163 = dot(vec3(_953, _956, _959), vec3(_3160, _3161, _3162));
                        float _3168 = 1.0 - (_3156 * _3113.w);
                        float _4512 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3169 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3170 = sqrt(_3156) * _3132.w;
                        float _3173 = 1.39999997615814208984375 / (_3170 + 1.39999997615814208984375);
                        float _3174 = _3173 * _3173;
                        float _3177 = ((1.0 - _3174) * _3163) + _3174;
                        float _3180 = _3170 * _3170;
                        float _3184 = ((isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0))) * _3169) / ((_3180 * 0.699999988079071044921875) + 1.0);
                        float _3188 = (-0.0) - _2671;
                        float _3189 = (-0.0) - _2672;
                        float _3190 = (-0.0) - _2673;
                        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                        float _3195 = _3194 * _3188;
                        float _3196 = _3194 * _3189;
                        float _3197 = _3194 * _3190;
                        float _3205 = exp2(log2(1.0 / ((_3180 * 3.5) + 5.0)) * 0.25);
                        float _3206 = 1.0 - _1013;
                        float _3213 = sqrt(1.0 - ((1.0 - (_3206 * _3206)) * (1.0 - (_3205 * _3205))));
                        float _3214 = _3213 * _3213;
                        float _3215 = _3214 * _3214;
                        float _3216 = _3195 + _3160;
                        float _3217 = _3196 + _3161;
                        float _3218 = _3197 + _3162;
                        float _3222 = inversesqrt(dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218)));
                        float _3226 = dot(vec3(_953, _956, _959), vec3(_3195, _3196, _3197));
                        float _4528 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3229 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3230 = dot(vec3(_953, _956, _959), vec3(_3222 * _3216, _3222 * _3217, _3222 * _3218));
                        float _4539 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3233 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3237 = ((_3233 * _3233) * (_3215 + (-1.0))) + 1.0;
                        float _3238 = _3173 * _3214;
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3163) + _3239;
                        float _4550 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3243 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3244 = 1.0 - _3214;
                        float _3254 = (0.5 / (((_3243 * ((_3229 * _3244) + _3214)) + 9.9999999392252902907785028219223e-09) + (((_3243 * _3244) + _3214) * _3229))) * _3243;
                        float _4561 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3265 = (((_3215 * 3.1415927410125732421875) * (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) / ((_3237 * _3237) * ((_3180 * 2.1991131305694580078125) + 3.141590118408203125))) * _3169;
                        _3022 = (_3184 * _3132.x) + _3090;
                        _3023 = (_3184 * _3132.y) + _3091;
                        _3024 = (_3184 * _3132.z) + _3092;
                        _3019 = (_3265 * _3149.x) + _3087;
                        _3020 = (_3265 * _3149.y) + _3088;
                        _3021 = (_3265 * _3149.z) + _3089;
                        if (_3094 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3024;
                            _3093 = _3094;
                        }
                    }
                    frontier_phi_61_pred = _3019;
                    frontier_phi_61_pred_1 = _3024;
                    frontier_phi_61_pred_2 = _3023;
                    frontier_phi_61_pred_3 = _3022;
                    frontier_phi_61_pred_4 = _3021;
                    frontier_phi_61_pred_5 = _3020;
                }
                _2819 = frontier_phi_61_pred;
                _2829 = frontier_phi_61_pred_1;
                _2827 = frontier_phi_61_pred_2;
                _2825 = frontier_phi_61_pred_3;
                _2823 = frontier_phi_61_pred_4;
                _2821 = frontier_phi_61_pred_5;
                uint _2970 = _2969 + 1u;
                if (_2970 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2963 = _2819;
                    _2964 = _2821;
                    _2965 = _2823;
                    _2966 = _2825;
                    _2967 = _2827;
                    _2968 = _2829;
                    _2969 = _2970;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
        }
        uvec4 _2832 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2833 = _2832.z;
        uint _2835 = (_2833 >> 8u) & 15u;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        if (((4294967295u << _2835) & _2717) == 0u)
        {
            _2931 = _2818;
            _2933 = _2820;
            _2935 = _2822;
            _2937 = _2824;
            _2939 = _2826;
            _2941 = _2828;
        }
        else
        {
            float _2956 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
            float _2957 = _2956 * _2671;
            float _2958 = _2956 * _2672;
            float _2959 = _2956 * _2673;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2835 < ((_2833 >> 12u) & 15u))
            {
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _2942;
                float _3070 = _2818;
                float _3071 = _2820;
                float _3072 = _2822;
                float _3073 = _2824;
                float _3074 = _2826;
                float _3075 = _2828;
                uint _3076 = _2835;
                uint _3085;
                bool _3086;
                for (;;)
                {
                    _3085 = texelFetch(g_lightClassification, int((((_2711 << 5u) + (_2697 << 9u)) + (_3076 << 2u)) >> 2u)).x;
                    _3086 = _3085 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3086)
                    {
                        frontier_phi_67_pred = _3073;
                        frontier_phi_67_pred_1 = _3074;
                        frontier_phi_67_pred_2 = _3075;
                        frontier_phi_67_pred_3 = _3072;
                        frontier_phi_67_pred_4 = _3071;
                        frontier_phi_67_pred_5 = _3070;
                    }
                    else
                    {
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3283 = _3070;
                        float _3284 = _3071;
                        float _3285 = _3072;
                        float _3286 = _3073;
                        float _3287 = _3074;
                        float _3288 = _3075;
                        uint _3289 = _3085;
                        uint _3290;
                        vec4 _3315;
                        float _3316;
                        vec4 _3331;
                        vec3 _3343;
                        vec4 _3358;
                        vec4 _3373;
                        float _3419;
                        bool _3420;
                        for (;;)
                        {
                            uint _3300 = ((_3076 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3289));
                            _3290 = (_3289 + 4294967295u) & _3289;
                            uint _3302 = _3300 * 40u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            _3316 = _3315.w;
                            uint _3318 = (_3300 * 40u) + 4u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3333 = (_3300 * 40u) + 8u;
                            _3343 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x));
                            uint _3345 = (_3300 * 40u) + 16u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3360 = (_3300 * 40u) + 20u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            uint _3375 = (_3300 * 40u) + 24u;
                            vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3394 = (_3300 * 40u) + 28u;
                            vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            _3419 = fma(_2673, _3407.z, fma(_2672, _3407.y, _3407.x * _2671)) + _3407.w;
                            _3420 = !((fma(_2673, _3388.z, fma(_2672, _3388.y, _3388.x * _2671)) + _3388.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3420)
                            {
                                float _3447 = _3315.x - _2671;
                                float _3448 = _3315.y - _2672;
                                float _3449 = _3315.z - _2673;
                                float _3450 = dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449));
                                float _3453 = inversesqrt(_3450);
                                float _3454 = _3453 * _3447;
                                float _3455 = _3453 * _3448;
                                float _3456 = _3453 * _3449;
                                float _3460 = 1.0 - (_3450 / (_3316 * _3316));
                                float _4572 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3465 = sqrt(_3450) * _3331.w;
                                float _3467 = 1.39999997615814208984375 / (_3465 + 1.39999997615814208984375);
                                float _3468 = _3467 * _3467;
                                float _3471 = ((1.0 - _3468) * dot(vec3(_3454, _3455, _3456), vec3(_953, _956, _959))) + _3468;
                                float _3474 = _3465 * _3465;
                                float _3478 = (fma(_2673, _3358.z, fma(_2672, _3358.y, _3358.x * _2671)) + _3358.w) / _3419;
                                float _3479 = (fma(_2673, _3373.z, fma(_2672, _3373.y, _3373.x * _2671)) + _3373.w) / _3419;
                                float _3483 = 1.0 - dot(vec2(_3478, _3479), vec2(_3478, _3479));
                                float _4588 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3485 = _3484 * (((isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0))) * _3461) / ((_3474 * 0.699999988079071044921875) + 1.0));
                                float _3497 = exp2(log2(1.0 / ((_3474 * 3.5) + 5.0)) * 0.25);
                                float _3498 = 1.0 - _1013;
                                float _3505 = sqrt(1.0 - ((1.0 - (_3498 * _3498)) * (1.0 - (_3497 * _3497))));
                                float _3506 = _3505 * _3505;
                                float _3507 = _3506 * _3506;
                                float _3508 = _3454 - _2957;
                                float _3509 = _3455 - _2958;
                                float _3510 = _3456 - _2959;
                                float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                                float _3518 = dot(vec3(_953, _956, _959), vec3((-0.0) - _2957, (-0.0) - _2958, (-0.0) - _2959));
                                float _4599 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3521 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3522 = dot(vec3(_953, _956, _959), vec3(_3514 * _3508, _3514 * _3509, _3514 * _3510));
                                float _4610 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3525 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3529 = ((_3525 * _3525) * (_3507 + (-1.0))) + 1.0;
                                float _3530 = _3467 * _3506;
                                float _3531 = _3530 * _3530;
                                float _3537 = ((1.0 - _3531) * dot(vec3(_953, _956, _959), vec3(_3454, _3455, _3456))) + _3531;
                                float _4621 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3539 = 1.0 - _3506;
                                float _3549 = (0.5 / (((_3538 * ((_3521 * _3539) + _3506)) + 9.9999999392252902907785028219223e-09) + (((_3538 * _3539) + _3506) * _3521))) * _3538;
                                float _4632 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3559 = (_3484 * _3461) * (((_3507 * 3.1415927410125732421875) * (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) / ((_3529 * _3529) * ((_3474 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3559 * _3343.x;
                                frontier_phi_73_pred_1 = _3559 * _3343.y;
                                frontier_phi_73_pred_2 = _3485 * _3331.z;
                                frontier_phi_73_pred_3 = _3485 * _3331.y;
                                frontier_phi_73_pred_4 = _3485 * _3331.x;
                                frontier_phi_73_pred_5 = _3559 * _3343.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3563 = frontier_phi_73_pred;
                            _3564 = frontier_phi_73_pred_1;
                            _3568 = frontier_phi_73_pred_2;
                            _3567 = frontier_phi_73_pred_3;
                            _3566 = frontier_phi_73_pred_4;
                            _3565 = frontier_phi_73_pred_5;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            _3275 = _3568 + _3288;
                            _3270 = _3563 + _3283;
                            _3271 = _3564 + _3284;
                            _3272 = _3565 + _3285;
                            if (_3290 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3290;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3273;
                        frontier_phi_67_pred_1 = _3274;
                        frontier_phi_67_pred_2 = _3275;
                        frontier_phi_67_pred_3 = _3272;
                        frontier_phi_67_pred_4 = _3271;
                        frontier_phi_67_pred_5 = _3270;
                    }
                    _2938 = frontier_phi_67_pred;
                    _2940 = frontier_phi_67_pred_1;
                    _2942 = frontier_phi_67_pred_2;
                    _2936 = frontier_phi_67_pred_3;
                    _2934 = frontier_phi_67_pred_4;
                    _2932 = frontier_phi_67_pred_5;
                    uint _3077 = _3076 + 1u;
                    if (_3077 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3070 = _2932;
                        _3071 = _2934;
                        _3072 = _2936;
                        _3073 = _2938;
                        _3074 = _2940;
                        _3075 = _2942;
                        _3076 = _3077;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2940;
                frontier_phi_55_56_ladder_1 = _2942;
                frontier_phi_55_56_ladder_2 = _2938;
                frontier_phi_55_56_ladder_3 = _2936;
                frontier_phi_55_56_ladder_4 = _2934;
                frontier_phi_55_56_ladder_5 = _2932;
            }
            else
            {
                frontier_phi_55_56_ladder = _2826;
                frontier_phi_55_56_ladder_1 = _2828;
                frontier_phi_55_56_ladder_2 = _2824;
                frontier_phi_55_56_ladder_3 = _2822;
                frontier_phi_55_56_ladder_4 = _2820;
                frontier_phi_55_56_ladder_5 = _2818;
            }
            _2931 = frontier_phi_55_56_ladder_5;
            _2933 = frontier_phi_55_56_ladder_4;
            _2935 = frontier_phi_55_56_ladder_3;
            _2937 = frontier_phi_55_56_ladder_2;
            _2939 = frontier_phi_55_56_ladder;
            _2941 = frontier_phi_55_56_ladder_1;
        }
        float _2946 = isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0));
        _2730 = (_2946 * _2937) + _2182;
        _2732 = (_2946 * _2939) + _2184;
        _2734 = (_2946 * _2941) + _2186;
        _2736 = ((_2931 * 0.039999999105930328369140625) * _2946) + _2515;
        _2738 = ((_2933 * 0.039999999105930328369140625) * _2946) + _2517;
        _2740 = ((_2935 * 0.039999999105930328369140625) * _2946) + _2519;
    }
    else
    {
        _2730 = _2182;
        _2732 = _2184;
        _2734 = _2186;
        _2736 = _2515;
        _2738 = _2517;
        _2740 = _2519;
    }
    float _4648 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4659 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4670 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    uint _2760 = _255 + 6u;
    float _2768 = _934 / cbSceneParam._m0[86u].x;
    float _2769 = _935 / cbSceneParam._m0[86u].y;
    vec4 _2783 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2768, _2769, (log2((isnan(cbSceneParam._m0[77u].w) ? _869 : (isnan(_869) ? cbSceneParam._m0[77u].w : min(_869, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2785 = _2783.x;
    float _2786 = _2783.y;
    float _2787 = _2783.z;
    float _2788 = _2783.w;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    if (_869 > cbSceneParam._m0[78u].w)
    {
        float _2843 = isnan(_869) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _869 : min(cbSceneParam._m0[80u].w, _869));
        float _2844 = _2843 / _869;
        float _2855 = _2844 * _919;
        float _2856 = _920 * _2844;
        float _2857 = (-0.0) - _2856;
        float _2859 = _2844 * _921;
        float _2861 = (cbSceneParam._m0[77u].w * _2857) / _2843;
        float _2862 = _2861 + cbSceneParam._m0[79u].w;
        float _2863 = cbSceneParam._m0[79u].w - _2856;
        float _2869 = sqrt(((_2855 * _2855) + (_2856 * _2856)) + (_2859 * _2859));
        float _2872 = (1.0 - (cbSceneParam._m0[77u].w / _2843)) * _2869;
        float _2877 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2879 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3032;
        if (abs((_2857 - _2861) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3032 = ((((_2862 > 0.0) ? exp2(_2877 * _2862) : (2.0 - exp2(_2879 * _2862))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2872;
        }
        else
        {
            float _2992 = 1.0 / cbSceneParam._m0[80u].x;
            float _2993 = isnan(_2863) ? _2862 : (isnan(_2862) ? _2863 : max(_2862, _2863));
            float _2994 = isnan(_2863) ? _2862 : (isnan(_2862) ? _2863 : min(_2862, _2863));
            float _3003 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : min(_2993, 0.0));
            float _3004 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : min(_2994, 0.0));
            _3032 = ((abs(_2869 / _2857) * cbSceneParam._m0[80u].y) * ((((_3003 - _3004) * 2.0) - ((exp2(_2877 * (isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0)))) - exp2(_2877 * (isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))))) * _2992)) - ((exp2(_2879 * _3003) - exp2(_2879 * _3004)) * _2992))) + (_2872 * cbSceneParam._m0[80u].z);
        }
        vec4 _3034 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2768, _2769, 1.0), 0.0);
        float _3043 = exp2((_3032 * (-1.44269502162933349609375)) * (1.0 - _3034.w));
        float _3044 = log2(_3043);
        float _3060 = log2(_2788);
        _2881 = (exp2(_3060 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].x)) * _3034.x) / cbSceneParam._m0[78u].x)) + _2785;
        _2883 = (exp2(_3060 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].y)) * _3034.y) / cbSceneParam._m0[78u].y)) + _2786;
        _2885 = (exp2(_3060 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].z)) * _3034.z) / cbSceneParam._m0[78u].z)) + _2787;
        _2887 = _3043 * _2788;
    }
    else
    {
        _2881 = _2785;
        _2883 = _2786;
        _2885 = _2787;
        _2887 = _2788;
    }
    float _2899 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2900 = _2899 == 3.0;
    float _2901 = log2(_2887);
    float _2908 = exp2(_2901 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2730 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _997))) + ((_2736 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1801)) * cbPerFrame._m0[3u].x));
    float _2909 = exp2(_2901 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2732 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _997))) + ((_2738 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1801)) * cbPerFrame._m0[3u].x));
    float _2910 = exp2(_2901 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2734 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _997))) + ((_2740 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1801)) * cbPerFrame._m0[3u].x));
    float _2919 = (_2899 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2919 * (_2900 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2881)));
    SV_Target.y = _2919 * (_2900 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2883)));
    SV_Target.z = _2919 * (_2900 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2885)));
    SV_Target.w = cbInstanceData._m0[_2760].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2760].w;
}


