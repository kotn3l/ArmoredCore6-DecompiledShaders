#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1113;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].z) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3444 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _393 = (_386 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _394 = (_386 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _395 = (_386 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _434 = _430.z;
    float _443 = ((_413.z - _434) * _386) + _434;
    float _446 = ((((_413.x - _432) * _386) + _432) * 2.0) + (-1.0);
    float _448 = ((((_413.y - _433) * _386) + _433) * 2.0) + (-1.0);
    float _449 = dot(vec2(_446, _448), vec2(_446, _448));
    float _3455 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _454 = sqrt(1.0 - (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _495 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _497 = _495.x;
    float _498 = 1.0 - _497;
    float _511 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_497 - _498) * cbMtdParam._m0[24u].w) + _498) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3466 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _519 = (_512 * (cbMtdParam._m0[17u].x - _393)) + _393;
    float _520 = (_512 * (cbMtdParam._m0[17u].y - _394)) + _394;
    float _521 = (_512 * (cbMtdParam._m0[17u].z - _395)) + _395;
    float _525 = (cbMtdParam._m0[19u].w * (_470.z - _443)) + _443;
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _545 = (_538.x * 2.0) + (-1.0);
    float _546 = (_538.y * 2.0) + (-1.0);
    float _547 = dot(vec2(_545, _546), vec2(_545, _546));
    float _3477 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _555 = (_512 * (_538.z - _525)) + _525;
    float _558 = (((_470.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _446;
    float _559 = (((_470.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _448;
    float _571 = (((_545 - _558) + (cbMtdParam._m0[21u].x * _558)) * _512) + _558;
    float _572 = (((_546 - _559) + (cbMtdParam._m0[21u].x * _559)) * _512) + _559;
    float _573 = (_512 * (sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) - _454)) + _454;
    float _577 = cbMtdParam._m0[22u].x + _470.w;
    float _580 = fma(_573, _219 * NORMAL.x, fma(_572, _226 * TANGENT.x, (_212 * _204) * _571));
    float _583 = fma(_573, _219 * NORMAL.y, fma(_572, _226 * TANGENT.y, (_212 * _205) * _571));
    float _586 = fma(_573, _219 * NORMAL.z, fma(_572, _226 * TANGENT.z, (_212 * _206) * _571));
    float _590 = inversesqrt(dot(vec3(_580, _583, _586), vec3(_580, _583, _586)));
    float _591 = _590 * _580;
    float _592 = _590 * _583;
    float _593 = _590 * _586;
    float _3488 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _594 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3510 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3521 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3532 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _612 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _664 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _654);
    float _665 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _654);
    float _666 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _654);
    float _670 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
    float _671 = _664 * _670;
    float _672 = _665 * _670;
    float _673 = _666 * _670;
    float _679 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _680 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _698 = fma(_593, cbSceneParam._m0[5u].z, fma(_592, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _591));
    float _701 = fma(_593, cbSceneParam._m0[6u].z, fma(_592, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _591));
    float _704 = fma(_593, cbSceneParam._m0[7u].z, fma(_592, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _591));
    uint _718 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _724 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_718].x;
    float _725 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_718].y;
    float _726 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_718].z;
    float _3543 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    vec4 _738 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _679, cbSceneParam._m0[86u].y * _680));
    float _742 = ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * TEXCOORD_5.w) * _738.x;
    float _743 = dot(vec3(_591, _592, _593), vec3(_671, _672, _673));
    float _746 = _743 * 2.0;
    float _750 = (_746 * _591) - _671;
    float _751 = (_746 * _592) - _672;
    float _752 = (_746 * _593) - _673;
    float _756 = abs(dot(vec3(_671, _672, _673), vec3(_591, _592, _593)));
    float _3576 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _758 = sqrt(_594);
    float _771 = exp2((_758 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_758 * 3.0));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1112;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _837 = fma(_811, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803));
        float _841 = fma(_811, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803));
        float _845 = fma(_811, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803));
        float _870 = _803 + _591;
        float _871 = _807 + _592;
        float _872 = _811 + _593;
        float _882 = fma(_872, cbModelParam._m0[26u].z, fma(_871, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _870)) - _837;
        float _883 = fma(_872, cbModelParam._m0[27u].z, fma(_871, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _870)) - _841;
        float _884 = fma(_872, cbModelParam._m0[28u].z, fma(_871, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _870)) - _845;
        float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
        float _901 = ((_888 * _882) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_837 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_888 * _883) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_841 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_888 * _884) / cbModelParam._m0[34u].z) + ((((((_845 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _940 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_906.x + (-0.5));
        float _942 = _940 * (_906.y + (-0.5));
        float _943 = _940 * (_906.z + (-0.5));
        float _950 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_913.x + (-0.5));
        float _952 = _950 * (_913.y + (-0.5));
        float _953 = _950 * (_913.z + (-0.5));
        float _960 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_920.x + (-0.5));
        float _962 = _960 * (_920.y + (-0.5));
        float _963 = _960 * (_920.z + (-0.5));
        float _970 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_927.x + (-0.5));
        float _972 = _970 * (_927.y + (-0.5));
        float _973 = _970 * (_927.z + (-0.5));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = _941 * 0.5;
        float _978 = _951 * 0.5;
        float _979 = _961 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _994 = (dot(vec3(_591, _592, _593), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1004 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3624 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1006 + 1.0))) + _1011) * _974;
        float _1021 = _942 * 0.5;
        float _1022 = _952 * 0.5;
        float _1023 = _962 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_591, _592, _593), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3657 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1048 + 1.0))) + _1053) * _975;
        float _1063 = _943 * 0.5;
        float _1064 = _953 * 0.5;
        float _1065 = _963 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_591, _592, _593), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3690 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1090 + 1.0))) + _1095) * _976;
        _1112 = _943;
        _1114 = _942;
        _1115 = _941;
        _1116 = _953;
        _1117 = _952;
        _1118 = _951;
        _1119 = _963;
        _1120 = _962;
        _1121 = _961;
        _1122 = _976;
        _1123 = _975;
        _1124 = _974;
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
    }
    else
    {
        _1112 = _1113;
        _1114 = _1113;
        _1115 = _1113;
        _1116 = _1113;
        _1117 = _1113;
        _1118 = _1113;
        _1119 = _1113;
        _1120 = _1113;
        _1121 = _1113;
        _1122 = _1113;
        _1123 = _1113;
        _1124 = _1113;
        _1125 = 0.0;
        _1126 = 0.0;
        _1127 = 0.0;
    }
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1152 = fma(_811, cbModelParam._m0[30u].z, fma(_807, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _803));
        float _1156 = fma(_811, cbModelParam._m0[31u].z, fma(_807, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _803));
        float _1160 = fma(_811, cbModelParam._m0[32u].z, fma(_807, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _803));
        float _1183 = _803 + _591;
        float _1184 = _807 + _592;
        float _1185 = _811 + _593;
        float _1195 = fma(_1185, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1183)) - _1152;
        float _1196 = fma(_1185, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1183)) - _1156;
        float _1197 = fma(_1185, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1183)) - _1160;
        float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
        float _1214 = ((_1201 * _1195) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1152 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1201 * _1196) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1156 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1201 * _1197) / cbModelParam._m0[35u].z) + ((((((_1160 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1251 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1218.x + (-0.5));
        float _1253 = _1251 * (_1218.y + (-0.5));
        float _1254 = _1251 * (_1218.z + (-0.5));
        float _1261 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1225.x + (-0.5));
        float _1263 = _1261 * (_1225.y + (-0.5));
        float _1264 = _1261 * (_1225.z + (-0.5));
        float _1271 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1232.x + (-0.5));
        float _1273 = _1271 * (_1232.y + (-0.5));
        float _1274 = _1271 * (_1232.z + (-0.5));
        float _1281 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1239.x + (-0.5));
        float _1283 = _1281 * (_1239.y + (-0.5));
        float _1284 = _1281 * (_1239.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_591, _592, _593), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3753 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1315 + 1.0))) + _1320) * _1285;
        float _1330 = _1253 * 0.5;
        float _1331 = _1263 * 0.5;
        float _1332 = _1273 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_591, _592, _593), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3786 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1357 + 1.0))) + _1362) * _1286;
        float _1372 = _1254 * 0.5;
        float _1373 = _1264 * 0.5;
        float _1374 = _1274 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_591, _592, _593), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3819 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1399 + 1.0))) + _1404) * _1287;
        _1421 = _1254;
        _1422 = _1253;
        _1423 = _1252;
        _1424 = _1264;
        _1425 = _1263;
        _1426 = _1262;
        _1427 = _1274;
        _1428 = _1273;
        _1429 = _1272;
        _1430 = _1287;
        _1431 = _1286;
        _1432 = _1285;
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1113;
        _1422 = _1113;
        _1423 = _1113;
        _1424 = _1113;
        _1425 = _1113;
        _1426 = _1113;
        _1427 = _1113;
        _1428 = _1113;
        _1429 = _1113;
        _1430 = _1113;
        _1431 = _1113;
        _1432 = _1113;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1125)) + _1125;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1126)) + _1126;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1127)) + _1127;
    float _1468 = fma(_1447, cbSceneParam._m0[89u].z, fma(_1446, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1471 = fma(_1447, cbSceneParam._m0[90u].z, fma(_1446, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1474 = fma(_1447, cbSceneParam._m0[91u].z, fma(_1446, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1445));
    float _1489 = _750 * 0.5;
    float _1490 = _751 * 0.5;
    float _1491 = _752 * 0.5;
    float _1492 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1495 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1498 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1532;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1505 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1112, _1116, _1119, _1122));
        float _1509 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1513 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1520 = dot(vec4(cbModelParam._m0[39u]), vec4(_1489, _1490, _1491, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1543;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1534 = dot(vec4(cbModelParam._m0[40u]), vec4(_1489, _1490, _1491, 1.0));
        _1543 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1543 = 1.0;
    }
    float _1547 = (_1543 * cbModelParam._m0[1u].x) + (_1532 * (1.0 - cbModelParam._m0[1u].x));
    float _1557 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _594);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1557 : min(cbModelParam._m0[25u].z, _1557));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1606 = fma(_811, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803)) + cbModelParam._m0[13u].w;
        float _1610 = fma(_811, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803)) + cbModelParam._m0[14u].w;
        float _1614 = fma(_811, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803)) + cbModelParam._m0[15u].w;
        float _1617 = fma(_752, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750));
        float _1620 = fma(_752, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750));
        float _1623 = fma(_752, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750));
        float _1651;
        if (_1617 > 0.0)
        {
            _1651 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1651 = frontier_phi_14_12_ladder;
        }
        float _1873;
        if (_1620 > 0.0)
        {
            _1873 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1873 = frontier_phi_23_19_ladder;
        }
        float _2119;
        if (_1623 > 0.0)
        {
            _2119 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2119 = frontier_phi_35_30_ladder;
        }
        float _2121 = isnan(_1873) ? _1651 : (isnan(_1651) ? _1873 : min(_1651, _1873));
        float _2122 = isnan(_2119) ? _2121 : (isnan(_2121) ? _2119 : min(_2121, _2119));
        float _2126 = (_2122 * _1617) + _1606;
        float _2127 = (_2122 * _1620) + _1610;
        float _2128 = (_2122 * _1623) + _1614;
        float _2129 = _2122 * 9.9999997473787516355514526367188e-05;
        float _2131 = (-1.0) - _2129;
        float _2133 = _2129 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2128 > _2133) || ((_2128 < _2131) || ((_2127 > _2133) || ((_2127 < _2131) || ((_2126 < _2131) || (_2126 > _2133))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2252 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2128, cbModelParam._m0[9u].z, fma(_2127, cbModelParam._m0[9u].y, _2126 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2128, cbModelParam._m0[10u].z, fma(_2127, cbModelParam._m0[10u].y, _2126 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2128, cbModelParam._m0[11u].z, fma(_2127, cbModelParam._m0[11u].y, _2126 * cbModelParam._m0[11u].x))), _1558);
            frontier_phi_13_35_ladder = _2252.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2252.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2252.x * cbModelParam._m0[1u].y;
        }
        _1639 = frontier_phi_13_35_ladder_2;
        _1641 = frontier_phi_13_35_ladder_1;
        _1643 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_750, _751, _752), _1558);
        _1639 = _1627.x * cbModelParam._m0[1u].y;
        _1641 = _1627.y * cbModelParam._m0[1u].y;
        _1643 = _1627.z * cbModelParam._m0[1u].y;
    }
    float _1647 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _594);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1647 : min(cbModelParam._m0[25u].w, _1647));
    float _1738;
    float _1740;
    float _1742;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1702 = fma(_811, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803)) + cbModelParam._m0[21u].w;
        float _1706 = fma(_811, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803)) + cbModelParam._m0[22u].w;
        float _1710 = fma(_811, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803)) + cbModelParam._m0[23u].w;
        float _1713 = fma(_752, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750));
        float _1716 = fma(_752, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750));
        float _1719 = fma(_752, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750));
        float _1878;
        if (_1713 > 0.0)
        {
            _1878 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1878 = frontier_phi_25_21_ladder;
        }
        float _2146;
        if (_1716 > 0.0)
        {
            _2146 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2146 = frontier_phi_37_32_ladder;
        }
        float _2351;
        if (_1719 > 0.0)
        {
            _2351 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2351 = frontier_phi_46_43_ladder;
        }
        float _2353 = isnan(_2146) ? _1878 : (isnan(_1878) ? _2146 : min(_1878, _2146));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1713) + _1702;
        float _2359 = (_2354 * _1716) + _1706;
        float _2360 = (_2354 * _1719) + _1710;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2362 = (-1.0) - _2361;
        float _2364 = _2361 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2360 > _2364) || ((_2360 < _2362) || ((_2359 > _2364) || ((_2359 < _2362) || ((_2358 < _2362) || (_2358 > _2364))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2559 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2360, cbModelParam._m0[17u].z, fma(_2359, cbModelParam._m0[17u].y, _2358 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2360, cbModelParam._m0[18u].z, fma(_2359, cbModelParam._m0[18u].y, _2358 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2360, cbModelParam._m0[19u].z, fma(_2359, cbModelParam._m0[19u].y, _2358 * cbModelParam._m0[19u].x))), _1648);
            frontier_phi_22_46_ladder = _2559.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2559.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2559.x * cbModelParam._m0[1u].z;
        }
        _1738 = frontier_phi_22_46_ladder_2;
        _1740 = frontier_phi_22_46_ladder_1;
        _1742 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_750, _751, _752), _1648);
        _1738 = _1722.x * cbModelParam._m0[1u].z;
        _1740 = _1722.y * cbModelParam._m0[1u].z;
        _1742 = _1722.z * cbModelParam._m0[1u].z;
    }
    float _1754 = ((((1.0 - _771) * ((_758 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_771 * _758)) * _742;
    float _1755 = _1754 * ((cbModelParam._m0[1u].w * (_1738 - _1639)) + _1639);
    float _1756 = _1754 * ((cbModelParam._m0[1u].w * (_1740 - _1641)) + _1641);
    float _1757 = _1754 * ((cbModelParam._m0[1u].w * (_1742 - _1643)) + _1643);
    float _1760 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, _1755 * cbSceneParam._m0[91u].x));
    vec4 _1774 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_679, _680));
    float _1776 = _1774.w;
    float _1788 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1776);
    float _1789 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1776);
    float _1790 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1776);
    uvec4 _1794 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1796 = _1794.x * 14u;
    uint _1797 = _1796 + 13u;
    float _1804 = _742 + (-1.0);
    float _1809 = (cbLight._m0[_1797].x * _1804) + 1.0;
    float _1810 = (cbLight._m0[_1797].y * _1804) + 1.0;
    float _1811 = (cbLight._m0[_1797].z * _1804) + 1.0;
    float _1812 = (cbLight._m0[_1797].w * _1804) + 1.0;
    uint _1813 = _1796 + 5u;
    float _1819 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1823 = _1796 + 4u;
    float _1832 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1836 = _1796 | 1u;
    float _1847 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_591, _592, _593));
    float _1850 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_591, _592, _593));
    float _3955 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _3966 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1855 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.3183098733425140380859375;
    float _1857 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.3183098733425140380859375;
    float _1864 = ((cbLight._m0[_1813].x * _1819) * _1857) + (((cbLight._m0[_1823].x * _1788) * _1832) * _1855);
    float _1865 = ((_1819 * cbLight._m0[_1813].y) * _1857) + (((cbLight._m0[_1823].y * _1789) * _1832) * _1855);
    float _1866 = ((_1819 * cbLight._m0[_1813].z) * _1857) + (((cbLight._m0[_1823].z * _1790) * _1832) * _1855);
    uvec4 _1870 = floatBitsToUint(cbLight._m0[_1796 + 12u]);
    bool _1872 = _1870.x == 0u;
    float _1883;
    float _1885;
    float _1887;
    if (_1872)
    {
        _1883 = _1864;
        _1885 = _1865;
        _1887 = _1866;
    }
    else
    {
        uint _1891 = _1796 + 6u;
        float _1907 = (dot(vec3(cbLight._m0[_1796 + 2u].xyz), vec3(_591, _592, _593)) * 0.5) + 0.5;
        float _1908 = _1907 * _1907;
        float _3977 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1910 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _1883 = (((cbLight._m0[_1891].x * 0.3183098733425140380859375) * _1909) * _1910) + _1864;
        _1885 = (((cbLight._m0[_1891].y * 0.3183098733425140380859375) * _1909) * _1910) + _1865;
        _1887 = (((cbLight._m0[_1891].z * 0.3183098733425140380859375) * _1909) * _1910) + _1866;
    }
    bool _1890 = _1870.y == 0u;
    float _1928;
    float _1930;
    float _1932;
    if (_1890)
    {
        _1928 = _1883;
        _1930 = _1885;
        _1932 = _1887;
    }
    else
    {
        uint _2090 = _1796 + 7u;
        float _2106 = (dot(vec3(cbLight._m0[_1796 + 3u].xyz), vec3(_591, _592, _593)) * 0.5) + 0.5;
        float _2107 = _2106 * _2106;
        float _3993 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2108 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _2109 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1928 = (((cbLight._m0[_2090].x * 0.3183098733425140380859375) * _2108) * _2109) + _1883;
        _1930 = (((cbLight._m0[_2090].y * 0.3183098733425140380859375) * _2108) * _2109) + _1885;
        _1932 = (((cbLight._m0[_2090].z * 0.3183098733425140380859375) * _2108) * _2109) + _1887;
    }
    uint _1935 = _1796 + 8u;
    float _1948 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _594) * 0.949999988079071044921875);
    float _1949 = _1948 * _1948;
    float _1950 = cbLight._m0[_1796].x + _671;
    float _1951 = cbLight._m0[_1796].y + _672;
    float _1952 = cbLight._m0[_1796].z + _673;
    float _1956 = inversesqrt(dot(vec3(_1950, _1951, _1952), vec3(_1950, _1951, _1952)));
    float _1957 = _1956 * _1950;
    float _1958 = _1956 * _1951;
    float _1959 = _1956 * _1952;
    float _1960 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_1796].xyz));
    float _4009 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1963 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _4020 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _1964 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _1965 = dot(vec3(_591, _592, _593), vec3(_1957, _1958, _1959));
    float _4031 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1969 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1957, _1958, _1959));
    float _4042 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1973 = _1949 * _1949;
    float _1977 = ((_1968 * _1968) * (_1973 + (-1.0))) + 1.0;
    float _1988 = (exp2(log2(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1989 = 1.0 - _1949;
    float _2000 = (0.5 / (((_1964 * ((_1963 * _1989) + _1949)) + 9.9999999392252902907785028219223e-09) + (((_1964 * _1989) + _1949) * _1963))) * _1963;
    float _4053 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2002 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1973 / ((_1977 * _1977) * 3.141590118408203125));
    uint _2016 = _1796 + 9u;
    float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1836].w)) * _594) * 0.949999988079071044921875);
    float _2028 = _2027 * _2027;
    float _2029 = cbLight._m0[_1836].x + _671;
    float _2030 = cbLight._m0[_1836].y + _672;
    float _2031 = cbLight._m0[_1836].z + _673;
    float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
    float _2036 = _2035 * _2029;
    float _2037 = _2035 * _2030;
    float _2038 = _2035 * _2031;
    float _2039 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_1836].xyz));
    float _4064 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _2043 = dot(vec3(_591, _592, _593), vec3(_2036, _2037, _2038));
    float _4075 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _2047 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_2036, _2037, _2038));
    float _4086 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2051 = _2028 * _2028;
    float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
    float _2064 = (exp2(log2(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2065 = 1.0 - _2028;
    float _2075 = (0.5 / (((_1964 * ((_2042 * _2065) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1964 * _2065) + _2028) * _2042))) * _2042;
    float _4097 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2077 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
    float _2087 = (((_2064 * cbLight._m0[_2016].x) * _2077) * _1819) + ((((cbLight._m0[_1935].x * _1788) * _1988) * _2002) * _1832);
    float _2088 = (((_2064 * cbLight._m0[_2016].y) * _2077) * _1819) + ((((cbLight._m0[_1935].y * _1789) * _1988) * _2002) * _1832);
    float _2089 = (((_2064 * cbLight._m0[_2016].z) * _2077) * _1819) + ((((cbLight._m0[_1935].z * _1790) * _1988) * _2002) * _1832);
    float _2151;
    float _2153;
    float _2155;
    if (_1872)
    {
        _2151 = _2087;
        _2153 = _2088;
        _2155 = _2089;
    }
    else
    {
        uint _2157 = _1796 + 2u;
        uint _2161 = _1796 + 10u;
        float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _594) * 0.949999988079071044921875);
        float _2176 = _2175 * _2175;
        float _2177 = cbLight._m0[_2157].x + _671;
        float _2178 = cbLight._m0[_2157].y + _672;
        float _2179 = cbLight._m0[_2157].z + _673;
        float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
        float _2184 = _2183 * _2177;
        float _2185 = _2183 * _2178;
        float _2186 = _2183 * _2179;
        float _2187 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2157].xyz));
        float _4108 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2190 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2191 = dot(vec3(_591, _592, _593), vec3(_2184, _2185, _2186));
        float _4119 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2194 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2195 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2184, _2185, _2186));
        float _4130 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2199 = _2176 * _2176;
        float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
        float _2212 = (exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2213 = 1.0 - _2176;
        float _2223 = (0.5 / (((_1964 * ((_2190 * _2213) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_1964 * _2213) + _2176) * _2190))) * _2190;
        float _4141 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2225 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
        float _2226 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2151 = (((_2212 * cbLight._m0[_2161].x) * _2225) * _2226) + _2087;
        _2153 = (((_2212 * cbLight._m0[_2161].y) * _2225) * _2226) + _2088;
        _2155 = (((_2212 * cbLight._m0[_2161].z) * _2225) * _2226) + _2089;
    }
    float _2261;
    float _2263;
    float _2265;
    if (_1890)
    {
        _2261 = _2151;
        _2263 = _2153;
        _2265 = _2155;
    }
    else
    {
        uint _2272 = _1796 + 3u;
        uint _2276 = _1796 + 11u;
        float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _594) * 0.949999988079071044921875);
        float _2291 = _2290 * _2290;
        float _2292 = cbLight._m0[_2272].x + _671;
        float _2293 = cbLight._m0[_2272].y + _672;
        float _2294 = cbLight._m0[_2272].z + _673;
        float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
        float _2299 = _2298 * _2292;
        float _2300 = _2298 * _2293;
        float _2301 = _2298 * _2294;
        float _2302 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2272].xyz));
        float _4157 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2306 = dot(vec3(_591, _592, _593), vec3(_2299, _2300, _2301));
        float _4168 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2310 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2299, _2300, _2301));
        float _4179 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2314 = _2291 * _2291;
        float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
        float _2327 = (exp2(log2(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2328 = 1.0 - _2291;
        float _2338 = (0.5 / (((_1964 * ((_2305 * _2328) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_1964 * _2328) + _2291) * _2305))) * _2305;
        float _4190 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2340 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
        float _2341 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2261 = (((_2327 * cbLight._m0[_2276].x) * _2340) * _2341) + _2151;
        _2263 = (((_2327 * cbLight._m0[_2276].y) * _2340) * _2341) + _2153;
        _2265 = (((_2327 * cbLight._m0[_2276].z) * _2340) * _2341) + _2155;
    }
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    if (_1794.y == 0u)
    {
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2416;
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2416;
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2416;
        uvec4 _2431 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2432 = _2431.x;
        uint _2443 = uint((float(_2431.y) * floor(float(uint(cbSceneParam._m0[85u].y * _680) / _2432))) + floor(float(uint(cbSceneParam._m0[85u].x * _679) / _2432)));
        float _2453 = (log2(_2419 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2454 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        uint _2457 = uint(isnan(14.0) ? _2454 : (isnan(_2454) ? 14.0 : min(_2454, 14.0)));
        uvec4 _2462 = texelFetch(g_lightClusterGridBuffer, int(((_2457 << 2u) + (_2443 << 6u)) >> 2u));
        uint _2463 = _2462.x;
        uint _2464 = _2431.z;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        if (((((1u << ((_2464 >> 4u) & 15u)) + 4294967295u) & _2463) == 0u) || ((_2464 & 240u) == 0u))
        {
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
        }
        else
        {
            float _2565;
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            uint _2715 = 0u;
            uint _2724;
            bool _2725;
            for (;;)
            {
                _2724 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2715 << 2u)) >> 2u)).x;
                _2725 = _2724 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2725)
                {
                    frontier_phi_61_pred = _2709;
                    frontier_phi_61_pred_1 = _2714;
                    frontier_phi_61_pred_2 = _2713;
                    frontier_phi_61_pred_3 = _2712;
                    frontier_phi_61_pred_4 = _2711;
                    frontier_phi_61_pred_5 = _2710;
                }
                else
                {
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    uint _2839;
                    _2833 = _2709;
                    _2834 = _2710;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2713;
                    _2838 = _2714;
                    _2839 = _2724;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    for (;;)
                    {
                        uint _2843 = uint(findLSB(_2839)) + (_2715 << 5u);
                        uint _2840 = (_2839 + 4294967295u) & _2839;
                        uint _2845 = _2843 * 48u;
                        vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 3u)).x));
                        uint _2865 = (_2843 * 48u) + 4u;
                        vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 3u)).x));
                        uint _2884 = (_2843 * 48u) + 8u;
                        vec3 _2895 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x));
                        float _2899 = _2859.x - _2417;
                        float _2900 = _2859.y - _2418;
                        float _2901 = _2859.z - _2419;
                        float _2902 = dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901));
                        float _2905 = inversesqrt(_2902);
                        float _2906 = _2905 * _2899;
                        float _2907 = _2905 * _2900;
                        float _2908 = _2905 * _2901;
                        float _2909 = dot(vec3(_698, _701, _704), vec3(_2906, _2907, _2908));
                        float _2914 = 1.0 - (_2902 * _2859.w);
                        float _4216 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2915 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                        float _2916 = sqrt(_2902) * _2878.w;
                        float _2919 = 1.39999997615814208984375 / (_2916 + 1.39999997615814208984375);
                        float _2920 = _2919 * _2919;
                        float _2923 = ((1.0 - _2920) * _2909) + _2920;
                        float _2926 = _2916 * _2916;
                        float _2930 = ((isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0))) * _2915) / ((_2926 * 0.699999988079071044921875) + 1.0);
                        float _2934 = (-0.0) - _2417;
                        float _2935 = (-0.0) - _2418;
                        float _2936 = (-0.0) - _2419;
                        float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
                        float _2941 = _2940 * _2934;
                        float _2942 = _2940 * _2935;
                        float _2943 = _2940 * _2936;
                        float _2951 = exp2(log2(1.0 / ((_2926 * 3.5) + 5.0)) * 0.25);
                        float _2952 = 1.0 - _758;
                        float _2959 = sqrt(1.0 - ((1.0 - (_2952 * _2952)) * (1.0 - (_2951 * _2951))));
                        float _2960 = _2959 * _2959;
                        float _2961 = _2960 * _2960;
                        float _2962 = _2941 + _2906;
                        float _2963 = _2942 + _2907;
                        float _2964 = _2943 + _2908;
                        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
                        float _2972 = dot(vec3(_698, _701, _704), vec3(_2941, _2942, _2943));
                        float _4232 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2975 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                        float _2976 = dot(vec3(_698, _701, _704), vec3(_2968 * _2962, _2968 * _2963, _2968 * _2964));
                        float _4243 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2983 = ((_2979 * _2979) * (_2961 + (-1.0))) + 1.0;
                        float _2984 = _2919 * _2960;
                        float _2985 = _2984 * _2984;
                        float _2988 = ((1.0 - _2985) * _2909) + _2985;
                        float _4254 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2990 = 1.0 - _2960;
                        float _3000 = (0.5 / (((_2989 * ((_2975 * _2990) + _2960)) + 9.9999999392252902907785028219223e-09) + (((_2989 * _2990) + _2960) * _2975))) * _2989;
                        float _4265 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3011 = (((_2961 * 3.1415927410125732421875) * (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) / ((_2983 * _2983) * ((_2926 * 2.1991131305694580078125) + 3.141590118408203125))) * _2915;
                        _2768 = (_2930 * _2878.x) + _2836;
                        _2769 = (_2930 * _2878.y) + _2837;
                        _2770 = (_2930 * _2878.z) + _2838;
                        _2765 = (_3011 * _2895.x) + _2833;
                        _2766 = (_3011 * _2895.y) + _2834;
                        _2767 = (_3011 * _2895.z) + _2835;
                        if (_2840 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2833 = _2765;
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2769;
                            _2838 = _2770;
                            _2839 = _2840;
                        }
                    }
                    frontier_phi_61_pred = _2765;
                    frontier_phi_61_pred_1 = _2770;
                    frontier_phi_61_pred_2 = _2769;
                    frontier_phi_61_pred_3 = _2768;
                    frontier_phi_61_pred_4 = _2767;
                    frontier_phi_61_pred_5 = _2766;
                }
                _2565 = frontier_phi_61_pred;
                _2575 = frontier_phi_61_pred_1;
                _2573 = frontier_phi_61_pred_2;
                _2571 = frontier_phi_61_pred_3;
                _2569 = frontier_phi_61_pred_4;
                _2567 = frontier_phi_61_pred_5;
                uint _2716 = _2715 + 1u;
                if (_2716 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2709 = _2565;
                    _2710 = _2567;
                    _2711 = _2569;
                    _2712 = _2571;
                    _2713 = _2573;
                    _2714 = _2575;
                    _2715 = _2716;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
        }
        uvec4 _2578 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2579 = _2578.z;
        uint _2581 = (_2579 >> 8u) & 15u;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        if (((4294967295u << _2581) & _2463) == 0u)
        {
            _2677 = _2564;
            _2679 = _2566;
            _2681 = _2568;
            _2683 = _2570;
            _2685 = _2572;
            _2687 = _2574;
        }
        else
        {
            float _2702 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
            float _2703 = _2702 * _2417;
            float _2704 = _2702 * _2418;
            float _2705 = _2702 * _2419;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2581 < ((_2579 >> 12u) & 15u))
            {
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2816 = _2564;
                float _2817 = _2566;
                float _2818 = _2568;
                float _2819 = _2570;
                float _2820 = _2572;
                float _2821 = _2574;
                uint _2822 = _2581;
                uint _2831;
                bool _2832;
                for (;;)
                {
                    _2831 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2822 << 2u)) >> 2u)).x;
                    _2832 = _2831 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2832)
                    {
                        frontier_phi_67_pred = _2819;
                        frontier_phi_67_pred_1 = _2820;
                        frontier_phi_67_pred_2 = _2821;
                        frontier_phi_67_pred_3 = _2818;
                        frontier_phi_67_pred_4 = _2817;
                        frontier_phi_67_pred_5 = _2816;
                    }
                    else
                    {
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3029 = _2816;
                        float _3030 = _2817;
                        float _3031 = _2818;
                        float _3032 = _2819;
                        float _3033 = _2820;
                        float _3034 = _2821;
                        uint _3035 = _2831;
                        uint _3036;
                        vec4 _3061;
                        float _3062;
                        vec4 _3077;
                        vec3 _3089;
                        vec4 _3104;
                        vec4 _3120;
                        float _3166;
                        bool _3167;
                        for (;;)
                        {
                            uint _3046 = ((_2822 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3035));
                            _3036 = (_3035 + 4294967295u) & _3035;
                            uint _3048 = _3046 * 40u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            _3062 = _3061.w;
                            uint _3064 = (_3046 * 40u) + 4u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3079 = (_3046 * 40u) + 8u;
                            _3089 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x));
                            uint _3091 = (_3046 * 40u) + 16u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3107 = (_3046 * 40u) + 20u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3122 = (_3046 * 40u) + 24u;
                            vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3141 = (_3046 * 40u) + 28u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            _3166 = fma(_2419, _3154.z, fma(_2418, _3154.y, _3154.x * _2417)) + _3154.w;
                            _3167 = !((fma(_2419, _3135.z, fma(_2418, _3135.y, _3135.x * _2417)) + _3135.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3167)
                            {
                                float _3194 = _3061.x - _2417;
                                float _3195 = _3061.y - _2418;
                                float _3196 = _3061.z - _2419;
                                float _3197 = dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196));
                                float _3200 = inversesqrt(_3197);
                                float _3201 = _3200 * _3194;
                                float _3202 = _3200 * _3195;
                                float _3203 = _3200 * _3196;
                                float _3207 = 1.0 - (_3197 / (_3062 * _3062));
                                float _4276 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3212 = sqrt(_3197) * _3077.w;
                                float _3214 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                                float _3215 = _3214 * _3214;
                                float _3218 = ((1.0 - _3215) * dot(vec3(_3201, _3202, _3203), vec3(_698, _701, _704))) + _3215;
                                float _3221 = _3212 * _3212;
                                float _3225 = (fma(_2419, _3104.z, fma(_2418, _3104.y, _3104.x * _2417)) + _3104.w) / _3166;
                                float _3226 = (fma(_2419, _3120.z, fma(_2418, _3120.y, _3120.x * _2417)) + _3120.w) / _3166;
                                float _3230 = 1.0 - dot(vec2(_3225, _3226), vec2(_3225, _3226));
                                float _4292 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                                float _3232 = _3231 * (((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3208) / ((_3221 * 0.699999988079071044921875) + 1.0));
                                float _3244 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                                float _3245 = 1.0 - _758;
                                float _3252 = sqrt(1.0 - ((1.0 - (_3245 * _3245)) * (1.0 - (_3244 * _3244))));
                                float _3253 = _3252 * _3252;
                                float _3254 = _3253 * _3253;
                                float _3255 = _3201 - _2703;
                                float _3256 = _3202 - _2704;
                                float _3257 = _3203 - _2705;
                                float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                                float _3265 = dot(vec3(_698, _701, _704), vec3((-0.0) - _2703, (-0.0) - _2704, (-0.0) - _2705));
                                float _4303 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3269 = dot(vec3(_698, _701, _704), vec3(_3261 * _3255, _3261 * _3256, _3261 * _3257));
                                float _4314 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3276 = ((_3272 * _3272) * (_3254 + (-1.0))) + 1.0;
                                float _3277 = _3214 * _3253;
                                float _3278 = _3277 * _3277;
                                float _3284 = ((1.0 - _3278) * dot(vec3(_698, _701, _704), vec3(_3201, _3202, _3203))) + _3278;
                                float _4325 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3286 = 1.0 - _3253;
                                float _3296 = (0.5 / (((_3285 * ((_3268 * _3286) + _3253)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3253) * _3268))) * _3285;
                                float _4336 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3306 = (_3231 * _3208) * (((_3254 * 3.1415927410125732421875) * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) / ((_3276 * _3276) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3306 * _3089.x;
                                frontier_phi_73_pred_1 = _3306 * _3089.y;
                                frontier_phi_73_pred_2 = _3232 * _3077.z;
                                frontier_phi_73_pred_3 = _3232 * _3077.y;
                                frontier_phi_73_pred_4 = _3232 * _3077.x;
                                frontier_phi_73_pred_5 = _3306 * _3089.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3310 = frontier_phi_73_pred;
                            _3311 = frontier_phi_73_pred_1;
                            _3315 = frontier_phi_73_pred_2;
                            _3314 = frontier_phi_73_pred_3;
                            _3313 = frontier_phi_73_pred_4;
                            _3312 = frontier_phi_73_pred_5;
                            _3019 = _3313 + _3032;
                            _3020 = _3314 + _3033;
                            _3021 = _3315 + _3034;
                            _3016 = _3310 + _3029;
                            _3017 = _3311 + _3030;
                            _3018 = _3312 + _3031;
                            if (_3036 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3036;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3019;
                        frontier_phi_67_pred_1 = _3020;
                        frontier_phi_67_pred_2 = _3021;
                        frontier_phi_67_pred_3 = _3018;
                        frontier_phi_67_pred_4 = _3017;
                        frontier_phi_67_pred_5 = _3016;
                    }
                    _2684 = frontier_phi_67_pred;
                    _2686 = frontier_phi_67_pred_1;
                    _2688 = frontier_phi_67_pred_2;
                    _2682 = frontier_phi_67_pred_3;
                    _2680 = frontier_phi_67_pred_4;
                    _2678 = frontier_phi_67_pred_5;
                    uint _2823 = _2822 + 1u;
                    if (_2823 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2816 = _2678;
                        _2817 = _2680;
                        _2818 = _2682;
                        _2819 = _2684;
                        _2820 = _2686;
                        _2821 = _2688;
                        _2822 = _2823;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2686;
                frontier_phi_55_56_ladder_1 = _2688;
                frontier_phi_55_56_ladder_2 = _2684;
                frontier_phi_55_56_ladder_3 = _2682;
                frontier_phi_55_56_ladder_4 = _2680;
                frontier_phi_55_56_ladder_5 = _2678;
            }
            else
            {
                frontier_phi_55_56_ladder = _2572;
                frontier_phi_55_56_ladder_1 = _2574;
                frontier_phi_55_56_ladder_2 = _2570;
                frontier_phi_55_56_ladder_3 = _2568;
                frontier_phi_55_56_ladder_4 = _2566;
                frontier_phi_55_56_ladder_5 = _2564;
            }
            _2677 = frontier_phi_55_56_ladder_5;
            _2679 = frontier_phi_55_56_ladder_4;
            _2681 = frontier_phi_55_56_ladder_3;
            _2683 = frontier_phi_55_56_ladder_2;
            _2685 = frontier_phi_55_56_ladder;
            _2687 = frontier_phi_55_56_ladder_1;
        }
        float _2692 = isnan(1.0) ? _742 : (isnan(_742) ? 1.0 : min(_742, 1.0));
        _2476 = (_2692 * _2683) + _1928;
        _2478 = (_2692 * _2685) + _1930;
        _2480 = (_2692 * _2687) + _1932;
        _2482 = ((_2677 * 0.039999999105930328369140625) * _2692) + _2261;
        _2484 = ((_2679 * 0.039999999105930328369140625) * _2692) + _2263;
        _2486 = ((_2681 * 0.039999999105930328369140625) * _2692) + _2265;
    }
    else
    {
        _2476 = _1928;
        _2478 = _1930;
        _2480 = _1932;
        _2482 = _2261;
        _2484 = _2263;
        _2486 = _2265;
    }
    float _4352 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4363 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4374 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    uint _2506 = _232 + 6u;
    float _2514 = _679 / cbSceneParam._m0[86u].x;
    float _2515 = _680 / cbSceneParam._m0[86u].y;
    vec4 _2529 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2514, _2515, (log2((isnan(cbSceneParam._m0[77u].w) ? _612 : (isnan(_612) ? cbSceneParam._m0[77u].w : min(_612, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2531 = _2529.x;
    float _2532 = _2529.y;
    float _2533 = _2529.z;
    float _2534 = _2529.w;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    if (_612 > cbSceneParam._m0[78u].w)
    {
        float _2589 = isnan(_612) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _612 : min(cbSceneParam._m0[80u].w, _612));
        float _2590 = _2589 / _612;
        float _2601 = _2590 * _664;
        float _2602 = _665 * _2590;
        float _2603 = (-0.0) - _2602;
        float _2605 = _2590 * _666;
        float _2607 = (cbSceneParam._m0[77u].w * _2603) / _2589;
        float _2608 = _2607 + cbSceneParam._m0[79u].w;
        float _2609 = cbSceneParam._m0[79u].w - _2602;
        float _2615 = sqrt(((_2601 * _2601) + (_2602 * _2602)) + (_2605 * _2605));
        float _2618 = (1.0 - (cbSceneParam._m0[77u].w / _2589)) * _2615;
        float _2623 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2625 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2778;
        if (abs((_2603 - _2607) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2778 = ((((_2608 > 0.0) ? exp2(_2623 * _2608) : (2.0 - exp2(_2625 * _2608))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2618;
        }
        else
        {
            float _2738 = 1.0 / cbSceneParam._m0[80u].x;
            float _2739 = isnan(_2609) ? _2608 : (isnan(_2608) ? _2609 : max(_2608, _2609));
            float _2740 = isnan(_2609) ? _2608 : (isnan(_2608) ? _2609 : min(_2608, _2609));
            float _2749 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : min(_2739, 0.0));
            float _2750 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : min(_2740, 0.0));
            _2778 = ((abs(_2615 / _2603) * cbSceneParam._m0[80u].y) * ((((_2749 - _2750) * 2.0) - ((exp2(_2623 * (isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0)))) - exp2(_2623 * (isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0))))) * _2738)) - ((exp2(_2625 * _2749) - exp2(_2625 * _2750)) * _2738))) + (_2618 * cbSceneParam._m0[80u].z);
        }
        vec4 _2780 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2514, _2515, 1.0), 0.0);
        float _2789 = exp2((_2778 * (-1.44269502162933349609375)) * (1.0 - _2780.w));
        float _2790 = log2(_2789);
        float _2806 = log2(_2534);
        _2627 = (exp2(_2806 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2790 * cbSceneParam._m0[78u].x)) * _2780.x) / cbSceneParam._m0[78u].x)) + _2531;
        _2629 = (exp2(_2806 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2790 * cbSceneParam._m0[78u].y)) * _2780.y) / cbSceneParam._m0[78u].y)) + _2532;
        _2631 = (exp2(_2806 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2790 * cbSceneParam._m0[78u].z)) * _2780.z) / cbSceneParam._m0[78u].z)) + _2533;
        _2633 = _2789 * _2534;
    }
    else
    {
        _2627 = _2531;
        _2629 = _2532;
        _2631 = _2533;
        _2633 = _2534;
    }
    float _2645 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2646 = _2645 == 3.0;
    float _2647 = log2(_2633);
    float _2654 = exp2(_2647 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2476 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _742))) + ((_2482 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1547)) * cbPerFrame._m0[3u].x));
    float _2655 = exp2(_2647 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2478 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _742))) + ((_2484 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1547)) * cbPerFrame._m0[3u].x));
    float _2656 = exp2(_2647 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2480 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _742))) + ((_2486 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1547)) * cbPerFrame._m0[3u].x));
    float _2665 = (_2645 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2665 * (_2646 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2627)));
    SV_Target.y = _2665 * (_2646 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2629)));
    SV_Target.z = _2665 * (_2646 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2631)));
    SV_Target.w = cbInstanceData._m0[_2506].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2506].w;
}


