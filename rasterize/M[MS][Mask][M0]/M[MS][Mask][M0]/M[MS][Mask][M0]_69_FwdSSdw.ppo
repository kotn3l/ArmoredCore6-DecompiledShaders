#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1462;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3791 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3802 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3813 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _372 = _367.x * cbMtdParam._m0[11u].x;
    float _373 = _367.y * cbMtdParam._m0[11u].y;
    float _374 = _367.z * cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _461 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _478 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _412.x) * 2.0) - ((((_449 - _461) * cbMtdParam._m0[24u].z) + _461) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3824 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _486 = (_479 * ((_393.x * cbMtdParam._m0[12u].x) - _372)) + _372;
    float _487 = (_479 * ((_393.y * cbMtdParam._m0[12u].y) - _373)) + _373;
    float _488 = (_479 * ((_393.z * cbMtdParam._m0[12u].z) - _374)) + _374;
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _527 = _525.x;
    float _537 = dot(vec4(_527, _525.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _551 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _412.y) * 2.0) - ((((_527 - _537) * cbMtdParam._m0[24u].z) + _537) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3835 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _562 = (_341.x * cbMtdParam._m0[9u].x) * ((_552 * ((_505.x * cbMtdParam._m0[13u].x) - _486)) + _486);
    float _563 = (_341.y * cbMtdParam._m0[9u].y) * ((_552 * ((_505.y * cbMtdParam._m0[13u].y) - _487)) + _487);
    float _564 = (_341.z * cbMtdParam._m0[9u].z) * ((_552 * ((_505.z * cbMtdParam._m0[13u].z) - _488)) + _488);
    float _568 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _562;
    float _571 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _563;
    float _574 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _564;
    float _582 = (((_562 - _568) * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) + _568) * 4.55000019073486328125;
    float _584 = (((_563 - _571) * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) + _571) * 4.55000019073486328125;
    float _586 = (((_564 - _574) * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) + _574) * 4.55000019073486328125;
    vec4 _603 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _645 = _643.x;
    float _646 = _643.y;
    float _647 = _643.z;
    float _654 = ((_626.x - _645) * _479) + _645;
    float _655 = ((_626.y - _646) * _479) + _646;
    float _656 = ((_626.z - _647) * _479) + _647;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _681 = ((_668.z - _656) * _552) + _656;
    float _684 = ((((_668.x - _654) * _552) + _654) * 2.0) + (-1.0);
    float _685 = ((((_668.y - _655) * _552) + _655) * 2.0) + (-1.0);
    float _686 = dot(vec2(_684, _685), vec2(_684, _685));
    float _3846 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _691 = sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _730 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _732 = _730.x;
    float _733 = 1.0 - _732;
    float _739 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _742 = ((isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : min(_739, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _751 = (_742 - ((((((_732 - _733) * cbMtdParam._m0[24u].w) + _733) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _742))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3867 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _752 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _759 = (_752 * (cbMtdParam._m0[17u].x - _582)) + _582;
    float _760 = (_752 * (cbMtdParam._m0[17u].y - _584)) + _584;
    float _761 = (_752 * (cbMtdParam._m0[17u].z - _586)) + _586;
    vec4 _773 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _775 = _773.x;
    float _776 = 1.0 - _775;
    float _801 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_775 - _776) * cbMtdParam._m0[24u].y) + _776) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3878 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _802 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _810 = ((((cbMtdParam._m0[10u].x - _759) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _802) + _759;
    float _811 = ((((cbMtdParam._m0[10u].y - _760) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _802) + _760;
    float _812 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _761)) * _802) + _761;
    float _817 = (((_603.z - _681) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _681;
    float _821 = ((_705.z - _817) * cbMtdParam._m0[19u].w) + _817;
    vec4 _835 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _842 = (_835.x * 2.0) + (-1.0);
    float _843 = (_835.y * 2.0) + (-1.0);
    float _844 = dot(vec2(_842, _843), vec2(_842, _843));
    float _3889 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _852 = (_752 * (_835.z - _821)) + _821;
    float _855 = ((cbMtdParam._m0[23u].y - _852) * _802) + _852;
    vec4 _876 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _882 = (_876.x * 2.0) + (-1.0);
    float _883 = (_876.y * 2.0) + (-1.0);
    float _884 = dot(vec2(_882, _883), vec2(_882, _883));
    float _3900 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _898 = (_684 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_603.x * 2.0) + (-1.0)))) + (((_705.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _899 = (_685 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_603.y * 2.0) + (-1.0)))) + (((_705.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _911 = (((_842 - _898) + (cbMtdParam._m0[21u].x * _898)) * _752) + _898;
    float _912 = (((_843 - _899) + (cbMtdParam._m0[21u].x * _899)) * _752) + _899;
    float _913 = (_752 * (sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) - _691)) + _691;
    float _924 = (((_882 - _911) + (_911 * cbMtdParam._m0[22u].z)) * _802) + _911;
    float _925 = (((_883 - _912) + (_912 * cbMtdParam._m0[22u].z)) * _802) + _912;
    float _926 = ((sqrt(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) - _913) * _802) + _913;
    float _928 = cbMtdParam._m0[22u].x + _705.w;
    float _931 = fma(_926, _253 * NORMAL.x, fma(_925, _260 * TANGENT.x, (_246 * _238) * _924));
    float _934 = fma(_926, _253 * NORMAL.y, fma(_925, _260 * TANGENT.y, (_246 * _239) * _924));
    float _937 = fma(_926, _253 * NORMAL.z, fma(_925, _260 * TANGENT.z, (_246 * _240) * _924));
    float _941 = inversesqrt(dot(vec3(_931, _934, _937), vec3(_931, _934, _937)));
    float _942 = _941 * _931;
    float _943 = _941 * _934;
    float _944 = _941 * _937;
    float _3911 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _945 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _3933 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _3944 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _3955 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _963 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1013 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1003);
    float _1014 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1003);
    float _1015 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1003);
    float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
    float _1020 = _1013 * _1019;
    float _1021 = _1014 * _1019;
    float _1022 = _1015 * _1019;
    float _1028 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1029 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1047 = fma(_944, cbSceneParam._m0[5u].z, fma(_943, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _942));
    float _1050 = fma(_944, cbSceneParam._m0[6u].z, fma(_943, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _942));
    float _1053 = fma(_944, cbSceneParam._m0[7u].z, fma(_943, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _942));
    uint _1067 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1073 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_1067].x;
    float _1074 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_1067].y;
    float _1075 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * cbInstanceData._m0[_1067].z;
    float _3966 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    vec4 _1087 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1028, cbSceneParam._m0[86u].y * _1029));
    float _1091 = ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * TEXCOORD_5.w) * _1087.x;
    float _1092 = dot(vec3(_942, _943, _944), vec3(_1020, _1021, _1022));
    float _1095 = _1092 * 2.0;
    float _1099 = (_1095 * _942) - _1020;
    float _1100 = (_1095 * _943) - _1021;
    float _1101 = (_1095 * _944) - _1022;
    float _1105 = abs(dot(vec3(_1020, _1021, _1022), vec3(_942, _943, _944)));
    float _3999 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1107 = sqrt(_945);
    float _1120 = exp2((_1107 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1107 * 3.0));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1461;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1186 = fma(_1160, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1152));
        float _1190 = fma(_1160, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1152));
        float _1194 = fma(_1160, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1152));
        float _1219 = _1152 + _942;
        float _1220 = _1156 + _943;
        float _1221 = _1160 + _944;
        float _1231 = fma(_1221, cbModelParam._m0[26u].z, fma(_1220, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1219)) - _1186;
        float _1232 = fma(_1221, cbModelParam._m0[27u].z, fma(_1220, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1219)) - _1190;
        float _1233 = fma(_1221, cbModelParam._m0[28u].z, fma(_1220, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1219)) - _1194;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1186 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1190 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[34u].z) + ((((((_1194 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1289 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1255.x + (-0.5));
        float _1291 = _1289 * (_1255.y + (-0.5));
        float _1292 = _1289 * (_1255.z + (-0.5));
        float _1299 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1262.x + (-0.5));
        float _1301 = _1299 * (_1262.y + (-0.5));
        float _1302 = _1299 * (_1262.z + (-0.5));
        float _1309 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1269.x + (-0.5));
        float _1311 = _1309 * (_1269.y + (-0.5));
        float _1312 = _1309 * (_1269.z + (-0.5));
        float _1319 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1276.x + (-0.5));
        float _1321 = _1319 * (_1276.y + (-0.5));
        float _1322 = _1319 * (_1276.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1343 = (dot(vec3(_942, _943, _944), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1353 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4047 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1355 + 1.0))) + _1360) * _1323;
        float _1370 = _1291 * 0.5;
        float _1371 = _1301 * 0.5;
        float _1372 = _1311 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_942, _943, _944), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4080 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1397 + 1.0))) + _1402) * _1324;
        float _1412 = _1292 * 0.5;
        float _1413 = _1302 * 0.5;
        float _1414 = _1312 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_942, _943, _944), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4113 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1439 + 1.0))) + _1444) * _1325;
        _1461 = _1292;
        _1463 = _1291;
        _1464 = _1290;
        _1465 = _1302;
        _1466 = _1301;
        _1467 = _1300;
        _1468 = _1312;
        _1469 = _1311;
        _1470 = _1310;
        _1471 = _1325;
        _1472 = _1324;
        _1473 = _1323;
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
    }
    else
    {
        _1461 = _1462;
        _1463 = _1462;
        _1464 = _1462;
        _1465 = _1462;
        _1466 = _1462;
        _1467 = _1462;
        _1468 = _1462;
        _1469 = _1462;
        _1470 = _1462;
        _1471 = _1462;
        _1472 = _1462;
        _1473 = _1462;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1500 = fma(_1160, cbModelParam._m0[30u].z, fma(_1156, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152));
        float _1504 = fma(_1160, cbModelParam._m0[31u].z, fma(_1156, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152));
        float _1508 = fma(_1160, cbModelParam._m0[32u].z, fma(_1156, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152));
        float _1531 = _1152 + _942;
        float _1532 = _1156 + _943;
        float _1533 = _1160 + _944;
        float _1543 = fma(_1533, cbModelParam._m0[30u].z, fma(_1532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1531)) - _1500;
        float _1544 = fma(_1533, cbModelParam._m0[31u].z, fma(_1532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1531)) - _1504;
        float _1545 = fma(_1533, cbModelParam._m0[32u].z, fma(_1532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1531)) - _1508;
        float _1549 = inversesqrt(dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545)));
        float _1562 = ((_1549 * _1543) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1500 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1549 * _1544) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1504 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1564 = ((_1549 * _1545) / cbModelParam._m0[35u].z) + ((((((_1508 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        float _1599 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1566.x + (-0.5));
        float _1601 = _1599 * (_1566.y + (-0.5));
        float _1602 = _1599 * (_1566.z + (-0.5));
        float _1609 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1573.x + (-0.5));
        float _1611 = _1609 * (_1573.y + (-0.5));
        float _1612 = _1609 * (_1573.z + (-0.5));
        float _1619 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1580.x + (-0.5));
        float _1621 = _1619 * (_1580.y + (-0.5));
        float _1622 = _1619 * (_1580.z + (-0.5));
        float _1629 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1587.x + (-0.5));
        float _1631 = _1629 * (_1587.y + (-0.5));
        float _1632 = _1629 * (_1587.z + (-0.5));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = _1600 * 0.5;
        float _1637 = _1610 * 0.5;
        float _1638 = _1620 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_942, _943, _944), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4176 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1663 + 1.0))) + _1668) * _1633;
        float _1678 = _1601 * 0.5;
        float _1679 = _1611 * 0.5;
        float _1680 = _1621 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_942, _943, _944), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4209 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1705 + 1.0))) + _1710) * _1634;
        float _1720 = _1602 * 0.5;
        float _1721 = _1612 * 0.5;
        float _1722 = _1622 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_942, _943, _944), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4242 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1747 + 1.0))) + _1752) * _1635;
        _1769 = _1602;
        _1770 = _1601;
        _1771 = _1600;
        _1772 = _1612;
        _1773 = _1611;
        _1774 = _1610;
        _1775 = _1622;
        _1776 = _1621;
        _1777 = _1620;
        _1778 = _1635;
        _1779 = _1634;
        _1780 = _1633;
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
    }
    else
    {
        _1769 = _1462;
        _1770 = _1462;
        _1771 = _1462;
        _1772 = _1462;
        _1773 = _1462;
        _1774 = _1462;
        _1775 = _1462;
        _1776 = _1462;
        _1777 = _1462;
        _1778 = _1462;
        _1779 = _1462;
        _1780 = _1462;
        _1781 = 0.0;
        _1782 = 0.0;
        _1783 = 0.0;
    }
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1474)) + _1474;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1475)) + _1475;
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1476)) + _1476;
    float _1816 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1793));
    float _1837 = _1099 * 0.5;
    float _1838 = _1100 * 0.5;
    float _1839 = _1101 * 0.5;
    float _1840 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1843 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1846 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1880;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1853 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1461, _1465, _1468, _1471));
        float _1857 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1463, _1466, _1469, _1472));
        float _1861 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1868 = dot(vec4(cbModelParam._m0[39u]), vec4(_1837, _1838, _1839, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1868) ? 0.0 : (isnan(0.0) ? _1868 : max(0.0, _1868))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1891;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1882 = dot(vec4(cbModelParam._m0[40u]), vec4(_1837, _1838, _1839, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1895 = (_1891 * cbModelParam._m0[1u].x) + (_1880 * (1.0 - cbModelParam._m0[1u].x));
    float _1905 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _945);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1905 : min(cbModelParam._m0[25u].z, _1905));
    float _1987;
    float _1989;
    float _1991;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1954 = fma(_1160, cbModelParam._m0[13u].z, fma(_1156, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1152)) + cbModelParam._m0[13u].w;
        float _1958 = fma(_1160, cbModelParam._m0[14u].z, fma(_1156, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1152)) + cbModelParam._m0[14u].w;
        float _1962 = fma(_1160, cbModelParam._m0[15u].z, fma(_1156, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1152)) + cbModelParam._m0[15u].w;
        float _1965 = fma(_1101, cbModelParam._m0[13u].z, fma(_1100, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099));
        float _1968 = fma(_1101, cbModelParam._m0[14u].z, fma(_1100, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099));
        float _1971 = fma(_1101, cbModelParam._m0[15u].z, fma(_1100, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099));
        float _1999;
        if (_1965 > 0.0)
        {
            _1999 = abs((1.0 - _1954) / _1965);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1954 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1999 = frontier_phi_14_12_ladder;
        }
        float _2221;
        if (_1968 > 0.0)
        {
            _2221 = abs((1.0 - _1958) / _1968);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1958 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2221 = frontier_phi_23_19_ladder;
        }
        float _2467;
        if (_1971 > 0.0)
        {
            _2467 = abs((1.0 - _1962) / _1971);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1962 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2467 = frontier_phi_35_30_ladder;
        }
        float _2469 = isnan(_2221) ? _1999 : (isnan(_1999) ? _2221 : min(_1999, _2221));
        float _2470 = isnan(_2467) ? _2469 : (isnan(_2469) ? _2467 : min(_2469, _2467));
        float _2474 = (_2470 * _1965) + _1954;
        float _2475 = (_2470 * _1968) + _1958;
        float _2476 = (_2470 * _1971) + _1962;
        float _2477 = _2470 * 9.9999997473787516355514526367188e-05;
        float _2479 = (-1.0) - _2477;
        float _2481 = _2477 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2476 > _2481) || ((_2476 < _2479) || ((_2475 > _2481) || ((_2475 < _2479) || ((_2474 < _2479) || (_2474 > _2481))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2476, cbModelParam._m0[9u].z, fma(_2475, cbModelParam._m0[9u].y, _2474 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2476, cbModelParam._m0[10u].z, fma(_2475, cbModelParam._m0[10u].y, _2474 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2476, cbModelParam._m0[11u].z, fma(_2475, cbModelParam._m0[11u].y, _2474 * cbModelParam._m0[11u].x))), _1906);
            frontier_phi_13_35_ladder = _2600.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2600.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2600.x * cbModelParam._m0[1u].y;
        }
        _1987 = frontier_phi_13_35_ladder_2;
        _1989 = frontier_phi_13_35_ladder_1;
        _1991 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1975 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1099, _1100, _1101), _1906);
        _1987 = _1975.x * cbModelParam._m0[1u].y;
        _1989 = _1975.y * cbModelParam._m0[1u].y;
        _1991 = _1975.z * cbModelParam._m0[1u].y;
    }
    float _1995 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _945);
    float _1996 = isnan(_1995) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1995 : min(cbModelParam._m0[25u].w, _1995));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2050 = fma(_1160, cbModelParam._m0[21u].z, fma(_1156, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1152)) + cbModelParam._m0[21u].w;
        float _2054 = fma(_1160, cbModelParam._m0[22u].z, fma(_1156, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1152)) + cbModelParam._m0[22u].w;
        float _2058 = fma(_1160, cbModelParam._m0[23u].z, fma(_1156, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1152)) + cbModelParam._m0[23u].w;
        float _2061 = fma(_1101, cbModelParam._m0[21u].z, fma(_1100, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099));
        float _2064 = fma(_1101, cbModelParam._m0[22u].z, fma(_1100, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099));
        float _2067 = fma(_1101, cbModelParam._m0[23u].z, fma(_1100, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099));
        float _2226;
        if (_2061 > 0.0)
        {
            _2226 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2226 = frontier_phi_25_21_ladder;
        }
        float _2494;
        if (_2064 > 0.0)
        {
            _2494 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2494 = frontier_phi_37_32_ladder;
        }
        float _2699;
        if (_2067 > 0.0)
        {
            _2699 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2699 = frontier_phi_46_43_ladder;
        }
        float _2701 = isnan(_2494) ? _2226 : (isnan(_2226) ? _2494 : min(_2226, _2494));
        float _2702 = isnan(_2699) ? _2701 : (isnan(_2701) ? _2699 : min(_2701, _2699));
        float _2706 = (_2702 * _2061) + _2050;
        float _2707 = (_2702 * _2064) + _2054;
        float _2708 = (_2702 * _2067) + _2058;
        float _2709 = _2702 * 9.9999997473787516355514526367188e-05;
        float _2710 = (-1.0) - _2709;
        float _2712 = _2709 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2708 > _2712) || ((_2708 < _2710) || ((_2707 > _2712) || ((_2707 < _2710) || ((_2706 < _2710) || (_2706 > _2712))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2708, cbModelParam._m0[17u].z, fma(_2707, cbModelParam._m0[17u].y, _2706 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2708, cbModelParam._m0[18u].z, fma(_2707, cbModelParam._m0[18u].y, _2706 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2708, cbModelParam._m0[19u].z, fma(_2707, cbModelParam._m0[19u].y, _2706 * cbModelParam._m0[19u].x))), _1996);
            frontier_phi_22_46_ladder = _2907.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2907.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2907.x * cbModelParam._m0[1u].z;
        }
        _2086 = frontier_phi_22_46_ladder_2;
        _2088 = frontier_phi_22_46_ladder_1;
        _2090 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1099, _1100, _1101), _1996);
        _2086 = _2070.x * cbModelParam._m0[1u].z;
        _2088 = _2070.y * cbModelParam._m0[1u].z;
        _2090 = _2070.z * cbModelParam._m0[1u].z;
    }
    float _2102 = ((((1.0 - _1120) * ((_1107 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1120 * _1107)) * _1091;
    float _2103 = _2102 * ((cbModelParam._m0[1u].w * (_2086 - _1987)) + _1987);
    float _2104 = _2102 * ((cbModelParam._m0[1u].w * (_2088 - _1989)) + _1989);
    float _2105 = _2102 * ((cbModelParam._m0[1u].w * (_2090 - _1991)) + _1991);
    float _2108 = fma(_2105, cbSceneParam._m0[89u].z, fma(_2104, cbSceneParam._m0[89u].y, _2103 * cbSceneParam._m0[89u].x));
    float _2111 = fma(_2105, cbSceneParam._m0[90u].z, fma(_2104, cbSceneParam._m0[90u].y, _2103 * cbSceneParam._m0[90u].x));
    float _2114 = fma(_2105, cbSceneParam._m0[91u].z, fma(_2104, cbSceneParam._m0[91u].y, _2103 * cbSceneParam._m0[91u].x));
    vec4 _2122 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1028, _1029));
    float _2124 = _2122.w;
    float _2136 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2124);
    float _2137 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2124);
    float _2138 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2124);
    uvec4 _2142 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2144 = _2142.x * 14u;
    uint _2145 = _2144 + 13u;
    float _2152 = _1091 + (-1.0);
    float _2157 = (cbLight._m0[_2145].x * _2152) + 1.0;
    float _2158 = (cbLight._m0[_2145].y * _2152) + 1.0;
    float _2159 = (cbLight._m0[_2145].z * _2152) + 1.0;
    float _2160 = (cbLight._m0[_2145].w * _2152) + 1.0;
    uint _2161 = _2144 + 5u;
    float _2167 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2171 = _2144 + 4u;
    float _2180 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2184 = _2144 | 1u;
    float _2195 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_942, _943, _944));
    float _2198 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_942, _943, _944));
    float _4378 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _4389 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2203 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2205 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2212 = ((cbLight._m0[_2161].x * _2167) * _2205) + (((cbLight._m0[_2171].x * _2136) * _2180) * _2203);
    float _2213 = ((_2167 * cbLight._m0[_2161].y) * _2205) + (((cbLight._m0[_2171].y * _2137) * _2180) * _2203);
    float _2214 = ((_2167 * cbLight._m0[_2161].z) * _2205) + (((cbLight._m0[_2171].z * _2138) * _2180) * _2203);
    uvec4 _2218 = floatBitsToUint(cbLight._m0[_2144 + 12u]);
    bool _2220 = _2218.x == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2220)
    {
        _2231 = _2212;
        _2233 = _2213;
        _2235 = _2214;
    }
    else
    {
        uint _2239 = _2144 + 6u;
        float _2255 = (dot(vec3(cbLight._m0[_2144 + 2u].xyz), vec3(_942, _943, _944)) * 0.5) + 0.5;
        float _2256 = _2255 * _2255;
        float _4400 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2257 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2258 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2231 = (((cbLight._m0[_2239].x * 0.3183098733425140380859375) * _2257) * _2258) + _2212;
        _2233 = (((cbLight._m0[_2239].y * 0.3183098733425140380859375) * _2257) * _2258) + _2213;
        _2235 = (((cbLight._m0[_2239].z * 0.3183098733425140380859375) * _2257) * _2258) + _2214;
    }
    bool _2238 = _2218.y == 0u;
    float _2276;
    float _2278;
    float _2280;
    if (_2238)
    {
        _2276 = _2231;
        _2278 = _2233;
        _2280 = _2235;
    }
    else
    {
        uint _2438 = _2144 + 7u;
        float _2454 = (dot(vec3(cbLight._m0[_2144 + 3u].xyz), vec3(_942, _943, _944)) * 0.5) + 0.5;
        float _2455 = _2454 * _2454;
        float _4416 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2456 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2457 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2276 = (((cbLight._m0[_2438].x * 0.3183098733425140380859375) * _2456) * _2457) + _2231;
        _2278 = (((cbLight._m0[_2438].y * 0.3183098733425140380859375) * _2456) * _2457) + _2233;
        _2280 = (((cbLight._m0[_2438].z * 0.3183098733425140380859375) * _2456) * _2457) + _2235;
    }
    uint _2283 = _2144 + 8u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _945) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_2144].x + _1020;
    float _2299 = cbLight._m0[_2144].y + _1021;
    float _2300 = cbLight._m0[_2144].z + _1022;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2144].xyz));
    float _4432 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _4443 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _2312 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2313 = dot(vec3(_942, _943, _944), vec3(_2305, _2306, _2307));
    float _4454 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2317 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2305, _2306, _2307));
    float _4465 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2321 = _2297 * _2297;
    float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
    float _2336 = (exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2337 = 1.0 - _2297;
    float _2348 = (0.5 / (((_2312 * ((_2311 * _2337) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2337) + _2297) * _2311))) * _2311;
    float _4476 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
    uint _2364 = _2144 + 9u;
    float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _945) * 0.949999988079071044921875);
    float _2376 = _2375 * _2375;
    float _2377 = cbLight._m0[_2184].x + _1020;
    float _2378 = cbLight._m0[_2184].y + _1021;
    float _2379 = cbLight._m0[_2184].z + _1022;
    float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
    float _2384 = _2383 * _2377;
    float _2385 = _2383 * _2378;
    float _2386 = _2383 * _2379;
    float _2387 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2184].xyz));
    float _4487 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2391 = dot(vec3(_942, _943, _944), vec3(_2384, _2385, _2386));
    float _4498 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2395 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2384, _2385, _2386));
    float _4509 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2399 = _2376 * _2376;
    float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
    float _2412 = (exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2413 = 1.0 - _2376;
    float _2423 = (0.5 / (((_2312 * ((_2390 * _2413) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2413) + _2376) * _2390))) * _2390;
    float _4520 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2425 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
    float _2435 = (((_2412 * cbLight._m0[_2364].x) * _2425) * _2167) + ((((cbLight._m0[_2283].x * _2136) * _2336) * _2350) * _2180);
    float _2436 = (((_2412 * cbLight._m0[_2364].y) * _2425) * _2167) + ((((cbLight._m0[_2283].y * _2137) * _2336) * _2350) * _2180);
    float _2437 = (((_2412 * cbLight._m0[_2364].z) * _2425) * _2167) + ((((cbLight._m0[_2283].z * _2138) * _2336) * _2350) * _2180);
    float _2499;
    float _2501;
    float _2503;
    if (_2220)
    {
        _2499 = _2435;
        _2501 = _2436;
        _2503 = _2437;
    }
    else
    {
        uint _2505 = _2144 + 2u;
        uint _2509 = _2144 + 10u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _945) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _1020;
        float _2526 = cbLight._m0[_2505].y + _1021;
        float _2527 = cbLight._m0[_2505].z + _1022;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2505].xyz));
        float _4531 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2539 = dot(vec3(_942, _943, _944), vec3(_2532, _2533, _2534));
        float _4542 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4553 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2560 = (exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2561 = 1.0 - _2524;
        float _2571 = (0.5 / (((_2312 * ((_2538 * _2561) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2561) + _2524) * _2538))) * _2538;
        float _4564 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2573 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2574 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2499 = (((_2560 * cbLight._m0[_2509].x) * _2573) * _2574) + _2435;
        _2501 = (((_2560 * cbLight._m0[_2509].y) * _2573) * _2574) + _2436;
        _2503 = (((_2560 * cbLight._m0[_2509].z) * _2573) * _2574) + _2437;
    }
    float _2609;
    float _2611;
    float _2613;
    if (_2238)
    {
        _2609 = _2499;
        _2611 = _2501;
        _2613 = _2503;
    }
    else
    {
        uint _2620 = _2144 + 3u;
        uint _2624 = _2144 + 11u;
        float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2620].w)) * _945) * 0.949999988079071044921875);
        float _2639 = _2638 * _2638;
        float _2640 = cbLight._m0[_2620].x + _1020;
        float _2641 = cbLight._m0[_2620].y + _1021;
        float _2642 = cbLight._m0[_2620].z + _1022;
        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
        float _2647 = _2646 * _2640;
        float _2648 = _2646 * _2641;
        float _2649 = _2646 * _2642;
        float _2650 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2620].xyz));
        float _4580 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2654 = dot(vec3(_942, _943, _944), vec3(_2647, _2648, _2649));
        float _4591 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2658 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_2647, _2648, _2649));
        float _4602 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2662 = _2639 * _2639;
        float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
        float _2675 = (exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2676 = 1.0 - _2639;
        float _2686 = (0.5 / (((_2312 * ((_2653 * _2676) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2676) + _2639) * _2653))) * _2653;
        float _4613 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2688 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
        float _2689 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2609 = (((_2675 * cbLight._m0[_2624].x) * _2688) * _2689) + _2499;
        _2611 = (((_2675 * cbLight._m0[_2624].y) * _2688) * _2689) + _2501;
        _2613 = (((_2675 * cbLight._m0[_2624].z) * _2688) * _2689) + _2503;
    }
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    if (_2142.y == 0u)
    {
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2764;
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2764;
        float _2767 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2764;
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.x;
        uint _2791 = uint((float(_2779.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1029) / _2780))) + floor(float(uint(cbSceneParam._m0[85u].x * _1028) / _2780)));
        float _2801 = (log2(_2767 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2802 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        uint _2805 = uint(isnan(14.0) ? _2802 : (isnan(_2802) ? 14.0 : min(_2802, 14.0)));
        uvec4 _2810 = texelFetch(g_lightClusterGridBuffer, int(((_2805 << 2u) + (_2791 << 6u)) >> 2u));
        uint _2811 = _2810.x;
        uint _2812 = _2779.z;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((((1u << ((_2812 >> 4u) & 15u)) + 4294967295u) & _2811) == 0u) || ((_2812 & 240u) == 0u))
        {
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
        }
        else
        {
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            uint _3063 = 0u;
            uint _3072;
            bool _3073;
            for (;;)
            {
                _3072 = texelFetch(g_lightClassification, int((((_2805 << 5u) + (_2791 << 9u)) + (_3063 << 2u)) >> 2u)).x;
                _3073 = _3072 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3073)
                {
                    frontier_phi_61_pred = _3057;
                    frontier_phi_61_pred_1 = _3062;
                    frontier_phi_61_pred_2 = _3061;
                    frontier_phi_61_pred_3 = _3060;
                    frontier_phi_61_pred_4 = _3059;
                    frontier_phi_61_pred_5 = _3058;
                }
                else
                {
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    uint _3187;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3062;
                    _3187 = _3072;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    for (;;)
                    {
                        uint _3191 = uint(findLSB(_3187)) + (_3063 << 5u);
                        uint _3188 = (_3187 + 4294967295u) & _3187;
                        uint _3193 = _3191 * 48u;
                        vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 3u)).x));
                        uint _3213 = (_3191 * 48u) + 4u;
                        vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 3u)).x));
                        uint _3232 = (_3191 * 48u) + 8u;
                        vec3 _3243 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x));
                        float _3247 = _3207.x - _2765;
                        float _3248 = _3207.y - _2766;
                        float _3249 = _3207.z - _2767;
                        float _3250 = dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249));
                        float _3253 = inversesqrt(_3250);
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3257 = dot(vec3(_1047, _1050, _1053), vec3(_3254, _3255, _3256));
                        float _3262 = 1.0 - (_3250 * _3207.w);
                        float _4639 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3263 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3264 = sqrt(_3250) * _3226.w;
                        float _3267 = 1.39999997615814208984375 / (_3264 + 1.39999997615814208984375);
                        float _3268 = _3267 * _3267;
                        float _3271 = ((1.0 - _3268) * _3257) + _3268;
                        float _3274 = _3264 * _3264;
                        float _3278 = ((isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))) * _3263) / ((_3274 * 0.699999988079071044921875) + 1.0);
                        float _3282 = (-0.0) - _2765;
                        float _3283 = (-0.0) - _2766;
                        float _3284 = (-0.0) - _2767;
                        float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                        float _3289 = _3288 * _3282;
                        float _3290 = _3288 * _3283;
                        float _3291 = _3288 * _3284;
                        float _3299 = exp2(log2(1.0 / ((_3274 * 3.5) + 5.0)) * 0.25);
                        float _3300 = 1.0 - _1107;
                        float _3307 = sqrt(1.0 - ((1.0 - (_3300 * _3300)) * (1.0 - (_3299 * _3299))));
                        float _3308 = _3307 * _3307;
                        float _3309 = _3308 * _3308;
                        float _3310 = _3289 + _3254;
                        float _3311 = _3290 + _3255;
                        float _3312 = _3291 + _3256;
                        float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                        float _3320 = dot(vec3(_1047, _1050, _1053), vec3(_3289, _3290, _3291));
                        float _4655 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3323 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3324 = dot(vec3(_1047, _1050, _1053), vec3(_3316 * _3310, _3316 * _3311, _3316 * _3312));
                        float _4666 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3327 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3331 = ((_3327 * _3327) * (_3309 + (-1.0))) + 1.0;
                        float _3332 = _3267 * _3308;
                        float _3333 = _3332 * _3332;
                        float _3336 = ((1.0 - _3333) * _3257) + _3333;
                        float _4677 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3337 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3338 = 1.0 - _3308;
                        float _3348 = (0.5 / (((_3337 * ((_3323 * _3338) + _3308)) + 9.9999999392252902907785028219223e-09) + (((_3337 * _3338) + _3308) * _3323))) * _3337;
                        float _4688 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3359 = (((_3309 * 3.1415927410125732421875) * (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) / ((_3331 * _3331) * ((_3274 * 2.1991131305694580078125) + 3.141590118408203125))) * _3263;
                        _3116 = (_3278 * _3226.x) + _3184;
                        _3117 = (_3278 * _3226.y) + _3185;
                        _3118 = (_3278 * _3226.z) + _3186;
                        _3113 = (_3359 * _3243.x) + _3181;
                        _3114 = (_3359 * _3243.y) + _3182;
                        _3115 = (_3359 * _3243.z) + _3183;
                        if (_3188 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3118;
                            _3187 = _3188;
                        }
                    }
                    frontier_phi_61_pred = _3113;
                    frontier_phi_61_pred_1 = _3118;
                    frontier_phi_61_pred_2 = _3117;
                    frontier_phi_61_pred_3 = _3116;
                    frontier_phi_61_pred_4 = _3115;
                    frontier_phi_61_pred_5 = _3114;
                }
                _2913 = frontier_phi_61_pred;
                _2923 = frontier_phi_61_pred_1;
                _2921 = frontier_phi_61_pred_2;
                _2919 = frontier_phi_61_pred_3;
                _2917 = frontier_phi_61_pred_4;
                _2915 = frontier_phi_61_pred_5;
                uint _3064 = _3063 + 1u;
                if (_3064 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3057 = _2913;
                    _3058 = _2915;
                    _3059 = _2917;
                    _3060 = _2919;
                    _3061 = _2921;
                    _3062 = _2923;
                    _3063 = _3064;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
        }
        uvec4 _2926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2927 = _2926.z;
        uint _2929 = (_2927 >> 8u) & 15u;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        if (((4294967295u << _2929) & _2811) == 0u)
        {
            _3025 = _2912;
            _3027 = _2914;
            _3029 = _2916;
            _3031 = _2918;
            _3033 = _2920;
            _3035 = _2922;
        }
        else
        {
            float _3050 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
            float _3051 = _3050 * _2765;
            float _3052 = _3050 * _2766;
            float _3053 = _3050 * _2767;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2929 < ((_2927 >> 12u) & 15u))
            {
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3164 = _2912;
                float _3165 = _2914;
                float _3166 = _2916;
                float _3167 = _2918;
                float _3168 = _2920;
                float _3169 = _2922;
                uint _3170 = _2929;
                uint _3179;
                bool _3180;
                for (;;)
                {
                    _3179 = texelFetch(g_lightClassification, int((((_2805 << 5u) + (_2791 << 9u)) + (_3170 << 2u)) >> 2u)).x;
                    _3180 = _3179 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3180)
                    {
                        frontier_phi_67_pred = _3167;
                        frontier_phi_67_pred_1 = _3168;
                        frontier_phi_67_pred_2 = _3169;
                        frontier_phi_67_pred_3 = _3166;
                        frontier_phi_67_pred_4 = _3165;
                        frontier_phi_67_pred_5 = _3164;
                    }
                    else
                    {
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3377 = _3164;
                        float _3378 = _3165;
                        float _3379 = _3166;
                        float _3380 = _3167;
                        float _3381 = _3168;
                        float _3382 = _3169;
                        uint _3383 = _3179;
                        uint _3384;
                        vec4 _3409;
                        float _3410;
                        vec4 _3425;
                        vec3 _3437;
                        vec4 _3452;
                        vec4 _3467;
                        float _3513;
                        bool _3514;
                        for (;;)
                        {
                            uint _3394 = ((_3170 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3383));
                            _3384 = (_3383 + 4294967295u) & _3383;
                            uint _3396 = _3394 * 40u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3410 = _3409.w;
                            uint _3412 = (_3394 * 40u) + 4u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3394 * 40u) + 8u;
                            _3437 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x));
                            uint _3439 = (_3394 * 40u) + 16u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3394 * 40u) + 20u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3394 * 40u) + 24u;
                            vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3488 = (_3394 * 40u) + 28u;
                            vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            _3513 = fma(_2767, _3501.z, fma(_2766, _3501.y, _3501.x * _2765)) + _3501.w;
                            _3514 = !((fma(_2767, _3482.z, fma(_2766, _3482.y, _3482.x * _2765)) + _3482.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3514)
                            {
                                float _3541 = _3409.x - _2765;
                                float _3542 = _3409.y - _2766;
                                float _3543 = _3409.z - _2767;
                                float _3544 = dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543));
                                float _3547 = inversesqrt(_3544);
                                float _3548 = _3547 * _3541;
                                float _3549 = _3547 * _3542;
                                float _3550 = _3547 * _3543;
                                float _3554 = 1.0 - (_3544 / (_3410 * _3410));
                                float _4699 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3555 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3559 = sqrt(_3544) * _3425.w;
                                float _3561 = 1.39999997615814208984375 / (_3559 + 1.39999997615814208984375);
                                float _3562 = _3561 * _3561;
                                float _3565 = ((1.0 - _3562) * dot(vec3(_3548, _3549, _3550), vec3(_1047, _1050, _1053))) + _3562;
                                float _3568 = _3559 * _3559;
                                float _3572 = (fma(_2767, _3452.z, fma(_2766, _3452.y, _3452.x * _2765)) + _3452.w) / _3513;
                                float _3573 = (fma(_2767, _3467.z, fma(_2766, _3467.y, _3467.x * _2765)) + _3467.w) / _3513;
                                float _3577 = 1.0 - dot(vec2(_3572, _3573), vec2(_3572, _3573));
                                float _4715 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3579 = _3578 * (((isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0))) * _3555) / ((_3568 * 0.699999988079071044921875) + 1.0));
                                float _3591 = exp2(log2(1.0 / ((_3568 * 3.5) + 5.0)) * 0.25);
                                float _3592 = 1.0 - _1107;
                                float _3599 = sqrt(1.0 - ((1.0 - (_3592 * _3592)) * (1.0 - (_3591 * _3591))));
                                float _3600 = _3599 * _3599;
                                float _3601 = _3600 * _3600;
                                float _3602 = _3548 - _3051;
                                float _3603 = _3549 - _3052;
                                float _3604 = _3550 - _3053;
                                float _3608 = inversesqrt(dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604)));
                                float _3612 = dot(vec3(_1047, _1050, _1053), vec3((-0.0) - _3051, (-0.0) - _3052, (-0.0) - _3053));
                                float _4726 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3616 = dot(vec3(_1047, _1050, _1053), vec3(_3608 * _3602, _3608 * _3603, _3608 * _3604));
                                float _4737 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3619 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3623 = ((_3619 * _3619) * (_3601 + (-1.0))) + 1.0;
                                float _3624 = _3561 * _3600;
                                float _3625 = _3624 * _3624;
                                float _3631 = ((1.0 - _3625) * dot(vec3(_1047, _1050, _1053), vec3(_3548, _3549, _3550))) + _3625;
                                float _4748 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3632 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3633 = 1.0 - _3600;
                                float _3643 = (0.5 / (((_3632 * ((_3615 * _3633) + _3600)) + 9.9999999392252902907785028219223e-09) + (((_3632 * _3633) + _3600) * _3615))) * _3632;
                                float _4759 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3653 = (_3578 * _3555) * (((_3601 * 3.1415927410125732421875) * (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) / ((_3623 * _3623) * ((_3568 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3653 * _3437.x;
                                frontier_phi_73_pred_1 = _3653 * _3437.y;
                                frontier_phi_73_pred_2 = _3579 * _3425.z;
                                frontier_phi_73_pred_3 = _3579 * _3425.y;
                                frontier_phi_73_pred_4 = _3579 * _3425.x;
                                frontier_phi_73_pred_5 = _3653 * _3437.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3657 = frontier_phi_73_pred;
                            _3658 = frontier_phi_73_pred_1;
                            _3662 = frontier_phi_73_pred_2;
                            _3661 = frontier_phi_73_pred_3;
                            _3660 = frontier_phi_73_pred_4;
                            _3659 = frontier_phi_73_pred_5;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            _3369 = _3662 + _3382;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            _3366 = _3659 + _3379;
                            if (_3384 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3384;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3367;
                        frontier_phi_67_pred_1 = _3368;
                        frontier_phi_67_pred_2 = _3369;
                        frontier_phi_67_pred_3 = _3366;
                        frontier_phi_67_pred_4 = _3365;
                        frontier_phi_67_pred_5 = _3364;
                    }
                    _3032 = frontier_phi_67_pred;
                    _3034 = frontier_phi_67_pred_1;
                    _3036 = frontier_phi_67_pred_2;
                    _3030 = frontier_phi_67_pred_3;
                    _3028 = frontier_phi_67_pred_4;
                    _3026 = frontier_phi_67_pred_5;
                    uint _3171 = _3170 + 1u;
                    if (_3171 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3164 = _3026;
                        _3165 = _3028;
                        _3166 = _3030;
                        _3167 = _3032;
                        _3168 = _3034;
                        _3169 = _3036;
                        _3170 = _3171;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3034;
                frontier_phi_55_56_ladder_1 = _3036;
                frontier_phi_55_56_ladder_2 = _3032;
                frontier_phi_55_56_ladder_3 = _3030;
                frontier_phi_55_56_ladder_4 = _3028;
                frontier_phi_55_56_ladder_5 = _3026;
            }
            else
            {
                frontier_phi_55_56_ladder = _2920;
                frontier_phi_55_56_ladder_1 = _2922;
                frontier_phi_55_56_ladder_2 = _2918;
                frontier_phi_55_56_ladder_3 = _2916;
                frontier_phi_55_56_ladder_4 = _2914;
                frontier_phi_55_56_ladder_5 = _2912;
            }
            _3025 = frontier_phi_55_56_ladder_5;
            _3027 = frontier_phi_55_56_ladder_4;
            _3029 = frontier_phi_55_56_ladder_3;
            _3031 = frontier_phi_55_56_ladder_2;
            _3033 = frontier_phi_55_56_ladder;
            _3035 = frontier_phi_55_56_ladder_1;
        }
        float _3040 = isnan(1.0) ? _1091 : (isnan(_1091) ? 1.0 : min(_1091, 1.0));
        _2824 = (_3040 * _3031) + _2276;
        _2826 = (_3040 * _3033) + _2278;
        _2828 = (_3040 * _3035) + _2280;
        _2830 = ((_3025 * 0.039999999105930328369140625) * _3040) + _2609;
        _2832 = ((_3027 * 0.039999999105930328369140625) * _3040) + _2611;
        _2834 = ((_3029 * 0.039999999105930328369140625) * _3040) + _2613;
    }
    else
    {
        _2824 = _2276;
        _2826 = _2278;
        _2828 = _2280;
        _2830 = _2609;
        _2832 = _2611;
        _2834 = _2613;
    }
    float _4775 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _4786 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _4797 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    uint _2854 = _285 + 6u;
    float _2862 = _1028 / cbSceneParam._m0[86u].x;
    float _2863 = _1029 / cbSceneParam._m0[86u].y;
    vec4 _2877 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2862, _2863, (log2((isnan(cbSceneParam._m0[77u].w) ? _963 : (isnan(_963) ? cbSceneParam._m0[77u].w : min(_963, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2879 = _2877.x;
    float _2880 = _2877.y;
    float _2881 = _2877.z;
    float _2882 = _2877.w;
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    if (_963 > cbSceneParam._m0[78u].w)
    {
        float _2937 = isnan(_963) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _963 : min(cbSceneParam._m0[80u].w, _963));
        float _2938 = _2937 / _963;
        float _2949 = _2938 * _1013;
        float _2950 = _1014 * _2938;
        float _2951 = (-0.0) - _2950;
        float _2953 = _2938 * _1015;
        float _2955 = (cbSceneParam._m0[77u].w * _2951) / _2937;
        float _2956 = _2955 + cbSceneParam._m0[79u].w;
        float _2957 = cbSceneParam._m0[79u].w - _2950;
        float _2963 = sqrt(((_2949 * _2949) + (_2950 * _2950)) + (_2953 * _2953));
        float _2966 = (1.0 - (cbSceneParam._m0[77u].w / _2937)) * _2963;
        float _2971 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2973 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3126;
        if (abs((_2951 - _2955) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3126 = ((((_2956 > 0.0) ? exp2(_2971 * _2956) : (2.0 - exp2(_2973 * _2956))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2966;
        }
        else
        {
            float _3086 = 1.0 / cbSceneParam._m0[80u].x;
            float _3087 = isnan(_2957) ? _2956 : (isnan(_2956) ? _2957 : max(_2956, _2957));
            float _3088 = isnan(_2957) ? _2956 : (isnan(_2956) ? _2957 : min(_2956, _2957));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            float _3098 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : min(_3088, 0.0));
            _3126 = ((abs(_2963 / _2951) * cbSceneParam._m0[80u].y) * ((((_3097 - _3098) * 2.0) - ((exp2(_2971 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0)))) - exp2(_2971 * (isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))))) * _3086)) - ((exp2(_2973 * _3097) - exp2(_2973 * _3098)) * _3086))) + (_2966 * cbSceneParam._m0[80u].z);
        }
        vec4 _3128 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2862, _2863, 1.0), 0.0);
        float _3137 = exp2((_3126 * (-1.44269502162933349609375)) * (1.0 - _3128.w));
        float _3138 = log2(_3137);
        float _3154 = log2(_2882);
        _2975 = (exp2(_3154 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3138 * cbSceneParam._m0[78u].x)) * _3128.x) / cbSceneParam._m0[78u].x)) + _2879;
        _2977 = (exp2(_3154 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3138 * cbSceneParam._m0[78u].y)) * _3128.y) / cbSceneParam._m0[78u].y)) + _2880;
        _2979 = (exp2(_3154 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3138 * cbSceneParam._m0[78u].z)) * _3128.z) / cbSceneParam._m0[78u].z)) + _2881;
        _2981 = _3137 * _2882;
    }
    else
    {
        _2975 = _2879;
        _2977 = _2880;
        _2979 = _2881;
        _2981 = _2882;
    }
    float _2993 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2994 = _2993 == 3.0;
    float _2995 = log2(_2981);
    float _3002 = exp2(_2995 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2824 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1091))) + ((_2830 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1895)) * cbPerFrame._m0[3u].x));
    float _3003 = exp2(_2995 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2826 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1091))) + ((_2832 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1895)) * cbPerFrame._m0[3u].x));
    float _3004 = exp2(_2995 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2828 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1091))) + ((_2834 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1895)) * cbPerFrame._m0[3u].x));
    float _3013 = (_2993 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3013 * (_2994 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2975)));
    SV_Target.y = _3013 * (_2994 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2977)));
    SV_Target.z = _3013 * (_2994 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2979)));
    SV_Target.w = cbInstanceData._m0[_2854].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2854].w;
}


