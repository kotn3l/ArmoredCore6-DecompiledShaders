#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1529;
float _3887;
float _3888;
float _3889;
float _3890;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3899 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3910 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3921 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _372 = _367.x * cbMtdParam._m0[11u].x;
    float _373 = _367.y * cbMtdParam._m0[11u].y;
    float _374 = _367.z * cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _461 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _478 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _412.x) * 2.0) - ((((_449 - _461) * cbMtdParam._m0[24u].z) + _461) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3932 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _486 = (_479 * ((_393.x * cbMtdParam._m0[12u].x) - _372)) + _372;
    float _487 = (_479 * ((_393.y * cbMtdParam._m0[12u].y) - _373)) + _373;
    float _488 = (_479 * ((_393.z * cbMtdParam._m0[12u].z) - _374)) + _374;
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _527 = _525.x;
    float _537 = dot(vec4(_527, _525.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _551 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _412.y) * 2.0) - ((((_527 - _537) * cbMtdParam._m0[24u].z) + _537) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3943 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _562 = (_341.x * cbMtdParam._m0[9u].x) * ((_552 * ((_505.x * cbMtdParam._m0[13u].x) - _486)) + _486);
    float _563 = (_341.y * cbMtdParam._m0[9u].y) * ((_552 * ((_505.y * cbMtdParam._m0[13u].y) - _487)) + _487);
    float _564 = (_341.z * cbMtdParam._m0[9u].z) * ((_552 * ((_505.z * cbMtdParam._m0[13u].z) - _488)) + _488);
    float _568 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _562;
    float _571 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _563;
    float _574 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _564;
    float _582 = (((_562 - _568) * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) + _568) * 4.55000019073486328125;
    float _584 = (((_563 - _571) * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) + _571) * 4.55000019073486328125;
    float _586 = (((_564 - _574) * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) + _574) * 4.55000019073486328125;
    vec4 _603 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _647 = _645.x;
    float _648 = _645.y;
    float _649 = _645.z;
    float _656 = ((_628.x - _647) * _479) + _647;
    float _657 = ((_628.y - _648) * _479) + _648;
    float _658 = ((_628.z - _649) * _479) + _649;
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _683 = ((_670.z - _658) * _552) + _658;
    float _686 = ((((_670.x - _656) * _552) + _656) * 2.0) + (-1.0);
    float _687 = ((((_670.y - _657) * _552) + _657) * 2.0) + (-1.0);
    float _688 = dot(vec2(_686, _687), vec2(_686, _687));
    float _3954 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _693 = sqrt(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _723 = (_686 + ((((_603.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_711.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _724 = (_687 + ((((_603.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_711.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _727 = fma(_693, _254, fma(_724, _261, _723 * _247));
    float _730 = fma(_693, _255, fma(_724, _262, _723 * _248));
    float _733 = fma(_693, _256, fma(_724, _263, _723 * _249));
    float _737 = inversesqrt(dot(vec3(_727, _730, _733), vec3(_727, _730, _733)));
    vec4 _764 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _766 = _764.x;
    float _767 = 1.0 - _766;
    float _773 = (cbMtdParam._m0[19u].x + dot(vec4(_737 * _727, _737 * _730, _737 * _733, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_766 - _767) * cbMtdParam._m0[24u].w) + _767) * cbMtdParam._m0[21u].z);
    float _3965 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _774 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _776 = (-0.0) - cbMtdParam._m0[24u].x;
    float _778 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _778 : (isnan(_778) ? 1.0 : min(_778, 1.0));
    float _786 = _774 - ((_774 * TEXCOORD_8.x) * _779);
    float _787 = _774 - ((_774 * TEXCOORD_8.y) * _779);
    float _788 = _774 - ((_774 * TEXCOORD_8.z) * _779);
    float _795 = (_786 * (cbMtdParam._m0[17u].x - _582)) + _582;
    float _796 = (_787 * (cbMtdParam._m0[17u].y - _584)) + _584;
    float _797 = (_788 * (cbMtdParam._m0[17u].z - _586)) + _586;
    vec4 _809 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _811 = _809.x;
    float _812 = 1.0 - _811;
    float _838 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_811 - _812) * cbMtdParam._m0[24u].y) + _812) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3986 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _839 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _847 = ((((cbMtdParam._m0[10u].x - _795) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _839) + _795;
    float _848 = ((((cbMtdParam._m0[10u].y - _796) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _839) + _796;
    float _849 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _797)) * _839) + _797;
    float _854 = (((_603.z - _683) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _683;
    float _858 = ((_711.z - _854) * cbMtdParam._m0[19u].w) + _854;
    vec4 _872 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _879 = (_872.x * 2.0) + (-1.0);
    float _880 = (_872.y * 2.0) + (-1.0);
    float _881 = dot(vec2(_879, _880), vec2(_879, _880));
    float _3997 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _889 = ((_872.z - _858) * _786) + _858;
    float _892 = ((cbMtdParam._m0[23u].y - _889) * _839) + _889;
    vec4 _913 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _919 = (_913.x * 2.0) + (-1.0);
    float _920 = (_913.y * 2.0) + (-1.0);
    float _921 = dot(vec2(_919, _920), vec2(_919, _920));
    float _4008 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _936 = ((sqrt(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) - _693) * _788) + _693;
    float _939 = (((_879 - _723) * _786) + _723) + (cbMtdParam._m0[21u].x * _723);
    float _940 = (((_880 - _724) * _787) + _724) + (cbMtdParam._m0[21u].x * _724);
    float _951 = (((_919 - _939) + (_939 * cbMtdParam._m0[22u].z)) * _839) + _939;
    float _952 = (((_920 - _940) + (_940 * cbMtdParam._m0[22u].z)) * _839) + _940;
    float _953 = (_839 * (sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) - _936)) + _936;
    float _955 = cbMtdParam._m0[22u].x + _711.w;
    float _958 = fma(_953, _254, fma(_952, _261, _951 * _247));
    float _961 = fma(_953, _255, fma(_952, _262, _951 * _248));
    float _964 = fma(_953, _256, fma(_952, _263, _951 * _249));
    float _968 = inversesqrt(dot(vec3(_958, _961, _964), vec3(_958, _961, _964)));
    float _969 = _968 * _958;
    float _970 = _968 * _961;
    float _971 = _968 * _964;
    float _4019 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _972 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4041 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4052 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4063 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _990 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1040 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1030);
    float _1041 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1030);
    float _1042 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1030);
    float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
    float _1047 = _1040 * _1046;
    float _1048 = _1041 * _1046;
    float _1049 = _1042 * _1046;
    vec4 _1054 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1056 = _1054.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1210 = sqrt(((_1040 * _1040) + (_1041 * _1041)) + (_1042 * _1042));
        float _1216 = (cbMatDynParam._m0[5u].x * _1210) + cbMatDynParam._m0[5u].y;
        float _4074 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1221 = (cbMatDynParam._m0[5u].z * _1210) + cbMatDynParam._m0[5u].w;
        float _4085 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) - _1217)) + _1217) < ((_1056 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1067 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1068 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1086 = fma(_971, cbSceneParam._m0[5u].z, fma(_970, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _969));
    float _1089 = fma(_971, cbSceneParam._m0[6u].z, fma(_970, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _969));
    float _1092 = fma(_971, cbSceneParam._m0[7u].z, fma(_970, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _969));
    uint _1105 = _285 + 9u;
    uint _1106 = _1105 + uint(cbMatDynParam._m0[0u].w);
    float _1112 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_1106].x;
    float _1113 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_1106].y;
    float _1114 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_1106].z;
    float _4096 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1115 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1116 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1117 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    vec4 _1126 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1067, cbSceneParam._m0[86u].y * _1068));
    float _1130 = ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * TEXCOORD_5.w) * _1126.x;
    float _1131 = dot(vec3(_969, _970, _971), vec3(_1047, _1048, _1049));
    float _1134 = _1131 * 2.0;
    float _1138 = (_1134 * _969) - _1047;
    float _1139 = (_1134 * _970) - _1048;
    float _1140 = (_1134 * _971) - _1049;
    float _1144 = abs(dot(vec3(_1047, _1048, _1049), vec3(_969, _970, _971)));
    float _4129 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1146 = sqrt(_972);
    float _1159 = exp2((_1146 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1146 * 3.0));
    float _1191 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1195 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1528;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1253 = fma(_1199, cbModelParam._m0[26u].z, fma(_1195, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1191));
        float _1257 = fma(_1199, cbModelParam._m0[27u].z, fma(_1195, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1191));
        float _1261 = fma(_1199, cbModelParam._m0[28u].z, fma(_1195, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1191));
        float _1286 = _1191 + _969;
        float _1287 = _1195 + _970;
        float _1288 = _1199 + _971;
        float _1298 = fma(_1288, cbModelParam._m0[26u].z, fma(_1287, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1286)) - _1253;
        float _1299 = fma(_1288, cbModelParam._m0[27u].z, fma(_1287, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1286)) - _1257;
        float _1300 = fma(_1288, cbModelParam._m0[28u].z, fma(_1287, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1286)) - _1261;
        float _1304 = inversesqrt(dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300)));
        float _1317 = ((_1304 * _1298) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1253 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1304 * _1299) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1257 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1304 * _1300) / cbModelParam._m0[34u].z) + ((((((_1261 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        float _1356 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1322.x + (-0.5));
        float _1358 = _1356 * (_1322.y + (-0.5));
        float _1359 = _1356 * (_1322.z + (-0.5));
        float _1366 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1329.x + (-0.5));
        float _1368 = _1366 * (_1329.y + (-0.5));
        float _1369 = _1366 * (_1329.z + (-0.5));
        float _1376 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1336.x + (-0.5));
        float _1378 = _1376 * (_1336.y + (-0.5));
        float _1379 = _1376 * (_1336.z + (-0.5));
        float _1386 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1343.x + (-0.5));
        float _1388 = _1386 * (_1343.y + (-0.5));
        float _1389 = _1386 * (_1343.z + (-0.5));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = _1357 * 0.5;
        float _1394 = _1367 * 0.5;
        float _1395 = _1377 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1410 = (dot(vec3(_969, _970, _971), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1420 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4177 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1422 + 1.0))) + _1427) * _1390;
        float _1437 = _1358 * 0.5;
        float _1438 = _1368 * 0.5;
        float _1439 = _1378 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_969, _970, _971), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4210 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1464 + 1.0))) + _1469) * _1391;
        float _1479 = _1359 * 0.5;
        float _1480 = _1369 * 0.5;
        float _1481 = _1379 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_969, _970, _971), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4243 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1506 + 1.0))) + _1511) * _1392;
        _1528 = _1359;
        _1530 = _1358;
        _1531 = _1357;
        _1532 = _1369;
        _1533 = _1368;
        _1534 = _1367;
        _1535 = _1379;
        _1536 = _1378;
        _1537 = _1377;
        _1538 = _1392;
        _1539 = _1391;
        _1540 = _1390;
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1529;
        _1530 = _1529;
        _1531 = _1529;
        _1532 = _1529;
        _1533 = _1529;
        _1534 = _1529;
        _1535 = _1529;
        _1536 = _1529;
        _1537 = _1529;
        _1538 = _1529;
        _1539 = _1529;
        _1540 = _1529;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1570 = fma(_1199, cbModelParam._m0[30u].z, fma(_1195, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191));
        float _1574 = fma(_1199, cbModelParam._m0[31u].z, fma(_1195, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191));
        float _1578 = fma(_1199, cbModelParam._m0[32u].z, fma(_1195, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191));
        float _1601 = _1191 + _969;
        float _1602 = _1195 + _970;
        float _1603 = _1199 + _971;
        float _1613 = fma(_1603, cbModelParam._m0[30u].z, fma(_1602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1601)) - _1570;
        float _1614 = fma(_1603, cbModelParam._m0[31u].z, fma(_1602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1601)) - _1574;
        float _1615 = fma(_1603, cbModelParam._m0[32u].z, fma(_1602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1601)) - _1578;
        float _1619 = inversesqrt(dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615)));
        float _1632 = ((_1619 * _1613) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1570 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1619 * _1614) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1574 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1619 * _1615) / cbModelParam._m0[35u].z) + ((((((_1578 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        float _1669 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1636.x + (-0.5));
        float _1671 = _1669 * (_1636.y + (-0.5));
        float _1672 = _1669 * (_1636.z + (-0.5));
        float _1679 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1643.x + (-0.5));
        float _1681 = _1679 * (_1643.y + (-0.5));
        float _1682 = _1679 * (_1643.z + (-0.5));
        float _1689 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1650.x + (-0.5));
        float _1691 = _1689 * (_1650.y + (-0.5));
        float _1692 = _1689 * (_1650.z + (-0.5));
        float _1699 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1657.x + (-0.5));
        float _1701 = _1699 * (_1657.y + (-0.5));
        float _1702 = _1699 * (_1657.z + (-0.5));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = _1670 * 0.5;
        float _1707 = _1680 * 0.5;
        float _1708 = _1690 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_969, _970, _971), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4306 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1733 + 1.0))) + _1738) * _1703;
        float _1748 = _1671 * 0.5;
        float _1749 = _1681 * 0.5;
        float _1750 = _1691 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_969, _970, _971), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4339 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1775 + 1.0))) + _1780) * _1704;
        float _1790 = _1672 * 0.5;
        float _1791 = _1682 * 0.5;
        float _1792 = _1692 * 0.5;
        float _1793 = dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792));
        float _1798 = (_1793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1793);
        float _1806 = (dot(vec3(_969, _970, _971), vec3(_1798 * _1790, _1798 * _1791, _1798 * _1792)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1817 = _1816 * 2.0;
        float _1821 = (1.0 - _1816) / (_1816 + 1.0);
        float _4372 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1831 = ((((1.0 - _1822) * (_1817 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1817 + 1.0))) + _1822) * _1705;
        _1839 = _1672;
        _1840 = _1671;
        _1841 = _1670;
        _1842 = _1682;
        _1843 = _1681;
        _1844 = _1680;
        _1845 = _1692;
        _1846 = _1691;
        _1847 = _1690;
        _1848 = _1705;
        _1849 = _1704;
        _1850 = _1703;
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)));
    }
    else
    {
        _1839 = _1529;
        _1840 = _1529;
        _1841 = _1529;
        _1842 = _1529;
        _1843 = _1529;
        _1844 = _1529;
        _1845 = _1529;
        _1846 = _1529;
        _1847 = _1529;
        _1848 = _1529;
        _1849 = _1529;
        _1850 = _1529;
        _1851 = 0.0;
        _1852 = 0.0;
        _1853 = 0.0;
    }
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1541)) + _1541;
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1542)) + _1542;
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1543)) + _1543;
    float _1886 = fma(_1865, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1863 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1865, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1863 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1865, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1863));
    float _1907 = _1138 * 0.5;
    float _1908 = _1139 * 0.5;
    float _1909 = _1140 * 0.5;
    float _1910 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1913 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1916 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1950;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1923 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1528, _1532, _1535, _1538));
        float _1927 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1530, _1533, _1536, _1539));
        float _1931 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1531, _1534, _1537, _1540));
        float _1938 = dot(vec4(cbModelParam._m0[39u]), vec4(_1907, _1908, _1909, 1.0));
        _1950 = dot(vec3(isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1938) ? 0.0 : (isnan(0.0) ? _1938 : max(0.0, _1938))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1950 = 1.0;
    }
    float _1961;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1952 = dot(vec4(cbModelParam._m0[40u]), vec4(_1907, _1908, _1909, 1.0));
        _1961 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1952) ? 0.0 : (isnan(0.0) ? _1952 : max(0.0, _1952))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1961 = 1.0;
    }
    float _1965 = (_1961 * cbModelParam._m0[1u].x) + (_1950 * (1.0 - cbModelParam._m0[1u].x));
    float _1975 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _972);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1975 : min(cbModelParam._m0[25u].z, _1975));
    float _2057;
    float _2059;
    float _2061;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2024 = fma(_1199, cbModelParam._m0[13u].z, fma(_1195, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1191)) + cbModelParam._m0[13u].w;
        float _2028 = fma(_1199, cbModelParam._m0[14u].z, fma(_1195, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1191)) + cbModelParam._m0[14u].w;
        float _2032 = fma(_1199, cbModelParam._m0[15u].z, fma(_1195, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1191)) + cbModelParam._m0[15u].w;
        float _2035 = fma(_1140, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138));
        float _2038 = fma(_1140, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138));
        float _2041 = fma(_1140, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138));
        float _2069;
        if (_2035 > 0.0)
        {
            _2069 = abs((1.0 - _2024) / _2035);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2024 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2069 = frontier_phi_17_15_ladder;
        }
        float _2270;
        if (_2038 > 0.0)
        {
            _2270 = abs((1.0 - _2028) / _2038);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2028 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2270 = frontier_phi_26_22_ladder;
        }
        float _2513;
        if (_2041 > 0.0)
        {
            _2513 = abs((1.0 - _2032) / _2041);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2032 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2513 = frontier_phi_38_33_ladder;
        }
        float _2515 = isnan(_2270) ? _2069 : (isnan(_2069) ? _2270 : min(_2069, _2270));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _2035) + _2024;
        float _2521 = (_2516 * _2038) + _2028;
        float _2522 = (_2516 * _2041) + _2032;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2523;
        float _2527 = _2523 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 > _2527) || ((_2521 < _2525) || ((_2520 < _2525) || (_2520 > _2527))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2522, cbModelParam._m0[9u].z, fma(_2521, cbModelParam._m0[9u].y, _2520 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2522, cbModelParam._m0[10u].z, fma(_2521, cbModelParam._m0[10u].y, _2520 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2522, cbModelParam._m0[11u].z, fma(_2521, cbModelParam._m0[11u].y, _2520 * cbModelParam._m0[11u].x))), _1976);
            frontier_phi_16_38_ladder = _2646.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2646.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2646.x * cbModelParam._m0[1u].y;
        }
        _2057 = frontier_phi_16_38_ladder_2;
        _2059 = frontier_phi_16_38_ladder_1;
        _2061 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2045 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1138, _1139, _1140), _1976);
        _2057 = _2045.x * cbModelParam._m0[1u].y;
        _2059 = _2045.y * cbModelParam._m0[1u].y;
        _2061 = _2045.z * cbModelParam._m0[1u].y;
    }
    float _2065 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _972);
    float _2066 = isnan(_2065) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2065 : min(cbModelParam._m0[25u].w, _2065));
    float _2156;
    float _2158;
    float _2160;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2120 = fma(_1199, cbModelParam._m0[21u].z, fma(_1195, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1191)) + cbModelParam._m0[21u].w;
        float _2124 = fma(_1199, cbModelParam._m0[22u].z, fma(_1195, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1191)) + cbModelParam._m0[22u].w;
        float _2128 = fma(_1199, cbModelParam._m0[23u].z, fma(_1195, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1191)) + cbModelParam._m0[23u].w;
        float _2131 = fma(_1140, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138));
        float _2134 = fma(_1140, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138));
        float _2137 = fma(_1140, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138));
        float _2275;
        if (_2131 > 0.0)
        {
            _2275 = abs((1.0 - _2120) / _2131);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2120 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2275 = frontier_phi_28_24_ladder;
        }
        float _2540;
        if (_2134 > 0.0)
        {
            _2540 = abs((1.0 - _2124) / _2134);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2124 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2540 = frontier_phi_40_35_ladder;
        }
        float _2745;
        if (_2137 > 0.0)
        {
            _2745 = abs((1.0 - _2128) / _2137);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2128 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2745 = frontier_phi_49_46_ladder;
        }
        float _2747 = isnan(_2540) ? _2275 : (isnan(_2275) ? _2540 : min(_2275, _2540));
        float _2748 = isnan(_2745) ? _2747 : (isnan(_2747) ? _2745 : min(_2747, _2745));
        float _2752 = (_2748 * _2131) + _2120;
        float _2753 = (_2748 * _2134) + _2124;
        float _2754 = (_2748 * _2137) + _2128;
        float _2755 = _2748 * 9.9999997473787516355514526367188e-05;
        float _2756 = (-1.0) - _2755;
        float _2758 = _2755 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2754 > _2758) || ((_2754 < _2756) || ((_2753 > _2758) || ((_2753 < _2756) || ((_2752 < _2756) || (_2752 > _2758))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2754, cbModelParam._m0[17u].z, fma(_2753, cbModelParam._m0[17u].y, _2752 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2754, cbModelParam._m0[18u].z, fma(_2753, cbModelParam._m0[18u].y, _2752 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2754, cbModelParam._m0[19u].z, fma(_2753, cbModelParam._m0[19u].y, _2752 * cbModelParam._m0[19u].x))), _2066);
            frontier_phi_25_49_ladder = _2953.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2953.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2953.x * cbModelParam._m0[1u].z;
        }
        _2156 = frontier_phi_25_49_ladder_2;
        _2158 = frontier_phi_25_49_ladder_1;
        _2160 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2140 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1138, _1139, _1140), _2066);
        _2156 = _2140.x * cbModelParam._m0[1u].z;
        _2158 = _2140.y * cbModelParam._m0[1u].z;
        _2160 = _2140.z * cbModelParam._m0[1u].z;
    }
    float _2172 = ((((1.0 - _1159) * ((_1146 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1159 * _1146)) * _1130;
    float _2173 = _2172 * ((cbModelParam._m0[1u].w * (_2156 - _2057)) + _2057);
    float _2174 = _2172 * ((cbModelParam._m0[1u].w * (_2158 - _2059)) + _2059);
    float _2175 = _2172 * ((cbModelParam._m0[1u].w * (_2160 - _2061)) + _2061);
    float _2178 = fma(_2175, cbSceneParam._m0[89u].z, fma(_2174, cbSceneParam._m0[89u].y, _2173 * cbSceneParam._m0[89u].x));
    float _2181 = fma(_2175, cbSceneParam._m0[90u].z, fma(_2174, cbSceneParam._m0[90u].y, _2173 * cbSceneParam._m0[90u].x));
    float _2184 = fma(_2175, cbSceneParam._m0[91u].z, fma(_2174, cbSceneParam._m0[91u].y, _2173 * cbSceneParam._m0[91u].x));
    uvec4 _2194 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2196 = _2194.x * 14u;
    uint _2197 = _2196 + 13u;
    float _2204 = _1130 + (-1.0);
    float _2209 = (cbLight._m0[_2197].x * _2204) + 1.0;
    float _2210 = (cbLight._m0[_2197].y * _2204) + 1.0;
    float _2211 = (cbLight._m0[_2197].z * _2204) + 1.0;
    float _2212 = (cbLight._m0[_2197].w * _2204) + 1.0;
    uint _2213 = _2196 + 5u;
    float _2219 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
    uint _2223 = _2196 + 4u;
    float _2229 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
    uint _2233 = _2196 | 1u;
    float _2244 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_969, _970, _971));
    float _2247 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_969, _970, _971));
    float _4508 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _4519 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2252 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * 0.3183098733425140380859375;
    float _2254 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * 0.3183098733425140380859375;
    float _2261 = ((cbLight._m0[_2213].x * _2219) * _2254) + ((cbLight._m0[_2223].x * _2229) * _2252);
    float _2262 = ((_2219 * cbLight._m0[_2213].y) * _2254) + ((_2229 * cbLight._m0[_2223].y) * _2252);
    float _2263 = ((_2219 * cbLight._m0[_2213].z) * _2254) + ((_2229 * cbLight._m0[_2223].z) * _2252);
    uvec4 _2267 = floatBitsToUint(cbLight._m0[_2196 + 12u]);
    bool _2269 = _2267.x == 0u;
    float _2280;
    float _2282;
    float _2284;
    if (_2269)
    {
        _2280 = _2261;
        _2282 = _2262;
        _2284 = _2263;
    }
    else
    {
        uint _2288 = _2196 + 6u;
        float _2304 = (dot(vec3(cbLight._m0[_2196 + 2u].xyz), vec3(_969, _970, _971)) * 0.5) + 0.5;
        float _2305 = _2304 * _2304;
        float _4530 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2306 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2307 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2280 = (((cbLight._m0[_2288].x * 0.3183098733425140380859375) * _2306) * _2307) + _2261;
        _2282 = (((cbLight._m0[_2288].y * 0.3183098733425140380859375) * _2306) * _2307) + _2262;
        _2284 = (((cbLight._m0[_2288].z * 0.3183098733425140380859375) * _2306) * _2307) + _2263;
    }
    bool _2287 = _2267.y == 0u;
    float _2325;
    float _2327;
    float _2329;
    if (_2287)
    {
        _2325 = _2280;
        _2327 = _2282;
        _2329 = _2284;
    }
    else
    {
        uint _2484 = _2196 + 7u;
        float _2500 = (dot(vec3(cbLight._m0[_2196 + 3u].xyz), vec3(_969, _970, _971)) * 0.5) + 0.5;
        float _2501 = _2500 * _2500;
        float _4546 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2502 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2503 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2325 = (((cbLight._m0[_2484].x * 0.3183098733425140380859375) * _2502) * _2503) + _2280;
        _2327 = (((cbLight._m0[_2484].y * 0.3183098733425140380859375) * _2502) * _2503) + _2282;
        _2329 = (((cbLight._m0[_2484].z * 0.3183098733425140380859375) * _2502) * _2503) + _2284;
    }
    uint _2332 = _2196 + 8u;
    float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _972) * 0.949999988079071044921875);
    float _2346 = _2345 * _2345;
    float _2347 = cbLight._m0[_2196].x + _1047;
    float _2348 = cbLight._m0[_2196].y + _1048;
    float _2349 = cbLight._m0[_2196].z + _1049;
    float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
    float _2354 = _2353 * _2347;
    float _2355 = _2353 * _2348;
    float _2356 = _2353 * _2349;
    float _2357 = dot(vec3(_969, _970, _971), vec3(cbLight._m0[_2196].xyz));
    float _4562 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _4573 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _2361 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2362 = dot(vec3(_969, _970, _971), vec3(_2354, _2355, _2356));
    float _4584 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2366 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2354, _2355, _2356));
    float _4595 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2370 = _2346 * _2346;
    float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
    float _2385 = (exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2386 = 1.0 - _2346;
    float _2397 = (0.5 / (((_2361 * ((_2360 * _2386) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2361 * _2386) + _2346) * _2360))) * _2360;
    float _4606 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2399 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
    uint _2410 = _2196 + 9u;
    float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _972) * 0.949999988079071044921875);
    float _2422 = _2421 * _2421;
    float _2423 = cbLight._m0[_2233].x + _1047;
    float _2424 = cbLight._m0[_2233].y + _1048;
    float _2425 = cbLight._m0[_2233].z + _1049;
    float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
    float _2430 = _2429 * _2423;
    float _2431 = _2429 * _2424;
    float _2432 = _2429 * _2425;
    float _2433 = dot(vec3(_969, _970, _971), vec3(cbLight._m0[_2233].xyz));
    float _4617 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2436 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2437 = dot(vec3(_969, _970, _971), vec3(_2430, _2431, _2432));
    float _4628 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _2441 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2430, _2431, _2432));
    float _4639 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2445 = _2422 * _2422;
    float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
    float _2458 = (exp2(log2(1.0 - (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2459 = 1.0 - _2422;
    float _2469 = (0.5 / (((_2361 * ((_2436 * _2459) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2361 * _2459) + _2422) * _2436))) * _2436;
    float _4650 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2471 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
    float _2481 = (((_2458 * cbLight._m0[_2410].x) * _2471) * _2219) + (((_2385 * cbLight._m0[_2332].x) * _2399) * _2229);
    float _2482 = (((_2458 * cbLight._m0[_2410].y) * _2471) * _2219) + (((_2385 * cbLight._m0[_2332].y) * _2399) * _2229);
    float _2483 = (((_2458 * cbLight._m0[_2410].z) * _2471) * _2219) + (((_2385 * cbLight._m0[_2332].z) * _2399) * _2229);
    float _2545;
    float _2547;
    float _2549;
    if (_2269)
    {
        _2545 = _2481;
        _2547 = _2482;
        _2549 = _2483;
    }
    else
    {
        uint _2551 = _2196 + 2u;
        uint _2555 = _2196 + 10u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _972) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _1047;
        float _2572 = cbLight._m0[_2551].y + _1048;
        float _2573 = cbLight._m0[_2551].z + _1049;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_969, _970, _971), vec3(cbLight._m0[_2551].xyz));
        float _4661 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2585 = dot(vec3(_969, _970, _971), vec3(_2578, _2579, _2580));
        float _4672 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4683 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2606 = (exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2607 = 1.0 - _2570;
        float _2617 = (0.5 / (((_2361 * ((_2584 * _2607) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2361 * _2607) + _2570) * _2584))) * _2584;
        float _4694 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2619 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2620 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2545 = (((_2606 * cbLight._m0[_2555].x) * _2619) * _2620) + _2481;
        _2547 = (((_2606 * cbLight._m0[_2555].y) * _2619) * _2620) + _2482;
        _2549 = (((_2606 * cbLight._m0[_2555].z) * _2619) * _2620) + _2483;
    }
    float _2655;
    float _2657;
    float _2659;
    if (_2287)
    {
        _2655 = _2545;
        _2657 = _2547;
        _2659 = _2549;
    }
    else
    {
        uint _2666 = _2196 + 3u;
        uint _2670 = _2196 + 11u;
        float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2666].w)) * _972) * 0.949999988079071044921875);
        float _2685 = _2684 * _2684;
        float _2686 = cbLight._m0[_2666].x + _1047;
        float _2687 = cbLight._m0[_2666].y + _1048;
        float _2688 = cbLight._m0[_2666].z + _1049;
        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
        float _2693 = _2692 * _2686;
        float _2694 = _2692 * _2687;
        float _2695 = _2692 * _2688;
        float _2696 = dot(vec3(_969, _970, _971), vec3(cbLight._m0[_2666].xyz));
        float _4710 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2700 = dot(vec3(_969, _970, _971), vec3(_2693, _2694, _2695));
        float _4721 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2704 = dot(vec3(cbLight._m0[_2666].xyz), vec3(_2693, _2694, _2695));
        float _4732 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2708 = _2685 * _2685;
        float _2712 = ((_2703 * _2703) * (_2708 + (-1.0))) + 1.0;
        float _2721 = (exp2(log2(1.0 - (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2722 = 1.0 - _2685;
        float _2732 = (0.5 / (((_2361 * ((_2699 * _2722) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2361 * _2722) + _2685) * _2699))) * _2699;
        float _4743 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2734 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2708 / ((_2712 * _2712) * 3.141590118408203125));
        float _2735 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2655 = (((_2721 * cbLight._m0[_2670].x) * _2734) * _2735) + _2545;
        _2657 = (((_2721 * cbLight._m0[_2670].y) * _2734) * _2735) + _2547;
        _2659 = (((_2721 * cbLight._m0[_2670].z) * _2734) * _2735) + _2549;
    }
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    if (_2194.y == 0u)
    {
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2810;
        float _2812 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2810;
        float _2813 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2810;
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.x;
        uint _2837 = uint((float(_2825.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1068) / _2826))) + floor(float(uint(cbSceneParam._m0[85u].x * _1067) / _2826)));
        float _2847 = (log2(_2813 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2848 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        uint _2851 = uint(isnan(14.0) ? _2848 : (isnan(_2848) ? 14.0 : min(_2848, 14.0)));
        uvec4 _2856 = texelFetch(g_lightClusterGridBuffer, int(((_2851 << 2u) + (_2837 << 6u)) >> 2u));
        uint _2857 = _2856.x;
        uint _2858 = _2825.z;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((((1u << ((_2858 >> 4u) & 15u)) + 4294967295u) & _2857) == 0u) || ((_2858 & 240u) == 0u))
        {
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
        }
        else
        {
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            uint _3116 = 0u;
            uint _3125;
            bool _3126;
            for (;;)
            {
                _3125 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                _3126 = _3125 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3126)
                {
                    frontier_phi_66_pred = _3110;
                    frontier_phi_66_pred_1 = _3115;
                    frontier_phi_66_pred_2 = _3114;
                    frontier_phi_66_pred_3 = _3113;
                    frontier_phi_66_pred_4 = _3112;
                    frontier_phi_66_pred_5 = _3111;
                }
                else
                {
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    uint _3261;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3125;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    for (;;)
                    {
                        uint _3265 = uint(findLSB(_3261)) + (_3116 << 5u);
                        uint _3262 = (_3261 + 4294967295u) & _3261;
                        uint _3267 = _3265 * 48u;
                        vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 3u)).x));
                        uint _3287 = (_3265 * 48u) + 4u;
                        vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3287)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 3u)).x));
                        uint _3306 = (_3265 * 48u) + 8u;
                        vec3 _3317 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x));
                        float _3321 = _3281.x - _2811;
                        float _3322 = _3281.y - _2812;
                        float _3323 = _3281.z - _2813;
                        float _3324 = dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323));
                        float _3327 = inversesqrt(_3324);
                        float _3328 = _3327 * _3321;
                        float _3329 = _3327 * _3322;
                        float _3330 = _3327 * _3323;
                        float _3331 = dot(vec3(_1086, _1089, _1092), vec3(_3328, _3329, _3330));
                        float _3336 = 1.0 - (_3324 * _3281.w);
                        float _4769 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3337 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3338 = sqrt(_3324) * _3300.w;
                        float _3341 = 1.39999997615814208984375 / (_3338 + 1.39999997615814208984375);
                        float _3342 = _3341 * _3341;
                        float _3345 = ((1.0 - _3342) * _3331) + _3342;
                        float _3348 = _3338 * _3338;
                        float _3352 = ((isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0))) * _3337) / ((_3348 * 0.699999988079071044921875) + 1.0);
                        float _3356 = (-0.0) - _2811;
                        float _3357 = (-0.0) - _2812;
                        float _3358 = (-0.0) - _2813;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3363 = _3362 * _3356;
                        float _3364 = _3362 * _3357;
                        float _3365 = _3362 * _3358;
                        float _3373 = exp2(log2(1.0 / ((_3348 * 3.5) + 5.0)) * 0.25);
                        float _3374 = 1.0 - _1146;
                        float _3381 = sqrt(1.0 - ((1.0 - (_3374 * _3374)) * (1.0 - (_3373 * _3373))));
                        float _3382 = _3381 * _3381;
                        float _3383 = _3382 * _3382;
                        float _3384 = _3363 + _3328;
                        float _3385 = _3364 + _3329;
                        float _3386 = _3365 + _3330;
                        float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
                        float _3394 = dot(vec3(_1086, _1089, _1092), vec3(_3363, _3364, _3365));
                        float _4785 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3397 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3398 = dot(vec3(_1086, _1089, _1092), vec3(_3390 * _3384, _3390 * _3385, _3390 * _3386));
                        float _4796 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3401 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3405 = ((_3401 * _3401) * (_3383 + (-1.0))) + 1.0;
                        float _3406 = _3341 * _3382;
                        float _3407 = _3406 * _3406;
                        float _3410 = ((1.0 - _3407) * _3331) + _3407;
                        float _4807 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3411 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3412 = 1.0 - _3382;
                        float _3422 = (0.5 / (((_3411 * ((_3397 * _3412) + _3382)) + 9.9999999392252902907785028219223e-09) + (((_3411 * _3412) + _3382) * _3397))) * _3411;
                        float _4818 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3433 = (((_3383 * 3.1415927410125732421875) * (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)))) / ((_3405 * _3405) * ((_3348 * 2.1991131305694580078125) + 3.141590118408203125))) * _3337;
                        _3185 = (_3352 * _3300.x) + _3258;
                        _3186 = (_3352 * _3300.y) + _3259;
                        _3187 = (_3352 * _3300.z) + _3260;
                        _3182 = (_3433 * _3317.x) + _3255;
                        _3183 = (_3433 * _3317.y) + _3256;
                        _3184 = (_3433 * _3317.z) + _3257;
                        if (_3262 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3262;
                        }
                    }
                    frontier_phi_66_pred = _3182;
                    frontier_phi_66_pred_1 = _3187;
                    frontier_phi_66_pred_2 = _3186;
                    frontier_phi_66_pred_3 = _3185;
                    frontier_phi_66_pred_4 = _3184;
                    frontier_phi_66_pred_5 = _3183;
                }
                _2959 = frontier_phi_66_pred;
                _2969 = frontier_phi_66_pred_1;
                _2967 = frontier_phi_66_pred_2;
                _2965 = frontier_phi_66_pred_3;
                _2963 = frontier_phi_66_pred_4;
                _2961 = frontier_phi_66_pred_5;
                uint _3117 = _3116 + 1u;
                if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3110 = _2959;
                    _3111 = _2961;
                    _3112 = _2963;
                    _3113 = _2965;
                    _3114 = _2967;
                    _3115 = _2969;
                    _3116 = _3117;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
        }
        uvec4 _2972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2973 = _2972.z;
        uint _2975 = (_2973 >> 8u) & 15u;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((4294967295u << _2975) & _2857) == 0u)
        {
            _3078 = _2958;
            _3080 = _2960;
            _3082 = _2962;
            _3084 = _2964;
            _3086 = _2966;
            _3088 = _2968;
        }
        else
        {
            float _3103 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
            float _3104 = _3103 * _2811;
            float _3105 = _3103 * _2812;
            float _3106 = _3103 * _2813;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2975 < ((_2973 >> 12u) & 15u))
            {
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3238 = _2958;
                float _3239 = _2960;
                float _3240 = _2962;
                float _3241 = _2964;
                float _3242 = _2966;
                float _3243 = _2968;
                uint _3244 = _2975;
                uint _3253;
                bool _3254;
                for (;;)
                {
                    _3253 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3244 << 2u)) >> 2u)).x;
                    _3254 = _3253 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3254)
                    {
                        frontier_phi_77_pred = _3243;
                        frontier_phi_77_pred_1 = _3242;
                        frontier_phi_77_pred_2 = _3241;
                        frontier_phi_77_pred_3 = _3240;
                        frontier_phi_77_pred_4 = _3239;
                        frontier_phi_77_pred_5 = _3238;
                    }
                    else
                    {
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3460 = _3238;
                        float _3461 = _3239;
                        float _3462 = _3240;
                        float _3463 = _3241;
                        float _3464 = _3242;
                        float _3465 = _3243;
                        uint _3466 = _3253;
                        uint _3467;
                        vec4 _3492;
                        float _3493;
                        vec4 _3508;
                        vec3 _3520;
                        vec4 _3535;
                        vec4 _3550;
                        float _3596;
                        bool _3597;
                        for (;;)
                        {
                            uint _3477 = ((_3244 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3466));
                            _3467 = (_3466 + 4294967295u) & _3466;
                            uint _3479 = _3477 * 40u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3493 = _3492.w;
                            uint _3495 = (_3477 * 40u) + 4u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3477 * 40u) + 8u;
                            _3520 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x));
                            uint _3522 = (_3477 * 40u) + 16u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3477 * 40u) + 20u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3477 * 40u) + 24u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3571 = (_3477 * 40u) + 28u;
                            vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3596 = fma(_2813, _3584.z, fma(_2812, _3584.y, _3584.x * _2811)) + _3584.w;
                            _3597 = !((fma(_2813, _3565.z, fma(_2812, _3565.y, _3565.x * _2811)) + _3565.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3597)
                            {
                                float _3624 = _3492.x - _2811;
                                float _3625 = _3492.y - _2812;
                                float _3626 = _3492.z - _2813;
                                float _3627 = dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626));
                                float _3630 = inversesqrt(_3627);
                                float _3631 = _3630 * _3624;
                                float _3632 = _3630 * _3625;
                                float _3633 = _3630 * _3626;
                                float _3637 = 1.0 - (_3627 / (_3493 * _3493));
                                float _4829 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3642 = sqrt(_3627) * _3508.w;
                                float _3644 = 1.39999997615814208984375 / (_3642 + 1.39999997615814208984375);
                                float _3645 = _3644 * _3644;
                                float _3648 = ((1.0 - _3645) * dot(vec3(_3631, _3632, _3633), vec3(_1086, _1089, _1092))) + _3645;
                                float _3651 = _3642 * _3642;
                                float _3655 = (fma(_2813, _3535.z, fma(_2812, _3535.y, _3535.x * _2811)) + _3535.w) / _3596;
                                float _3656 = (fma(_2813, _3550.z, fma(_2812, _3550.y, _3550.x * _2811)) + _3550.w) / _3596;
                                float _3660 = 1.0 - dot(vec2(_3655, _3656), vec2(_3655, _3656));
                                float _4845 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3662 = _3661 * (((isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0))) * _3638) / ((_3651 * 0.699999988079071044921875) + 1.0));
                                float _3674 = exp2(log2(1.0 / ((_3651 * 3.5) + 5.0)) * 0.25);
                                float _3675 = 1.0 - _1146;
                                float _3682 = sqrt(1.0 - ((1.0 - (_3675 * _3675)) * (1.0 - (_3674 * _3674))));
                                float _3683 = _3682 * _3682;
                                float _3684 = _3683 * _3683;
                                float _3685 = _3631 - _3104;
                                float _3686 = _3632 - _3105;
                                float _3687 = _3633 - _3106;
                                float _3691 = inversesqrt(dot(vec3(_3685, _3686, _3687), vec3(_3685, _3686, _3687)));
                                float _3695 = dot(vec3(_1086, _1089, _1092), vec3((-0.0) - _3104, (-0.0) - _3105, (-0.0) - _3106));
                                float _4856 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3698 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3699 = dot(vec3(_1086, _1089, _1092), vec3(_3691 * _3685, _3691 * _3686, _3691 * _3687));
                                float _4867 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3702 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3706 = ((_3702 * _3702) * (_3684 + (-1.0))) + 1.0;
                                float _3707 = _3644 * _3683;
                                float _3708 = _3707 * _3707;
                                float _3714 = ((1.0 - _3708) * dot(vec3(_1086, _1089, _1092), vec3(_3631, _3632, _3633))) + _3708;
                                float _4878 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3716 = 1.0 - _3683;
                                float _3726 = (0.5 / (((_3715 * ((_3698 * _3716) + _3683)) + 9.9999999392252902907785028219223e-09) + (((_3715 * _3716) + _3683) * _3698))) * _3715;
                                float _4889 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3736 = (_3661 * _3638) * (((_3684 * 3.1415927410125732421875) * (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) / ((_3706 * _3706) * ((_3651 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3662 * _3508.y;
                                frontier_phi_83_pred_1 = _3662 * _3508.x;
                                frontier_phi_83_pred_2 = _3736 * _3520.z;
                                frontier_phi_83_pred_3 = _3736 * _3520.y;
                                frontier_phi_83_pred_4 = _3736 * _3520.x;
                                frontier_phi_83_pred_5 = _3662 * _3508.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3744 = frontier_phi_83_pred;
                            _3743 = frontier_phi_83_pred_1;
                            _3742 = frontier_phi_83_pred_2;
                            _3741 = frontier_phi_83_pred_3;
                            _3740 = frontier_phi_83_pred_4;
                            _3745 = frontier_phi_83_pred_5;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            if (_3467 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3467;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3452;
                        frontier_phi_77_pred_1 = _3451;
                        frontier_phi_77_pred_2 = _3450;
                        frontier_phi_77_pred_3 = _3449;
                        frontier_phi_77_pred_4 = _3448;
                        frontier_phi_77_pred_5 = _3447;
                    }
                    _3089 = frontier_phi_77_pred;
                    _3087 = frontier_phi_77_pred_1;
                    _3085 = frontier_phi_77_pred_2;
                    _3083 = frontier_phi_77_pred_3;
                    _3081 = frontier_phi_77_pred_4;
                    _3079 = frontier_phi_77_pred_5;
                    uint _3245 = _3244 + 1u;
                    if (_3245 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3238 = _3079;
                        _3239 = _3081;
                        _3240 = _3083;
                        _3241 = _3085;
                        _3242 = _3087;
                        _3243 = _3089;
                        _3244 = _3245;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3083;
                frontier_phi_58_59_ladder_1 = _3089;
                frontier_phi_58_59_ladder_2 = _3087;
                frontier_phi_58_59_ladder_3 = _3085;
                frontier_phi_58_59_ladder_4 = _3081;
                frontier_phi_58_59_ladder_5 = _3079;
            }
            else
            {
                frontier_phi_58_59_ladder = _2962;
                frontier_phi_58_59_ladder_1 = _2968;
                frontier_phi_58_59_ladder_2 = _2966;
                frontier_phi_58_59_ladder_3 = _2964;
                frontier_phi_58_59_ladder_4 = _2960;
                frontier_phi_58_59_ladder_5 = _2958;
            }
            _3078 = frontier_phi_58_59_ladder_5;
            _3080 = frontier_phi_58_59_ladder_4;
            _3082 = frontier_phi_58_59_ladder;
            _3084 = frontier_phi_58_59_ladder_3;
            _3086 = frontier_phi_58_59_ladder_2;
            _3088 = frontier_phi_58_59_ladder_1;
        }
        float _3093 = isnan(1.0) ? _1130 : (isnan(_1130) ? 1.0 : min(_1130, 1.0));
        _2870 = (_3093 * _3084) + _2325;
        _2872 = (_3093 * _3086) + _2327;
        _2874 = (_3093 * _3088) + _2329;
        _2876 = ((_3078 * 0.039999999105930328369140625) * _3093) + _2655;
        _2878 = ((_3080 * 0.039999999105930328369140625) * _3093) + _2657;
        _2880 = ((_3082 * 0.039999999105930328369140625) * _3093) + _2659;
    }
    else
    {
        _2870 = _2325;
        _2872 = _2327;
        _2874 = _2329;
        _2876 = _2655;
        _2878 = _2657;
        _2880 = _2659;
    }
    float _4905 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _4916 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _4927 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2897 = ((isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2870 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1130))) + ((_2876 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    float _2898 = ((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2872 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1130))) + ((_2878 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    float _2899 = ((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2874 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1130))) + ((_2880 + ((isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    uint _2900 = _285 + 6u;
    float _2908 = _1067 / cbSceneParam._m0[86u].x;
    float _2909 = _1068 / cbSceneParam._m0[86u].y;
    vec4 _2923 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, (log2((isnan(cbSceneParam._m0[77u].w) ? _990 : (isnan(_990) ? cbSceneParam._m0[77u].w : min(_990, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2925 = _2923.x;
    float _2926 = _2923.y;
    float _2927 = _2923.z;
    float _2928 = _2923.w;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_990 > cbSceneParam._m0[78u].w)
    {
        float _2983 = isnan(_990) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _990 : min(cbSceneParam._m0[80u].w, _990));
        float _2984 = _2983 / _990;
        float _2995 = _2984 * _1040;
        float _2996 = _1041 * _2984;
        float _2997 = (-0.0) - _2996;
        float _2998 = _2984 * _1042;
        float _3000 = (cbSceneParam._m0[77u].w * _2997) / _2983;
        float _3001 = _3000 + cbSceneParam._m0[79u].w;
        float _3002 = cbSceneParam._m0[79u].w - _2996;
        float _3008 = sqrt(((_2995 * _2995) + (_2996 * _2996)) + (_2998 * _2998));
        float _3011 = (1.0 - (cbSceneParam._m0[77u].w / _2983)) * _3008;
        float _3016 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3018 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3195;
        if (abs((_2997 - _3000) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3195 = ((((_3001 > 0.0) ? exp2(_3016 * _3001) : (2.0 - exp2(_3018 * _3001))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3011;
        }
        else
        {
            float _3139 = 1.0 / cbSceneParam._m0[80u].x;
            float _3140 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : max(_3001, _3002));
            float _3141 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : min(_3001, _3002));
            float _3150 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : min(_3140, 0.0));
            float _3151 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : min(_3141, 0.0));
            _3195 = ((abs(_3008 / _2997) * cbSceneParam._m0[80u].y) * ((((_3150 - _3151) * 2.0) - ((exp2(_3016 * (isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0)))) - exp2(_3016 * (isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))))) * _3139)) - ((exp2(_3018 * _3150) - exp2(_3018 * _3151)) * _3139))) + (_3011 * cbSceneParam._m0[80u].z);
        }
        vec4 _3197 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, 1.0), 0.0);
        float _3206 = exp2((_3195 * (-1.44269502162933349609375)) * (1.0 - _3197.w));
        float _3207 = log2(_3206);
        float _3223 = log2(_2928);
        _3020 = (exp2(_3223 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].x)) * _3197.x) / cbSceneParam._m0[78u].x)) + _2925;
        _3022 = (exp2(_3223 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].y)) * _3197.y) / cbSceneParam._m0[78u].y)) + _2926;
        _3024 = (exp2(_3223 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].z)) * _3197.z) / cbSceneParam._m0[78u].z)) + _2927;
        _3026 = _3206 * _2928;
    }
    else
    {
        _3020 = _2925;
        _3022 = _2926;
        _3024 = _2927;
        _3026 = _2928;
    }
    bool _3233;
    vec4 _3036;
    vec4 _3058;
    float _3060;
    float _3064;
    float _3065;
    float _3066;
    float _3067;
    bool _3077;
    for (;;)
    {
        _3036 = cbMatDynParam._m0[0u];
        float _3038 = roundEven(_3036.y);
        bool _3039 = _3038 == 3.0;
        float _3040 = log2(_3026);
        float _3047 = exp2(_3040 * cbSceneParam._m0[78u].x) * _2897;
        float _3048 = exp2(_3040 * cbSceneParam._m0[78u].y) * _2898;
        float _3049 = exp2(_3040 * cbSceneParam._m0[78u].z) * _2899;
        float _3056 = _1056 + (-0.5);
        _3058 = cbMtdParam._m0[1u];
        _3060 = _3058.y * _3056;
        float _3063 = (_3038 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3064 = _3063 * (_3039 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3020)));
        _3065 = _3063 * (_3039 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3022)));
        _3066 = _3063 * (_3039 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3024)));
        _3067 = _3056 * 0.999000012874603271484375;
        _3077 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3077)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3067) < 0.5)
            {
                _3233 = true;
                break;
            }
        }
        uint _3174 = _1105 + uint(_3036.w);
        if ((cbInstanceData._m0[_3174].w < 1.0) && ((cbInstanceData._m0[_3174].w + _3067) < 0.5))
        {
            _3233 = true;
            break;
        }
        if ((_3060 + 1.0) < _3058.x)
        {
            _3233 = true;
            break;
        }
        _3233 = false;
        break;
    }
    float _3438;
    if (_3233)
    {
        discard_state = true;
        _3438 = 0.0;
    }
    else
    {
        _3438 = cbInstanceData._m0[_2900].w;
    }
    SV_Target.x = _3064;
    SV_Target.y = _3065;
    SV_Target.z = _3066;
    SV_Target.w = _3438;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2900].w;
    discard_exit();
}


