#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1163;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _298 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _298.x * cbMtdParam._m0[11u].x;
    float _304 = _298.y * cbMtdParam._m0[11u].y;
    float _305 = _298.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3753 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _423 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _274.x) * ((_410 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303);
    float _426 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _274.y) * ((_410 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304);
    float _429 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _274.z) * ((_410 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305);
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _464 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _466 = _464.x;
    float _467 = _464.y;
    float _468 = _464.z;
    float _477 = ((_447.z - _468) * _410) + _468;
    float _480 = ((((_447.x - _466) * _410) + _466) * 2.0) + (-1.0);
    float _482 = ((((_447.y - _467) * _410) + _467) * 2.0) + (-1.0);
    float _483 = dot(vec2(_480, _482), vec2(_480, _482));
    float _3764 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))));
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _516 = (((_504.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _480;
    float _517 = (((_504.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _482;
    float _520 = fma(_488, _222, fma(_517, _229, _516 * _215));
    float _523 = fma(_488, _223, fma(_517, _230, _516 * _216));
    float _526 = fma(_488, _224, fma(_517, _231, _516 * _217));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _559 = _557.x;
    float _560 = 1.0 - _559;
    float _566 = (cbMtdParam._m0[19u].x + dot(vec4(_530 * _520, _530 * _523, _530 * _526, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_559 - _560) * cbMtdParam._m0[24u].w) + _560) * cbMtdParam._m0[21u].z);
    float _3775 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _574 = (_567 * (cbMtdParam._m0[17u].x - _423)) + _423;
    float _575 = (_567 * (cbMtdParam._m0[17u].y - _426)) + _426;
    float _576 = (_567 * (cbMtdParam._m0[17u].z - _429)) + _429;
    float _580 = (cbMtdParam._m0[19u].w * (_504.z - _477)) + _477;
    vec4 _593 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _600 = (_593.x * 2.0) + (-1.0);
    float _601 = (_593.y * 2.0) + (-1.0);
    float _602 = dot(vec2(_600, _601), vec2(_600, _601));
    float _3786 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _610 = ((_593.z - _580) * _567) + _580;
    float _620 = ((sqrt(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) - _488) * _567) + _488;
    float _623 = (((_600 - _516) * _567) + _516) + (cbMtdParam._m0[21u].x * _516);
    float _624 = (((_601 - _517) * _567) + _517) + (cbMtdParam._m0[21u].x * _517);
    float _628 = cbMtdParam._m0[22u].x + _504.w;
    float _631 = fma(_620, _222, fma(_624, _229, _623 * _215));
    float _634 = fma(_620, _223, fma(_624, _230, _623 * _216));
    float _637 = fma(_620, _224, fma(_624, _231, _623 * _217));
    float _641 = inversesqrt(dot(vec3(_631, _634, _637), vec3(_631, _634, _637)));
    float _642 = _641 * _631;
    float _643 = _641 * _634;
    float _644 = _641 * _637;
    float _3797 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _645 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3819 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3830 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3841 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _663 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _714 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _704);
    float _715 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _704);
    float _716 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _704);
    float _720 = inversesqrt(dot(vec3(_714, _715, _716), vec3(_714, _715, _716)));
    float _721 = _714 * _720;
    float _722 = _715 * _720;
    float _723 = _716 * _720;
    float _729 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _730 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _748 = fma(_644, cbSceneParam._m0[5u].z, fma(_643, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _642));
    float _751 = fma(_644, cbSceneParam._m0[6u].z, fma(_643, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _642));
    float _754 = fma(_644, cbSceneParam._m0[7u].z, fma(_643, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _642));
    uint _768 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _774 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * cbInstanceData._m0[_768].x;
    float _775 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * cbInstanceData._m0[_768].y;
    float _776 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_768].z;
    float _3852 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    vec4 _788 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _729, cbSceneParam._m0[86u].y * _730));
    float _792 = ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * TEXCOORD_5.w) * _788.x;
    float _793 = dot(vec3(_642, _643, _644), vec3(_721, _722, _723));
    float _796 = _793 * 2.0;
    float _800 = (_796 * _642) - _721;
    float _801 = (_796 * _643) - _722;
    float _802 = (_796 * _644) - _723;
    float _806 = abs(dot(vec3(_721, _722, _723), vec3(_642, _643, _644)));
    float _3885 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _808 = sqrt(_645);
    float _821 = exp2((_808 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_808 * 3.0));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1162;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _887 = fma(_861, cbModelParam._m0[26u].z, fma(_857, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853));
        float _891 = fma(_861, cbModelParam._m0[27u].z, fma(_857, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853));
        float _895 = fma(_861, cbModelParam._m0[28u].z, fma(_857, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853));
        float _920 = _853 + _642;
        float _921 = _857 + _643;
        float _922 = _861 + _644;
        float _932 = fma(_922, cbModelParam._m0[26u].z, fma(_921, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920)) - _887;
        float _933 = fma(_922, cbModelParam._m0[27u].z, fma(_921, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920)) - _891;
        float _934 = fma(_922, cbModelParam._m0[28u].z, fma(_921, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920)) - _895;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_887 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_891 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[34u].z) + ((((((_895 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _990 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_956.x + (-0.5));
        float _992 = _990 * (_956.y + (-0.5));
        float _993 = _990 * (_956.z + (-0.5));
        float _1000 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_963.x + (-0.5));
        float _1002 = _1000 * (_963.y + (-0.5));
        float _1003 = _1000 * (_963.z + (-0.5));
        float _1010 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_970.x + (-0.5));
        float _1012 = _1010 * (_970.y + (-0.5));
        float _1013 = _1010 * (_970.z + (-0.5));
        float _1020 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_977.x + (-0.5));
        float _1022 = _1020 * (_977.y + (-0.5));
        float _1023 = _1020 * (_977.z + (-0.5));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = _991 * 0.5;
        float _1028 = _1001 * 0.5;
        float _1029 = _1011 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1044 = (dot(vec3(_642, _643, _644), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1054 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3933 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1056 + 1.0))) + _1061) * _1024;
        float _1071 = _992 * 0.5;
        float _1072 = _1002 * 0.5;
        float _1073 = _1012 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_642, _643, _644), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3966 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1098 + 1.0))) + _1103) * _1025;
        float _1113 = _993 * 0.5;
        float _1114 = _1003 * 0.5;
        float _1115 = _1013 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_642, _643, _644), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3999 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1140 + 1.0))) + _1145) * _1026;
        _1162 = _993;
        _1164 = _992;
        _1165 = _991;
        _1166 = _1003;
        _1167 = _1002;
        _1168 = _1001;
        _1169 = _1013;
        _1170 = _1012;
        _1171 = _1011;
        _1172 = _1026;
        _1173 = _1025;
        _1174 = _1024;
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = _1163;
        _1164 = _1163;
        _1165 = _1163;
        _1166 = _1163;
        _1167 = _1163;
        _1168 = _1163;
        _1169 = _1163;
        _1170 = _1163;
        _1171 = _1163;
        _1172 = _1163;
        _1173 = _1163;
        _1174 = _1163;
        _1175 = 0.0;
        _1176 = 0.0;
        _1177 = 0.0;
    }
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1202 = fma(_861, cbModelParam._m0[30u].z, fma(_857, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _853));
        float _1206 = fma(_861, cbModelParam._m0[31u].z, fma(_857, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _853));
        float _1210 = fma(_861, cbModelParam._m0[32u].z, fma(_857, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _853));
        float _1233 = _853 + _642;
        float _1234 = _857 + _643;
        float _1235 = _861 + _644;
        float _1245 = fma(_1235, cbModelParam._m0[30u].z, fma(_1234, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1233)) - _1202;
        float _1246 = fma(_1235, cbModelParam._m0[31u].z, fma(_1234, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1233)) - _1206;
        float _1247 = fma(_1235, cbModelParam._m0[32u].z, fma(_1234, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1233)) - _1210;
        float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
        float _1264 = ((_1251 * _1245) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1202 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1251 * _1246) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1206 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1251 * _1247) / cbModelParam._m0[35u].z) + ((((((_1210 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        float _1301 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1268.x + (-0.5));
        float _1303 = _1301 * (_1268.y + (-0.5));
        float _1304 = _1301 * (_1268.z + (-0.5));
        float _1311 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1275.x + (-0.5));
        float _1313 = _1311 * (_1275.y + (-0.5));
        float _1314 = _1311 * (_1275.z + (-0.5));
        float _1321 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1282.x + (-0.5));
        float _1323 = _1321 * (_1282.y + (-0.5));
        float _1324 = _1321 * (_1282.z + (-0.5));
        float _1331 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1289.x + (-0.5));
        float _1333 = _1331 * (_1289.y + (-0.5));
        float _1334 = _1331 * (_1289.z + (-0.5));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = _1302 * 0.5;
        float _1339 = _1312 * 0.5;
        float _1340 = _1322 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_642, _643, _644), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4062 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1365 + 1.0))) + _1370) * _1335;
        float _1380 = _1303 * 0.5;
        float _1381 = _1313 * 0.5;
        float _1382 = _1323 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_642, _643, _644), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4095 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1407 + 1.0))) + _1412) * _1336;
        float _1422 = _1304 * 0.5;
        float _1423 = _1314 * 0.5;
        float _1424 = _1324 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_642, _643, _644), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4128 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1449 + 1.0))) + _1454) * _1337;
        _1471 = _1304;
        _1472 = _1303;
        _1473 = _1302;
        _1474 = _1314;
        _1475 = _1313;
        _1476 = _1312;
        _1477 = _1324;
        _1478 = _1323;
        _1479 = _1322;
        _1480 = _1337;
        _1481 = _1336;
        _1482 = _1335;
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
    }
    else
    {
        _1471 = _1163;
        _1472 = _1163;
        _1473 = _1163;
        _1474 = _1163;
        _1475 = _1163;
        _1476 = _1163;
        _1477 = _1163;
        _1478 = _1163;
        _1479 = _1163;
        _1480 = _1163;
        _1481 = _1163;
        _1482 = _1163;
        _1483 = 0.0;
        _1484 = 0.0;
        _1485 = 0.0;
    }
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1175)) + _1175;
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1176)) + _1176;
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1177)) + _1177;
    float _1518 = fma(_1497, cbSceneParam._m0[89u].z, fma(_1496, cbSceneParam._m0[89u].y, _1495 * cbSceneParam._m0[89u].x));
    float _1521 = fma(_1497, cbSceneParam._m0[90u].z, fma(_1496, cbSceneParam._m0[90u].y, _1495 * cbSceneParam._m0[90u].x));
    float _1524 = fma(_1497, cbSceneParam._m0[91u].z, fma(_1496, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1495));
    float _1539 = _800 * 0.5;
    float _1540 = _801 * 0.5;
    float _1541 = _802 * 0.5;
    float _1542 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1545 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1548 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1582;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1555 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1162, _1166, _1169, _1172));
        float _1559 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1164, _1167, _1170, _1173));
        float _1563 = dot(vec4(_1539, _1540, _1541, 1.0), vec4(_1165, _1168, _1171, _1174));
        float _1570 = dot(vec4(cbModelParam._m0[39u]), vec4(_1539, _1540, _1541, 1.0));
        _1582 = dot(vec3(isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1570) ? 0.0 : (isnan(0.0) ? _1570 : max(0.0, _1570))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1582 = 1.0;
    }
    float _1593;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1584 = dot(vec4(cbModelParam._m0[40u]), vec4(_1539, _1540, _1541, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1597 = (_1593 * cbModelParam._m0[1u].x) + (_1582 * (1.0 - cbModelParam._m0[1u].x));
    float _1607 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _645);
    float _1608 = isnan(_1607) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1607 : min(cbModelParam._m0[25u].z, _1607));
    float _1689;
    float _1691;
    float _1693;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1656 = fma(_861, cbModelParam._m0[13u].z, fma(_857, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _853)) + cbModelParam._m0[13u].w;
        float _1660 = fma(_861, cbModelParam._m0[14u].z, fma(_857, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _853)) + cbModelParam._m0[14u].w;
        float _1664 = fma(_861, cbModelParam._m0[15u].z, fma(_857, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _853)) + cbModelParam._m0[15u].w;
        float _1667 = fma(_802, cbModelParam._m0[13u].z, fma(_801, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _800));
        float _1670 = fma(_802, cbModelParam._m0[14u].z, fma(_801, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _800));
        float _1673 = fma(_802, cbModelParam._m0[15u].z, fma(_801, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _800));
        float _1701;
        if (_1667 > 0.0)
        {
            _1701 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1701 = frontier_phi_14_12_ladder;
        }
        float _1871;
        if (_1670 > 0.0)
        {
            _1871 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1871 = frontier_phi_23_19_ladder;
        }
        float _2166;
        if (_1673 > 0.0)
        {
            _2166 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2166 = frontier_phi_35_30_ladder;
        }
        float _2168 = isnan(_1871) ? _1701 : (isnan(_1701) ? _1871 : min(_1701, _1871));
        float _2169 = isnan(_2166) ? _2168 : (isnan(_2168) ? _2166 : min(_2168, _2166));
        float _2173 = (_2169 * _1667) + _1656;
        float _2174 = (_2169 * _1670) + _1660;
        float _2175 = (_2169 * _1673) + _1664;
        float _2176 = _2169 * 9.9999997473787516355514526367188e-05;
        float _2178 = (-1.0) - _2176;
        float _2180 = _2176 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2175 > _2180) || ((_2175 < _2178) || ((_2174 > _2180) || ((_2174 < _2178) || ((_2173 < _2178) || (_2173 > _2180))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2320 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2175, cbModelParam._m0[9u].z, fma(_2174, cbModelParam._m0[9u].y, _2173 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2175, cbModelParam._m0[10u].z, fma(_2174, cbModelParam._m0[10u].y, _2173 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2175, cbModelParam._m0[11u].z, fma(_2174, cbModelParam._m0[11u].y, _2173 * cbModelParam._m0[11u].x))), _1608);
            frontier_phi_13_35_ladder = _2320.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2320.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2320.x * cbModelParam._m0[1u].y;
        }
        _1689 = frontier_phi_13_35_ladder_2;
        _1691 = frontier_phi_13_35_ladder_1;
        _1693 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1677 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_800, _801, _802), _1608);
        _1689 = _1677.x * cbModelParam._m0[1u].y;
        _1691 = _1677.y * cbModelParam._m0[1u].y;
        _1693 = _1677.z * cbModelParam._m0[1u].y;
    }
    float _1697 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _645);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1697 : min(cbModelParam._m0[25u].w, _1697));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1752 = fma(_861, cbModelParam._m0[21u].z, fma(_857, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _853)) + cbModelParam._m0[21u].w;
        float _1756 = fma(_861, cbModelParam._m0[22u].z, fma(_857, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _853)) + cbModelParam._m0[22u].w;
        float _1760 = fma(_861, cbModelParam._m0[23u].z, fma(_857, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _853)) + cbModelParam._m0[23u].w;
        float _1763 = fma(_802, cbModelParam._m0[21u].z, fma(_801, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _800));
        float _1766 = fma(_802, cbModelParam._m0[22u].z, fma(_801, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _800));
        float _1769 = fma(_802, cbModelParam._m0[23u].z, fma(_801, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _800));
        float _1876;
        if (_1763 > 0.0)
        {
            _1876 = abs((1.0 - _1752) / _1763);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1752 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1876 = frontier_phi_25_21_ladder;
        }
        float _2193;
        if (_1766 > 0.0)
        {
            _2193 = abs((1.0 - _1756) / _1766);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1756 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2193 = frontier_phi_37_32_ladder;
        }
        float _2520;
        if (_1769 > 0.0)
        {
            _2520 = abs((1.0 - _1760) / _1769);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1760 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2520 = frontier_phi_47_44_ladder;
        }
        float _2522 = isnan(_2193) ? _1876 : (isnan(_1876) ? _2193 : min(_1876, _2193));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _1763) + _1752;
        float _2528 = (_2523 * _1766) + _1756;
        float _2529 = (_2523 * _1769) + _1760;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2530;
        float _2533 = _2530 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2529 > _2533) || ((_2529 < _2531) || ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 < _2531) || (_2527 > _2533))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2529, cbModelParam._m0[17u].z, fma(_2528, cbModelParam._m0[17u].y, _2527 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2529, cbModelParam._m0[18u].z, fma(_2528, cbModelParam._m0[18u].y, _2527 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2529, cbModelParam._m0[19u].z, fma(_2528, cbModelParam._m0[19u].y, _2527 * cbModelParam._m0[19u].x))), _1698);
            frontier_phi_22_47_ladder = _2647.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2647.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2647.x * cbModelParam._m0[1u].z;
        }
        _1788 = frontier_phi_22_47_ladder_2;
        _1790 = frontier_phi_22_47_ladder_1;
        _1792 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1772 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_800, _801, _802), _1698);
        _1788 = _1772.x * cbModelParam._m0[1u].z;
        _1790 = _1772.y * cbModelParam._m0[1u].z;
        _1792 = _1772.z * cbModelParam._m0[1u].z;
    }
    float _1804 = ((((1.0 - _821) * ((_808 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_821 * _808)) * _792;
    float _1805 = _1804 * ((cbModelParam._m0[1u].w * (_1788 - _1689)) + _1689);
    float _1806 = _1804 * ((cbModelParam._m0[1u].w * (_1790 - _1691)) + _1691);
    float _1807 = _1804 * ((cbModelParam._m0[1u].w * (_1792 - _1693)) + _1693);
    float _1810 = fma(_1807, cbSceneParam._m0[89u].z, fma(_1806, cbSceneParam._m0[89u].y, _1805 * cbSceneParam._m0[89u].x));
    float _1813 = fma(_1807, cbSceneParam._m0[90u].z, fma(_1806, cbSceneParam._m0[90u].y, _1805 * cbSceneParam._m0[90u].x));
    float _1816 = fma(_1807, cbSceneParam._m0[91u].z, fma(_1806, cbSceneParam._m0[91u].y, _1805 * cbSceneParam._m0[91u].x));
    float _1850 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1854 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1858 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1862 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1863 = _1850 / _1862;
    float _1864 = _1854 / _1862;
    float _1865 = _1858 / _1862;
    float _2012;
    float _2013;
    float _2014;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1892 = ((uint(_1865 > cbSceneParam._m0[59u].y) + uint(_1865 > cbSceneParam._m0[59u].x)) + uint(_1865 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1893 = _1892 + 43u;
        uint _1901 = _1892 + 44u;
        uint _1909 = _1892 + 45u;
        uint _1917 = _1892 + 46u;
        float _1928 = fma(_1862, cbSceneParam._m0[_1893].w, fma(_1858, cbSceneParam._m0[_1893].z, fma(_1854, cbSceneParam._m0[_1893].y, _1850 * cbSceneParam._m0[_1893].x)));
        float _1932 = fma(_1862, cbSceneParam._m0[_1901].w, fma(_1858, cbSceneParam._m0[_1901].z, fma(_1854, cbSceneParam._m0[_1901].y, _1850 * cbSceneParam._m0[_1901].x)));
        float _1940 = fma(_1862, cbSceneParam._m0[_1917].w, fma(_1858, cbSceneParam._m0[_1917].z, fma(_1854, cbSceneParam._m0[_1917].y, _1850 * cbSceneParam._m0[_1917].x)));
        float _1945 = cbSceneParam._m0[33u].z * _1940;
        float _1947 = cbSceneParam._m0[33u].w * _1940;
        float _1950 = fma(_1862, cbSceneParam._m0[_1909].w, fma(_1858, cbSceneParam._m0[_1909].z, fma(_1854, cbSceneParam._m0[_1909].y, _1850 * cbSceneParam._m0[_1909].x))) / _1940;
        float _1998 = (cbSceneParam._m0[33u].x - sqrt(((_1864 * _1864) + (_1863 * _1863)) + (_1865 * _1865))) * cbSceneParam._m0[33u].y;
        float _4254 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2005 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 + _1928) / _1940, (_1947 + _1932) / _1940), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1947 + _1928) / _1940, (_1932 - _1945) / _1940), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1928 - _1945) / _1940, (_1932 - _1947) / _1940), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1928 - _1947) / _1940, (_1945 + _1932) / _1940), _1950), 0.0)).x), vec4(0.25)));
        _2012 = 1.0 - (_2005 * cbSceneParam._m0[34u].x);
        _2013 = 1.0 - (_2005 * cbSceneParam._m0[34u].y);
        _2014 = 1.0 - (_2005 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2012 = 1.0;
        _2013 = 1.0;
        _2014 = 1.0;
    }
    float _2078;
    float _2080;
    float _2082;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2066 = fma(_1862, cbSceneParam._m0[63u].w, fma(_1858, cbSceneParam._m0[63u].z, fma(_1854, cbSceneParam._m0[63u].y, _1850 * cbSceneParam._m0[63u].x)));
        float _2067 = fma(_1862, cbSceneParam._m0[60u].w, fma(_1858, cbSceneParam._m0[60u].z, fma(_1854, cbSceneParam._m0[60u].y, _1850 * cbSceneParam._m0[60u].x))) / _2066;
        float _2068 = fma(_1862, cbSceneParam._m0[61u].w, fma(_1858, cbSceneParam._m0[61u].z, fma(_1854, cbSceneParam._m0[61u].y, _1850 * cbSceneParam._m0[61u].x))) / _2066;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2067 >= cbSceneParam._m0[64u].x) && (_2068 >= cbSceneParam._m0[64u].y)) && (_2067 <= cbSceneParam._m0[64u].z)) && (_2068 <= cbSceneParam._m0[64u].w))
        {
            float _2206 = fma(_1862, cbSceneParam._m0[62u].w, fma(_1858, cbSceneParam._m0[62u].z, fma(_1854, cbSceneParam._m0[62u].y, _1850 * cbSceneParam._m0[62u].x))) / _2066;
            float _2210 = isnan(cbSceneParam._m0[41u].w) ? _2206 : (isnan(_2206) ? cbSceneParam._m0[41u].w : max(_2206, cbSceneParam._m0[41u].w));
            float _2253 = (cbSceneParam._m0[33u].x - sqrt(((_1864 * _1864) + (_1863 * _1863)) + (_1865 * _1865))) * cbSceneParam._m0[33u].y;
            float _4270 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
            float _2260 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2067, cbSceneParam._m0[33u].w + _2068), _2210), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2067, _2068 - cbSceneParam._m0[33u].z), _2210), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2067 - cbSceneParam._m0[33u].z, _2068 - cbSceneParam._m0[33u].w), _2210), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2067 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2068), _2210), 0.0)).x), vec4(0.25)));
            float _2264 = 1.0 - (_2260 * cbSceneParam._m0[34u].x);
            float _2265 = 1.0 - (_2260 * cbSceneParam._m0[34u].y);
            float _2266 = 1.0 - (_2260 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2266) ? _2014 : (isnan(_2014) ? _2266 : min(_2014, _2266));
            frontier_phi_34_33_ladder_1 = isnan(_2265) ? _2013 : (isnan(_2013) ? _2265 : min(_2013, _2265));
            frontier_phi_34_33_ladder_2 = isnan(_2264) ? _2012 : (isnan(_2012) ? _2264 : min(_2012, _2264));
        }
        else
        {
            frontier_phi_34_33_ladder = _2014;
            frontier_phi_34_33_ladder_1 = _2013;
            frontier_phi_34_33_ladder_2 = _2012;
        }
        _2078 = frontier_phi_34_33_ladder_2;
        _2080 = frontier_phi_34_33_ladder_1;
        _2082 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2078 = _2012;
        _2080 = _2013;
        _2082 = _2014;
    }
    uvec4 _2087 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _2089 = _2087.x * 14u;
    uint _2090 = _2089 + 13u;
    float _2097 = _792 + (-1.0);
    float _2102 = (cbLight._m0[_2090].x * _2097) + 1.0;
    float _2103 = (cbLight._m0[_2090].y * _2097) + 1.0;
    float _2104 = (cbLight._m0[_2090].z * _2097) + 1.0;
    float _2105 = (cbLight._m0[_2090].w * _2097) + 1.0;
    uint _2106 = _2089 + 5u;
    float _2112 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2116 = _2089 + 4u;
    float _2125 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2129 = _2089 | 1u;
    float _2140 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_642, _643, _644));
    float _2143 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_642, _643, _644));
    float _4306 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _4317 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2148 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * 0.3183098733425140380859375;
    float _2150 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * 0.3183098733425140380859375;
    float _2157 = ((cbLight._m0[_2106].x * _2112) * _2150) + (((cbLight._m0[_2116].x * _2078) * _2125) * _2148);
    float _2158 = ((_2112 * cbLight._m0[_2106].y) * _2150) + (((cbLight._m0[_2116].y * _2080) * _2125) * _2148);
    float _2159 = ((_2112 * cbLight._m0[_2106].z) * _2150) + (((cbLight._m0[_2116].z * _2082) * _2125) * _2148);
    uvec4 _2163 = floatBitsToUint(cbLight._m0[_2089 + 12u]);
    bool _2165 = _2163.x == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2165)
    {
        _2267 = _2157;
        _2269 = _2158;
        _2271 = _2159;
    }
    else
    {
        uint _2275 = _2089 + 6u;
        float _2291 = (dot(vec3(cbLight._m0[_2089 + 2u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _2292 = _2291 * _2291;
        float _4328 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2293 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2294 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2267 = (((cbLight._m0[_2275].x * 0.3183098733425140380859375) * _2293) * _2294) + _2157;
        _2269 = (((cbLight._m0[_2275].y * 0.3183098733425140380859375) * _2293) * _2294) + _2158;
        _2271 = (((cbLight._m0[_2275].z * 0.3183098733425140380859375) * _2293) * _2294) + _2159;
    }
    bool _2274 = _2163.y == 0u;
    float _2329;
    float _2331;
    float _2333;
    if (_2274)
    {
        _2329 = _2267;
        _2331 = _2269;
        _2333 = _2271;
    }
    else
    {
        uint _2491 = _2089 + 7u;
        float _2507 = (dot(vec3(cbLight._m0[_2089 + 3u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _2508 = _2507 * _2507;
        float _4344 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2509 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2510 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2329 = (((cbLight._m0[_2491].x * 0.3183098733425140380859375) * _2509) * _2510) + _2267;
        _2331 = (((cbLight._m0[_2491].y * 0.3183098733425140380859375) * _2509) * _2510) + _2269;
        _2333 = (((cbLight._m0[_2491].z * 0.3183098733425140380859375) * _2509) * _2510) + _2271;
    }
    uint _2336 = _2089 + 8u;
    float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _645) * 0.949999988079071044921875);
    float _2350 = _2349 * _2349;
    float _2351 = cbLight._m0[_2089].x + _721;
    float _2352 = cbLight._m0[_2089].y + _722;
    float _2353 = cbLight._m0[_2089].z + _723;
    float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
    float _2358 = _2357 * _2351;
    float _2359 = _2357 * _2352;
    float _2360 = _2357 * _2353;
    float _2361 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2089].xyz));
    float _4360 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _4371 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _2365 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2366 = dot(vec3(_642, _643, _644), vec3(_2358, _2359, _2360));
    float _4382 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2370 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2358, _2359, _2360));
    float _4393 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2374 = _2350 * _2350;
    float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
    float _2389 = (exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2390 = 1.0 - _2350;
    float _2401 = (0.5 / (((_2365 * ((_2364 * _2390) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2390) + _2350) * _2364))) * _2364;
    float _4404 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
    uint _2417 = _2089 + 9u;
    float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _645) * 0.949999988079071044921875);
    float _2429 = _2428 * _2428;
    float _2430 = cbLight._m0[_2129].x + _721;
    float _2431 = cbLight._m0[_2129].y + _722;
    float _2432 = cbLight._m0[_2129].z + _723;
    float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
    float _2437 = _2436 * _2430;
    float _2438 = _2436 * _2431;
    float _2439 = _2436 * _2432;
    float _2440 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2129].xyz));
    float _4415 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2444 = dot(vec3(_642, _643, _644), vec3(_2437, _2438, _2439));
    float _4426 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2437, _2438, _2439));
    float _4437 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2429 * _2429;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2465 = (exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2466 = 1.0 - _2429;
    float _2476 = (0.5 / (((_2365 * ((_2443 * _2466) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2466) + _2429) * _2443))) * _2443;
    float _4448 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2478 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    float _2488 = (((_2465 * cbLight._m0[_2417].x) * _2478) * _2112) + ((((cbLight._m0[_2336].x * _2078) * _2389) * _2403) * _2125);
    float _2489 = (((_2465 * cbLight._m0[_2417].y) * _2478) * _2112) + ((((cbLight._m0[_2336].y * _2080) * _2389) * _2403) * _2125);
    float _2490 = (((_2465 * cbLight._m0[_2417].z) * _2478) * _2112) + ((((cbLight._m0[_2336].z * _2082) * _2389) * _2403) * _2125);
    float _2546;
    float _2548;
    float _2550;
    if (_2165)
    {
        _2546 = _2488;
        _2548 = _2489;
        _2550 = _2490;
    }
    else
    {
        uint _2552 = _2089 + 2u;
        uint _2556 = _2089 + 10u;
        float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _645) * 0.949999988079071044921875);
        float _2571 = _2570 * _2570;
        float _2572 = cbLight._m0[_2552].x + _721;
        float _2573 = cbLight._m0[_2552].y + _722;
        float _2574 = cbLight._m0[_2552].z + _723;
        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
        float _2579 = _2578 * _2572;
        float _2580 = _2578 * _2573;
        float _2581 = _2578 * _2574;
        float _2582 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2552].xyz));
        float _4459 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2586 = dot(vec3(_642, _643, _644), vec3(_2579, _2580, _2581));
        float _4470 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2590 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2579, _2580, _2581));
        float _4481 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2594 = _2571 * _2571;
        float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
        float _2607 = (exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2608 = 1.0 - _2571;
        float _2618 = (0.5 / (((_2365 * ((_2585 * _2608) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2608) + _2571) * _2585))) * _2585;
        float _4492 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2620 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
        float _2621 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2546 = (((_2607 * cbLight._m0[_2556].x) * _2620) * _2621) + _2488;
        _2548 = (((_2607 * cbLight._m0[_2556].y) * _2620) * _2621) + _2489;
        _2550 = (((_2607 * cbLight._m0[_2556].z) * _2620) * _2621) + _2490;
    }
    float _2652;
    float _2654;
    float _2656;
    if (_2274)
    {
        _2652 = _2546;
        _2654 = _2548;
        _2656 = _2550;
    }
    else
    {
        uint _2663 = _2089 + 3u;
        uint _2667 = _2089 + 11u;
        float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2663].w)) * _645) * 0.949999988079071044921875);
        float _2682 = _2681 * _2681;
        float _2683 = cbLight._m0[_2663].x + _721;
        float _2684 = cbLight._m0[_2663].y + _722;
        float _2685 = cbLight._m0[_2663].z + _723;
        float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
        float _2690 = _2689 * _2683;
        float _2691 = _2689 * _2684;
        float _2692 = _2689 * _2685;
        float _2693 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2663].xyz));
        float _4508 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2697 = dot(vec3(_642, _643, _644), vec3(_2690, _2691, _2692));
        float _4519 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2701 = dot(vec3(cbLight._m0[_2663].xyz), vec3(_2690, _2691, _2692));
        float _4530 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2705 = _2682 * _2682;
        float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
        float _2718 = (exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2719 = 1.0 - _2682;
        float _2729 = (0.5 / (((_2365 * ((_2696 * _2719) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2719) + _2682) * _2696))) * _2696;
        float _4541 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2731 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
        float _2732 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2652 = (((_2718 * cbLight._m0[_2667].x) * _2731) * _2732) + _2546;
        _2654 = (((_2718 * cbLight._m0[_2667].y) * _2731) * _2732) + _2548;
        _2656 = (((_2718 * cbLight._m0[_2667].z) * _2731) * _2732) + _2550;
    }
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    if (_2087.y == 0u)
    {
        uvec4 _2753 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2754 = _2753.x;
        uint _2765 = uint((float(_2753.y) * floor(float(uint(cbSceneParam._m0[85u].y * _730) / _2754))) + floor(float(uint(cbSceneParam._m0[85u].x * _729) / _2754)));
        float _2775 = (log2(_1865 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2776 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        uint _2779 = uint(isnan(14.0) ? _2776 : (isnan(_2776) ? 14.0 : min(_2776, 14.0)));
        uvec4 _2784 = texelFetch(g_lightClusterGridBuffer, int(((_2779 << 2u) + (_2765 << 6u)) >> 2u));
        uint _2785 = _2784.x;
        uint _2786 = _2753.z;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        if (((((1u << ((_2786 >> 4u) & 15u)) + 4294967295u) & _2785) == 0u) || ((_2786 & 240u) == 0u))
        {
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
        }
        else
        {
            float _2866;
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _2876;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            uint _3016 = 0u;
            uint _3025;
            bool _3026;
            for (;;)
            {
                _3025 = texelFetch(g_lightClassification, int((((_2779 << 5u) + (_2765 << 9u)) + (_3016 << 2u)) >> 2u)).x;
                _3026 = _3025 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3026)
                {
                    frontier_phi_66_pred = _3015;
                    frontier_phi_66_pred_1 = _3014;
                    frontier_phi_66_pred_2 = _3013;
                    frontier_phi_66_pred_3 = _3012;
                    frontier_phi_66_pred_4 = _3011;
                    frontier_phi_66_pred_5 = _3010;
                }
                else
                {
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    uint _3140;
                    _3134 = _3010;
                    _3135 = _3011;
                    _3136 = _3012;
                    _3137 = _3013;
                    _3138 = _3014;
                    _3139 = _3015;
                    _3140 = _3025;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    for (;;)
                    {
                        uint _3144 = uint(findLSB(_3140)) + (_3016 << 5u);
                        uint _3141 = (_3140 + 4294967295u) & _3140;
                        uint _3146 = _3144 * 48u;
                        vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3146)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 3u)).x));
                        uint _3166 = (_3144 * 48u) + 4u;
                        vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 3u)).x));
                        uint _3185 = (_3144 * 48u) + 8u;
                        vec3 _3196 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x));
                        float _3200 = _3160.x - _1863;
                        float _3201 = _3160.y - _1864;
                        float _3202 = _3160.z - _1865;
                        float _3203 = dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202));
                        float _3206 = inversesqrt(_3203);
                        float _3207 = _3206 * _3200;
                        float _3208 = _3206 * _3201;
                        float _3209 = _3206 * _3202;
                        float _3210 = dot(vec3(_748, _751, _754), vec3(_3207, _3208, _3209));
                        float _3215 = 1.0 - (_3203 * _3160.w);
                        float _4567 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3216 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3217 = sqrt(_3203) * _3179.w;
                        float _3220 = 1.39999997615814208984375 / (_3217 + 1.39999997615814208984375);
                        float _3221 = _3220 * _3220;
                        float _3224 = ((1.0 - _3221) * _3210) + _3221;
                        float _3227 = _3217 * _3217;
                        float _3231 = ((isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))) * _3216) / ((_3227 * 0.699999988079071044921875) + 1.0);
                        float _3235 = (-0.0) - _1863;
                        float _3236 = (-0.0) - _1864;
                        float _3237 = (-0.0) - _1865;
                        float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3251 = exp2(log2(1.0 / ((_3227 * 3.5) + 5.0)) * 0.25);
                        float _3252 = 1.0 - _808;
                        float _3259 = sqrt(1.0 - ((1.0 - (_3252 * _3252)) * (1.0 - (_3251 * _3251))));
                        float _3260 = _3259 * _3259;
                        float _3261 = _3260 * _3260;
                        float _3262 = _3242 + _3207;
                        float _3263 = _3243 + _3208;
                        float _3264 = _3244 + _3209;
                        float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                        float _3272 = dot(vec3(_748, _751, _754), vec3(_3242, _3243, _3244));
                        float _4583 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3275 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                        float _3276 = dot(vec3(_748, _751, _754), vec3(_3268 * _3262, _3268 * _3263, _3268 * _3264));
                        float _4594 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                        float _3283 = ((_3279 * _3279) * (_3261 + (-1.0))) + 1.0;
                        float _3284 = _3220 * _3260;
                        float _3285 = _3284 * _3284;
                        float _3288 = ((1.0 - _3285) * _3210) + _3285;
                        float _4605 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                        float _3290 = 1.0 - _3260;
                        float _3300 = (0.5 / (((_3289 * ((_3275 * _3290) + _3260)) + 9.9999999392252902907785028219223e-09) + (((_3289 * _3290) + _3260) * _3275))) * _3289;
                        float _4616 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3311 = (((_3261 * 3.1415927410125732421875) * (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) / ((_3283 * _3283) * ((_3227 * 2.1991131305694580078125) + 3.141590118408203125))) * _3216;
                        _3069 = (_3231 * _3179.x) + _3137;
                        _3070 = (_3231 * _3179.y) + _3138;
                        _3071 = (_3231 * _3179.z) + _3139;
                        _3066 = (_3311 * _3196.x) + _3134;
                        _3067 = (_3311 * _3196.y) + _3135;
                        _3068 = (_3311 * _3196.z) + _3136;
                        if (_3141 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3134 = _3066;
                            _3135 = _3067;
                            _3136 = _3068;
                            _3137 = _3069;
                            _3138 = _3070;
                            _3139 = _3071;
                            _3140 = _3141;
                        }
                    }
                    frontier_phi_66_pred = _3071;
                    frontier_phi_66_pred_1 = _3070;
                    frontier_phi_66_pred_2 = _3069;
                    frontier_phi_66_pred_3 = _3068;
                    frontier_phi_66_pred_4 = _3067;
                    frontier_phi_66_pred_5 = _3066;
                }
                _2876 = frontier_phi_66_pred;
                _2874 = frontier_phi_66_pred_1;
                _2872 = frontier_phi_66_pred_2;
                _2870 = frontier_phi_66_pred_3;
                _2868 = frontier_phi_66_pred_4;
                _2866 = frontier_phi_66_pred_5;
                uint _3017 = _3016 + 1u;
                if (_3017 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3010 = _2866;
                    _3011 = _2868;
                    _3012 = _2870;
                    _3013 = _2872;
                    _3014 = _2874;
                    _3015 = _2876;
                    _3016 = _3017;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
        }
        uvec4 _2879 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2880 = _2879.z;
        uint _2882 = (_2880 >> 8u) & 15u;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        if (((4294967295u << _2882) & _2785) == 0u)
        {
            _2978 = _2865;
            _2980 = _2867;
            _2982 = _2869;
            _2984 = _2871;
            _2986 = _2873;
            _2988 = _2875;
        }
        else
        {
            float _3003 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
            float _3004 = _3003 * _1863;
            float _3005 = _3003 * _1864;
            float _3006 = _3003 * _1865;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2882 < ((_2880 >> 12u) & 15u))
            {
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _3117 = _2865;
                float _3118 = _2867;
                float _3119 = _2869;
                float _3120 = _2871;
                float _3121 = _2873;
                float _3122 = _2875;
                uint _3123 = _2882;
                uint _3132;
                bool _3133;
                for (;;)
                {
                    _3132 = texelFetch(g_lightClassification, int((((_2779 << 5u) + (_2765 << 9u)) + (_3123 << 2u)) >> 2u)).x;
                    _3133 = _3132 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3133)
                    {
                        frontier_phi_72_pred = _3122;
                        frontier_phi_72_pred_1 = _3121;
                        frontier_phi_72_pred_2 = _3120;
                        frontier_phi_72_pred_3 = _3119;
                        frontier_phi_72_pred_4 = _3118;
                        frontier_phi_72_pred_5 = _3117;
                    }
                    else
                    {
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3329 = _3117;
                        float _3330 = _3118;
                        float _3331 = _3119;
                        float _3332 = _3120;
                        float _3333 = _3121;
                        float _3334 = _3122;
                        uint _3335 = _3132;
                        uint _3336;
                        vec4 _3361;
                        float _3362;
                        vec4 _3377;
                        vec3 _3389;
                        vec4 _3404;
                        vec4 _3420;
                        float _3466;
                        bool _3467;
                        for (;;)
                        {
                            uint _3346 = ((_3123 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3335));
                            _3336 = (_3335 + 4294967295u) & _3335;
                            uint _3348 = _3346 * 40u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3362 = _3361.w;
                            uint _3364 = (_3346 * 40u) + 4u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3346 * 40u) + 8u;
                            _3389 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x));
                            uint _3391 = (_3346 * 40u) + 16u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3407 = (_3346 * 40u) + 20u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3422 = (_3346 * 40u) + 24u;
                            vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3441 = (_3346 * 40u) + 28u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3466 = fma(_1865, _3454.z, fma(_1864, _3454.y, _3454.x * _1863)) + _3454.w;
                            _3467 = !((fma(_1865, _3435.z, fma(_1864, _3435.y, _3435.x * _1863)) + _3435.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3467)
                            {
                                float _3494 = _3361.x - _1863;
                                float _3495 = _3361.y - _1864;
                                float _3496 = _3361.z - _1865;
                                float _3497 = dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496));
                                float _3500 = inversesqrt(_3497);
                                float _3501 = _3500 * _3494;
                                float _3502 = _3500 * _3495;
                                float _3503 = _3500 * _3496;
                                float _3507 = 1.0 - (_3497 / (_3362 * _3362));
                                float _4627 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3512 = sqrt(_3497) * _3377.w;
                                float _3514 = 1.39999997615814208984375 / (_3512 + 1.39999997615814208984375);
                                float _3515 = _3514 * _3514;
                                float _3518 = ((1.0 - _3515) * dot(vec3(_3501, _3502, _3503), vec3(_748, _751, _754))) + _3515;
                                float _3521 = _3512 * _3512;
                                float _3525 = (fma(_1865, _3404.z, fma(_1864, _3404.y, _3404.x * _1863)) + _3404.w) / _3466;
                                float _3526 = (fma(_1865, _3420.z, fma(_1864, _3420.y, _3420.x * _1863)) + _3420.w) / _3466;
                                float _3530 = 1.0 - dot(vec2(_3525, _3526), vec2(_3525, _3526));
                                float _4643 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3532 = _3531 * (((isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0))) * _3508) / ((_3521 * 0.699999988079071044921875) + 1.0));
                                float _3544 = exp2(log2(1.0 / ((_3521 * 3.5) + 5.0)) * 0.25);
                                float _3545 = 1.0 - _808;
                                float _3552 = sqrt(1.0 - ((1.0 - (_3545 * _3545)) * (1.0 - (_3544 * _3544))));
                                float _3553 = _3552 * _3552;
                                float _3554 = _3553 * _3553;
                                float _3555 = _3501 - _3004;
                                float _3556 = _3502 - _3005;
                                float _3557 = _3503 - _3006;
                                float _3561 = inversesqrt(dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557)));
                                float _3565 = dot(vec3(_748, _751, _754), vec3((-0.0) - _3004, (-0.0) - _3005, (-0.0) - _3006));
                                float _4654 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3568 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3569 = dot(vec3(_748, _751, _754), vec3(_3561 * _3555, _3561 * _3556, _3561 * _3557));
                                float _4665 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3572 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                                float _3576 = ((_3572 * _3572) * (_3554 + (-1.0))) + 1.0;
                                float _3577 = _3514 * _3553;
                                float _3578 = _3577 * _3577;
                                float _3584 = ((1.0 - _3578) * dot(vec3(_748, _751, _754), vec3(_3501, _3502, _3503))) + _3578;
                                float _4676 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3586 = 1.0 - _3553;
                                float _3596 = (0.5 / (((_3585 * ((_3568 * _3586) + _3553)) + 9.9999999392252902907785028219223e-09) + (((_3585 * _3586) + _3553) * _3568))) * _3585;
                                float _4687 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3606 = (_3531 * _3508) * (((_3554 * 3.1415927410125732421875) * (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) / ((_3576 * _3576) * ((_3521 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3532 * _3377.y;
                                frontier_phi_78_pred_1 = _3532 * _3377.x;
                                frontier_phi_78_pred_2 = _3606 * _3389.z;
                                frontier_phi_78_pred_3 = _3606 * _3389.y;
                                frontier_phi_78_pred_4 = _3606 * _3389.x;
                                frontier_phi_78_pred_5 = _3532 * _3377.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3614 = frontier_phi_78_pred;
                            _3613 = frontier_phi_78_pred_1;
                            _3612 = frontier_phi_78_pred_2;
                            _3611 = frontier_phi_78_pred_3;
                            _3610 = frontier_phi_78_pred_4;
                            _3615 = frontier_phi_78_pred_5;
                            _3319 = _3613 + _3332;
                            _3320 = _3614 + _3333;
                            _3321 = _3615 + _3334;
                            _3316 = _3610 + _3329;
                            _3317 = _3611 + _3330;
                            _3318 = _3612 + _3331;
                            if (_3336 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3336;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3321;
                        frontier_phi_72_pred_1 = _3320;
                        frontier_phi_72_pred_2 = _3319;
                        frontier_phi_72_pred_3 = _3318;
                        frontier_phi_72_pred_4 = _3317;
                        frontier_phi_72_pred_5 = _3316;
                    }
                    _2989 = frontier_phi_72_pred;
                    _2987 = frontier_phi_72_pred_1;
                    _2985 = frontier_phi_72_pred_2;
                    _2983 = frontier_phi_72_pred_3;
                    _2981 = frontier_phi_72_pred_4;
                    _2979 = frontier_phi_72_pred_5;
                    uint _3124 = _3123 + 1u;
                    if (_3124 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3117 = _2979;
                        _3118 = _2981;
                        _3119 = _2983;
                        _3120 = _2985;
                        _3121 = _2987;
                        _3122 = _2989;
                        _3123 = _3124;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2989;
                frontier_phi_60_61_ladder_1 = _2987;
                frontier_phi_60_61_ladder_2 = _2983;
                frontier_phi_60_61_ladder_3 = _2981;
                frontier_phi_60_61_ladder_4 = _2979;
                frontier_phi_60_61_ladder_5 = _2985;
            }
            else
            {
                frontier_phi_60_61_ladder = _2875;
                frontier_phi_60_61_ladder_1 = _2873;
                frontier_phi_60_61_ladder_2 = _2869;
                frontier_phi_60_61_ladder_3 = _2867;
                frontier_phi_60_61_ladder_4 = _2865;
                frontier_phi_60_61_ladder_5 = _2871;
            }
            _2978 = frontier_phi_60_61_ladder_4;
            _2980 = frontier_phi_60_61_ladder_3;
            _2982 = frontier_phi_60_61_ladder_2;
            _2984 = frontier_phi_60_61_ladder_5;
            _2986 = frontier_phi_60_61_ladder_1;
            _2988 = frontier_phi_60_61_ladder;
        }
        float _2993 = isnan(1.0) ? _792 : (isnan(_792) ? 1.0 : min(_792, 1.0));
        _2798 = (_2993 * _2984) + _2329;
        _2800 = (_2993 * _2986) + _2331;
        _2802 = (_2993 * _2988) + _2333;
        _2804 = ((_2978 * 0.039999999105930328369140625) * _2993) + _2652;
        _2806 = ((_2980 * 0.039999999105930328369140625) * _2993) + _2654;
        _2808 = ((_2982 * 0.039999999105930328369140625) * _2993) + _2656;
    }
    else
    {
        _2798 = _2329;
        _2800 = _2331;
        _2802 = _2333;
        _2804 = _2652;
        _2806 = _2654;
        _2808 = _2656;
    }
    float _4703 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4714 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4725 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    uint _2828 = _234 + 6u;
    float _2836 = _729 / cbSceneParam._m0[86u].x;
    float _2837 = _730 / cbSceneParam._m0[86u].y;
    vec4 _2851 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, (log2((isnan(cbSceneParam._m0[77u].w) ? _663 : (isnan(_663) ? cbSceneParam._m0[77u].w : min(_663, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2853 = _2851.x;
    float _2854 = _2851.y;
    float _2855 = _2851.z;
    float _2856 = _2851.w;
    float _2928;
    float _2930;
    float _2932;
    float _2934;
    if (_663 > cbSceneParam._m0[78u].w)
    {
        float _2890 = isnan(_663) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _663 : min(cbSceneParam._m0[80u].w, _663));
        float _2891 = _2890 / _663;
        float _2902 = _2891 * _714;
        float _2903 = _715 * _2891;
        float _2904 = (-0.0) - _2903;
        float _2906 = _2891 * _716;
        float _2908 = (cbSceneParam._m0[77u].w * _2904) / _2890;
        float _2909 = _2908 + cbSceneParam._m0[79u].w;
        float _2910 = cbSceneParam._m0[79u].w - _2903;
        float _2916 = sqrt(((_2902 * _2902) + (_2903 * _2903)) + (_2906 * _2906));
        float _2919 = (1.0 - (cbSceneParam._m0[77u].w / _2890)) * _2916;
        float _2924 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2926 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3079;
        if (abs((_2904 - _2908) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3079 = ((((_2909 > 0.0) ? exp2(_2924 * _2909) : (2.0 - exp2(_2926 * _2909))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2919;
        }
        else
        {
            float _3039 = 1.0 / cbSceneParam._m0[80u].x;
            float _3040 = isnan(_2910) ? _2909 : (isnan(_2909) ? _2910 : max(_2909, _2910));
            float _3041 = isnan(_2910) ? _2909 : (isnan(_2909) ? _2910 : min(_2909, _2910));
            float _3050 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : min(_3040, 0.0));
            float _3051 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : min(_3041, 0.0));
            _3079 = ((abs(_2916 / _2904) * cbSceneParam._m0[80u].y) * ((((_3050 - _3051) * 2.0) - ((exp2(_2924 * (isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0)))) - exp2(_2924 * (isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0))))) * _3039)) - ((exp2(_2926 * _3050) - exp2(_2926 * _3051)) * _3039))) + (_2919 * cbSceneParam._m0[80u].z);
        }
        vec4 _3081 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, 1.0), 0.0);
        float _3090 = exp2((_3079 * (-1.44269502162933349609375)) * (1.0 - _3081.w));
        float _3091 = log2(_3090);
        float _3107 = log2(_2856);
        _2928 = (exp2(_3107 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].x)) * _3081.x) / cbSceneParam._m0[78u].x)) + _2853;
        _2930 = (exp2(_3107 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].y)) * _3081.y) / cbSceneParam._m0[78u].y)) + _2854;
        _2932 = (exp2(_3107 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].z)) * _3081.z) / cbSceneParam._m0[78u].z)) + _2855;
        _2934 = _3090 * _2856;
    }
    else
    {
        _2928 = _2853;
        _2930 = _2854;
        _2932 = _2855;
        _2934 = _2856;
    }
    float _2946 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2947 = _2946 == 3.0;
    float _2948 = log2(_2934);
    float _2955 = exp2(_2948 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2798 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _792))) + ((_2804 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1597)) * cbPerFrame._m0[3u].x));
    float _2956 = exp2(_2948 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2800 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _792))) + ((_2806 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1597)) * cbPerFrame._m0[3u].x));
    float _2957 = exp2(_2948 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2802 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _792))) + ((_2808 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1597)) * cbPerFrame._m0[3u].x));
    float _2966 = (_2946 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2966 * (_2947 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2928)));
    SV_Target.y = _2966 * (_2947 ? _2956 : (_2956 + (cbSceneParam._m0[72u].w * _2930)));
    SV_Target.z = _2966 * (_2947 ? _2957 : (_2957 + (cbSceneParam._m0[72u].w * _2932)));
    SV_Target.w = cbInstanceData._m0[_2828].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2828].w;
}


