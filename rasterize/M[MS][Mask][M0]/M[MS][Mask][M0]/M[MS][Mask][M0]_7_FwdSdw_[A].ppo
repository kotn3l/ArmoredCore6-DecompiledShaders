#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1208;
float _3854;
float _3855;
float _3856;
float _3857;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].z) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3866 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _436 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_423 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317);
    float _439 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_423 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318);
    float _442 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_423 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319);
    vec4 _455 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _474 = _472.x;
    float _475 = _472.y;
    float _476 = _472.z;
    float _485 = ((_455.z - _476) * _423) + _476;
    float _488 = ((((_455.x - _474) * _423) + _474) * 2.0) + (-1.0);
    float _490 = ((((_455.y - _475) * _423) + _475) * 2.0) + (-1.0);
    float _491 = dot(vec2(_488, _490), vec2(_488, _490));
    float _3877 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _496 = sqrt(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _524 = (((_512.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _488;
    float _525 = (((_512.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _490;
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _539 = _537.x;
    float _540 = 1.0 - _539;
    float _568 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_539 - _540) * cbMtdParam._m0[24u].y) + _540) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3888 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _577 = ((((cbMtdParam._m0[10u].x - _436) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _569) + _436;
    float _578 = ((((cbMtdParam._m0[10u].y - _439) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _569) + _439;
    float _579 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _442)) * _569) + _442;
    float _583 = (cbMtdParam._m0[19u].w * (_512.z - _485)) + _485;
    float _587 = ((cbMtdParam._m0[23u].y - _583) * _569) + _583;
    vec4 _606 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _612 = (_606.x * 2.0) + (-1.0);
    float _613 = (_606.y * 2.0) + (-1.0);
    float _614 = dot(vec2(_612, _613), vec2(_612, _613));
    float _3899 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _630 = (_569 * (((cbMtdParam._m0[22u].z * _524) - _524) + _612)) + _524;
    float _631 = (_569 * (((cbMtdParam._m0[22u].z * _525) - _525) + _613)) + _525;
    float _632 = (_569 * (sqrt(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) - _496)) + _496;
    float _634 = cbMtdParam._m0[22u].x + _512.w;
    float _637 = fma(_632, _236 * NORMAL.x, fma(_631, _243 * TANGENT.x, (_229 * _221) * _630));
    float _640 = fma(_632, _236 * NORMAL.y, fma(_631, _243 * TANGENT.y, (_229 * _222) * _630));
    float _643 = fma(_632, _236 * NORMAL.z, fma(_631, _243 * TANGENT.z, (_229 * _223) * _630));
    float _647 = inversesqrt(dot(vec3(_637, _640, _643), vec3(_637, _640, _643)));
    float _648 = _647 * _637;
    float _649 = _647 * _640;
    float _650 = _647 * _643;
    float _3910 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _651 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3932 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3943 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3954 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _669 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _719 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _709);
    float _720 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _709);
    float _721 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _709);
    float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
    float _726 = _719 * _725;
    float _727 = _720 * _725;
    float _728 = _721 * _725;
    vec4 _733 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _735 = _733.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _889 = sqrt(((_719 * _719) + (_720 * _720)) + (_721 * _721));
        float _895 = (cbMatDynParam._m0[5u].x * _889) + cbMatDynParam._m0[5u].y;
        float _3965 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _900 = (cbMatDynParam._m0[5u].z * _889) + cbMatDynParam._m0[5u].w;
        float _3976 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) - _896)) + _896) < ((_735 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _746 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _747 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _765 = fma(_650, cbSceneParam._m0[5u].z, fma(_649, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _648));
    float _768 = fma(_650, cbSceneParam._m0[6u].z, fma(_649, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _648));
    float _771 = fma(_650, cbSceneParam._m0[7u].z, fma(_649, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _648));
    uint _784 = _249 + 9u;
    uint _785 = _784 + uint(cbMatDynParam._m0[0u].w);
    float _791 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * cbInstanceData._m0[_785].x;
    float _792 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * cbInstanceData._m0[_785].y;
    float _793 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * cbInstanceData._m0[_785].z;
    float _3987 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    vec4 _805 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _746, cbSceneParam._m0[86u].y * _747));
    float _809 = ((isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * TEXCOORD_5.w) * _805.x;
    float _810 = dot(vec3(_648, _649, _650), vec3(_726, _727, _728));
    float _813 = _810 * 2.0;
    float _817 = (_813 * _648) - _726;
    float _818 = (_813 * _649) - _727;
    float _819 = (_813 * _650) - _728;
    float _823 = abs(dot(vec3(_726, _727, _728), vec3(_648, _649, _650)));
    float _4020 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _825 = sqrt(_651);
    float _838 = exp2((_825 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_825 * 3.0));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1207;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _932 = fma(_878, cbModelParam._m0[26u].z, fma(_874, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _870));
        float _936 = fma(_878, cbModelParam._m0[27u].z, fma(_874, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _870));
        float _940 = fma(_878, cbModelParam._m0[28u].z, fma(_874, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _870));
        float _965 = _870 + _648;
        float _966 = _874 + _649;
        float _967 = _878 + _650;
        float _977 = fma(_967, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965)) - _932;
        float _978 = fma(_967, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965)) - _936;
        float _979 = fma(_967, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965)) - _940;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_932 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_936 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[34u].z) + ((((((_940 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1035 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1001.x + (-0.5));
        float _1037 = _1035 * (_1001.y + (-0.5));
        float _1038 = _1035 * (_1001.z + (-0.5));
        float _1045 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1008.x + (-0.5));
        float _1047 = _1045 * (_1008.y + (-0.5));
        float _1048 = _1045 * (_1008.z + (-0.5));
        float _1055 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1015.x + (-0.5));
        float _1057 = _1055 * (_1015.y + (-0.5));
        float _1058 = _1055 * (_1015.z + (-0.5));
        float _1065 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1022.x + (-0.5));
        float _1067 = _1065 * (_1022.y + (-0.5));
        float _1068 = _1065 * (_1022.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1089 = (dot(vec3(_648, _649, _650), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1099 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _4068 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1101 + 1.0))) + _1106) * _1069;
        float _1116 = _1037 * 0.5;
        float _1117 = _1047 * 0.5;
        float _1118 = _1057 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_648, _649, _650), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _4101 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1143 + 1.0))) + _1148) * _1070;
        float _1158 = _1038 * 0.5;
        float _1159 = _1048 * 0.5;
        float _1160 = _1058 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_648, _649, _650), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _4134 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1185 + 1.0))) + _1190) * _1071;
        _1207 = _1038;
        _1209 = _1037;
        _1210 = _1036;
        _1211 = _1048;
        _1212 = _1047;
        _1213 = _1046;
        _1214 = _1058;
        _1215 = _1057;
        _1216 = _1056;
        _1217 = _1071;
        _1218 = _1070;
        _1219 = _1069;
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _1208;
        _1209 = _1208;
        _1210 = _1208;
        _1211 = _1208;
        _1212 = _1208;
        _1213 = _1208;
        _1214 = _1208;
        _1215 = _1208;
        _1216 = _1208;
        _1217 = _1208;
        _1218 = _1208;
        _1219 = _1208;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1250 = fma(_878, cbModelParam._m0[30u].z, fma(_874, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _870));
        float _1254 = fma(_878, cbModelParam._m0[31u].z, fma(_874, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _870));
        float _1258 = fma(_878, cbModelParam._m0[32u].z, fma(_874, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _870));
        float _1281 = _870 + _648;
        float _1282 = _874 + _649;
        float _1283 = _878 + _650;
        float _1293 = fma(_1283, cbModelParam._m0[30u].z, fma(_1282, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1281)) - _1250;
        float _1294 = fma(_1283, cbModelParam._m0[31u].z, fma(_1282, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1281)) - _1254;
        float _1295 = fma(_1283, cbModelParam._m0[32u].z, fma(_1282, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1281)) - _1258;
        float _1299 = inversesqrt(dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295)));
        float _1312 = ((_1299 * _1293) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1250 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1299 * _1294) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1254 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1299 * _1295) / cbModelParam._m0[35u].z) + ((((((_1258 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        float _1349 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1316.x + (-0.5));
        float _1351 = _1349 * (_1316.y + (-0.5));
        float _1352 = _1349 * (_1316.z + (-0.5));
        float _1359 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1323.x + (-0.5));
        float _1361 = _1359 * (_1323.y + (-0.5));
        float _1362 = _1359 * (_1323.z + (-0.5));
        float _1369 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1330.x + (-0.5));
        float _1371 = _1369 * (_1330.y + (-0.5));
        float _1372 = _1369 * (_1330.z + (-0.5));
        float _1379 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1337.x + (-0.5));
        float _1381 = _1379 * (_1337.y + (-0.5));
        float _1382 = _1379 * (_1337.z + (-0.5));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = _1350 * 0.5;
        float _1387 = _1360 * 0.5;
        float _1388 = _1370 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_648, _649, _650), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4197 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1413 + 1.0))) + _1418) * _1383;
        float _1428 = _1351 * 0.5;
        float _1429 = _1361 * 0.5;
        float _1430 = _1371 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_648, _649, _650), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4230 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1455 + 1.0))) + _1460) * _1384;
        float _1470 = _1352 * 0.5;
        float _1471 = _1362 * 0.5;
        float _1472 = _1372 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_648, _649, _650), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4263 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1497 + 1.0))) + _1502) * _1385;
        _1519 = _1352;
        _1520 = _1351;
        _1521 = _1350;
        _1522 = _1362;
        _1523 = _1361;
        _1524 = _1360;
        _1525 = _1372;
        _1526 = _1371;
        _1527 = _1370;
        _1528 = _1385;
        _1529 = _1384;
        _1530 = _1383;
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1533 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
    }
    else
    {
        _1519 = _1208;
        _1520 = _1208;
        _1521 = _1208;
        _1522 = _1208;
        _1523 = _1208;
        _1524 = _1208;
        _1525 = _1208;
        _1526 = _1208;
        _1527 = _1208;
        _1528 = _1208;
        _1529 = _1208;
        _1530 = _1208;
        _1531 = 0.0;
        _1532 = 0.0;
        _1533 = 0.0;
    }
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1220)) + _1220;
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1221)) + _1221;
    float _1545 = (cbModelParam._m0[1u].x * (_1533 - _1222)) + _1222;
    float _1566 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1544, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1569 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1544, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1572 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1544, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1543));
    float _1587 = _817 * 0.5;
    float _1588 = _818 * 0.5;
    float _1589 = _819 * 0.5;
    float _1590 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1521, _1524, _1527, _1530));
    float _1593 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1596 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1630;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1603 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1207, _1211, _1214, _1217));
        float _1607 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1611 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1210, _1213, _1216, _1219));
        float _1618 = dot(vec4(cbModelParam._m0[39u]), vec4(_1587, _1588, _1589, 1.0));
        _1630 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1630 = 1.0;
    }
    float _1641;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1632 = dot(vec4(cbModelParam._m0[40u]), vec4(_1587, _1588, _1589, 1.0));
        _1641 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1641 = 1.0;
    }
    float _1645 = (_1641 * cbModelParam._m0[1u].x) + (_1630 * (1.0 - cbModelParam._m0[1u].x));
    float _1655 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _651);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1655 : min(cbModelParam._m0[25u].z, _1655));
    float _1738;
    float _1740;
    float _1742;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1705 = fma(_878, cbModelParam._m0[13u].z, fma(_874, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _870)) + cbModelParam._m0[13u].w;
        float _1709 = fma(_878, cbModelParam._m0[14u].z, fma(_874, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _870)) + cbModelParam._m0[14u].w;
        float _1713 = fma(_878, cbModelParam._m0[15u].z, fma(_874, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _870)) + cbModelParam._m0[15u].w;
        float _1716 = fma(_819, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817));
        float _1719 = fma(_819, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817));
        float _1722 = fma(_819, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817));
        float _1750;
        if (_1716 > 0.0)
        {
            _1750 = abs((1.0 - _1705) / _1716);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1705 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1750 = frontier_phi_17_15_ladder;
        }
        float _1921;
        if (_1719 > 0.0)
        {
            _1921 = abs((1.0 - _1709) / _1719);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1709 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1921 = frontier_phi_26_22_ladder;
        }
        float _2216;
        if (_1722 > 0.0)
        {
            _2216 = abs((1.0 - _1713) / _1722);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1713 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2216 = frontier_phi_38_33_ladder;
        }
        float _2218 = isnan(_1921) ? _1750 : (isnan(_1750) ? _1921 : min(_1750, _1921));
        float _2219 = isnan(_2216) ? _2218 : (isnan(_2218) ? _2216 : min(_2218, _2216));
        float _2223 = (_2219 * _1716) + _1705;
        float _2224 = (_2219 * _1719) + _1709;
        float _2225 = (_2219 * _1722) + _1713;
        float _2226 = _2219 * 9.9999997473787516355514526367188e-05;
        float _2228 = (-1.0) - _2226;
        float _2230 = _2226 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2225 > _2230) || ((_2225 < _2228) || ((_2224 > _2230) || ((_2224 < _2228) || ((_2223 < _2228) || (_2223 > _2230))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2225, cbModelParam._m0[9u].z, fma(_2224, cbModelParam._m0[9u].y, _2223 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2225, cbModelParam._m0[10u].z, fma(_2224, cbModelParam._m0[10u].y, _2223 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2225, cbModelParam._m0[11u].z, fma(_2224, cbModelParam._m0[11u].y, _2223 * cbModelParam._m0[11u].x))), _1656);
            frontier_phi_16_38_ladder = _2370.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2370.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2370.x * cbModelParam._m0[1u].y;
        }
        _1738 = frontier_phi_16_38_ladder_2;
        _1740 = frontier_phi_16_38_ladder_1;
        _1742 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1726 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_817, _818, _819), _1656);
        _1738 = _1726.x * cbModelParam._m0[1u].y;
        _1740 = _1726.y * cbModelParam._m0[1u].y;
        _1742 = _1726.z * cbModelParam._m0[1u].y;
    }
    float _1746 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _651);
    float _1747 = isnan(_1746) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1746 : min(cbModelParam._m0[25u].w, _1746));
    float _1838;
    float _1840;
    float _1842;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1802 = fma(_878, cbModelParam._m0[21u].z, fma(_874, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _870)) + cbModelParam._m0[21u].w;
        float _1806 = fma(_878, cbModelParam._m0[22u].z, fma(_874, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _870)) + cbModelParam._m0[22u].w;
        float _1810 = fma(_878, cbModelParam._m0[23u].z, fma(_874, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _870)) + cbModelParam._m0[23u].w;
        float _1813 = fma(_819, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817));
        float _1816 = fma(_819, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817));
        float _1819 = fma(_819, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817));
        float _1926;
        if (_1813 > 0.0)
        {
            _1926 = abs((1.0 - _1802) / _1813);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1802 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1926 = frontier_phi_28_24_ladder;
        }
        float _2243;
        if (_1816 > 0.0)
        {
            _2243 = abs((1.0 - _1806) / _1816);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1806 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2243 = frontier_phi_40_35_ladder;
        }
        float _2570;
        if (_1819 > 0.0)
        {
            _2570 = abs((1.0 - _1810) / _1819);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1810 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2570 = frontier_phi_50_47_ladder;
        }
        float _2572 = isnan(_2243) ? _1926 : (isnan(_1926) ? _2243 : min(_1926, _2243));
        float _2573 = isnan(_2570) ? _2572 : (isnan(_2572) ? _2570 : min(_2572, _2570));
        float _2577 = (_2573 * _1813) + _1802;
        float _2578 = (_2573 * _1816) + _1806;
        float _2579 = (_2573 * _1819) + _1810;
        float _2580 = _2573 * 9.9999997473787516355514526367188e-05;
        float _2581 = (-1.0) - _2580;
        float _2583 = _2580 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2579 > _2583) || ((_2579 < _2581) || ((_2578 > _2583) || ((_2578 < _2581) || ((_2577 < _2581) || (_2577 > _2583))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2579, cbModelParam._m0[17u].z, fma(_2578, cbModelParam._m0[17u].y, _2577 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2579, cbModelParam._m0[18u].z, fma(_2578, cbModelParam._m0[18u].y, _2577 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2579, cbModelParam._m0[19u].z, fma(_2578, cbModelParam._m0[19u].y, _2577 * cbModelParam._m0[19u].x))), _1747);
            frontier_phi_25_50_ladder = _2697.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2697.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2697.x * cbModelParam._m0[1u].z;
        }
        _1838 = frontier_phi_25_50_ladder_2;
        _1840 = frontier_phi_25_50_ladder_1;
        _1842 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1822 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_817, _818, _819), _1747);
        _1838 = _1822.x * cbModelParam._m0[1u].z;
        _1840 = _1822.y * cbModelParam._m0[1u].z;
        _1842 = _1822.z * cbModelParam._m0[1u].z;
    }
    float _1854 = ((((1.0 - _838) * ((_825 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_838 * _825)) * _809;
    float _1855 = _1854 * ((cbModelParam._m0[1u].w * (_1838 - _1738)) + _1738);
    float _1856 = _1854 * ((cbModelParam._m0[1u].w * (_1840 - _1740)) + _1740);
    float _1857 = _1854 * ((cbModelParam._m0[1u].w * (_1842 - _1742)) + _1742);
    float _1860 = fma(_1857, cbSceneParam._m0[89u].z, fma(_1856, cbSceneParam._m0[89u].y, _1855 * cbSceneParam._m0[89u].x));
    float _1863 = fma(_1857, cbSceneParam._m0[90u].z, fma(_1856, cbSceneParam._m0[90u].y, _1855 * cbSceneParam._m0[90u].x));
    float _1866 = fma(_1857, cbSceneParam._m0[91u].z, fma(_1856, cbSceneParam._m0[91u].y, _1855 * cbSceneParam._m0[91u].x));
    float _1900 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1904 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1908 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1912 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1913 = _1900 / _1912;
    float _1914 = _1904 / _1912;
    float _1915 = _1908 / _1912;
    float _2062;
    float _2063;
    float _2064;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1942 = ((uint(_1915 > cbSceneParam._m0[59u].y) + uint(_1915 > cbSceneParam._m0[59u].x)) + uint(_1915 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1943 = _1942 + 43u;
        uint _1951 = _1942 + 44u;
        uint _1959 = _1942 + 45u;
        uint _1967 = _1942 + 46u;
        float _1978 = fma(_1912, cbSceneParam._m0[_1943].w, fma(_1908, cbSceneParam._m0[_1943].z, fma(_1904, cbSceneParam._m0[_1943].y, _1900 * cbSceneParam._m0[_1943].x)));
        float _1982 = fma(_1912, cbSceneParam._m0[_1951].w, fma(_1908, cbSceneParam._m0[_1951].z, fma(_1904, cbSceneParam._m0[_1951].y, _1900 * cbSceneParam._m0[_1951].x)));
        float _1990 = fma(_1912, cbSceneParam._m0[_1967].w, fma(_1908, cbSceneParam._m0[_1967].z, fma(_1904, cbSceneParam._m0[_1967].y, _1900 * cbSceneParam._m0[_1967].x)));
        float _1995 = cbSceneParam._m0[33u].z * _1990;
        float _1997 = cbSceneParam._m0[33u].w * _1990;
        float _2000 = fma(_1912, cbSceneParam._m0[_1959].w, fma(_1908, cbSceneParam._m0[_1959].z, fma(_1904, cbSceneParam._m0[_1959].y, _1900 * cbSceneParam._m0[_1959].x))) / _1990;
        float _2048 = (cbSceneParam._m0[33u].x - sqrt(((_1914 * _1914) + (_1913 * _1913)) + (_1915 * _1915))) * cbSceneParam._m0[33u].y;
        float _4389 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2055 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1995 + _1978) / _1990, (_1997 + _1982) / _1990), _2000), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 + _1978) / _1990, (_1982 - _1995) / _1990), _2000), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1978 - _1995) / _1990, (_1982 - _1997) / _1990), _2000), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1978 - _1997) / _1990, (_1995 + _1982) / _1990), _2000), 0.0)).x), vec4(0.25)));
        _2062 = 1.0 - (_2055 * cbSceneParam._m0[34u].x);
        _2063 = 1.0 - (_2055 * cbSceneParam._m0[34u].y);
        _2064 = 1.0 - (_2055 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2062 = 1.0;
        _2063 = 1.0;
        _2064 = 1.0;
    }
    float _2128;
    float _2130;
    float _2132;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2116 = fma(_1912, cbSceneParam._m0[63u].w, fma(_1908, cbSceneParam._m0[63u].z, fma(_1904, cbSceneParam._m0[63u].y, _1900 * cbSceneParam._m0[63u].x)));
        float _2117 = fma(_1912, cbSceneParam._m0[60u].w, fma(_1908, cbSceneParam._m0[60u].z, fma(_1904, cbSceneParam._m0[60u].y, _1900 * cbSceneParam._m0[60u].x))) / _2116;
        float _2118 = fma(_1912, cbSceneParam._m0[61u].w, fma(_1908, cbSceneParam._m0[61u].z, fma(_1904, cbSceneParam._m0[61u].y, _1900 * cbSceneParam._m0[61u].x))) / _2116;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2117 >= cbSceneParam._m0[64u].x) && (_2118 >= cbSceneParam._m0[64u].y)) && (_2117 <= cbSceneParam._m0[64u].z)) && (_2118 <= cbSceneParam._m0[64u].w))
        {
            float _2256 = fma(_1912, cbSceneParam._m0[62u].w, fma(_1908, cbSceneParam._m0[62u].z, fma(_1904, cbSceneParam._m0[62u].y, _1900 * cbSceneParam._m0[62u].x))) / _2116;
            float _2260 = isnan(cbSceneParam._m0[41u].w) ? _2256 : (isnan(_2256) ? cbSceneParam._m0[41u].w : max(_2256, cbSceneParam._m0[41u].w));
            float _2303 = (cbSceneParam._m0[33u].x - sqrt(((_1914 * _1914) + (_1913 * _1913)) + (_1915 * _1915))) * cbSceneParam._m0[33u].y;
            float _4405 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
            float _2310 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2117, cbSceneParam._m0[33u].w + _2118), _2260), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2117, _2118 - cbSceneParam._m0[33u].z), _2260), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2117 - cbSceneParam._m0[33u].z, _2118 - cbSceneParam._m0[33u].w), _2260), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2117 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2118), _2260), 0.0)).x), vec4(0.25)));
            float _2314 = 1.0 - (_2310 * cbSceneParam._m0[34u].x);
            float _2315 = 1.0 - (_2310 * cbSceneParam._m0[34u].y);
            float _2316 = 1.0 - (_2310 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2316) ? _2064 : (isnan(_2064) ? _2316 : min(_2064, _2316));
            frontier_phi_37_36_ladder_1 = isnan(_2315) ? _2063 : (isnan(_2063) ? _2315 : min(_2063, _2315));
            frontier_phi_37_36_ladder_2 = isnan(_2314) ? _2062 : (isnan(_2062) ? _2314 : min(_2062, _2314));
        }
        else
        {
            frontier_phi_37_36_ladder = _2064;
            frontier_phi_37_36_ladder_1 = _2063;
            frontier_phi_37_36_ladder_2 = _2062;
        }
        _2128 = frontier_phi_37_36_ladder_2;
        _2130 = frontier_phi_37_36_ladder_1;
        _2132 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2128 = _2062;
        _2130 = _2063;
        _2132 = _2064;
    }
    uvec4 _2137 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2139 = _2137.x * 14u;
    uint _2140 = _2139 + 13u;
    float _2147 = _809 + (-1.0);
    float _2152 = (cbLight._m0[_2140].x * _2147) + 1.0;
    float _2153 = (cbLight._m0[_2140].y * _2147) + 1.0;
    float _2154 = (cbLight._m0[_2140].z * _2147) + 1.0;
    float _2155 = (cbLight._m0[_2140].w * _2147) + 1.0;
    uint _2156 = _2139 + 5u;
    float _2162 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
    uint _2166 = _2139 + 4u;
    float _2175 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2179 = _2139 | 1u;
    float _2190 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_648, _649, _650));
    float _2193 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_648, _649, _650));
    float _4441 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _4452 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2198 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * 0.3183098733425140380859375;
    float _2200 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * 0.3183098733425140380859375;
    float _2207 = ((cbLight._m0[_2156].x * _2162) * _2200) + (((cbLight._m0[_2166].x * _2128) * _2175) * _2198);
    float _2208 = ((_2162 * cbLight._m0[_2156].y) * _2200) + (((cbLight._m0[_2166].y * _2130) * _2175) * _2198);
    float _2209 = ((_2162 * cbLight._m0[_2156].z) * _2200) + (((cbLight._m0[_2166].z * _2132) * _2175) * _2198);
    uvec4 _2213 = floatBitsToUint(cbLight._m0[_2139 + 12u]);
    bool _2215 = _2213.x == 0u;
    float _2317;
    float _2319;
    float _2321;
    if (_2215)
    {
        _2317 = _2207;
        _2319 = _2208;
        _2321 = _2209;
    }
    else
    {
        uint _2325 = _2139 + 6u;
        float _2341 = (dot(vec3(cbLight._m0[_2139 + 2u].xyz), vec3(_648, _649, _650)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4463 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2344 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2317 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2207;
        _2319 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2208;
        _2321 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2209;
    }
    bool _2324 = _2213.y == 0u;
    float _2379;
    float _2381;
    float _2383;
    if (_2324)
    {
        _2379 = _2317;
        _2381 = _2319;
        _2383 = _2321;
    }
    else
    {
        uint _2541 = _2139 + 7u;
        float _2557 = (dot(vec3(cbLight._m0[_2139 + 3u].xyz), vec3(_648, _649, _650)) * 0.5) + 0.5;
        float _2558 = _2557 * _2557;
        float _4479 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2559 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2560 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2379 = (((cbLight._m0[_2541].x * 0.3183098733425140380859375) * _2559) * _2560) + _2317;
        _2381 = (((cbLight._m0[_2541].y * 0.3183098733425140380859375) * _2559) * _2560) + _2319;
        _2383 = (((cbLight._m0[_2541].z * 0.3183098733425140380859375) * _2559) * _2560) + _2321;
    }
    uint _2386 = _2139 + 8u;
    float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _651) * 0.949999988079071044921875);
    float _2400 = _2399 * _2399;
    float _2401 = cbLight._m0[_2139].x + _726;
    float _2402 = cbLight._m0[_2139].y + _727;
    float _2403 = cbLight._m0[_2139].z + _728;
    float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
    float _2408 = _2407 * _2401;
    float _2409 = _2407 * _2402;
    float _2410 = _2407 * _2403;
    float _2411 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2139].xyz));
    float _4495 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _4506 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2415 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2416 = dot(vec3(_648, _649, _650), vec3(_2408, _2409, _2410));
    float _4517 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2419 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2420 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2408, _2409, _2410));
    float _4528 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2424 = _2400 * _2400;
    float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
    float _2439 = (exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2440 = 1.0 - _2400;
    float _2451 = (0.5 / (((_2415 * ((_2414 * _2440) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2415 * _2440) + _2400) * _2414))) * _2414;
    float _4539 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2453 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
    uint _2467 = _2139 + 9u;
    float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _651) * 0.949999988079071044921875);
    float _2479 = _2478 * _2478;
    float _2480 = cbLight._m0[_2179].x + _726;
    float _2481 = cbLight._m0[_2179].y + _727;
    float _2482 = cbLight._m0[_2179].z + _728;
    float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
    float _2487 = _2486 * _2480;
    float _2488 = _2486 * _2481;
    float _2489 = _2486 * _2482;
    float _2490 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2179].xyz));
    float _4550 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2494 = dot(vec3(_648, _649, _650), vec3(_2487, _2488, _2489));
    float _4561 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2498 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2487, _2488, _2489));
    float _4572 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2502 = _2479 * _2479;
    float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
    float _2515 = (exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2516 = 1.0 - _2479;
    float _2526 = (0.5 / (((_2415 * ((_2493 * _2516) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2415 * _2516) + _2479) * _2493))) * _2493;
    float _4583 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
    float _2538 = (((_2515 * cbLight._m0[_2467].x) * _2528) * _2162) + ((((cbLight._m0[_2386].x * _2128) * _2439) * _2453) * _2175);
    float _2539 = (((_2515 * cbLight._m0[_2467].y) * _2528) * _2162) + ((((cbLight._m0[_2386].y * _2130) * _2439) * _2453) * _2175);
    float _2540 = (((_2515 * cbLight._m0[_2467].z) * _2528) * _2162) + ((((cbLight._m0[_2386].z * _2132) * _2439) * _2453) * _2175);
    float _2596;
    float _2598;
    float _2600;
    if (_2215)
    {
        _2596 = _2538;
        _2598 = _2539;
        _2600 = _2540;
    }
    else
    {
        uint _2602 = _2139 + 2u;
        uint _2606 = _2139 + 10u;
        float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2602].w)) * _651) * 0.949999988079071044921875);
        float _2621 = _2620 * _2620;
        float _2622 = cbLight._m0[_2602].x + _726;
        float _2623 = cbLight._m0[_2602].y + _727;
        float _2624 = cbLight._m0[_2602].z + _728;
        float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
        float _2629 = _2628 * _2622;
        float _2630 = _2628 * _2623;
        float _2631 = _2628 * _2624;
        float _2632 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2602].xyz));
        float _4594 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2636 = dot(vec3(_648, _649, _650), vec3(_2629, _2630, _2631));
        float _4605 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2640 = dot(vec3(cbLight._m0[_2602].xyz), vec3(_2629, _2630, _2631));
        float _4616 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2644 = _2621 * _2621;
        float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
        float _2657 = (exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2658 = 1.0 - _2621;
        float _2668 = (0.5 / (((_2415 * ((_2635 * _2658) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2415 * _2658) + _2621) * _2635))) * _2635;
        float _4627 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2670 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
        float _2671 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2596 = (((_2657 * cbLight._m0[_2606].x) * _2670) * _2671) + _2538;
        _2598 = (((_2657 * cbLight._m0[_2606].y) * _2670) * _2671) + _2539;
        _2600 = (((_2657 * cbLight._m0[_2606].z) * _2670) * _2671) + _2540;
    }
    float _2702;
    float _2704;
    float _2706;
    if (_2324)
    {
        _2702 = _2596;
        _2704 = _2598;
        _2706 = _2600;
    }
    else
    {
        uint _2713 = _2139 + 3u;
        uint _2717 = _2139 + 11u;
        float _2731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2713].w)) * _651) * 0.949999988079071044921875);
        float _2732 = _2731 * _2731;
        float _2733 = cbLight._m0[_2713].x + _726;
        float _2734 = cbLight._m0[_2713].y + _727;
        float _2735 = cbLight._m0[_2713].z + _728;
        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
        float _2740 = _2739 * _2733;
        float _2741 = _2739 * _2734;
        float _2742 = _2739 * _2735;
        float _2743 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2713].xyz));
        float _4643 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2747 = dot(vec3(_648, _649, _650), vec3(_2740, _2741, _2742));
        float _4654 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2751 = dot(vec3(cbLight._m0[_2713].xyz), vec3(_2740, _2741, _2742));
        float _4665 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2755 = _2732 * _2732;
        float _2759 = ((_2750 * _2750) * (_2755 + (-1.0))) + 1.0;
        float _2768 = (exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2769 = 1.0 - _2732;
        float _2779 = (0.5 / (((_2415 * ((_2746 * _2769) + _2732)) + 9.9999999392252902907785028219223e-09) + (((_2415 * _2769) + _2732) * _2746))) * _2746;
        float _4676 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2755 / ((_2759 * _2759) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2702 = (((_2768 * cbLight._m0[_2717].x) * _2781) * _2782) + _2596;
        _2704 = (((_2768 * cbLight._m0[_2717].y) * _2781) * _2782) + _2598;
        _2706 = (((_2768 * cbLight._m0[_2717].z) * _2781) * _2782) + _2600;
    }
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    if (_2137.y == 0u)
    {
        uvec4 _2803 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2804 = _2803.x;
        uint _2815 = uint((float(_2803.y) * floor(float(uint(cbSceneParam._m0[85u].y * _747) / _2804))) + floor(float(uint(cbSceneParam._m0[85u].x * _746) / _2804)));
        float _2825 = (log2(_1915 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2826 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        uint _2829 = uint(isnan(14.0) ? _2826 : (isnan(_2826) ? 14.0 : min(_2826, 14.0)));
        uvec4 _2834 = texelFetch(g_lightClusterGridBuffer, int(((_2829 << 2u) + (_2815 << 6u)) >> 2u));
        uint _2835 = _2834.x;
        uint _2836 = _2803.z;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((((1u << ((_2836 >> 4u) & 15u)) + 4294967295u) & _2835) == 0u) || ((_2836 & 240u) == 0u))
        {
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
        }
        else
        {
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            uint _3074 = 0u;
            uint _3083;
            bool _3084;
            for (;;)
            {
                _3083 = texelFetch(g_lightClassification, int((((_2829 << 5u) + (_2815 << 9u)) + (_3074 << 2u)) >> 2u)).x;
                _3084 = _3083 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3084)
                {
                    frontier_phi_71_pred = _3073;
                    frontier_phi_71_pred_1 = _3072;
                    frontier_phi_71_pred_2 = _3071;
                    frontier_phi_71_pred_3 = _3070;
                    frontier_phi_71_pred_4 = _3069;
                    frontier_phi_71_pred_5 = _3068;
                }
                else
                {
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    uint _3219;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3073;
                    _3219 = _3083;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    for (;;)
                    {
                        uint _3223 = uint(findLSB(_3219)) + (_3074 << 5u);
                        uint _3220 = (_3219 + 4294967295u) & _3219;
                        uint _3225 = _3223 * 48u;
                        vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 3u)).x));
                        uint _3245 = (_3223 * 48u) + 4u;
                        vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 3u)).x));
                        uint _3264 = (_3223 * 48u) + 8u;
                        vec3 _3275 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x));
                        float _3279 = _3239.x - _1913;
                        float _3280 = _3239.y - _1914;
                        float _3281 = _3239.z - _1915;
                        float _3282 = dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281));
                        float _3285 = inversesqrt(_3282);
                        float _3286 = _3285 * _3279;
                        float _3287 = _3285 * _3280;
                        float _3288 = _3285 * _3281;
                        float _3289 = dot(vec3(_765, _768, _771), vec3(_3286, _3287, _3288));
                        float _3294 = 1.0 - (_3282 * _3239.w);
                        float _4702 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3295 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3296 = sqrt(_3282) * _3258.w;
                        float _3299 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                        float _3300 = _3299 * _3299;
                        float _3303 = ((1.0 - _3300) * _3289) + _3300;
                        float _3306 = _3296 * _3296;
                        float _3310 = ((isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0))) * _3295) / ((_3306 * 0.699999988079071044921875) + 1.0);
                        float _3314 = (-0.0) - _1913;
                        float _3315 = (-0.0) - _1914;
                        float _3316 = (-0.0) - _1915;
                        float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                        float _3321 = _3320 * _3314;
                        float _3322 = _3320 * _3315;
                        float _3323 = _3320 * _3316;
                        float _3330 = exp2(log2(1.0 / ((_3306 * 3.5) + 5.0)) * 0.25);
                        float _3331 = 1.0 - _825;
                        float _3338 = sqrt(1.0 - ((1.0 - (_3331 * _3331)) * (1.0 - (_3330 * _3330))));
                        float _3339 = _3338 * _3338;
                        float _3340 = _3339 * _3339;
                        float _3341 = _3321 + _3286;
                        float _3342 = _3322 + _3287;
                        float _3343 = _3323 + _3288;
                        float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                        float _3351 = dot(vec3(_765, _768, _771), vec3(_3321, _3322, _3323));
                        float _4718 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3354 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3355 = dot(vec3(_765, _768, _771), vec3(_3347 * _3341, _3347 * _3342, _3347 * _3343));
                        float _4729 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3358 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3362 = ((_3358 * _3358) * (_3340 + (-1.0))) + 1.0;
                        float _3363 = _3299 * _3339;
                        float _3364 = _3363 * _3363;
                        float _3367 = ((1.0 - _3364) * _3289) + _3364;
                        float _4740 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3368 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3369 = 1.0 - _3339;
                        float _3379 = (0.5 / (((_3368 * ((_3354 * _3369) + _3339)) + 9.9999999392252902907785028219223e-09) + (((_3368 * _3369) + _3339) * _3354))) * _3368;
                        float _4751 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3390 = (((_3340 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3362 * _3362) * ((_3306 * 2.1991131305694580078125) + 3.141590118408203125))) * _3295;
                        _3143 = (_3310 * _3258.x) + _3216;
                        _3144 = (_3310 * _3258.y) + _3217;
                        _3145 = (_3310 * _3258.z) + _3218;
                        _3140 = (_3390 * _3275.x) + _3213;
                        _3141 = (_3390 * _3275.y) + _3214;
                        _3142 = (_3390 * _3275.z) + _3215;
                        if (_3220 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3145;
                            _3219 = _3220;
                        }
                    }
                    frontier_phi_71_pred = _3145;
                    frontier_phi_71_pred_1 = _3144;
                    frontier_phi_71_pred_2 = _3143;
                    frontier_phi_71_pred_3 = _3142;
                    frontier_phi_71_pred_4 = _3141;
                    frontier_phi_71_pred_5 = _3140;
                }
                _2926 = frontier_phi_71_pred;
                _2924 = frontier_phi_71_pred_1;
                _2922 = frontier_phi_71_pred_2;
                _2920 = frontier_phi_71_pred_3;
                _2918 = frontier_phi_71_pred_4;
                _2916 = frontier_phi_71_pred_5;
                uint _3075 = _3074 + 1u;
                if (_3075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3068 = _2916;
                    _3069 = _2918;
                    _3070 = _2920;
                    _3071 = _2922;
                    _3072 = _2924;
                    _3073 = _2926;
                    _3074 = _3075;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
        }
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.z;
        uint _2932 = (_2930 >> 8u) & 15u;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        if (((4294967295u << _2932) & _2835) == 0u)
        {
            _3036 = _2915;
            _3038 = _2917;
            _3040 = _2919;
            _3042 = _2921;
            _3044 = _2923;
            _3046 = _2925;
        }
        else
        {
            float _3061 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
            float _3062 = _3061 * _1913;
            float _3063 = _3061 * _1914;
            float _3064 = _3061 * _1915;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2932 < ((_2930 >> 12u) & 15u))
            {
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3196 = _2915;
                float _3197 = _2917;
                float _3198 = _2919;
                float _3199 = _2921;
                float _3200 = _2923;
                float _3201 = _2925;
                uint _3202 = _2932;
                uint _3211;
                bool _3212;
                for (;;)
                {
                    _3211 = texelFetch(g_lightClassification, int((((_2829 << 5u) + (_2815 << 9u)) + (_3202 << 2u)) >> 2u)).x;
                    _3212 = _3211 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3212)
                    {
                        frontier_phi_82_pred = _3201;
                        frontier_phi_82_pred_1 = _3200;
                        frontier_phi_82_pred_2 = _3199;
                        frontier_phi_82_pred_3 = _3198;
                        frontier_phi_82_pred_4 = _3197;
                        frontier_phi_82_pred_5 = _3196;
                    }
                    else
                    {
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3417 = _3196;
                        float _3418 = _3197;
                        float _3419 = _3198;
                        float _3420 = _3199;
                        float _3421 = _3200;
                        float _3422 = _3201;
                        uint _3423 = _3211;
                        uint _3424;
                        vec4 _3449;
                        float _3450;
                        vec4 _3465;
                        vec3 _3477;
                        vec4 _3492;
                        vec4 _3508;
                        float _3554;
                        bool _3555;
                        for (;;)
                        {
                            uint _3434 = ((_3202 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3423));
                            _3424 = (_3423 + 4294967295u) & _3423;
                            uint _3436 = _3434 * 40u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            _3450 = _3449.w;
                            uint _3452 = (_3434 * 40u) + 4u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3434 * 40u) + 8u;
                            _3477 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x));
                            uint _3479 = (_3434 * 40u) + 16u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3495 = (_3434 * 40u) + 20u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3434 * 40u) + 24u;
                            vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3529 = (_3434 * 40u) + 28u;
                            vec4 _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            _3554 = fma(_1915, _3542.z, fma(_1914, _3542.y, _3542.x * _1913)) + _3542.w;
                            _3555 = !((fma(_1915, _3523.z, fma(_1914, _3523.y, _3523.x * _1913)) + _3523.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3555)
                            {
                                float _3582 = _3449.x - _1913;
                                float _3583 = _3449.y - _1914;
                                float _3584 = _3449.z - _1915;
                                float _3585 = dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584));
                                float _3588 = inversesqrt(_3585);
                                float _3589 = _3588 * _3582;
                                float _3590 = _3588 * _3583;
                                float _3591 = _3588 * _3584;
                                float _3595 = 1.0 - (_3585 / (_3450 * _3450));
                                float _4762 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3600 = sqrt(_3585) * _3465.w;
                                float _3602 = 1.39999997615814208984375 / (_3600 + 1.39999997615814208984375);
                                float _3603 = _3602 * _3602;
                                float _3606 = ((1.0 - _3603) * dot(vec3(_3589, _3590, _3591), vec3(_765, _768, _771))) + _3603;
                                float _3609 = _3600 * _3600;
                                float _3613 = (fma(_1915, _3492.z, fma(_1914, _3492.y, _3492.x * _1913)) + _3492.w) / _3554;
                                float _3614 = (fma(_1915, _3508.z, fma(_1914, _3508.y, _3508.x * _1913)) + _3508.w) / _3554;
                                float _3618 = 1.0 - dot(vec2(_3613, _3614), vec2(_3613, _3614));
                                float _4778 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3620 = _3619 * (((isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0))) * _3596) / ((_3609 * 0.699999988079071044921875) + 1.0));
                                float _3632 = exp2(log2(1.0 / ((_3609 * 3.5) + 5.0)) * 0.25);
                                float _3633 = 1.0 - _825;
                                float _3640 = sqrt(1.0 - ((1.0 - (_3633 * _3633)) * (1.0 - (_3632 * _3632))));
                                float _3641 = _3640 * _3640;
                                float _3642 = _3641 * _3641;
                                float _3643 = _3589 - _3062;
                                float _3644 = _3590 - _3063;
                                float _3645 = _3591 - _3064;
                                float _3649 = inversesqrt(dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645)));
                                float _3653 = dot(vec3(_765, _768, _771), vec3((-0.0) - _3062, (-0.0) - _3063, (-0.0) - _3064));
                                float _4789 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3656 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3657 = dot(vec3(_765, _768, _771), vec3(_3649 * _3643, _3649 * _3644, _3649 * _3645));
                                float _4800 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3660 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3664 = ((_3660 * _3660) * (_3642 + (-1.0))) + 1.0;
                                float _3665 = _3602 * _3641;
                                float _3666 = _3665 * _3665;
                                float _3672 = ((1.0 - _3666) * dot(vec3(_765, _768, _771), vec3(_3589, _3590, _3591))) + _3666;
                                float _4811 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3674 = 1.0 - _3641;
                                float _3684 = (0.5 / (((_3673 * ((_3656 * _3674) + _3641)) + 9.9999999392252902907785028219223e-09) + (((_3673 * _3674) + _3641) * _3656))) * _3673;
                                float _4822 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3694 = (_3619 * _3596) * (((_3642 * 3.1415927410125732421875) * (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) / ((_3664 * _3664) * ((_3609 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3620 * _3465.z;
                                frontier_phi_88_pred_1 = _3620 * _3465.y;
                                frontier_phi_88_pred_2 = _3620 * _3465.x;
                                frontier_phi_88_pred_3 = _3694 * _3477.z;
                                frontier_phi_88_pred_4 = _3694 * _3477.y;
                                frontier_phi_88_pred_5 = _3694 * _3477.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3703 = frontier_phi_88_pred;
                            _3702 = frontier_phi_88_pred_1;
                            _3701 = frontier_phi_88_pred_2;
                            _3700 = frontier_phi_88_pred_3;
                            _3699 = frontier_phi_88_pred_4;
                            _3698 = frontier_phi_88_pred_5;
                            _3407 = _3701 + _3420;
                            _3408 = _3702 + _3421;
                            _3409 = _3703 + _3422;
                            _3404 = _3698 + _3417;
                            _3405 = _3699 + _3418;
                            _3406 = _3700 + _3419;
                            if (_3424 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3424;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3409;
                        frontier_phi_82_pred_1 = _3408;
                        frontier_phi_82_pred_2 = _3407;
                        frontier_phi_82_pred_3 = _3406;
                        frontier_phi_82_pred_4 = _3405;
                        frontier_phi_82_pred_5 = _3404;
                    }
                    _3047 = frontier_phi_82_pred;
                    _3045 = frontier_phi_82_pred_1;
                    _3043 = frontier_phi_82_pred_2;
                    _3041 = frontier_phi_82_pred_3;
                    _3039 = frontier_phi_82_pred_4;
                    _3037 = frontier_phi_82_pred_5;
                    uint _3203 = _3202 + 1u;
                    if (_3203 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3196 = _3037;
                        _3197 = _3039;
                        _3198 = _3041;
                        _3199 = _3043;
                        _3200 = _3045;
                        _3201 = _3047;
                        _3202 = _3203;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3043;
                frontier_phi_63_64_ladder_1 = _3047;
                frontier_phi_63_64_ladder_2 = _3045;
                frontier_phi_63_64_ladder_3 = _3041;
                frontier_phi_63_64_ladder_4 = _3039;
                frontier_phi_63_64_ladder_5 = _3037;
            }
            else
            {
                frontier_phi_63_64_ladder = _2921;
                frontier_phi_63_64_ladder_1 = _2925;
                frontier_phi_63_64_ladder_2 = _2923;
                frontier_phi_63_64_ladder_3 = _2919;
                frontier_phi_63_64_ladder_4 = _2917;
                frontier_phi_63_64_ladder_5 = _2915;
            }
            _3036 = frontier_phi_63_64_ladder_5;
            _3038 = frontier_phi_63_64_ladder_4;
            _3040 = frontier_phi_63_64_ladder_3;
            _3042 = frontier_phi_63_64_ladder;
            _3044 = frontier_phi_63_64_ladder_2;
            _3046 = frontier_phi_63_64_ladder_1;
        }
        float _3051 = isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0));
        _2848 = (_3051 * _3042) + _2379;
        _2850 = (_3051 * _3044) + _2381;
        _2852 = (_3051 * _3046) + _2383;
        _2854 = ((_3036 * 0.039999999105930328369140625) * _3051) + _2702;
        _2856 = ((_3038 * 0.039999999105930328369140625) * _3051) + _2704;
        _2858 = ((_3040 * 0.039999999105930328369140625) * _3051) + _2706;
    }
    else
    {
        _2848 = _2379;
        _2850 = _2381;
        _2852 = _2383;
        _2854 = _2702;
        _2856 = _2704;
        _2858 = _2706;
    }
    float _4838 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4849 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4860 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2875 = ((isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2848 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _809))) + ((_2854 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1645)) * cbPerFrame._m0[3u].x);
    float _2876 = ((isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2850 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _809))) + ((_2856 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1645)) * cbPerFrame._m0[3u].x);
    float _2877 = ((isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2852 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _809))) + ((_2858 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1645)) * cbPerFrame._m0[3u].x);
    uint _2878 = _249 + 6u;
    float _2886 = _746 / cbSceneParam._m0[86u].x;
    float _2887 = _747 / cbSceneParam._m0[86u].y;
    vec4 _2901 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, (log2((isnan(cbSceneParam._m0[77u].w) ? _669 : (isnan(_669) ? cbSceneParam._m0[77u].w : min(_669, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2903 = _2901.x;
    float _2904 = _2901.y;
    float _2905 = _2901.z;
    float _2906 = _2901.w;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    if (_669 > cbSceneParam._m0[78u].w)
    {
        float _2940 = isnan(_669) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _669 : min(cbSceneParam._m0[80u].w, _669));
        float _2941 = _2940 / _669;
        float _2952 = _2941 * _719;
        float _2953 = _720 * _2941;
        float _2954 = (-0.0) - _2953;
        float _2956 = _2941 * _721;
        float _2958 = (cbSceneParam._m0[77u].w * _2954) / _2940;
        float _2959 = _2958 + cbSceneParam._m0[79u].w;
        float _2960 = cbSceneParam._m0[79u].w - _2953;
        float _2966 = sqrt(((_2952 * _2952) + (_2953 * _2953)) + (_2956 * _2956));
        float _2969 = (1.0 - (cbSceneParam._m0[77u].w / _2940)) * _2966;
        float _2974 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2976 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3153;
        if (abs((_2954 - _2958) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3153 = ((((_2959 > 0.0) ? exp2(_2974 * _2959) : (2.0 - exp2(_2976 * _2959))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2969;
        }
        else
        {
            float _3097 = 1.0 / cbSceneParam._m0[80u].x;
            float _3098 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : max(_2959, _2960));
            float _3099 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : min(_2959, _2960));
            float _3108 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : min(_3098, 0.0));
            float _3109 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : min(_3099, 0.0));
            _3153 = ((abs(_2966 / _2954) * cbSceneParam._m0[80u].y) * ((((_3108 - _3109) * 2.0) - ((exp2(_2974 * (isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0)))) - exp2(_2974 * (isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))))) * _3097)) - ((exp2(_2976 * _3108) - exp2(_2976 * _3109)) * _3097))) + (_2969 * cbSceneParam._m0[80u].z);
        }
        vec4 _3155 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, 1.0), 0.0);
        float _3164 = exp2((_3153 * (-1.44269502162933349609375)) * (1.0 - _3155.w));
        float _3165 = log2(_3164);
        float _3181 = log2(_2906);
        _2978 = (exp2(_3181 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].x)) * _3155.x) / cbSceneParam._m0[78u].x)) + _2903;
        _2980 = (exp2(_3181 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].y)) * _3155.y) / cbSceneParam._m0[78u].y)) + _2904;
        _2982 = (exp2(_3181 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].z)) * _3155.z) / cbSceneParam._m0[78u].z)) + _2905;
        _2984 = _3164 * _2906;
    }
    else
    {
        _2978 = _2903;
        _2980 = _2904;
        _2982 = _2905;
        _2984 = _2906;
    }
    bool _3191;
    vec4 _2994;
    vec4 _3016;
    float _3018;
    float _3022;
    float _3023;
    float _3024;
    float _3025;
    bool _3035;
    for (;;)
    {
        _2994 = cbMatDynParam._m0[0u];
        float _2996 = roundEven(_2994.y);
        bool _2997 = _2996 == 3.0;
        float _2998 = log2(_2984);
        float _3005 = exp2(_2998 * cbSceneParam._m0[78u].x) * _2875;
        float _3006 = exp2(_2998 * cbSceneParam._m0[78u].y) * _2876;
        float _3007 = exp2(_2998 * cbSceneParam._m0[78u].z) * _2877;
        float _3014 = _735 + (-0.5);
        _3016 = cbMtdParam._m0[1u];
        _3018 = _3016.y * _3014;
        float _3021 = (_2996 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3022 = _3021 * (_2997 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2978)));
        _3023 = _3021 * (_2997 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2980)));
        _3024 = _3021 * (_2997 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2982)));
        _3025 = _3014 * 0.999000012874603271484375;
        _3035 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3035)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _3025) < 0.5)
            {
                _3191 = true;
                break;
            }
        }
        uint _3132 = _784 + uint(_2994.w);
        if ((cbInstanceData._m0[_3132].w < 1.0) && ((cbInstanceData._m0[_3132].w + _3025) < 0.5))
        {
            _3191 = true;
            break;
        }
        if ((_3018 + 1.0) < _3016.x)
        {
            _3191 = true;
            break;
        }
        _3191 = false;
        break;
    }
    float _3395;
    if (_3191)
    {
        discard_state = true;
        _3395 = 0.0;
    }
    else
    {
        _3395 = cbInstanceData._m0[_2878].w;
    }
    SV_Target.x = _3022;
    SV_Target.y = _3023;
    SV_Target.z = _3024;
    SV_Target.w = _3395;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2878].w;
    discard_exit();
}


