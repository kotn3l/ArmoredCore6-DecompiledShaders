#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1540;
float _3920;
float _3921;
float _3922;
float _3923;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _371.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].z) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3932 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _450 = (_443 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _451 = (_443 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _452 = (_443 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _371.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[24u].z) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3943 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _560 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _562 = _560.x;
    float _572 = dot(vec4(_562, _560.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _584 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _371.z) * 2.0) - ((((_562 - _572) * cbMtdParam._m0[24u].z) + _572) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3954 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _585 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _598 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_585 * ((_543.x * cbMtdParam._m0[14u].x) - _523)) + _523);
    float _601 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_585 * ((_543.y * cbMtdParam._m0[14u].y) - _524)) + _524);
    float _604 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_585 * ((_543.z * cbMtdParam._m0[14u].z) - _525)) + _525);
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _641 = _639.x;
    float _642 = _639.y;
    float _643 = _639.z;
    float _650 = ((_622.x - _641) * _443) + _641;
    float _651 = ((_622.y - _642) * _443) + _642;
    float _652 = ((_622.z - _643) * _443) + _643;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _675 = ((_664.x - _650) * _516) + _650;
    float _676 = ((_664.y - _651) * _516) + _651;
    float _677 = ((_664.z - _652) * _516) + _652;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _702 = ((_689.z - _677) * _585) + _677;
    float _705 = ((((_689.x - _675) * _585) + _675) * 2.0) + (-1.0);
    float _707 = ((((_689.y - _676) * _585) + _676) * 2.0) + (-1.0);
    float _708 = dot(vec2(_705, _707), vec2(_705, _707));
    float _3965 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _713 = sqrt(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _739 = (((_727.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _705;
    float _740 = (((_727.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _707;
    float _743 = fma(_713, _251, fma(_740, _258, _739 * _244));
    float _746 = fma(_713, _252, fma(_740, _259, _739 * _245));
    float _749 = fma(_713, _253, fma(_740, _260, _739 * _246));
    float _753 = inversesqrt(dot(vec3(_743, _746, _749), vec3(_743, _746, _749)));
    vec4 _780 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _782 = _780.x;
    float _783 = 1.0 - _782;
    float _789 = (cbMtdParam._m0[19u].x + dot(vec4(_753 * _743, _753 * _746, _753 * _749, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_782 - _783) * cbMtdParam._m0[24u].w) + _783) * cbMtdParam._m0[21u].z);
    float _3976 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _790 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _792 = (-0.0) - cbMtdParam._m0[24u].x;
    float _794 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _794 : (isnan(_794) ? 1.0 : min(_794, 1.0));
    float _802 = _790 - ((_790 * TEXCOORD_8.x) * _795);
    float _803 = _790 - ((_790 * TEXCOORD_8.y) * _795);
    float _804 = _790 - ((_790 * TEXCOORD_8.z) * _795);
    float _811 = (_802 * (cbMtdParam._m0[17u].x - _598)) + _598;
    float _812 = (_803 * (cbMtdParam._m0[17u].y - _601)) + _601;
    float _813 = (_804 * (cbMtdParam._m0[17u].z - _604)) + _604;
    vec4 _825 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _827 = _825.x;
    float _828 = 1.0 - _827;
    float _856 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_827 - _828) * cbMtdParam._m0[24u].y) + _828) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3997 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _857 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _865 = ((((cbMtdParam._m0[10u].x - _811) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _857) + _811;
    float _866 = ((((cbMtdParam._m0[10u].y - _812) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _857) + _812;
    float _867 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _813)) * _857) + _813;
    float _871 = (cbMtdParam._m0[19u].w * (_727.z - _702)) + _702;
    vec4 _885 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _892 = (_885.x * 2.0) + (-1.0);
    float _893 = (_885.y * 2.0) + (-1.0);
    float _894 = dot(vec2(_892, _893), vec2(_892, _893));
    float _4008 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _902 = ((_885.z - _871) * _802) + _871;
    float _905 = ((cbMtdParam._m0[23u].y - _902) * _857) + _902;
    vec4 _924 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _930 = (_924.x * 2.0) + (-1.0);
    float _931 = (_924.y * 2.0) + (-1.0);
    float _932 = dot(vec2(_930, _931), vec2(_930, _931));
    float _4019 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _947 = ((sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) - _713) * _804) + _713;
    float _950 = (((_892 - _739) * _802) + _739) + (cbMtdParam._m0[21u].x * _739);
    float _951 = (((_893 - _740) * _803) + _740) + (cbMtdParam._m0[21u].x * _740);
    float _962 = (((_930 - _950) + (_950 * cbMtdParam._m0[22u].z)) * _857) + _950;
    float _963 = (((_931 - _951) + (_951 * cbMtdParam._m0[22u].z)) * _857) + _951;
    float _964 = (_857 * (sqrt(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) - _947)) + _947;
    float _966 = cbMtdParam._m0[22u].x + _727.w;
    float _969 = fma(_964, _251, fma(_963, _258, _962 * _244));
    float _972 = fma(_964, _252, fma(_963, _259, _962 * _245));
    float _975 = fma(_964, _253, fma(_963, _260, _962 * _246));
    float _979 = inversesqrt(dot(vec3(_969, _972, _975), vec3(_969, _972, _975)));
    float _980 = _979 * _969;
    float _981 = _979 * _972;
    float _982 = _979 * _975;
    float _4030 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _983 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4052 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4063 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4074 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _1001 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1051 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1041);
    float _1052 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1041);
    float _1053 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1041);
    float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
    float _1058 = _1051 * _1057;
    float _1059 = _1052 * _1057;
    float _1060 = _1053 * _1057;
    vec4 _1065 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1067 = _1065.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1221 = sqrt(((_1051 * _1051) + (_1052 * _1052)) + (_1053 * _1053));
        float _1227 = (cbMatDynParam._m0[5u].x * _1221) + cbMatDynParam._m0[5u].y;
        float _4085 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1232 = (cbMatDynParam._m0[5u].z * _1221) + cbMatDynParam._m0[5u].w;
        float _4096 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) - _1228)) + _1228) < ((_1067 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1078 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1079 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1097 = fma(_982, cbSceneParam._m0[5u].z, fma(_981, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _980));
    float _1100 = fma(_982, cbSceneParam._m0[6u].z, fma(_981, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _980));
    float _1103 = fma(_982, cbSceneParam._m0[7u].z, fma(_981, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _980));
    uint _1116 = _263 + 9u;
    uint _1117 = _1116 + uint(cbMatDynParam._m0[0u].w);
    float _1123 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_1117].x;
    float _1124 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_1117].y;
    float _1125 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * cbInstanceData._m0[_1117].z;
    float _4107 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1126 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1127 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1128 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    vec4 _1137 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1078, cbSceneParam._m0[86u].y * _1079));
    float _1141 = ((isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * TEXCOORD_5.w) * _1137.x;
    float _1142 = dot(vec3(_980, _981, _982), vec3(_1058, _1059, _1060));
    float _1145 = _1142 * 2.0;
    float _1149 = (_1145 * _980) - _1058;
    float _1150 = (_1145 * _981) - _1059;
    float _1151 = (_1145 * _982) - _1060;
    float _1155 = abs(dot(vec3(_1058, _1059, _1060), vec3(_980, _981, _982)));
    float _4140 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1157 = sqrt(_983);
    float _1170 = exp2((_1157 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1157 * 3.0));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1206 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1210 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1539;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1264 = fma(_1210, cbModelParam._m0[26u].z, fma(_1206, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1202));
        float _1268 = fma(_1210, cbModelParam._m0[27u].z, fma(_1206, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1202));
        float _1272 = fma(_1210, cbModelParam._m0[28u].z, fma(_1206, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1202));
        float _1297 = _1202 + _980;
        float _1298 = _1206 + _981;
        float _1299 = _1210 + _982;
        float _1309 = fma(_1299, cbModelParam._m0[26u].z, fma(_1298, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1297)) - _1264;
        float _1310 = fma(_1299, cbModelParam._m0[27u].z, fma(_1298, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1297)) - _1268;
        float _1311 = fma(_1299, cbModelParam._m0[28u].z, fma(_1298, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1297)) - _1272;
        float _1315 = inversesqrt(dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311)));
        float _1328 = ((_1315 * _1309) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1264 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1315 * _1310) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1268 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1315 * _1311) / cbModelParam._m0[34u].z) + ((((((_1272 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        float _1367 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1333.x + (-0.5));
        float _1369 = _1367 * (_1333.y + (-0.5));
        float _1370 = _1367 * (_1333.z + (-0.5));
        float _1377 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1340.x + (-0.5));
        float _1379 = _1377 * (_1340.y + (-0.5));
        float _1380 = _1377 * (_1340.z + (-0.5));
        float _1387 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1347.x + (-0.5));
        float _1389 = _1387 * (_1347.y + (-0.5));
        float _1390 = _1387 * (_1347.z + (-0.5));
        float _1397 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1354.x + (-0.5));
        float _1399 = _1397 * (_1354.y + (-0.5));
        float _1400 = _1397 * (_1354.z + (-0.5));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = _1368 * 0.5;
        float _1405 = _1378 * 0.5;
        float _1406 = _1388 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1421 = (dot(vec3(_980, _981, _982), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1431 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4188 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1433 + 1.0))) + _1438) * _1401;
        float _1448 = _1369 * 0.5;
        float _1449 = _1379 * 0.5;
        float _1450 = _1389 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_980, _981, _982), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4221 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1475 + 1.0))) + _1480) * _1402;
        float _1490 = _1370 * 0.5;
        float _1491 = _1380 * 0.5;
        float _1492 = _1390 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_980, _981, _982), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4254 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1517 + 1.0))) + _1522) * _1403;
        _1539 = _1370;
        _1541 = _1369;
        _1542 = _1368;
        _1543 = _1380;
        _1544 = _1379;
        _1545 = _1378;
        _1546 = _1390;
        _1547 = _1389;
        _1548 = _1388;
        _1549 = _1403;
        _1550 = _1402;
        _1551 = _1401;
        _1552 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1553 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1554 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
    }
    else
    {
        _1539 = _1540;
        _1541 = _1540;
        _1542 = _1540;
        _1543 = _1540;
        _1544 = _1540;
        _1545 = _1540;
        _1546 = _1540;
        _1547 = _1540;
        _1548 = _1540;
        _1549 = _1540;
        _1550 = _1540;
        _1551 = _1540;
        _1552 = 0.0;
        _1553 = 0.0;
        _1554 = 0.0;
    }
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1580 = fma(_1210, cbModelParam._m0[30u].z, fma(_1206, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1202));
        float _1584 = fma(_1210, cbModelParam._m0[31u].z, fma(_1206, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1202));
        float _1588 = fma(_1210, cbModelParam._m0[32u].z, fma(_1206, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1202));
        float _1611 = _1202 + _980;
        float _1612 = _1206 + _981;
        float _1613 = _1210 + _982;
        float _1623 = fma(_1613, cbModelParam._m0[30u].z, fma(_1612, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1611)) - _1580;
        float _1624 = fma(_1613, cbModelParam._m0[31u].z, fma(_1612, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1611)) - _1584;
        float _1625 = fma(_1613, cbModelParam._m0[32u].z, fma(_1612, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1611)) - _1588;
        float _1629 = inversesqrt(dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625)));
        float _1642 = ((_1629 * _1623) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1580 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1643 = ((_1629 * _1624) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1584 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1644 = ((_1629 * _1625) / cbModelParam._m0[35u].z) + ((((((_1588 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1646 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1642, _1643, _1644), 0.0);
        vec4 _1653 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1642, _1643, _1644), 0.0);
        vec4 _1660 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1642, _1643, _1644), 0.0);
        vec4 _1667 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1642, _1643, _1644), 0.0);
        float _1679 = exp2((_1646.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1646.x + (-0.5));
        float _1681 = _1679 * (_1646.y + (-0.5));
        float _1682 = _1679 * (_1646.z + (-0.5));
        float _1689 = exp2((_1653.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1653.x + (-0.5));
        float _1691 = _1689 * (_1653.y + (-0.5));
        float _1692 = _1689 * (_1653.z + (-0.5));
        float _1699 = exp2((_1660.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1660.x + (-0.5));
        float _1701 = _1699 * (_1660.y + (-0.5));
        float _1702 = _1699 * (_1660.z + (-0.5));
        float _1709 = exp2((_1667.w + (-0.5)) * 20.0) * 2.0;
        float _1710 = _1709 * (_1667.x + (-0.5));
        float _1711 = _1709 * (_1667.y + (-0.5));
        float _1712 = _1709 * (_1667.z + (-0.5));
        float _1713 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1714 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1715 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1716 = _1680 * 0.5;
        float _1717 = _1690 * 0.5;
        float _1718 = _1700 * 0.5;
        float _1719 = dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718));
        float _1724 = (_1719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1719);
        float _1732 = (dot(vec3(_980, _981, _982), vec3(_1724 * _1716, _1724 * _1717, _1724 * _1718)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718)) / (_1713 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1743 = _1742 * 2.0;
        float _1747 = (1.0 - _1742) / (_1742 + 1.0);
        float _4317 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1757 = ((((1.0 - _1748) * (_1743 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1743 + 1.0))) + _1748) * _1713;
        float _1758 = _1681 * 0.5;
        float _1759 = _1691 * 0.5;
        float _1760 = _1701 * 0.5;
        float _1761 = dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760));
        float _1766 = (_1761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1761);
        float _1774 = (dot(vec3(_980, _981, _982), vec3(_1766 * _1758, _1766 * _1759, _1766 * _1760)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760)) / (_1714 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1785 = _1784 * 2.0;
        float _1789 = (1.0 - _1784) / (_1784 + 1.0);
        float _4350 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1799 = ((((1.0 - _1790) * (_1785 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1785 + 1.0))) + _1790) * _1714;
        float _1800 = _1682 * 0.5;
        float _1801 = _1692 * 0.5;
        float _1802 = _1702 * 0.5;
        float _1803 = dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802));
        float _1808 = (_1803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1803);
        float _1816 = (dot(vec3(_980, _981, _982), vec3(_1808 * _1800, _1808 * _1801, _1808 * _1802)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1825 = sqrt(((_1801 * _1801) + (_1800 * _1800)) + (_1802 * _1802)) / (_1715 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1827 = _1826 * 2.0;
        float _1831 = (1.0 - _1826) / (_1826 + 1.0);
        float _4383 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1841 = ((((1.0 - _1832) * (_1827 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1827 + 1.0))) + _1832) * _1715;
        _1849 = _1682;
        _1850 = _1681;
        _1851 = _1680;
        _1852 = _1692;
        _1853 = _1691;
        _1854 = _1690;
        _1855 = _1702;
        _1856 = _1701;
        _1857 = _1700;
        _1858 = _1715;
        _1859 = _1714;
        _1860 = _1713;
        _1861 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)));
        _1862 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)));
        _1863 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)));
    }
    else
    {
        _1849 = _1540;
        _1850 = _1540;
        _1851 = _1540;
        _1852 = _1540;
        _1853 = _1540;
        _1854 = _1540;
        _1855 = _1540;
        _1856 = _1540;
        _1857 = _1540;
        _1858 = _1540;
        _1859 = _1540;
        _1860 = _1540;
        _1861 = 0.0;
        _1862 = 0.0;
        _1863 = 0.0;
    }
    float _1873 = (cbModelParam._m0[1u].x * (_1861 - _1552)) + _1552;
    float _1874 = (cbModelParam._m0[1u].x * (_1862 - _1553)) + _1553;
    float _1875 = (cbModelParam._m0[1u].x * (_1863 - _1554)) + _1554;
    float _1896 = fma(_1875, cbSceneParam._m0[89u].z, fma(_1874, cbSceneParam._m0[89u].y, _1873 * cbSceneParam._m0[89u].x));
    float _1899 = fma(_1875, cbSceneParam._m0[90u].z, fma(_1874, cbSceneParam._m0[90u].y, _1873 * cbSceneParam._m0[90u].x));
    float _1902 = fma(_1875, cbSceneParam._m0[91u].z, fma(_1874, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1873));
    float _1917 = _1149 * 0.5;
    float _1918 = _1150 * 0.5;
    float _1919 = _1151 * 0.5;
    float _1920 = dot(vec4(_1917, _1918, _1919, 1.0), vec4(_1851, _1854, _1857, _1860));
    float _1923 = dot(vec4(_1917, _1918, _1919, 1.0), vec4(_1850, _1853, _1856, _1859));
    float _1926 = dot(vec4(_1917, _1918, _1919, 1.0), vec4(_1849, _1852, _1855, _1858));
    float _1960;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1933 = dot(vec4(_1917, _1918, _1919, 1.0), vec4(_1539, _1543, _1546, _1549));
        float _1937 = dot(vec4(_1917, _1918, _1919, 1.0), vec4(_1541, _1544, _1547, _1550));
        float _1941 = dot(vec4(_1917, _1918, _1919, 1.0), vec4(_1542, _1545, _1548, _1551));
        float _1948 = dot(vec4(cbModelParam._m0[39u]), vec4(_1917, _1918, _1919, 1.0));
        _1960 = dot(vec3(isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0)), isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)), isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1948) ? 0.0 : (isnan(0.0) ? _1948 : max(0.0, _1948))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1960 = 1.0;
    }
    float _1971;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1962 = dot(vec4(cbModelParam._m0[40u]), vec4(_1917, _1918, _1919, 1.0));
        _1971 = dot(vec3(isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)), isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1962) ? 0.0 : (isnan(0.0) ? _1962 : max(0.0, _1962))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1971 = 1.0;
    }
    float _1975 = (_1971 * cbModelParam._m0[1u].x) + (_1960 * (1.0 - cbModelParam._m0[1u].x));
    float _1985 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _983);
    float _1986 = isnan(_1985) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1985 : min(cbModelParam._m0[25u].z, _1985));
    float _2066;
    float _2068;
    float _2070;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2033 = fma(_1210, cbModelParam._m0[13u].z, fma(_1206, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1202)) + cbModelParam._m0[13u].w;
        float _2037 = fma(_1210, cbModelParam._m0[14u].z, fma(_1206, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1202)) + cbModelParam._m0[14u].w;
        float _2041 = fma(_1210, cbModelParam._m0[15u].z, fma(_1206, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1202)) + cbModelParam._m0[15u].w;
        float _2044 = fma(_1151, cbModelParam._m0[13u].z, fma(_1150, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1149));
        float _2047 = fma(_1151, cbModelParam._m0[14u].z, fma(_1150, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1149));
        float _2050 = fma(_1151, cbModelParam._m0[15u].z, fma(_1150, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1149));
        float _2078;
        if (_2044 > 0.0)
        {
            _2078 = abs((1.0 - _2033) / _2044);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2033 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2078 = frontier_phi_17_15_ladder;
        }
        float _2300;
        if (_2047 > 0.0)
        {
            _2300 = abs((1.0 - _2037) / _2047);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2037 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2300 = frontier_phi_26_22_ladder;
        }
        float _2546;
        if (_2050 > 0.0)
        {
            _2546 = abs((1.0 - _2041) / _2050);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2041 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2546 = frontier_phi_38_33_ladder;
        }
        float _2548 = isnan(_2300) ? _2078 : (isnan(_2078) ? _2300 : min(_2078, _2300));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _2044) + _2033;
        float _2554 = (_2549 * _2047) + _2037;
        float _2555 = (_2549 * _2050) + _2041;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2558 = (-1.0) - _2556;
        float _2560 = _2556 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2555 > _2560) || ((_2555 < _2558) || ((_2554 > _2560) || ((_2554 < _2558) || ((_2553 < _2558) || (_2553 > _2560))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2679 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2555, cbModelParam._m0[9u].z, fma(_2554, cbModelParam._m0[9u].y, _2553 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2555, cbModelParam._m0[10u].z, fma(_2554, cbModelParam._m0[10u].y, _2553 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2555, cbModelParam._m0[11u].z, fma(_2554, cbModelParam._m0[11u].y, _2553 * cbModelParam._m0[11u].x))), _1986);
            frontier_phi_16_38_ladder = _2679.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2679.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2679.x * cbModelParam._m0[1u].y;
        }
        _2066 = frontier_phi_16_38_ladder_2;
        _2068 = frontier_phi_16_38_ladder_1;
        _2070 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2054 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1149, _1150, _1151), _1986);
        _2066 = _2054.x * cbModelParam._m0[1u].y;
        _2068 = _2054.y * cbModelParam._m0[1u].y;
        _2070 = _2054.z * cbModelParam._m0[1u].y;
    }
    float _2074 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _983);
    float _2075 = isnan(_2074) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2074 : min(cbModelParam._m0[25u].w, _2074));
    float _2165;
    float _2167;
    float _2169;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2129 = fma(_1210, cbModelParam._m0[21u].z, fma(_1206, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1202)) + cbModelParam._m0[21u].w;
        float _2133 = fma(_1210, cbModelParam._m0[22u].z, fma(_1206, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1202)) + cbModelParam._m0[22u].w;
        float _2137 = fma(_1210, cbModelParam._m0[23u].z, fma(_1206, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1202)) + cbModelParam._m0[23u].w;
        float _2140 = fma(_1151, cbModelParam._m0[21u].z, fma(_1150, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1149));
        float _2143 = fma(_1151, cbModelParam._m0[22u].z, fma(_1150, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1149));
        float _2146 = fma(_1151, cbModelParam._m0[23u].z, fma(_1150, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1149));
        float _2305;
        if (_2140 > 0.0)
        {
            _2305 = abs((1.0 - _2129) / _2140);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2129 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2305 = frontier_phi_28_24_ladder;
        }
        float _2573;
        if (_2143 > 0.0)
        {
            _2573 = abs((1.0 - _2133) / _2143);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2143 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2133 + 1.0) / _2143);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2573 = frontier_phi_40_35_ladder;
        }
        float _2778;
        if (_2146 > 0.0)
        {
            _2778 = abs((1.0 - _2137) / _2146);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2146 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2137 + 1.0) / _2146);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2778 = frontier_phi_49_46_ladder;
        }
        float _2780 = isnan(_2573) ? _2305 : (isnan(_2305) ? _2573 : min(_2305, _2573));
        float _2781 = isnan(_2778) ? _2780 : (isnan(_2780) ? _2778 : min(_2780, _2778));
        float _2785 = (_2781 * _2140) + _2129;
        float _2786 = (_2781 * _2143) + _2133;
        float _2787 = (_2781 * _2146) + _2137;
        float _2788 = _2781 * 9.9999997473787516355514526367188e-05;
        float _2789 = (-1.0) - _2788;
        float _2791 = _2788 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2787 > _2791) || ((_2787 < _2789) || ((_2786 > _2791) || ((_2786 < _2789) || ((_2785 < _2789) || (_2785 > _2791))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2986 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2787, cbModelParam._m0[17u].z, fma(_2786, cbModelParam._m0[17u].y, _2785 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2787, cbModelParam._m0[18u].z, fma(_2786, cbModelParam._m0[18u].y, _2785 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2787, cbModelParam._m0[19u].z, fma(_2786, cbModelParam._m0[19u].y, _2785 * cbModelParam._m0[19u].x))), _2075);
            frontier_phi_25_49_ladder = _2986.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2986.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2986.x * cbModelParam._m0[1u].z;
        }
        _2165 = frontier_phi_25_49_ladder_2;
        _2167 = frontier_phi_25_49_ladder_1;
        _2169 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2149 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1149, _1150, _1151), _2075);
        _2165 = _2149.x * cbModelParam._m0[1u].z;
        _2167 = _2149.y * cbModelParam._m0[1u].z;
        _2169 = _2149.z * cbModelParam._m0[1u].z;
    }
    float _2181 = ((((1.0 - _1170) * ((_1157 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1170 * _1157)) * _1141;
    float _2182 = _2181 * ((cbModelParam._m0[1u].w * (_2165 - _2066)) + _2066);
    float _2183 = _2181 * ((cbModelParam._m0[1u].w * (_2167 - _2068)) + _2068);
    float _2184 = _2181 * ((cbModelParam._m0[1u].w * (_2169 - _2070)) + _2070);
    float _2187 = fma(_2184, cbSceneParam._m0[89u].z, fma(_2183, cbSceneParam._m0[89u].y, _2182 * cbSceneParam._m0[89u].x));
    float _2190 = fma(_2184, cbSceneParam._m0[90u].z, fma(_2183, cbSceneParam._m0[90u].y, _2182 * cbSceneParam._m0[90u].x));
    float _2193 = fma(_2184, cbSceneParam._m0[91u].z, fma(_2183, cbSceneParam._m0[91u].y, _2182 * cbSceneParam._m0[91u].x));
    vec4 _2201 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1078, _1079));
    float _2203 = _2201.w;
    float _2215 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2203);
    float _2216 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2203);
    float _2217 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2203);
    uvec4 _2221 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2223 = _2221.x * 14u;
    uint _2224 = _2223 + 13u;
    float _2231 = _1141 + (-1.0);
    float _2236 = (cbLight._m0[_2224].x * _2231) + 1.0;
    float _2237 = (cbLight._m0[_2224].y * _2231) + 1.0;
    float _2238 = (cbLight._m0[_2224].z * _2231) + 1.0;
    float _2239 = (cbLight._m0[_2224].w * _2231) + 1.0;
    uint _2240 = _2223 + 5u;
    float _2246 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
    uint _2250 = _2223 + 4u;
    float _2259 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
    uint _2263 = _2223 | 1u;
    float _2274 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_980, _981, _982));
    float _2277 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_980, _981, _982));
    float _4519 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _4530 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2282 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * 0.3183098733425140380859375;
    float _2284 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2291 = ((cbLight._m0[_2240].x * _2246) * _2284) + (((cbLight._m0[_2250].x * _2215) * _2259) * _2282);
    float _2292 = ((_2246 * cbLight._m0[_2240].y) * _2284) + (((cbLight._m0[_2250].y * _2216) * _2259) * _2282);
    float _2293 = ((_2246 * cbLight._m0[_2240].z) * _2284) + (((cbLight._m0[_2250].z * _2217) * _2259) * _2282);
    uvec4 _2297 = floatBitsToUint(cbLight._m0[_2223 + 12u]);
    bool _2299 = _2297.x == 0u;
    float _2310;
    float _2312;
    float _2314;
    if (_2299)
    {
        _2310 = _2291;
        _2312 = _2292;
        _2314 = _2293;
    }
    else
    {
        uint _2318 = _2223 + 6u;
        float _2334 = (dot(vec3(cbLight._m0[_2223 + 2u].xyz), vec3(_980, _981, _982)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4541 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2337 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2310 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2291;
        _2312 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2292;
        _2314 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2293;
    }
    bool _2317 = _2297.y == 0u;
    float _2355;
    float _2357;
    float _2359;
    if (_2317)
    {
        _2355 = _2310;
        _2357 = _2312;
        _2359 = _2314;
    }
    else
    {
        uint _2517 = _2223 + 7u;
        float _2533 = (dot(vec3(cbLight._m0[_2223 + 3u].xyz), vec3(_980, _981, _982)) * 0.5) + 0.5;
        float _2534 = _2533 * _2533;
        float _4557 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2535 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2536 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2355 = (((cbLight._m0[_2517].x * 0.3183098733425140380859375) * _2535) * _2536) + _2310;
        _2357 = (((cbLight._m0[_2517].y * 0.3183098733425140380859375) * _2535) * _2536) + _2312;
        _2359 = (((cbLight._m0[_2517].z * 0.3183098733425140380859375) * _2535) * _2536) + _2314;
    }
    uint _2362 = _2223 + 8u;
    float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _983) * 0.949999988079071044921875);
    float _2376 = _2375 * _2375;
    float _2377 = cbLight._m0[_2223].x + _1058;
    float _2378 = cbLight._m0[_2223].y + _1059;
    float _2379 = cbLight._m0[_2223].z + _1060;
    float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
    float _2384 = _2383 * _2377;
    float _2385 = _2383 * _2378;
    float _2386 = _2383 * _2379;
    float _2387 = dot(vec3(_980, _981, _982), vec3(cbLight._m0[_2223].xyz));
    float _4573 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _4584 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _2391 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2392 = dot(vec3(_980, _981, _982), vec3(_2384, _2385, _2386));
    float _4595 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2396 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2384, _2385, _2386));
    float _4606 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2400 = _2376 * _2376;
    float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
    float _2415 = (exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2416 = 1.0 - _2376;
    float _2427 = (0.5 / (((_2391 * ((_2390 * _2416) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2416) + _2376) * _2390))) * _2390;
    float _4617 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2429 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
    uint _2443 = _2223 + 9u;
    float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _983) * 0.949999988079071044921875);
    float _2455 = _2454 * _2454;
    float _2456 = cbLight._m0[_2263].x + _1058;
    float _2457 = cbLight._m0[_2263].y + _1059;
    float _2458 = cbLight._m0[_2263].z + _1060;
    float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
    float _2463 = _2462 * _2456;
    float _2464 = _2462 * _2457;
    float _2465 = _2462 * _2458;
    float _2466 = dot(vec3(_980, _981, _982), vec3(cbLight._m0[_2263].xyz));
    float _4628 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _2470 = dot(vec3(_980, _981, _982), vec3(_2463, _2464, _2465));
    float _4639 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2473 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2474 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2463, _2464, _2465));
    float _4650 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2478 = _2455 * _2455;
    float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
    float _2491 = (exp2(log2(1.0 - (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2492 = 1.0 - _2455;
    float _2502 = (0.5 / (((_2391 * ((_2469 * _2492) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2492) + _2455) * _2469))) * _2469;
    float _4661 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
    float _2514 = (((_2491 * cbLight._m0[_2443].x) * _2504) * _2246) + ((((cbLight._m0[_2362].x * _2215) * _2415) * _2429) * _2259);
    float _2515 = (((_2491 * cbLight._m0[_2443].y) * _2504) * _2246) + ((((cbLight._m0[_2362].y * _2216) * _2415) * _2429) * _2259);
    float _2516 = (((_2491 * cbLight._m0[_2443].z) * _2504) * _2246) + ((((cbLight._m0[_2362].z * _2217) * _2415) * _2429) * _2259);
    float _2578;
    float _2580;
    float _2582;
    if (_2299)
    {
        _2578 = _2514;
        _2580 = _2515;
        _2582 = _2516;
    }
    else
    {
        uint _2584 = _2223 + 2u;
        uint _2588 = _2223 + 10u;
        float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2584].w)) * _983) * 0.949999988079071044921875);
        float _2603 = _2602 * _2602;
        float _2604 = cbLight._m0[_2584].x + _1058;
        float _2605 = cbLight._m0[_2584].y + _1059;
        float _2606 = cbLight._m0[_2584].z + _1060;
        float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
        float _2611 = _2610 * _2604;
        float _2612 = _2610 * _2605;
        float _2613 = _2610 * _2606;
        float _2614 = dot(vec3(_980, _981, _982), vec3(cbLight._m0[_2584].xyz));
        float _4672 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2618 = dot(vec3(_980, _981, _982), vec3(_2611, _2612, _2613));
        float _4683 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2622 = dot(vec3(cbLight._m0[_2584].xyz), vec3(_2611, _2612, _2613));
        float _4694 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2626 = _2603 * _2603;
        float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
        float _2639 = (exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2640 = 1.0 - _2603;
        float _2650 = (0.5 / (((_2391 * ((_2617 * _2640) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2640) + _2603) * _2617))) * _2617;
        float _4705 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2652 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
        float _2653 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2578 = (((_2639 * cbLight._m0[_2588].x) * _2652) * _2653) + _2514;
        _2580 = (((_2639 * cbLight._m0[_2588].y) * _2652) * _2653) + _2515;
        _2582 = (((_2639 * cbLight._m0[_2588].z) * _2652) * _2653) + _2516;
    }
    float _2688;
    float _2690;
    float _2692;
    if (_2317)
    {
        _2688 = _2578;
        _2690 = _2580;
        _2692 = _2582;
    }
    else
    {
        uint _2699 = _2223 + 3u;
        uint _2703 = _2223 + 11u;
        float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2699].w)) * _983) * 0.949999988079071044921875);
        float _2718 = _2717 * _2717;
        float _2719 = cbLight._m0[_2699].x + _1058;
        float _2720 = cbLight._m0[_2699].y + _1059;
        float _2721 = cbLight._m0[_2699].z + _1060;
        float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
        float _2726 = _2725 * _2719;
        float _2727 = _2725 * _2720;
        float _2728 = _2725 * _2721;
        float _2729 = dot(vec3(_980, _981, _982), vec3(cbLight._m0[_2699].xyz));
        float _4721 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2733 = dot(vec3(_980, _981, _982), vec3(_2726, _2727, _2728));
        float _4732 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2737 = dot(vec3(cbLight._m0[_2699].xyz), vec3(_2726, _2727, _2728));
        float _4743 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2741 = _2718 * _2718;
        float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
        float _2754 = (exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2755 = 1.0 - _2718;
        float _2765 = (0.5 / (((_2391 * ((_2732 * _2755) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2755) + _2718) * _2732))) * _2732;
        float _4754 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2767 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
        float _2768 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2688 = (((_2754 * cbLight._m0[_2703].x) * _2767) * _2768) + _2578;
        _2690 = (((_2754 * cbLight._m0[_2703].y) * _2767) * _2768) + _2580;
        _2692 = (((_2754 * cbLight._m0[_2703].z) * _2767) * _2768) + _2582;
    }
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    if (_2221.y == 0u)
    {
        float _2843 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2844 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2843;
        float _2845 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2843;
        float _2846 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2843;
        uvec4 _2858 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2859 = _2858.x;
        uint _2870 = uint((float(_2858.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1079) / _2859))) + floor(float(uint(cbSceneParam._m0[85u].x * _1078) / _2859)));
        float _2880 = (log2(_2846 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2881 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        uint _2884 = uint(isnan(14.0) ? _2881 : (isnan(_2881) ? 14.0 : min(_2881, 14.0)));
        uvec4 _2889 = texelFetch(g_lightClusterGridBuffer, int(((_2884 << 2u) + (_2870 << 6u)) >> 2u));
        uint _2890 = _2889.x;
        uint _2891 = _2858.z;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        if (((((1u << ((_2891 >> 4u) & 15u)) + 4294967295u) & _2890) == 0u) || ((_2891 & 240u) == 0u))
        {
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
            _2999 = 0.0;
            _3001 = 0.0;
        }
        else
        {
            float _2992;
            float _2994;
            float _2996;
            float _2998;
            float _3000;
            float _3002;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            uint _3149 = 0u;
            uint _3158;
            bool _3159;
            for (;;)
            {
                _3158 = texelFetch(g_lightClassification, int((((_2884 << 5u) + (_2870 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                _3159 = _3158 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3159)
                {
                    frontier_phi_66_pred = _3143;
                    frontier_phi_66_pred_1 = _3148;
                    frontier_phi_66_pred_2 = _3147;
                    frontier_phi_66_pred_3 = _3146;
                    frontier_phi_66_pred_4 = _3145;
                    frontier_phi_66_pred_5 = _3144;
                }
                else
                {
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    uint _3294;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3145;
                    _3291 = _3146;
                    _3292 = _3147;
                    _3293 = _3148;
                    _3294 = _3158;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    for (;;)
                    {
                        uint _3298 = uint(findLSB(_3294)) + (_3149 << 5u);
                        uint _3295 = (_3294 + 4294967295u) & _3294;
                        uint _3300 = _3298 * 48u;
                        vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 3u)).x));
                        uint _3320 = (_3298 * 48u) + 4u;
                        vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3339 = (_3298 * 48u) + 8u;
                        vec3 _3350 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x));
                        float _3354 = _3314.x - _2844;
                        float _3355 = _3314.y - _2845;
                        float _3356 = _3314.z - _2846;
                        float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                        float _3360 = inversesqrt(_3357);
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3364 = dot(vec3(_1097, _1100, _1103), vec3(_3361, _3362, _3363));
                        float _3369 = 1.0 - (_3357 * _3314.w);
                        float _4780 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3370 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3371 = sqrt(_3357) * _3333.w;
                        float _3374 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3364) + _3375;
                        float _3381 = _3371 * _3371;
                        float _3385 = ((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3370) / ((_3381 * 0.699999988079071044921875) + 1.0);
                        float _3389 = (-0.0) - _2844;
                        float _3390 = (-0.0) - _2845;
                        float _3391 = (-0.0) - _2846;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3396 = _3395 * _3389;
                        float _3397 = _3395 * _3390;
                        float _3398 = _3395 * _3391;
                        float _3406 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                        float _3407 = 1.0 - _1157;
                        float _3414 = sqrt(1.0 - ((1.0 - (_3407 * _3407)) * (1.0 - (_3406 * _3406))));
                        float _3415 = _3414 * _3414;
                        float _3416 = _3415 * _3415;
                        float _3417 = _3396 + _3361;
                        float _3418 = _3397 + _3362;
                        float _3419 = _3398 + _3363;
                        float _3423 = inversesqrt(dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419)));
                        float _3427 = dot(vec3(_1097, _1100, _1103), vec3(_3396, _3397, _3398));
                        float _4796 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3430 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3431 = dot(vec3(_1097, _1100, _1103), vec3(_3423 * _3417, _3423 * _3418, _3423 * _3419));
                        float _4807 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3434 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3438 = ((_3434 * _3434) * (_3416 + (-1.0))) + 1.0;
                        float _3439 = _3374 * _3415;
                        float _3440 = _3439 * _3439;
                        float _3443 = ((1.0 - _3440) * _3364) + _3440;
                        float _4818 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3444 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3445 = 1.0 - _3415;
                        float _3455 = (0.5 / (((_3444 * ((_3430 * _3445) + _3415)) + 9.9999999392252902907785028219223e-09) + (((_3444 * _3445) + _3415) * _3430))) * _3444;
                        float _4829 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3466 = (((_3416 * 3.1415927410125732421875) * (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) / ((_3438 * _3438) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125))) * _3370;
                        _3218 = (_3385 * _3333.x) + _3291;
                        _3219 = (_3385 * _3333.y) + _3292;
                        _3220 = (_3385 * _3333.z) + _3293;
                        _3215 = (_3466 * _3350.x) + _3288;
                        _3216 = (_3466 * _3350.y) + _3289;
                        _3217 = (_3466 * _3350.z) + _3290;
                        if (_3295 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3217;
                            _3291 = _3218;
                            _3292 = _3219;
                            _3293 = _3220;
                            _3294 = _3295;
                        }
                    }
                    frontier_phi_66_pred = _3215;
                    frontier_phi_66_pred_1 = _3220;
                    frontier_phi_66_pred_2 = _3219;
                    frontier_phi_66_pred_3 = _3218;
                    frontier_phi_66_pred_4 = _3217;
                    frontier_phi_66_pred_5 = _3216;
                }
                _2992 = frontier_phi_66_pred;
                _3002 = frontier_phi_66_pred_1;
                _3000 = frontier_phi_66_pred_2;
                _2998 = frontier_phi_66_pred_3;
                _2996 = frontier_phi_66_pred_4;
                _2994 = frontier_phi_66_pred_5;
                uint _3150 = _3149 + 1u;
                if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3143 = _2992;
                    _3144 = _2994;
                    _3145 = _2996;
                    _3146 = _2998;
                    _3147 = _3000;
                    _3148 = _3002;
                    _3149 = _3150;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
            _2999 = _3000;
            _3001 = _3002;
        }
        uvec4 _3005 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3006 = _3005.z;
        uint _3008 = (_3006 >> 8u) & 15u;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        if (((4294967295u << _3008) & _2890) == 0u)
        {
            _3111 = _2991;
            _3113 = _2993;
            _3115 = _2995;
            _3117 = _2997;
            _3119 = _2999;
            _3121 = _3001;
        }
        else
        {
            float _3136 = inversesqrt(dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846)));
            float _3137 = _3136 * _2844;
            float _3138 = _3136 * _2845;
            float _3139 = _3136 * _2846;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3008 < ((_3006 >> 12u) & 15u))
            {
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3271 = _2991;
                float _3272 = _2993;
                float _3273 = _2995;
                float _3274 = _2997;
                float _3275 = _2999;
                float _3276 = _3001;
                uint _3277 = _3008;
                uint _3286;
                bool _3287;
                for (;;)
                {
                    _3286 = texelFetch(g_lightClassification, int((((_2884 << 5u) + (_2870 << 9u)) + (_3277 << 2u)) >> 2u)).x;
                    _3287 = _3286 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3287)
                    {
                        frontier_phi_77_pred = _3276;
                        frontier_phi_77_pred_1 = _3275;
                        frontier_phi_77_pred_2 = _3274;
                        frontier_phi_77_pred_3 = _3273;
                        frontier_phi_77_pred_4 = _3272;
                        frontier_phi_77_pred_5 = _3271;
                    }
                    else
                    {
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3493 = _3271;
                        float _3494 = _3272;
                        float _3495 = _3273;
                        float _3496 = _3274;
                        float _3497 = _3275;
                        float _3498 = _3276;
                        uint _3499 = _3286;
                        uint _3500;
                        vec4 _3525;
                        float _3526;
                        vec4 _3541;
                        vec3 _3553;
                        vec4 _3568;
                        vec4 _3583;
                        float _3629;
                        bool _3630;
                        for (;;)
                        {
                            uint _3510 = ((_3277 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3499));
                            _3500 = (_3499 + 4294967295u) & _3499;
                            uint _3512 = _3510 * 40u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            _3526 = _3525.w;
                            uint _3528 = (_3510 * 40u) + 4u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3510 * 40u) + 8u;
                            _3553 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x));
                            uint _3555 = (_3510 * 40u) + 16u;
                            _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3570 = (_3510 * 40u) + 20u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3585 = (_3510 * 40u) + 24u;
                            vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3604 = (_3510 * 40u) + 28u;
                            vec4 _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            _3629 = fma(_2846, _3617.z, fma(_2845, _3617.y, _3617.x * _2844)) + _3617.w;
                            _3630 = !((fma(_2846, _3598.z, fma(_2845, _3598.y, _3598.x * _2844)) + _3598.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3630)
                            {
                                float _3657 = _3525.x - _2844;
                                float _3658 = _3525.y - _2845;
                                float _3659 = _3525.z - _2846;
                                float _3660 = dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659));
                                float _3663 = inversesqrt(_3660);
                                float _3664 = _3663 * _3657;
                                float _3665 = _3663 * _3658;
                                float _3666 = _3663 * _3659;
                                float _3670 = 1.0 - (_3660 / (_3526 * _3526));
                                float _4840 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3675 = sqrt(_3660) * _3541.w;
                                float _3677 = 1.39999997615814208984375 / (_3675 + 1.39999997615814208984375);
                                float _3678 = _3677 * _3677;
                                float _3681 = ((1.0 - _3678) * dot(vec3(_3664, _3665, _3666), vec3(_1097, _1100, _1103))) + _3678;
                                float _3684 = _3675 * _3675;
                                float _3688 = (fma(_2846, _3568.z, fma(_2845, _3568.y, _3568.x * _2844)) + _3568.w) / _3629;
                                float _3689 = (fma(_2846, _3583.z, fma(_2845, _3583.y, _3583.x * _2844)) + _3583.w) / _3629;
                                float _3693 = 1.0 - dot(vec2(_3688, _3689), vec2(_3688, _3689));
                                float _4856 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3695 = _3694 * (((isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0))) * _3671) / ((_3684 * 0.699999988079071044921875) + 1.0));
                                float _3707 = exp2(log2(1.0 / ((_3684 * 3.5) + 5.0)) * 0.25);
                                float _3708 = 1.0 - _1157;
                                float _3715 = sqrt(1.0 - ((1.0 - (_3708 * _3708)) * (1.0 - (_3707 * _3707))));
                                float _3716 = _3715 * _3715;
                                float _3717 = _3716 * _3716;
                                float _3718 = _3664 - _3137;
                                float _3719 = _3665 - _3138;
                                float _3720 = _3666 - _3139;
                                float _3724 = inversesqrt(dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720)));
                                float _3728 = dot(vec3(_1097, _1100, _1103), vec3((-0.0) - _3137, (-0.0) - _3138, (-0.0) - _3139));
                                float _4867 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3731 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3732 = dot(vec3(_1097, _1100, _1103), vec3(_3724 * _3718, _3724 * _3719, _3724 * _3720));
                                float _4878 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3735 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3739 = ((_3735 * _3735) * (_3717 + (-1.0))) + 1.0;
                                float _3740 = _3677 * _3716;
                                float _3741 = _3740 * _3740;
                                float _3747 = ((1.0 - _3741) * dot(vec3(_1097, _1100, _1103), vec3(_3664, _3665, _3666))) + _3741;
                                float _4889 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3748 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3749 = 1.0 - _3716;
                                float _3759 = (0.5 / (((_3748 * ((_3731 * _3749) + _3716)) + 9.9999999392252902907785028219223e-09) + (((_3748 * _3749) + _3716) * _3731))) * _3748;
                                float _4900 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3769 = (_3694 * _3671) * (((_3717 * 3.1415927410125732421875) * (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) / ((_3739 * _3739) * ((_3684 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3695 * _3541.y;
                                frontier_phi_83_pred_1 = _3695 * _3541.x;
                                frontier_phi_83_pred_2 = _3769 * _3553.z;
                                frontier_phi_83_pred_3 = _3769 * _3553.y;
                                frontier_phi_83_pred_4 = _3769 * _3553.x;
                                frontier_phi_83_pred_5 = _3695 * _3541.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3777 = frontier_phi_83_pred;
                            _3776 = frontier_phi_83_pred_1;
                            _3775 = frontier_phi_83_pred_2;
                            _3774 = frontier_phi_83_pred_3;
                            _3773 = frontier_phi_83_pred_4;
                            _3778 = frontier_phi_83_pred_5;
                            _3483 = _3776 + _3496;
                            _3484 = _3777 + _3497;
                            _3485 = _3778 + _3498;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            if (_3500 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3500;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3485;
                        frontier_phi_77_pred_1 = _3484;
                        frontier_phi_77_pred_2 = _3483;
                        frontier_phi_77_pred_3 = _3482;
                        frontier_phi_77_pred_4 = _3481;
                        frontier_phi_77_pred_5 = _3480;
                    }
                    _3122 = frontier_phi_77_pred;
                    _3120 = frontier_phi_77_pred_1;
                    _3118 = frontier_phi_77_pred_2;
                    _3116 = frontier_phi_77_pred_3;
                    _3114 = frontier_phi_77_pred_4;
                    _3112 = frontier_phi_77_pred_5;
                    uint _3278 = _3277 + 1u;
                    if (_3278 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3271 = _3112;
                        _3272 = _3114;
                        _3273 = _3116;
                        _3274 = _3118;
                        _3275 = _3120;
                        _3276 = _3122;
                        _3277 = _3278;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3116;
                frontier_phi_58_59_ladder_1 = _3122;
                frontier_phi_58_59_ladder_2 = _3120;
                frontier_phi_58_59_ladder_3 = _3118;
                frontier_phi_58_59_ladder_4 = _3114;
                frontier_phi_58_59_ladder_5 = _3112;
            }
            else
            {
                frontier_phi_58_59_ladder = _2995;
                frontier_phi_58_59_ladder_1 = _3001;
                frontier_phi_58_59_ladder_2 = _2999;
                frontier_phi_58_59_ladder_3 = _2997;
                frontier_phi_58_59_ladder_4 = _2993;
                frontier_phi_58_59_ladder_5 = _2991;
            }
            _3111 = frontier_phi_58_59_ladder_5;
            _3113 = frontier_phi_58_59_ladder_4;
            _3115 = frontier_phi_58_59_ladder;
            _3117 = frontier_phi_58_59_ladder_3;
            _3119 = frontier_phi_58_59_ladder_2;
            _3121 = frontier_phi_58_59_ladder_1;
        }
        float _3126 = isnan(1.0) ? _1141 : (isnan(_1141) ? 1.0 : min(_1141, 1.0));
        _2903 = (_3126 * _3117) + _2355;
        _2905 = (_3126 * _3119) + _2357;
        _2907 = (_3126 * _3121) + _2359;
        _2909 = ((_3111 * 0.039999999105930328369140625) * _3126) + _2688;
        _2911 = ((_3113 * 0.039999999105930328369140625) * _3126) + _2690;
        _2913 = ((_3115 * 0.039999999105930328369140625) * _3126) + _2692;
    }
    else
    {
        _2903 = _2355;
        _2905 = _2357;
        _2907 = _2359;
        _2909 = _2688;
        _2911 = _2690;
        _2913 = _2692;
    }
    float _4916 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _4927 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _4938 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _2930 = ((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2903 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1141))) + ((_2909 + ((isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))) * _1975)) * cbPerFrame._m0[3u].x);
    float _2931 = ((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2905 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1141))) + ((_2911 + ((isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0))) * _1975)) * cbPerFrame._m0[3u].x);
    float _2932 = ((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2907 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1141))) + ((_2913 + ((isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0))) * _1975)) * cbPerFrame._m0[3u].x);
    uint _2933 = _263 + 6u;
    float _2941 = _1078 / cbSceneParam._m0[86u].x;
    float _2942 = _1079 / cbSceneParam._m0[86u].y;
    vec4 _2956 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2941, _2942, (log2((isnan(cbSceneParam._m0[77u].w) ? _1001 : (isnan(_1001) ? cbSceneParam._m0[77u].w : min(_1001, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2958 = _2956.x;
    float _2959 = _2956.y;
    float _2960 = _2956.z;
    float _2961 = _2956.w;
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    if (_1001 > cbSceneParam._m0[78u].w)
    {
        float _3016 = isnan(_1001) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1001 : min(cbSceneParam._m0[80u].w, _1001));
        float _3017 = _3016 / _1001;
        float _3028 = _3017 * _1051;
        float _3029 = _1052 * _3017;
        float _3030 = (-0.0) - _3029;
        float _3031 = _3017 * _1053;
        float _3033 = (cbSceneParam._m0[77u].w * _3030) / _3016;
        float _3034 = _3033 + cbSceneParam._m0[79u].w;
        float _3035 = cbSceneParam._m0[79u].w - _3029;
        float _3041 = sqrt(((_3028 * _3028) + (_3029 * _3029)) + (_3031 * _3031));
        float _3044 = (1.0 - (cbSceneParam._m0[77u].w / _3016)) * _3041;
        float _3049 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3051 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3228;
        if (abs((_3030 - _3033) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3228 = ((((_3034 > 0.0) ? exp2(_3049 * _3034) : (2.0 - exp2(_3051 * _3034))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3044;
        }
        else
        {
            float _3172 = 1.0 / cbSceneParam._m0[80u].x;
            float _3173 = isnan(_3035) ? _3034 : (isnan(_3034) ? _3035 : max(_3034, _3035));
            float _3174 = isnan(_3035) ? _3034 : (isnan(_3034) ? _3035 : min(_3034, _3035));
            float _3183 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : min(_3173, 0.0));
            float _3184 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : min(_3174, 0.0));
            _3228 = ((abs(_3041 / _3030) * cbSceneParam._m0[80u].y) * ((((_3183 - _3184) * 2.0) - ((exp2(_3049 * (isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0)))) - exp2(_3049 * (isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))))) * _3172)) - ((exp2(_3051 * _3183) - exp2(_3051 * _3184)) * _3172))) + (_3044 * cbSceneParam._m0[80u].z);
        }
        vec4 _3230 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2941, _2942, 1.0), 0.0);
        float _3239 = exp2((_3228 * (-1.44269502162933349609375)) * (1.0 - _3230.w));
        float _3240 = log2(_3239);
        float _3256 = log2(_2961);
        _3053 = (exp2(_3256 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].x)) * _3230.x) / cbSceneParam._m0[78u].x)) + _2958;
        _3055 = (exp2(_3256 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].y)) * _3230.y) / cbSceneParam._m0[78u].y)) + _2959;
        _3057 = (exp2(_3256 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].z)) * _3230.z) / cbSceneParam._m0[78u].z)) + _2960;
        _3059 = _3239 * _2961;
    }
    else
    {
        _3053 = _2958;
        _3055 = _2959;
        _3057 = _2960;
        _3059 = _2961;
    }
    bool _3266;
    vec4 _3069;
    vec4 _3091;
    float _3093;
    float _3097;
    float _3098;
    float _3099;
    float _3100;
    bool _3110;
    for (;;)
    {
        _3069 = cbMatDynParam._m0[0u];
        float _3071 = roundEven(_3069.y);
        bool _3072 = _3071 == 3.0;
        float _3073 = log2(_3059);
        float _3080 = exp2(_3073 * cbSceneParam._m0[78u].x) * _2930;
        float _3081 = exp2(_3073 * cbSceneParam._m0[78u].y) * _2931;
        float _3082 = exp2(_3073 * cbSceneParam._m0[78u].z) * _2932;
        float _3089 = _1067 + (-0.5);
        _3091 = cbMtdParam._m0[1u];
        _3093 = _3091.y * _3089;
        float _3096 = (_3071 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3097 = _3096 * (_3072 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3053)));
        _3098 = _3096 * (_3072 ? _3081 : (_3081 + (cbSceneParam._m0[72u].w * _3055)));
        _3099 = _3096 * (_3072 ? _3082 : (_3082 + (cbSceneParam._m0[72u].w * _3057)));
        _3100 = _3089 * 0.999000012874603271484375;
        _3110 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3110)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3100) < 0.5)
            {
                _3266 = true;
                break;
            }
        }
        uint _3207 = _1116 + uint(_3069.w);
        if ((cbInstanceData._m0[_3207].w < 1.0) && ((cbInstanceData._m0[_3207].w + _3100) < 0.5))
        {
            _3266 = true;
            break;
        }
        if ((_3093 + 1.0) < _3091.x)
        {
            _3266 = true;
            break;
        }
        _3266 = false;
        break;
    }
    float _3471;
    if (_3266)
    {
        discard_state = true;
        _3471 = 0.0;
    }
    else
    {
        _3471 = cbInstanceData._m0[_2933].w;
    }
    SV_Target.x = _3097;
    SV_Target.y = _3098;
    SV_Target.z = _3099;
    SV_Target.w = _3471;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2933].w;
    discard_exit();
}


