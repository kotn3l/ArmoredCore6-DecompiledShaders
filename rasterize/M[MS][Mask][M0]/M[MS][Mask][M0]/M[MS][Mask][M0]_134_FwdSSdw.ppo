#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1470;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3796 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3807 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3818 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[24u].z) + _459) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3829 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _484 = (_477 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _485 = (_477 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _486 = (_477 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _549 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[24u].z) + _535) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3840 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _557 = (_550 * ((_503.x * cbMtdParam._m0[13u].x) - _484)) + _484;
    float _558 = (_550 * ((_503.y * cbMtdParam._m0[13u].y) - _485)) + _485;
    float _559 = (_550 * ((_503.z * cbMtdParam._m0[13u].z) - _486)) + _486;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _299) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _300) + cbTextureTilingScale._m0[24u].w));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _596 = _594.x;
    float _606 = dot(vec4(_596, _594.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _618 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _407.z) * 2.0) - ((((_596 - _606) * cbMtdParam._m0[24u].z) + _606) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3851 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _629 = (_336.x * cbMtdParam._m0[9u].x) * ((_619 * ((_577.x * cbMtdParam._m0[14u].x) - _557)) + _557);
    float _630 = (_336.y * cbMtdParam._m0[9u].y) * ((_619 * ((_577.y * cbMtdParam._m0[14u].y) - _558)) + _558);
    float _631 = (_336.z * cbMtdParam._m0[9u].z) * ((_619 * ((_577.z * cbMtdParam._m0[14u].z) - _559)) + _559);
    float _635 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _629;
    float _638 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _630;
    float _641 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _631;
    float _649 = (((_629 - _635) * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) + _635) * 4.55000019073486328125;
    float _651 = (((_630 - _638) * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) + _638) * 4.55000019073486328125;
    float _653 = (((_631 - _641) * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) + _641) * 4.55000019073486328125;
    vec4 _671 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _713 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _730 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _732 = _730.x;
    float _733 = _730.y;
    float _734 = _730.z;
    float _741 = ((_713.x - _732) * _477) + _732;
    float _742 = ((_713.y - _733) * _477) + _733;
    float _743 = ((_713.z - _734) * _477) + _734;
    vec4 _755 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _766 = ((_755.x - _741) * _550) + _741;
    float _767 = ((_755.y - _742) * _550) + _742;
    float _768 = ((_755.z - _743) * _550) + _743;
    vec4 _780 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _299) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _300) + cbTextureTilingScale._m0[23u].w));
    float _793 = ((_780.z - _768) * _619) + _768;
    float _796 = ((((_780.x - _766) * _619) + _766) * 2.0) + (-1.0);
    float _797 = ((((_780.y - _767) * _619) + _767) * 2.0) + (-1.0);
    float _798 = dot(vec2(_796, _797), vec2(_796, _797));
    float _3862 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _803 = sqrt(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))));
    vec4 _817 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _842 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _844 = _842.x;
    float _845 = 1.0 - _844;
    float _858 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_844 - _845) * cbMtdParam._m0[24u].w) + _845) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3873 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _859 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _866 = (_859 * ((_671.x * cbMtdParam._m0[18u].x) - _649)) + _649;
    float _867 = (_859 * ((_671.y * cbMtdParam._m0[18u].y) - _651)) + _651;
    float _868 = (_859 * ((_671.z * cbMtdParam._m0[18u].z) - _653)) + _653;
    float _873 = (((_690.z - _793) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _793;
    float _877 = ((_817.z - _873) * cbMtdParam._m0[19u].w) + _873;
    vec4 _890 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _897 = (_890.x * 2.0) + (-1.0);
    float _898 = (_890.y * 2.0) + (-1.0);
    float _899 = dot(vec2(_897, _898), vec2(_897, _898));
    float _3884 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _907 = (_859 * (_890.z - _877)) + _877;
    float _916 = (_796 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_690.x * 2.0) + (-1.0)))) + (((_817.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _917 = (_797 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_690.y * 2.0) + (-1.0)))) + (((_817.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _929 = (((_897 - _916) + (cbMtdParam._m0[21u].x * _916)) * _859) + _916;
    float _930 = (((_898 - _917) + (cbMtdParam._m0[21u].x * _917)) * _859) + _917;
    float _931 = (_859 * (sqrt(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) - _803)) + _803;
    float _935 = cbMtdParam._m0[22u].x + _817.w;
    float _938 = fma(_931, _246 * NORMAL.x, fma(_930, _253 * TANGENT.x, (_239 * _231) * _929));
    float _941 = fma(_931, _246 * NORMAL.y, fma(_930, _253 * TANGENT.y, (_239 * _232) * _929));
    float _944 = fma(_931, _246 * NORMAL.z, fma(_930, _253 * TANGENT.z, (_239 * _233) * _929));
    float _948 = inversesqrt(dot(vec3(_938, _941, _944), vec3(_938, _941, _944)));
    float _949 = _948 * _938;
    float _950 = _948 * _941;
    float _951 = _948 * _944;
    float _3895 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _952 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _3917 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _3928 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _3939 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _970 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1021 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1011);
    float _1022 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1011);
    float _1023 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1011);
    float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
    float _1028 = _1021 * _1027;
    float _1029 = _1022 * _1027;
    float _1030 = _1023 * _1027;
    float _1036 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1037 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1055 = fma(_951, cbSceneParam._m0[5u].z, fma(_950, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _949));
    float _1058 = fma(_951, cbSceneParam._m0[6u].z, fma(_950, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _949));
    float _1061 = fma(_951, cbSceneParam._m0[7u].z, fma(_950, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _949));
    uint _1075 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1081 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * cbInstanceData._m0[_1075].x;
    float _1082 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * cbInstanceData._m0[_1075].y;
    float _1083 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * cbInstanceData._m0[_1075].z;
    float _3950 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1085 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1086 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    vec4 _1095 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1036, cbSceneParam._m0[86u].y * _1037));
    float _1099 = ((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * TEXCOORD_5.w) * _1095.x;
    float _1100 = dot(vec3(_949, _950, _951), vec3(_1028, _1029, _1030));
    float _1103 = _1100 * 2.0;
    float _1107 = (_1103 * _949) - _1028;
    float _1108 = (_1103 * _950) - _1029;
    float _1109 = (_1103 * _951) - _1030;
    float _1113 = abs(dot(vec3(_1028, _1029, _1030), vec3(_949, _950, _951)));
    float _3983 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1115 = sqrt(_952);
    float _1128 = exp2((_1115 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1115 * 3.0));
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1469;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1194 = fma(_1168, cbModelParam._m0[26u].z, fma(_1164, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1160));
        float _1198 = fma(_1168, cbModelParam._m0[27u].z, fma(_1164, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1160));
        float _1202 = fma(_1168, cbModelParam._m0[28u].z, fma(_1164, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1160));
        float _1227 = _1160 + _949;
        float _1228 = _1164 + _950;
        float _1229 = _1168 + _951;
        float _1239 = fma(_1229, cbModelParam._m0[26u].z, fma(_1228, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1227)) - _1194;
        float _1240 = fma(_1229, cbModelParam._m0[27u].z, fma(_1228, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1227)) - _1198;
        float _1241 = fma(_1229, cbModelParam._m0[28u].z, fma(_1228, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1227)) - _1202;
        float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
        float _1258 = ((_1245 * _1239) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1194 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1245 * _1240) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1198 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1245 * _1241) / cbModelParam._m0[34u].z) + ((((((_1202 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        float _1297 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1263.x + (-0.5));
        float _1299 = _1297 * (_1263.y + (-0.5));
        float _1300 = _1297 * (_1263.z + (-0.5));
        float _1307 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1270.x + (-0.5));
        float _1309 = _1307 * (_1270.y + (-0.5));
        float _1310 = _1307 * (_1270.z + (-0.5));
        float _1317 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1277.x + (-0.5));
        float _1319 = _1317 * (_1277.y + (-0.5));
        float _1320 = _1317 * (_1277.z + (-0.5));
        float _1327 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1284.x + (-0.5));
        float _1329 = _1327 * (_1284.y + (-0.5));
        float _1330 = _1327 * (_1284.z + (-0.5));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = _1298 * 0.5;
        float _1335 = _1308 * 0.5;
        float _1336 = _1318 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1351 = (dot(vec3(_949, _950, _951), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1361 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4031 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1363 + 1.0))) + _1368) * _1331;
        float _1378 = _1299 * 0.5;
        float _1379 = _1309 * 0.5;
        float _1380 = _1319 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_949, _950, _951), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4064 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1405 + 1.0))) + _1410) * _1332;
        float _1420 = _1300 * 0.5;
        float _1421 = _1310 * 0.5;
        float _1422 = _1320 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_949, _950, _951), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4097 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1447 + 1.0))) + _1452) * _1333;
        _1469 = _1300;
        _1471 = _1299;
        _1472 = _1298;
        _1473 = _1310;
        _1474 = _1309;
        _1475 = _1308;
        _1476 = _1320;
        _1477 = _1319;
        _1478 = _1318;
        _1479 = _1333;
        _1480 = _1332;
        _1481 = _1331;
        _1482 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1484 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
    }
    else
    {
        _1469 = _1470;
        _1471 = _1470;
        _1472 = _1470;
        _1473 = _1470;
        _1474 = _1470;
        _1475 = _1470;
        _1476 = _1470;
        _1477 = _1470;
        _1478 = _1470;
        _1479 = _1470;
        _1480 = _1470;
        _1481 = _1470;
        _1482 = 0.0;
        _1483 = 0.0;
        _1484 = 0.0;
    }
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1507 = fma(_1168, cbModelParam._m0[30u].z, fma(_1164, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1160));
        float _1511 = fma(_1168, cbModelParam._m0[31u].z, fma(_1164, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1160));
        float _1515 = fma(_1168, cbModelParam._m0[32u].z, fma(_1164, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1160));
        float _1538 = _1160 + _949;
        float _1539 = _1164 + _950;
        float _1540 = _1168 + _951;
        float _1550 = fma(_1540, cbModelParam._m0[30u].z, fma(_1539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1538)) - _1507;
        float _1551 = fma(_1540, cbModelParam._m0[31u].z, fma(_1539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1538)) - _1511;
        float _1552 = fma(_1540, cbModelParam._m0[32u].z, fma(_1539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1538)) - _1515;
        float _1556 = inversesqrt(dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552)));
        float _1569 = ((_1556 * _1550) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1507 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1570 = ((_1556 * _1551) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1511 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1571 = ((_1556 * _1552) / cbModelParam._m0[35u].z) + ((((((_1515 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        float _1606 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1573.x + (-0.5));
        float _1608 = _1606 * (_1573.y + (-0.5));
        float _1609 = _1606 * (_1573.z + (-0.5));
        float _1616 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1580.x + (-0.5));
        float _1618 = _1616 * (_1580.y + (-0.5));
        float _1619 = _1616 * (_1580.z + (-0.5));
        float _1626 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1587.x + (-0.5));
        float _1628 = _1626 * (_1587.y + (-0.5));
        float _1629 = _1626 * (_1587.z + (-0.5));
        float _1636 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1594.x + (-0.5));
        float _1638 = _1636 * (_1594.y + (-0.5));
        float _1639 = _1636 * (_1594.z + (-0.5));
        float _1640 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1641 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1642 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1643 = _1607 * 0.5;
        float _1644 = _1617 * 0.5;
        float _1645 = _1627 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_949, _950, _951), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1640 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4160 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1670 + 1.0))) + _1675) * _1640;
        float _1685 = _1608 * 0.5;
        float _1686 = _1618 * 0.5;
        float _1687 = _1628 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_949, _950, _951), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1641 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4193 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1712 + 1.0))) + _1717) * _1641;
        float _1727 = _1609 * 0.5;
        float _1728 = _1619 * 0.5;
        float _1729 = _1629 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_949, _950, _951), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1642 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4226 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1754 + 1.0))) + _1759) * _1642;
        _1776 = _1609;
        _1777 = _1608;
        _1778 = _1607;
        _1779 = _1619;
        _1780 = _1618;
        _1781 = _1617;
        _1782 = _1629;
        _1783 = _1628;
        _1784 = _1627;
        _1785 = _1642;
        _1786 = _1641;
        _1787 = _1640;
        _1788 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
        _1789 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
        _1790 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
    }
    else
    {
        _1776 = _1470;
        _1777 = _1470;
        _1778 = _1470;
        _1779 = _1470;
        _1780 = _1470;
        _1781 = _1470;
        _1782 = _1470;
        _1783 = _1470;
        _1784 = _1470;
        _1785 = _1470;
        _1786 = _1470;
        _1787 = _1470;
        _1788 = 0.0;
        _1789 = 0.0;
        _1790 = 0.0;
    }
    float _1800 = (cbModelParam._m0[1u].x * (_1788 - _1482)) + _1482;
    float _1801 = (cbModelParam._m0[1u].x * (_1789 - _1483)) + _1483;
    float _1802 = (cbModelParam._m0[1u].x * (_1790 - _1484)) + _1484;
    float _1823 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1801, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1801, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1801, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1800));
    float _1844 = _1107 * 0.5;
    float _1845 = _1108 * 0.5;
    float _1846 = _1109 * 0.5;
    float _1847 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1778, _1781, _1784, _1787));
    float _1850 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1777, _1780, _1783, _1786));
    float _1853 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1776, _1779, _1782, _1785));
    float _1887;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1860 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1469, _1473, _1476, _1479));
        float _1864 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1471, _1474, _1477, _1480));
        float _1868 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1472, _1475, _1478, _1481));
        float _1875 = dot(vec4(cbModelParam._m0[39u]), vec4(_1844, _1845, _1846, 1.0));
        _1887 = dot(vec3(isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1887 = 1.0;
    }
    float _1898;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1889 = dot(vec4(cbModelParam._m0[40u]), vec4(_1844, _1845, _1846, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1889) ? 0.0 : (isnan(0.0) ? _1889 : max(0.0, _1889))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1902 = (_1898 * cbModelParam._m0[1u].x) + (_1887 * (1.0 - cbModelParam._m0[1u].x));
    float _1912 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _952);
    float _1913 = isnan(_1912) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1912 : min(cbModelParam._m0[25u].z, _1912));
    float _1993;
    float _1995;
    float _1997;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1960 = fma(_1168, cbModelParam._m0[13u].z, fma(_1164, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1160)) + cbModelParam._m0[13u].w;
        float _1964 = fma(_1168, cbModelParam._m0[14u].z, fma(_1164, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1160)) + cbModelParam._m0[14u].w;
        float _1968 = fma(_1168, cbModelParam._m0[15u].z, fma(_1164, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1160)) + cbModelParam._m0[15u].w;
        float _1971 = fma(_1109, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1107));
        float _1974 = fma(_1109, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1107));
        float _1977 = fma(_1109, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1107));
        float _2005;
        if (_1971 > 0.0)
        {
            _2005 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2005 = frontier_phi_14_12_ladder;
        }
        float _2226;
        if (_1974 > 0.0)
        {
            _2226 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2226 = frontier_phi_23_19_ladder;
        }
        float _2472;
        if (_1977 > 0.0)
        {
            _2472 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2472 = frontier_phi_35_30_ladder;
        }
        float _2474 = isnan(_2226) ? _2005 : (isnan(_2005) ? _2226 : min(_2005, _2226));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1971) + _1960;
        float _2480 = (_2475 * _1974) + _1964;
        float _2481 = (_2475 * _1977) + _1968;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2482;
        float _2486 = _2482 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 > _2486) || ((_2480 < _2484) || ((_2479 < _2484) || (_2479 > _2486))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2481, cbModelParam._m0[9u].z, fma(_2480, cbModelParam._m0[9u].y, _2479 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2481, cbModelParam._m0[10u].z, fma(_2480, cbModelParam._m0[10u].y, _2479 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2481, cbModelParam._m0[11u].z, fma(_2480, cbModelParam._m0[11u].y, _2479 * cbModelParam._m0[11u].x))), _1913);
            frontier_phi_13_35_ladder = _2605.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2605.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2605.x * cbModelParam._m0[1u].y;
        }
        _1993 = frontier_phi_13_35_ladder_2;
        _1995 = frontier_phi_13_35_ladder_1;
        _1997 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1981 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1107, _1108, _1109), _1913);
        _1993 = _1981.x * cbModelParam._m0[1u].y;
        _1995 = _1981.y * cbModelParam._m0[1u].y;
        _1997 = _1981.z * cbModelParam._m0[1u].y;
    }
    float _2001 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _952);
    float _2002 = isnan(_2001) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2001 : min(cbModelParam._m0[25u].w, _2001));
    float _2091;
    float _2093;
    float _2095;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2055 = fma(_1168, cbModelParam._m0[21u].z, fma(_1164, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1160)) + cbModelParam._m0[21u].w;
        float _2059 = fma(_1168, cbModelParam._m0[22u].z, fma(_1164, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1160)) + cbModelParam._m0[22u].w;
        float _2063 = fma(_1168, cbModelParam._m0[23u].z, fma(_1164, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1160)) + cbModelParam._m0[23u].w;
        float _2066 = fma(_1109, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1107));
        float _2069 = fma(_1109, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1107));
        float _2072 = fma(_1109, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1107));
        float _2231;
        if (_2066 > 0.0)
        {
            _2231 = abs((1.0 - _2055) / _2066);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2055 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2231 = frontier_phi_25_21_ladder;
        }
        float _2499;
        if (_2069 > 0.0)
        {
            _2499 = abs((1.0 - _2059) / _2069);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2059 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2499 = frontier_phi_37_32_ladder;
        }
        float _2704;
        if (_2072 > 0.0)
        {
            _2704 = abs((1.0 - _2063) / _2072);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2063 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2704 = frontier_phi_46_43_ladder;
        }
        float _2706 = isnan(_2499) ? _2231 : (isnan(_2231) ? _2499 : min(_2231, _2499));
        float _2707 = isnan(_2704) ? _2706 : (isnan(_2706) ? _2704 : min(_2706, _2704));
        float _2711 = (_2707 * _2066) + _2055;
        float _2712 = (_2707 * _2069) + _2059;
        float _2713 = (_2707 * _2072) + _2063;
        float _2714 = _2707 * 9.9999997473787516355514526367188e-05;
        float _2715 = (-1.0) - _2714;
        float _2717 = _2714 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2713 > _2717) || ((_2713 < _2715) || ((_2712 > _2717) || ((_2712 < _2715) || ((_2711 < _2715) || (_2711 > _2717))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2713, cbModelParam._m0[17u].z, fma(_2712, cbModelParam._m0[17u].y, _2711 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2713, cbModelParam._m0[18u].z, fma(_2712, cbModelParam._m0[18u].y, _2711 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2713, cbModelParam._m0[19u].z, fma(_2712, cbModelParam._m0[19u].y, _2711 * cbModelParam._m0[19u].x))), _2002);
            frontier_phi_22_46_ladder = _2912.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2912.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2912.x * cbModelParam._m0[1u].z;
        }
        _2091 = frontier_phi_22_46_ladder_2;
        _2093 = frontier_phi_22_46_ladder_1;
        _2095 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2075 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1107, _1108, _1109), _2002);
        _2091 = _2075.x * cbModelParam._m0[1u].z;
        _2093 = _2075.y * cbModelParam._m0[1u].z;
        _2095 = _2075.z * cbModelParam._m0[1u].z;
    }
    float _2107 = ((((1.0 - _1128) * ((_1115 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1128 * _1115)) * _1099;
    float _2108 = _2107 * ((cbModelParam._m0[1u].w * (_2091 - _1993)) + _1993);
    float _2109 = _2107 * ((cbModelParam._m0[1u].w * (_2093 - _1995)) + _1995);
    float _2110 = _2107 * ((cbModelParam._m0[1u].w * (_2095 - _1997)) + _1997);
    float _2113 = fma(_2110, cbSceneParam._m0[89u].z, fma(_2109, cbSceneParam._m0[89u].y, _2108 * cbSceneParam._m0[89u].x));
    float _2116 = fma(_2110, cbSceneParam._m0[90u].z, fma(_2109, cbSceneParam._m0[90u].y, _2108 * cbSceneParam._m0[90u].x));
    float _2119 = fma(_2110, cbSceneParam._m0[91u].z, fma(_2109, cbSceneParam._m0[91u].y, _2108 * cbSceneParam._m0[91u].x));
    vec4 _2127 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1036, _1037));
    float _2129 = _2127.w;
    float _2141 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2129);
    float _2142 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2129);
    float _2143 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2129);
    uvec4 _2147 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2149 = _2147.x * 14u;
    uint _2150 = _2149 + 13u;
    float _2157 = _1099 + (-1.0);
    float _2162 = (cbLight._m0[_2150].x * _2157) + 1.0;
    float _2163 = (cbLight._m0[_2150].y * _2157) + 1.0;
    float _2164 = (cbLight._m0[_2150].z * _2157) + 1.0;
    float _2165 = (cbLight._m0[_2150].w * _2157) + 1.0;
    uint _2166 = _2149 + 5u;
    float _2172 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
    uint _2176 = _2149 + 4u;
    float _2185 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2189 = _2149 | 1u;
    float _2200 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_949, _950, _951));
    float _2203 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_949, _950, _951));
    float _4362 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _4373 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2208 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
    float _2210 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 0.3183098733425140380859375;
    float _2217 = ((cbLight._m0[_2166].x * _2172) * _2210) + (((cbLight._m0[_2176].x * _2141) * _2185) * _2208);
    float _2218 = ((_2172 * cbLight._m0[_2166].y) * _2210) + (((cbLight._m0[_2176].y * _2142) * _2185) * _2208);
    float _2219 = ((_2172 * cbLight._m0[_2166].z) * _2210) + (((cbLight._m0[_2176].z * _2143) * _2185) * _2208);
    uvec4 _2223 = floatBitsToUint(cbLight._m0[_2149 + 12u]);
    bool _2225 = _2223.x == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2225)
    {
        _2236 = _2217;
        _2238 = _2218;
        _2240 = _2219;
    }
    else
    {
        uint _2244 = _2149 + 6u;
        float _2260 = (dot(vec3(cbLight._m0[_2149 + 2u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4384 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2263 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2236 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2217;
        _2238 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2218;
        _2240 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2219;
    }
    bool _2243 = _2223.y == 0u;
    float _2281;
    float _2283;
    float _2285;
    if (_2243)
    {
        _2281 = _2236;
        _2283 = _2238;
        _2285 = _2240;
    }
    else
    {
        uint _2443 = _2149 + 7u;
        float _2459 = (dot(vec3(cbLight._m0[_2149 + 3u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2460 = _2459 * _2459;
        float _4400 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2461 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2462 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2281 = (((cbLight._m0[_2443].x * 0.3183098733425140380859375) * _2461) * _2462) + _2236;
        _2283 = (((cbLight._m0[_2443].y * 0.3183098733425140380859375) * _2461) * _2462) + _2238;
        _2285 = (((cbLight._m0[_2443].z * 0.3183098733425140380859375) * _2461) * _2462) + _2240;
    }
    uint _2288 = _2149 + 8u;
    float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _952) * 0.949999988079071044921875);
    float _2302 = _2301 * _2301;
    float _2303 = cbLight._m0[_2149].x + _1028;
    float _2304 = cbLight._m0[_2149].y + _1029;
    float _2305 = cbLight._m0[_2149].z + _1030;
    float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
    float _2310 = _2309 * _2303;
    float _2311 = _2309 * _2304;
    float _2312 = _2309 * _2305;
    float _2313 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2149].xyz));
    float _4416 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _4427 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _2317 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2318 = dot(vec3(_949, _950, _951), vec3(_2310, _2311, _2312));
    float _4438 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2310, _2311, _2312));
    float _4449 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2302 * _2302;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2341 = (exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2342 = 1.0 - _2302;
    float _2353 = (0.5 / (((_2317 * ((_2316 * _2342) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2342) + _2302) * _2316))) * _2316;
    float _4460 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2355 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    uint _2369 = _2149 + 9u;
    float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _952) * 0.949999988079071044921875);
    float _2381 = _2380 * _2380;
    float _2382 = cbLight._m0[_2189].x + _1028;
    float _2383 = cbLight._m0[_2189].y + _1029;
    float _2384 = cbLight._m0[_2189].z + _1030;
    float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
    float _2389 = _2388 * _2382;
    float _2390 = _2388 * _2383;
    float _2391 = _2388 * _2384;
    float _2392 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2189].xyz));
    float _4471 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2396 = dot(vec3(_949, _950, _951), vec3(_2389, _2390, _2391));
    float _4482 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2400 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2389, _2390, _2391));
    float _4493 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2404 = _2381 * _2381;
    float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
    float _2417 = (exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2418 = 1.0 - _2381;
    float _2428 = (0.5 / (((_2317 * ((_2395 * _2418) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2418) + _2381) * _2395))) * _2395;
    float _4504 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
    float _2440 = (((_2417 * cbLight._m0[_2369].x) * _2430) * _2172) + ((((cbLight._m0[_2288].x * _2141) * _2341) * _2355) * _2185);
    float _2441 = (((_2417 * cbLight._m0[_2369].y) * _2430) * _2172) + ((((cbLight._m0[_2288].y * _2142) * _2341) * _2355) * _2185);
    float _2442 = (((_2417 * cbLight._m0[_2369].z) * _2430) * _2172) + ((((cbLight._m0[_2288].z * _2143) * _2341) * _2355) * _2185);
    float _2504;
    float _2506;
    float _2508;
    if (_2225)
    {
        _2504 = _2440;
        _2506 = _2441;
        _2508 = _2442;
    }
    else
    {
        uint _2510 = _2149 + 2u;
        uint _2514 = _2149 + 10u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _952) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _1028;
        float _2531 = cbLight._m0[_2510].y + _1029;
        float _2532 = cbLight._m0[_2510].z + _1030;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2510].xyz));
        float _4515 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2544 = dot(vec3(_949, _950, _951), vec3(_2537, _2538, _2539));
        float _4526 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4537 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2565 = (exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2566 = 1.0 - _2529;
        float _2576 = (0.5 / (((_2317 * ((_2543 * _2566) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2566) + _2529) * _2543))) * _2543;
        float _4548 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2578 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2579 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2504 = (((_2565 * cbLight._m0[_2514].x) * _2578) * _2579) + _2440;
        _2506 = (((_2565 * cbLight._m0[_2514].y) * _2578) * _2579) + _2441;
        _2508 = (((_2565 * cbLight._m0[_2514].z) * _2578) * _2579) + _2442;
    }
    float _2614;
    float _2616;
    float _2618;
    if (_2243)
    {
        _2614 = _2504;
        _2616 = _2506;
        _2618 = _2508;
    }
    else
    {
        uint _2625 = _2149 + 3u;
        uint _2629 = _2149 + 11u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _952) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _1028;
        float _2646 = cbLight._m0[_2625].y + _1029;
        float _2647 = cbLight._m0[_2625].z + _1030;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2625].xyz));
        float _4564 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2659 = dot(vec3(_949, _950, _951), vec3(_2652, _2653, _2654));
        float _4575 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4586 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2680 = (exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2681 = 1.0 - _2644;
        float _2691 = (0.5 / (((_2317 * ((_2658 * _2681) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2681) + _2644) * _2658))) * _2658;
        float _4597 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2693 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2694 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2614 = (((_2680 * cbLight._m0[_2629].x) * _2693) * _2694) + _2504;
        _2616 = (((_2680 * cbLight._m0[_2629].y) * _2693) * _2694) + _2506;
        _2618 = (((_2680 * cbLight._m0[_2629].z) * _2693) * _2694) + _2508;
    }
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_2147.y == 0u)
    {
        float _2769 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2770 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2769;
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2769;
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2769;
        uvec4 _2784 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2785 = _2784.x;
        uint _2796 = uint((float(_2784.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1037) / _2785))) + floor(float(uint(cbSceneParam._m0[85u].x * _1036) / _2785)));
        float _2806 = (log2(_2772 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2807 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        uint _2810 = uint(isnan(14.0) ? _2807 : (isnan(_2807) ? 14.0 : min(_2807, 14.0)));
        uvec4 _2815 = texelFetch(g_lightClusterGridBuffer, int(((_2810 << 2u) + (_2796 << 6u)) >> 2u));
        uint _2816 = _2815.x;
        uint _2817 = _2784.z;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        if (((((1u << ((_2817 >> 4u) & 15u)) + 4294967295u) & _2816) == 0u) || ((_2817 & 240u) == 0u))
        {
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
        }
        else
        {
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            uint _3068 = 0u;
            uint _3077;
            bool _3078;
            for (;;)
            {
                _3077 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3068 << 2u)) >> 2u)).x;
                _3078 = _3077 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3078)
                {
                    frontier_phi_61_pred = _3062;
                    frontier_phi_61_pred_1 = _3067;
                    frontier_phi_61_pred_2 = _3066;
                    frontier_phi_61_pred_3 = _3065;
                    frontier_phi_61_pred_4 = _3064;
                    frontier_phi_61_pred_5 = _3063;
                }
                else
                {
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    uint _3192;
                    _3186 = _3062;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3077;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    for (;;)
                    {
                        uint _3196 = uint(findLSB(_3192)) + (_3068 << 5u);
                        uint _3193 = (_3192 + 4294967295u) & _3192;
                        uint _3198 = _3196 * 48u;
                        vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3218 = (_3196 * 48u) + 4u;
                        vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3218)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 3u)).x));
                        uint _3237 = (_3196 * 48u) + 8u;
                        vec3 _3248 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x));
                        float _3252 = _3212.x - _2770;
                        float _3253 = _3212.y - _2771;
                        float _3254 = _3212.z - _2772;
                        float _3255 = dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254));
                        float _3258 = inversesqrt(_3255);
                        float _3259 = _3258 * _3252;
                        float _3260 = _3258 * _3253;
                        float _3261 = _3258 * _3254;
                        float _3262 = dot(vec3(_1055, _1058, _1061), vec3(_3259, _3260, _3261));
                        float _3267 = 1.0 - (_3255 * _3212.w);
                        float _4623 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3268 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3269 = sqrt(_3255) * _3231.w;
                        float _3272 = 1.39999997615814208984375 / (_3269 + 1.39999997615814208984375);
                        float _3273 = _3272 * _3272;
                        float _3276 = ((1.0 - _3273) * _3262) + _3273;
                        float _3279 = _3269 * _3269;
                        float _3283 = ((isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0))) * _3268) / ((_3279 * 0.699999988079071044921875) + 1.0);
                        float _3287 = (-0.0) - _2770;
                        float _3288 = (-0.0) - _2771;
                        float _3289 = (-0.0) - _2772;
                        float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                        float _3294 = _3293 * _3287;
                        float _3295 = _3293 * _3288;
                        float _3296 = _3293 * _3289;
                        float _3304 = exp2(log2(1.0 / ((_3279 * 3.5) + 5.0)) * 0.25);
                        float _3305 = 1.0 - _1115;
                        float _3312 = sqrt(1.0 - ((1.0 - (_3305 * _3305)) * (1.0 - (_3304 * _3304))));
                        float _3313 = _3312 * _3312;
                        float _3314 = _3313 * _3313;
                        float _3315 = _3294 + _3259;
                        float _3316 = _3295 + _3260;
                        float _3317 = _3296 + _3261;
                        float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                        float _3325 = dot(vec3(_1055, _1058, _1061), vec3(_3294, _3295, _3296));
                        float _4639 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3328 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3329 = dot(vec3(_1055, _1058, _1061), vec3(_3321 * _3315, _3321 * _3316, _3321 * _3317));
                        float _4650 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3332 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3336 = ((_3332 * _3332) * (_3314 + (-1.0))) + 1.0;
                        float _3337 = _3272 * _3313;
                        float _3338 = _3337 * _3337;
                        float _3341 = ((1.0 - _3338) * _3262) + _3338;
                        float _4661 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                        float _3343 = 1.0 - _3313;
                        float _3353 = (0.5 / (((_3342 * ((_3328 * _3343) + _3313)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3313) * _3328))) * _3342;
                        float _4672 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3364 = (((_3314 * 3.1415927410125732421875) * (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) / ((_3336 * _3336) * ((_3279 * 2.1991131305694580078125) + 3.141590118408203125))) * _3268;
                        _3121 = (_3283 * _3231.x) + _3189;
                        _3122 = (_3283 * _3231.y) + _3190;
                        _3123 = (_3283 * _3231.z) + _3191;
                        _3118 = (_3364 * _3248.x) + _3186;
                        _3119 = (_3364 * _3248.y) + _3187;
                        _3120 = (_3364 * _3248.z) + _3188;
                        if (_3193 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3186 = _3118;
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3193;
                        }
                    }
                    frontier_phi_61_pred = _3118;
                    frontier_phi_61_pred_1 = _3123;
                    frontier_phi_61_pred_2 = _3122;
                    frontier_phi_61_pred_3 = _3121;
                    frontier_phi_61_pred_4 = _3120;
                    frontier_phi_61_pred_5 = _3119;
                }
                _2918 = frontier_phi_61_pred;
                _2928 = frontier_phi_61_pred_1;
                _2926 = frontier_phi_61_pred_2;
                _2924 = frontier_phi_61_pred_3;
                _2922 = frontier_phi_61_pred_4;
                _2920 = frontier_phi_61_pred_5;
                uint _3069 = _3068 + 1u;
                if (_3069 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3062 = _2918;
                    _3063 = _2920;
                    _3064 = _2922;
                    _3065 = _2924;
                    _3066 = _2926;
                    _3067 = _2928;
                    _3068 = _3069;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
        }
        uvec4 _2931 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2932 = _2931.z;
        uint _2934 = (_2932 >> 8u) & 15u;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        if (((4294967295u << _2934) & _2816) == 0u)
        {
            _3030 = _2917;
            _3032 = _2919;
            _3034 = _2921;
            _3036 = _2923;
            _3038 = _2925;
            _3040 = _2927;
        }
        else
        {
            float _3055 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
            float _3056 = _3055 * _2770;
            float _3057 = _3055 * _2771;
            float _3058 = _3055 * _2772;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2934 < ((_2932 >> 12u) & 15u))
            {
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3169 = _2917;
                float _3170 = _2919;
                float _3171 = _2921;
                float _3172 = _2923;
                float _3173 = _2925;
                float _3174 = _2927;
                uint _3175 = _2934;
                uint _3184;
                bool _3185;
                for (;;)
                {
                    _3184 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3175 << 2u)) >> 2u)).x;
                    _3185 = _3184 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3185)
                    {
                        frontier_phi_67_pred = _3172;
                        frontier_phi_67_pred_1 = _3173;
                        frontier_phi_67_pred_2 = _3174;
                        frontier_phi_67_pred_3 = _3171;
                        frontier_phi_67_pred_4 = _3170;
                        frontier_phi_67_pred_5 = _3169;
                    }
                    else
                    {
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3382 = _3169;
                        float _3383 = _3170;
                        float _3384 = _3171;
                        float _3385 = _3172;
                        float _3386 = _3173;
                        float _3387 = _3174;
                        uint _3388 = _3184;
                        uint _3389;
                        vec4 _3414;
                        float _3415;
                        vec4 _3430;
                        vec3 _3442;
                        vec4 _3457;
                        vec4 _3472;
                        float _3518;
                        bool _3519;
                        for (;;)
                        {
                            uint _3399 = ((_3175 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3388));
                            _3389 = (_3388 + 4294967295u) & _3388;
                            uint _3401 = _3399 * 40u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3415 = _3414.w;
                            uint _3417 = (_3399 * 40u) + 4u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3399 * 40u) + 8u;
                            _3442 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x));
                            uint _3444 = (_3399 * 40u) + 16u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3459 = (_3399 * 40u) + 20u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3474 = (_3399 * 40u) + 24u;
                            vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            uint _3493 = (_3399 * 40u) + 28u;
                            vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            _3518 = fma(_2772, _3506.z, fma(_2771, _3506.y, _3506.x * _2770)) + _3506.w;
                            _3519 = !((fma(_2772, _3487.z, fma(_2771, _3487.y, _3487.x * _2770)) + _3487.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3519)
                            {
                                float _3546 = _3414.x - _2770;
                                float _3547 = _3414.y - _2771;
                                float _3548 = _3414.z - _2772;
                                float _3549 = dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548));
                                float _3552 = inversesqrt(_3549);
                                float _3553 = _3552 * _3546;
                                float _3554 = _3552 * _3547;
                                float _3555 = _3552 * _3548;
                                float _3559 = 1.0 - (_3549 / (_3415 * _3415));
                                float _4683 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3564 = sqrt(_3549) * _3430.w;
                                float _3566 = 1.39999997615814208984375 / (_3564 + 1.39999997615814208984375);
                                float _3567 = _3566 * _3566;
                                float _3570 = ((1.0 - _3567) * dot(vec3(_3553, _3554, _3555), vec3(_1055, _1058, _1061))) + _3567;
                                float _3573 = _3564 * _3564;
                                float _3577 = (fma(_2772, _3457.z, fma(_2771, _3457.y, _3457.x * _2770)) + _3457.w) / _3518;
                                float _3578 = (fma(_2772, _3472.z, fma(_2771, _3472.y, _3472.x * _2770)) + _3472.w) / _3518;
                                float _3582 = 1.0 - dot(vec2(_3577, _3578), vec2(_3577, _3578));
                                float _4699 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3583 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3584 = _3583 * (((isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0))) * _3560) / ((_3573 * 0.699999988079071044921875) + 1.0));
                                float _3596 = exp2(log2(1.0 / ((_3573 * 3.5) + 5.0)) * 0.25);
                                float _3597 = 1.0 - _1115;
                                float _3604 = sqrt(1.0 - ((1.0 - (_3597 * _3597)) * (1.0 - (_3596 * _3596))));
                                float _3605 = _3604 * _3604;
                                float _3606 = _3605 * _3605;
                                float _3607 = _3553 - _3056;
                                float _3608 = _3554 - _3057;
                                float _3609 = _3555 - _3058;
                                float _3613 = inversesqrt(dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609)));
                                float _3617 = dot(vec3(_1055, _1058, _1061), vec3((-0.0) - _3056, (-0.0) - _3057, (-0.0) - _3058));
                                float _4710 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3620 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3621 = dot(vec3(_1055, _1058, _1061), vec3(_3613 * _3607, _3613 * _3608, _3613 * _3609));
                                float _4721 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3624 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3628 = ((_3624 * _3624) * (_3606 + (-1.0))) + 1.0;
                                float _3629 = _3566 * _3605;
                                float _3630 = _3629 * _3629;
                                float _3636 = ((1.0 - _3630) * dot(vec3(_1055, _1058, _1061), vec3(_3553, _3554, _3555))) + _3630;
                                float _4732 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3638 = 1.0 - _3605;
                                float _3648 = (0.5 / (((_3637 * ((_3620 * _3638) + _3605)) + 9.9999999392252902907785028219223e-09) + (((_3637 * _3638) + _3605) * _3620))) * _3637;
                                float _4743 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3658 = (_3583 * _3560) * (((_3606 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3628 * _3628) * ((_3573 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3658 * _3442.x;
                                frontier_phi_73_pred_1 = _3658 * _3442.y;
                                frontier_phi_73_pred_2 = _3584 * _3430.z;
                                frontier_phi_73_pred_3 = _3584 * _3430.y;
                                frontier_phi_73_pred_4 = _3584 * _3430.x;
                                frontier_phi_73_pred_5 = _3658 * _3442.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3662 = frontier_phi_73_pred;
                            _3663 = frontier_phi_73_pred_1;
                            _3667 = frontier_phi_73_pred_2;
                            _3666 = frontier_phi_73_pred_3;
                            _3665 = frontier_phi_73_pred_4;
                            _3664 = frontier_phi_73_pred_5;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            if (_3389 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3389;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3372;
                        frontier_phi_67_pred_1 = _3373;
                        frontier_phi_67_pred_2 = _3374;
                        frontier_phi_67_pred_3 = _3371;
                        frontier_phi_67_pred_4 = _3370;
                        frontier_phi_67_pred_5 = _3369;
                    }
                    _3037 = frontier_phi_67_pred;
                    _3039 = frontier_phi_67_pred_1;
                    _3041 = frontier_phi_67_pred_2;
                    _3035 = frontier_phi_67_pred_3;
                    _3033 = frontier_phi_67_pred_4;
                    _3031 = frontier_phi_67_pred_5;
                    uint _3176 = _3175 + 1u;
                    if (_3176 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3169 = _3031;
                        _3170 = _3033;
                        _3171 = _3035;
                        _3172 = _3037;
                        _3173 = _3039;
                        _3174 = _3041;
                        _3175 = _3176;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3039;
                frontier_phi_55_56_ladder_1 = _3041;
                frontier_phi_55_56_ladder_2 = _3037;
                frontier_phi_55_56_ladder_3 = _3035;
                frontier_phi_55_56_ladder_4 = _3033;
                frontier_phi_55_56_ladder_5 = _3031;
            }
            else
            {
                frontier_phi_55_56_ladder = _2925;
                frontier_phi_55_56_ladder_1 = _2927;
                frontier_phi_55_56_ladder_2 = _2923;
                frontier_phi_55_56_ladder_3 = _2921;
                frontier_phi_55_56_ladder_4 = _2919;
                frontier_phi_55_56_ladder_5 = _2917;
            }
            _3030 = frontier_phi_55_56_ladder_5;
            _3032 = frontier_phi_55_56_ladder_4;
            _3034 = frontier_phi_55_56_ladder_3;
            _3036 = frontier_phi_55_56_ladder_2;
            _3038 = frontier_phi_55_56_ladder;
            _3040 = frontier_phi_55_56_ladder_1;
        }
        float _3045 = isnan(1.0) ? _1099 : (isnan(_1099) ? 1.0 : min(_1099, 1.0));
        _2829 = (_3045 * _3036) + _2281;
        _2831 = (_3045 * _3038) + _2283;
        _2833 = (_3045 * _3040) + _2285;
        _2835 = ((_3030 * 0.039999999105930328369140625) * _3045) + _2614;
        _2837 = ((_3032 * 0.039999999105930328369140625) * _3045) + _2616;
        _2839 = ((_3034 * 0.039999999105930328369140625) * _3045) + _2618;
    }
    else
    {
        _2829 = _2281;
        _2831 = _2283;
        _2833 = _2285;
        _2835 = _2614;
        _2837 = _2616;
        _2839 = _2618;
    }
    float _4759 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _4770 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _4781 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    uint _2859 = _280 + 6u;
    float _2867 = _1036 / cbSceneParam._m0[86u].x;
    float _2868 = _1037 / cbSceneParam._m0[86u].y;
    vec4 _2882 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, (log2((isnan(cbSceneParam._m0[77u].w) ? _970 : (isnan(_970) ? cbSceneParam._m0[77u].w : min(_970, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2884 = _2882.x;
    float _2885 = _2882.y;
    float _2886 = _2882.z;
    float _2887 = _2882.w;
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    if (_970 > cbSceneParam._m0[78u].w)
    {
        float _2942 = isnan(_970) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _970 : min(cbSceneParam._m0[80u].w, _970));
        float _2943 = _2942 / _970;
        float _2954 = _2943 * _1021;
        float _2955 = _1022 * _2943;
        float _2956 = (-0.0) - _2955;
        float _2958 = _2943 * _1023;
        float _2960 = (cbSceneParam._m0[77u].w * _2956) / _2942;
        float _2961 = _2960 + cbSceneParam._m0[79u].w;
        float _2962 = cbSceneParam._m0[79u].w - _2955;
        float _2968 = sqrt(((_2954 * _2954) + (_2955 * _2955)) + (_2958 * _2958));
        float _2971 = (1.0 - (cbSceneParam._m0[77u].w / _2942)) * _2968;
        float _2976 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2978 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3131;
        if (abs((_2956 - _2960) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3131 = ((((_2961 > 0.0) ? exp2(_2976 * _2961) : (2.0 - exp2(_2978 * _2961))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2971;
        }
        else
        {
            float _3091 = 1.0 / cbSceneParam._m0[80u].x;
            float _3092 = isnan(_2962) ? _2961 : (isnan(_2961) ? _2962 : max(_2961, _2962));
            float _3093 = isnan(_2962) ? _2961 : (isnan(_2961) ? _2962 : min(_2961, _2962));
            float _3102 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : min(_3092, 0.0));
            float _3103 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : min(_3093, 0.0));
            _3131 = ((abs(_2968 / _2956) * cbSceneParam._m0[80u].y) * ((((_3102 - _3103) * 2.0) - ((exp2(_2976 * (isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0)))) - exp2(_2976 * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))))) * _3091)) - ((exp2(_2978 * _3102) - exp2(_2978 * _3103)) * _3091))) + (_2971 * cbSceneParam._m0[80u].z);
        }
        vec4 _3133 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, 1.0), 0.0);
        float _3142 = exp2((_3131 * (-1.44269502162933349609375)) * (1.0 - _3133.w));
        float _3143 = log2(_3142);
        float _3159 = log2(_2887);
        _2980 = (exp2(_3159 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].x)) * _3133.x) / cbSceneParam._m0[78u].x)) + _2884;
        _2982 = (exp2(_3159 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].y)) * _3133.y) / cbSceneParam._m0[78u].y)) + _2885;
        _2984 = (exp2(_3159 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].z)) * _3133.z) / cbSceneParam._m0[78u].z)) + _2886;
        _2986 = _3142 * _2887;
    }
    else
    {
        _2980 = _2884;
        _2982 = _2885;
        _2984 = _2886;
        _2986 = _2887;
    }
    float _2998 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2999 = _2998 == 3.0;
    float _3000 = log2(_2986);
    float _3007 = exp2(_3000 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2829 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1099))) + ((_2835 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1902)) * cbPerFrame._m0[3u].x));
    float _3008 = exp2(_3000 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2831 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1099))) + ((_2837 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1902)) * cbPerFrame._m0[3u].x));
    float _3009 = exp2(_3000 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2833 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1099))) + ((_2839 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1902)) * cbPerFrame._m0[3u].x));
    float _3018 = (_2998 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3018 * (_2999 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2980)));
    SV_Target.y = _3018 * (_2999 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2982)));
    SV_Target.z = _3018 * (_2999 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2984)));
    SV_Target.w = cbInstanceData._m0[_2859].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2859].w;
}


