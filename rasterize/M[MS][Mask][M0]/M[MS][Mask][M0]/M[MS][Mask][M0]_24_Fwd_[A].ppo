#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1299;
float _3659;
float _3660;
float _3661;
float _3662;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3671 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3682 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3693 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[24u].z) + _439) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3704 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _467 = (_322.x * cbMtdParam._m0[9u].x) * ((_457 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353);
    float _468 = (_322.y * cbMtdParam._m0[9u].y) * ((_457 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354);
    float _469 = (_322.z * cbMtdParam._m0[9u].z) * ((_457 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355);
    float _473 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _467;
    float _476 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _468;
    float _479 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _469;
    float _487 = (((_467 - _473) * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) + _473) * 4.55000019073486328125;
    float _489 = (((_468 - _476) * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) + _476) * 4.55000019073486328125;
    float _491 = (((_469 - _479) * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) + _479) * 4.55000019073486328125;
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _555 = _553.x;
    float _556 = _553.y;
    float _557 = _553.z;
    float _566 = ((_536.z - _557) * _457) + _557;
    float _569 = ((((_536.x - _555) * _457) + _555) * 2.0) + (-1.0);
    float _570 = ((((_536.y - _556) * _457) + _556) * 2.0) + (-1.0);
    float _571 = dot(vec2(_569, _570), vec2(_569, _570));
    float _3715 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _576 = sqrt(1.0 - (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _608 = (_569 + ((((_509.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_596.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _609 = (_570 + ((((_509.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_596.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _612 = fma(_576, _233, fma(_609, _240, _608 * _226));
    float _615 = fma(_576, _234, fma(_609, _241, _608 * _227));
    float _618 = fma(_576, _235, fma(_609, _242, _608 * _228));
    float _622 = inversesqrt(dot(vec3(_612, _615, _618), vec3(_612, _615, _618)));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _285) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _286) + cbTextureTilingScale._m0[11u].w));
    float _651 = _649.x;
    float _652 = 1.0 - _651;
    float _658 = (cbMtdParam._m0[19u].x + dot(vec4(_622 * _612, _622 * _615, _622 * _618, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_651 - _652) * cbMtdParam._m0[24u].w) + _652) * cbMtdParam._m0[21u].z);
    float _3726 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _666 = (_659 * (cbMtdParam._m0[17u].x - _487)) + _487;
    float _667 = (_659 * (cbMtdParam._m0[17u].y - _489)) + _489;
    float _668 = (_659 * (cbMtdParam._m0[17u].z - _491)) + _491;
    float _673 = (((_509.z - _566) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _566;
    float _677 = ((_596.z - _673) * cbMtdParam._m0[19u].w) + _673;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _285) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _286) + cbTextureTilingScale._m0[15u].w));
    float _697 = (_690.x * 2.0) + (-1.0);
    float _698 = (_690.y * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _3737 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _707 = ((_690.z - _677) * _659) + _677;
    float _717 = ((sqrt(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) - _576) * _659) + _576;
    float _720 = (((_697 - _608) * _659) + _608) + (cbMtdParam._m0[21u].x * _608);
    float _721 = (((_698 - _609) * _659) + _609) + (cbMtdParam._m0[21u].x * _609);
    float _723 = cbMtdParam._m0[22u].x + _596.w;
    float _726 = fma(_717, _233, fma(_721, _240, _720 * _226));
    float _729 = fma(_717, _234, fma(_721, _241, _720 * _227));
    float _732 = fma(_717, _235, fma(_721, _242, _720 * _228));
    float _736 = inversesqrt(dot(vec3(_726, _729, _732), vec3(_726, _729, _732)));
    float _737 = _736 * _726;
    float _738 = _736 * _729;
    float _739 = _736 * _732;
    float _3748 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _740 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _3770 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3781 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3792 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _758 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _809 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _799);
    float _810 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _799);
    float _811 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _799);
    float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
    float _816 = _809 * _815;
    float _817 = _810 * _815;
    float _818 = _811 * _815;
    vec4 _823 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _825 = _823.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _979 = sqrt(((_809 * _809) + (_810 * _810)) + (_811 * _811));
        float _985 = (cbMatDynParam._m0[5u].x * _979) + cbMatDynParam._m0[5u].y;
        float _3803 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _990 = (cbMatDynParam._m0[5u].z * _979) + cbMatDynParam._m0[5u].w;
        float _3814 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) - _986)) + _986) < ((_825 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _836 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _837 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _855 = fma(_739, cbSceneParam._m0[5u].z, fma(_738, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _737));
    float _858 = fma(_739, cbSceneParam._m0[6u].z, fma(_738, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _737));
    float _861 = fma(_739, cbSceneParam._m0[7u].z, fma(_738, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _737));
    uint _874 = _266 + 9u;
    uint _875 = _874 + uint(cbMatDynParam._m0[0u].w);
    float _881 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_875].x;
    float _882 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * cbInstanceData._m0[_875].y;
    float _883 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * cbInstanceData._m0[_875].z;
    float _3825 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    vec4 _895 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _836, cbSceneParam._m0[86u].y * _837));
    float _899 = ((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * TEXCOORD_5.w) * _895.x;
    float _900 = dot(vec3(_737, _738, _739), vec3(_816, _817, _818));
    float _903 = _900 * 2.0;
    float _907 = (_903 * _737) - _816;
    float _908 = (_903 * _738) - _817;
    float _909 = (_903 * _739) - _818;
    float _913 = abs(dot(vec3(_816, _817, _818), vec3(_737, _738, _739)));
    float _3858 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _915 = sqrt(_740);
    float _928 = exp2((_915 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_915 * 3.0));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1298;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1023 = fma(_968, cbModelParam._m0[26u].z, fma(_964, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _960));
        float _1027 = fma(_968, cbModelParam._m0[27u].z, fma(_964, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _960));
        float _1031 = fma(_968, cbModelParam._m0[28u].z, fma(_964, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _960));
        float _1056 = _960 + _737;
        float _1057 = _964 + _738;
        float _1058 = _968 + _739;
        float _1068 = fma(_1058, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056)) - _1023;
        float _1069 = fma(_1058, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056)) - _1027;
        float _1070 = fma(_1058, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056)) - _1031;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1023 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1027 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[34u].z) + ((((((_1031 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1126 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1092.x + (-0.5));
        float _1128 = _1126 * (_1092.y + (-0.5));
        float _1129 = _1126 * (_1092.z + (-0.5));
        float _1136 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1099.x + (-0.5));
        float _1138 = _1136 * (_1099.y + (-0.5));
        float _1139 = _1136 * (_1099.z + (-0.5));
        float _1146 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1106.x + (-0.5));
        float _1148 = _1146 * (_1106.y + (-0.5));
        float _1149 = _1146 * (_1106.z + (-0.5));
        float _1156 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1113.x + (-0.5));
        float _1158 = _1156 * (_1113.y + (-0.5));
        float _1159 = _1156 * (_1113.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1180 = (dot(vec3(_737, _738, _739), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1190 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3906 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1192 + 1.0))) + _1197) * _1160;
        float _1207 = _1128 * 0.5;
        float _1208 = _1138 * 0.5;
        float _1209 = _1148 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_737, _738, _739), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3939 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1234 + 1.0))) + _1239) * _1161;
        float _1249 = _1129 * 0.5;
        float _1250 = _1139 * 0.5;
        float _1251 = _1149 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_737, _738, _739), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3972 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1276 + 1.0))) + _1281) * _1162;
        _1298 = _1129;
        _1300 = _1128;
        _1301 = _1127;
        _1302 = _1139;
        _1303 = _1138;
        _1304 = _1137;
        _1305 = _1149;
        _1306 = _1148;
        _1307 = _1147;
        _1308 = _1162;
        _1309 = _1161;
        _1310 = _1160;
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
    }
    else
    {
        _1298 = _1299;
        _1300 = _1299;
        _1301 = _1299;
        _1302 = _1299;
        _1303 = _1299;
        _1304 = _1299;
        _1305 = _1299;
        _1306 = _1299;
        _1307 = _1299;
        _1308 = _1299;
        _1309 = _1299;
        _1310 = _1299;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1341 = fma(_968, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _960));
        float _1345 = fma(_968, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _960));
        float _1349 = fma(_968, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _960));
        float _1372 = _960 + _737;
        float _1373 = _964 + _738;
        float _1374 = _968 + _739;
        float _1384 = fma(_1374, cbModelParam._m0[30u].z, fma(_1373, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1372)) - _1341;
        float _1385 = fma(_1374, cbModelParam._m0[31u].z, fma(_1373, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1372)) - _1345;
        float _1386 = fma(_1374, cbModelParam._m0[32u].z, fma(_1373, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1372)) - _1349;
        float _1390 = inversesqrt(dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386)));
        float _1403 = ((_1390 * _1384) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1341 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1390 * _1385) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1345 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1390 * _1386) / cbModelParam._m0[35u].z) + ((((((_1349 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        float _1440 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1407.x + (-0.5));
        float _1442 = _1440 * (_1407.y + (-0.5));
        float _1443 = _1440 * (_1407.z + (-0.5));
        float _1450 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1414.x + (-0.5));
        float _1452 = _1450 * (_1414.y + (-0.5));
        float _1453 = _1450 * (_1414.z + (-0.5));
        float _1460 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1421.x + (-0.5));
        float _1462 = _1460 * (_1421.y + (-0.5));
        float _1463 = _1460 * (_1421.z + (-0.5));
        float _1470 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1428.x + (-0.5));
        float _1472 = _1470 * (_1428.y + (-0.5));
        float _1473 = _1470 * (_1428.z + (-0.5));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = _1441 * 0.5;
        float _1478 = _1451 * 0.5;
        float _1479 = _1461 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_737, _738, _739), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4035 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1504 + 1.0))) + _1509) * _1474;
        float _1519 = _1442 * 0.5;
        float _1520 = _1452 * 0.5;
        float _1521 = _1462 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_737, _738, _739), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4068 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1546 + 1.0))) + _1551) * _1475;
        float _1561 = _1443 * 0.5;
        float _1562 = _1453 * 0.5;
        float _1563 = _1463 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_737, _738, _739), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4101 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1588 + 1.0))) + _1593) * _1476;
        _1610 = _1443;
        _1611 = _1442;
        _1612 = _1441;
        _1613 = _1453;
        _1614 = _1452;
        _1615 = _1451;
        _1616 = _1463;
        _1617 = _1462;
        _1618 = _1461;
        _1619 = _1476;
        _1620 = _1475;
        _1621 = _1474;
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
    }
    else
    {
        _1610 = _1299;
        _1611 = _1299;
        _1612 = _1299;
        _1613 = _1299;
        _1614 = _1299;
        _1615 = _1299;
        _1616 = _1299;
        _1617 = _1299;
        _1618 = _1299;
        _1619 = _1299;
        _1620 = _1299;
        _1621 = _1299;
        _1622 = 0.0;
        _1623 = 0.0;
        _1624 = 0.0;
    }
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1311)) + _1311;
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1312)) + _1312;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1313)) + _1313;
    float _1657 = fma(_1636, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1634 * cbSceneParam._m0[89u].x));
    float _1660 = fma(_1636, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1634 * cbSceneParam._m0[90u].x));
    float _1663 = fma(_1636, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1634));
    float _1678 = _907 * 0.5;
    float _1679 = _908 * 0.5;
    float _1680 = _909 * 0.5;
    float _1681 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1684 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1687 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1721;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1694 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1298, _1302, _1305, _1308));
        float _1698 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1702 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1709 = dot(vec4(cbModelParam._m0[39u]), vec4(_1678, _1679, _1680, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1709) ? 0.0 : (isnan(0.0) ? _1709 : max(0.0, _1709))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1732;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1723 = dot(vec4(cbModelParam._m0[40u]), vec4(_1678, _1679, _1680, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1723) ? 0.0 : (isnan(0.0) ? _1723 : max(0.0, _1723))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1736 = (_1732 * cbModelParam._m0[1u].x) + (_1721 * (1.0 - cbModelParam._m0[1u].x));
    float _1746 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _740);
    float _1747 = isnan(_1746) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1746 : min(cbModelParam._m0[25u].z, _1746));
    float _1828;
    float _1830;
    float _1832;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1795 = fma(_968, cbModelParam._m0[13u].z, fma(_964, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960)) + cbModelParam._m0[13u].w;
        float _1799 = fma(_968, cbModelParam._m0[14u].z, fma(_964, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960)) + cbModelParam._m0[14u].w;
        float _1803 = fma(_968, cbModelParam._m0[15u].z, fma(_964, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960)) + cbModelParam._m0[15u].w;
        float _1806 = fma(_909, cbModelParam._m0[13u].z, fma(_908, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907));
        float _1809 = fma(_909, cbModelParam._m0[14u].z, fma(_908, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907));
        float _1812 = fma(_909, cbModelParam._m0[15u].z, fma(_908, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907));
        float _1840;
        if (_1806 > 0.0)
        {
            _1840 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1840 = frontier_phi_17_15_ladder;
        }
        float _2041;
        if (_1809 > 0.0)
        {
            _2041 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2041 = frontier_phi_26_22_ladder;
        }
        float _2284;
        if (_1812 > 0.0)
        {
            _2284 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2284 = frontier_phi_38_33_ladder;
        }
        float _2286 = isnan(_2041) ? _1840 : (isnan(_1840) ? _2041 : min(_1840, _2041));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1806) + _1795;
        float _2292 = (_2287 * _1809) + _1799;
        float _2293 = (_2287 * _1812) + _1803;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2294;
        float _2298 = _2294 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 > _2298) || ((_2292 < _2296) || ((_2291 < _2296) || (_2291 > _2298))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2293, cbModelParam._m0[9u].z, fma(_2292, cbModelParam._m0[9u].y, _2291 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2293, cbModelParam._m0[10u].z, fma(_2292, cbModelParam._m0[10u].y, _2291 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2293, cbModelParam._m0[11u].z, fma(_2292, cbModelParam._m0[11u].y, _2291 * cbModelParam._m0[11u].x))), _1747);
            frontier_phi_16_38_ladder = _2417.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2417.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2417.x * cbModelParam._m0[1u].y;
        }
        _1828 = frontier_phi_16_38_ladder_2;
        _1830 = frontier_phi_16_38_ladder_1;
        _1832 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_907, _908, _909), _1747);
        _1828 = _1816.x * cbModelParam._m0[1u].y;
        _1830 = _1816.y * cbModelParam._m0[1u].y;
        _1832 = _1816.z * cbModelParam._m0[1u].y;
    }
    float _1836 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _740);
    float _1837 = isnan(_1836) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1836 : min(cbModelParam._m0[25u].w, _1836));
    float _1927;
    float _1929;
    float _1931;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1891 = fma(_968, cbModelParam._m0[21u].z, fma(_964, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960)) + cbModelParam._m0[21u].w;
        float _1895 = fma(_968, cbModelParam._m0[22u].z, fma(_964, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960)) + cbModelParam._m0[22u].w;
        float _1899 = fma(_968, cbModelParam._m0[23u].z, fma(_964, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960)) + cbModelParam._m0[23u].w;
        float _1902 = fma(_909, cbModelParam._m0[21u].z, fma(_908, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907));
        float _1905 = fma(_909, cbModelParam._m0[22u].z, fma(_908, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907));
        float _1908 = fma(_909, cbModelParam._m0[23u].z, fma(_908, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907));
        float _2046;
        if (_1902 > 0.0)
        {
            _2046 = abs((1.0 - _1891) / _1902);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1891 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2046 = frontier_phi_28_24_ladder;
        }
        float _2311;
        if (_1905 > 0.0)
        {
            _2311 = abs((1.0 - _1895) / _1905);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1895 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2311 = frontier_phi_40_35_ladder;
        }
        float _2516;
        if (_1908 > 0.0)
        {
            _2516 = abs((1.0 - _1899) / _1908);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1899 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2516 = frontier_phi_49_46_ladder;
        }
        float _2518 = isnan(_2311) ? _2046 : (isnan(_2046) ? _2311 : min(_2046, _2311));
        float _2519 = isnan(_2516) ? _2518 : (isnan(_2518) ? _2516 : min(_2518, _2516));
        float _2523 = (_2519 * _1902) + _1891;
        float _2524 = (_2519 * _1905) + _1895;
        float _2525 = (_2519 * _1908) + _1899;
        float _2526 = _2519 * 9.9999997473787516355514526367188e-05;
        float _2527 = (-1.0) - _2526;
        float _2529 = _2526 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2525 > _2529) || ((_2525 < _2527) || ((_2524 > _2529) || ((_2524 < _2527) || ((_2523 < _2527) || (_2523 > _2529))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2525, cbModelParam._m0[17u].z, fma(_2524, cbModelParam._m0[17u].y, _2523 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2525, cbModelParam._m0[18u].z, fma(_2524, cbModelParam._m0[18u].y, _2523 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2525, cbModelParam._m0[19u].z, fma(_2524, cbModelParam._m0[19u].y, _2523 * cbModelParam._m0[19u].x))), _1837);
            frontier_phi_25_49_ladder = _2724.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2724.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2724.x * cbModelParam._m0[1u].z;
        }
        _1927 = frontier_phi_25_49_ladder_2;
        _1929 = frontier_phi_25_49_ladder_1;
        _1931 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1911 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_907, _908, _909), _1837);
        _1927 = _1911.x * cbModelParam._m0[1u].z;
        _1929 = _1911.y * cbModelParam._m0[1u].z;
        _1931 = _1911.z * cbModelParam._m0[1u].z;
    }
    float _1943 = ((((1.0 - _928) * ((_915 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_928 * _915)) * _899;
    float _1944 = _1943 * ((cbModelParam._m0[1u].w * (_1927 - _1828)) + _1828);
    float _1945 = _1943 * ((cbModelParam._m0[1u].w * (_1929 - _1830)) + _1830);
    float _1946 = _1943 * ((cbModelParam._m0[1u].w * (_1931 - _1832)) + _1832);
    float _1949 = fma(_1946, cbSceneParam._m0[89u].z, fma(_1945, cbSceneParam._m0[89u].y, _1944 * cbSceneParam._m0[89u].x));
    float _1952 = fma(_1946, cbSceneParam._m0[90u].z, fma(_1945, cbSceneParam._m0[90u].y, _1944 * cbSceneParam._m0[90u].x));
    float _1955 = fma(_1946, cbSceneParam._m0[91u].z, fma(_1945, cbSceneParam._m0[91u].y, _1944 * cbSceneParam._m0[91u].x));
    uvec4 _1965 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _1967 = _1965.x * 14u;
    uint _1968 = _1967 + 13u;
    float _1975 = _899 + (-1.0);
    float _1980 = (cbLight._m0[_1968].x * _1975) + 1.0;
    float _1981 = (cbLight._m0[_1968].y * _1975) + 1.0;
    float _1982 = (cbLight._m0[_1968].z * _1975) + 1.0;
    float _1983 = (cbLight._m0[_1968].w * _1975) + 1.0;
    uint _1984 = _1967 + 5u;
    float _1990 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
    uint _1994 = _1967 + 4u;
    float _2000 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
    uint _2004 = _1967 | 1u;
    float _2015 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_737, _738, _739));
    float _2018 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_737, _738, _739));
    float _4237 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _4248 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2023 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _2025 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * 0.3183098733425140380859375;
    float _2032 = ((cbLight._m0[_1984].x * _1990) * _2025) + ((cbLight._m0[_1994].x * _2000) * _2023);
    float _2033 = ((_1990 * cbLight._m0[_1984].y) * _2025) + ((_2000 * cbLight._m0[_1994].y) * _2023);
    float _2034 = ((_1990 * cbLight._m0[_1984].z) * _2025) + ((_2000 * cbLight._m0[_1994].z) * _2023);
    uvec4 _2038 = floatBitsToUint(cbLight._m0[_1967 + 12u]);
    bool _2040 = _2038.x == 0u;
    float _2051;
    float _2053;
    float _2055;
    if (_2040)
    {
        _2051 = _2032;
        _2053 = _2033;
        _2055 = _2034;
    }
    else
    {
        uint _2059 = _1967 + 6u;
        float _2075 = (dot(vec3(cbLight._m0[_1967 + 2u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2076 = _2075 * _2075;
        float _4259 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2077 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2078 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2051 = (((cbLight._m0[_2059].x * 0.3183098733425140380859375) * _2077) * _2078) + _2032;
        _2053 = (((cbLight._m0[_2059].y * 0.3183098733425140380859375) * _2077) * _2078) + _2033;
        _2055 = (((cbLight._m0[_2059].z * 0.3183098733425140380859375) * _2077) * _2078) + _2034;
    }
    bool _2058 = _2038.y == 0u;
    float _2096;
    float _2098;
    float _2100;
    if (_2058)
    {
        _2096 = _2051;
        _2098 = _2053;
        _2100 = _2055;
    }
    else
    {
        uint _2255 = _1967 + 7u;
        float _2271 = (dot(vec3(cbLight._m0[_1967 + 3u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4275 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2274 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2096 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2051;
        _2098 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2053;
        _2100 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2055;
    }
    uint _2103 = _1967 + 8u;
    float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _740) * 0.949999988079071044921875);
    float _2117 = _2116 * _2116;
    float _2118 = cbLight._m0[_1967].x + _816;
    float _2119 = cbLight._m0[_1967].y + _817;
    float _2120 = cbLight._m0[_1967].z + _818;
    float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
    float _2125 = _2124 * _2118;
    float _2126 = _2124 * _2119;
    float _2127 = _2124 * _2120;
    float _2128 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_1967].xyz));
    float _4291 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _2132 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2133 = dot(vec3(_737, _738, _739), vec3(_2125, _2126, _2127));
    float _4313 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2137 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2125, _2126, _2127));
    float _4324 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2141 = _2117 * _2117;
    float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
    float _2156 = (exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2157 = 1.0 - _2117;
    float _2168 = (0.5 / (((_2132 * ((_2131 * _2157) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2157) + _2117) * _2131))) * _2131;
    float _4335 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2170 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
    uint _2181 = _1967 + 9u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _740) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_2004].x + _816;
    float _2195 = cbLight._m0[_2004].y + _817;
    float _2196 = cbLight._m0[_2004].z + _818;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2004].xyz));
    float _4346 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2208 = dot(vec3(_737, _738, _739), vec3(_2201, _2202, _2203));
    float _4357 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2201, _2202, _2203));
    float _4368 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2193 * _2193;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2230 = 1.0 - _2193;
    float _2240 = (0.5 / (((_2132 * ((_2207 * _2230) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2230) + _2193) * _2207))) * _2207;
    float _4379 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2242 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    float _2252 = (((_2229 * cbLight._m0[_2181].x) * _2242) * _1990) + (((_2156 * cbLight._m0[_2103].x) * _2170) * _2000);
    float _2253 = (((_2229 * cbLight._m0[_2181].y) * _2242) * _1990) + (((_2156 * cbLight._m0[_2103].y) * _2170) * _2000);
    float _2254 = (((_2229 * cbLight._m0[_2181].z) * _2242) * _1990) + (((_2156 * cbLight._m0[_2103].z) * _2170) * _2000);
    float _2316;
    float _2318;
    float _2320;
    if (_2040)
    {
        _2316 = _2252;
        _2318 = _2253;
        _2320 = _2254;
    }
    else
    {
        uint _2322 = _1967 + 2u;
        uint _2326 = _1967 + 10u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _740) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _816;
        float _2343 = cbLight._m0[_2322].y + _817;
        float _2344 = cbLight._m0[_2322].z + _818;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2322].xyz));
        float _4390 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2356 = dot(vec3(_737, _738, _739), vec3(_2349, _2350, _2351));
        float _4401 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4412 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2377 = (exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2378 = 1.0 - _2341;
        float _2388 = (0.5 / (((_2132 * ((_2355 * _2378) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2378) + _2341) * _2355))) * _2355;
        float _4423 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2390 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2391 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2316 = (((_2377 * cbLight._m0[_2326].x) * _2390) * _2391) + _2252;
        _2318 = (((_2377 * cbLight._m0[_2326].y) * _2390) * _2391) + _2253;
        _2320 = (((_2377 * cbLight._m0[_2326].z) * _2390) * _2391) + _2254;
    }
    float _2426;
    float _2428;
    float _2430;
    if (_2058)
    {
        _2426 = _2316;
        _2428 = _2318;
        _2430 = _2320;
    }
    else
    {
        uint _2437 = _1967 + 3u;
        uint _2441 = _1967 + 11u;
        float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _740) * 0.949999988079071044921875);
        float _2456 = _2455 * _2455;
        float _2457 = cbLight._m0[_2437].x + _816;
        float _2458 = cbLight._m0[_2437].y + _817;
        float _2459 = cbLight._m0[_2437].z + _818;
        float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
        float _2464 = _2463 * _2457;
        float _2465 = _2463 * _2458;
        float _2466 = _2463 * _2459;
        float _2467 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2437].xyz));
        float _4439 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2471 = dot(vec3(_737, _738, _739), vec3(_2464, _2465, _2466));
        float _4450 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2475 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2464, _2465, _2466));
        float _4461 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2479 = _2456 * _2456;
        float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
        float _2492 = (exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2493 = 1.0 - _2456;
        float _2503 = (0.5 / (((_2132 * ((_2470 * _2493) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2493) + _2456) * _2470))) * _2470;
        float _4472 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2505 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
        float _2506 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2426 = (((_2492 * cbLight._m0[_2441].x) * _2505) * _2506) + _2316;
        _2428 = (((_2492 * cbLight._m0[_2441].y) * _2505) * _2506) + _2318;
        _2430 = (((_2492 * cbLight._m0[_2441].z) * _2505) * _2506) + _2320;
    }
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_1965.y == 0u)
    {
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2581;
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2581;
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2581;
        uvec4 _2596 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2597 = _2596.x;
        uint _2608 = uint((float(_2596.y) * floor(float(uint(cbSceneParam._m0[85u].y * _837) / _2597))) + floor(float(uint(cbSceneParam._m0[85u].x * _836) / _2597)));
        float _2618 = (log2(_2584 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2619 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        uint _2622 = uint(isnan(14.0) ? _2619 : (isnan(_2619) ? 14.0 : min(_2619, 14.0)));
        uvec4 _2627 = texelFetch(g_lightClusterGridBuffer, int(((_2622 << 2u) + (_2608 << 6u)) >> 2u));
        uint _2628 = _2627.x;
        uint _2629 = _2596.z;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        if (((((1u << ((_2629 >> 4u) & 15u)) + 4294967295u) & _2628) == 0u) || ((_2629 & 240u) == 0u))
        {
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
        }
        else
        {
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            uint _2888 = 0u;
            uint _2897;
            bool _2898;
            for (;;)
            {
                _2897 = texelFetch(g_lightClassification, int((((_2622 << 5u) + (_2608 << 9u)) + (_2888 << 2u)) >> 2u)).x;
                _2898 = _2897 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2898)
                {
                    frontier_phi_66_pred = _2882;
                    frontier_phi_66_pred_1 = _2887;
                    frontier_phi_66_pred_2 = _2886;
                    frontier_phi_66_pred_3 = _2885;
                    frontier_phi_66_pred_4 = _2884;
                    frontier_phi_66_pred_5 = _2883;
                }
                else
                {
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    uint _3033;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2897;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    for (;;)
                    {
                        uint _3037 = uint(findLSB(_3033)) + (_2888 << 5u);
                        uint _3034 = (_3033 + 4294967295u) & _3033;
                        uint _3039 = _3037 * 48u;
                        vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 3u)).x));
                        uint _3059 = (_3037 * 48u) + 4u;
                        vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 3u)).x));
                        uint _3078 = (_3037 * 48u) + 8u;
                        vec3 _3089 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x));
                        float _3093 = _3053.x - _2582;
                        float _3094 = _3053.y - _2583;
                        float _3095 = _3053.z - _2584;
                        float _3096 = dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095));
                        float _3099 = inversesqrt(_3096);
                        float _3100 = _3099 * _3093;
                        float _3101 = _3099 * _3094;
                        float _3102 = _3099 * _3095;
                        float _3103 = dot(vec3(_855, _858, _861), vec3(_3100, _3101, _3102));
                        float _3108 = 1.0 - (_3096 * _3053.w);
                        float _4498 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3109 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3110 = sqrt(_3096) * _3072.w;
                        float _3113 = 1.39999997615814208984375 / (_3110 + 1.39999997615814208984375);
                        float _3114 = _3113 * _3113;
                        float _3117 = ((1.0 - _3114) * _3103) + _3114;
                        float _3120 = _3110 * _3110;
                        float _3124 = ((isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))) * _3109) / ((_3120 * 0.699999988079071044921875) + 1.0);
                        float _3128 = (-0.0) - _2582;
                        float _3129 = (-0.0) - _2583;
                        float _3130 = (-0.0) - _2584;
                        float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                        float _3135 = _3134 * _3128;
                        float _3136 = _3134 * _3129;
                        float _3137 = _3134 * _3130;
                        float _3145 = exp2(log2(1.0 / ((_3120 * 3.5) + 5.0)) * 0.25);
                        float _3146 = 1.0 - _915;
                        float _3153 = sqrt(1.0 - ((1.0 - (_3146 * _3146)) * (1.0 - (_3145 * _3145))));
                        float _3154 = _3153 * _3153;
                        float _3155 = _3154 * _3154;
                        float _3156 = _3135 + _3100;
                        float _3157 = _3136 + _3101;
                        float _3158 = _3137 + _3102;
                        float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                        float _3166 = dot(vec3(_855, _858, _861), vec3(_3135, _3136, _3137));
                        float _4514 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3169 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3170 = dot(vec3(_855, _858, _861), vec3(_3162 * _3156, _3162 * _3157, _3162 * _3158));
                        float _4525 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3173 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3177 = ((_3173 * _3173) * (_3155 + (-1.0))) + 1.0;
                        float _3178 = _3113 * _3154;
                        float _3179 = _3178 * _3178;
                        float _3182 = ((1.0 - _3179) * _3103) + _3179;
                        float _4536 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3184 = 1.0 - _3154;
                        float _3194 = (0.5 / (((_3183 * ((_3169 * _3184) + _3154)) + 9.9999999392252902907785028219223e-09) + (((_3183 * _3184) + _3154) * _3169))) * _3183;
                        float _4547 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3205 = (((_3155 * 3.1415927410125732421875) * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) / ((_3177 * _3177) * ((_3120 * 2.1991131305694580078125) + 3.141590118408203125))) * _3109;
                        _2957 = (_3124 * _3072.x) + _3030;
                        _2958 = (_3124 * _3072.y) + _3031;
                        _2959 = (_3124 * _3072.z) + _3032;
                        _2954 = (_3205 * _3089.x) + _3027;
                        _2955 = (_3205 * _3089.y) + _3028;
                        _2956 = (_3205 * _3089.z) + _3029;
                        if (_3034 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _3034;
                        }
                    }
                    frontier_phi_66_pred = _2954;
                    frontier_phi_66_pred_1 = _2959;
                    frontier_phi_66_pred_2 = _2958;
                    frontier_phi_66_pred_3 = _2957;
                    frontier_phi_66_pred_4 = _2956;
                    frontier_phi_66_pred_5 = _2955;
                }
                _2730 = frontier_phi_66_pred;
                _2740 = frontier_phi_66_pred_1;
                _2738 = frontier_phi_66_pred_2;
                _2736 = frontier_phi_66_pred_3;
                _2734 = frontier_phi_66_pred_4;
                _2732 = frontier_phi_66_pred_5;
                uint _2889 = _2888 + 1u;
                if (_2889 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2882 = _2730;
                    _2883 = _2732;
                    _2884 = _2734;
                    _2885 = _2736;
                    _2886 = _2738;
                    _2887 = _2740;
                    _2888 = _2889;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
        }
        uvec4 _2743 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2744 = _2743.z;
        uint _2746 = (_2744 >> 8u) & 15u;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        if (((4294967295u << _2746) & _2628) == 0u)
        {
            _2850 = _2729;
            _2852 = _2731;
            _2854 = _2733;
            _2856 = _2735;
            _2858 = _2737;
            _2860 = _2739;
        }
        else
        {
            float _2875 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
            float _2876 = _2875 * _2582;
            float _2877 = _2875 * _2583;
            float _2878 = _2875 * _2584;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2746 < ((_2744 >> 12u) & 15u))
            {
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _3010 = _2729;
                float _3011 = _2731;
                float _3012 = _2733;
                float _3013 = _2735;
                float _3014 = _2737;
                float _3015 = _2739;
                uint _3016 = _2746;
                uint _3025;
                bool _3026;
                for (;;)
                {
                    _3025 = texelFetch(g_lightClassification, int((((_2622 << 5u) + (_2608 << 9u)) + (_3016 << 2u)) >> 2u)).x;
                    _3026 = _3025 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3026)
                    {
                        frontier_phi_77_pred = _3015;
                        frontier_phi_77_pred_1 = _3014;
                        frontier_phi_77_pred_2 = _3013;
                        frontier_phi_77_pred_3 = _3012;
                        frontier_phi_77_pred_4 = _3011;
                        frontier_phi_77_pred_5 = _3010;
                    }
                    else
                    {
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3232 = _3010;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        float _3235 = _3013;
                        float _3236 = _3014;
                        float _3237 = _3015;
                        uint _3238 = _3025;
                        uint _3239;
                        vec4 _3264;
                        float _3265;
                        vec4 _3280;
                        vec3 _3292;
                        vec4 _3307;
                        vec4 _3322;
                        float _3368;
                        bool _3369;
                        for (;;)
                        {
                            uint _3249 = ((_3016 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3238));
                            _3239 = (_3238 + 4294967295u) & _3238;
                            uint _3251 = _3249 * 40u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            _3265 = _3264.w;
                            uint _3267 = (_3249 * 40u) + 4u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3249 * 40u) + 8u;
                            _3292 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x));
                            uint _3294 = (_3249 * 40u) + 16u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3309 = (_3249 * 40u) + 20u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3249 * 40u) + 24u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3343 = (_3249 * 40u) + 28u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3368 = fma(_2584, _3356.z, fma(_2583, _3356.y, _3356.x * _2582)) + _3356.w;
                            _3369 = !((fma(_2584, _3337.z, fma(_2583, _3337.y, _3337.x * _2582)) + _3337.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3369)
                            {
                                float _3396 = _3264.x - _2582;
                                float _3397 = _3264.y - _2583;
                                float _3398 = _3264.z - _2584;
                                float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                                float _3402 = inversesqrt(_3399);
                                float _3403 = _3402 * _3396;
                                float _3404 = _3402 * _3397;
                                float _3405 = _3402 * _3398;
                                float _3409 = 1.0 - (_3399 / (_3265 * _3265));
                                float _4558 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3414 = sqrt(_3399) * _3280.w;
                                float _3416 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                                float _3417 = _3416 * _3416;
                                float _3420 = ((1.0 - _3417) * dot(vec3(_3403, _3404, _3405), vec3(_855, _858, _861))) + _3417;
                                float _3423 = _3414 * _3414;
                                float _3427 = (fma(_2584, _3307.z, fma(_2583, _3307.y, _3307.x * _2582)) + _3307.w) / _3368;
                                float _3428 = (fma(_2584, _3322.z, fma(_2583, _3322.y, _3322.x * _2582)) + _3322.w) / _3368;
                                float _3432 = 1.0 - dot(vec2(_3427, _3428), vec2(_3427, _3428));
                                float _4574 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3434 = _3433 * (((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3410) / ((_3423 * 0.699999988079071044921875) + 1.0));
                                float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _915;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3403 - _2876;
                                float _3458 = _3404 - _2877;
                                float _3459 = _3405 - _2878;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_855, _858, _861), vec3((-0.0) - _2876, (-0.0) - _2877, (-0.0) - _2878));
                                float _4585 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3471 = dot(vec3(_855, _858, _861), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4596 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3416 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_855, _858, _861), vec3(_3403, _3404, _3405))) + _3480;
                                float _4607 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4618 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3433 * _3410) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3434 * _3280.y;
                                frontier_phi_83_pred_1 = _3434 * _3280.x;
                                frontier_phi_83_pred_2 = _3508 * _3292.z;
                                frontier_phi_83_pred_3 = _3508 * _3292.y;
                                frontier_phi_83_pred_4 = _3508 * _3292.x;
                                frontier_phi_83_pred_5 = _3434 * _3280.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3516 = frontier_phi_83_pred;
                            _3515 = frontier_phi_83_pred_1;
                            _3514 = frontier_phi_83_pred_2;
                            _3513 = frontier_phi_83_pred_3;
                            _3512 = frontier_phi_83_pred_4;
                            _3517 = frontier_phi_83_pred_5;
                            _3222 = _3515 + _3235;
                            _3223 = _3516 + _3236;
                            _3224 = _3517 + _3237;
                            _3219 = _3512 + _3232;
                            _3220 = _3513 + _3233;
                            _3221 = _3514 + _3234;
                            if (_3239 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3239;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3224;
                        frontier_phi_77_pred_1 = _3223;
                        frontier_phi_77_pred_2 = _3222;
                        frontier_phi_77_pred_3 = _3221;
                        frontier_phi_77_pred_4 = _3220;
                        frontier_phi_77_pred_5 = _3219;
                    }
                    _2861 = frontier_phi_77_pred;
                    _2859 = frontier_phi_77_pred_1;
                    _2857 = frontier_phi_77_pred_2;
                    _2855 = frontier_phi_77_pred_3;
                    _2853 = frontier_phi_77_pred_4;
                    _2851 = frontier_phi_77_pred_5;
                    uint _3017 = _3016 + 1u;
                    if (_3017 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3010 = _2851;
                        _3011 = _2853;
                        _3012 = _2855;
                        _3013 = _2857;
                        _3014 = _2859;
                        _3015 = _2861;
                        _3016 = _3017;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2855;
                frontier_phi_58_59_ladder_1 = _2861;
                frontier_phi_58_59_ladder_2 = _2859;
                frontier_phi_58_59_ladder_3 = _2857;
                frontier_phi_58_59_ladder_4 = _2853;
                frontier_phi_58_59_ladder_5 = _2851;
            }
            else
            {
                frontier_phi_58_59_ladder = _2733;
                frontier_phi_58_59_ladder_1 = _2739;
                frontier_phi_58_59_ladder_2 = _2737;
                frontier_phi_58_59_ladder_3 = _2735;
                frontier_phi_58_59_ladder_4 = _2731;
                frontier_phi_58_59_ladder_5 = _2729;
            }
            _2850 = frontier_phi_58_59_ladder_5;
            _2852 = frontier_phi_58_59_ladder_4;
            _2854 = frontier_phi_58_59_ladder;
            _2856 = frontier_phi_58_59_ladder_3;
            _2858 = frontier_phi_58_59_ladder_2;
            _2860 = frontier_phi_58_59_ladder_1;
        }
        float _2865 = isnan(1.0) ? _899 : (isnan(_899) ? 1.0 : min(_899, 1.0));
        _2641 = (_2865 * _2856) + _2096;
        _2643 = (_2865 * _2858) + _2098;
        _2645 = (_2865 * _2860) + _2100;
        _2647 = ((_2850 * 0.039999999105930328369140625) * _2865) + _2426;
        _2649 = ((_2852 * 0.039999999105930328369140625) * _2865) + _2428;
        _2651 = ((_2854 * 0.039999999105930328369140625) * _2865) + _2430;
    }
    else
    {
        _2641 = _2096;
        _2643 = _2098;
        _2645 = _2100;
        _2647 = _2426;
        _2649 = _2428;
        _2651 = _2430;
    }
    float _4634 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4645 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4656 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _2668 = ((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2641 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _899))) + ((_2647 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1736)) * cbPerFrame._m0[3u].x);
    float _2669 = ((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2643 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _899))) + ((_2649 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1736)) * cbPerFrame._m0[3u].x);
    float _2670 = ((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2645 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _899))) + ((_2651 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1736)) * cbPerFrame._m0[3u].x);
    uint _2671 = _266 + 6u;
    float _2679 = _836 / cbSceneParam._m0[86u].x;
    float _2680 = _837 / cbSceneParam._m0[86u].y;
    vec4 _2694 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, (log2((isnan(cbSceneParam._m0[77u].w) ? _758 : (isnan(_758) ? cbSceneParam._m0[77u].w : min(_758, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2696 = _2694.x;
    float _2697 = _2694.y;
    float _2698 = _2694.z;
    float _2699 = _2694.w;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    if (_758 > cbSceneParam._m0[78u].w)
    {
        float _2754 = isnan(_758) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _758 : min(cbSceneParam._m0[80u].w, _758));
        float _2755 = _2754 / _758;
        float _2766 = _2755 * _809;
        float _2767 = _810 * _2755;
        float _2768 = (-0.0) - _2767;
        float _2770 = _2755 * _811;
        float _2772 = (cbSceneParam._m0[77u].w * _2768) / _2754;
        float _2773 = _2772 + cbSceneParam._m0[79u].w;
        float _2774 = cbSceneParam._m0[79u].w - _2767;
        float _2780 = sqrt(((_2766 * _2766) + (_2767 * _2767)) + (_2770 * _2770));
        float _2783 = (1.0 - (cbSceneParam._m0[77u].w / _2754)) * _2780;
        float _2788 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2790 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2967;
        if (abs((_2768 - _2772) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2967 = ((((_2773 > 0.0) ? exp2(_2788 * _2773) : (2.0 - exp2(_2790 * _2773))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2783;
        }
        else
        {
            float _2911 = 1.0 / cbSceneParam._m0[80u].x;
            float _2912 = isnan(_2774) ? _2773 : (isnan(_2773) ? _2774 : max(_2773, _2774));
            float _2913 = isnan(_2774) ? _2773 : (isnan(_2773) ? _2774 : min(_2773, _2774));
            float _2922 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : min(_2912, 0.0));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            _2967 = ((abs(_2780 / _2768) * cbSceneParam._m0[80u].y) * ((((_2922 - _2923) * 2.0) - ((exp2(_2788 * (isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0)))) - exp2(_2788 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0))))) * _2911)) - ((exp2(_2790 * _2922) - exp2(_2790 * _2923)) * _2911))) + (_2783 * cbSceneParam._m0[80u].z);
        }
        vec4 _2969 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, 1.0), 0.0);
        float _2978 = exp2((_2967 * (-1.44269502162933349609375)) * (1.0 - _2969.w));
        float _2979 = log2(_2978);
        float _2995 = log2(_2699);
        _2792 = (exp2(_2995 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2979 * cbSceneParam._m0[78u].x)) * _2969.x) / cbSceneParam._m0[78u].x)) + _2696;
        _2794 = (exp2(_2995 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2979 * cbSceneParam._m0[78u].y)) * _2969.y) / cbSceneParam._m0[78u].y)) + _2697;
        _2796 = (exp2(_2995 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2979 * cbSceneParam._m0[78u].z)) * _2969.z) / cbSceneParam._m0[78u].z)) + _2698;
        _2798 = _2978 * _2699;
    }
    else
    {
        _2792 = _2696;
        _2794 = _2697;
        _2796 = _2698;
        _2798 = _2699;
    }
    bool _3005;
    vec4 _2808;
    vec4 _2830;
    float _2832;
    float _2836;
    float _2837;
    float _2838;
    float _2839;
    bool _2849;
    for (;;)
    {
        _2808 = cbMatDynParam._m0[0u];
        float _2810 = roundEven(_2808.y);
        bool _2811 = _2810 == 3.0;
        float _2812 = log2(_2798);
        float _2819 = exp2(_2812 * cbSceneParam._m0[78u].x) * _2668;
        float _2820 = exp2(_2812 * cbSceneParam._m0[78u].y) * _2669;
        float _2821 = exp2(_2812 * cbSceneParam._m0[78u].z) * _2670;
        float _2828 = _825 + (-0.5);
        _2830 = cbMtdParam._m0[1u];
        _2832 = _2830.y * _2828;
        float _2835 = (_2810 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2836 = _2835 * (_2811 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2792)));
        _2837 = _2835 * (_2811 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2794)));
        _2838 = _2835 * (_2811 ? _2821 : (_2821 + (cbSceneParam._m0[72u].w * _2796)));
        _2839 = _2828 * 0.999000012874603271484375;
        _2849 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2849)
        {
            if ((cbInstanceData._m0[_266 + 7u].x + _2839) < 0.5)
            {
                _3005 = true;
                break;
            }
        }
        uint _2946 = _874 + uint(_2808.w);
        if ((cbInstanceData._m0[_2946].w < 1.0) && ((cbInstanceData._m0[_2946].w + _2839) < 0.5))
        {
            _3005 = true;
            break;
        }
        if ((_2832 + 1.0) < _2830.x)
        {
            _3005 = true;
            break;
        }
        _3005 = false;
        break;
    }
    float _3210;
    if (_3005)
    {
        discard_state = true;
        _3210 = 0.0;
    }
    else
    {
        _3210 = cbInstanceData._m0[_2671].w;
    }
    SV_Target.x = _2836;
    SV_Target.y = _2837;
    SV_Target.z = _2838;
    SV_Target.w = _3210;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2671].w;
    discard_exit();
}


