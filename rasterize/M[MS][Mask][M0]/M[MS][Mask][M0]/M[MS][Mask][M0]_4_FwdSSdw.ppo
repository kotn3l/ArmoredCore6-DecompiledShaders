#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1144;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3476 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3487 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3498 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _419 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _421 = _419.x;
    float _433 = dot(vec4(_421, _419.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _450 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_421 - _433) * cbMtdParam._m0[24u].z) + _433) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3509 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _461 = (_316.x * cbMtdParam._m0[9u].x) * ((_451 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347);
    float _462 = (_316.y * cbMtdParam._m0[9u].y) * ((_451 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348);
    float _463 = (_316.z * cbMtdParam._m0[9u].z) * ((_451 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349);
    float _467 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _461;
    float _470 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _462;
    float _473 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _463;
    float _481 = (((_461 - _467) * (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) + _467) * 4.55000019073486328125;
    float _483 = (((_462 - _470) * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) + _470) * 4.55000019073486328125;
    float _485 = (((_463 - _473) * (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) + _473) * 4.55000019073486328125;
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _542 = _540.x;
    float _543 = _540.y;
    float _544 = _540.z;
    float _553 = ((_523.z - _544) * _451) + _544;
    float _556 = ((((_523.x - _542) * _451) + _542) * 2.0) + (-1.0);
    float _557 = ((((_523.y - _543) * _451) + _543) * 2.0) + (-1.0);
    float _558 = dot(vec2(_556, _557), vec2(_556, _557));
    float _3520 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _563 = sqrt(1.0 - (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))));
    vec4 _585 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _597 = (_556 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_498.x * 2.0) + (-1.0)))) + (((_585.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _598 = (_557 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_498.y * 2.0) + (-1.0)))) + (((_585.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _603 = (((_498.z - _553) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _553;
    float _607 = ((_585.z - _603) * cbMtdParam._m0[19u].w) + _603;
    float _609 = cbMtdParam._m0[22u].x + _585.w;
    float _612 = fma(_563, _226 * NORMAL.x, fma(_598, _233 * TANGENT.x, (_219 * _211) * _597));
    float _615 = fma(_563, _226 * NORMAL.y, fma(_598, _233 * TANGENT.y, (_219 * _212) * _597));
    float _618 = fma(_563, _226 * NORMAL.z, fma(_598, _233 * TANGENT.z, (_219 * _213) * _597));
    float _622 = inversesqrt(dot(vec3(_612, _615, _618), vec3(_612, _615, _618)));
    float _623 = _622 * _612;
    float _624 = _622 * _615;
    float _625 = _622 * _618;
    float _3531 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _626 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _3542 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _3553 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3564 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3575 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _644 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _695 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _685);
    float _696 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _685);
    float _697 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _685);
    float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
    float _702 = _695 * _701;
    float _703 = _696 * _701;
    float _704 = _697 * _701;
    float _710 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _711 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _729 = fma(_625, cbSceneParam._m0[5u].z, fma(_624, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _623));
    float _732 = fma(_625, cbSceneParam._m0[6u].z, fma(_624, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _623));
    float _735 = fma(_625, cbSceneParam._m0[7u].z, fma(_624, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _623));
    uint _749 = (_260 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _755 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) * cbInstanceData._m0[_749].x;
    float _756 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_749].y;
    float _757 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_749].z;
    float _3586 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _3608 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    vec4 _769 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _710, cbSceneParam._m0[86u].y * _711));
    float _773 = ((isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * TEXCOORD_5.w) * _769.x;
    float _774 = dot(vec3(_623, _624, _625), vec3(_702, _703, _704));
    float _777 = _774 * 2.0;
    float _781 = (_777 * _623) - _702;
    float _782 = (_777 * _624) - _703;
    float _783 = (_777 * _625) - _704;
    float _787 = abs(dot(vec3(_702, _703, _704), vec3(_623, _624, _625)));
    float _3619 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _789 = sqrt(_626);
    float _802 = exp2((_789 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_789 * 3.0));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1143;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _868 = fma(_842, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _834));
        float _872 = fma(_842, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _834));
        float _876 = fma(_842, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _834));
        float _901 = _834 + _623;
        float _902 = _838 + _624;
        float _903 = _842 + _625;
        float _913 = fma(_903, cbModelParam._m0[26u].z, fma(_902, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _901)) - _868;
        float _914 = fma(_903, cbModelParam._m0[27u].z, fma(_902, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _901)) - _872;
        float _915 = fma(_903, cbModelParam._m0[28u].z, fma(_902, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _901)) - _876;
        float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
        float _932 = ((_919 * _913) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_868 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _933 = ((_919 * _914) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_872 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _934 = ((_919 * _915) / cbModelParam._m0[34u].z) + ((((((_876 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        float _971 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_937.x + (-0.5));
        float _973 = _971 * (_937.y + (-0.5));
        float _974 = _971 * (_937.z + (-0.5));
        float _981 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_944.x + (-0.5));
        float _983 = _981 * (_944.y + (-0.5));
        float _984 = _981 * (_944.z + (-0.5));
        float _991 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_951.x + (-0.5));
        float _993 = _991 * (_951.y + (-0.5));
        float _994 = _991 * (_951.z + (-0.5));
        float _1001 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_958.x + (-0.5));
        float _1003 = _1001 * (_958.y + (-0.5));
        float _1004 = _1001 * (_958.z + (-0.5));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = _972 * 0.5;
        float _1009 = _982 * 0.5;
        float _1010 = _992 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1025 = (dot(vec3(_623, _624, _625), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1035 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3667 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1037 + 1.0))) + _1042) * _1005;
        float _1052 = _973 * 0.5;
        float _1053 = _983 * 0.5;
        float _1054 = _993 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_623, _624, _625), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3678 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3689 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3700 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1079 + 1.0))) + _1084) * _1006;
        float _1094 = _974 * 0.5;
        float _1095 = _984 * 0.5;
        float _1096 = _994 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_623, _624, _625), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3733 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1121 + 1.0))) + _1126) * _1007;
        _1143 = _974;
        _1145 = _973;
        _1146 = _972;
        _1147 = _984;
        _1148 = _983;
        _1149 = _982;
        _1150 = _994;
        _1151 = _993;
        _1152 = _992;
        _1153 = _1007;
        _1154 = _1006;
        _1155 = _1005;
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
    }
    else
    {
        _1143 = _1144;
        _1145 = _1144;
        _1146 = _1144;
        _1147 = _1144;
        _1148 = _1144;
        _1149 = _1144;
        _1150 = _1144;
        _1151 = _1144;
        _1152 = _1144;
        _1153 = _1144;
        _1154 = _1144;
        _1155 = _1144;
        _1156 = 0.0;
        _1157 = 0.0;
        _1158 = 0.0;
    }
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1183 = fma(_842, cbModelParam._m0[30u].z, fma(_838, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _834));
        float _1187 = fma(_842, cbModelParam._m0[31u].z, fma(_838, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _834));
        float _1191 = fma(_842, cbModelParam._m0[32u].z, fma(_838, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _834));
        float _1214 = _834 + _623;
        float _1215 = _838 + _624;
        float _1216 = _842 + _625;
        float _1226 = fma(_1216, cbModelParam._m0[30u].z, fma(_1215, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1214)) - _1183;
        float _1227 = fma(_1216, cbModelParam._m0[31u].z, fma(_1215, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1214)) - _1187;
        float _1228 = fma(_1216, cbModelParam._m0[32u].z, fma(_1215, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1214)) - _1191;
        float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
        float _1245 = ((_1232 * _1226) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1183 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1232 * _1227) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1187 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1232 * _1228) / cbModelParam._m0[35u].z) + ((((((_1191 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        float _1282 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1249.x + (-0.5));
        float _1284 = _1282 * (_1249.y + (-0.5));
        float _1285 = _1282 * (_1249.z + (-0.5));
        float _1292 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1256.x + (-0.5));
        float _1294 = _1292 * (_1256.y + (-0.5));
        float _1295 = _1292 * (_1256.z + (-0.5));
        float _1302 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1263.x + (-0.5));
        float _1304 = _1302 * (_1263.y + (-0.5));
        float _1305 = _1302 * (_1263.z + (-0.5));
        float _1312 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1270.x + (-0.5));
        float _1314 = _1312 * (_1270.y + (-0.5));
        float _1315 = _1312 * (_1270.z + (-0.5));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = _1283 * 0.5;
        float _1320 = _1293 * 0.5;
        float _1321 = _1303 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_623, _624, _625), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3796 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1346 + 1.0))) + _1351) * _1316;
        float _1361 = _1284 * 0.5;
        float _1362 = _1294 * 0.5;
        float _1363 = _1304 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_623, _624, _625), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3829 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1388 + 1.0))) + _1393) * _1317;
        float _1403 = _1285 * 0.5;
        float _1404 = _1295 * 0.5;
        float _1405 = _1305 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_623, _624, _625), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3862 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1430 + 1.0))) + _1435) * _1318;
        _1452 = _1285;
        _1453 = _1284;
        _1454 = _1283;
        _1455 = _1295;
        _1456 = _1294;
        _1457 = _1293;
        _1458 = _1305;
        _1459 = _1304;
        _1460 = _1303;
        _1461 = _1318;
        _1462 = _1317;
        _1463 = _1316;
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
    }
    else
    {
        _1452 = _1144;
        _1453 = _1144;
        _1454 = _1144;
        _1455 = _1144;
        _1456 = _1144;
        _1457 = _1144;
        _1458 = _1144;
        _1459 = _1144;
        _1460 = _1144;
        _1461 = _1144;
        _1462 = _1144;
        _1463 = _1144;
        _1464 = 0.0;
        _1465 = 0.0;
        _1466 = 0.0;
    }
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1156)) + _1156;
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1157)) + _1157;
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1158)) + _1158;
    float _1499 = fma(_1478, cbSceneParam._m0[89u].z, fma(_1477, cbSceneParam._m0[89u].y, _1476 * cbSceneParam._m0[89u].x));
    float _1502 = fma(_1478, cbSceneParam._m0[90u].z, fma(_1477, cbSceneParam._m0[90u].y, _1476 * cbSceneParam._m0[90u].x));
    float _1505 = fma(_1478, cbSceneParam._m0[91u].z, fma(_1477, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1476));
    float _1520 = _781 * 0.5;
    float _1521 = _782 * 0.5;
    float _1522 = _783 * 0.5;
    float _1523 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1526 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1529 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1563;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1536 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1143, _1147, _1150, _1153));
        float _1540 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1145, _1148, _1151, _1154));
        float _1544 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1146, _1149, _1152, _1155));
        float _1551 = dot(vec4(cbModelParam._m0[39u]), vec4(_1520, _1521, _1522, 1.0));
        _1563 = dot(vec3(isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1551) ? 0.0 : (isnan(0.0) ? _1551 : max(0.0, _1551))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1563 = 1.0;
    }
    float _1574;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1565 = dot(vec4(cbModelParam._m0[40u]), vec4(_1520, _1521, _1522, 1.0));
        _1574 = dot(vec3(isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1565) ? 0.0 : (isnan(0.0) ? _1565 : max(0.0, _1565))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1574 = 1.0;
    }
    float _1578 = (_1574 * cbModelParam._m0[1u].x) + (_1563 * (1.0 - cbModelParam._m0[1u].x));
    float _1588 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _626);
    float _1589 = isnan(_1588) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1588 : min(cbModelParam._m0[25u].z, _1588));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1638 = fma(_842, cbModelParam._m0[13u].z, fma(_838, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _834)) + cbModelParam._m0[13u].w;
        float _1642 = fma(_842, cbModelParam._m0[14u].z, fma(_838, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _834)) + cbModelParam._m0[14u].w;
        float _1646 = fma(_842, cbModelParam._m0[15u].z, fma(_838, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _834)) + cbModelParam._m0[15u].w;
        float _1649 = fma(_783, cbModelParam._m0[13u].z, fma(_782, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781));
        float _1652 = fma(_783, cbModelParam._m0[14u].z, fma(_782, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781));
        float _1655 = fma(_783, cbModelParam._m0[15u].z, fma(_782, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781));
        float _1683;
        if (_1649 > 0.0)
        {
            _1683 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1683 = frontier_phi_14_12_ladder;
        }
        float _1906;
        if (_1652 > 0.0)
        {
            _1906 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1906 = frontier_phi_23_19_ladder;
        }
        float _2152;
        if (_1655 > 0.0)
        {
            _2152 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2152 = frontier_phi_35_30_ladder;
        }
        float _2154 = isnan(_1906) ? _1683 : (isnan(_1683) ? _1906 : min(_1683, _1906));
        float _2155 = isnan(_2152) ? _2154 : (isnan(_2154) ? _2152 : min(_2154, _2152));
        float _2159 = (_2155 * _1649) + _1638;
        float _2160 = (_2155 * _1652) + _1642;
        float _2161 = (_2155 * _1655) + _1646;
        float _2162 = _2155 * 9.9999997473787516355514526367188e-05;
        float _2164 = (-1.0) - _2162;
        float _2166 = _2162 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2161 > _2166) || ((_2161 < _2164) || ((_2160 > _2166) || ((_2160 < _2164) || ((_2159 < _2164) || (_2159 > _2166))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2161, cbModelParam._m0[9u].z, fma(_2160, cbModelParam._m0[9u].y, _2159 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2161, cbModelParam._m0[10u].z, fma(_2160, cbModelParam._m0[10u].y, _2159 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2161, cbModelParam._m0[11u].z, fma(_2160, cbModelParam._m0[11u].y, _2159 * cbModelParam._m0[11u].x))), _1589);
            frontier_phi_13_35_ladder = _2285.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2285.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2285.x * cbModelParam._m0[1u].y;
        }
        _1671 = frontier_phi_13_35_ladder_2;
        _1673 = frontier_phi_13_35_ladder_1;
        _1675 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_781, _782, _783), _1589);
        _1671 = _1659.x * cbModelParam._m0[1u].y;
        _1673 = _1659.y * cbModelParam._m0[1u].y;
        _1675 = _1659.z * cbModelParam._m0[1u].y;
    }
    float _1679 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _626);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1679 : min(cbModelParam._m0[25u].w, _1679));
    float _1771;
    float _1773;
    float _1775;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1735 = fma(_842, cbModelParam._m0[21u].z, fma(_838, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _834)) + cbModelParam._m0[21u].w;
        float _1739 = fma(_842, cbModelParam._m0[22u].z, fma(_838, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _834)) + cbModelParam._m0[22u].w;
        float _1743 = fma(_842, cbModelParam._m0[23u].z, fma(_838, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _834)) + cbModelParam._m0[23u].w;
        float _1746 = fma(_783, cbModelParam._m0[21u].z, fma(_782, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781));
        float _1749 = fma(_783, cbModelParam._m0[22u].z, fma(_782, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781));
        float _1752 = fma(_783, cbModelParam._m0[23u].z, fma(_782, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781));
        float _1911;
        if (_1746 > 0.0)
        {
            _1911 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1911 = frontier_phi_25_21_ladder;
        }
        float _2179;
        if (_1749 > 0.0)
        {
            _2179 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2179 = frontier_phi_37_32_ladder;
        }
        float _2384;
        if (_1752 > 0.0)
        {
            _2384 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2384 = frontier_phi_46_43_ladder;
        }
        float _2386 = isnan(_2179) ? _1911 : (isnan(_1911) ? _2179 : min(_1911, _2179));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1746) + _1735;
        float _2392 = (_2387 * _1749) + _1739;
        float _2393 = (_2387 * _1752) + _1743;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2394;
        float _2397 = _2394 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2393 > _2397) || ((_2393 < _2395) || ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 < _2395) || (_2391 > _2397))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2393, cbModelParam._m0[17u].z, fma(_2392, cbModelParam._m0[17u].y, _2391 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2393, cbModelParam._m0[18u].z, fma(_2392, cbModelParam._m0[18u].y, _2391 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2393, cbModelParam._m0[19u].z, fma(_2392, cbModelParam._m0[19u].y, _2391 * cbModelParam._m0[19u].x))), _1680);
            frontier_phi_22_46_ladder = _2592.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2592.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2592.x * cbModelParam._m0[1u].z;
        }
        _1771 = frontier_phi_22_46_ladder_2;
        _1773 = frontier_phi_22_46_ladder_1;
        _1775 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_781, _782, _783), _1680);
        _1771 = _1755.x * cbModelParam._m0[1u].z;
        _1773 = _1755.y * cbModelParam._m0[1u].z;
        _1775 = _1755.z * cbModelParam._m0[1u].z;
    }
    float _1787 = ((((1.0 - _802) * ((_789 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_802 * _789)) * _773;
    float _1788 = _1787 * ((cbModelParam._m0[1u].w * (_1771 - _1671)) + _1671);
    float _1789 = _1787 * ((cbModelParam._m0[1u].w * (_1773 - _1673)) + _1673);
    float _1790 = _1787 * ((cbModelParam._m0[1u].w * (_1775 - _1675)) + _1675);
    float _1793 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1796 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1799 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, _1788 * cbSceneParam._m0[91u].x));
    vec4 _1807 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_710, _711));
    float _1809 = _1807.w;
    float _1821 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1809);
    float _1822 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1809);
    float _1823 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1809);
    uvec4 _1827 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1829 = _1827.x * 14u;
    uint _1830 = _1829 + 13u;
    float _1837 = _773 + (-1.0);
    float _1842 = (cbLight._m0[_1830].x * _1837) + 1.0;
    float _1843 = (cbLight._m0[_1830].y * _1837) + 1.0;
    float _1844 = (cbLight._m0[_1830].z * _1837) + 1.0;
    float _1845 = (cbLight._m0[_1830].w * _1837) + 1.0;
    uint _1846 = _1829 + 5u;
    float _1852 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1856 = _1829 + 4u;
    float _1865 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
    uint _1869 = _1829 | 1u;
    float _1880 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_623, _624, _625));
    float _1883 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_623, _624, _625));
    float _3998 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _4009 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1888 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 0.3183098733425140380859375;
    float _1890 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * 0.3183098733425140380859375;
    float _1897 = ((cbLight._m0[_1846].x * _1852) * _1890) + (((cbLight._m0[_1856].x * _1821) * _1865) * _1888);
    float _1898 = ((_1852 * cbLight._m0[_1846].y) * _1890) + (((cbLight._m0[_1856].y * _1822) * _1865) * _1888);
    float _1899 = ((_1852 * cbLight._m0[_1846].z) * _1890) + (((cbLight._m0[_1856].z * _1823) * _1865) * _1888);
    uvec4 _1903 = floatBitsToUint(cbLight._m0[_1829 + 12u]);
    bool _1905 = _1903.x == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1905)
    {
        _1916 = _1897;
        _1918 = _1898;
        _1920 = _1899;
    }
    else
    {
        uint _1924 = _1829 + 6u;
        float _1940 = (dot(vec3(cbLight._m0[_1829 + 2u].xyz), vec3(_623, _624, _625)) * 0.5) + 0.5;
        float _1941 = _1940 * _1940;
        float _4020 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1943 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _1916 = (((cbLight._m0[_1924].x * 0.3183098733425140380859375) * _1942) * _1943) + _1897;
        _1918 = (((cbLight._m0[_1924].y * 0.3183098733425140380859375) * _1942) * _1943) + _1898;
        _1920 = (((cbLight._m0[_1924].z * 0.3183098733425140380859375) * _1942) * _1943) + _1899;
    }
    bool _1923 = _1903.y == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1923)
    {
        _1961 = _1916;
        _1963 = _1918;
        _1965 = _1920;
    }
    else
    {
        uint _2123 = _1829 + 7u;
        float _2139 = (dot(vec3(cbLight._m0[_1829 + 3u].xyz), vec3(_623, _624, _625)) * 0.5) + 0.5;
        float _2140 = _2139 * _2139;
        float _4036 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2141 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2142 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _1961 = (((cbLight._m0[_2123].x * 0.3183098733425140380859375) * _2141) * _2142) + _1916;
        _1963 = (((cbLight._m0[_2123].y * 0.3183098733425140380859375) * _2141) * _2142) + _1918;
        _1965 = (((cbLight._m0[_2123].z * 0.3183098733425140380859375) * _2141) * _2142) + _1920;
    }
    uint _1968 = _1829 + 8u;
    float _1981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _626) * 0.949999988079071044921875);
    float _1982 = _1981 * _1981;
    float _1983 = cbLight._m0[_1829].x + _702;
    float _1984 = cbLight._m0[_1829].y + _703;
    float _1985 = cbLight._m0[_1829].z + _704;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1990 = _1989 * _1983;
    float _1991 = _1989 * _1984;
    float _1992 = _1989 * _1985;
    float _1993 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_1829].xyz));
    float _4052 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _1997 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _1998 = dot(vec3(_623, _624, _625), vec3(_1990, _1991, _1992));
    float _4074 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_1990, _1991, _1992));
    float _4085 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2006 = _1982 * _1982;
    float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
    float _2021 = (exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2022 = 1.0 - _1982;
    float _2033 = (0.5 / (((_1997 * ((_1996 * _2022) + _1982)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2022) + _1982) * _1996))) * _1996;
    float _4096 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
    uint _2049 = _1829 + 9u;
    float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1869].w)) * _626) * 0.949999988079071044921875);
    float _2061 = _2060 * _2060;
    float _2062 = cbLight._m0[_1869].x + _702;
    float _2063 = cbLight._m0[_1869].y + _703;
    float _2064 = cbLight._m0[_1869].z + _704;
    float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
    float _2069 = _2068 * _2062;
    float _2070 = _2068 * _2063;
    float _2071 = _2068 * _2064;
    float _2072 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_1869].xyz));
    float _4107 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _2076 = dot(vec3(_623, _624, _625), vec3(_2069, _2070, _2071));
    float _4118 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_2069, _2070, _2071));
    float _4129 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2061 * _2061;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2097 = (exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2098 = 1.0 - _2061;
    float _2108 = (0.5 / (((_1997 * ((_2075 * _2098) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2098) + _2061) * _2075))) * _2075;
    float _4140 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2110 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    float _2120 = (((_2097 * cbLight._m0[_2049].x) * _2110) * _1852) + ((((cbLight._m0[_1968].x * _1821) * _2021) * _2035) * _1865);
    float _2121 = (((_2097 * cbLight._m0[_2049].y) * _2110) * _1852) + ((((cbLight._m0[_1968].y * _1822) * _2021) * _2035) * _1865);
    float _2122 = (((_2097 * cbLight._m0[_2049].z) * _2110) * _1852) + ((((cbLight._m0[_1968].z * _1823) * _2021) * _2035) * _1865);
    float _2184;
    float _2186;
    float _2188;
    if (_1905)
    {
        _2184 = _2120;
        _2186 = _2121;
        _2188 = _2122;
    }
    else
    {
        uint _2190 = _1829 + 2u;
        uint _2194 = _1829 + 10u;
        float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _626) * 0.949999988079071044921875);
        float _2209 = _2208 * _2208;
        float _2210 = cbLight._m0[_2190].x + _702;
        float _2211 = cbLight._m0[_2190].y + _703;
        float _2212 = cbLight._m0[_2190].z + _704;
        float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
        float _2217 = _2216 * _2210;
        float _2218 = _2216 * _2211;
        float _2219 = _2216 * _2212;
        float _2220 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_2190].xyz));
        float _4151 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2223 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2224 = dot(vec3(_623, _624, _625), vec3(_2217, _2218, _2219));
        float _4162 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2228 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2217, _2218, _2219));
        float _4173 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2232 = _2209 * _2209;
        float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
        float _2245 = (exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2246 = 1.0 - _2209;
        float _2256 = (0.5 / (((_1997 * ((_2223 * _2246) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2246) + _2209) * _2223))) * _2223;
        float _4184 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2258 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
        float _2259 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _2184 = (((_2245 * cbLight._m0[_2194].x) * _2258) * _2259) + _2120;
        _2186 = (((_2245 * cbLight._m0[_2194].y) * _2258) * _2259) + _2121;
        _2188 = (((_2245 * cbLight._m0[_2194].z) * _2258) * _2259) + _2122;
    }
    float _2294;
    float _2296;
    float _2298;
    if (_1923)
    {
        _2294 = _2184;
        _2296 = _2186;
        _2298 = _2188;
    }
    else
    {
        uint _2305 = _1829 + 3u;
        uint _2309 = _1829 + 11u;
        float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _626) * 0.949999988079071044921875);
        float _2324 = _2323 * _2323;
        float _2325 = cbLight._m0[_2305].x + _702;
        float _2326 = cbLight._m0[_2305].y + _703;
        float _2327 = cbLight._m0[_2305].z + _704;
        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
        float _2332 = _2331 * _2325;
        float _2333 = _2331 * _2326;
        float _2334 = _2331 * _2327;
        float _2335 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_2305].xyz));
        float _4200 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2339 = dot(vec3(_623, _624, _625), vec3(_2332, _2333, _2334));
        float _4211 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2343 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2332, _2333, _2334));
        float _4222 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2347 = _2324 * _2324;
        float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
        float _2360 = (exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2361 = 1.0 - _2324;
        float _2371 = (0.5 / (((_1997 * ((_2338 * _2361) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2361) + _2324) * _2338))) * _2338;
        float _4233 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2373 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
        float _2374 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2294 = (((_2360 * cbLight._m0[_2309].x) * _2373) * _2374) + _2184;
        _2296 = (((_2360 * cbLight._m0[_2309].y) * _2373) * _2374) + _2186;
        _2298 = (((_2360 * cbLight._m0[_2309].z) * _2373) * _2374) + _2188;
    }
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    if (_1827.y == 0u)
    {
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2449;
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2449;
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2449;
        uvec4 _2464 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2465 = _2464.x;
        uint _2476 = uint((float(_2464.y) * floor(float(uint(cbSceneParam._m0[85u].y * _711) / _2465))) + floor(float(uint(cbSceneParam._m0[85u].x * _710) / _2465)));
        float _2486 = (log2(_2452 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2487 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        uint _2490 = uint(isnan(14.0) ? _2487 : (isnan(_2487) ? 14.0 : min(_2487, 14.0)));
        uvec4 _2495 = texelFetch(g_lightClusterGridBuffer, int(((_2490 << 2u) + (_2476 << 6u)) >> 2u));
        uint _2496 = _2495.x;
        uint _2497 = _2464.z;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        if (((((1u << ((_2497 >> 4u) & 15u)) + 4294967295u) & _2496) == 0u) || ((_2497 & 240u) == 0u))
        {
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
        }
        else
        {
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            uint _2748 = 0u;
            uint _2757;
            bool _2758;
            for (;;)
            {
                _2757 = texelFetch(g_lightClassification, int((((_2490 << 5u) + (_2476 << 9u)) + (_2748 << 2u)) >> 2u)).x;
                _2758 = _2757 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2758)
                {
                    frontier_phi_61_pred = _2742;
                    frontier_phi_61_pred_1 = _2747;
                    frontier_phi_61_pred_2 = _2746;
                    frontier_phi_61_pred_3 = _2745;
                    frontier_phi_61_pred_4 = _2744;
                    frontier_phi_61_pred_5 = _2743;
                }
                else
                {
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    uint _2872;
                    _2866 = _2742;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2757;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    for (;;)
                    {
                        uint _2876 = uint(findLSB(_2872)) + (_2748 << 5u);
                        uint _2873 = (_2872 + 4294967295u) & _2872;
                        uint _2878 = _2876 * 48u;
                        vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 3u)).x));
                        uint _2898 = (_2876 * 48u) + 4u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 3u)).x));
                        uint _2917 = (_2876 * 48u) + 8u;
                        vec3 _2928 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x));
                        float _2932 = _2892.x - _2450;
                        float _2933 = _2892.y - _2451;
                        float _2934 = _2892.z - _2452;
                        float _2935 = dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934));
                        float _2938 = inversesqrt(_2935);
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2942 = dot(vec3(_729, _732, _735), vec3(_2939, _2940, _2941));
                        float _2947 = 1.0 - (_2935 * _2892.w);
                        float _4259 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2948 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2949 = sqrt(_2935) * _2911.w;
                        float _2952 = 1.39999997615814208984375 / (_2949 + 1.39999997615814208984375);
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2942) + _2953;
                        float _2959 = _2949 * _2949;
                        float _2963 = ((isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))) * _2948) / ((_2959 * 0.699999988079071044921875) + 1.0);
                        float _2967 = (-0.0) - _2450;
                        float _2968 = (-0.0) - _2451;
                        float _2969 = (-0.0) - _2452;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2984 = exp2(log2(1.0 / ((_2959 * 3.5) + 5.0)) * 0.25);
                        float _2985 = 1.0 - _789;
                        float _2992 = sqrt(1.0 - ((1.0 - (_2985 * _2985)) * (1.0 - (_2984 * _2984))));
                        float _2993 = _2992 * _2992;
                        float _2994 = _2993 * _2993;
                        float _2995 = _2974 + _2939;
                        float _2996 = _2975 + _2940;
                        float _2997 = _2976 + _2941;
                        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                        float _3005 = dot(vec3(_729, _732, _735), vec3(_2974, _2975, _2976));
                        float _4275 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3008 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                        float _3009 = dot(vec3(_729, _732, _735), vec3(_3001 * _2995, _3001 * _2996, _3001 * _2997));
                        float _4286 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3012 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                        float _3016 = ((_3012 * _3012) * (_2994 + (-1.0))) + 1.0;
                        float _3017 = _2952 * _2993;
                        float _3018 = _3017 * _3017;
                        float _3021 = ((1.0 - _3018) * _2942) + _3018;
                        float _4297 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3022 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                        float _3023 = 1.0 - _2993;
                        float _3033 = (0.5 / (((_3022 * ((_3008 * _3023) + _2993)) + 9.9999999392252902907785028219223e-09) + (((_3022 * _3023) + _2993) * _3008))) * _3022;
                        float _4308 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3044 = (((_2994 * 3.1415927410125732421875) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) / ((_3016 * _3016) * ((_2959 * 2.1991131305694580078125) + 3.141590118408203125))) * _2948;
                        _2801 = (_2963 * _2911.x) + _2869;
                        _2802 = (_2963 * _2911.y) + _2870;
                        _2803 = (_2963 * _2911.z) + _2871;
                        _2798 = (_3044 * _2928.x) + _2866;
                        _2799 = (_3044 * _2928.y) + _2867;
                        _2800 = (_3044 * _2928.z) + _2868;
                        if (_2873 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2873;
                        }
                    }
                    frontier_phi_61_pred = _2798;
                    frontier_phi_61_pred_1 = _2803;
                    frontier_phi_61_pred_2 = _2802;
                    frontier_phi_61_pred_3 = _2801;
                    frontier_phi_61_pred_4 = _2800;
                    frontier_phi_61_pred_5 = _2799;
                }
                _2598 = frontier_phi_61_pred;
                _2608 = frontier_phi_61_pred_1;
                _2606 = frontier_phi_61_pred_2;
                _2604 = frontier_phi_61_pred_3;
                _2602 = frontier_phi_61_pred_4;
                _2600 = frontier_phi_61_pred_5;
                uint _2749 = _2748 + 1u;
                if (_2749 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2742 = _2598;
                    _2743 = _2600;
                    _2744 = _2602;
                    _2745 = _2604;
                    _2746 = _2606;
                    _2747 = _2608;
                    _2748 = _2749;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
        }
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.z;
        uint _2614 = (_2612 >> 8u) & 15u;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        if (((4294967295u << _2614) & _2496) == 0u)
        {
            _2710 = _2597;
            _2712 = _2599;
            _2714 = _2601;
            _2716 = _2603;
            _2718 = _2605;
            _2720 = _2607;
        }
        else
        {
            float _2735 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
            float _2736 = _2735 * _2450;
            float _2737 = _2735 * _2451;
            float _2738 = _2735 * _2452;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2614 < ((_2612 >> 12u) & 15u))
            {
                float _2711;
                float _2713;
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2849 = _2597;
                float _2850 = _2599;
                float _2851 = _2601;
                float _2852 = _2603;
                float _2853 = _2605;
                float _2854 = _2607;
                uint _2855 = _2614;
                uint _2864;
                bool _2865;
                for (;;)
                {
                    _2864 = texelFetch(g_lightClassification, int((((_2490 << 5u) + (_2476 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                    _2865 = _2864 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2865)
                    {
                        frontier_phi_67_pred = _2852;
                        frontier_phi_67_pred_1 = _2853;
                        frontier_phi_67_pred_2 = _2854;
                        frontier_phi_67_pred_3 = _2851;
                        frontier_phi_67_pred_4 = _2850;
                        frontier_phi_67_pred_5 = _2849;
                    }
                    else
                    {
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3062 = _2849;
                        float _3063 = _2850;
                        float _3064 = _2851;
                        float _3065 = _2852;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        uint _3068 = _2864;
                        uint _3069;
                        vec4 _3094;
                        float _3095;
                        vec4 _3110;
                        vec3 _3122;
                        vec4 _3137;
                        vec4 _3152;
                        float _3198;
                        bool _3199;
                        for (;;)
                        {
                            uint _3079 = ((_2855 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3068));
                            _3069 = (_3068 + 4294967295u) & _3068;
                            uint _3081 = _3079 * 40u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            _3095 = _3094.w;
                            uint _3097 = (_3079 * 40u) + 4u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3112 = (_3079 * 40u) + 8u;
                            _3122 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x));
                            uint _3124 = (_3079 * 40u) + 16u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3079 * 40u) + 20u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3154 = (_3079 * 40u) + 24u;
                            vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3173 = (_3079 * 40u) + 28u;
                            vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            _3198 = fma(_2452, _3186.z, fma(_2451, _3186.y, _3186.x * _2450)) + _3186.w;
                            _3199 = !((fma(_2452, _3167.z, fma(_2451, _3167.y, _3167.x * _2450)) + _3167.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3199)
                            {
                                float _3226 = _3094.x - _2450;
                                float _3227 = _3094.y - _2451;
                                float _3228 = _3094.z - _2452;
                                float _3229 = dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228));
                                float _3232 = inversesqrt(_3229);
                                float _3233 = _3232 * _3226;
                                float _3234 = _3232 * _3227;
                                float _3235 = _3232 * _3228;
                                float _3239 = 1.0 - (_3229 / (_3095 * _3095));
                                float _4319 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3244 = sqrt(_3229) * _3110.w;
                                float _3246 = 1.39999997615814208984375 / (_3244 + 1.39999997615814208984375);
                                float _3247 = _3246 * _3246;
                                float _3250 = ((1.0 - _3247) * dot(vec3(_3233, _3234, _3235), vec3(_729, _732, _735))) + _3247;
                                float _3253 = _3244 * _3244;
                                float _3257 = (fma(_2452, _3137.z, fma(_2451, _3137.y, _3137.x * _2450)) + _3137.w) / _3198;
                                float _3258 = (fma(_2452, _3152.z, fma(_2451, _3152.y, _3152.x * _2450)) + _3152.w) / _3198;
                                float _3262 = 1.0 - dot(vec2(_3257, _3258), vec2(_3257, _3258));
                                float _4335 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3264 = _3263 * (((isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))) * _3240) / ((_3253 * 0.699999988079071044921875) + 1.0));
                                float _3276 = exp2(log2(1.0 / ((_3253 * 3.5) + 5.0)) * 0.25);
                                float _3277 = 1.0 - _789;
                                float _3284 = sqrt(1.0 - ((1.0 - (_3277 * _3277)) * (1.0 - (_3276 * _3276))));
                                float _3285 = _3284 * _3284;
                                float _3286 = _3285 * _3285;
                                float _3287 = _3233 - _2736;
                                float _3288 = _3234 - _2737;
                                float _3289 = _3235 - _2738;
                                float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                                float _3297 = dot(vec3(_729, _732, _735), vec3((-0.0) - _2736, (-0.0) - _2737, (-0.0) - _2738));
                                float _4346 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3300 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3301 = dot(vec3(_729, _732, _735), vec3(_3293 * _3287, _3293 * _3288, _3293 * _3289));
                                float _4357 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3304 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3308 = ((_3304 * _3304) * (_3286 + (-1.0))) + 1.0;
                                float _3309 = _3246 * _3285;
                                float _3310 = _3309 * _3309;
                                float _3316 = ((1.0 - _3310) * dot(vec3(_729, _732, _735), vec3(_3233, _3234, _3235))) + _3310;
                                float _4368 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3318 = 1.0 - _3285;
                                float _3328 = (0.5 / (((_3317 * ((_3300 * _3318) + _3285)) + 9.9999999392252902907785028219223e-09) + (((_3317 * _3318) + _3285) * _3300))) * _3317;
                                float _4379 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3338 = (_3263 * _3240) * (((_3286 * 3.1415927410125732421875) * (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) / ((_3308 * _3308) * ((_3253 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3338 * _3122.x;
                                frontier_phi_73_pred_1 = _3338 * _3122.y;
                                frontier_phi_73_pred_2 = _3264 * _3110.z;
                                frontier_phi_73_pred_3 = _3264 * _3110.y;
                                frontier_phi_73_pred_4 = _3264 * _3110.x;
                                frontier_phi_73_pred_5 = _3338 * _3122.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3342 = frontier_phi_73_pred;
                            _3343 = frontier_phi_73_pred_1;
                            _3347 = frontier_phi_73_pred_2;
                            _3346 = frontier_phi_73_pred_3;
                            _3345 = frontier_phi_73_pred_4;
                            _3344 = frontier_phi_73_pred_5;
                            _3052 = _3345 + _3065;
                            _3053 = _3346 + _3066;
                            _3054 = _3347 + _3067;
                            _3049 = _3342 + _3062;
                            _3050 = _3343 + _3063;
                            _3051 = _3344 + _3064;
                            if (_3069 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3069;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3052;
                        frontier_phi_67_pred_1 = _3053;
                        frontier_phi_67_pred_2 = _3054;
                        frontier_phi_67_pred_3 = _3051;
                        frontier_phi_67_pred_4 = _3050;
                        frontier_phi_67_pred_5 = _3049;
                    }
                    _2717 = frontier_phi_67_pred;
                    _2719 = frontier_phi_67_pred_1;
                    _2721 = frontier_phi_67_pred_2;
                    _2715 = frontier_phi_67_pred_3;
                    _2713 = frontier_phi_67_pred_4;
                    _2711 = frontier_phi_67_pred_5;
                    uint _2856 = _2855 + 1u;
                    if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2849 = _2711;
                        _2850 = _2713;
                        _2851 = _2715;
                        _2852 = _2717;
                        _2853 = _2719;
                        _2854 = _2721;
                        _2855 = _2856;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2719;
                frontier_phi_55_56_ladder_1 = _2721;
                frontier_phi_55_56_ladder_2 = _2717;
                frontier_phi_55_56_ladder_3 = _2715;
                frontier_phi_55_56_ladder_4 = _2713;
                frontier_phi_55_56_ladder_5 = _2711;
            }
            else
            {
                frontier_phi_55_56_ladder = _2605;
                frontier_phi_55_56_ladder_1 = _2607;
                frontier_phi_55_56_ladder_2 = _2603;
                frontier_phi_55_56_ladder_3 = _2601;
                frontier_phi_55_56_ladder_4 = _2599;
                frontier_phi_55_56_ladder_5 = _2597;
            }
            _2710 = frontier_phi_55_56_ladder_5;
            _2712 = frontier_phi_55_56_ladder_4;
            _2714 = frontier_phi_55_56_ladder_3;
            _2716 = frontier_phi_55_56_ladder_2;
            _2718 = frontier_phi_55_56_ladder;
            _2720 = frontier_phi_55_56_ladder_1;
        }
        float _2725 = isnan(1.0) ? _773 : (isnan(_773) ? 1.0 : min(_773, 1.0));
        _2509 = (_2725 * _2716) + _1961;
        _2511 = (_2725 * _2718) + _1963;
        _2513 = (_2725 * _2720) + _1965;
        _2515 = ((_2710 * 0.039999999105930328369140625) * _2725) + _2294;
        _2517 = ((_2712 * 0.039999999105930328369140625) * _2725) + _2296;
        _2519 = ((_2714 * 0.039999999105930328369140625) * _2725) + _2298;
    }
    else
    {
        _2509 = _1961;
        _2511 = _1963;
        _2513 = _1965;
        _2515 = _2294;
        _2517 = _2296;
        _2519 = _2298;
    }
    float _4395 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4406 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4417 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    uint _2539 = _260 + 6u;
    float _2547 = _710 / cbSceneParam._m0[86u].x;
    float _2548 = _711 / cbSceneParam._m0[86u].y;
    vec4 _2562 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, (log2((isnan(cbSceneParam._m0[77u].w) ? _644 : (isnan(_644) ? cbSceneParam._m0[77u].w : min(_644, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2564 = _2562.x;
    float _2565 = _2562.y;
    float _2566 = _2562.z;
    float _2567 = _2562.w;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    if (_644 > cbSceneParam._m0[78u].w)
    {
        float _2622 = isnan(_644) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _644 : min(cbSceneParam._m0[80u].w, _644));
        float _2623 = _2622 / _644;
        float _2634 = _2623 * _695;
        float _2635 = _696 * _2623;
        float _2636 = (-0.0) - _2635;
        float _2638 = _2623 * _697;
        float _2640 = (cbSceneParam._m0[77u].w * _2636) / _2622;
        float _2641 = _2640 + cbSceneParam._m0[79u].w;
        float _2642 = cbSceneParam._m0[79u].w - _2635;
        float _2648 = sqrt(((_2634 * _2634) + (_2635 * _2635)) + (_2638 * _2638));
        float _2651 = (1.0 - (cbSceneParam._m0[77u].w / _2622)) * _2648;
        float _2656 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2658 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2811;
        if (abs((_2636 - _2640) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2811 = ((((_2641 > 0.0) ? exp2(_2656 * _2641) : (2.0 - exp2(_2658 * _2641))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2651;
        }
        else
        {
            float _2771 = 1.0 / cbSceneParam._m0[80u].x;
            float _2772 = isnan(_2642) ? _2641 : (isnan(_2641) ? _2642 : max(_2641, _2642));
            float _2773 = isnan(_2642) ? _2641 : (isnan(_2641) ? _2642 : min(_2641, _2642));
            float _2782 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : min(_2772, 0.0));
            float _2783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : min(_2773, 0.0));
            _2811 = ((abs(_2648 / _2636) * cbSceneParam._m0[80u].y) * ((((_2782 - _2783) * 2.0) - ((exp2(_2656 * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0)))) - exp2(_2656 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))))) * _2771)) - ((exp2(_2658 * _2782) - exp2(_2658 * _2783)) * _2771))) + (_2651 * cbSceneParam._m0[80u].z);
        }
        vec4 _2813 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, 1.0), 0.0);
        float _2822 = exp2((_2811 * (-1.44269502162933349609375)) * (1.0 - _2813.w));
        float _2823 = log2(_2822);
        float _2839 = log2(_2567);
        _2660 = (exp2(_2839 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].x)) * _2813.x) / cbSceneParam._m0[78u].x)) + _2564;
        _2662 = (exp2(_2839 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].y)) * _2813.y) / cbSceneParam._m0[78u].y)) + _2565;
        _2664 = (exp2(_2839 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].z)) * _2813.z) / cbSceneParam._m0[78u].z)) + _2566;
        _2666 = _2822 * _2567;
    }
    else
    {
        _2660 = _2564;
        _2662 = _2565;
        _2664 = _2566;
        _2666 = _2567;
    }
    float _2678 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2679 = _2678 == 3.0;
    float _2680 = log2(_2666);
    float _2687 = exp2(_2680 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2509 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _773))) + ((_2515 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1578)) * cbPerFrame._m0[3u].x));
    float _2688 = exp2(_2680 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2511 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _773))) + ((_2517 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1578)) * cbPerFrame._m0[3u].x));
    float _2689 = exp2(_2680 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2513 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _773))) + ((_2519 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1578)) * cbPerFrame._m0[3u].x));
    float _2698 = (_2678 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2698 * (_2679 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2660)));
    SV_Target.y = _2698 * (_2679 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2662)));
    SV_Target.z = _2698 * (_2679 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2664)));
    SV_Target.w = cbInstanceData._m0[_2539].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2539].w;
}


