#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1575;
float _3932;
float _3933;
float _3934;
float _3935;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3944 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3955 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3966 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[24u].z) + _445) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3977 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _470 = (_463 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _471 = (_463 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _472 = (_463 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _511 = _509.x;
    float _521 = dot(vec4(_511, _509.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _535 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_511 - _521) * cbMtdParam._m0[24u].z) + _521) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3988 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _543 = (_536 * ((_489.x * cbMtdParam._m0[13u].x) - _470)) + _470;
    float _544 = (_536 * ((_489.y * cbMtdParam._m0[13u].y) - _471)) + _471;
    float _545 = (_536 * ((_489.z * cbMtdParam._m0[13u].z) - _472)) + _472;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _310) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _311) + cbTextureTilingScale._m0[24u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _582 = _580.x;
    float _592 = dot(vec4(_582, _580.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _604 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _393.z) * 2.0) - ((((_582 - _592) * cbMtdParam._m0[24u].z) + _592) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3999 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _612 = (_605 * ((_563.x * cbMtdParam._m0[14u].x) - _543)) + _543;
    float _613 = (_605 * ((_563.y * cbMtdParam._m0[14u].y) - _544)) + _544;
    float _614 = (_605 * ((_563.z * cbMtdParam._m0[14u].z) - _545)) + _545;
    float _618 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _612;
    float _621 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _613;
    float _624 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _614;
    float _631 = ((_612 - _618) * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) + _618;
    float _632 = ((_613 - _621) * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) + _621;
    float _633 = ((_614 - _624) * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) + _624;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _692 = _690.x;
    float _693 = _690.y;
    float _694 = _690.z;
    float _701 = ((_673.x - _692) * _463) + _692;
    float _702 = ((_673.y - _693) * _463) + _693;
    float _703 = ((_673.z - _694) * _463) + _694;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _726 = ((_715.x - _701) * _536) + _701;
    float _727 = ((_715.y - _702) * _536) + _702;
    float _728 = ((_715.z - _703) * _536) + _703;
    vec4 _740 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _310) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _311) + cbTextureTilingScale._m0[23u].w));
    float _753 = ((_740.z - _728) * _605) + _728;
    float _756 = ((((_740.x - _726) * _605) + _726) * 2.0) + (-1.0);
    float _757 = ((((_740.y - _727) * _605) + _727) * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _4010 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _763 = sqrt(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))));
    vec4 _777 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _802 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _804 = _802.x;
    float _805 = 1.0 - _804;
    float _811 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _814 = ((isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : min(_811, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _823 = (_814 - ((((((_804 - _805) * cbMtdParam._m0[24u].w) + _805) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _814))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4031 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _824 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _831 = (_824 * (cbMtdParam._m0[17u].x - _631)) + _631;
    float _832 = (_824 * (cbMtdParam._m0[17u].y - _632)) + _632;
    float _833 = (_824 * (cbMtdParam._m0[17u].z - _633)) + _633;
    vec4 _845 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _847 = _845.x;
    float _848 = 1.0 - _847;
    float _875 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_847 - _848) * cbMtdParam._m0[24u].y) + _848) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4042 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _876 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _884 = ((((cbMtdParam._m0[10u].x - _831) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _876) + _831;
    float _885 = ((((cbMtdParam._m0[10u].y - _832) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _876) + _832;
    float _886 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _833)) * _876) + _833;
    float _891 = (((_650.z - _753) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _753;
    float _895 = ((_777.z - _891) * cbMtdParam._m0[19u].w) + _891;
    vec4 _909 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _916 = (_909.x * 2.0) + (-1.0);
    float _917 = (_909.y * 2.0) + (-1.0);
    float _918 = dot(vec2(_916, _917), vec2(_916, _917));
    float _4053 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _926 = (_824 * (_909.z - _895)) + _895;
    float _929 = ((cbMtdParam._m0[23u].y - _926) * _876) + _926;
    vec4 _948 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _954 = (_948.x * 2.0) + (-1.0);
    float _955 = (_948.y * 2.0) + (-1.0);
    float _956 = dot(vec2(_954, _955), vec2(_954, _955));
    float _4064 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _970 = (_756 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_650.x * 2.0) + (-1.0)))) + (((_777.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _971 = (_757 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_650.y * 2.0) + (-1.0)))) + (((_777.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _983 = (((_916 - _970) + (cbMtdParam._m0[21u].x * _970)) * _824) + _970;
    float _984 = (((_917 - _971) + (cbMtdParam._m0[21u].x * _971)) * _824) + _971;
    float _985 = (_824 * (sqrt(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) - _763)) + _763;
    float _996 = (((_954 - _983) + (_983 * cbMtdParam._m0[22u].z)) * _876) + _983;
    float _997 = (((_955 - _984) + (_984 * cbMtdParam._m0[22u].z)) * _876) + _984;
    float _998 = ((sqrt(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) - _985) * _876) + _985;
    float _1000 = cbMtdParam._m0[22u].x + _777.w;
    float _1003 = fma(_998, _259 * NORMAL.x, fma(_997, _266 * TANGENT.x, (_252 * _244) * _996));
    float _1006 = fma(_998, _259 * NORMAL.y, fma(_997, _266 * TANGENT.y, (_252 * _245) * _996));
    float _1009 = fma(_998, _259 * NORMAL.z, fma(_997, _266 * TANGENT.z, (_252 * _246) * _996));
    float _1013 = inversesqrt(dot(vec3(_1003, _1006, _1009), vec3(_1003, _1006, _1009)));
    float _1014 = _1013 * _1003;
    float _1015 = _1013 * _1006;
    float _1016 = _1013 * _1009;
    float _4075 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _1017 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4097 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4108 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4119 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _1035 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1086 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1076);
    float _1087 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1076);
    float _1088 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1076);
    float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
    float _1093 = _1086 * _1092;
    float _1094 = _1087 * _1092;
    float _1095 = _1088 * _1092;
    vec4 _1100 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1102 = _1100.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1256 = sqrt(((_1086 * _1086) + (_1087 * _1087)) + (_1088 * _1088));
        float _1262 = (cbMatDynParam._m0[5u].x * _1256) + cbMatDynParam._m0[5u].y;
        float _4130 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1267 = (cbMatDynParam._m0[5u].z * _1256) + cbMatDynParam._m0[5u].w;
        float _4141 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) - _1263)) + _1263) < ((_1102 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1113 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1114 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1132 = fma(_1016, cbSceneParam._m0[5u].z, fma(_1015, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1014));
    float _1135 = fma(_1016, cbSceneParam._m0[6u].z, fma(_1015, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1014));
    float _1138 = fma(_1016, cbSceneParam._m0[7u].z, fma(_1015, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1014));
    uint _1151 = _291 + 9u;
    uint _1152 = _1151 + uint(cbMatDynParam._m0[0u].w);
    float _1158 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * cbInstanceData._m0[_1152].x;
    float _1159 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * cbInstanceData._m0[_1152].y;
    float _1160 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * cbInstanceData._m0[_1152].z;
    float _4152 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _1161 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _1163 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    vec4 _1172 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1113, cbSceneParam._m0[86u].y * _1114));
    float _1176 = ((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * TEXCOORD_5.w) * _1172.x;
    float _1177 = dot(vec3(_1014, _1015, _1016), vec3(_1093, _1094, _1095));
    float _1180 = _1177 * 2.0;
    float _1184 = (_1180 * _1014) - _1093;
    float _1185 = (_1180 * _1015) - _1094;
    float _1186 = (_1180 * _1016) - _1095;
    float _1190 = abs(dot(vec3(_1093, _1094, _1095), vec3(_1014, _1015, _1016)));
    float _4185 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _1192 = sqrt(_1017);
    float _1205 = exp2((_1192 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1192 * 3.0));
    float _1237 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1241 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1245 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1574;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1299 = fma(_1245, cbModelParam._m0[26u].z, fma(_1241, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1237));
        float _1303 = fma(_1245, cbModelParam._m0[27u].z, fma(_1241, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1237));
        float _1307 = fma(_1245, cbModelParam._m0[28u].z, fma(_1241, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1237));
        float _1332 = _1237 + _1014;
        float _1333 = _1241 + _1015;
        float _1334 = _1245 + _1016;
        float _1344 = fma(_1334, cbModelParam._m0[26u].z, fma(_1333, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1332)) - _1299;
        float _1345 = fma(_1334, cbModelParam._m0[27u].z, fma(_1333, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1332)) - _1303;
        float _1346 = fma(_1334, cbModelParam._m0[28u].z, fma(_1333, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1332)) - _1307;
        float _1350 = inversesqrt(dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346)));
        float _1363 = ((_1350 * _1344) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1299 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1350 * _1345) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1303 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1350 * _1346) / cbModelParam._m0[34u].z) + ((((((_1307 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        float _1402 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1368.x + (-0.5));
        float _1404 = _1402 * (_1368.y + (-0.5));
        float _1405 = _1402 * (_1368.z + (-0.5));
        float _1412 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1375.x + (-0.5));
        float _1414 = _1412 * (_1375.y + (-0.5));
        float _1415 = _1412 * (_1375.z + (-0.5));
        float _1422 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1382.x + (-0.5));
        float _1424 = _1422 * (_1382.y + (-0.5));
        float _1425 = _1422 * (_1382.z + (-0.5));
        float _1432 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1389.x + (-0.5));
        float _1434 = _1432 * (_1389.y + (-0.5));
        float _1435 = _1432 * (_1389.z + (-0.5));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = _1403 * 0.5;
        float _1440 = _1413 * 0.5;
        float _1441 = _1423 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1456 = (dot(vec3(_1014, _1015, _1016), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1466 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4233 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1468 + 1.0))) + _1473) * _1436;
        float _1483 = _1404 * 0.5;
        float _1484 = _1414 * 0.5;
        float _1485 = _1424 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_1014, _1015, _1016), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4266 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1510 + 1.0))) + _1515) * _1437;
        float _1525 = _1405 * 0.5;
        float _1526 = _1415 * 0.5;
        float _1527 = _1425 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_1014, _1015, _1016), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4299 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1552 + 1.0))) + _1557) * _1438;
        _1574 = _1405;
        _1576 = _1404;
        _1577 = _1403;
        _1578 = _1415;
        _1579 = _1414;
        _1580 = _1413;
        _1581 = _1425;
        _1582 = _1424;
        _1583 = _1423;
        _1584 = _1438;
        _1585 = _1437;
        _1586 = _1436;
        _1587 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1588 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1589 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
    }
    else
    {
        _1574 = _1575;
        _1576 = _1575;
        _1577 = _1575;
        _1578 = _1575;
        _1579 = _1575;
        _1580 = _1575;
        _1581 = _1575;
        _1582 = _1575;
        _1583 = _1575;
        _1584 = _1575;
        _1585 = _1575;
        _1586 = _1575;
        _1587 = 0.0;
        _1588 = 0.0;
        _1589 = 0.0;
    }
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1615 = fma(_1245, cbModelParam._m0[30u].z, fma(_1241, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1237));
        float _1619 = fma(_1245, cbModelParam._m0[31u].z, fma(_1241, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1237));
        float _1623 = fma(_1245, cbModelParam._m0[32u].z, fma(_1241, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1237));
        float _1646 = _1237 + _1014;
        float _1647 = _1241 + _1015;
        float _1648 = _1245 + _1016;
        float _1658 = fma(_1648, cbModelParam._m0[30u].z, fma(_1647, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1646)) - _1615;
        float _1659 = fma(_1648, cbModelParam._m0[31u].z, fma(_1647, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1646)) - _1619;
        float _1660 = fma(_1648, cbModelParam._m0[32u].z, fma(_1647, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1646)) - _1623;
        float _1664 = inversesqrt(dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660)));
        float _1677 = ((_1664 * _1658) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1615 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1678 = ((_1664 * _1659) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1619 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1679 = ((_1664 * _1660) / cbModelParam._m0[35u].z) + ((((((_1623 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1681 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1677, _1678, _1679), 0.0);
        vec4 _1688 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1677, _1678, _1679), 0.0);
        vec4 _1695 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1677, _1678, _1679), 0.0);
        vec4 _1702 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1677, _1678, _1679), 0.0);
        float _1714 = exp2((_1681.w + (-0.5)) * 20.0) * 2.0;
        float _1715 = _1714 * (_1681.x + (-0.5));
        float _1716 = _1714 * (_1681.y + (-0.5));
        float _1717 = _1714 * (_1681.z + (-0.5));
        float _1724 = exp2((_1688.w + (-0.5)) * 20.0) * 2.0;
        float _1725 = _1724 * (_1688.x + (-0.5));
        float _1726 = _1724 * (_1688.y + (-0.5));
        float _1727 = _1724 * (_1688.z + (-0.5));
        float _1734 = exp2((_1695.w + (-0.5)) * 20.0) * 2.0;
        float _1735 = _1734 * (_1695.x + (-0.5));
        float _1736 = _1734 * (_1695.y + (-0.5));
        float _1737 = _1734 * (_1695.z + (-0.5));
        float _1744 = exp2((_1702.w + (-0.5)) * 20.0) * 2.0;
        float _1745 = _1744 * (_1702.x + (-0.5));
        float _1746 = _1744 * (_1702.y + (-0.5));
        float _1747 = _1744 * (_1702.z + (-0.5));
        float _1748 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1749 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1750 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1751 = _1715 * 0.5;
        float _1752 = _1725 * 0.5;
        float _1753 = _1735 * 0.5;
        float _1754 = dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753));
        float _1759 = (_1754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1754);
        float _1767 = (dot(vec3(_1014, _1015, _1016), vec3(_1759 * _1751, _1759 * _1752, _1759 * _1753)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753)) / (_1748 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1778 = _1777 * 2.0;
        float _1782 = (1.0 - _1777) / (_1777 + 1.0);
        float _4362 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1792 = ((((1.0 - _1783) * (_1778 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1778 + 1.0))) + _1783) * _1748;
        float _1793 = _1716 * 0.5;
        float _1794 = _1726 * 0.5;
        float _1795 = _1736 * 0.5;
        float _1796 = dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795));
        float _1801 = (_1796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1796);
        float _1809 = (dot(vec3(_1014, _1015, _1016), vec3(_1801 * _1793, _1801 * _1794, _1801 * _1795)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1818 = sqrt(((_1794 * _1794) + (_1793 * _1793)) + (_1795 * _1795)) / (_1749 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1820 = _1819 * 2.0;
        float _1824 = (1.0 - _1819) / (_1819 + 1.0);
        float _4395 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1834 = ((((1.0 - _1825) * (_1820 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1820 + 1.0))) + _1825) * _1749;
        float _1835 = _1717 * 0.5;
        float _1836 = _1727 * 0.5;
        float _1837 = _1737 * 0.5;
        float _1838 = dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837));
        float _1843 = (_1838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1838);
        float _1851 = (dot(vec3(_1014, _1015, _1016), vec3(_1843 * _1835, _1843 * _1836, _1843 * _1837)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1860 = sqrt(((_1836 * _1836) + (_1835 * _1835)) + (_1837 * _1837)) / (_1750 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1862 = _1861 * 2.0;
        float _1866 = (1.0 - _1861) / (_1861 + 1.0);
        float _4428 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1876 = ((((1.0 - _1867) * (_1862 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1862 + 1.0))) + _1867) * _1750;
        _1884 = _1717;
        _1885 = _1716;
        _1886 = _1715;
        _1887 = _1727;
        _1888 = _1726;
        _1889 = _1725;
        _1890 = _1737;
        _1891 = _1736;
        _1892 = _1735;
        _1893 = _1750;
        _1894 = _1749;
        _1895 = _1748;
        _1896 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)));
        _1897 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)));
        _1898 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)));
    }
    else
    {
        _1884 = _1575;
        _1885 = _1575;
        _1886 = _1575;
        _1887 = _1575;
        _1888 = _1575;
        _1889 = _1575;
        _1890 = _1575;
        _1891 = _1575;
        _1892 = _1575;
        _1893 = _1575;
        _1894 = _1575;
        _1895 = _1575;
        _1896 = 0.0;
        _1897 = 0.0;
        _1898 = 0.0;
    }
    float _1908 = (cbModelParam._m0[1u].x * (_1896 - _1587)) + _1587;
    float _1909 = (cbModelParam._m0[1u].x * (_1897 - _1588)) + _1588;
    float _1910 = (cbModelParam._m0[1u].x * (_1898 - _1589)) + _1589;
    float _1931 = fma(_1910, cbSceneParam._m0[89u].z, fma(_1909, cbSceneParam._m0[89u].y, _1908 * cbSceneParam._m0[89u].x));
    float _1934 = fma(_1910, cbSceneParam._m0[90u].z, fma(_1909, cbSceneParam._m0[90u].y, _1908 * cbSceneParam._m0[90u].x));
    float _1937 = fma(_1910, cbSceneParam._m0[91u].z, fma(_1909, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1908));
    float _1952 = _1184 * 0.5;
    float _1953 = _1185 * 0.5;
    float _1954 = _1186 * 0.5;
    float _1955 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1886, _1889, _1892, _1895));
    float _1958 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1885, _1888, _1891, _1894));
    float _1961 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1884, _1887, _1890, _1893));
    float _1995;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1968 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1574, _1578, _1581, _1584));
        float _1972 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1576, _1579, _1582, _1585));
        float _1976 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1577, _1580, _1583, _1586));
        float _1983 = dot(vec4(cbModelParam._m0[39u]), vec4(_1952, _1953, _1954, 1.0));
        _1995 = dot(vec3(isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)), isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0)), isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1983) ? 0.0 : (isnan(0.0) ? _1983 : max(0.0, _1983))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1995 = 1.0;
    }
    float _2006;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1997 = dot(vec4(cbModelParam._m0[40u]), vec4(_1952, _1953, _1954, 1.0));
        _2006 = dot(vec3(isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)), isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1997) ? 0.0 : (isnan(0.0) ? _1997 : max(0.0, _1997))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2006 = 1.0;
    }
    float _2010 = (_2006 * cbModelParam._m0[1u].x) + (_1995 * (1.0 - cbModelParam._m0[1u].x));
    float _2020 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1017);
    float _2021 = isnan(_2020) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2020 : min(cbModelParam._m0[25u].z, _2020));
    float _2101;
    float _2103;
    float _2105;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2068 = fma(_1245, cbModelParam._m0[13u].z, fma(_1241, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1237)) + cbModelParam._m0[13u].w;
        float _2072 = fma(_1245, cbModelParam._m0[14u].z, fma(_1241, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1237)) + cbModelParam._m0[14u].w;
        float _2076 = fma(_1245, cbModelParam._m0[15u].z, fma(_1241, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1237)) + cbModelParam._m0[15u].w;
        float _2079 = fma(_1186, cbModelParam._m0[13u].z, fma(_1185, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1184));
        float _2082 = fma(_1186, cbModelParam._m0[14u].z, fma(_1185, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1184));
        float _2085 = fma(_1186, cbModelParam._m0[15u].z, fma(_1185, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1184));
        float _2113;
        if (_2079 > 0.0)
        {
            _2113 = abs((1.0 - _2068) / _2079);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2068 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2113 = frontier_phi_17_15_ladder;
        }
        float _2314;
        if (_2082 > 0.0)
        {
            _2314 = abs((1.0 - _2072) / _2082);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2072 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2314 = frontier_phi_26_22_ladder;
        }
        float _2557;
        if (_2085 > 0.0)
        {
            _2557 = abs((1.0 - _2076) / _2085);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2076 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2557 = frontier_phi_38_33_ladder;
        }
        float _2559 = isnan(_2314) ? _2113 : (isnan(_2113) ? _2314 : min(_2113, _2314));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _2079) + _2068;
        float _2565 = (_2560 * _2082) + _2072;
        float _2566 = (_2560 * _2085) + _2076;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2569 = (-1.0) - _2567;
        float _2571 = _2567 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2566 > _2571) || ((_2566 < _2569) || ((_2565 > _2571) || ((_2565 < _2569) || ((_2564 < _2569) || (_2564 > _2571))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2690 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2566, cbModelParam._m0[9u].z, fma(_2565, cbModelParam._m0[9u].y, _2564 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2566, cbModelParam._m0[10u].z, fma(_2565, cbModelParam._m0[10u].y, _2564 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2566, cbModelParam._m0[11u].z, fma(_2565, cbModelParam._m0[11u].y, _2564 * cbModelParam._m0[11u].x))), _2021);
            frontier_phi_16_38_ladder = _2690.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2690.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2690.x * cbModelParam._m0[1u].y;
        }
        _2101 = frontier_phi_16_38_ladder_2;
        _2103 = frontier_phi_16_38_ladder_1;
        _2105 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1184, _1185, _1186), _2021);
        _2101 = _2089.x * cbModelParam._m0[1u].y;
        _2103 = _2089.y * cbModelParam._m0[1u].y;
        _2105 = _2089.z * cbModelParam._m0[1u].y;
    }
    float _2109 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1017);
    float _2110 = isnan(_2109) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2109 : min(cbModelParam._m0[25u].w, _2109));
    float _2200;
    float _2202;
    float _2204;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2164 = fma(_1245, cbModelParam._m0[21u].z, fma(_1241, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1237)) + cbModelParam._m0[21u].w;
        float _2168 = fma(_1245, cbModelParam._m0[22u].z, fma(_1241, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1237)) + cbModelParam._m0[22u].w;
        float _2172 = fma(_1245, cbModelParam._m0[23u].z, fma(_1241, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1237)) + cbModelParam._m0[23u].w;
        float _2175 = fma(_1186, cbModelParam._m0[21u].z, fma(_1185, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1184));
        float _2178 = fma(_1186, cbModelParam._m0[22u].z, fma(_1185, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1184));
        float _2181 = fma(_1186, cbModelParam._m0[23u].z, fma(_1185, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1184));
        float _2319;
        if (_2175 > 0.0)
        {
            _2319 = abs((1.0 - _2164) / _2175);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2175 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2164 + 1.0) / _2175);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2319 = frontier_phi_28_24_ladder;
        }
        float _2584;
        if (_2178 > 0.0)
        {
            _2584 = abs((1.0 - _2168) / _2178);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2178 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2168 + 1.0) / _2178);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2584 = frontier_phi_40_35_ladder;
        }
        float _2789;
        if (_2181 > 0.0)
        {
            _2789 = abs((1.0 - _2172) / _2181);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2181 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2172 + 1.0) / _2181);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2789 = frontier_phi_49_46_ladder;
        }
        float _2791 = isnan(_2584) ? _2319 : (isnan(_2319) ? _2584 : min(_2319, _2584));
        float _2792 = isnan(_2789) ? _2791 : (isnan(_2791) ? _2789 : min(_2791, _2789));
        float _2796 = (_2792 * _2175) + _2164;
        float _2797 = (_2792 * _2178) + _2168;
        float _2798 = (_2792 * _2181) + _2172;
        float _2799 = _2792 * 9.9999997473787516355514526367188e-05;
        float _2800 = (-1.0) - _2799;
        float _2802 = _2799 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2798 > _2802) || ((_2798 < _2800) || ((_2797 > _2802) || ((_2797 < _2800) || ((_2796 < _2800) || (_2796 > _2802))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2997 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2798, cbModelParam._m0[17u].z, fma(_2797, cbModelParam._m0[17u].y, _2796 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2798, cbModelParam._m0[18u].z, fma(_2797, cbModelParam._m0[18u].y, _2796 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2798, cbModelParam._m0[19u].z, fma(_2797, cbModelParam._m0[19u].y, _2796 * cbModelParam._m0[19u].x))), _2110);
            frontier_phi_25_49_ladder = _2997.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2997.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2997.x * cbModelParam._m0[1u].z;
        }
        _2200 = frontier_phi_25_49_ladder_2;
        _2202 = frontier_phi_25_49_ladder_1;
        _2204 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2184 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1184, _1185, _1186), _2110);
        _2200 = _2184.x * cbModelParam._m0[1u].z;
        _2202 = _2184.y * cbModelParam._m0[1u].z;
        _2204 = _2184.z * cbModelParam._m0[1u].z;
    }
    float _2216 = ((((1.0 - _1205) * ((_1192 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1205 * _1192)) * _1176;
    float _2217 = _2216 * ((cbModelParam._m0[1u].w * (_2200 - _2101)) + _2101);
    float _2218 = _2216 * ((cbModelParam._m0[1u].w * (_2202 - _2103)) + _2103);
    float _2219 = _2216 * ((cbModelParam._m0[1u].w * (_2204 - _2105)) + _2105);
    float _2222 = fma(_2219, cbSceneParam._m0[89u].z, fma(_2218, cbSceneParam._m0[89u].y, _2217 * cbSceneParam._m0[89u].x));
    float _2225 = fma(_2219, cbSceneParam._m0[90u].z, fma(_2218, cbSceneParam._m0[90u].y, _2217 * cbSceneParam._m0[90u].x));
    float _2228 = fma(_2219, cbSceneParam._m0[91u].z, fma(_2218, cbSceneParam._m0[91u].y, _2217 * cbSceneParam._m0[91u].x));
    uvec4 _2238 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2240 = _2238.x * 14u;
    uint _2241 = _2240 + 13u;
    float _2248 = _1176 + (-1.0);
    float _2253 = (cbLight._m0[_2241].x * _2248) + 1.0;
    float _2254 = (cbLight._m0[_2241].y * _2248) + 1.0;
    float _2255 = (cbLight._m0[_2241].z * _2248) + 1.0;
    float _2256 = (cbLight._m0[_2241].w * _2248) + 1.0;
    uint _2257 = _2240 + 5u;
    float _2263 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
    uint _2267 = _2240 + 4u;
    float _2273 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
    uint _2277 = _2240 | 1u;
    float _2288 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_1014, _1015, _1016));
    float _2291 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_1014, _1015, _1016));
    float _4564 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _4575 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2296 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * 0.3183098733425140380859375;
    float _2298 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * 0.3183098733425140380859375;
    float _2305 = ((cbLight._m0[_2257].x * _2263) * _2298) + ((cbLight._m0[_2267].x * _2273) * _2296);
    float _2306 = ((_2263 * cbLight._m0[_2257].y) * _2298) + ((_2273 * cbLight._m0[_2267].y) * _2296);
    float _2307 = ((_2263 * cbLight._m0[_2257].z) * _2298) + ((_2273 * cbLight._m0[_2267].z) * _2296);
    uvec4 _2311 = floatBitsToUint(cbLight._m0[_2240 + 12u]);
    bool _2313 = _2311.x == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2313)
    {
        _2324 = _2305;
        _2326 = _2306;
        _2328 = _2307;
    }
    else
    {
        uint _2332 = _2240 + 6u;
        float _2348 = (dot(vec3(cbLight._m0[_2240 + 2u].xyz), vec3(_1014, _1015, _1016)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4586 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2351 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
        _2324 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2305;
        _2326 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2306;
        _2328 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2307;
    }
    bool _2331 = _2311.y == 0u;
    float _2369;
    float _2371;
    float _2373;
    if (_2331)
    {
        _2369 = _2324;
        _2371 = _2326;
        _2373 = _2328;
    }
    else
    {
        uint _2528 = _2240 + 7u;
        float _2544 = (dot(vec3(cbLight._m0[_2240 + 3u].xyz), vec3(_1014, _1015, _1016)) * 0.5) + 0.5;
        float _2545 = _2544 * _2544;
        float _4602 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2546 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2547 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
        _2369 = (((cbLight._m0[_2528].x * 0.3183098733425140380859375) * _2546) * _2547) + _2324;
        _2371 = (((cbLight._m0[_2528].y * 0.3183098733425140380859375) * _2546) * _2547) + _2326;
        _2373 = (((cbLight._m0[_2528].z * 0.3183098733425140380859375) * _2546) * _2547) + _2328;
    }
    uint _2376 = _2240 + 8u;
    float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _1017) * 0.949999988079071044921875);
    float _2390 = _2389 * _2389;
    float _2391 = cbLight._m0[_2240].x + _1093;
    float _2392 = cbLight._m0[_2240].y + _1094;
    float _2393 = cbLight._m0[_2240].z + _1095;
    float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
    float _2398 = _2397 * _2391;
    float _2399 = _2397 * _2392;
    float _2400 = _2397 * _2393;
    float _2401 = dot(vec3(_1014, _1015, _1016), vec3(cbLight._m0[_2240].xyz));
    float _4618 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _4629 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _2405 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2406 = dot(vec3(_1014, _1015, _1016), vec3(_2398, _2399, _2400));
    float _4640 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2410 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2398, _2399, _2400));
    float _4651 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2414 = _2390 * _2390;
    float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
    float _2429 = (exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2430 = 1.0 - _2390;
    float _2441 = (0.5 / (((_2405 * ((_2404 * _2430) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2430) + _2390) * _2404))) * _2404;
    float _4662 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2443 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
    uint _2454 = _2240 + 9u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _1017) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2277].x + _1093;
    float _2468 = cbLight._m0[_2277].y + _1094;
    float _2469 = cbLight._m0[_2277].z + _1095;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_1014, _1015, _1016), vec3(cbLight._m0[_2277].xyz));
    float _4673 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _2481 = dot(vec3(_1014, _1015, _1016), vec3(_2474, _2475, _2476));
    float _4684 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2474, _2475, _2476));
    float _4695 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2466 * _2466;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2502 = (exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2503 = 1.0 - _2466;
    float _2513 = (0.5 / (((_2405 * ((_2480 * _2503) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2503) + _2466) * _2480))) * _2480;
    float _4706 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2515 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    float _2525 = (((_2502 * cbLight._m0[_2454].x) * _2515) * _2263) + (((_2429 * cbLight._m0[_2376].x) * _2443) * _2273);
    float _2526 = (((_2502 * cbLight._m0[_2454].y) * _2515) * _2263) + (((_2429 * cbLight._m0[_2376].y) * _2443) * _2273);
    float _2527 = (((_2502 * cbLight._m0[_2454].z) * _2515) * _2263) + (((_2429 * cbLight._m0[_2376].z) * _2443) * _2273);
    float _2589;
    float _2591;
    float _2593;
    if (_2313)
    {
        _2589 = _2525;
        _2591 = _2526;
        _2593 = _2527;
    }
    else
    {
        uint _2595 = _2240 + 2u;
        uint _2599 = _2240 + 10u;
        float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2595].w)) * _1017) * 0.949999988079071044921875);
        float _2614 = _2613 * _2613;
        float _2615 = cbLight._m0[_2595].x + _1093;
        float _2616 = cbLight._m0[_2595].y + _1094;
        float _2617 = cbLight._m0[_2595].z + _1095;
        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
        float _2622 = _2621 * _2615;
        float _2623 = _2621 * _2616;
        float _2624 = _2621 * _2617;
        float _2625 = dot(vec3(_1014, _1015, _1016), vec3(cbLight._m0[_2595].xyz));
        float _4717 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2629 = dot(vec3(_1014, _1015, _1016), vec3(_2622, _2623, _2624));
        float _4728 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2633 = dot(vec3(cbLight._m0[_2595].xyz), vec3(_2622, _2623, _2624));
        float _4739 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2637 = _2614 * _2614;
        float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
        float _2650 = (exp2(log2(1.0 - (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2651 = 1.0 - _2614;
        float _2661 = (0.5 / (((_2405 * ((_2628 * _2651) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2651) + _2614) * _2628))) * _2628;
        float _4750 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2663 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
        float _2664 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
        _2589 = (((_2650 * cbLight._m0[_2599].x) * _2663) * _2664) + _2525;
        _2591 = (((_2650 * cbLight._m0[_2599].y) * _2663) * _2664) + _2526;
        _2593 = (((_2650 * cbLight._m0[_2599].z) * _2663) * _2664) + _2527;
    }
    float _2699;
    float _2701;
    float _2703;
    if (_2331)
    {
        _2699 = _2589;
        _2701 = _2591;
        _2703 = _2593;
    }
    else
    {
        uint _2710 = _2240 + 3u;
        uint _2714 = _2240 + 11u;
        float _2728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2710].w)) * _1017) * 0.949999988079071044921875);
        float _2729 = _2728 * _2728;
        float _2730 = cbLight._m0[_2710].x + _1093;
        float _2731 = cbLight._m0[_2710].y + _1094;
        float _2732 = cbLight._m0[_2710].z + _1095;
        float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
        float _2737 = _2736 * _2730;
        float _2738 = _2736 * _2731;
        float _2739 = _2736 * _2732;
        float _2740 = dot(vec3(_1014, _1015, _1016), vec3(cbLight._m0[_2710].xyz));
        float _4766 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2743 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2744 = dot(vec3(_1014, _1015, _1016), vec3(_2737, _2738, _2739));
        float _4777 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2747 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2748 = dot(vec3(cbLight._m0[_2710].xyz), vec3(_2737, _2738, _2739));
        float _4788 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2752 = _2729 * _2729;
        float _2756 = ((_2747 * _2747) * (_2752 + (-1.0))) + 1.0;
        float _2765 = (exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2766 = 1.0 - _2729;
        float _2776 = (0.5 / (((_2405 * ((_2743 * _2766) + _2729)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2766) + _2729) * _2743))) * _2743;
        float _4799 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2778 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2752 / ((_2756 * _2756) * 3.141590118408203125));
        float _2779 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
        _2699 = (((_2765 * cbLight._m0[_2714].x) * _2778) * _2779) + _2589;
        _2701 = (((_2765 * cbLight._m0[_2714].y) * _2778) * _2779) + _2591;
        _2703 = (((_2765 * cbLight._m0[_2714].z) * _2778) * _2779) + _2593;
    }
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_2238.y == 0u)
    {
        float _2854 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2855 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2854;
        float _2856 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2854;
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2854;
        uvec4 _2869 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2870 = _2869.x;
        uint _2881 = uint((float(_2869.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1114) / _2870))) + floor(float(uint(cbSceneParam._m0[85u].x * _1113) / _2870)));
        float _2891 = (log2(_2857 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2892 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        uint _2895 = uint(isnan(14.0) ? _2892 : (isnan(_2892) ? 14.0 : min(_2892, 14.0)));
        uvec4 _2900 = texelFetch(g_lightClusterGridBuffer, int(((_2895 << 2u) + (_2881 << 6u)) >> 2u));
        uint _2901 = _2900.x;
        uint _2902 = _2869.z;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        if (((((1u << ((_2902 >> 4u) & 15u)) + 4294967295u) & _2901) == 0u) || ((_2902 & 240u) == 0u))
        {
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
        }
        else
        {
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3013;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            uint _3161 = 0u;
            uint _3170;
            bool _3171;
            for (;;)
            {
                _3170 = texelFetch(g_lightClassification, int((((_2895 << 5u) + (_2881 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                _3171 = _3170 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3171)
                {
                    frontier_phi_66_pred = _3155;
                    frontier_phi_66_pred_1 = _3160;
                    frontier_phi_66_pred_2 = _3159;
                    frontier_phi_66_pred_3 = _3158;
                    frontier_phi_66_pred_4 = _3157;
                    frontier_phi_66_pred_5 = _3156;
                }
                else
                {
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    uint _3306;
                    _3300 = _3155;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3170;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    for (;;)
                    {
                        uint _3310 = uint(findLSB(_3306)) + (_3161 << 5u);
                        uint _3307 = (_3306 + 4294967295u) & _3306;
                        uint _3312 = _3310 * 48u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3332 = (_3310 * 48u) + 4u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3351 = (_3310 * 48u) + 8u;
                        vec3 _3362 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x));
                        float _3366 = _3326.x - _2855;
                        float _3367 = _3326.y - _2856;
                        float _3368 = _3326.z - _2857;
                        float _3369 = dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368));
                        float _3372 = inversesqrt(_3369);
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3376 = dot(vec3(_1132, _1135, _1138), vec3(_3373, _3374, _3375));
                        float _3381 = 1.0 - (_3369 * _3326.w);
                        float _4825 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                        float _3383 = sqrt(_3369) * _3345.w;
                        float _3386 = 1.39999997615814208984375 / (_3383 + 1.39999997615814208984375);
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3376) + _3387;
                        float _3393 = _3383 * _3383;
                        float _3397 = ((isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))) * _3382) / ((_3393 * 0.699999988079071044921875) + 1.0);
                        float _3401 = (-0.0) - _2855;
                        float _3402 = (-0.0) - _2856;
                        float _3403 = (-0.0) - _2857;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3418 = exp2(log2(1.0 / ((_3393 * 3.5) + 5.0)) * 0.25);
                        float _3419 = 1.0 - _1192;
                        float _3426 = sqrt(1.0 - ((1.0 - (_3419 * _3419)) * (1.0 - (_3418 * _3418))));
                        float _3427 = _3426 * _3426;
                        float _3428 = _3427 * _3427;
                        float _3429 = _3408 + _3373;
                        float _3430 = _3409 + _3374;
                        float _3431 = _3410 + _3375;
                        float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                        float _3439 = dot(vec3(_1132, _1135, _1138), vec3(_3408, _3409, _3410));
                        float _4841 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                        float _3443 = dot(vec3(_1132, _1135, _1138), vec3(_3435 * _3429, _3435 * _3430, _3435 * _3431));
                        float _4852 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3446 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                        float _3450 = ((_3446 * _3446) * (_3428 + (-1.0))) + 1.0;
                        float _3451 = _3386 * _3427;
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3376) + _3452;
                        float _4863 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3456 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                        float _3457 = 1.0 - _3427;
                        float _3467 = (0.5 / (((_3456 * ((_3442 * _3457) + _3427)) + 9.9999999392252902907785028219223e-09) + (((_3456 * _3457) + _3427) * _3442))) * _3456;
                        float _4874 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3478 = (((_3428 * 3.1415927410125732421875) * (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) / ((_3450 * _3450) * ((_3393 * 2.1991131305694580078125) + 3.141590118408203125))) * _3382;
                        _3230 = (_3397 * _3345.x) + _3303;
                        _3231 = (_3397 * _3345.y) + _3304;
                        _3232 = (_3397 * _3345.z) + _3305;
                        _3227 = (_3478 * _3362.x) + _3300;
                        _3228 = (_3478 * _3362.y) + _3301;
                        _3229 = (_3478 * _3362.z) + _3302;
                        if (_3307 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3300 = _3227;
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3307;
                        }
                    }
                    frontier_phi_66_pred = _3227;
                    frontier_phi_66_pred_1 = _3232;
                    frontier_phi_66_pred_2 = _3231;
                    frontier_phi_66_pred_3 = _3230;
                    frontier_phi_66_pred_4 = _3229;
                    frontier_phi_66_pred_5 = _3228;
                }
                _3003 = frontier_phi_66_pred;
                _3013 = frontier_phi_66_pred_1;
                _3011 = frontier_phi_66_pred_2;
                _3009 = frontier_phi_66_pred_3;
                _3007 = frontier_phi_66_pred_4;
                _3005 = frontier_phi_66_pred_5;
                uint _3162 = _3161 + 1u;
                if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3155 = _3003;
                    _3156 = _3005;
                    _3157 = _3007;
                    _3158 = _3009;
                    _3159 = _3011;
                    _3160 = _3013;
                    _3161 = _3162;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
        }
        uvec4 _3016 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3017 = _3016.z;
        uint _3019 = (_3017 >> 8u) & 15u;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        if (((4294967295u << _3019) & _2901) == 0u)
        {
            _3123 = _3002;
            _3125 = _3004;
            _3127 = _3006;
            _3129 = _3008;
            _3131 = _3010;
            _3133 = _3012;
        }
        else
        {
            float _3148 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
            float _3149 = _3148 * _2855;
            float _3150 = _3148 * _2856;
            float _3151 = _3148 * _2857;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3019 < ((_3017 >> 12u) & 15u))
            {
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3283 = _3002;
                float _3284 = _3004;
                float _3285 = _3006;
                float _3286 = _3008;
                float _3287 = _3010;
                float _3288 = _3012;
                uint _3289 = _3019;
                uint _3298;
                bool _3299;
                for (;;)
                {
                    _3298 = texelFetch(g_lightClassification, int((((_2895 << 5u) + (_2881 << 9u)) + (_3289 << 2u)) >> 2u)).x;
                    _3299 = _3298 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3299)
                    {
                        frontier_phi_77_pred = _3288;
                        frontier_phi_77_pred_1 = _3287;
                        frontier_phi_77_pred_2 = _3286;
                        frontier_phi_77_pred_3 = _3285;
                        frontier_phi_77_pred_4 = _3284;
                        frontier_phi_77_pred_5 = _3283;
                    }
                    else
                    {
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3505 = _3283;
                        float _3506 = _3284;
                        float _3507 = _3285;
                        float _3508 = _3286;
                        float _3509 = _3287;
                        float _3510 = _3288;
                        uint _3511 = _3298;
                        uint _3512;
                        vec4 _3537;
                        float _3538;
                        vec4 _3553;
                        vec3 _3565;
                        vec4 _3580;
                        vec4 _3595;
                        float _3641;
                        bool _3642;
                        for (;;)
                        {
                            uint _3522 = ((_3289 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3511));
                            _3512 = (_3511 + 4294967295u) & _3511;
                            uint _3524 = _3522 * 40u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            _3538 = _3537.w;
                            uint _3540 = (_3522 * 40u) + 4u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3555 = (_3522 * 40u) + 8u;
                            _3565 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x));
                            uint _3567 = (_3522 * 40u) + 16u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3582 = (_3522 * 40u) + 20u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3597 = (_3522 * 40u) + 24u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3616 = (_3522 * 40u) + 28u;
                            vec4 _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            _3641 = fma(_2857, _3629.z, fma(_2856, _3629.y, _3629.x * _2855)) + _3629.w;
                            _3642 = !((fma(_2857, _3610.z, fma(_2856, _3610.y, _3610.x * _2855)) + _3610.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3642)
                            {
                                float _3669 = _3537.x - _2855;
                                float _3670 = _3537.y - _2856;
                                float _3671 = _3537.z - _2857;
                                float _3672 = dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671));
                                float _3675 = inversesqrt(_3672);
                                float _3676 = _3675 * _3669;
                                float _3677 = _3675 * _3670;
                                float _3678 = _3675 * _3671;
                                float _3682 = 1.0 - (_3672 / (_3538 * _3538));
                                float _4885 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3687 = sqrt(_3672) * _3553.w;
                                float _3689 = 1.39999997615814208984375 / (_3687 + 1.39999997615814208984375);
                                float _3690 = _3689 * _3689;
                                float _3693 = ((1.0 - _3690) * dot(vec3(_3676, _3677, _3678), vec3(_1132, _1135, _1138))) + _3690;
                                float _3696 = _3687 * _3687;
                                float _3700 = (fma(_2857, _3580.z, fma(_2856, _3580.y, _3580.x * _2855)) + _3580.w) / _3641;
                                float _3701 = (fma(_2857, _3595.z, fma(_2856, _3595.y, _3595.x * _2855)) + _3595.w) / _3641;
                                float _3705 = 1.0 - dot(vec2(_3700, _3701), vec2(_3700, _3701));
                                float _4901 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3707 = _3706 * (((isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0))) * _3683) / ((_3696 * 0.699999988079071044921875) + 1.0));
                                float _3719 = exp2(log2(1.0 / ((_3696 * 3.5) + 5.0)) * 0.25);
                                float _3720 = 1.0 - _1192;
                                float _3727 = sqrt(1.0 - ((1.0 - (_3720 * _3720)) * (1.0 - (_3719 * _3719))));
                                float _3728 = _3727 * _3727;
                                float _3729 = _3728 * _3728;
                                float _3730 = _3676 - _3149;
                                float _3731 = _3677 - _3150;
                                float _3732 = _3678 - _3151;
                                float _3736 = inversesqrt(dot(vec3(_3730, _3731, _3732), vec3(_3730, _3731, _3732)));
                                float _3740 = dot(vec3(_1132, _1135, _1138), vec3((-0.0) - _3149, (-0.0) - _3150, (-0.0) - _3151));
                                float _4912 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3743 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3744 = dot(vec3(_1132, _1135, _1138), vec3(_3736 * _3730, _3736 * _3731, _3736 * _3732));
                                float _4923 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3747 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3751 = ((_3747 * _3747) * (_3729 + (-1.0))) + 1.0;
                                float _3752 = _3689 * _3728;
                                float _3753 = _3752 * _3752;
                                float _3759 = ((1.0 - _3753) * dot(vec3(_1132, _1135, _1138), vec3(_3676, _3677, _3678))) + _3753;
                                float _4934 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3761 = 1.0 - _3728;
                                float _3771 = (0.5 / (((_3760 * ((_3743 * _3761) + _3728)) + 9.9999999392252902907785028219223e-09) + (((_3760 * _3761) + _3728) * _3743))) * _3760;
                                float _4945 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3781 = (_3706 * _3683) * (((_3729 * 3.1415927410125732421875) * (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) / ((_3751 * _3751) * ((_3696 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3707 * _3553.y;
                                frontier_phi_83_pred_1 = _3707 * _3553.x;
                                frontier_phi_83_pred_2 = _3781 * _3565.z;
                                frontier_phi_83_pred_3 = _3781 * _3565.y;
                                frontier_phi_83_pred_4 = _3781 * _3565.x;
                                frontier_phi_83_pred_5 = _3707 * _3553.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3789 = frontier_phi_83_pred;
                            _3788 = frontier_phi_83_pred_1;
                            _3787 = frontier_phi_83_pred_2;
                            _3786 = frontier_phi_83_pred_3;
                            _3785 = frontier_phi_83_pred_4;
                            _3790 = frontier_phi_83_pred_5;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            _3492 = _3785 + _3505;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            if (_3512 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3512;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3497;
                        frontier_phi_77_pred_1 = _3496;
                        frontier_phi_77_pred_2 = _3495;
                        frontier_phi_77_pred_3 = _3494;
                        frontier_phi_77_pred_4 = _3493;
                        frontier_phi_77_pred_5 = _3492;
                    }
                    _3134 = frontier_phi_77_pred;
                    _3132 = frontier_phi_77_pred_1;
                    _3130 = frontier_phi_77_pred_2;
                    _3128 = frontier_phi_77_pred_3;
                    _3126 = frontier_phi_77_pred_4;
                    _3124 = frontier_phi_77_pred_5;
                    uint _3290 = _3289 + 1u;
                    if (_3290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3283 = _3124;
                        _3284 = _3126;
                        _3285 = _3128;
                        _3286 = _3130;
                        _3287 = _3132;
                        _3288 = _3134;
                        _3289 = _3290;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3128;
                frontier_phi_58_59_ladder_1 = _3134;
                frontier_phi_58_59_ladder_2 = _3132;
                frontier_phi_58_59_ladder_3 = _3130;
                frontier_phi_58_59_ladder_4 = _3126;
                frontier_phi_58_59_ladder_5 = _3124;
            }
            else
            {
                frontier_phi_58_59_ladder = _3006;
                frontier_phi_58_59_ladder_1 = _3012;
                frontier_phi_58_59_ladder_2 = _3010;
                frontier_phi_58_59_ladder_3 = _3008;
                frontier_phi_58_59_ladder_4 = _3004;
                frontier_phi_58_59_ladder_5 = _3002;
            }
            _3123 = frontier_phi_58_59_ladder_5;
            _3125 = frontier_phi_58_59_ladder_4;
            _3127 = frontier_phi_58_59_ladder;
            _3129 = frontier_phi_58_59_ladder_3;
            _3131 = frontier_phi_58_59_ladder_2;
            _3133 = frontier_phi_58_59_ladder_1;
        }
        float _3138 = isnan(1.0) ? _1176 : (isnan(_1176) ? 1.0 : min(_1176, 1.0));
        _2914 = (_3138 * _3129) + _2369;
        _2916 = (_3138 * _3131) + _2371;
        _2918 = (_3138 * _3133) + _2373;
        _2920 = ((_3123 * 0.039999999105930328369140625) * _3138) + _2699;
        _2922 = ((_3125 * 0.039999999105930328369140625) * _3138) + _2701;
        _2924 = ((_3127 * 0.039999999105930328369140625) * _3138) + _2703;
    }
    else
    {
        _2914 = _2369;
        _2916 = _2371;
        _2918 = _2373;
        _2920 = _2699;
        _2922 = _2701;
        _2924 = _2703;
    }
    float _4961 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _4972 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _4983 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _2941 = ((isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_2914 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1176))) + ((_2920 + ((isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0))) * _2010)) * cbPerFrame._m0[3u].x);
    float _2942 = ((isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_2916 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1176))) + ((_2922 + ((isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0))) * _2010)) * cbPerFrame._m0[3u].x);
    float _2943 = ((isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0))) * (_2918 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1176))) + ((_2924 + ((isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0))) * _2010)) * cbPerFrame._m0[3u].x);
    uint _2944 = _291 + 6u;
    float _2952 = _1113 / cbSceneParam._m0[86u].x;
    float _2953 = _1114 / cbSceneParam._m0[86u].y;
    vec4 _2967 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2952, _2953, (log2((isnan(cbSceneParam._m0[77u].w) ? _1035 : (isnan(_1035) ? cbSceneParam._m0[77u].w : min(_1035, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2969 = _2967.x;
    float _2970 = _2967.y;
    float _2971 = _2967.z;
    float _2972 = _2967.w;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    if (_1035 > cbSceneParam._m0[78u].w)
    {
        float _3027 = isnan(_1035) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1035 : min(cbSceneParam._m0[80u].w, _1035));
        float _3028 = _3027 / _1035;
        float _3039 = _3028 * _1086;
        float _3040 = _1087 * _3028;
        float _3041 = (-0.0) - _3040;
        float _3043 = _3028 * _1088;
        float _3045 = (cbSceneParam._m0[77u].w * _3041) / _3027;
        float _3046 = _3045 + cbSceneParam._m0[79u].w;
        float _3047 = cbSceneParam._m0[79u].w - _3040;
        float _3053 = sqrt(((_3039 * _3039) + (_3040 * _3040)) + (_3043 * _3043));
        float _3056 = (1.0 - (cbSceneParam._m0[77u].w / _3027)) * _3053;
        float _3061 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3063 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3240;
        if (abs((_3041 - _3045) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3240 = ((((_3046 > 0.0) ? exp2(_3061 * _3046) : (2.0 - exp2(_3063 * _3046))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3056;
        }
        else
        {
            float _3184 = 1.0 / cbSceneParam._m0[80u].x;
            float _3185 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : max(_3046, _3047));
            float _3186 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : min(_3046, _3047));
            float _3195 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : min(_3185, 0.0));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            _3240 = ((abs(_3053 / _3041) * cbSceneParam._m0[80u].y) * ((((_3195 - _3196) * 2.0) - ((exp2(_3061 * (isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0)))) - exp2(_3061 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))))) * _3184)) - ((exp2(_3063 * _3195) - exp2(_3063 * _3196)) * _3184))) + (_3056 * cbSceneParam._m0[80u].z);
        }
        vec4 _3242 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2952, _2953, 1.0), 0.0);
        float _3251 = exp2((_3240 * (-1.44269502162933349609375)) * (1.0 - _3242.w));
        float _3252 = log2(_3251);
        float _3268 = log2(_2972);
        _3065 = (exp2(_3268 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].x)) * _3242.x) / cbSceneParam._m0[78u].x)) + _2969;
        _3067 = (exp2(_3268 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].y)) * _3242.y) / cbSceneParam._m0[78u].y)) + _2970;
        _3069 = (exp2(_3268 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].z)) * _3242.z) / cbSceneParam._m0[78u].z)) + _2971;
        _3071 = _3251 * _2972;
    }
    else
    {
        _3065 = _2969;
        _3067 = _2970;
        _3069 = _2971;
        _3071 = _2972;
    }
    bool _3278;
    vec4 _3081;
    vec4 _3103;
    float _3105;
    float _3109;
    float _3110;
    float _3111;
    float _3112;
    bool _3122;
    for (;;)
    {
        _3081 = cbMatDynParam._m0[0u];
        float _3083 = roundEven(_3081.y);
        bool _3084 = _3083 == 3.0;
        float _3085 = log2(_3071);
        float _3092 = exp2(_3085 * cbSceneParam._m0[78u].x) * _2941;
        float _3093 = exp2(_3085 * cbSceneParam._m0[78u].y) * _2942;
        float _3094 = exp2(_3085 * cbSceneParam._m0[78u].z) * _2943;
        float _3101 = _1102 + (-0.5);
        _3103 = cbMtdParam._m0[1u];
        _3105 = _3103.y * _3101;
        float _3108 = (_3083 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3109 = _3108 * (_3084 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3065)));
        _3110 = _3108 * (_3084 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3067)));
        _3111 = _3108 * (_3084 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3069)));
        _3112 = _3101 * 0.999000012874603271484375;
        _3122 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3122)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3112) < 0.5)
            {
                _3278 = true;
                break;
            }
        }
        uint _3219 = _1151 + uint(_3081.w);
        if ((cbInstanceData._m0[_3219].w < 1.0) && ((cbInstanceData._m0[_3219].w + _3112) < 0.5))
        {
            _3278 = true;
            break;
        }
        if ((_3105 + 1.0) < _3103.x)
        {
            _3278 = true;
            break;
        }
        _3278 = false;
        break;
    }
    float _3483;
    if (_3278)
    {
        discard_state = true;
        _3483 = 0.0;
    }
    else
    {
        _3483 = cbInstanceData._m0[_2944].w;
    }
    SV_Target.x = _3109;
    SV_Target.y = _3110;
    SV_Target.z = _3111;
    SV_Target.w = _3483;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2944].w;
    discard_exit();
}


