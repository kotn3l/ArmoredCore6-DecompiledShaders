#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1529;
float _3910;
float _3911;
float _3912;
float _3913;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3922 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3933 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3944 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _453 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _455 = _453.x;
    float _467 = dot(vec4(_455, _453.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _484 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _418.x) * 2.0) - ((((_455 - _467) * cbMtdParam._m0[24u].z) + _467) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3955 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _492 = (_485 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378;
    float _493 = (_485 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379;
    float _494 = (_485 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380;
    vec4 _511 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _533 = _531.x;
    float _543 = dot(vec4(_533, _531.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _557 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _418.y) * 2.0) - ((((_533 - _543) * cbMtdParam._m0[24u].z) + _543) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3966 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _568 = (_347.x * cbMtdParam._m0[9u].x) * ((_558 * ((_511.x * cbMtdParam._m0[13u].x) - _492)) + _492);
    float _569 = (_347.y * cbMtdParam._m0[9u].y) * ((_558 * ((_511.y * cbMtdParam._m0[13u].y) - _493)) + _493);
    float _570 = (_347.z * cbMtdParam._m0[9u].z) * ((_558 * ((_511.z * cbMtdParam._m0[13u].z) - _494)) + _494);
    float _574 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _568;
    float _577 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _569;
    float _580 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _570;
    float _588 = (((_568 - _574) * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) + _574) * 4.55000019073486328125;
    float _590 = (((_569 - _577) * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) + _577) * 4.55000019073486328125;
    float _592 = (((_570 - _580) * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) + _580) * 4.55000019073486328125;
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _310) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _311) + cbTextureTilingScale._m0[14u].w));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _672 = _670.x;
    float _673 = _670.y;
    float _674 = _670.z;
    float _681 = ((_653.x - _672) * _485) + _672;
    float _682 = ((_653.y - _673) * _485) + _673;
    float _683 = ((_653.z - _674) * _485) + _674;
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _708 = ((_695.z - _683) * _558) + _683;
    float _711 = ((((_695.x - _681) * _558) + _681) * 2.0) + (-1.0);
    float _712 = ((((_695.y - _682) * _558) + _682) * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _3977 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _718 = sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))));
    vec4 _732 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _757 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _759 = _757.x;
    float _760 = 1.0 - _759;
    float _766 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _769 = ((isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : min(_766, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _778 = (_769 - ((((((_759 - _760) * cbMtdParam._m0[24u].w) + _760) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _769))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3998 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _779 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _786 = (_779 * ((_611.x * cbMtdParam._m0[18u].x) - _588)) + _588;
    float _787 = (_779 * ((_611.y * cbMtdParam._m0[18u].y) - _590)) + _590;
    float _788 = (_779 * ((_611.z * cbMtdParam._m0[18u].z) - _592)) + _592;
    vec4 _800 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _802 = _800.x;
    float _803 = 1.0 - _802;
    float _828 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_802 - _803) * cbMtdParam._m0[24u].y) + _803) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4009 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _829 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _837 = ((((cbMtdParam._m0[10u].x - _786) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _829) + _786;
    float _838 = ((((cbMtdParam._m0[10u].y - _787) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _829) + _787;
    float _839 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _788)) * _829) + _788;
    float _844 = (((_630.z - _708) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _708;
    float _848 = ((_732.z - _844) * cbMtdParam._m0[19u].w) + _844;
    vec4 _862 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _869 = (_862.x * 2.0) + (-1.0);
    float _870 = (_862.y * 2.0) + (-1.0);
    float _871 = dot(vec2(_869, _870), vec2(_869, _870));
    float _4020 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _879 = (_779 * (_862.z - _848)) + _848;
    float _882 = ((cbMtdParam._m0[23u].y - _879) * _829) + _879;
    vec4 _903 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _909 = (_903.x * 2.0) + (-1.0);
    float _910 = (_903.y * 2.0) + (-1.0);
    float _911 = dot(vec2(_909, _910), vec2(_909, _910));
    float _4031 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _925 = (_711 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_630.x * 2.0) + (-1.0)))) + (((_732.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _926 = (_712 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_630.y * 2.0) + (-1.0)))) + (((_732.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _938 = (((_869 - _925) + (cbMtdParam._m0[21u].x * _925)) * _779) + _925;
    float _939 = (((_870 - _926) + (cbMtdParam._m0[21u].x * _926)) * _779) + _926;
    float _940 = (_779 * (sqrt(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) - _718)) + _718;
    float _951 = (((_909 - _938) + (_938 * cbMtdParam._m0[22u].z)) * _829) + _938;
    float _952 = (((_910 - _939) + (_939 * cbMtdParam._m0[22u].z)) * _829) + _939;
    float _953 = ((sqrt(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) - _940) * _829) + _940;
    float _955 = cbMtdParam._m0[22u].x + _732.w;
    float _958 = fma(_953, _259 * NORMAL.x, fma(_952, _266 * TANGENT.x, (_252 * _244) * _951));
    float _961 = fma(_953, _259 * NORMAL.y, fma(_952, _266 * TANGENT.y, (_252 * _245) * _951));
    float _964 = fma(_953, _259 * NORMAL.z, fma(_952, _266 * TANGENT.z, (_252 * _246) * _951));
    float _968 = inversesqrt(dot(vec3(_958, _961, _964), vec3(_958, _961, _964)));
    float _969 = _968 * _958;
    float _970 = _968 * _961;
    float _971 = _968 * _964;
    float _4042 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _972 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4064 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4075 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4086 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _990 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1040 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1030);
    float _1041 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1030);
    float _1042 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1030);
    float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
    float _1047 = _1040 * _1046;
    float _1048 = _1041 * _1046;
    float _1049 = _1042 * _1046;
    vec4 _1054 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1056 = _1054.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1210 = sqrt(((_1040 * _1040) + (_1041 * _1041)) + (_1042 * _1042));
        float _1216 = (cbMatDynParam._m0[5u].x * _1210) + cbMatDynParam._m0[5u].y;
        float _4097 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1221 = (cbMatDynParam._m0[5u].z * _1210) + cbMatDynParam._m0[5u].w;
        float _4108 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) - _1217)) + _1217) < ((_1056 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1067 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1068 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1086 = fma(_971, cbSceneParam._m0[5u].z, fma(_970, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _969));
    float _1089 = fma(_971, cbSceneParam._m0[6u].z, fma(_970, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _969));
    float _1092 = fma(_971, cbSceneParam._m0[7u].z, fma(_970, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _969));
    uint _1105 = _291 + 9u;
    uint _1106 = _1105 + uint(cbMatDynParam._m0[0u].w);
    float _1112 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * cbInstanceData._m0[_1106].x;
    float _1113 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * cbInstanceData._m0[_1106].y;
    float _1114 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * cbInstanceData._m0[_1106].z;
    float _4119 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1115 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1116 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1117 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    vec4 _1126 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1067, cbSceneParam._m0[86u].y * _1068));
    float _1130 = ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * TEXCOORD_5.w) * _1126.x;
    float _1131 = dot(vec3(_969, _970, _971), vec3(_1047, _1048, _1049));
    float _1134 = _1131 * 2.0;
    float _1138 = (_1134 * _969) - _1047;
    float _1139 = (_1134 * _970) - _1048;
    float _1140 = (_1134 * _971) - _1049;
    float _1144 = abs(dot(vec3(_1047, _1048, _1049), vec3(_969, _970, _971)));
    float _4152 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1146 = sqrt(_972);
    float _1159 = exp2((_1146 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1146 * 3.0));
    float _1191 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1195 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1528;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1253 = fma(_1199, cbModelParam._m0[26u].z, fma(_1195, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1191));
        float _1257 = fma(_1199, cbModelParam._m0[27u].z, fma(_1195, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1191));
        float _1261 = fma(_1199, cbModelParam._m0[28u].z, fma(_1195, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1191));
        float _1286 = _1191 + _969;
        float _1287 = _1195 + _970;
        float _1288 = _1199 + _971;
        float _1298 = fma(_1288, cbModelParam._m0[26u].z, fma(_1287, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1286)) - _1253;
        float _1299 = fma(_1288, cbModelParam._m0[27u].z, fma(_1287, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1286)) - _1257;
        float _1300 = fma(_1288, cbModelParam._m0[28u].z, fma(_1287, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1286)) - _1261;
        float _1304 = inversesqrt(dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300)));
        float _1317 = ((_1304 * _1298) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1253 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1304 * _1299) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1257 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1304 * _1300) / cbModelParam._m0[34u].z) + ((((((_1261 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        float _1356 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1322.x + (-0.5));
        float _1358 = _1356 * (_1322.y + (-0.5));
        float _1359 = _1356 * (_1322.z + (-0.5));
        float _1366 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1329.x + (-0.5));
        float _1368 = _1366 * (_1329.y + (-0.5));
        float _1369 = _1366 * (_1329.z + (-0.5));
        float _1376 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1336.x + (-0.5));
        float _1378 = _1376 * (_1336.y + (-0.5));
        float _1379 = _1376 * (_1336.z + (-0.5));
        float _1386 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1343.x + (-0.5));
        float _1388 = _1386 * (_1343.y + (-0.5));
        float _1389 = _1386 * (_1343.z + (-0.5));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = _1357 * 0.5;
        float _1394 = _1367 * 0.5;
        float _1395 = _1377 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1410 = (dot(vec3(_969, _970, _971), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1420 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4200 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1422 + 1.0))) + _1427) * _1390;
        float _1437 = _1358 * 0.5;
        float _1438 = _1368 * 0.5;
        float _1439 = _1378 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_969, _970, _971), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4233 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1464 + 1.0))) + _1469) * _1391;
        float _1479 = _1359 * 0.5;
        float _1480 = _1369 * 0.5;
        float _1481 = _1379 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_969, _970, _971), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4266 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1506 + 1.0))) + _1511) * _1392;
        _1528 = _1359;
        _1530 = _1358;
        _1531 = _1357;
        _1532 = _1369;
        _1533 = _1368;
        _1534 = _1367;
        _1535 = _1379;
        _1536 = _1378;
        _1537 = _1377;
        _1538 = _1392;
        _1539 = _1391;
        _1540 = _1390;
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1529;
        _1530 = _1529;
        _1531 = _1529;
        _1532 = _1529;
        _1533 = _1529;
        _1534 = _1529;
        _1535 = _1529;
        _1536 = _1529;
        _1537 = _1529;
        _1538 = _1529;
        _1539 = _1529;
        _1540 = _1529;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1570 = fma(_1199, cbModelParam._m0[30u].z, fma(_1195, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191));
        float _1574 = fma(_1199, cbModelParam._m0[31u].z, fma(_1195, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191));
        float _1578 = fma(_1199, cbModelParam._m0[32u].z, fma(_1195, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191));
        float _1601 = _1191 + _969;
        float _1602 = _1195 + _970;
        float _1603 = _1199 + _971;
        float _1613 = fma(_1603, cbModelParam._m0[30u].z, fma(_1602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1601)) - _1570;
        float _1614 = fma(_1603, cbModelParam._m0[31u].z, fma(_1602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1601)) - _1574;
        float _1615 = fma(_1603, cbModelParam._m0[32u].z, fma(_1602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1601)) - _1578;
        float _1619 = inversesqrt(dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615)));
        float _1632 = ((_1619 * _1613) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1570 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1619 * _1614) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1574 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1619 * _1615) / cbModelParam._m0[35u].z) + ((((((_1578 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        float _1669 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1636.x + (-0.5));
        float _1671 = _1669 * (_1636.y + (-0.5));
        float _1672 = _1669 * (_1636.z + (-0.5));
        float _1679 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1643.x + (-0.5));
        float _1681 = _1679 * (_1643.y + (-0.5));
        float _1682 = _1679 * (_1643.z + (-0.5));
        float _1689 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1650.x + (-0.5));
        float _1691 = _1689 * (_1650.y + (-0.5));
        float _1692 = _1689 * (_1650.z + (-0.5));
        float _1699 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1657.x + (-0.5));
        float _1701 = _1699 * (_1657.y + (-0.5));
        float _1702 = _1699 * (_1657.z + (-0.5));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = _1670 * 0.5;
        float _1707 = _1680 * 0.5;
        float _1708 = _1690 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_969, _970, _971), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4329 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1733 + 1.0))) + _1738) * _1703;
        float _1748 = _1671 * 0.5;
        float _1749 = _1681 * 0.5;
        float _1750 = _1691 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_969, _970, _971), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4362 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1775 + 1.0))) + _1780) * _1704;
        float _1790 = _1672 * 0.5;
        float _1791 = _1682 * 0.5;
        float _1792 = _1692 * 0.5;
        float _1793 = dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792));
        float _1798 = (_1793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1793);
        float _1806 = (dot(vec3(_969, _970, _971), vec3(_1798 * _1790, _1798 * _1791, _1798 * _1792)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1817 = _1816 * 2.0;
        float _1821 = (1.0 - _1816) / (_1816 + 1.0);
        float _4395 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1831 = ((((1.0 - _1822) * (_1817 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1817 + 1.0))) + _1822) * _1705;
        _1839 = _1672;
        _1840 = _1671;
        _1841 = _1670;
        _1842 = _1682;
        _1843 = _1681;
        _1844 = _1680;
        _1845 = _1692;
        _1846 = _1691;
        _1847 = _1690;
        _1848 = _1705;
        _1849 = _1704;
        _1850 = _1703;
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)));
    }
    else
    {
        _1839 = _1529;
        _1840 = _1529;
        _1841 = _1529;
        _1842 = _1529;
        _1843 = _1529;
        _1844 = _1529;
        _1845 = _1529;
        _1846 = _1529;
        _1847 = _1529;
        _1848 = _1529;
        _1849 = _1529;
        _1850 = _1529;
        _1851 = 0.0;
        _1852 = 0.0;
        _1853 = 0.0;
    }
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1541)) + _1541;
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1542)) + _1542;
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1543)) + _1543;
    float _1886 = fma(_1865, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1863 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1865, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1863 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1865, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1863));
    float _1907 = _1138 * 0.5;
    float _1908 = _1139 * 0.5;
    float _1909 = _1140 * 0.5;
    float _1910 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1913 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1916 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1950;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1923 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1528, _1532, _1535, _1538));
        float _1927 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1530, _1533, _1536, _1539));
        float _1931 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1531, _1534, _1537, _1540));
        float _1938 = dot(vec4(cbModelParam._m0[39u]), vec4(_1907, _1908, _1909, 1.0));
        _1950 = dot(vec3(isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1938) ? 0.0 : (isnan(0.0) ? _1938 : max(0.0, _1938))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1950 = 1.0;
    }
    float _1961;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1952 = dot(vec4(cbModelParam._m0[40u]), vec4(_1907, _1908, _1909, 1.0));
        _1961 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1952) ? 0.0 : (isnan(0.0) ? _1952 : max(0.0, _1952))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1961 = 1.0;
    }
    float _1965 = (_1961 * cbModelParam._m0[1u].x) + (_1950 * (1.0 - cbModelParam._m0[1u].x));
    float _1975 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _972);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1975 : min(cbModelParam._m0[25u].z, _1975));
    float _2056;
    float _2058;
    float _2060;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2023 = fma(_1199, cbModelParam._m0[13u].z, fma(_1195, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1191)) + cbModelParam._m0[13u].w;
        float _2027 = fma(_1199, cbModelParam._m0[14u].z, fma(_1195, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1191)) + cbModelParam._m0[14u].w;
        float _2031 = fma(_1199, cbModelParam._m0[15u].z, fma(_1195, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1191)) + cbModelParam._m0[15u].w;
        float _2034 = fma(_1140, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138));
        float _2037 = fma(_1140, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138));
        float _2040 = fma(_1140, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138));
        float _2068;
        if (_2034 > 0.0)
        {
            _2068 = abs((1.0 - _2023) / _2034);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2023 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2068 = frontier_phi_17_15_ladder;
        }
        float _2289;
        if (_2037 > 0.0)
        {
            _2289 = abs((1.0 - _2027) / _2037);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2027 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2289 = frontier_phi_26_22_ladder;
        }
        float _2535;
        if (_2040 > 0.0)
        {
            _2535 = abs((1.0 - _2031) / _2040);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2031 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2535 = frontier_phi_38_33_ladder;
        }
        float _2537 = isnan(_2289) ? _2068 : (isnan(_2068) ? _2289 : min(_2068, _2289));
        float _2538 = isnan(_2535) ? _2537 : (isnan(_2537) ? _2535 : min(_2537, _2535));
        float _2542 = (_2538 * _2034) + _2023;
        float _2543 = (_2538 * _2037) + _2027;
        float _2544 = (_2538 * _2040) + _2031;
        float _2545 = _2538 * 9.9999997473787516355514526367188e-05;
        float _2547 = (-1.0) - _2545;
        float _2549 = _2545 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2544 > _2549) || ((_2544 < _2547) || ((_2543 > _2549) || ((_2543 < _2547) || ((_2542 < _2547) || (_2542 > _2549))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2544, cbModelParam._m0[9u].z, fma(_2543, cbModelParam._m0[9u].y, _2542 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2544, cbModelParam._m0[10u].z, fma(_2543, cbModelParam._m0[10u].y, _2542 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2544, cbModelParam._m0[11u].z, fma(_2543, cbModelParam._m0[11u].y, _2542 * cbModelParam._m0[11u].x))), _1976);
            frontier_phi_16_38_ladder = _2668.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2668.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2668.x * cbModelParam._m0[1u].y;
        }
        _2056 = frontier_phi_16_38_ladder_2;
        _2058 = frontier_phi_16_38_ladder_1;
        _2060 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1138, _1139, _1140), _1976);
        _2056 = _2044.x * cbModelParam._m0[1u].y;
        _2058 = _2044.y * cbModelParam._m0[1u].y;
        _2060 = _2044.z * cbModelParam._m0[1u].y;
    }
    float _2064 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _972);
    float _2065 = isnan(_2064) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2064 : min(cbModelParam._m0[25u].w, _2064));
    float _2154;
    float _2156;
    float _2158;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2118 = fma(_1199, cbModelParam._m0[21u].z, fma(_1195, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1191)) + cbModelParam._m0[21u].w;
        float _2122 = fma(_1199, cbModelParam._m0[22u].z, fma(_1195, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1191)) + cbModelParam._m0[22u].w;
        float _2126 = fma(_1199, cbModelParam._m0[23u].z, fma(_1195, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1191)) + cbModelParam._m0[23u].w;
        float _2129 = fma(_1140, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138));
        float _2132 = fma(_1140, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138));
        float _2135 = fma(_1140, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138));
        float _2294;
        if (_2129 > 0.0)
        {
            _2294 = abs((1.0 - _2118) / _2129);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2118 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2294 = frontier_phi_28_24_ladder;
        }
        float _2562;
        if (_2132 > 0.0)
        {
            _2562 = abs((1.0 - _2122) / _2132);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2122 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2562 = frontier_phi_40_35_ladder;
        }
        float _2767;
        if (_2135 > 0.0)
        {
            _2767 = abs((1.0 - _2126) / _2135);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2126 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2767 = frontier_phi_49_46_ladder;
        }
        float _2769 = isnan(_2562) ? _2294 : (isnan(_2294) ? _2562 : min(_2294, _2562));
        float _2770 = isnan(_2767) ? _2769 : (isnan(_2769) ? _2767 : min(_2769, _2767));
        float _2774 = (_2770 * _2129) + _2118;
        float _2775 = (_2770 * _2132) + _2122;
        float _2776 = (_2770 * _2135) + _2126;
        float _2777 = _2770 * 9.9999997473787516355514526367188e-05;
        float _2778 = (-1.0) - _2777;
        float _2780 = _2777 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2776 > _2780) || ((_2776 < _2778) || ((_2775 > _2780) || ((_2775 < _2778) || ((_2774 < _2778) || (_2774 > _2780))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2975 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2776, cbModelParam._m0[17u].z, fma(_2775, cbModelParam._m0[17u].y, _2774 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2776, cbModelParam._m0[18u].z, fma(_2775, cbModelParam._m0[18u].y, _2774 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2776, cbModelParam._m0[19u].z, fma(_2775, cbModelParam._m0[19u].y, _2774 * cbModelParam._m0[19u].x))), _2065);
            frontier_phi_25_49_ladder = _2975.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2975.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2975.x * cbModelParam._m0[1u].z;
        }
        _2154 = frontier_phi_25_49_ladder_2;
        _2156 = frontier_phi_25_49_ladder_1;
        _2158 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2138 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1138, _1139, _1140), _2065);
        _2154 = _2138.x * cbModelParam._m0[1u].z;
        _2156 = _2138.y * cbModelParam._m0[1u].z;
        _2158 = _2138.z * cbModelParam._m0[1u].z;
    }
    float _2170 = ((((1.0 - _1159) * ((_1146 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1159 * _1146)) * _1130;
    float _2171 = _2170 * ((cbModelParam._m0[1u].w * (_2154 - _2056)) + _2056);
    float _2172 = _2170 * ((cbModelParam._m0[1u].w * (_2156 - _2058)) + _2058);
    float _2173 = _2170 * ((cbModelParam._m0[1u].w * (_2158 - _2060)) + _2060);
    float _2176 = fma(_2173, cbSceneParam._m0[89u].z, fma(_2172, cbSceneParam._m0[89u].y, _2171 * cbSceneParam._m0[89u].x));
    float _2179 = fma(_2173, cbSceneParam._m0[90u].z, fma(_2172, cbSceneParam._m0[90u].y, _2171 * cbSceneParam._m0[90u].x));
    float _2182 = fma(_2173, cbSceneParam._m0[91u].z, fma(_2172, cbSceneParam._m0[91u].y, _2171 * cbSceneParam._m0[91u].x));
    vec4 _2190 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1067, _1068));
    float _2192 = _2190.w;
    float _2204 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2192);
    float _2205 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2192);
    float _2206 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2192);
    uvec4 _2210 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2212 = _2210.x * 14u;
    uint _2213 = _2212 + 13u;
    float _2220 = _1130 + (-1.0);
    float _2225 = (cbLight._m0[_2213].x * _2220) + 1.0;
    float _2226 = (cbLight._m0[_2213].y * _2220) + 1.0;
    float _2227 = (cbLight._m0[_2213].z * _2220) + 1.0;
    float _2228 = (cbLight._m0[_2213].w * _2220) + 1.0;
    uint _2229 = _2212 + 5u;
    float _2235 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2239 = _2212 + 4u;
    float _2248 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
    uint _2252 = _2212 | 1u;
    float _2263 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_969, _970, _971));
    float _2266 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_969, _970, _971));
    float _4531 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _4542 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2271 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * 0.3183098733425140380859375;
    float _2273 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * 0.3183098733425140380859375;
    float _2280 = ((cbLight._m0[_2229].x * _2235) * _2273) + (((cbLight._m0[_2239].x * _2204) * _2248) * _2271);
    float _2281 = ((_2235 * cbLight._m0[_2229].y) * _2273) + (((cbLight._m0[_2239].y * _2205) * _2248) * _2271);
    float _2282 = ((_2235 * cbLight._m0[_2229].z) * _2273) + (((cbLight._m0[_2239].z * _2206) * _2248) * _2271);
    uvec4 _2286 = floatBitsToUint(cbLight._m0[_2212 + 12u]);
    bool _2288 = _2286.x == 0u;
    float _2299;
    float _2301;
    float _2303;
    if (_2288)
    {
        _2299 = _2280;
        _2301 = _2281;
        _2303 = _2282;
    }
    else
    {
        uint _2307 = _2212 + 6u;
        float _2323 = (dot(vec3(cbLight._m0[_2212 + 2u].xyz), vec3(_969, _970, _971)) * 0.5) + 0.5;
        float _2324 = _2323 * _2323;
        float _4553 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2325 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2326 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2299 = (((cbLight._m0[_2307].x * 0.3183098733425140380859375) * _2325) * _2326) + _2280;
        _2301 = (((cbLight._m0[_2307].y * 0.3183098733425140380859375) * _2325) * _2326) + _2281;
        _2303 = (((cbLight._m0[_2307].z * 0.3183098733425140380859375) * _2325) * _2326) + _2282;
    }
    bool _2306 = _2286.y == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2306)
    {
        _2344 = _2299;
        _2346 = _2301;
        _2348 = _2303;
    }
    else
    {
        uint _2506 = _2212 + 7u;
        float _2522 = (dot(vec3(cbLight._m0[_2212 + 3u].xyz), vec3(_969, _970, _971)) * 0.5) + 0.5;
        float _2523 = _2522 * _2522;
        float _4569 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2524 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2525 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2344 = (((cbLight._m0[_2506].x * 0.3183098733425140380859375) * _2524) * _2525) + _2299;
        _2346 = (((cbLight._m0[_2506].y * 0.3183098733425140380859375) * _2524) * _2525) + _2301;
        _2348 = (((cbLight._m0[_2506].z * 0.3183098733425140380859375) * _2524) * _2525) + _2303;
    }
    uint _2351 = _2212 + 8u;
    float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _972) * 0.949999988079071044921875);
    float _2365 = _2364 * _2364;
    float _2366 = cbLight._m0[_2212].x + _1047;
    float _2367 = cbLight._m0[_2212].y + _1048;
    float _2368 = cbLight._m0[_2212].z + _1049;
    float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
    float _2373 = _2372 * _2366;
    float _2374 = _2372 * _2367;
    float _2375 = _2372 * _2368;
    float _2376 = dot(vec3(_969, _970, _971), vec3(cbLight._m0[_2212].xyz));
    float _4585 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _4596 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _2380 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2381 = dot(vec3(_969, _970, _971), vec3(_2373, _2374, _2375));
    float _4607 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2385 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2373, _2374, _2375));
    float _4618 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2389 = _2365 * _2365;
    float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
    float _2404 = (exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2405 = 1.0 - _2365;
    float _2416 = (0.5 / (((_2380 * ((_2379 * _2405) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2405) + _2365) * _2379))) * _2379;
    float _4629 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2418 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
    uint _2432 = _2212 + 9u;
    float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _972) * 0.949999988079071044921875);
    float _2444 = _2443 * _2443;
    float _2445 = cbLight._m0[_2252].x + _1047;
    float _2446 = cbLight._m0[_2252].y + _1048;
    float _2447 = cbLight._m0[_2252].z + _1049;
    float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
    float _2452 = _2451 * _2445;
    float _2453 = _2451 * _2446;
    float _2454 = _2451 * _2447;
    float _2455 = dot(vec3(_969, _970, _971), vec3(cbLight._m0[_2252].xyz));
    float _4640 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2459 = dot(vec3(_969, _970, _971), vec3(_2452, _2453, _2454));
    float _4651 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2463 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2452, _2453, _2454));
    float _4662 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2467 = _2444 * _2444;
    float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
    float _2480 = (exp2(log2(1.0 - (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2481 = 1.0 - _2444;
    float _2491 = (0.5 / (((_2380 * ((_2458 * _2481) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2481) + _2444) * _2458))) * _2458;
    float _4673 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2493 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
    float _2503 = (((_2480 * cbLight._m0[_2432].x) * _2493) * _2235) + ((((cbLight._m0[_2351].x * _2204) * _2404) * _2418) * _2248);
    float _2504 = (((_2480 * cbLight._m0[_2432].y) * _2493) * _2235) + ((((cbLight._m0[_2351].y * _2205) * _2404) * _2418) * _2248);
    float _2505 = (((_2480 * cbLight._m0[_2432].z) * _2493) * _2235) + ((((cbLight._m0[_2351].z * _2206) * _2404) * _2418) * _2248);
    float _2567;
    float _2569;
    float _2571;
    if (_2288)
    {
        _2567 = _2503;
        _2569 = _2504;
        _2571 = _2505;
    }
    else
    {
        uint _2573 = _2212 + 2u;
        uint _2577 = _2212 + 10u;
        float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2573].w)) * _972) * 0.949999988079071044921875);
        float _2592 = _2591 * _2591;
        float _2593 = cbLight._m0[_2573].x + _1047;
        float _2594 = cbLight._m0[_2573].y + _1048;
        float _2595 = cbLight._m0[_2573].z + _1049;
        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
        float _2600 = _2599 * _2593;
        float _2601 = _2599 * _2594;
        float _2602 = _2599 * _2595;
        float _2603 = dot(vec3(_969, _970, _971), vec3(cbLight._m0[_2573].xyz));
        float _4684 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2607 = dot(vec3(_969, _970, _971), vec3(_2600, _2601, _2602));
        float _4695 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2611 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_2600, _2601, _2602));
        float _4706 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2615 = _2592 * _2592;
        float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
        float _2628 = (exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2629 = 1.0 - _2592;
        float _2639 = (0.5 / (((_2380 * ((_2606 * _2629) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2629) + _2592) * _2606))) * _2606;
        float _4717 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2567 = (((_2628 * cbLight._m0[_2577].x) * _2641) * _2642) + _2503;
        _2569 = (((_2628 * cbLight._m0[_2577].y) * _2641) * _2642) + _2504;
        _2571 = (((_2628 * cbLight._m0[_2577].z) * _2641) * _2642) + _2505;
    }
    float _2677;
    float _2679;
    float _2681;
    if (_2306)
    {
        _2677 = _2567;
        _2679 = _2569;
        _2681 = _2571;
    }
    else
    {
        uint _2688 = _2212 + 3u;
        uint _2692 = _2212 + 11u;
        float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _972) * 0.949999988079071044921875);
        float _2707 = _2706 * _2706;
        float _2708 = cbLight._m0[_2688].x + _1047;
        float _2709 = cbLight._m0[_2688].y + _1048;
        float _2710 = cbLight._m0[_2688].z + _1049;
        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
        float _2715 = _2714 * _2708;
        float _2716 = _2714 * _2709;
        float _2717 = _2714 * _2710;
        float _2718 = dot(vec3(_969, _970, _971), vec3(cbLight._m0[_2688].xyz));
        float _4733 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2722 = dot(vec3(_969, _970, _971), vec3(_2715, _2716, _2717));
        float _4744 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2726 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_2715, _2716, _2717));
        float _4755 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2730 = _2707 * _2707;
        float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
        float _2743 = (exp2(log2(1.0 - (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2744 = 1.0 - _2707;
        float _2754 = (0.5 / (((_2380 * ((_2721 * _2744) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2744) + _2707) * _2721))) * _2721;
        float _4766 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2677 = (((_2743 * cbLight._m0[_2692].x) * _2756) * _2757) + _2567;
        _2679 = (((_2743 * cbLight._m0[_2692].y) * _2756) * _2757) + _2569;
        _2681 = (((_2743 * cbLight._m0[_2692].z) * _2756) * _2757) + _2571;
    }
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    if (_2210.y == 0u)
    {
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2832;
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2832;
        float _2835 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2832;
        uvec4 _2847 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2848 = _2847.x;
        uint _2859 = uint((float(_2847.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1068) / _2848))) + floor(float(uint(cbSceneParam._m0[85u].x * _1067) / _2848)));
        float _2869 = (log2(_2835 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2870 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        uint _2873 = uint(isnan(14.0) ? _2870 : (isnan(_2870) ? 14.0 : min(_2870, 14.0)));
        uvec4 _2878 = texelFetch(g_lightClusterGridBuffer, int(((_2873 << 2u) + (_2859 << 6u)) >> 2u));
        uint _2879 = _2878.x;
        uint _2880 = _2847.z;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        if (((((1u << ((_2880 >> 4u) & 15u)) + 4294967295u) & _2879) == 0u) || ((_2880 & 240u) == 0u))
        {
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
        }
        else
        {
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            uint _3139 = 0u;
            uint _3148;
            bool _3149;
            for (;;)
            {
                _3148 = texelFetch(g_lightClassification, int((((_2873 << 5u) + (_2859 << 9u)) + (_3139 << 2u)) >> 2u)).x;
                _3149 = _3148 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3149)
                {
                    frontier_phi_66_pred = _3133;
                    frontier_phi_66_pred_1 = _3138;
                    frontier_phi_66_pred_2 = _3137;
                    frontier_phi_66_pred_3 = _3136;
                    frontier_phi_66_pred_4 = _3135;
                    frontier_phi_66_pred_5 = _3134;
                }
                else
                {
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    uint _3284;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3148;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    for (;;)
                    {
                        uint _3288 = uint(findLSB(_3284)) + (_3139 << 5u);
                        uint _3285 = (_3284 + 4294967295u) & _3284;
                        uint _3290 = _3288 * 48u;
                        vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 3u)).x));
                        uint _3310 = (_3288 * 48u) + 4u;
                        vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3329 = (_3288 * 48u) + 8u;
                        vec3 _3340 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x));
                        float _3344 = _3304.x - _2833;
                        float _3345 = _3304.y - _2834;
                        float _3346 = _3304.z - _2835;
                        float _3347 = dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346));
                        float _3350 = inversesqrt(_3347);
                        float _3351 = _3350 * _3344;
                        float _3352 = _3350 * _3345;
                        float _3353 = _3350 * _3346;
                        float _3354 = dot(vec3(_1086, _1089, _1092), vec3(_3351, _3352, _3353));
                        float _3359 = 1.0 - (_3347 * _3304.w);
                        float _4792 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3360 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3361 = sqrt(_3347) * _3323.w;
                        float _3364 = 1.39999997615814208984375 / (_3361 + 1.39999997615814208984375);
                        float _3365 = _3364 * _3364;
                        float _3368 = ((1.0 - _3365) * _3354) + _3365;
                        float _3371 = _3361 * _3361;
                        float _3375 = ((isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0))) * _3360) / ((_3371 * 0.699999988079071044921875) + 1.0);
                        float _3379 = (-0.0) - _2833;
                        float _3380 = (-0.0) - _2834;
                        float _3381 = (-0.0) - _2835;
                        float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                        float _3386 = _3385 * _3379;
                        float _3387 = _3385 * _3380;
                        float _3388 = _3385 * _3381;
                        float _3396 = exp2(log2(1.0 / ((_3371 * 3.5) + 5.0)) * 0.25);
                        float _3397 = 1.0 - _1146;
                        float _3404 = sqrt(1.0 - ((1.0 - (_3397 * _3397)) * (1.0 - (_3396 * _3396))));
                        float _3405 = _3404 * _3404;
                        float _3406 = _3405 * _3405;
                        float _3407 = _3386 + _3351;
                        float _3408 = _3387 + _3352;
                        float _3409 = _3388 + _3353;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3417 = dot(vec3(_1086, _1089, _1092), vec3(_3386, _3387, _3388));
                        float _4808 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3421 = dot(vec3(_1086, _1089, _1092), vec3(_3413 * _3407, _3413 * _3408, _3413 * _3409));
                        float _4819 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3428 = ((_3424 * _3424) * (_3406 + (-1.0))) + 1.0;
                        float _3429 = _3364 * _3405;
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3354) + _3430;
                        float _4830 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3434 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3435 = 1.0 - _3405;
                        float _3445 = (0.5 / (((_3434 * ((_3420 * _3435) + _3405)) + 9.9999999392252902907785028219223e-09) + (((_3434 * _3435) + _3405) * _3420))) * _3434;
                        float _4841 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3456 = (((_3406 * 3.1415927410125732421875) * (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) / ((_3428 * _3428) * ((_3371 * 2.1991131305694580078125) + 3.141590118408203125))) * _3360;
                        _3208 = (_3375 * _3323.x) + _3281;
                        _3209 = (_3375 * _3323.y) + _3282;
                        _3210 = (_3375 * _3323.z) + _3283;
                        _3205 = (_3456 * _3340.x) + _3278;
                        _3206 = (_3456 * _3340.y) + _3279;
                        _3207 = (_3456 * _3340.z) + _3280;
                        if (_3285 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3285;
                        }
                    }
                    frontier_phi_66_pred = _3205;
                    frontier_phi_66_pred_1 = _3210;
                    frontier_phi_66_pred_2 = _3209;
                    frontier_phi_66_pred_3 = _3208;
                    frontier_phi_66_pred_4 = _3207;
                    frontier_phi_66_pred_5 = _3206;
                }
                _2981 = frontier_phi_66_pred;
                _2991 = frontier_phi_66_pred_1;
                _2989 = frontier_phi_66_pred_2;
                _2987 = frontier_phi_66_pred_3;
                _2985 = frontier_phi_66_pred_4;
                _2983 = frontier_phi_66_pred_5;
                uint _3140 = _3139 + 1u;
                if (_3140 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3133 = _2981;
                    _3134 = _2983;
                    _3135 = _2985;
                    _3136 = _2987;
                    _3137 = _2989;
                    _3138 = _2991;
                    _3139 = _3140;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
        }
        uvec4 _2994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2995 = _2994.z;
        uint _2997 = (_2995 >> 8u) & 15u;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        if (((4294967295u << _2997) & _2879) == 0u)
        {
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
            _3107 = _2986;
            _3109 = _2988;
            _3111 = _2990;
        }
        else
        {
            float _3126 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
            float _3127 = _3126 * _2833;
            float _3128 = _3126 * _2834;
            float _3129 = _3126 * _2835;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2997 < ((_2995 >> 12u) & 15u))
            {
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3261 = _2980;
                float _3262 = _2982;
                float _3263 = _2984;
                float _3264 = _2986;
                float _3265 = _2988;
                float _3266 = _2990;
                uint _3267 = _2997;
                uint _3276;
                bool _3277;
                for (;;)
                {
                    _3276 = texelFetch(g_lightClassification, int((((_2873 << 5u) + (_2859 << 9u)) + (_3267 << 2u)) >> 2u)).x;
                    _3277 = _3276 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3277)
                    {
                        frontier_phi_77_pred = _3266;
                        frontier_phi_77_pred_1 = _3265;
                        frontier_phi_77_pred_2 = _3264;
                        frontier_phi_77_pred_3 = _3263;
                        frontier_phi_77_pred_4 = _3262;
                        frontier_phi_77_pred_5 = _3261;
                    }
                    else
                    {
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        float _3487 = _3265;
                        float _3488 = _3266;
                        uint _3489 = _3276;
                        uint _3490;
                        vec4 _3515;
                        float _3516;
                        vec4 _3531;
                        vec3 _3543;
                        vec4 _3558;
                        vec4 _3573;
                        float _3619;
                        bool _3620;
                        for (;;)
                        {
                            uint _3500 = ((_3267 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3489));
                            _3490 = (_3489 + 4294967295u) & _3489;
                            uint _3502 = _3500 * 40u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3516 = _3515.w;
                            uint _3518 = (_3500 * 40u) + 4u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3500 * 40u) + 8u;
                            _3543 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x));
                            uint _3545 = (_3500 * 40u) + 16u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3560 = (_3500 * 40u) + 20u;
                            _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3575 = (_3500 * 40u) + 24u;
                            vec4 _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3594 = (_3500 * 40u) + 28u;
                            vec4 _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            _3619 = fma(_2835, _3607.z, fma(_2834, _3607.y, _3607.x * _2833)) + _3607.w;
                            _3620 = !((fma(_2835, _3588.z, fma(_2834, _3588.y, _3588.x * _2833)) + _3588.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3620)
                            {
                                float _3647 = _3515.x - _2833;
                                float _3648 = _3515.y - _2834;
                                float _3649 = _3515.z - _2835;
                                float _3650 = dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649));
                                float _3653 = inversesqrt(_3650);
                                float _3654 = _3653 * _3647;
                                float _3655 = _3653 * _3648;
                                float _3656 = _3653 * _3649;
                                float _3660 = 1.0 - (_3650 / (_3516 * _3516));
                                float _4852 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3665 = sqrt(_3650) * _3531.w;
                                float _3667 = 1.39999997615814208984375 / (_3665 + 1.39999997615814208984375);
                                float _3668 = _3667 * _3667;
                                float _3671 = ((1.0 - _3668) * dot(vec3(_3654, _3655, _3656), vec3(_1086, _1089, _1092))) + _3668;
                                float _3674 = _3665 * _3665;
                                float _3678 = (fma(_2835, _3558.z, fma(_2834, _3558.y, _3558.x * _2833)) + _3558.w) / _3619;
                                float _3679 = (fma(_2835, _3573.z, fma(_2834, _3573.y, _3573.x * _2833)) + _3573.w) / _3619;
                                float _3683 = 1.0 - dot(vec2(_3678, _3679), vec2(_3678, _3679));
                                float _4868 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3685 = _3684 * (((isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0))) * _3661) / ((_3674 * 0.699999988079071044921875) + 1.0));
                                float _3697 = exp2(log2(1.0 / ((_3674 * 3.5) + 5.0)) * 0.25);
                                float _3698 = 1.0 - _1146;
                                float _3705 = sqrt(1.0 - ((1.0 - (_3698 * _3698)) * (1.0 - (_3697 * _3697))));
                                float _3706 = _3705 * _3705;
                                float _3707 = _3706 * _3706;
                                float _3708 = _3654 - _3127;
                                float _3709 = _3655 - _3128;
                                float _3710 = _3656 - _3129;
                                float _3714 = inversesqrt(dot(vec3(_3708, _3709, _3710), vec3(_3708, _3709, _3710)));
                                float _3718 = dot(vec3(_1086, _1089, _1092), vec3((-0.0) - _3127, (-0.0) - _3128, (-0.0) - _3129));
                                float _4879 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3721 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3722 = dot(vec3(_1086, _1089, _1092), vec3(_3714 * _3708, _3714 * _3709, _3714 * _3710));
                                float _4890 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3729 = ((_3725 * _3725) * (_3707 + (-1.0))) + 1.0;
                                float _3730 = _3667 * _3706;
                                float _3731 = _3730 * _3730;
                                float _3737 = ((1.0 - _3731) * dot(vec3(_1086, _1089, _1092), vec3(_3654, _3655, _3656))) + _3731;
                                float _4901 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3738 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3739 = 1.0 - _3706;
                                float _3749 = (0.5 / (((_3738 * ((_3721 * _3739) + _3706)) + 9.9999999392252902907785028219223e-09) + (((_3738 * _3739) + _3706) * _3721))) * _3738;
                                float _4912 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3759 = (_3684 * _3661) * (((_3707 * 3.1415927410125732421875) * (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0)))) / ((_3729 * _3729) * ((_3674 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3685 * _3531.y;
                                frontier_phi_83_pred_1 = _3685 * _3531.x;
                                frontier_phi_83_pred_2 = _3759 * _3543.z;
                                frontier_phi_83_pred_3 = _3759 * _3543.y;
                                frontier_phi_83_pred_4 = _3759 * _3543.x;
                                frontier_phi_83_pred_5 = _3685 * _3531.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3767 = frontier_phi_83_pred;
                            _3766 = frontier_phi_83_pred_1;
                            _3765 = frontier_phi_83_pred_2;
                            _3764 = frontier_phi_83_pred_3;
                            _3763 = frontier_phi_83_pred_4;
                            _3768 = frontier_phi_83_pred_5;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            if (_3490 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3490;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3475;
                        frontier_phi_77_pred_1 = _3474;
                        frontier_phi_77_pred_2 = _3473;
                        frontier_phi_77_pred_3 = _3472;
                        frontier_phi_77_pred_4 = _3471;
                        frontier_phi_77_pred_5 = _3470;
                    }
                    _3112 = frontier_phi_77_pred;
                    _3110 = frontier_phi_77_pred_1;
                    _3108 = frontier_phi_77_pred_2;
                    _3106 = frontier_phi_77_pred_3;
                    _3104 = frontier_phi_77_pred_4;
                    _3102 = frontier_phi_77_pred_5;
                    uint _3268 = _3267 + 1u;
                    if (_3268 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3261 = _3102;
                        _3262 = _3104;
                        _3263 = _3106;
                        _3264 = _3108;
                        _3265 = _3110;
                        _3266 = _3112;
                        _3267 = _3268;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3106;
                frontier_phi_58_59_ladder_1 = _3112;
                frontier_phi_58_59_ladder_2 = _3110;
                frontier_phi_58_59_ladder_3 = _3108;
                frontier_phi_58_59_ladder_4 = _3104;
                frontier_phi_58_59_ladder_5 = _3102;
            }
            else
            {
                frontier_phi_58_59_ladder = _2984;
                frontier_phi_58_59_ladder_1 = _2990;
                frontier_phi_58_59_ladder_2 = _2988;
                frontier_phi_58_59_ladder_3 = _2986;
                frontier_phi_58_59_ladder_4 = _2982;
                frontier_phi_58_59_ladder_5 = _2980;
            }
            _3101 = frontier_phi_58_59_ladder_5;
            _3103 = frontier_phi_58_59_ladder_4;
            _3105 = frontier_phi_58_59_ladder;
            _3107 = frontier_phi_58_59_ladder_3;
            _3109 = frontier_phi_58_59_ladder_2;
            _3111 = frontier_phi_58_59_ladder_1;
        }
        float _3116 = isnan(1.0) ? _1130 : (isnan(_1130) ? 1.0 : min(_1130, 1.0));
        _2892 = (_3116 * _3107) + _2344;
        _2894 = (_3116 * _3109) + _2346;
        _2896 = (_3116 * _3111) + _2348;
        _2898 = ((_3101 * 0.039999999105930328369140625) * _3116) + _2677;
        _2900 = ((_3103 * 0.039999999105930328369140625) * _3116) + _2679;
        _2902 = ((_3105 * 0.039999999105930328369140625) * _3116) + _2681;
    }
    else
    {
        _2892 = _2344;
        _2894 = _2346;
        _2896 = _2348;
        _2898 = _2677;
        _2900 = _2679;
        _2902 = _2681;
    }
    float _4928 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _4939 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _4950 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2919 = ((isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2892 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1130))) + ((_2898 + ((isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    float _2920 = ((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2894 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1130))) + ((_2900 + ((isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    float _2921 = ((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2896 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1130))) + ((_2902 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    uint _2922 = _291 + 6u;
    float _2930 = _1067 / cbSceneParam._m0[86u].x;
    float _2931 = _1068 / cbSceneParam._m0[86u].y;
    vec4 _2945 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2930, _2931, (log2((isnan(cbSceneParam._m0[77u].w) ? _990 : (isnan(_990) ? cbSceneParam._m0[77u].w : min(_990, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2947 = _2945.x;
    float _2948 = _2945.y;
    float _2949 = _2945.z;
    float _2950 = _2945.w;
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    if (_990 > cbSceneParam._m0[78u].w)
    {
        float _3005 = isnan(_990) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _990 : min(cbSceneParam._m0[80u].w, _990));
        float _3006 = _3005 / _990;
        float _3017 = _3006 * _1040;
        float _3018 = _1041 * _3006;
        float _3019 = (-0.0) - _3018;
        float _3021 = _3006 * _1042;
        float _3023 = (cbSceneParam._m0[77u].w * _3019) / _3005;
        float _3024 = _3023 + cbSceneParam._m0[79u].w;
        float _3025 = cbSceneParam._m0[79u].w - _3018;
        float _3031 = sqrt(((_3017 * _3017) + (_3018 * _3018)) + (_3021 * _3021));
        float _3034 = (1.0 - (cbSceneParam._m0[77u].w / _3005)) * _3031;
        float _3039 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3041 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3218;
        if (abs((_3019 - _3023) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3218 = ((((_3024 > 0.0) ? exp2(_3039 * _3024) : (2.0 - exp2(_3041 * _3024))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3034;
        }
        else
        {
            float _3162 = 1.0 / cbSceneParam._m0[80u].x;
            float _3163 = isnan(_3025) ? _3024 : (isnan(_3024) ? _3025 : max(_3024, _3025));
            float _3164 = isnan(_3025) ? _3024 : (isnan(_3024) ? _3025 : min(_3024, _3025));
            float _3173 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : min(_3163, 0.0));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            _3218 = ((abs(_3031 / _3019) * cbSceneParam._m0[80u].y) * ((((_3173 - _3174) * 2.0) - ((exp2(_3039 * (isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0)))) - exp2(_3039 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))))) * _3162)) - ((exp2(_3041 * _3173) - exp2(_3041 * _3174)) * _3162))) + (_3034 * cbSceneParam._m0[80u].z);
        }
        vec4 _3220 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2930, _2931, 1.0), 0.0);
        float _3229 = exp2((_3218 * (-1.44269502162933349609375)) * (1.0 - _3220.w));
        float _3230 = log2(_3229);
        float _3246 = log2(_2950);
        _3043 = (exp2(_3246 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].x)) * _3220.x) / cbSceneParam._m0[78u].x)) + _2947;
        _3045 = (exp2(_3246 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].y)) * _3220.y) / cbSceneParam._m0[78u].y)) + _2948;
        _3047 = (exp2(_3246 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].z)) * _3220.z) / cbSceneParam._m0[78u].z)) + _2949;
        _3049 = _3229 * _2950;
    }
    else
    {
        _3043 = _2947;
        _3045 = _2948;
        _3047 = _2949;
        _3049 = _2950;
    }
    bool _3256;
    vec4 _3059;
    vec4 _3081;
    float _3083;
    float _3087;
    float _3088;
    float _3089;
    float _3090;
    bool _3100;
    for (;;)
    {
        _3059 = cbMatDynParam._m0[0u];
        float _3061 = roundEven(_3059.y);
        bool _3062 = _3061 == 3.0;
        float _3063 = log2(_3049);
        float _3070 = exp2(_3063 * cbSceneParam._m0[78u].x) * _2919;
        float _3071 = exp2(_3063 * cbSceneParam._m0[78u].y) * _2920;
        float _3072 = exp2(_3063 * cbSceneParam._m0[78u].z) * _2921;
        float _3079 = _1056 + (-0.5);
        _3081 = cbMtdParam._m0[1u];
        _3083 = _3081.y * _3079;
        float _3086 = (_3061 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3087 = _3086 * (_3062 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3043)));
        _3088 = _3086 * (_3062 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3045)));
        _3089 = _3086 * (_3062 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3047)));
        _3090 = _3079 * 0.999000012874603271484375;
        _3100 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3100)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3090) < 0.5)
            {
                _3256 = true;
                break;
            }
        }
        uint _3197 = _1105 + uint(_3059.w);
        if ((cbInstanceData._m0[_3197].w < 1.0) && ((cbInstanceData._m0[_3197].w + _3090) < 0.5))
        {
            _3256 = true;
            break;
        }
        if ((_3083 + 1.0) < _3081.x)
        {
            _3256 = true;
            break;
        }
        _3256 = false;
        break;
    }
    float _3461;
    if (_3256)
    {
        discard_state = true;
        _3461 = 0.0;
    }
    else
    {
        _3461 = cbInstanceData._m0[_2922].w;
    }
    SV_Target.x = _3087;
    SV_Target.y = _3088;
    SV_Target.z = _3089;
    SV_Target.w = _3461;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2922].w;
    discard_exit();
}


