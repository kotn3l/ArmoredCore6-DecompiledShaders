#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1373;
float _4017;
float _4018;
float _4019;
float _4020;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4029 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4040 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4051 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _385.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[24u].z) + _434) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4062 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _459 = (_452 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _460 = (_452 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _461 = (_452 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _385.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[24u].z) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4073 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    float _538 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _532;
    float _541 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _533;
    float _544 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _534;
    float _551 = ((_532 - _538) * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) + _538;
    float _552 = ((_533 - _541) * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) + _541;
    float _553 = ((_534 - _544) * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) + _544;
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _607 = _605.x;
    float _608 = _605.y;
    float _609 = _605.z;
    float _616 = ((_588.x - _607) * _452) + _607;
    float _617 = ((_588.y - _608) * _452) + _608;
    float _618 = ((_588.z - _609) * _452) + _609;
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _643 = ((_630.z - _618) * _525) + _618;
    float _646 = ((((_630.x - _616) * _525) + _616) * 2.0) + (-1.0);
    float _647 = ((((_630.y - _617) * _525) + _617) * 2.0) + (-1.0);
    float _648 = dot(vec2(_646, _647), vec2(_646, _647));
    float _4084 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _653 = sqrt(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _685 = (_646 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_565.x * 2.0) + (-1.0)))) + (((_673.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _686 = (_647 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_565.y * 2.0) + (-1.0)))) + (((_673.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _698 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _700 = _698.x;
    float _701 = 1.0 - _700;
    float _727 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_700 - _701) * cbMtdParam._m0[24u].y) + _701) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4095 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _728 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _736 = ((((cbMtdParam._m0[10u].x - _551) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _728) + _551;
    float _737 = ((((cbMtdParam._m0[10u].y - _552) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _728) + _552;
    float _738 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _553)) * _728) + _553;
    float _743 = (((_565.z - _643) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _643;
    float _747 = ((_673.z - _743) * cbMtdParam._m0[19u].w) + _743;
    float _751 = ((cbMtdParam._m0[23u].y - _747) * _728) + _747;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _776 = (_770.x * 2.0) + (-1.0);
    float _777 = (_770.y * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _4106 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _794 = (_728 * (((cbMtdParam._m0[22u].z * _685) - _685) + _776)) + _685;
    float _795 = (_728 * (((cbMtdParam._m0[22u].z * _686) - _686) + _777)) + _686;
    float _796 = (_728 * (sqrt(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) - _653)) + _653;
    float _798 = cbMtdParam._m0[22u].x + _673.w;
    float _801 = fma(_796, _251 * NORMAL.x, fma(_795, _258 * TANGENT.x, (_244 * _236) * _794));
    float _804 = fma(_796, _251 * NORMAL.y, fma(_795, _258 * TANGENT.y, (_244 * _237) * _794));
    float _807 = fma(_796, _251 * NORMAL.z, fma(_795, _258 * TANGENT.z, (_244 * _238) * _794));
    float _811 = inversesqrt(dot(vec3(_801, _804, _807), vec3(_801, _804, _807)));
    float _812 = _811 * _801;
    float _813 = _811 * _804;
    float _814 = _811 * _807;
    float _4117 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _815 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4139 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4150 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4161 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _833 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _884 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _874);
    float _885 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _874);
    float _886 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _874);
    float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
    float _891 = _884 * _890;
    float _892 = _885 * _890;
    float _893 = _886 * _890;
    vec4 _898 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _900 = _898.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1054 = sqrt(((_884 * _884) + (_885 * _885)) + (_886 * _886));
        float _1060 = (cbMatDynParam._m0[5u].x * _1054) + cbMatDynParam._m0[5u].y;
        float _4172 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1065 = (cbMatDynParam._m0[5u].z * _1054) + cbMatDynParam._m0[5u].w;
        float _4183 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) - _1061)) + _1061) < ((_900 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _911 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _912 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _930 = fma(_814, cbSceneParam._m0[5u].z, fma(_813, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _812));
    float _933 = fma(_814, cbSceneParam._m0[6u].z, fma(_813, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _812));
    float _936 = fma(_814, cbSceneParam._m0[7u].z, fma(_813, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _812));
    uint _949 = _283 + 9u;
    uint _950 = _949 + uint(cbMatDynParam._m0[0u].w);
    float _956 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * cbInstanceData._m0[_950].x;
    float _957 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * cbInstanceData._m0[_950].y;
    float _958 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * cbInstanceData._m0[_950].z;
    float _4194 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _4216 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    vec4 _970 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _911, cbSceneParam._m0[86u].y * _912));
    float _974 = ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * TEXCOORD_5.w) * _970.x;
    float _975 = dot(vec3(_812, _813, _814), vec3(_891, _892, _893));
    float _978 = _975 * 2.0;
    float _982 = (_978 * _812) - _891;
    float _983 = (_978 * _813) - _892;
    float _984 = (_978 * _814) - _893;
    float _988 = abs(dot(vec3(_891, _892, _893), vec3(_812, _813, _814)));
    float _4227 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _990 = sqrt(_815);
    float _1003 = exp2((_990 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_990 * 3.0));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1372;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1097 = fma(_1043, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1035));
        float _1101 = fma(_1043, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1035));
        float _1105 = fma(_1043, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1035));
        float _1130 = _1035 + _812;
        float _1131 = _1039 + _813;
        float _1132 = _1043 + _814;
        float _1142 = fma(_1132, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1130)) - _1097;
        float _1143 = fma(_1132, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1130)) - _1101;
        float _1144 = fma(_1132, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1130)) - _1105;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1097 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1101 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[34u].z) + ((((((_1105 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1200 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1166.x + (-0.5));
        float _1202 = _1200 * (_1166.y + (-0.5));
        float _1203 = _1200 * (_1166.z + (-0.5));
        float _1210 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1173.x + (-0.5));
        float _1212 = _1210 * (_1173.y + (-0.5));
        float _1213 = _1210 * (_1173.z + (-0.5));
        float _1220 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1180.x + (-0.5));
        float _1222 = _1220 * (_1180.y + (-0.5));
        float _1223 = _1220 * (_1180.z + (-0.5));
        float _1230 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1187.x + (-0.5));
        float _1232 = _1230 * (_1187.y + (-0.5));
        float _1233 = _1230 * (_1187.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1254 = (dot(vec3(_812, _813, _814), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1264 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4275 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1266 + 1.0))) + _1271) * _1234;
        float _1281 = _1202 * 0.5;
        float _1282 = _1212 * 0.5;
        float _1283 = _1222 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_812, _813, _814), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4308 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1308 + 1.0))) + _1313) * _1235;
        float _1323 = _1203 * 0.5;
        float _1324 = _1213 * 0.5;
        float _1325 = _1223 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_812, _813, _814), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4341 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1350 + 1.0))) + _1355) * _1236;
        _1372 = _1203;
        _1374 = _1202;
        _1375 = _1201;
        _1376 = _1213;
        _1377 = _1212;
        _1378 = _1211;
        _1379 = _1223;
        _1380 = _1222;
        _1381 = _1221;
        _1382 = _1236;
        _1383 = _1235;
        _1384 = _1234;
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1373;
        _1374 = _1373;
        _1375 = _1373;
        _1376 = _1373;
        _1377 = _1373;
        _1378 = _1373;
        _1379 = _1373;
        _1380 = _1373;
        _1381 = _1373;
        _1382 = _1373;
        _1383 = _1373;
        _1384 = _1373;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1414 = fma(_1043, cbModelParam._m0[30u].z, fma(_1039, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1035));
        float _1418 = fma(_1043, cbModelParam._m0[31u].z, fma(_1039, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1035));
        float _1422 = fma(_1043, cbModelParam._m0[32u].z, fma(_1039, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1035));
        float _1445 = _1035 + _812;
        float _1446 = _1039 + _813;
        float _1447 = _1043 + _814;
        float _1457 = fma(_1447, cbModelParam._m0[30u].z, fma(_1446, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445)) - _1414;
        float _1458 = fma(_1447, cbModelParam._m0[31u].z, fma(_1446, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445)) - _1418;
        float _1459 = fma(_1447, cbModelParam._m0[32u].z, fma(_1446, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445)) - _1422;
        float _1463 = inversesqrt(dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459)));
        float _1476 = ((_1463 * _1457) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1414 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1463 * _1458) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1418 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1463 * _1459) / cbModelParam._m0[35u].z) + ((((((_1422 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1513 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1480.x + (-0.5));
        float _1515 = _1513 * (_1480.y + (-0.5));
        float _1516 = _1513 * (_1480.z + (-0.5));
        float _1523 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1487.x + (-0.5));
        float _1525 = _1523 * (_1487.y + (-0.5));
        float _1526 = _1523 * (_1487.z + (-0.5));
        float _1533 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1494.x + (-0.5));
        float _1535 = _1533 * (_1494.y + (-0.5));
        float _1536 = _1533 * (_1494.z + (-0.5));
        float _1543 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1501.x + (-0.5));
        float _1545 = _1543 * (_1501.y + (-0.5));
        float _1546 = _1543 * (_1501.z + (-0.5));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = _1514 * 0.5;
        float _1551 = _1524 * 0.5;
        float _1552 = _1534 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_812, _813, _814), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4382 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4393 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4404 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_1577 + 1.0))) + _1582) * _1547;
        float _1592 = _1515 * 0.5;
        float _1593 = _1525 * 0.5;
        float _1594 = _1535 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_812, _813, _814), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4437 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1619 + 1.0))) + _1624) * _1548;
        float _1634 = _1516 * 0.5;
        float _1635 = _1526 * 0.5;
        float _1636 = _1536 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_812, _813, _814), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4470 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1661 + 1.0))) + _1666) * _1549;
        _1683 = _1516;
        _1684 = _1515;
        _1685 = _1514;
        _1686 = _1526;
        _1687 = _1525;
        _1688 = _1524;
        _1689 = _1536;
        _1690 = _1535;
        _1691 = _1534;
        _1692 = _1549;
        _1693 = _1548;
        _1694 = _1547;
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    }
    else
    {
        _1683 = _1373;
        _1684 = _1373;
        _1685 = _1373;
        _1686 = _1373;
        _1687 = _1373;
        _1688 = _1373;
        _1689 = _1373;
        _1690 = _1373;
        _1691 = _1373;
        _1692 = _1373;
        _1693 = _1373;
        _1694 = _1373;
        _1695 = 0.0;
        _1696 = 0.0;
        _1697 = 0.0;
    }
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1385)) + _1385;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1386)) + _1386;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1387)) + _1387;
    float _1730 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1707));
    float _1751 = _982 * 0.5;
    float _1752 = _983 * 0.5;
    float _1753 = _984 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1794;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1372, _1376, _1379, _1382));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1805;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1796 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1809 = (_1805 * cbModelParam._m0[1u].x) + (_1794 * (1.0 - cbModelParam._m0[1u].x));
    float _1819 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _815);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1819 : min(cbModelParam._m0[25u].z, _1819));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1869 = fma(_1043, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1035)) + cbModelParam._m0[13u].w;
        float _1873 = fma(_1043, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1035)) + cbModelParam._m0[14u].w;
        float _1877 = fma(_1043, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1035)) + cbModelParam._m0[15u].w;
        float _1880 = fma(_984, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982));
        float _1883 = fma(_984, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982));
        float _1886 = fma(_984, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982));
        float _1914;
        if (_1880 > 0.0)
        {
            _1914 = abs((1.0 - _1869) / _1880);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1869 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1914 = frontier_phi_17_15_ladder;
        }
        float _2085;
        if (_1883 > 0.0)
        {
            _2085 = abs((1.0 - _1873) / _1883);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1873 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2085 = frontier_phi_26_22_ladder;
        }
        float _2380;
        if (_1886 > 0.0)
        {
            _2380 = abs((1.0 - _1877) / _1886);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1877 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2380 = frontier_phi_38_33_ladder;
        }
        float _2382 = isnan(_2085) ? _1914 : (isnan(_1914) ? _2085 : min(_1914, _2085));
        float _2383 = isnan(_2380) ? _2382 : (isnan(_2382) ? _2380 : min(_2382, _2380));
        float _2387 = (_2383 * _1880) + _1869;
        float _2388 = (_2383 * _1883) + _1873;
        float _2389 = (_2383 * _1886) + _1877;
        float _2390 = _2383 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2390;
        float _2394 = _2390 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 > _2394) || ((_2388 < _2392) || ((_2387 < _2392) || (_2387 > _2394))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2389, cbModelParam._m0[9u].z, fma(_2388, cbModelParam._m0[9u].y, _2387 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2389, cbModelParam._m0[10u].z, fma(_2388, cbModelParam._m0[10u].y, _2387 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2389, cbModelParam._m0[11u].z, fma(_2388, cbModelParam._m0[11u].y, _2387 * cbModelParam._m0[11u].x))), _1820);
            frontier_phi_16_38_ladder = _2534.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2534.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2534.x * cbModelParam._m0[1u].y;
        }
        _1902 = frontier_phi_16_38_ladder_2;
        _1904 = frontier_phi_16_38_ladder_1;
        _1906 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_982, _983, _984), _1820);
        _1902 = _1890.x * cbModelParam._m0[1u].y;
        _1904 = _1890.y * cbModelParam._m0[1u].y;
        _1906 = _1890.z * cbModelParam._m0[1u].y;
    }
    float _1910 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _815);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1910 : min(cbModelParam._m0[25u].w, _1910));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1966 = fma(_1043, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1035)) + cbModelParam._m0[21u].w;
        float _1970 = fma(_1043, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1035)) + cbModelParam._m0[22u].w;
        float _1974 = fma(_1043, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1035)) + cbModelParam._m0[23u].w;
        float _1977 = fma(_984, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982));
        float _1980 = fma(_984, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982));
        float _1983 = fma(_984, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982));
        float _2090;
        if (_1977 > 0.0)
        {
            _2090 = abs((1.0 - _1966) / _1977);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1966 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2090 = frontier_phi_28_24_ladder;
        }
        float _2407;
        if (_1980 > 0.0)
        {
            _2407 = abs((1.0 - _1970) / _1980);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1970 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2407 = frontier_phi_40_35_ladder;
        }
        float _2734;
        if (_1983 > 0.0)
        {
            _2734 = abs((1.0 - _1974) / _1983);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1974 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2734 = frontier_phi_50_47_ladder;
        }
        float _2736 = isnan(_2407) ? _2090 : (isnan(_2090) ? _2407 : min(_2090, _2407));
        float _2737 = isnan(_2734) ? _2736 : (isnan(_2736) ? _2734 : min(_2736, _2734));
        float _2741 = (_2737 * _1977) + _1966;
        float _2742 = (_2737 * _1980) + _1970;
        float _2743 = (_2737 * _1983) + _1974;
        float _2744 = _2737 * 9.9999997473787516355514526367188e-05;
        float _2745 = (-1.0) - _2744;
        float _2747 = _2744 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2743 > _2747) || ((_2743 < _2745) || ((_2742 > _2747) || ((_2742 < _2745) || ((_2741 < _2745) || (_2741 > _2747))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2743, cbModelParam._m0[17u].z, fma(_2742, cbModelParam._m0[17u].y, _2741 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2743, cbModelParam._m0[18u].z, fma(_2742, cbModelParam._m0[18u].y, _2741 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2743, cbModelParam._m0[19u].z, fma(_2742, cbModelParam._m0[19u].y, _2741 * cbModelParam._m0[19u].x))), _1911);
            frontier_phi_25_50_ladder = _2861.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2861.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2861.x * cbModelParam._m0[1u].z;
        }
        _2002 = frontier_phi_25_50_ladder_2;
        _2004 = frontier_phi_25_50_ladder_1;
        _2006 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1986 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_982, _983, _984), _1911);
        _2002 = _1986.x * cbModelParam._m0[1u].z;
        _2004 = _1986.y * cbModelParam._m0[1u].z;
        _2006 = _1986.z * cbModelParam._m0[1u].z;
    }
    float _2018 = ((((1.0 - _1003) * ((_990 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1003 * _990)) * _974;
    float _2019 = _2018 * ((cbModelParam._m0[1u].w * (_2002 - _1902)) + _1902);
    float _2020 = _2018 * ((cbModelParam._m0[1u].w * (_2004 - _1904)) + _1904);
    float _2021 = _2018 * ((cbModelParam._m0[1u].w * (_2006 - _1906)) + _1906);
    float _2024 = fma(_2021, cbSceneParam._m0[89u].z, fma(_2020, cbSceneParam._m0[89u].y, _2019 * cbSceneParam._m0[89u].x));
    float _2027 = fma(_2021, cbSceneParam._m0[90u].z, fma(_2020, cbSceneParam._m0[90u].y, _2019 * cbSceneParam._m0[90u].x));
    float _2030 = fma(_2021, cbSceneParam._m0[91u].z, fma(_2020, cbSceneParam._m0[91u].y, _2019 * cbSceneParam._m0[91u].x));
    float _2064 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2077 = _2064 / _2076;
    float _2078 = _2068 / _2076;
    float _2079 = _2072 / _2076;
    float _2226;
    float _2227;
    float _2228;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2106 = ((uint(_2079 > cbSceneParam._m0[59u].y) + uint(_2079 > cbSceneParam._m0[59u].x)) + uint(_2079 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2107 = _2106 + 43u;
        uint _2115 = _2106 + 44u;
        uint _2123 = _2106 + 45u;
        uint _2131 = _2106 + 46u;
        float _2142 = fma(_2076, cbSceneParam._m0[_2107].w, fma(_2072, cbSceneParam._m0[_2107].z, fma(_2068, cbSceneParam._m0[_2107].y, _2064 * cbSceneParam._m0[_2107].x)));
        float _2146 = fma(_2076, cbSceneParam._m0[_2115].w, fma(_2072, cbSceneParam._m0[_2115].z, fma(_2068, cbSceneParam._m0[_2115].y, _2064 * cbSceneParam._m0[_2115].x)));
        float _2154 = fma(_2076, cbSceneParam._m0[_2131].w, fma(_2072, cbSceneParam._m0[_2131].z, fma(_2068, cbSceneParam._m0[_2131].y, _2064 * cbSceneParam._m0[_2131].x)));
        float _2159 = cbSceneParam._m0[33u].z * _2154;
        float _2161 = cbSceneParam._m0[33u].w * _2154;
        float _2164 = fma(_2076, cbSceneParam._m0[_2123].w, fma(_2072, cbSceneParam._m0[_2123].z, fma(_2068, cbSceneParam._m0[_2123].y, _2064 * cbSceneParam._m0[_2123].x))) / _2154;
        float _2212 = (cbSceneParam._m0[33u].x - sqrt(((_2078 * _2078) + (_2077 * _2077)) + (_2079 * _2079))) * cbSceneParam._m0[33u].y;
        float _4596 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2219 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 + _2142) / _2154, (_2161 + _2146) / _2154), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2161 + _2142) / _2154, (_2146 - _2159) / _2154), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 - _2159) / _2154, (_2146 - _2161) / _2154), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 - _2161) / _2154, (_2159 + _2146) / _2154), _2164), 0.0)).x), vec4(0.25)));
        _2226 = 1.0 - (_2219 * cbSceneParam._m0[34u].x);
        _2227 = 1.0 - (_2219 * cbSceneParam._m0[34u].y);
        _2228 = 1.0 - (_2219 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2226 = 1.0;
        _2227 = 1.0;
        _2228 = 1.0;
    }
    float _2292;
    float _2294;
    float _2296;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2280 = fma(_2076, cbSceneParam._m0[63u].w, fma(_2072, cbSceneParam._m0[63u].z, fma(_2068, cbSceneParam._m0[63u].y, _2064 * cbSceneParam._m0[63u].x)));
        float _2281 = fma(_2076, cbSceneParam._m0[60u].w, fma(_2072, cbSceneParam._m0[60u].z, fma(_2068, cbSceneParam._m0[60u].y, _2064 * cbSceneParam._m0[60u].x))) / _2280;
        float _2282 = fma(_2076, cbSceneParam._m0[61u].w, fma(_2072, cbSceneParam._m0[61u].z, fma(_2068, cbSceneParam._m0[61u].y, _2064 * cbSceneParam._m0[61u].x))) / _2280;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2281 >= cbSceneParam._m0[64u].x) && (_2282 >= cbSceneParam._m0[64u].y)) && (_2281 <= cbSceneParam._m0[64u].z)) && (_2282 <= cbSceneParam._m0[64u].w))
        {
            float _2420 = fma(_2076, cbSceneParam._m0[62u].w, fma(_2072, cbSceneParam._m0[62u].z, fma(_2068, cbSceneParam._m0[62u].y, _2064 * cbSceneParam._m0[62u].x))) / _2280;
            float _2424 = isnan(cbSceneParam._m0[41u].w) ? _2420 : (isnan(_2420) ? cbSceneParam._m0[41u].w : max(_2420, cbSceneParam._m0[41u].w));
            float _2467 = (cbSceneParam._m0[33u].x - sqrt(((_2078 * _2078) + (_2077 * _2077)) + (_2079 * _2079))) * cbSceneParam._m0[33u].y;
            float _4612 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
            float _2474 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2281, cbSceneParam._m0[33u].w + _2282), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2281, _2282 - cbSceneParam._m0[33u].z), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2281 - cbSceneParam._m0[33u].z, _2282 - cbSceneParam._m0[33u].w), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2281 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2282), _2424), 0.0)).x), vec4(0.25)));
            float _2478 = 1.0 - (_2474 * cbSceneParam._m0[34u].x);
            float _2479 = 1.0 - (_2474 * cbSceneParam._m0[34u].y);
            float _2480 = 1.0 - (_2474 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2480) ? _2228 : (isnan(_2228) ? _2480 : min(_2228, _2480));
            frontier_phi_37_36_ladder_1 = isnan(_2479) ? _2227 : (isnan(_2227) ? _2479 : min(_2227, _2479));
            frontier_phi_37_36_ladder_2 = isnan(_2478) ? _2226 : (isnan(_2226) ? _2478 : min(_2226, _2478));
        }
        else
        {
            frontier_phi_37_36_ladder = _2228;
            frontier_phi_37_36_ladder_1 = _2227;
            frontier_phi_37_36_ladder_2 = _2226;
        }
        _2292 = frontier_phi_37_36_ladder_2;
        _2294 = frontier_phi_37_36_ladder_1;
        _2296 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2292 = _2226;
        _2294 = _2227;
        _2296 = _2228;
    }
    uvec4 _2301 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2303 = _2301.x * 14u;
    uint _2304 = _2303 + 13u;
    float _2311 = _974 + (-1.0);
    float _2316 = (cbLight._m0[_2304].x * _2311) + 1.0;
    float _2317 = (cbLight._m0[_2304].y * _2311) + 1.0;
    float _2318 = (cbLight._m0[_2304].z * _2311) + 1.0;
    float _2319 = (cbLight._m0[_2304].w * _2311) + 1.0;
    uint _2320 = _2303 + 5u;
    float _2326 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
    uint _2330 = _2303 + 4u;
    float _2339 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
    uint _2343 = _2303 | 1u;
    float _2354 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_812, _813, _814));
    float _2357 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_812, _813, _814));
    float _4648 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _4659 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2362 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * 0.3183098733425140380859375;
    float _2364 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * 0.3183098733425140380859375;
    float _2371 = ((cbLight._m0[_2320].x * _2326) * _2364) + (((cbLight._m0[_2330].x * _2292) * _2339) * _2362);
    float _2372 = ((_2326 * cbLight._m0[_2320].y) * _2364) + (((cbLight._m0[_2330].y * _2294) * _2339) * _2362);
    float _2373 = ((_2326 * cbLight._m0[_2320].z) * _2364) + (((cbLight._m0[_2330].z * _2296) * _2339) * _2362);
    uvec4 _2377 = floatBitsToUint(cbLight._m0[_2303 + 12u]);
    bool _2379 = _2377.x == 0u;
    float _2481;
    float _2483;
    float _2485;
    if (_2379)
    {
        _2481 = _2371;
        _2483 = _2372;
        _2485 = _2373;
    }
    else
    {
        uint _2489 = _2303 + 6u;
        float _2505 = (dot(vec3(cbLight._m0[_2303 + 2u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2506 = _2505 * _2505;
        float _4670 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2507 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2508 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2481 = (((cbLight._m0[_2489].x * 0.3183098733425140380859375) * _2507) * _2508) + _2371;
        _2483 = (((cbLight._m0[_2489].y * 0.3183098733425140380859375) * _2507) * _2508) + _2372;
        _2485 = (((cbLight._m0[_2489].z * 0.3183098733425140380859375) * _2507) * _2508) + _2373;
    }
    bool _2488 = _2377.y == 0u;
    float _2543;
    float _2545;
    float _2547;
    if (_2488)
    {
        _2543 = _2481;
        _2545 = _2483;
        _2547 = _2485;
    }
    else
    {
        uint _2705 = _2303 + 7u;
        float _2721 = (dot(vec3(cbLight._m0[_2303 + 3u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2722 = _2721 * _2721;
        float _4686 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2723 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2724 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2543 = (((cbLight._m0[_2705].x * 0.3183098733425140380859375) * _2723) * _2724) + _2481;
        _2545 = (((cbLight._m0[_2705].y * 0.3183098733425140380859375) * _2723) * _2724) + _2483;
        _2547 = (((cbLight._m0[_2705].z * 0.3183098733425140380859375) * _2723) * _2724) + _2485;
    }
    uint _2550 = _2303 + 8u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _815) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2303].x + _891;
    float _2566 = cbLight._m0[_2303].y + _892;
    float _2567 = cbLight._m0[_2303].z + _893;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2303].xyz));
    float _4702 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _4713 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _2579 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2580 = dot(vec3(_812, _813, _814), vec3(_2572, _2573, _2574));
    float _4724 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _2584 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2572, _2573, _2574));
    float _4735 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2588 = _2564 * _2564;
    float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
    float _2603 = (exp2(log2(1.0 - (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2604 = 1.0 - _2564;
    float _2615 = (0.5 / (((_2579 * ((_2578 * _2604) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2604) + _2564) * _2578))) * _2578;
    float _4746 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2617 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
    uint _2631 = _2303 + 9u;
    float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _815) * 0.949999988079071044921875);
    float _2643 = _2642 * _2642;
    float _2644 = cbLight._m0[_2343].x + _891;
    float _2645 = cbLight._m0[_2343].y + _892;
    float _2646 = cbLight._m0[_2343].z + _893;
    float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
    float _2651 = _2650 * _2644;
    float _2652 = _2650 * _2645;
    float _2653 = _2650 * _2646;
    float _2654 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2343].xyz));
    float _4757 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2658 = dot(vec3(_812, _813, _814), vec3(_2651, _2652, _2653));
    float _4768 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2661 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _2662 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2651, _2652, _2653));
    float _4779 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2666 = _2643 * _2643;
    float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
    float _2679 = (exp2(log2(1.0 - (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2680 = 1.0 - _2643;
    float _2690 = (0.5 / (((_2579 * ((_2657 * _2680) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2680) + _2643) * _2657))) * _2657;
    float _4790 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2692 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
    float _2702 = (((_2679 * cbLight._m0[_2631].x) * _2692) * _2326) + ((((cbLight._m0[_2550].x * _2292) * _2603) * _2617) * _2339);
    float _2703 = (((_2679 * cbLight._m0[_2631].y) * _2692) * _2326) + ((((cbLight._m0[_2550].y * _2294) * _2603) * _2617) * _2339);
    float _2704 = (((_2679 * cbLight._m0[_2631].z) * _2692) * _2326) + ((((cbLight._m0[_2550].z * _2296) * _2603) * _2617) * _2339);
    float _2760;
    float _2762;
    float _2764;
    if (_2379)
    {
        _2760 = _2702;
        _2762 = _2703;
        _2764 = _2704;
    }
    else
    {
        uint _2766 = _2303 + 2u;
        uint _2770 = _2303 + 10u;
        float _2784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2766].w)) * _815) * 0.949999988079071044921875);
        float _2785 = _2784 * _2784;
        float _2786 = cbLight._m0[_2766].x + _891;
        float _2787 = cbLight._m0[_2766].y + _892;
        float _2788 = cbLight._m0[_2766].z + _893;
        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
        float _2793 = _2792 * _2786;
        float _2794 = _2792 * _2787;
        float _2795 = _2792 * _2788;
        float _2796 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2766].xyz));
        float _4801 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2800 = dot(vec3(_812, _813, _814), vec3(_2793, _2794, _2795));
        float _4812 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2804 = dot(vec3(cbLight._m0[_2766].xyz), vec3(_2793, _2794, _2795));
        float _4823 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2808 = _2785 * _2785;
        float _2812 = ((_2803 * _2803) * (_2808 + (-1.0))) + 1.0;
        float _2821 = (exp2(log2(1.0 - (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2822 = 1.0 - _2785;
        float _2832 = (0.5 / (((_2579 * ((_2799 * _2822) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2822) + _2785) * _2799))) * _2799;
        float _4834 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2834 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2808 / ((_2812 * _2812) * 3.141590118408203125));
        float _2835 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2760 = (((_2821 * cbLight._m0[_2770].x) * _2834) * _2835) + _2702;
        _2762 = (((_2821 * cbLight._m0[_2770].y) * _2834) * _2835) + _2703;
        _2764 = (((_2821 * cbLight._m0[_2770].z) * _2834) * _2835) + _2704;
    }
    float _2866;
    float _2868;
    float _2870;
    if (_2488)
    {
        _2866 = _2760;
        _2868 = _2762;
        _2870 = _2764;
    }
    else
    {
        uint _2877 = _2303 + 3u;
        uint _2881 = _2303 + 11u;
        float _2895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2877].w)) * _815) * 0.949999988079071044921875);
        float _2896 = _2895 * _2895;
        float _2897 = cbLight._m0[_2877].x + _891;
        float _2898 = cbLight._m0[_2877].y + _892;
        float _2899 = cbLight._m0[_2877].z + _893;
        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
        float _2904 = _2903 * _2897;
        float _2905 = _2903 * _2898;
        float _2906 = _2903 * _2899;
        float _2907 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2877].xyz));
        float _4850 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2910 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2911 = dot(vec3(_812, _813, _814), vec3(_2904, _2905, _2906));
        float _4861 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2914 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _2915 = dot(vec3(cbLight._m0[_2877].xyz), vec3(_2904, _2905, _2906));
        float _4872 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2919 = _2896 * _2896;
        float _2923 = ((_2914 * _2914) * (_2919 + (-1.0))) + 1.0;
        float _2932 = (exp2(log2(1.0 - (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2933 = 1.0 - _2896;
        float _2943 = (0.5 / (((_2579 * ((_2910 * _2933) + _2896)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2933) + _2896) * _2910))) * _2910;
        float _4883 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2945 = (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2919 / ((_2923 * _2923) * 3.141590118408203125));
        float _2946 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2866 = (((_2932 * cbLight._m0[_2881].x) * _2945) * _2946) + _2760;
        _2868 = (((_2932 * cbLight._m0[_2881].y) * _2945) * _2946) + _2762;
        _2870 = (((_2932 * cbLight._m0[_2881].z) * _2945) * _2946) + _2764;
    }
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    if (_2301.y == 0u)
    {
        uvec4 _2967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2968 = _2967.x;
        uint _2979 = uint((float(_2967.y) * floor(float(uint(cbSceneParam._m0[85u].y * _912) / _2968))) + floor(float(uint(cbSceneParam._m0[85u].x * _911) / _2968)));
        float _2989 = (log2(_2079 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2990 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        uint _2993 = uint(isnan(14.0) ? _2990 : (isnan(_2990) ? 14.0 : min(_2990, 14.0)));
        uvec4 _2998 = texelFetch(g_lightClusterGridBuffer, int(((_2993 << 2u) + (_2979 << 6u)) >> 2u));
        uint _2999 = _2998.x;
        uint _3000 = _2967.z;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        if (((((1u << ((_3000 >> 4u) & 15u)) + 4294967295u) & _2999) == 0u) || ((_3000 & 240u) == 0u))
        {
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
        }
        else
        {
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            uint _3238 = 0u;
            uint _3247;
            bool _3248;
            for (;;)
            {
                _3247 = texelFetch(g_lightClassification, int((((_2993 << 5u) + (_2979 << 9u)) + (_3238 << 2u)) >> 2u)).x;
                _3248 = _3247 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3248)
                {
                    frontier_phi_71_pred = _3237;
                    frontier_phi_71_pred_1 = _3236;
                    frontier_phi_71_pred_2 = _3235;
                    frontier_phi_71_pred_3 = _3234;
                    frontier_phi_71_pred_4 = _3233;
                    frontier_phi_71_pred_5 = _3232;
                }
                else
                {
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    uint _3383;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3235;
                    _3381 = _3236;
                    _3382 = _3237;
                    _3383 = _3247;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    for (;;)
                    {
                        uint _3387 = uint(findLSB(_3383)) + (_3238 << 5u);
                        uint _3384 = (_3383 + 4294967295u) & _3383;
                        uint _3389 = _3387 * 48u;
                        vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 3u)).x));
                        uint _3409 = (_3387 * 48u) + 4u;
                        vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3409)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 3u)).x));
                        uint _3428 = (_3387 * 48u) + 8u;
                        vec3 _3439 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3428)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 2u)).x));
                        float _3443 = _3403.x - _2077;
                        float _3444 = _3403.y - _2078;
                        float _3445 = _3403.z - _2079;
                        float _3446 = dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445));
                        float _3449 = inversesqrt(_3446);
                        float _3450 = _3449 * _3443;
                        float _3451 = _3449 * _3444;
                        float _3452 = _3449 * _3445;
                        float _3453 = dot(vec3(_930, _933, _936), vec3(_3450, _3451, _3452));
                        float _3458 = 1.0 - (_3446 * _3403.w);
                        float _4909 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3459 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3460 = sqrt(_3446) * _3422.w;
                        float _3463 = 1.39999997615814208984375 / (_3460 + 1.39999997615814208984375);
                        float _3464 = _3463 * _3463;
                        float _3467 = ((1.0 - _3464) * _3453) + _3464;
                        float _3470 = _3460 * _3460;
                        float _3474 = ((isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0))) * _3459) / ((_3470 * 0.699999988079071044921875) + 1.0);
                        float _3478 = (-0.0) - _2077;
                        float _3479 = (-0.0) - _2078;
                        float _3480 = (-0.0) - _2079;
                        float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                        float _3485 = _3484 * _3478;
                        float _3486 = _3484 * _3479;
                        float _3487 = _3484 * _3480;
                        float _3494 = exp2(log2(1.0 / ((_3470 * 3.5) + 5.0)) * 0.25);
                        float _3495 = 1.0 - _990;
                        float _3502 = sqrt(1.0 - ((1.0 - (_3495 * _3495)) * (1.0 - (_3494 * _3494))));
                        float _3503 = _3502 * _3502;
                        float _3504 = _3503 * _3503;
                        float _3505 = _3485 + _3450;
                        float _3506 = _3486 + _3451;
                        float _3507 = _3487 + _3452;
                        float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                        float _3515 = dot(vec3(_930, _933, _936), vec3(_3485, _3486, _3487));
                        float _4925 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3519 = dot(vec3(_930, _933, _936), vec3(_3511 * _3505, _3511 * _3506, _3511 * _3507));
                        float _4936 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3522 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3526 = ((_3522 * _3522) * (_3504 + (-1.0))) + 1.0;
                        float _3527 = _3463 * _3503;
                        float _3528 = _3527 * _3527;
                        float _3531 = ((1.0 - _3528) * _3453) + _3528;
                        float _4947 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3532 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3533 = 1.0 - _3503;
                        float _3543 = (0.5 / (((_3532 * ((_3518 * _3533) + _3503)) + 9.9999999392252902907785028219223e-09) + (((_3532 * _3533) + _3503) * _3518))) * _3532;
                        float _4958 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3554 = (((_3504 * 3.1415927410125732421875) * (isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0)))) / ((_3526 * _3526) * ((_3470 * 2.1991131305694580078125) + 3.141590118408203125))) * _3459;
                        _3307 = (_3474 * _3422.x) + _3380;
                        _3308 = (_3474 * _3422.y) + _3381;
                        _3309 = (_3474 * _3422.z) + _3382;
                        _3304 = (_3554 * _3439.x) + _3377;
                        _3305 = (_3554 * _3439.y) + _3378;
                        _3306 = (_3554 * _3439.z) + _3379;
                        if (_3384 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3307;
                            _3381 = _3308;
                            _3382 = _3309;
                            _3383 = _3384;
                        }
                    }
                    frontier_phi_71_pred = _3309;
                    frontier_phi_71_pred_1 = _3308;
                    frontier_phi_71_pred_2 = _3307;
                    frontier_phi_71_pred_3 = _3306;
                    frontier_phi_71_pred_4 = _3305;
                    frontier_phi_71_pred_5 = _3304;
                }
                _3090 = frontier_phi_71_pred;
                _3088 = frontier_phi_71_pred_1;
                _3086 = frontier_phi_71_pred_2;
                _3084 = frontier_phi_71_pred_3;
                _3082 = frontier_phi_71_pred_4;
                _3080 = frontier_phi_71_pred_5;
                uint _3239 = _3238 + 1u;
                if (_3239 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3232 = _3080;
                    _3233 = _3082;
                    _3234 = _3084;
                    _3235 = _3086;
                    _3236 = _3088;
                    _3237 = _3090;
                    _3238 = _3239;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
        }
        uvec4 _3093 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3094 = _3093.z;
        uint _3096 = (_3094 >> 8u) & 15u;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        if (((4294967295u << _3096) & _2999) == 0u)
        {
            _3200 = _3079;
            _3202 = _3081;
            _3204 = _3083;
            _3206 = _3085;
            _3208 = _3087;
            _3210 = _3089;
        }
        else
        {
            float _3225 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
            float _3226 = _3225 * _2077;
            float _3227 = _3225 * _2078;
            float _3228 = _3225 * _2079;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3096 < ((_3094 >> 12u) & 15u))
            {
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3211;
                float _3360 = _3079;
                float _3361 = _3081;
                float _3362 = _3083;
                float _3363 = _3085;
                float _3364 = _3087;
                float _3365 = _3089;
                uint _3366 = _3096;
                uint _3375;
                bool _3376;
                for (;;)
                {
                    _3375 = texelFetch(g_lightClassification, int((((_2993 << 5u) + (_2979 << 9u)) + (_3366 << 2u)) >> 2u)).x;
                    _3376 = _3375 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3376)
                    {
                        frontier_phi_82_pred = _3365;
                        frontier_phi_82_pred_1 = _3364;
                        frontier_phi_82_pred_2 = _3363;
                        frontier_phi_82_pred_3 = _3362;
                        frontier_phi_82_pred_4 = _3361;
                        frontier_phi_82_pred_5 = _3360;
                    }
                    else
                    {
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3581 = _3360;
                        float _3582 = _3361;
                        float _3583 = _3362;
                        float _3584 = _3363;
                        float _3585 = _3364;
                        float _3586 = _3365;
                        uint _3587 = _3375;
                        uint _3588;
                        vec4 _3613;
                        float _3614;
                        vec4 _3629;
                        vec3 _3641;
                        vec4 _3656;
                        vec4 _3671;
                        float _3717;
                        bool _3718;
                        for (;;)
                        {
                            uint _3598 = ((_3366 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3587));
                            _3588 = (_3587 + 4294967295u) & _3587;
                            uint _3600 = _3598 * 40u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3614 = _3613.w;
                            uint _3616 = (_3598 * 40u) + 4u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3598 * 40u) + 8u;
                            _3641 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x));
                            uint _3643 = (_3598 * 40u) + 16u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3598 * 40u) + 20u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3598 * 40u) + 24u;
                            vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3692 = (_3598 * 40u) + 28u;
                            vec4 _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            _3717 = fma(_2079, _3705.z, fma(_2078, _3705.y, _3705.x * _2077)) + _3705.w;
                            _3718 = !((fma(_2079, _3686.z, fma(_2078, _3686.y, _3686.x * _2077)) + _3686.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3718)
                            {
                                float _3745 = _3613.x - _2077;
                                float _3746 = _3613.y - _2078;
                                float _3747 = _3613.z - _2079;
                                float _3748 = dot(vec3(_3745, _3746, _3747), vec3(_3745, _3746, _3747));
                                float _3751 = inversesqrt(_3748);
                                float _3752 = _3751 * _3745;
                                float _3753 = _3751 * _3746;
                                float _3754 = _3751 * _3747;
                                float _3758 = 1.0 - (_3748 / (_3614 * _3614));
                                float _4969 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3763 = sqrt(_3748) * _3629.w;
                                float _3765 = 1.39999997615814208984375 / (_3763 + 1.39999997615814208984375);
                                float _3766 = _3765 * _3765;
                                float _3769 = ((1.0 - _3766) * dot(vec3(_3752, _3753, _3754), vec3(_930, _933, _936))) + _3766;
                                float _3772 = _3763 * _3763;
                                float _3776 = (fma(_2079, _3656.z, fma(_2078, _3656.y, _3656.x * _2077)) + _3656.w) / _3717;
                                float _3777 = (fma(_2079, _3671.z, fma(_2078, _3671.y, _3671.x * _2077)) + _3671.w) / _3717;
                                float _3781 = 1.0 - dot(vec2(_3776, _3777), vec2(_3776, _3777));
                                float _4985 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3783 = _3782 * (((isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0))) * _3759) / ((_3772 * 0.699999988079071044921875) + 1.0));
                                float _3795 = exp2(log2(1.0 / ((_3772 * 3.5) + 5.0)) * 0.25);
                                float _3796 = 1.0 - _990;
                                float _3803 = sqrt(1.0 - ((1.0 - (_3796 * _3796)) * (1.0 - (_3795 * _3795))));
                                float _3804 = _3803 * _3803;
                                float _3805 = _3804 * _3804;
                                float _3806 = _3752 - _3226;
                                float _3807 = _3753 - _3227;
                                float _3808 = _3754 - _3228;
                                float _3812 = inversesqrt(dot(vec3(_3806, _3807, _3808), vec3(_3806, _3807, _3808)));
                                float _3816 = dot(vec3(_930, _933, _936), vec3((-0.0) - _3226, (-0.0) - _3227, (-0.0) - _3228));
                                float _4996 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3820 = dot(vec3(_930, _933, _936), vec3(_3812 * _3806, _3812 * _3807, _3812 * _3808));
                                float _5007 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3823 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3827 = ((_3823 * _3823) * (_3805 + (-1.0))) + 1.0;
                                float _3828 = _3765 * _3804;
                                float _3829 = _3828 * _3828;
                                float _3835 = ((1.0 - _3829) * dot(vec3(_930, _933, _936), vec3(_3752, _3753, _3754))) + _3829;
                                float _5018 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3836 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3837 = 1.0 - _3804;
                                float _3847 = (0.5 / (((_3836 * ((_3819 * _3837) + _3804)) + 9.9999999392252902907785028219223e-09) + (((_3836 * _3837) + _3804) * _3819))) * _3836;
                                float _5029 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3857 = (_3782 * _3759) * (((_3805 * 3.1415927410125732421875) * (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0)))) / ((_3827 * _3827) * ((_3772 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3783 * _3629.z;
                                frontier_phi_88_pred_1 = _3783 * _3629.y;
                                frontier_phi_88_pred_2 = _3783 * _3629.x;
                                frontier_phi_88_pred_3 = _3857 * _3641.z;
                                frontier_phi_88_pred_4 = _3857 * _3641.y;
                                frontier_phi_88_pred_5 = _3857 * _3641.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3866 = frontier_phi_88_pred;
                            _3865 = frontier_phi_88_pred_1;
                            _3864 = frontier_phi_88_pred_2;
                            _3863 = frontier_phi_88_pred_3;
                            _3862 = frontier_phi_88_pred_4;
                            _3861 = frontier_phi_88_pred_5;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            if (_3588 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3588;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3573;
                        frontier_phi_82_pred_1 = _3572;
                        frontier_phi_82_pred_2 = _3571;
                        frontier_phi_82_pred_3 = _3570;
                        frontier_phi_82_pred_4 = _3569;
                        frontier_phi_82_pred_5 = _3568;
                    }
                    _3211 = frontier_phi_82_pred;
                    _3209 = frontier_phi_82_pred_1;
                    _3207 = frontier_phi_82_pred_2;
                    _3205 = frontier_phi_82_pred_3;
                    _3203 = frontier_phi_82_pred_4;
                    _3201 = frontier_phi_82_pred_5;
                    uint _3367 = _3366 + 1u;
                    if (_3367 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3360 = _3201;
                        _3361 = _3203;
                        _3362 = _3205;
                        _3363 = _3207;
                        _3364 = _3209;
                        _3365 = _3211;
                        _3366 = _3367;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3207;
                frontier_phi_63_64_ladder_1 = _3211;
                frontier_phi_63_64_ladder_2 = _3209;
                frontier_phi_63_64_ladder_3 = _3205;
                frontier_phi_63_64_ladder_4 = _3203;
                frontier_phi_63_64_ladder_5 = _3201;
            }
            else
            {
                frontier_phi_63_64_ladder = _3085;
                frontier_phi_63_64_ladder_1 = _3089;
                frontier_phi_63_64_ladder_2 = _3087;
                frontier_phi_63_64_ladder_3 = _3083;
                frontier_phi_63_64_ladder_4 = _3081;
                frontier_phi_63_64_ladder_5 = _3079;
            }
            _3200 = frontier_phi_63_64_ladder_5;
            _3202 = frontier_phi_63_64_ladder_4;
            _3204 = frontier_phi_63_64_ladder_3;
            _3206 = frontier_phi_63_64_ladder;
            _3208 = frontier_phi_63_64_ladder_2;
            _3210 = frontier_phi_63_64_ladder_1;
        }
        float _3215 = isnan(1.0) ? _974 : (isnan(_974) ? 1.0 : min(_974, 1.0));
        _3012 = (_3215 * _3206) + _2543;
        _3014 = (_3215 * _3208) + _2545;
        _3016 = (_3215 * _3210) + _2547;
        _3018 = ((_3200 * 0.039999999105930328369140625) * _3215) + _2866;
        _3020 = ((_3202 * 0.039999999105930328369140625) * _3215) + _2868;
        _3022 = ((_3204 * 0.039999999105930328369140625) * _3215) + _2870;
    }
    else
    {
        _3012 = _2543;
        _3014 = _2545;
        _3016 = _2547;
        _3018 = _2866;
        _3020 = _2868;
        _3022 = _2870;
    }
    float _5045 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _5056 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _5067 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _3039 = ((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_3012 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _974))) + ((_3018 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _3040 = ((isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_3014 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _974))) + ((_3020 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _3041 = ((isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0))) * (_3016 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _974))) + ((_3022 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    uint _3042 = _283 + 6u;
    float _3050 = _911 / cbSceneParam._m0[86u].x;
    float _3051 = _912 / cbSceneParam._m0[86u].y;
    vec4 _3065 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3050, _3051, (log2((isnan(cbSceneParam._m0[77u].w) ? _833 : (isnan(_833) ? cbSceneParam._m0[77u].w : min(_833, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3067 = _3065.x;
    float _3068 = _3065.y;
    float _3069 = _3065.z;
    float _3070 = _3065.w;
    float _3142;
    float _3144;
    float _3146;
    float _3148;
    if (_833 > cbSceneParam._m0[78u].w)
    {
        float _3104 = isnan(_833) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _833 : min(cbSceneParam._m0[80u].w, _833));
        float _3105 = _3104 / _833;
        float _3116 = _3105 * _884;
        float _3117 = _885 * _3105;
        float _3118 = (-0.0) - _3117;
        float _3120 = _3105 * _886;
        float _3122 = (cbSceneParam._m0[77u].w * _3118) / _3104;
        float _3123 = _3122 + cbSceneParam._m0[79u].w;
        float _3124 = cbSceneParam._m0[79u].w - _3117;
        float _3130 = sqrt(((_3116 * _3116) + (_3117 * _3117)) + (_3120 * _3120));
        float _3133 = (1.0 - (cbSceneParam._m0[77u].w / _3104)) * _3130;
        float _3138 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3140 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3317;
        if (abs((_3118 - _3122) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3317 = ((((_3123 > 0.0) ? exp2(_3138 * _3123) : (2.0 - exp2(_3140 * _3123))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3133;
        }
        else
        {
            float _3261 = 1.0 / cbSceneParam._m0[80u].x;
            float _3262 = isnan(_3124) ? _3123 : (isnan(_3123) ? _3124 : max(_3123, _3124));
            float _3263 = isnan(_3124) ? _3123 : (isnan(_3123) ? _3124 : min(_3123, _3124));
            float _3272 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : min(_3262, 0.0));
            float _3273 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : min(_3263, 0.0));
            _3317 = ((abs(_3130 / _3118) * cbSceneParam._m0[80u].y) * ((((_3272 - _3273) * 2.0) - ((exp2(_3138 * (isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0)))) - exp2(_3138 * (isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))))) * _3261)) - ((exp2(_3140 * _3272) - exp2(_3140 * _3273)) * _3261))) + (_3133 * cbSceneParam._m0[80u].z);
        }
        vec4 _3319 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3050, _3051, 1.0), 0.0);
        float _3328 = exp2((_3317 * (-1.44269502162933349609375)) * (1.0 - _3319.w));
        float _3329 = log2(_3328);
        float _3345 = log2(_3070);
        _3142 = (exp2(_3345 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3329 * cbSceneParam._m0[78u].x)) * _3319.x) / cbSceneParam._m0[78u].x)) + _3067;
        _3144 = (exp2(_3345 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3329 * cbSceneParam._m0[78u].y)) * _3319.y) / cbSceneParam._m0[78u].y)) + _3068;
        _3146 = (exp2(_3345 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3329 * cbSceneParam._m0[78u].z)) * _3319.z) / cbSceneParam._m0[78u].z)) + _3069;
        _3148 = _3328 * _3070;
    }
    else
    {
        _3142 = _3067;
        _3144 = _3068;
        _3146 = _3069;
        _3148 = _3070;
    }
    bool _3355;
    vec4 _3158;
    vec4 _3180;
    float _3182;
    float _3186;
    float _3187;
    float _3188;
    float _3189;
    bool _3199;
    for (;;)
    {
        _3158 = cbMatDynParam._m0[0u];
        float _3160 = roundEven(_3158.y);
        bool _3161 = _3160 == 3.0;
        float _3162 = log2(_3148);
        float _3169 = exp2(_3162 * cbSceneParam._m0[78u].x) * _3039;
        float _3170 = exp2(_3162 * cbSceneParam._m0[78u].y) * _3040;
        float _3171 = exp2(_3162 * cbSceneParam._m0[78u].z) * _3041;
        float _3178 = _900 + (-0.5);
        _3180 = cbMtdParam._m0[1u];
        _3182 = _3180.y * _3178;
        float _3185 = (_3160 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3186 = _3185 * (_3161 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3142)));
        _3187 = _3185 * (_3161 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3144)));
        _3188 = _3185 * (_3161 ? _3171 : (_3171 + (cbSceneParam._m0[72u].w * _3146)));
        _3189 = _3178 * 0.999000012874603271484375;
        _3199 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3199)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3189) < 0.5)
            {
                _3355 = true;
                break;
            }
        }
        uint _3296 = _949 + uint(_3158.w);
        if ((cbInstanceData._m0[_3296].w < 1.0) && ((cbInstanceData._m0[_3296].w + _3189) < 0.5))
        {
            _3355 = true;
            break;
        }
        if ((_3182 + 1.0) < _3180.x)
        {
            _3355 = true;
            break;
        }
        _3355 = false;
        break;
    }
    float _3559;
    if (_3355)
    {
        discard_state = true;
        _3559 = 0.0;
    }
    else
    {
        _3559 = cbInstanceData._m0[_3042].w;
    }
    SV_Target.x = _3186;
    SV_Target.y = _3187;
    SV_Target.z = _3188;
    SV_Target.w = _3559;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3042].w;
    discard_exit();
}


