#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1271;
float _3916;
float _3917;
float _3918;
float _3919;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3928 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3939 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3950 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].z) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3961 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _450 = (_443 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _451 = (_443 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _452 = (_443 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _456 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _450;
    float _459 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _451;
    float _462 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _452;
    float _469 = ((_450 - _456) * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) + _456;
    float _470 = ((_451 - _459) * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) + _459;
    float _471 = ((_452 - _462) * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) + _462;
    vec4 _484 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _528 = _526.x;
    float _529 = _526.y;
    float _530 = _526.z;
    float _539 = ((_509.z - _530) * _443) + _530;
    float _542 = ((((_509.x - _528) * _443) + _528) * 2.0) + (-1.0);
    float _543 = ((((_509.y - _529) * _443) + _529) * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _3972 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _583 = (_542 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_484.x * 2.0) + (-1.0)))) + (((_571.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _584 = (_543 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_484.y * 2.0) + (-1.0)))) + (((_571.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _598 = _596.x;
    float _599 = 1.0 - _598;
    float _625 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_598 - _599) * cbMtdParam._m0[24u].y) + _599) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3983 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _634 = ((((cbMtdParam._m0[10u].x - _469) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _626) + _469;
    float _635 = ((((cbMtdParam._m0[10u].y - _470) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _626) + _470;
    float _636 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _471)) * _626) + _471;
    float _641 = (((_484.z - _539) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _539;
    float _645 = ((_571.z - _641) * cbMtdParam._m0[19u].w) + _641;
    float _649 = ((cbMtdParam._m0[23u].y - _645) * _626) + _645;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _674 = (_668.x * 2.0) + (-1.0);
    float _675 = (_668.y * 2.0) + (-1.0);
    float _676 = dot(vec2(_674, _675), vec2(_674, _675));
    float _3994 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _692 = (_626 * (((cbMtdParam._m0[22u].z * _583) - _583) + _674)) + _583;
    float _693 = (_626 * (((cbMtdParam._m0[22u].z * _584) - _584) + _675)) + _584;
    float _694 = (_626 * (sqrt(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) - _549)) + _549;
    float _696 = cbMtdParam._m0[22u].x + _571.w;
    float _699 = fma(_694, _245 * NORMAL.x, fma(_693, _252 * TANGENT.x, (_238 * _230) * _692));
    float _702 = fma(_694, _245 * NORMAL.y, fma(_693, _252 * TANGENT.y, (_238 * _231) * _692));
    float _705 = fma(_694, _245 * NORMAL.z, fma(_693, _252 * TANGENT.z, (_238 * _232) * _692));
    float _709 = inversesqrt(dot(vec3(_699, _702, _705), vec3(_699, _702, _705)));
    float _710 = _709 * _699;
    float _711 = _709 * _702;
    float _712 = _709 * _705;
    float _4005 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _713 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4027 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4038 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4049 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _782 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _772);
    float _783 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _772);
    float _784 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _772);
    float _788 = inversesqrt(dot(vec3(_782, _783, _784), vec3(_782, _783, _784)));
    float _789 = _782 * _788;
    float _790 = _783 * _788;
    float _791 = _784 * _788;
    vec4 _796 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _798 = _796.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _952 = sqrt(((_782 * _782) + (_783 * _783)) + (_784 * _784));
        float _958 = (cbMatDynParam._m0[5u].x * _952) + cbMatDynParam._m0[5u].y;
        float _4060 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _963 = (cbMatDynParam._m0[5u].z * _952) + cbMatDynParam._m0[5u].w;
        float _4071 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) - _959)) + _959) < ((_798 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _809 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _810 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _828 = fma(_712, cbSceneParam._m0[5u].z, fma(_711, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _710));
    float _831 = fma(_712, cbSceneParam._m0[6u].z, fma(_711, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _710));
    float _834 = fma(_712, cbSceneParam._m0[7u].z, fma(_711, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _710));
    uint _847 = _277 + 9u;
    uint _848 = _847 + uint(cbMatDynParam._m0[0u].w);
    float _854 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_848].x;
    float _855 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_848].y;
    float _856 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_848].z;
    float _4082 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    vec4 _868 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _809, cbSceneParam._m0[86u].y * _810));
    float _872 = ((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * TEXCOORD_5.w) * _868.x;
    float _873 = dot(vec3(_710, _711, _712), vec3(_789, _790, _791));
    float _876 = _873 * 2.0;
    float _880 = (_876 * _710) - _789;
    float _881 = (_876 * _711) - _790;
    float _882 = (_876 * _712) - _791;
    float _886 = abs(dot(vec3(_789, _790, _791), vec3(_710, _711, _712)));
    float _4115 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _888 = sqrt(_713);
    float _901 = exp2((_888 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_888 * 3.0));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1270;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _995 = fma(_941, cbModelParam._m0[26u].z, fma(_937, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933));
        float _999 = fma(_941, cbModelParam._m0[27u].z, fma(_937, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933));
        float _1003 = fma(_941, cbModelParam._m0[28u].z, fma(_937, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933));
        float _1028 = _933 + _710;
        float _1029 = _937 + _711;
        float _1030 = _941 + _712;
        float _1040 = fma(_1030, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028)) - _995;
        float _1041 = fma(_1030, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028)) - _999;
        float _1042 = fma(_1030, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028)) - _1003;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_995 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_999 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[34u].z) + ((((((_1003 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1098 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1064.x + (-0.5));
        float _1100 = _1098 * (_1064.y + (-0.5));
        float _1101 = _1098 * (_1064.z + (-0.5));
        float _1108 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1071.x + (-0.5));
        float _1110 = _1108 * (_1071.y + (-0.5));
        float _1111 = _1108 * (_1071.z + (-0.5));
        float _1118 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1078.x + (-0.5));
        float _1120 = _1118 * (_1078.y + (-0.5));
        float _1121 = _1118 * (_1078.z + (-0.5));
        float _1128 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1085.x + (-0.5));
        float _1130 = _1128 * (_1085.y + (-0.5));
        float _1131 = _1128 * (_1085.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1152 = (dot(vec3(_710, _711, _712), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1162 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _4163 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1164 + 1.0))) + _1169) * _1132;
        float _1179 = _1100 * 0.5;
        float _1180 = _1110 * 0.5;
        float _1181 = _1120 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_710, _711, _712), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _4196 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1206 + 1.0))) + _1211) * _1133;
        float _1221 = _1101 * 0.5;
        float _1222 = _1111 * 0.5;
        float _1223 = _1121 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_710, _711, _712), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4229 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1248 + 1.0))) + _1253) * _1134;
        _1270 = _1101;
        _1272 = _1100;
        _1273 = _1099;
        _1274 = _1111;
        _1275 = _1110;
        _1276 = _1109;
        _1277 = _1121;
        _1278 = _1120;
        _1279 = _1119;
        _1280 = _1134;
        _1281 = _1133;
        _1282 = _1132;
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _1271;
        _1272 = _1271;
        _1273 = _1271;
        _1274 = _1271;
        _1275 = _1271;
        _1276 = _1271;
        _1277 = _1271;
        _1278 = _1271;
        _1279 = _1271;
        _1280 = _1271;
        _1281 = _1271;
        _1282 = _1271;
        _1283 = 0.0;
        _1284 = 0.0;
        _1285 = 0.0;
    }
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1313 = fma(_941, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _933));
        float _1317 = fma(_941, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _933));
        float _1321 = fma(_941, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _933));
        float _1344 = _933 + _710;
        float _1345 = _937 + _711;
        float _1346 = _941 + _712;
        float _1356 = fma(_1346, cbModelParam._m0[30u].z, fma(_1345, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1344)) - _1313;
        float _1357 = fma(_1346, cbModelParam._m0[31u].z, fma(_1345, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1344)) - _1317;
        float _1358 = fma(_1346, cbModelParam._m0[32u].z, fma(_1345, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1344)) - _1321;
        float _1362 = inversesqrt(dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358)));
        float _1375 = ((_1362 * _1356) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1313 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1362 * _1357) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1317 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1362 * _1358) / cbModelParam._m0[35u].z) + ((((((_1321 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        float _1412 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1379.x + (-0.5));
        float _1414 = _1412 * (_1379.y + (-0.5));
        float _1415 = _1412 * (_1379.z + (-0.5));
        float _1422 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1386.x + (-0.5));
        float _1424 = _1422 * (_1386.y + (-0.5));
        float _1425 = _1422 * (_1386.z + (-0.5));
        float _1432 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1393.x + (-0.5));
        float _1434 = _1432 * (_1393.y + (-0.5));
        float _1435 = _1432 * (_1393.z + (-0.5));
        float _1442 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1400.x + (-0.5));
        float _1444 = _1442 * (_1400.y + (-0.5));
        float _1445 = _1442 * (_1400.z + (-0.5));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = _1413 * 0.5;
        float _1450 = _1423 * 0.5;
        float _1451 = _1433 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_710, _711, _712), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4292 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1476 + 1.0))) + _1481) * _1446;
        float _1491 = _1414 * 0.5;
        float _1492 = _1424 * 0.5;
        float _1493 = _1434 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_710, _711, _712), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4325 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1518 + 1.0))) + _1523) * _1447;
        float _1533 = _1415 * 0.5;
        float _1534 = _1425 * 0.5;
        float _1535 = _1435 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_710, _711, _712), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4358 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1560 + 1.0))) + _1565) * _1448;
        _1582 = _1415;
        _1583 = _1414;
        _1584 = _1413;
        _1585 = _1425;
        _1586 = _1424;
        _1587 = _1423;
        _1588 = _1435;
        _1589 = _1434;
        _1590 = _1433;
        _1591 = _1448;
        _1592 = _1447;
        _1593 = _1446;
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
    }
    else
    {
        _1582 = _1271;
        _1583 = _1271;
        _1584 = _1271;
        _1585 = _1271;
        _1586 = _1271;
        _1587 = _1271;
        _1588 = _1271;
        _1589 = _1271;
        _1590 = _1271;
        _1591 = _1271;
        _1592 = _1271;
        _1593 = _1271;
        _1594 = 0.0;
        _1595 = 0.0;
        _1596 = 0.0;
    }
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1283)) + _1283;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1284)) + _1284;
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1285)) + _1285;
    float _1629 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1607, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1607, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1607, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1606));
    float _1650 = _880 * 0.5;
    float _1651 = _881 * 0.5;
    float _1652 = _882 * 0.5;
    float _1653 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1656 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1659 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1693;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1666 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1270, _1274, _1277, _1280));
        float _1670 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1272, _1275, _1278, _1281));
        float _1674 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1681 = dot(vec4(cbModelParam._m0[39u]), vec4(_1650, _1651, _1652, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1704;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1695 = dot(vec4(cbModelParam._m0[40u]), vec4(_1650, _1651, _1652, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1695) ? 0.0 : (isnan(0.0) ? _1695 : max(0.0, _1695))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1708 = (_1704 * cbModelParam._m0[1u].x) + (_1693 * (1.0 - cbModelParam._m0[1u].x));
    float _1718 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _713);
    float _1719 = isnan(_1718) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1718 : min(cbModelParam._m0[25u].z, _1718));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1768 = fma(_941, cbModelParam._m0[13u].z, fma(_937, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _933)) + cbModelParam._m0[13u].w;
        float _1772 = fma(_941, cbModelParam._m0[14u].z, fma(_937, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _933)) + cbModelParam._m0[14u].w;
        float _1776 = fma(_941, cbModelParam._m0[15u].z, fma(_937, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _933)) + cbModelParam._m0[15u].w;
        float _1779 = fma(_882, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880));
        float _1782 = fma(_882, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880));
        float _1785 = fma(_882, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880));
        float _1813;
        if (_1779 > 0.0)
        {
            _1813 = abs((1.0 - _1768) / _1779);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1768 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1813 = frontier_phi_17_15_ladder;
        }
        float _1984;
        if (_1782 > 0.0)
        {
            _1984 = abs((1.0 - _1772) / _1782);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1772 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1984 = frontier_phi_26_22_ladder;
        }
        float _2279;
        if (_1785 > 0.0)
        {
            _2279 = abs((1.0 - _1776) / _1785);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1776 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2279 = frontier_phi_38_33_ladder;
        }
        float _2281 = isnan(_1984) ? _1813 : (isnan(_1813) ? _1984 : min(_1813, _1984));
        float _2282 = isnan(_2279) ? _2281 : (isnan(_2281) ? _2279 : min(_2281, _2279));
        float _2286 = (_2282 * _1779) + _1768;
        float _2287 = (_2282 * _1782) + _1772;
        float _2288 = (_2282 * _1785) + _1776;
        float _2289 = _2282 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2289;
        float _2293 = _2289 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 > _2293) || ((_2287 < _2291) || ((_2286 < _2291) || (_2286 > _2293))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2433 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2288, cbModelParam._m0[9u].z, fma(_2287, cbModelParam._m0[9u].y, _2286 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2288, cbModelParam._m0[10u].z, fma(_2287, cbModelParam._m0[10u].y, _2286 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2288, cbModelParam._m0[11u].z, fma(_2287, cbModelParam._m0[11u].y, _2286 * cbModelParam._m0[11u].x))), _1719);
            frontier_phi_16_38_ladder = _2433.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2433.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2433.x * cbModelParam._m0[1u].y;
        }
        _1801 = frontier_phi_16_38_ladder_2;
        _1803 = frontier_phi_16_38_ladder_1;
        _1805 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1789 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_880, _881, _882), _1719);
        _1801 = _1789.x * cbModelParam._m0[1u].y;
        _1803 = _1789.y * cbModelParam._m0[1u].y;
        _1805 = _1789.z * cbModelParam._m0[1u].y;
    }
    float _1809 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _713);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1809 : min(cbModelParam._m0[25u].w, _1809));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1865 = fma(_941, cbModelParam._m0[21u].z, fma(_937, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _933)) + cbModelParam._m0[21u].w;
        float _1869 = fma(_941, cbModelParam._m0[22u].z, fma(_937, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _933)) + cbModelParam._m0[22u].w;
        float _1873 = fma(_941, cbModelParam._m0[23u].z, fma(_937, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _933)) + cbModelParam._m0[23u].w;
        float _1876 = fma(_882, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880));
        float _1879 = fma(_882, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880));
        float _1882 = fma(_882, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880));
        float _1989;
        if (_1876 > 0.0)
        {
            _1989 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1989 = frontier_phi_28_24_ladder;
        }
        float _2306;
        if (_1879 > 0.0)
        {
            _2306 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2306 = frontier_phi_40_35_ladder;
        }
        float _2633;
        if (_1882 > 0.0)
        {
            _2633 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2633 = frontier_phi_50_47_ladder;
        }
        float _2635 = isnan(_2306) ? _1989 : (isnan(_1989) ? _2306 : min(_1989, _2306));
        float _2636 = isnan(_2633) ? _2635 : (isnan(_2635) ? _2633 : min(_2635, _2633));
        float _2640 = (_2636 * _1876) + _1865;
        float _2641 = (_2636 * _1879) + _1869;
        float _2642 = (_2636 * _1882) + _1873;
        float _2643 = _2636 * 9.9999997473787516355514526367188e-05;
        float _2644 = (-1.0) - _2643;
        float _2646 = _2643 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2642 > _2646) || ((_2642 < _2644) || ((_2641 > _2646) || ((_2641 < _2644) || ((_2640 < _2644) || (_2640 > _2646))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2642, cbModelParam._m0[17u].z, fma(_2641, cbModelParam._m0[17u].y, _2640 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2642, cbModelParam._m0[18u].z, fma(_2641, cbModelParam._m0[18u].y, _2640 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2642, cbModelParam._m0[19u].z, fma(_2641, cbModelParam._m0[19u].y, _2640 * cbModelParam._m0[19u].x))), _1810);
            frontier_phi_25_50_ladder = _2760.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2760.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2760.x * cbModelParam._m0[1u].z;
        }
        _1901 = frontier_phi_25_50_ladder_2;
        _1903 = frontier_phi_25_50_ladder_1;
        _1905 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_880, _881, _882), _1810);
        _1901 = _1885.x * cbModelParam._m0[1u].z;
        _1903 = _1885.y * cbModelParam._m0[1u].z;
        _1905 = _1885.z * cbModelParam._m0[1u].z;
    }
    float _1917 = ((((1.0 - _901) * ((_888 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_901 * _888)) * _872;
    float _1918 = _1917 * ((cbModelParam._m0[1u].w * (_1901 - _1801)) + _1801);
    float _1919 = _1917 * ((cbModelParam._m0[1u].w * (_1903 - _1803)) + _1803);
    float _1920 = _1917 * ((cbModelParam._m0[1u].w * (_1905 - _1805)) + _1805);
    float _1923 = fma(_1920, cbSceneParam._m0[89u].z, fma(_1919, cbSceneParam._m0[89u].y, _1918 * cbSceneParam._m0[89u].x));
    float _1926 = fma(_1920, cbSceneParam._m0[90u].z, fma(_1919, cbSceneParam._m0[90u].y, _1918 * cbSceneParam._m0[90u].x));
    float _1929 = fma(_1920, cbSceneParam._m0[91u].z, fma(_1919, cbSceneParam._m0[91u].y, _1918 * cbSceneParam._m0[91u].x));
    float _1963 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1967 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1971 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1975 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1976 = _1963 / _1975;
    float _1977 = _1967 / _1975;
    float _1978 = _1971 / _1975;
    float _2125;
    float _2126;
    float _2127;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2005 = ((uint(_1978 > cbSceneParam._m0[59u].y) + uint(_1978 > cbSceneParam._m0[59u].x)) + uint(_1978 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2006 = _2005 + 43u;
        uint _2014 = _2005 + 44u;
        uint _2022 = _2005 + 45u;
        uint _2030 = _2005 + 46u;
        float _2041 = fma(_1975, cbSceneParam._m0[_2006].w, fma(_1971, cbSceneParam._m0[_2006].z, fma(_1967, cbSceneParam._m0[_2006].y, _1963 * cbSceneParam._m0[_2006].x)));
        float _2045 = fma(_1975, cbSceneParam._m0[_2014].w, fma(_1971, cbSceneParam._m0[_2014].z, fma(_1967, cbSceneParam._m0[_2014].y, _1963 * cbSceneParam._m0[_2014].x)));
        float _2053 = fma(_1975, cbSceneParam._m0[_2030].w, fma(_1971, cbSceneParam._m0[_2030].z, fma(_1967, cbSceneParam._m0[_2030].y, _1963 * cbSceneParam._m0[_2030].x)));
        float _2058 = cbSceneParam._m0[33u].z * _2053;
        float _2060 = cbSceneParam._m0[33u].w * _2053;
        float _2063 = fma(_1975, cbSceneParam._m0[_2022].w, fma(_1971, cbSceneParam._m0[_2022].z, fma(_1967, cbSceneParam._m0[_2022].y, _1963 * cbSceneParam._m0[_2022].x))) / _2053;
        float _2111 = (cbSceneParam._m0[33u].x - sqrt(((_1977 * _1977) + (_1976 * _1976)) + (_1978 * _1978))) * cbSceneParam._m0[33u].y;
        float _4484 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2118 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2058 + _2041) / _2053, (_2060 + _2045) / _2053), _2063), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2060 + _2041) / _2053, (_2045 - _2058) / _2053), _2063), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2041 - _2058) / _2053, (_2045 - _2060) / _2053), _2063), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2041 - _2060) / _2053, (_2058 + _2045) / _2053), _2063), 0.0)).x), vec4(0.25)));
        _2125 = 1.0 - (_2118 * cbSceneParam._m0[34u].x);
        _2126 = 1.0 - (_2118 * cbSceneParam._m0[34u].y);
        _2127 = 1.0 - (_2118 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2125 = 1.0;
        _2126 = 1.0;
        _2127 = 1.0;
    }
    float _2191;
    float _2193;
    float _2195;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2179 = fma(_1975, cbSceneParam._m0[63u].w, fma(_1971, cbSceneParam._m0[63u].z, fma(_1967, cbSceneParam._m0[63u].y, _1963 * cbSceneParam._m0[63u].x)));
        float _2180 = fma(_1975, cbSceneParam._m0[60u].w, fma(_1971, cbSceneParam._m0[60u].z, fma(_1967, cbSceneParam._m0[60u].y, _1963 * cbSceneParam._m0[60u].x))) / _2179;
        float _2181 = fma(_1975, cbSceneParam._m0[61u].w, fma(_1971, cbSceneParam._m0[61u].z, fma(_1967, cbSceneParam._m0[61u].y, _1963 * cbSceneParam._m0[61u].x))) / _2179;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2180 >= cbSceneParam._m0[64u].x) && (_2181 >= cbSceneParam._m0[64u].y)) && (_2180 <= cbSceneParam._m0[64u].z)) && (_2181 <= cbSceneParam._m0[64u].w))
        {
            float _2319 = fma(_1975, cbSceneParam._m0[62u].w, fma(_1971, cbSceneParam._m0[62u].z, fma(_1967, cbSceneParam._m0[62u].y, _1963 * cbSceneParam._m0[62u].x))) / _2179;
            float _2323 = isnan(cbSceneParam._m0[41u].w) ? _2319 : (isnan(_2319) ? cbSceneParam._m0[41u].w : max(_2319, cbSceneParam._m0[41u].w));
            float _2366 = (cbSceneParam._m0[33u].x - sqrt(((_1977 * _1977) + (_1976 * _1976)) + (_1978 * _1978))) * cbSceneParam._m0[33u].y;
            float _4500 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
            float _2373 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2180, cbSceneParam._m0[33u].w + _2181), _2323), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2180, _2181 - cbSceneParam._m0[33u].z), _2323), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2180 - cbSceneParam._m0[33u].z, _2181 - cbSceneParam._m0[33u].w), _2323), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2180 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2181), _2323), 0.0)).x), vec4(0.25)));
            float _2377 = 1.0 - (_2373 * cbSceneParam._m0[34u].x);
            float _2378 = 1.0 - (_2373 * cbSceneParam._m0[34u].y);
            float _2379 = 1.0 - (_2373 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2379) ? _2127 : (isnan(_2127) ? _2379 : min(_2127, _2379));
            frontier_phi_37_36_ladder_1 = isnan(_2378) ? _2126 : (isnan(_2126) ? _2378 : min(_2126, _2378));
            frontier_phi_37_36_ladder_2 = isnan(_2377) ? _2125 : (isnan(_2125) ? _2377 : min(_2125, _2377));
        }
        else
        {
            frontier_phi_37_36_ladder = _2127;
            frontier_phi_37_36_ladder_1 = _2126;
            frontier_phi_37_36_ladder_2 = _2125;
        }
        _2191 = frontier_phi_37_36_ladder_2;
        _2193 = frontier_phi_37_36_ladder_1;
        _2195 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2191 = _2125;
        _2193 = _2126;
        _2195 = _2127;
    }
    uvec4 _2200 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2202 = _2200.x * 14u;
    uint _2203 = _2202 + 13u;
    float _2210 = _872 + (-1.0);
    float _2215 = (cbLight._m0[_2203].x * _2210) + 1.0;
    float _2216 = (cbLight._m0[_2203].y * _2210) + 1.0;
    float _2217 = (cbLight._m0[_2203].z * _2210) + 1.0;
    float _2218 = (cbLight._m0[_2203].w * _2210) + 1.0;
    uint _2219 = _2202 + 5u;
    float _2225 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
    uint _2229 = _2202 + 4u;
    float _2238 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
    uint _2242 = _2202 | 1u;
    float _2253 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_710, _711, _712));
    float _2256 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_710, _711, _712));
    float _4536 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _4547 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2261 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * 0.3183098733425140380859375;
    float _2263 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * 0.3183098733425140380859375;
    float _2270 = ((cbLight._m0[_2219].x * _2225) * _2263) + (((cbLight._m0[_2229].x * _2191) * _2238) * _2261);
    float _2271 = ((_2225 * cbLight._m0[_2219].y) * _2263) + (((cbLight._m0[_2229].y * _2193) * _2238) * _2261);
    float _2272 = ((_2225 * cbLight._m0[_2219].z) * _2263) + (((cbLight._m0[_2229].z * _2195) * _2238) * _2261);
    uvec4 _2276 = floatBitsToUint(cbLight._m0[_2202 + 12u]);
    bool _2278 = _2276.x == 0u;
    float _2380;
    float _2382;
    float _2384;
    if (_2278)
    {
        _2380 = _2270;
        _2382 = _2271;
        _2384 = _2272;
    }
    else
    {
        uint _2388 = _2202 + 6u;
        float _2404 = (dot(vec3(cbLight._m0[_2202 + 2u].xyz), vec3(_710, _711, _712)) * 0.5) + 0.5;
        float _2405 = _2404 * _2404;
        float _4558 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2406 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2407 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2380 = (((cbLight._m0[_2388].x * 0.3183098733425140380859375) * _2406) * _2407) + _2270;
        _2382 = (((cbLight._m0[_2388].y * 0.3183098733425140380859375) * _2406) * _2407) + _2271;
        _2384 = (((cbLight._m0[_2388].z * 0.3183098733425140380859375) * _2406) * _2407) + _2272;
    }
    bool _2387 = _2276.y == 0u;
    float _2442;
    float _2444;
    float _2446;
    if (_2387)
    {
        _2442 = _2380;
        _2444 = _2382;
        _2446 = _2384;
    }
    else
    {
        uint _2604 = _2202 + 7u;
        float _2620 = (dot(vec3(cbLight._m0[_2202 + 3u].xyz), vec3(_710, _711, _712)) * 0.5) + 0.5;
        float _2621 = _2620 * _2620;
        float _4574 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2622 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2623 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2442 = (((cbLight._m0[_2604].x * 0.3183098733425140380859375) * _2622) * _2623) + _2380;
        _2444 = (((cbLight._m0[_2604].y * 0.3183098733425140380859375) * _2622) * _2623) + _2382;
        _2446 = (((cbLight._m0[_2604].z * 0.3183098733425140380859375) * _2622) * _2623) + _2384;
    }
    uint _2449 = _2202 + 8u;
    float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _713) * 0.949999988079071044921875);
    float _2463 = _2462 * _2462;
    float _2464 = cbLight._m0[_2202].x + _789;
    float _2465 = cbLight._m0[_2202].y + _790;
    float _2466 = cbLight._m0[_2202].z + _791;
    float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
    float _2471 = _2470 * _2464;
    float _2472 = _2470 * _2465;
    float _2473 = _2470 * _2466;
    float _2474 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2202].xyz));
    float _4590 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2477 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _4601 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _2478 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2479 = dot(vec3(_710, _711, _712), vec3(_2471, _2472, _2473));
    float _4612 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2482 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2483 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2471, _2472, _2473));
    float _4623 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2487 = _2463 * _2463;
    float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
    float _2502 = (exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2503 = 1.0 - _2463;
    float _2514 = (0.5 / (((_2478 * ((_2477 * _2503) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2478 * _2503) + _2463) * _2477))) * _2477;
    float _4634 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2516 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
    uint _2530 = _2202 + 9u;
    float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _713) * 0.949999988079071044921875);
    float _2542 = _2541 * _2541;
    float _2543 = cbLight._m0[_2242].x + _789;
    float _2544 = cbLight._m0[_2242].y + _790;
    float _2545 = cbLight._m0[_2242].z + _791;
    float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
    float _2550 = _2549 * _2543;
    float _2551 = _2549 * _2544;
    float _2552 = _2549 * _2545;
    float _2553 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2242].xyz));
    float _4645 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _2557 = dot(vec3(_710, _711, _712), vec3(_2550, _2551, _2552));
    float _4656 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2561 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2550, _2551, _2552));
    float _4667 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2565 = _2542 * _2542;
    float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
    float _2578 = (exp2(log2(1.0 - (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2579 = 1.0 - _2542;
    float _2589 = (0.5 / (((_2478 * ((_2556 * _2579) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2478 * _2579) + _2542) * _2556))) * _2556;
    float _4678 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2591 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
    float _2601 = (((_2578 * cbLight._m0[_2530].x) * _2591) * _2225) + ((((cbLight._m0[_2449].x * _2191) * _2502) * _2516) * _2238);
    float _2602 = (((_2578 * cbLight._m0[_2530].y) * _2591) * _2225) + ((((cbLight._m0[_2449].y * _2193) * _2502) * _2516) * _2238);
    float _2603 = (((_2578 * cbLight._m0[_2530].z) * _2591) * _2225) + ((((cbLight._m0[_2449].z * _2195) * _2502) * _2516) * _2238);
    float _2659;
    float _2661;
    float _2663;
    if (_2278)
    {
        _2659 = _2601;
        _2661 = _2602;
        _2663 = _2603;
    }
    else
    {
        uint _2665 = _2202 + 2u;
        uint _2669 = _2202 + 10u;
        float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2665].w)) * _713) * 0.949999988079071044921875);
        float _2684 = _2683 * _2683;
        float _2685 = cbLight._m0[_2665].x + _789;
        float _2686 = cbLight._m0[_2665].y + _790;
        float _2687 = cbLight._m0[_2665].z + _791;
        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
        float _2692 = _2691 * _2685;
        float _2693 = _2691 * _2686;
        float _2694 = _2691 * _2687;
        float _2695 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2665].xyz));
        float _4689 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2699 = dot(vec3(_710, _711, _712), vec3(_2692, _2693, _2694));
        float _4700 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2703 = dot(vec3(cbLight._m0[_2665].xyz), vec3(_2692, _2693, _2694));
        float _4711 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2707 = _2684 * _2684;
        float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
        float _2720 = (exp2(log2(1.0 - (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2721 = 1.0 - _2684;
        float _2731 = (0.5 / (((_2478 * ((_2698 * _2721) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2478 * _2721) + _2684) * _2698))) * _2698;
        float _4722 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2733 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
        float _2734 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2659 = (((_2720 * cbLight._m0[_2669].x) * _2733) * _2734) + _2601;
        _2661 = (((_2720 * cbLight._m0[_2669].y) * _2733) * _2734) + _2602;
        _2663 = (((_2720 * cbLight._m0[_2669].z) * _2733) * _2734) + _2603;
    }
    float _2765;
    float _2767;
    float _2769;
    if (_2387)
    {
        _2765 = _2659;
        _2767 = _2661;
        _2769 = _2663;
    }
    else
    {
        uint _2776 = _2202 + 3u;
        uint _2780 = _2202 + 11u;
        float _2794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2776].w)) * _713) * 0.949999988079071044921875);
        float _2795 = _2794 * _2794;
        float _2796 = cbLight._m0[_2776].x + _789;
        float _2797 = cbLight._m0[_2776].y + _790;
        float _2798 = cbLight._m0[_2776].z + _791;
        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
        float _2803 = _2802 * _2796;
        float _2804 = _2802 * _2797;
        float _2805 = _2802 * _2798;
        float _2806 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2776].xyz));
        float _4738 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2810 = dot(vec3(_710, _711, _712), vec3(_2803, _2804, _2805));
        float _4749 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2814 = dot(vec3(cbLight._m0[_2776].xyz), vec3(_2803, _2804, _2805));
        float _4760 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2818 = _2795 * _2795;
        float _2822 = ((_2813 * _2813) * (_2818 + (-1.0))) + 1.0;
        float _2831 = (exp2(log2(1.0 - (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2832 = 1.0 - _2795;
        float _2842 = (0.5 / (((_2478 * ((_2809 * _2832) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2478 * _2832) + _2795) * _2809))) * _2809;
        float _4771 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2844 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2818 / ((_2822 * _2822) * 3.141590118408203125));
        float _2845 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2765 = (((_2831 * cbLight._m0[_2780].x) * _2844) * _2845) + _2659;
        _2767 = (((_2831 * cbLight._m0[_2780].y) * _2844) * _2845) + _2661;
        _2769 = (((_2831 * cbLight._m0[_2780].z) * _2844) * _2845) + _2663;
    }
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    if (_2200.y == 0u)
    {
        uvec4 _2866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2867 = _2866.x;
        uint _2878 = uint((float(_2866.y) * floor(float(uint(cbSceneParam._m0[85u].y * _810) / _2867))) + floor(float(uint(cbSceneParam._m0[85u].x * _809) / _2867)));
        float _2888 = (log2(_1978 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2889 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        uint _2892 = uint(isnan(14.0) ? _2889 : (isnan(_2889) ? 14.0 : min(_2889, 14.0)));
        uvec4 _2897 = texelFetch(g_lightClusterGridBuffer, int(((_2892 << 2u) + (_2878 << 6u)) >> 2u));
        uint _2898 = _2897.x;
        uint _2899 = _2866.z;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        if (((((1u << ((_2899 >> 4u) & 15u)) + 4294967295u) & _2898) == 0u) || ((_2899 & 240u) == 0u))
        {
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
        }
        else
        {
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            uint _3137 = 0u;
            uint _3146;
            bool _3147;
            for (;;)
            {
                _3146 = texelFetch(g_lightClassification, int((((_2892 << 5u) + (_2878 << 9u)) + (_3137 << 2u)) >> 2u)).x;
                _3147 = _3146 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3147)
                {
                    frontier_phi_71_pred = _3136;
                    frontier_phi_71_pred_1 = _3135;
                    frontier_phi_71_pred_2 = _3134;
                    frontier_phi_71_pred_3 = _3133;
                    frontier_phi_71_pred_4 = _3132;
                    frontier_phi_71_pred_5 = _3131;
                }
                else
                {
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    uint _3282;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3146;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    for (;;)
                    {
                        uint _3286 = uint(findLSB(_3282)) + (_3137 << 5u);
                        uint _3283 = (_3282 + 4294967295u) & _3282;
                        uint _3288 = _3286 * 48u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3288)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 3u)).x));
                        uint _3308 = (_3286 * 48u) + 4u;
                        vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 3u)).x));
                        uint _3327 = (_3286 * 48u) + 8u;
                        vec3 _3338 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x));
                        float _3342 = _3302.x - _1976;
                        float _3343 = _3302.y - _1977;
                        float _3344 = _3302.z - _1978;
                        float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                        float _3348 = inversesqrt(_3345);
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3352 = dot(vec3(_828, _831, _834), vec3(_3349, _3350, _3351));
                        float _3357 = 1.0 - (_3345 * _3302.w);
                        float _4797 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3358 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3359 = sqrt(_3345) * _3321.w;
                        float _3362 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                        float _3363 = _3362 * _3362;
                        float _3366 = ((1.0 - _3363) * _3352) + _3363;
                        float _3369 = _3359 * _3359;
                        float _3373 = ((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3358) / ((_3369 * 0.699999988079071044921875) + 1.0);
                        float _3377 = (-0.0) - _1976;
                        float _3378 = (-0.0) - _1977;
                        float _3379 = (-0.0) - _1978;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3384 = _3383 * _3377;
                        float _3385 = _3383 * _3378;
                        float _3386 = _3383 * _3379;
                        float _3393 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                        float _3394 = 1.0 - _888;
                        float _3401 = sqrt(1.0 - ((1.0 - (_3394 * _3394)) * (1.0 - (_3393 * _3393))));
                        float _3402 = _3401 * _3401;
                        float _3403 = _3402 * _3402;
                        float _3404 = _3384 + _3349;
                        float _3405 = _3385 + _3350;
                        float _3406 = _3386 + _3351;
                        float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                        float _3414 = dot(vec3(_828, _831, _834), vec3(_3384, _3385, _3386));
                        float _4813 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3417 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3418 = dot(vec3(_828, _831, _834), vec3(_3410 * _3404, _3410 * _3405, _3410 * _3406));
                        float _4824 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3425 = ((_3421 * _3421) * (_3403 + (-1.0))) + 1.0;
                        float _3426 = _3362 * _3402;
                        float _3427 = _3426 * _3426;
                        float _3430 = ((1.0 - _3427) * _3352) + _3427;
                        float _4835 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3431 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3432 = 1.0 - _3402;
                        float _3442 = (0.5 / (((_3431 * ((_3417 * _3432) + _3402)) + 9.9999999392252902907785028219223e-09) + (((_3431 * _3432) + _3402) * _3417))) * _3431;
                        float _4846 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3453 = (((_3403 * 3.1415927410125732421875) * (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) / ((_3425 * _3425) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125))) * _3358;
                        _3206 = (_3373 * _3321.x) + _3279;
                        _3207 = (_3373 * _3321.y) + _3280;
                        _3208 = (_3373 * _3321.z) + _3281;
                        _3203 = (_3453 * _3338.x) + _3276;
                        _3204 = (_3453 * _3338.y) + _3277;
                        _3205 = (_3453 * _3338.z) + _3278;
                        if (_3283 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3283;
                        }
                    }
                    frontier_phi_71_pred = _3208;
                    frontier_phi_71_pred_1 = _3207;
                    frontier_phi_71_pred_2 = _3206;
                    frontier_phi_71_pred_3 = _3205;
                    frontier_phi_71_pred_4 = _3204;
                    frontier_phi_71_pred_5 = _3203;
                }
                _2989 = frontier_phi_71_pred;
                _2987 = frontier_phi_71_pred_1;
                _2985 = frontier_phi_71_pred_2;
                _2983 = frontier_phi_71_pred_3;
                _2981 = frontier_phi_71_pred_4;
                _2979 = frontier_phi_71_pred_5;
                uint _3138 = _3137 + 1u;
                if (_3138 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3131 = _2979;
                    _3132 = _2981;
                    _3133 = _2983;
                    _3134 = _2985;
                    _3135 = _2987;
                    _3136 = _2989;
                    _3137 = _3138;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
        }
        uvec4 _2992 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2993 = _2992.z;
        uint _2995 = (_2993 >> 8u) & 15u;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        if (((4294967295u << _2995) & _2898) == 0u)
        {
            _3099 = _2978;
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
            _3107 = _2986;
            _3109 = _2988;
        }
        else
        {
            float _3124 = inversesqrt(dot(vec3(_1976, _1977, _1978), vec3(_1976, _1977, _1978)));
            float _3125 = _3124 * _1976;
            float _3126 = _3124 * _1977;
            float _3127 = _3124 * _1978;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2995 < ((_2993 >> 12u) & 15u))
            {
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3259 = _2978;
                float _3260 = _2980;
                float _3261 = _2982;
                float _3262 = _2984;
                float _3263 = _2986;
                float _3264 = _2988;
                uint _3265 = _2995;
                uint _3274;
                bool _3275;
                for (;;)
                {
                    _3274 = texelFetch(g_lightClassification, int((((_2892 << 5u) + (_2878 << 9u)) + (_3265 << 2u)) >> 2u)).x;
                    _3275 = _3274 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3275)
                    {
                        frontier_phi_82_pred = _3264;
                        frontier_phi_82_pred_1 = _3263;
                        frontier_phi_82_pred_2 = _3262;
                        frontier_phi_82_pred_3 = _3261;
                        frontier_phi_82_pred_4 = _3260;
                        frontier_phi_82_pred_5 = _3259;
                    }
                    else
                    {
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3480 = _3259;
                        float _3481 = _3260;
                        float _3482 = _3261;
                        float _3483 = _3262;
                        float _3484 = _3263;
                        float _3485 = _3264;
                        uint _3486 = _3274;
                        uint _3487;
                        vec4 _3512;
                        float _3513;
                        vec4 _3528;
                        vec3 _3540;
                        vec4 _3555;
                        vec4 _3570;
                        float _3616;
                        bool _3617;
                        for (;;)
                        {
                            uint _3497 = ((_3265 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3486));
                            _3487 = (_3486 + 4294967295u) & _3486;
                            uint _3499 = _3497 * 40u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            _3513 = _3512.w;
                            uint _3515 = (_3497 * 40u) + 4u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3497 * 40u) + 8u;
                            _3540 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x));
                            uint _3542 = (_3497 * 40u) + 16u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3497 * 40u) + 20u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3497 * 40u) + 24u;
                            vec4 _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3591 = (_3497 * 40u) + 28u;
                            vec4 _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            _3616 = fma(_1978, _3604.z, fma(_1977, _3604.y, _3604.x * _1976)) + _3604.w;
                            _3617 = !((fma(_1978, _3585.z, fma(_1977, _3585.y, _3585.x * _1976)) + _3585.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3617)
                            {
                                float _3644 = _3512.x - _1976;
                                float _3645 = _3512.y - _1977;
                                float _3646 = _3512.z - _1978;
                                float _3647 = dot(vec3(_3644, _3645, _3646), vec3(_3644, _3645, _3646));
                                float _3650 = inversesqrt(_3647);
                                float _3651 = _3650 * _3644;
                                float _3652 = _3650 * _3645;
                                float _3653 = _3650 * _3646;
                                float _3657 = 1.0 - (_3647 / (_3513 * _3513));
                                float _4857 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3658 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3662 = sqrt(_3647) * _3528.w;
                                float _3664 = 1.39999997615814208984375 / (_3662 + 1.39999997615814208984375);
                                float _3665 = _3664 * _3664;
                                float _3668 = ((1.0 - _3665) * dot(vec3(_3651, _3652, _3653), vec3(_828, _831, _834))) + _3665;
                                float _3671 = _3662 * _3662;
                                float _3675 = (fma(_1978, _3555.z, fma(_1977, _3555.y, _3555.x * _1976)) + _3555.w) / _3616;
                                float _3676 = (fma(_1978, _3570.z, fma(_1977, _3570.y, _3570.x * _1976)) + _3570.w) / _3616;
                                float _3680 = 1.0 - dot(vec2(_3675, _3676), vec2(_3675, _3676));
                                float _4873 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3682 = _3681 * (((isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0))) * _3658) / ((_3671 * 0.699999988079071044921875) + 1.0));
                                float _3694 = exp2(log2(1.0 / ((_3671 * 3.5) + 5.0)) * 0.25);
                                float _3695 = 1.0 - _888;
                                float _3702 = sqrt(1.0 - ((1.0 - (_3695 * _3695)) * (1.0 - (_3694 * _3694))));
                                float _3703 = _3702 * _3702;
                                float _3704 = _3703 * _3703;
                                float _3705 = _3651 - _3125;
                                float _3706 = _3652 - _3126;
                                float _3707 = _3653 - _3127;
                                float _3711 = inversesqrt(dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707)));
                                float _3715 = dot(vec3(_828, _831, _834), vec3((-0.0) - _3125, (-0.0) - _3126, (-0.0) - _3127));
                                float _4884 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3718 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3719 = dot(vec3(_828, _831, _834), vec3(_3711 * _3705, _3711 * _3706, _3711 * _3707));
                                float _4895 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3726 = ((_3722 * _3722) * (_3704 + (-1.0))) + 1.0;
                                float _3727 = _3664 * _3703;
                                float _3728 = _3727 * _3727;
                                float _3734 = ((1.0 - _3728) * dot(vec3(_828, _831, _834), vec3(_3651, _3652, _3653))) + _3728;
                                float _4906 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3735 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3736 = 1.0 - _3703;
                                float _3746 = (0.5 / (((_3735 * ((_3718 * _3736) + _3703)) + 9.9999999392252902907785028219223e-09) + (((_3735 * _3736) + _3703) * _3718))) * _3735;
                                float _4917 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3756 = (_3681 * _3658) * (((_3704 * 3.1415927410125732421875) * (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) / ((_3726 * _3726) * ((_3671 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3682 * _3528.z;
                                frontier_phi_88_pred_1 = _3682 * _3528.y;
                                frontier_phi_88_pred_2 = _3682 * _3528.x;
                                frontier_phi_88_pred_3 = _3756 * _3540.z;
                                frontier_phi_88_pred_4 = _3756 * _3540.y;
                                frontier_phi_88_pred_5 = _3756 * _3540.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3765 = frontier_phi_88_pred;
                            _3764 = frontier_phi_88_pred_1;
                            _3763 = frontier_phi_88_pred_2;
                            _3762 = frontier_phi_88_pred_3;
                            _3761 = frontier_phi_88_pred_4;
                            _3760 = frontier_phi_88_pred_5;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            if (_3487 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3487;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3472;
                        frontier_phi_82_pred_1 = _3471;
                        frontier_phi_82_pred_2 = _3470;
                        frontier_phi_82_pred_3 = _3469;
                        frontier_phi_82_pred_4 = _3468;
                        frontier_phi_82_pred_5 = _3467;
                    }
                    _3110 = frontier_phi_82_pred;
                    _3108 = frontier_phi_82_pred_1;
                    _3106 = frontier_phi_82_pred_2;
                    _3104 = frontier_phi_82_pred_3;
                    _3102 = frontier_phi_82_pred_4;
                    _3100 = frontier_phi_82_pred_5;
                    uint _3266 = _3265 + 1u;
                    if (_3266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3259 = _3100;
                        _3260 = _3102;
                        _3261 = _3104;
                        _3262 = _3106;
                        _3263 = _3108;
                        _3264 = _3110;
                        _3265 = _3266;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3106;
                frontier_phi_63_64_ladder_1 = _3110;
                frontier_phi_63_64_ladder_2 = _3108;
                frontier_phi_63_64_ladder_3 = _3104;
                frontier_phi_63_64_ladder_4 = _3102;
                frontier_phi_63_64_ladder_5 = _3100;
            }
            else
            {
                frontier_phi_63_64_ladder = _2984;
                frontier_phi_63_64_ladder_1 = _2988;
                frontier_phi_63_64_ladder_2 = _2986;
                frontier_phi_63_64_ladder_3 = _2982;
                frontier_phi_63_64_ladder_4 = _2980;
                frontier_phi_63_64_ladder_5 = _2978;
            }
            _3099 = frontier_phi_63_64_ladder_5;
            _3101 = frontier_phi_63_64_ladder_4;
            _3103 = frontier_phi_63_64_ladder_3;
            _3105 = frontier_phi_63_64_ladder;
            _3107 = frontier_phi_63_64_ladder_2;
            _3109 = frontier_phi_63_64_ladder_1;
        }
        float _3114 = isnan(1.0) ? _872 : (isnan(_872) ? 1.0 : min(_872, 1.0));
        _2911 = (_3114 * _3105) + _2442;
        _2913 = (_3114 * _3107) + _2444;
        _2915 = (_3114 * _3109) + _2446;
        _2917 = ((_3099 * 0.039999999105930328369140625) * _3114) + _2765;
        _2919 = ((_3101 * 0.039999999105930328369140625) * _3114) + _2767;
        _2921 = ((_3103 * 0.039999999105930328369140625) * _3114) + _2769;
    }
    else
    {
        _2911 = _2442;
        _2913 = _2444;
        _2915 = _2446;
        _2917 = _2765;
        _2919 = _2767;
        _2921 = _2769;
    }
    float _4933 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4944 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4955 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _2938 = ((isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2911 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _872))) + ((_2917 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1708)) * cbPerFrame._m0[3u].x);
    float _2939 = ((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2913 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _872))) + ((_2919 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1708)) * cbPerFrame._m0[3u].x);
    float _2940 = ((isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2915 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _872))) + ((_2921 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1708)) * cbPerFrame._m0[3u].x);
    uint _2941 = _277 + 6u;
    float _2949 = _809 / cbSceneParam._m0[86u].x;
    float _2950 = _810 / cbSceneParam._m0[86u].y;
    vec4 _2964 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2949, _2950, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2966 = _2964.x;
    float _2967 = _2964.y;
    float _2968 = _2964.z;
    float _2969 = _2964.w;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _3003 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _3004 = _3003 / _731;
        float _3015 = _3004 * _782;
        float _3016 = _783 * _3004;
        float _3017 = (-0.0) - _3016;
        float _3019 = _3004 * _784;
        float _3021 = (cbSceneParam._m0[77u].w * _3017) / _3003;
        float _3022 = _3021 + cbSceneParam._m0[79u].w;
        float _3023 = cbSceneParam._m0[79u].w - _3016;
        float _3029 = sqrt(((_3015 * _3015) + (_3016 * _3016)) + (_3019 * _3019));
        float _3032 = (1.0 - (cbSceneParam._m0[77u].w / _3003)) * _3029;
        float _3037 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3039 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3216;
        if (abs((_3017 - _3021) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3216 = ((((_3022 > 0.0) ? exp2(_3037 * _3022) : (2.0 - exp2(_3039 * _3022))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3032;
        }
        else
        {
            float _3160 = 1.0 / cbSceneParam._m0[80u].x;
            float _3161 = isnan(_3023) ? _3022 : (isnan(_3022) ? _3023 : max(_3022, _3023));
            float _3162 = isnan(_3023) ? _3022 : (isnan(_3022) ? _3023 : min(_3022, _3023));
            float _3171 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : min(_3161, 0.0));
            float _3172 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : min(_3162, 0.0));
            _3216 = ((abs(_3029 / _3017) * cbSceneParam._m0[80u].y) * ((((_3171 - _3172) * 2.0) - ((exp2(_3037 * (isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0)))) - exp2(_3037 * (isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))))) * _3160)) - ((exp2(_3039 * _3171) - exp2(_3039 * _3172)) * _3160))) + (_3032 * cbSceneParam._m0[80u].z);
        }
        vec4 _3218 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2949, _2950, 1.0), 0.0);
        float _3227 = exp2((_3216 * (-1.44269502162933349609375)) * (1.0 - _3218.w));
        float _3228 = log2(_3227);
        float _3244 = log2(_2969);
        _3041 = (exp2(_3244 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].x)) * _3218.x) / cbSceneParam._m0[78u].x)) + _2966;
        _3043 = (exp2(_3244 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].y)) * _3218.y) / cbSceneParam._m0[78u].y)) + _2967;
        _3045 = (exp2(_3244 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].z)) * _3218.z) / cbSceneParam._m0[78u].z)) + _2968;
        _3047 = _3227 * _2969;
    }
    else
    {
        _3041 = _2966;
        _3043 = _2967;
        _3045 = _2968;
        _3047 = _2969;
    }
    bool _3254;
    vec4 _3057;
    vec4 _3079;
    float _3081;
    float _3085;
    float _3086;
    float _3087;
    float _3088;
    bool _3098;
    for (;;)
    {
        _3057 = cbMatDynParam._m0[0u];
        float _3059 = roundEven(_3057.y);
        bool _3060 = _3059 == 3.0;
        float _3061 = log2(_3047);
        float _3068 = exp2(_3061 * cbSceneParam._m0[78u].x) * _2938;
        float _3069 = exp2(_3061 * cbSceneParam._m0[78u].y) * _2939;
        float _3070 = exp2(_3061 * cbSceneParam._m0[78u].z) * _2940;
        float _3077 = _798 + (-0.5);
        _3079 = cbMtdParam._m0[1u];
        _3081 = _3079.y * _3077;
        float _3084 = (_3059 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3085 = _3084 * (_3060 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3041)));
        _3086 = _3084 * (_3060 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3043)));
        _3087 = _3084 * (_3060 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3045)));
        _3088 = _3077 * 0.999000012874603271484375;
        _3098 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3098)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _3088) < 0.5)
            {
                _3254 = true;
                break;
            }
        }
        uint _3195 = _847 + uint(_3057.w);
        if ((cbInstanceData._m0[_3195].w < 1.0) && ((cbInstanceData._m0[_3195].w + _3088) < 0.5))
        {
            _3254 = true;
            break;
        }
        if ((_3081 + 1.0) < _3079.x)
        {
            _3254 = true;
            break;
        }
        _3254 = false;
        break;
    }
    float _3458;
    if (_3254)
    {
        discard_state = true;
        _3458 = 0.0;
    }
    else
    {
        _3458 = cbInstanceData._m0[_2941].w;
    }
    SV_Target.x = _3085;
    SV_Target.y = _3086;
    SV_Target.z = _3087;
    SV_Target.w = _3458;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2941].w;
    discard_exit();
}


