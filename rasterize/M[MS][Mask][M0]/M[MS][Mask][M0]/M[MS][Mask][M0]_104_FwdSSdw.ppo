#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1349;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3678 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3689 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3700 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _437 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _451 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _468 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _399.x) * 2.0) - ((((_439 - _451) * cbMtdParam._m0[24u].z) + _451) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3711 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _476 = (_469 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _477 = (_469 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _478 = (_469 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _495 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _291) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _292) + cbTextureTilingScale._m0[3u].w));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _517 = _515.x;
    float _527 = dot(vec4(_517, _515.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _541 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _399.y) * 2.0) - ((((_517 - _527) * cbMtdParam._m0[24u].z) + _527) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3722 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _549 = (_542 * ((_495.x * cbMtdParam._m0[13u].x) - _476)) + _476;
    float _550 = (_542 * ((_495.y * cbMtdParam._m0[13u].y) - _477)) + _477;
    float _551 = (_542 * ((_495.z * cbMtdParam._m0[13u].z) - _478)) + _478;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _291) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _292) + cbTextureTilingScale._m0[24u].w));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _588 = _586.x;
    float _598 = dot(vec4(_588, _586.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _610 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _399.z) * 2.0) - ((((_588 - _598) * cbMtdParam._m0[24u].z) + _598) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3733 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _621 = (_328.x * cbMtdParam._m0[9u].x) * ((_611 * ((_569.x * cbMtdParam._m0[14u].x) - _549)) + _549);
    float _622 = (_328.y * cbMtdParam._m0[9u].y) * ((_611 * ((_569.y * cbMtdParam._m0[14u].y) - _550)) + _550);
    float _623 = (_328.z * cbMtdParam._m0[9u].z) * ((_611 * ((_569.z * cbMtdParam._m0[14u].z) - _551)) + _551);
    float _627 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _621;
    float _630 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _622;
    float _633 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _623;
    float _641 = (((_621 - _627) * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) + _627) * 4.55000019073486328125;
    float _643 = (((_622 - _630) * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) + _630) * 4.55000019073486328125;
    float _645 = (((_623 - _633) * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) + _633) * 4.55000019073486328125;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _680 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _699 = _697.x;
    float _700 = _697.y;
    float _701 = _697.z;
    float _708 = ((_680.x - _699) * _469) + _699;
    float _709 = ((_680.y - _700) * _469) + _700;
    float _710 = ((_680.z - _701) * _469) + _701;
    vec4 _722 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _291) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _292) + cbTextureTilingScale._m0[2u].w));
    float _733 = ((_722.x - _708) * _542) + _708;
    float _734 = ((_722.y - _709) * _542) + _709;
    float _735 = ((_722.z - _710) * _542) + _710;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _291) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _292) + cbTextureTilingScale._m0[23u].w));
    float _760 = ((_747.z - _735) * _611) + _735;
    float _763 = ((((_747.x - _733) * _611) + _733) * 2.0) + (-1.0);
    float _764 = ((((_747.y - _734) * _611) + _734) * 2.0) + (-1.0);
    float _765 = dot(vec2(_763, _764), vec2(_763, _764));
    float _3744 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _770 = sqrt(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))));
    vec4 _790 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _802 = (_763 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_657.x * 2.0) + (-1.0)))) + (((_790.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _803 = (_764 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_657.y * 2.0) + (-1.0)))) + (((_790.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _808 = (((_657.z - _760) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _760;
    float _812 = ((_790.z - _808) * cbMtdParam._m0[19u].w) + _808;
    float _814 = cbMtdParam._m0[22u].x + _790.w;
    float _817 = fma(_770, _238 * NORMAL.x, fma(_803, _245 * TANGENT.x, (_231 * _223) * _802));
    float _820 = fma(_770, _238 * NORMAL.y, fma(_803, _245 * TANGENT.y, (_231 * _224) * _802));
    float _823 = fma(_770, _238 * NORMAL.z, fma(_803, _245 * TANGENT.z, (_231 * _225) * _802));
    float _827 = inversesqrt(dot(vec3(_817, _820, _823), vec3(_817, _820, _823)));
    float _828 = _827 * _817;
    float _829 = _827 * _820;
    float _830 = _827 * _823;
    float _3755 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _831 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _3777 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3788 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _3799 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _849 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _900 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _890);
    float _901 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _890);
    float _902 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _890);
    float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
    float _907 = _900 * _906;
    float _908 = _901 * _906;
    float _909 = _902 * _906;
    float _915 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _916 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _934 = fma(_830, cbSceneParam._m0[5u].z, fma(_829, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _828));
    float _937 = fma(_830, cbSceneParam._m0[6u].z, fma(_829, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _828));
    float _940 = fma(_830, cbSceneParam._m0[7u].z, fma(_829, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _828));
    uint _954 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _960 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_954].x;
    float _961 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_954].y;
    float _962 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * cbInstanceData._m0[_954].z;
    float _3810 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    vec4 _974 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _915, cbSceneParam._m0[86u].y * _916));
    float _978 = ((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * TEXCOORD_5.w) * _974.x;
    float _979 = dot(vec3(_828, _829, _830), vec3(_907, _908, _909));
    float _982 = _979 * 2.0;
    float _986 = (_982 * _828) - _907;
    float _987 = (_982 * _829) - _908;
    float _988 = (_982 * _830) - _909;
    float _992 = abs(dot(vec3(_907, _908, _909), vec3(_828, _829, _830)));
    float _3843 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _994 = sqrt(_831);
    float _1007 = exp2((_994 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_994 * 3.0));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1348;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1073 = fma(_1047, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039));
        float _1077 = fma(_1047, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039));
        float _1081 = fma(_1047, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039));
        float _1106 = _1039 + _828;
        float _1107 = _1043 + _829;
        float _1108 = _1047 + _830;
        float _1118 = fma(_1108, cbModelParam._m0[26u].z, fma(_1107, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1106)) - _1073;
        float _1119 = fma(_1108, cbModelParam._m0[27u].z, fma(_1107, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1106)) - _1077;
        float _1120 = fma(_1108, cbModelParam._m0[28u].z, fma(_1107, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1106)) - _1081;
        float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
        float _1137 = ((_1124 * _1118) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1073 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1124 * _1119) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1077 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1124 * _1120) / cbModelParam._m0[34u].z) + ((((((_1081 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        float _1176 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1142.x + (-0.5));
        float _1178 = _1176 * (_1142.y + (-0.5));
        float _1179 = _1176 * (_1142.z + (-0.5));
        float _1186 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1149.x + (-0.5));
        float _1188 = _1186 * (_1149.y + (-0.5));
        float _1189 = _1186 * (_1149.z + (-0.5));
        float _1196 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1156.x + (-0.5));
        float _1198 = _1196 * (_1156.y + (-0.5));
        float _1199 = _1196 * (_1156.z + (-0.5));
        float _1206 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1163.x + (-0.5));
        float _1208 = _1206 * (_1163.y + (-0.5));
        float _1209 = _1206 * (_1163.z + (-0.5));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = _1177 * 0.5;
        float _1214 = _1187 * 0.5;
        float _1215 = _1197 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1230 = (dot(vec3(_828, _829, _830), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1240 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3891 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1242 + 1.0))) + _1247) * _1210;
        float _1257 = _1178 * 0.5;
        float _1258 = _1188 * 0.5;
        float _1259 = _1198 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_828, _829, _830), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3924 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1284 + 1.0))) + _1289) * _1211;
        float _1299 = _1179 * 0.5;
        float _1300 = _1189 * 0.5;
        float _1301 = _1199 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_828, _829, _830), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3957 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1326 + 1.0))) + _1331) * _1212;
        _1348 = _1179;
        _1350 = _1178;
        _1351 = _1177;
        _1352 = _1189;
        _1353 = _1188;
        _1354 = _1187;
        _1355 = _1199;
        _1356 = _1198;
        _1357 = _1197;
        _1358 = _1212;
        _1359 = _1211;
        _1360 = _1210;
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
    }
    else
    {
        _1348 = _1349;
        _1350 = _1349;
        _1351 = _1349;
        _1352 = _1349;
        _1353 = _1349;
        _1354 = _1349;
        _1355 = _1349;
        _1356 = _1349;
        _1357 = _1349;
        _1358 = _1349;
        _1359 = _1349;
        _1360 = _1349;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1386 = fma(_1047, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039));
        float _1390 = fma(_1047, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039));
        float _1394 = fma(_1047, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039));
        float _1417 = _1039 + _828;
        float _1418 = _1043 + _829;
        float _1419 = _1047 + _830;
        float _1429 = fma(_1419, cbModelParam._m0[30u].z, fma(_1418, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1417)) - _1386;
        float _1430 = fma(_1419, cbModelParam._m0[31u].z, fma(_1418, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1417)) - _1390;
        float _1431 = fma(_1419, cbModelParam._m0[32u].z, fma(_1418, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1417)) - _1394;
        float _1435 = inversesqrt(dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431)));
        float _1448 = ((_1435 * _1429) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1386 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1435 * _1430) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1390 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1435 * _1431) / cbModelParam._m0[35u].z) + ((((((_1394 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        float _1485 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1452.x + (-0.5));
        float _1487 = _1485 * (_1452.y + (-0.5));
        float _1488 = _1485 * (_1452.z + (-0.5));
        float _1495 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1459.x + (-0.5));
        float _1497 = _1495 * (_1459.y + (-0.5));
        float _1498 = _1495 * (_1459.z + (-0.5));
        float _1505 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1466.x + (-0.5));
        float _1507 = _1505 * (_1466.y + (-0.5));
        float _1508 = _1505 * (_1466.z + (-0.5));
        float _1515 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1473.x + (-0.5));
        float _1517 = _1515 * (_1473.y + (-0.5));
        float _1518 = _1515 * (_1473.z + (-0.5));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = _1486 * 0.5;
        float _1523 = _1496 * 0.5;
        float _1524 = _1506 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_828, _829, _830), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4020 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1549 + 1.0))) + _1554) * _1519;
        float _1564 = _1487 * 0.5;
        float _1565 = _1497 * 0.5;
        float _1566 = _1507 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_828, _829, _830), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4053 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1591 + 1.0))) + _1596) * _1520;
        float _1606 = _1488 * 0.5;
        float _1607 = _1498 * 0.5;
        float _1608 = _1508 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_828, _829, _830), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4086 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1633 + 1.0))) + _1638) * _1521;
        _1655 = _1488;
        _1656 = _1487;
        _1657 = _1486;
        _1658 = _1498;
        _1659 = _1497;
        _1660 = _1496;
        _1661 = _1508;
        _1662 = _1507;
        _1663 = _1506;
        _1664 = _1521;
        _1665 = _1520;
        _1666 = _1519;
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
    }
    else
    {
        _1655 = _1349;
        _1656 = _1349;
        _1657 = _1349;
        _1658 = _1349;
        _1659 = _1349;
        _1660 = _1349;
        _1661 = _1349;
        _1662 = _1349;
        _1663 = _1349;
        _1664 = _1349;
        _1665 = _1349;
        _1666 = _1349;
        _1667 = 0.0;
        _1668 = 0.0;
        _1669 = 0.0;
    }
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1361)) + _1361;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1362)) + _1362;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1363)) + _1363;
    float _1702 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1680, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1705 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1680, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1708 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1680, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1679));
    float _1723 = _986 * 0.5;
    float _1724 = _987 * 0.5;
    float _1725 = _988 * 0.5;
    float _1726 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1729 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1732 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1766;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1739 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1348, _1352, _1355, _1358));
        float _1743 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1747 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1351, _1354, _1357, _1360));
        float _1754 = dot(vec4(cbModelParam._m0[39u]), vec4(_1723, _1724, _1725, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1777;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1768 = dot(vec4(cbModelParam._m0[40u]), vec4(_1723, _1724, _1725, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1768) ? 0.0 : (isnan(0.0) ? _1768 : max(0.0, _1768))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1781 = (_1777 * cbModelParam._m0[1u].x) + (_1766 * (1.0 - cbModelParam._m0[1u].x));
    float _1791 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _831);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1791 : min(cbModelParam._m0[25u].z, _1791));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1840 = fma(_1047, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039)) + cbModelParam._m0[13u].w;
        float _1844 = fma(_1047, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039)) + cbModelParam._m0[14u].w;
        float _1848 = fma(_1047, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039)) + cbModelParam._m0[15u].w;
        float _1851 = fma(_988, cbModelParam._m0[13u].z, fma(_987, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _986));
        float _1854 = fma(_988, cbModelParam._m0[14u].z, fma(_987, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _986));
        float _1857 = fma(_988, cbModelParam._m0[15u].z, fma(_987, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _986));
        float _1885;
        if (_1851 > 0.0)
        {
            _1885 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1885 = frontier_phi_14_12_ladder;
        }
        float _2108;
        if (_1854 > 0.0)
        {
            _2108 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2108 = frontier_phi_23_19_ladder;
        }
        float _2354;
        if (_1857 > 0.0)
        {
            _2354 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2354 = frontier_phi_35_30_ladder;
        }
        float _2356 = isnan(_2108) ? _1885 : (isnan(_1885) ? _2108 : min(_1885, _2108));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1851) + _1840;
        float _2362 = (_2357 * _1854) + _1844;
        float _2363 = (_2357 * _1857) + _1848;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2366 = (-1.0) - _2364;
        float _2368 = _2364 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2363 > _2368) || ((_2363 < _2366) || ((_2362 > _2368) || ((_2362 < _2366) || ((_2361 < _2366) || (_2361 > _2368))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2363, cbModelParam._m0[9u].z, fma(_2362, cbModelParam._m0[9u].y, _2361 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2363, cbModelParam._m0[10u].z, fma(_2362, cbModelParam._m0[10u].y, _2361 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2363, cbModelParam._m0[11u].z, fma(_2362, cbModelParam._m0[11u].y, _2361 * cbModelParam._m0[11u].x))), _1792);
            frontier_phi_13_35_ladder = _2487.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2487.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2487.x * cbModelParam._m0[1u].y;
        }
        _1873 = frontier_phi_13_35_ladder_2;
        _1875 = frontier_phi_13_35_ladder_1;
        _1877 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_986, _987, _988), _1792);
        _1873 = _1861.x * cbModelParam._m0[1u].y;
        _1875 = _1861.y * cbModelParam._m0[1u].y;
        _1877 = _1861.z * cbModelParam._m0[1u].y;
    }
    float _1881 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _831);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1881 : min(cbModelParam._m0[25u].w, _1881));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1937 = fma(_1047, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039)) + cbModelParam._m0[21u].w;
        float _1941 = fma(_1047, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039)) + cbModelParam._m0[22u].w;
        float _1945 = fma(_1047, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039)) + cbModelParam._m0[23u].w;
        float _1948 = fma(_988, cbModelParam._m0[21u].z, fma(_987, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _986));
        float _1951 = fma(_988, cbModelParam._m0[22u].z, fma(_987, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _986));
        float _1954 = fma(_988, cbModelParam._m0[23u].z, fma(_987, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _986));
        float _2113;
        if (_1948 > 0.0)
        {
            _2113 = abs((1.0 - _1937) / _1948);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1937 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2113 = frontier_phi_25_21_ladder;
        }
        float _2381;
        if (_1951 > 0.0)
        {
            _2381 = abs((1.0 - _1941) / _1951);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1941 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2381 = frontier_phi_37_32_ladder;
        }
        float _2586;
        if (_1954 > 0.0)
        {
            _2586 = abs((1.0 - _1945) / _1954);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1945 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2586 = frontier_phi_46_43_ladder;
        }
        float _2588 = isnan(_2381) ? _2113 : (isnan(_2113) ? _2381 : min(_2113, _2381));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _1948) + _1937;
        float _2594 = (_2589 * _1951) + _1941;
        float _2595 = (_2589 * _1954) + _1945;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2597 = (-1.0) - _2596;
        float _2599 = _2596 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2595 > _2599) || ((_2595 < _2597) || ((_2594 > _2599) || ((_2594 < _2597) || ((_2593 < _2597) || (_2593 > _2599))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2595, cbModelParam._m0[17u].z, fma(_2594, cbModelParam._m0[17u].y, _2593 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2595, cbModelParam._m0[18u].z, fma(_2594, cbModelParam._m0[18u].y, _2593 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2595, cbModelParam._m0[19u].z, fma(_2594, cbModelParam._m0[19u].y, _2593 * cbModelParam._m0[19u].x))), _1882);
            frontier_phi_22_46_ladder = _2794.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2794.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2794.x * cbModelParam._m0[1u].z;
        }
        _1973 = frontier_phi_22_46_ladder_2;
        _1975 = frontier_phi_22_46_ladder_1;
        _1977 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_986, _987, _988), _1882);
        _1973 = _1957.x * cbModelParam._m0[1u].z;
        _1975 = _1957.y * cbModelParam._m0[1u].z;
        _1977 = _1957.z * cbModelParam._m0[1u].z;
    }
    float _1989 = ((((1.0 - _1007) * ((_994 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1007 * _994)) * _978;
    float _1990 = _1989 * ((cbModelParam._m0[1u].w * (_1973 - _1873)) + _1873);
    float _1991 = _1989 * ((cbModelParam._m0[1u].w * (_1975 - _1875)) + _1875);
    float _1992 = _1989 * ((cbModelParam._m0[1u].w * (_1977 - _1877)) + _1877);
    float _1995 = fma(_1992, cbSceneParam._m0[89u].z, fma(_1991, cbSceneParam._m0[89u].y, _1990 * cbSceneParam._m0[89u].x));
    float _1998 = fma(_1992, cbSceneParam._m0[90u].z, fma(_1991, cbSceneParam._m0[90u].y, _1990 * cbSceneParam._m0[90u].x));
    float _2001 = fma(_1992, cbSceneParam._m0[91u].z, fma(_1991, cbSceneParam._m0[91u].y, _1990 * cbSceneParam._m0[91u].x));
    vec4 _2009 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_915, _916));
    float _2011 = _2009.w;
    float _2023 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2011);
    float _2024 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2011);
    float _2025 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2011);
    uvec4 _2029 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2031 = _2029.x * 14u;
    uint _2032 = _2031 + 13u;
    float _2039 = _978 + (-1.0);
    float _2044 = (cbLight._m0[_2032].x * _2039) + 1.0;
    float _2045 = (cbLight._m0[_2032].y * _2039) + 1.0;
    float _2046 = (cbLight._m0[_2032].z * _2039) + 1.0;
    float _2047 = (cbLight._m0[_2032].w * _2039) + 1.0;
    uint _2048 = _2031 + 5u;
    float _2054 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
    uint _2058 = _2031 + 4u;
    float _2067 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2071 = _2031 | 1u;
    float _2082 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_828, _829, _830));
    float _2085 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_828, _829, _830));
    float _4222 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _4233 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2090 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * 0.3183098733425140380859375;
    float _2092 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * 0.3183098733425140380859375;
    float _2099 = ((cbLight._m0[_2048].x * _2054) * _2092) + (((cbLight._m0[_2058].x * _2023) * _2067) * _2090);
    float _2100 = ((_2054 * cbLight._m0[_2048].y) * _2092) + (((cbLight._m0[_2058].y * _2024) * _2067) * _2090);
    float _2101 = ((_2054 * cbLight._m0[_2048].z) * _2092) + (((cbLight._m0[_2058].z * _2025) * _2067) * _2090);
    uvec4 _2105 = floatBitsToUint(cbLight._m0[_2031 + 12u]);
    bool _2107 = _2105.x == 0u;
    float _2118;
    float _2120;
    float _2122;
    if (_2107)
    {
        _2118 = _2099;
        _2120 = _2100;
        _2122 = _2101;
    }
    else
    {
        uint _2126 = _2031 + 6u;
        float _2142 = (dot(vec3(cbLight._m0[_2031 + 2u].xyz), vec3(_828, _829, _830)) * 0.5) + 0.5;
        float _2143 = _2142 * _2142;
        float _4244 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2144 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2145 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2118 = (((cbLight._m0[_2126].x * 0.3183098733425140380859375) * _2144) * _2145) + _2099;
        _2120 = (((cbLight._m0[_2126].y * 0.3183098733425140380859375) * _2144) * _2145) + _2100;
        _2122 = (((cbLight._m0[_2126].z * 0.3183098733425140380859375) * _2144) * _2145) + _2101;
    }
    bool _2125 = _2105.y == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2125)
    {
        _2163 = _2118;
        _2165 = _2120;
        _2167 = _2122;
    }
    else
    {
        uint _2325 = _2031 + 7u;
        float _2341 = (dot(vec3(cbLight._m0[_2031 + 3u].xyz), vec3(_828, _829, _830)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4260 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2344 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2163 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2118;
        _2165 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2120;
        _2167 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2122;
    }
    uint _2170 = _2031 + 8u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _831) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_2031].x + _907;
    float _2186 = cbLight._m0[_2031].y + _908;
    float _2187 = cbLight._m0[_2031].z + _909;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_828, _829, _830), vec3(cbLight._m0[_2031].xyz));
    float _4276 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _4287 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _2199 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2200 = dot(vec3(_828, _829, _830), vec3(_2192, _2193, _2194));
    float _4298 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2192, _2193, _2194));
    float _4309 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2184 * _2184;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2223 = (exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2224 = 1.0 - _2184;
    float _2235 = (0.5 / (((_2199 * ((_2198 * _2224) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2224) + _2184) * _2198))) * _2198;
    float _4320 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2237 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    uint _2251 = _2031 + 9u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _831) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2071].x + _907;
    float _2265 = cbLight._m0[_2071].y + _908;
    float _2266 = cbLight._m0[_2071].z + _909;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_828, _829, _830), vec3(cbLight._m0[_2071].xyz));
    float _4331 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2278 = dot(vec3(_828, _829, _830), vec3(_2271, _2272, _2273));
    float _4342 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2282 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2271, _2272, _2273));
    float _4353 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2286 = _2263 * _2263;
    float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
    float _2299 = (exp2(log2(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2300 = 1.0 - _2263;
    float _2310 = (0.5 / (((_2199 * ((_2277 * _2300) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2300) + _2263) * _2277))) * _2277;
    float _4364 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
    float _2322 = (((_2299 * cbLight._m0[_2251].x) * _2312) * _2054) + ((((cbLight._m0[_2170].x * _2023) * _2223) * _2237) * _2067);
    float _2323 = (((_2299 * cbLight._m0[_2251].y) * _2312) * _2054) + ((((cbLight._m0[_2170].y * _2024) * _2223) * _2237) * _2067);
    float _2324 = (((_2299 * cbLight._m0[_2251].z) * _2312) * _2054) + ((((cbLight._m0[_2170].z * _2025) * _2223) * _2237) * _2067);
    float _2386;
    float _2388;
    float _2390;
    if (_2107)
    {
        _2386 = _2322;
        _2388 = _2323;
        _2390 = _2324;
    }
    else
    {
        uint _2392 = _2031 + 2u;
        uint _2396 = _2031 + 10u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _831) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _907;
        float _2413 = cbLight._m0[_2392].y + _908;
        float _2414 = cbLight._m0[_2392].z + _909;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_828, _829, _830), vec3(cbLight._m0[_2392].xyz));
        float _4375 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2426 = dot(vec3(_828, _829, _830), vec3(_2419, _2420, _2421));
        float _4386 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4397 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2447 = (exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2448 = 1.0 - _2411;
        float _2458 = (0.5 / (((_2199 * ((_2425 * _2448) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2448) + _2411) * _2425))) * _2425;
        float _4408 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2460 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2461 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2386 = (((_2447 * cbLight._m0[_2396].x) * _2460) * _2461) + _2322;
        _2388 = (((_2447 * cbLight._m0[_2396].y) * _2460) * _2461) + _2323;
        _2390 = (((_2447 * cbLight._m0[_2396].z) * _2460) * _2461) + _2324;
    }
    float _2496;
    float _2498;
    float _2500;
    if (_2125)
    {
        _2496 = _2386;
        _2498 = _2388;
        _2500 = _2390;
    }
    else
    {
        uint _2507 = _2031 + 3u;
        uint _2511 = _2031 + 11u;
        float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _831) * 0.949999988079071044921875);
        float _2526 = _2525 * _2525;
        float _2527 = cbLight._m0[_2507].x + _907;
        float _2528 = cbLight._m0[_2507].y + _908;
        float _2529 = cbLight._m0[_2507].z + _909;
        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
        float _2534 = _2533 * _2527;
        float _2535 = _2533 * _2528;
        float _2536 = _2533 * _2529;
        float _2537 = dot(vec3(_828, _829, _830), vec3(cbLight._m0[_2507].xyz));
        float _4424 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2541 = dot(vec3(_828, _829, _830), vec3(_2534, _2535, _2536));
        float _4435 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2545 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2534, _2535, _2536));
        float _4446 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _2526 * _2526;
        float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
        float _2562 = (exp2(log2(1.0 - (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2563 = 1.0 - _2526;
        float _2573 = (0.5 / (((_2199 * ((_2540 * _2563) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2563) + _2526) * _2540))) * _2540;
        float _4457 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2496 = (((_2562 * cbLight._m0[_2511].x) * _2575) * _2576) + _2386;
        _2498 = (((_2562 * cbLight._m0[_2511].y) * _2575) * _2576) + _2388;
        _2500 = (((_2562 * cbLight._m0[_2511].z) * _2575) * _2576) + _2390;
    }
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_2029.y == 0u)
    {
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2651;
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2651;
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2651;
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.x;
        uint _2678 = uint((float(_2666.y) * floor(float(uint(cbSceneParam._m0[85u].y * _916) / _2667))) + floor(float(uint(cbSceneParam._m0[85u].x * _915) / _2667)));
        float _2688 = (log2(_2654 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2689 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        uint _2692 = uint(isnan(14.0) ? _2689 : (isnan(_2689) ? 14.0 : min(_2689, 14.0)));
        uvec4 _2697 = texelFetch(g_lightClusterGridBuffer, int(((_2692 << 2u) + (_2678 << 6u)) >> 2u));
        uint _2698 = _2697.x;
        uint _2699 = _2666.z;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        if (((((1u << ((_2699 >> 4u) & 15u)) + 4294967295u) & _2698) == 0u) || ((_2699 & 240u) == 0u))
        {
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
        }
        else
        {
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            uint _2950 = 0u;
            uint _2959;
            bool _2960;
            for (;;)
            {
                _2959 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_2950 << 2u)) >> 2u)).x;
                _2960 = _2959 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2960)
                {
                    frontier_phi_61_pred = _2944;
                    frontier_phi_61_pred_1 = _2949;
                    frontier_phi_61_pred_2 = _2948;
                    frontier_phi_61_pred_3 = _2947;
                    frontier_phi_61_pred_4 = _2946;
                    frontier_phi_61_pred_5 = _2945;
                }
                else
                {
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    uint _3074;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2949;
                    _3074 = _2959;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    for (;;)
                    {
                        uint _3078 = uint(findLSB(_3074)) + (_2950 << 5u);
                        uint _3075 = (_3074 + 4294967295u) & _3074;
                        uint _3080 = _3078 * 48u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3100 = (_3078 * 48u) + 4u;
                        vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 3u)).x));
                        uint _3119 = (_3078 * 48u) + 8u;
                        vec3 _3130 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x));
                        float _3134 = _3094.x - _2652;
                        float _3135 = _3094.y - _2653;
                        float _3136 = _3094.z - _2654;
                        float _3137 = dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136));
                        float _3140 = inversesqrt(_3137);
                        float _3141 = _3140 * _3134;
                        float _3142 = _3140 * _3135;
                        float _3143 = _3140 * _3136;
                        float _3144 = dot(vec3(_934, _937, _940), vec3(_3141, _3142, _3143));
                        float _3149 = 1.0 - (_3137 * _3094.w);
                        float _4483 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3151 = sqrt(_3137) * _3113.w;
                        float _3154 = 1.39999997615814208984375 / (_3151 + 1.39999997615814208984375);
                        float _3155 = _3154 * _3154;
                        float _3158 = ((1.0 - _3155) * _3144) + _3155;
                        float _3161 = _3151 * _3151;
                        float _3165 = ((isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))) * _3150) / ((_3161 * 0.699999988079071044921875) + 1.0);
                        float _3169 = (-0.0) - _2652;
                        float _3170 = (-0.0) - _2653;
                        float _3171 = (-0.0) - _2654;
                        float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3186 = exp2(log2(1.0 / ((_3161 * 3.5) + 5.0)) * 0.25);
                        float _3187 = 1.0 - _994;
                        float _3194 = sqrt(1.0 - ((1.0 - (_3187 * _3187)) * (1.0 - (_3186 * _3186))));
                        float _3195 = _3194 * _3194;
                        float _3196 = _3195 * _3195;
                        float _3197 = _3176 + _3141;
                        float _3198 = _3177 + _3142;
                        float _3199 = _3178 + _3143;
                        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                        float _3207 = dot(vec3(_934, _937, _940), vec3(_3176, _3177, _3178));
                        float _4499 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3210 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3211 = dot(vec3(_934, _937, _940), vec3(_3203 * _3197, _3203 * _3198, _3203 * _3199));
                        float _4510 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3214 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3218 = ((_3214 * _3214) * (_3196 + (-1.0))) + 1.0;
                        float _3219 = _3154 * _3195;
                        float _3220 = _3219 * _3219;
                        float _3223 = ((1.0 - _3220) * _3144) + _3220;
                        float _4521 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3224 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3225 = 1.0 - _3195;
                        float _3235 = (0.5 / (((_3224 * ((_3210 * _3225) + _3195)) + 9.9999999392252902907785028219223e-09) + (((_3224 * _3225) + _3195) * _3210))) * _3224;
                        float _4532 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3246 = (((_3196 * 3.1415927410125732421875) * (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) / ((_3218 * _3218) * ((_3161 * 2.1991131305694580078125) + 3.141590118408203125))) * _3150;
                        _3003 = (_3165 * _3113.x) + _3071;
                        _3004 = (_3165 * _3113.y) + _3072;
                        _3005 = (_3165 * _3113.z) + _3073;
                        _3000 = (_3246 * _3130.x) + _3068;
                        _3001 = (_3246 * _3130.y) + _3069;
                        _3002 = (_3246 * _3130.z) + _3070;
                        if (_3075 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3005;
                            _3074 = _3075;
                        }
                    }
                    frontier_phi_61_pred = _3000;
                    frontier_phi_61_pred_1 = _3005;
                    frontier_phi_61_pred_2 = _3004;
                    frontier_phi_61_pred_3 = _3003;
                    frontier_phi_61_pred_4 = _3002;
                    frontier_phi_61_pred_5 = _3001;
                }
                _2800 = frontier_phi_61_pred;
                _2810 = frontier_phi_61_pred_1;
                _2808 = frontier_phi_61_pred_2;
                _2806 = frontier_phi_61_pred_3;
                _2804 = frontier_phi_61_pred_4;
                _2802 = frontier_phi_61_pred_5;
                uint _2951 = _2950 + 1u;
                if (_2951 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2944 = _2800;
                    _2945 = _2802;
                    _2946 = _2804;
                    _2947 = _2806;
                    _2948 = _2808;
                    _2949 = _2810;
                    _2950 = _2951;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
        }
        uvec4 _2813 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2814 = _2813.z;
        uint _2816 = (_2814 >> 8u) & 15u;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((4294967295u << _2816) & _2698) == 0u)
        {
            _2912 = _2799;
            _2914 = _2801;
            _2916 = _2803;
            _2918 = _2805;
            _2920 = _2807;
            _2922 = _2809;
        }
        else
        {
            float _2937 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
            float _2938 = _2937 * _2652;
            float _2939 = _2937 * _2653;
            float _2940 = _2937 * _2654;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2816 < ((_2814 >> 12u) & 15u))
            {
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _3051 = _2799;
                float _3052 = _2801;
                float _3053 = _2803;
                float _3054 = _2805;
                float _3055 = _2807;
                float _3056 = _2809;
                uint _3057 = _2816;
                uint _3066;
                bool _3067;
                for (;;)
                {
                    _3066 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_3057 << 2u)) >> 2u)).x;
                    _3067 = _3066 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3067)
                    {
                        frontier_phi_67_pred = _3054;
                        frontier_phi_67_pred_1 = _3055;
                        frontier_phi_67_pred_2 = _3056;
                        frontier_phi_67_pred_3 = _3053;
                        frontier_phi_67_pred_4 = _3052;
                        frontier_phi_67_pred_5 = _3051;
                    }
                    else
                    {
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3264 = _3051;
                        float _3265 = _3052;
                        float _3266 = _3053;
                        float _3267 = _3054;
                        float _3268 = _3055;
                        float _3269 = _3056;
                        uint _3270 = _3066;
                        uint _3271;
                        vec4 _3296;
                        float _3297;
                        vec4 _3312;
                        vec3 _3324;
                        vec4 _3339;
                        vec4 _3354;
                        float _3400;
                        bool _3401;
                        for (;;)
                        {
                            uint _3281 = ((_3057 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3270));
                            _3271 = (_3270 + 4294967295u) & _3270;
                            uint _3283 = _3281 * 40u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            _3297 = _3296.w;
                            uint _3299 = (_3281 * 40u) + 4u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3281 * 40u) + 8u;
                            _3324 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x));
                            uint _3326 = (_3281 * 40u) + 16u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3341 = (_3281 * 40u) + 20u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3281 * 40u) + 24u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3375 = (_3281 * 40u) + 28u;
                            vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            _3400 = fma(_2654, _3388.z, fma(_2653, _3388.y, _3388.x * _2652)) + _3388.w;
                            _3401 = !((fma(_2654, _3369.z, fma(_2653, _3369.y, _3369.x * _2652)) + _3369.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3401)
                            {
                                float _3428 = _3296.x - _2652;
                                float _3429 = _3296.y - _2653;
                                float _3430 = _3296.z - _2654;
                                float _3431 = dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430));
                                float _3434 = inversesqrt(_3431);
                                float _3435 = _3434 * _3428;
                                float _3436 = _3434 * _3429;
                                float _3437 = _3434 * _3430;
                                float _3441 = 1.0 - (_3431 / (_3297 * _3297));
                                float _4543 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3446 = sqrt(_3431) * _3312.w;
                                float _3448 = 1.39999997615814208984375 / (_3446 + 1.39999997615814208984375);
                                float _3449 = _3448 * _3448;
                                float _3452 = ((1.0 - _3449) * dot(vec3(_3435, _3436, _3437), vec3(_934, _937, _940))) + _3449;
                                float _3455 = _3446 * _3446;
                                float _3459 = (fma(_2654, _3339.z, fma(_2653, _3339.y, _3339.x * _2652)) + _3339.w) / _3400;
                                float _3460 = (fma(_2654, _3354.z, fma(_2653, _3354.y, _3354.x * _2652)) + _3354.w) / _3400;
                                float _3464 = 1.0 - dot(vec2(_3459, _3460), vec2(_3459, _3460));
                                float _4559 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3466 = _3465 * (((isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0))) * _3442) / ((_3455 * 0.699999988079071044921875) + 1.0));
                                float _3478 = exp2(log2(1.0 / ((_3455 * 3.5) + 5.0)) * 0.25);
                                float _3479 = 1.0 - _994;
                                float _3486 = sqrt(1.0 - ((1.0 - (_3479 * _3479)) * (1.0 - (_3478 * _3478))));
                                float _3487 = _3486 * _3486;
                                float _3488 = _3487 * _3487;
                                float _3489 = _3435 - _2938;
                                float _3490 = _3436 - _2939;
                                float _3491 = _3437 - _2940;
                                float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                                float _3499 = dot(vec3(_934, _937, _940), vec3((-0.0) - _2938, (-0.0) - _2939, (-0.0) - _2940));
                                float _4570 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3502 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3503 = dot(vec3(_934, _937, _940), vec3(_3495 * _3489, _3495 * _3490, _3495 * _3491));
                                float _4581 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3506 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3510 = ((_3506 * _3506) * (_3488 + (-1.0))) + 1.0;
                                float _3511 = _3448 * _3487;
                                float _3512 = _3511 * _3511;
                                float _3518 = ((1.0 - _3512) * dot(vec3(_934, _937, _940), vec3(_3435, _3436, _3437))) + _3512;
                                float _4592 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3520 = 1.0 - _3487;
                                float _3530 = (0.5 / (((_3519 * ((_3502 * _3520) + _3487)) + 9.9999999392252902907785028219223e-09) + (((_3519 * _3520) + _3487) * _3502))) * _3519;
                                float _4603 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3540 = (_3465 * _3442) * (((_3488 * 3.1415927410125732421875) * (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) / ((_3510 * _3510) * ((_3455 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3540 * _3324.x;
                                frontier_phi_73_pred_1 = _3540 * _3324.y;
                                frontier_phi_73_pred_2 = _3466 * _3312.z;
                                frontier_phi_73_pred_3 = _3466 * _3312.y;
                                frontier_phi_73_pred_4 = _3466 * _3312.x;
                                frontier_phi_73_pred_5 = _3540 * _3324.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3544 = frontier_phi_73_pred;
                            _3545 = frontier_phi_73_pred_1;
                            _3549 = frontier_phi_73_pred_2;
                            _3548 = frontier_phi_73_pred_3;
                            _3547 = frontier_phi_73_pred_4;
                            _3546 = frontier_phi_73_pred_5;
                            _3254 = _3547 + _3267;
                            _3255 = _3548 + _3268;
                            _3256 = _3549 + _3269;
                            _3251 = _3544 + _3264;
                            _3252 = _3545 + _3265;
                            _3253 = _3546 + _3266;
                            if (_3271 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3271;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3254;
                        frontier_phi_67_pred_1 = _3255;
                        frontier_phi_67_pred_2 = _3256;
                        frontier_phi_67_pred_3 = _3253;
                        frontier_phi_67_pred_4 = _3252;
                        frontier_phi_67_pred_5 = _3251;
                    }
                    _2919 = frontier_phi_67_pred;
                    _2921 = frontier_phi_67_pred_1;
                    _2923 = frontier_phi_67_pred_2;
                    _2917 = frontier_phi_67_pred_3;
                    _2915 = frontier_phi_67_pred_4;
                    _2913 = frontier_phi_67_pred_5;
                    uint _3058 = _3057 + 1u;
                    if (_3058 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3051 = _2913;
                        _3052 = _2915;
                        _3053 = _2917;
                        _3054 = _2919;
                        _3055 = _2921;
                        _3056 = _2923;
                        _3057 = _3058;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2921;
                frontier_phi_55_56_ladder_1 = _2923;
                frontier_phi_55_56_ladder_2 = _2919;
                frontier_phi_55_56_ladder_3 = _2917;
                frontier_phi_55_56_ladder_4 = _2915;
                frontier_phi_55_56_ladder_5 = _2913;
            }
            else
            {
                frontier_phi_55_56_ladder = _2807;
                frontier_phi_55_56_ladder_1 = _2809;
                frontier_phi_55_56_ladder_2 = _2805;
                frontier_phi_55_56_ladder_3 = _2803;
                frontier_phi_55_56_ladder_4 = _2801;
                frontier_phi_55_56_ladder_5 = _2799;
            }
            _2912 = frontier_phi_55_56_ladder_5;
            _2914 = frontier_phi_55_56_ladder_4;
            _2916 = frontier_phi_55_56_ladder_3;
            _2918 = frontier_phi_55_56_ladder_2;
            _2920 = frontier_phi_55_56_ladder;
            _2922 = frontier_phi_55_56_ladder_1;
        }
        float _2927 = isnan(1.0) ? _978 : (isnan(_978) ? 1.0 : min(_978, 1.0));
        _2711 = (_2927 * _2918) + _2163;
        _2713 = (_2927 * _2920) + _2165;
        _2715 = (_2927 * _2922) + _2167;
        _2717 = ((_2912 * 0.039999999105930328369140625) * _2927) + _2496;
        _2719 = ((_2914 * 0.039999999105930328369140625) * _2927) + _2498;
        _2721 = ((_2916 * 0.039999999105930328369140625) * _2927) + _2500;
    }
    else
    {
        _2711 = _2163;
        _2713 = _2165;
        _2715 = _2167;
        _2717 = _2496;
        _2719 = _2498;
        _2721 = _2500;
    }
    float _4619 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _4630 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4641 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    uint _2741 = _272 + 6u;
    float _2749 = _915 / cbSceneParam._m0[86u].x;
    float _2750 = _916 / cbSceneParam._m0[86u].y;
    vec4 _2764 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, (log2((isnan(cbSceneParam._m0[77u].w) ? _849 : (isnan(_849) ? cbSceneParam._m0[77u].w : min(_849, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2766 = _2764.x;
    float _2767 = _2764.y;
    float _2768 = _2764.z;
    float _2769 = _2764.w;
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    if (_849 > cbSceneParam._m0[78u].w)
    {
        float _2824 = isnan(_849) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _849 : min(cbSceneParam._m0[80u].w, _849));
        float _2825 = _2824 / _849;
        float _2836 = _2825 * _900;
        float _2837 = _901 * _2825;
        float _2838 = (-0.0) - _2837;
        float _2840 = _2825 * _902;
        float _2842 = (cbSceneParam._m0[77u].w * _2838) / _2824;
        float _2843 = _2842 + cbSceneParam._m0[79u].w;
        float _2844 = cbSceneParam._m0[79u].w - _2837;
        float _2850 = sqrt(((_2836 * _2836) + (_2837 * _2837)) + (_2840 * _2840));
        float _2853 = (1.0 - (cbSceneParam._m0[77u].w / _2824)) * _2850;
        float _2858 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2860 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3013;
        if (abs((_2838 - _2842) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3013 = ((((_2843 > 0.0) ? exp2(_2858 * _2843) : (2.0 - exp2(_2860 * _2843))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2853;
        }
        else
        {
            float _2973 = 1.0 / cbSceneParam._m0[80u].x;
            float _2974 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : max(_2843, _2844));
            float _2975 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : min(_2843, _2844));
            float _2984 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : min(_2974, 0.0));
            float _2985 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : min(_2975, 0.0));
            _3013 = ((abs(_2850 / _2838) * cbSceneParam._m0[80u].y) * ((((_2984 - _2985) * 2.0) - ((exp2(_2858 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0)))) - exp2(_2858 * (isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))))) * _2973)) - ((exp2(_2860 * _2984) - exp2(_2860 * _2985)) * _2973))) + (_2853 * cbSceneParam._m0[80u].z);
        }
        vec4 _3015 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, 1.0), 0.0);
        float _3024 = exp2((_3013 * (-1.44269502162933349609375)) * (1.0 - _3015.w));
        float _3025 = log2(_3024);
        float _3041 = log2(_2769);
        _2862 = (exp2(_3041 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].x)) * _3015.x) / cbSceneParam._m0[78u].x)) + _2766;
        _2864 = (exp2(_3041 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].y)) * _3015.y) / cbSceneParam._m0[78u].y)) + _2767;
        _2866 = (exp2(_3041 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].z)) * _3015.z) / cbSceneParam._m0[78u].z)) + _2768;
        _2868 = _3024 * _2769;
    }
    else
    {
        _2862 = _2766;
        _2864 = _2767;
        _2866 = _2768;
        _2868 = _2769;
    }
    float _2880 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2881 = _2880 == 3.0;
    float _2882 = log2(_2868);
    float _2889 = exp2(_2882 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2711 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _978))) + ((_2717 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1781)) * cbPerFrame._m0[3u].x));
    float _2890 = exp2(_2882 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2713 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _978))) + ((_2719 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1781)) * cbPerFrame._m0[3u].x));
    float _2891 = exp2(_2882 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2715 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _978))) + ((_2721 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1781)) * cbPerFrame._m0[3u].x));
    float _2900 = (_2880 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2900 * (_2881 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2862)));
    SV_Target.y = _2900 * (_2881 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2864)));
    SV_Target.z = _2900 * (_2881 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2866)));
    SV_Target.w = cbInstanceData._m0[_2741].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2741].w;
}


