#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1016;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _267 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _273 = _267.x * cbMtdParam._m0[11u].x;
    float _274 = _267.y * cbMtdParam._m0[11u].y;
    float _275 = _267.z * cbMtdParam._m0[11u].z;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _246) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _247) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].z) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3349 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _387 = (_380 * ((_294.x * cbMtdParam._m0[12u].x) - _273)) + _273;
    float _388 = (_380 * ((_294.y * cbMtdParam._m0[12u].y) - _274)) + _274;
    float _389 = (_380 * ((_294.z * cbMtdParam._m0[12u].z) - _275)) + _275;
    vec4 _402 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _246) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _247) + cbTextureTilingScale._m0[4u].w));
    vec4 _419 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _421 = _419.x;
    float _422 = _419.y;
    float _423 = _419.z;
    float _432 = ((_402.z - _423) * _380) + _423;
    float _435 = ((((_402.x - _421) * _380) + _421) * 2.0) + (-1.0);
    float _437 = ((((_402.y - _422) * _380) + _422) * 2.0) + (-1.0);
    float _438 = dot(vec2(_435, _437), vec2(_435, _437));
    float _3360 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _443 = sqrt(1.0 - (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))));
    vec4 _459 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _471 = (((_459.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _435;
    float _472 = (((_459.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _437;
    float _476 = (cbMtdParam._m0[19u].w * (_459.z - _432)) + _432;
    float _480 = cbMtdParam._m0[22u].x + _459.w;
    float _483 = fma(_443, _213 * NORMAL.x, fma(_472, _220 * TANGENT.x, (_206 * _198) * _471));
    float _486 = fma(_443, _213 * NORMAL.y, fma(_472, _220 * TANGENT.y, (_206 * _199) * _471));
    float _489 = fma(_443, _213 * NORMAL.z, fma(_472, _220 * TANGENT.z, (_206 * _200) * _471));
    float _493 = inversesqrt(dot(vec3(_483, _486, _489), vec3(_483, _486, _489)));
    float _494 = _493 * _483;
    float _495 = _493 * _486;
    float _496 = _493 * _489;
    float _3371 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _497 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _3382 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3393 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3404 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3415 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _515 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _567 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _557);
    float _568 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _557);
    float _569 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _557);
    float _573 = inversesqrt(dot(vec3(_567, _568, _569), vec3(_567, _568, _569)));
    float _574 = _567 * _573;
    float _575 = _568 * _573;
    float _576 = _569 * _573;
    float _582 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _583 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _601 = fma(_496, cbSceneParam._m0[5u].z, fma(_495, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _494));
    float _604 = fma(_496, cbSceneParam._m0[6u].z, fma(_495, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _494));
    float _607 = fma(_496, cbSceneParam._m0[7u].z, fma(_495, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _494));
    uint _621 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _627 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * cbInstanceData._m0[_621].x;
    float _628 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) * cbInstanceData._m0[_621].y;
    float _629 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0)))) * cbInstanceData._m0[_621].z;
    float _3426 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    vec4 _641 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _582, cbSceneParam._m0[86u].y * _583));
    float _645 = ((isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * TEXCOORD_5.w) * _641.x;
    float _646 = dot(vec3(_494, _495, _496), vec3(_574, _575, _576));
    float _649 = _646 * 2.0;
    float _653 = (_649 * _494) - _574;
    float _654 = (_649 * _495) - _575;
    float _655 = (_649 * _496) - _576;
    float _659 = abs(dot(vec3(_574, _575, _576), vec3(_494, _495, _496)));
    float _3459 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _661 = sqrt(_497);
    float _674 = exp2((_661 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_661 * 3.0));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1015;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _740 = fma(_714, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _706));
        float _744 = fma(_714, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _706));
        float _748 = fma(_714, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _706));
        float _773 = _706 + _494;
        float _774 = _710 + _495;
        float _775 = _714 + _496;
        float _785 = fma(_775, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773)) - _740;
        float _786 = fma(_775, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773)) - _744;
        float _787 = fma(_775, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773)) - _748;
        float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
        float _804 = ((_791 * _785) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_740 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_791 * _786) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_744 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_791 * _787) / cbModelParam._m0[34u].z) + ((((((_748 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        float _843 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_809.x + (-0.5));
        float _845 = _843 * (_809.y + (-0.5));
        float _846 = _843 * (_809.z + (-0.5));
        float _853 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_816.x + (-0.5));
        float _855 = _853 * (_816.y + (-0.5));
        float _856 = _853 * (_816.z + (-0.5));
        float _863 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_823.x + (-0.5));
        float _865 = _863 * (_823.y + (-0.5));
        float _866 = _863 * (_823.z + (-0.5));
        float _873 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_830.x + (-0.5));
        float _875 = _873 * (_830.y + (-0.5));
        float _876 = _873 * (_830.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _897 = (dot(vec3(_494, _495, _496), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _907 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3507 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_909 + 1.0))) + _914) * _877;
        float _924 = _845 * 0.5;
        float _925 = _855 * 0.5;
        float _926 = _865 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_494, _495, _496), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3540 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_951 + 1.0))) + _956) * _878;
        float _966 = _846 * 0.5;
        float _967 = _856 * 0.5;
        float _968 = _866 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_494, _495, _496), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3573 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_993 + 1.0))) + _998) * _879;
        _1015 = _846;
        _1017 = _845;
        _1018 = _844;
        _1019 = _856;
        _1020 = _855;
        _1021 = _854;
        _1022 = _866;
        _1023 = _865;
        _1024 = _864;
        _1025 = _879;
        _1026 = _878;
        _1027 = _877;
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
    }
    else
    {
        _1015 = _1016;
        _1017 = _1016;
        _1018 = _1016;
        _1019 = _1016;
        _1020 = _1016;
        _1021 = _1016;
        _1022 = _1016;
        _1023 = _1016;
        _1024 = _1016;
        _1025 = _1016;
        _1026 = _1016;
        _1027 = _1016;
        _1028 = 0.0;
        _1029 = 0.0;
        _1030 = 0.0;
    }
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1055 = fma(_714, cbModelParam._m0[30u].z, fma(_710, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _706));
        float _1059 = fma(_714, cbModelParam._m0[31u].z, fma(_710, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _706));
        float _1063 = fma(_714, cbModelParam._m0[32u].z, fma(_710, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _706));
        float _1086 = _706 + _494;
        float _1087 = _710 + _495;
        float _1088 = _714 + _496;
        float _1098 = fma(_1088, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1086)) - _1055;
        float _1099 = fma(_1088, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1086)) - _1059;
        float _1100 = fma(_1088, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1086)) - _1063;
        float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
        float _1117 = ((_1104 * _1098) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1055 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1104 * _1099) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1059 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1104 * _1100) / cbModelParam._m0[35u].z) + ((((((_1063 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        float _1154 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1121.x + (-0.5));
        float _1156 = _1154 * (_1121.y + (-0.5));
        float _1157 = _1154 * (_1121.z + (-0.5));
        float _1164 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1128.x + (-0.5));
        float _1166 = _1164 * (_1128.y + (-0.5));
        float _1167 = _1164 * (_1128.z + (-0.5));
        float _1174 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1135.x + (-0.5));
        float _1176 = _1174 * (_1135.y + (-0.5));
        float _1177 = _1174 * (_1135.z + (-0.5));
        float _1184 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1142.x + (-0.5));
        float _1186 = _1184 * (_1142.y + (-0.5));
        float _1187 = _1184 * (_1142.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_494, _495, _496), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3636 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1218 + 1.0))) + _1223) * _1188;
        float _1233 = _1156 * 0.5;
        float _1234 = _1166 * 0.5;
        float _1235 = _1176 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_494, _495, _496), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3669 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1260 + 1.0))) + _1265) * _1189;
        float _1275 = _1157 * 0.5;
        float _1276 = _1167 * 0.5;
        float _1277 = _1177 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_494, _495, _496), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3702 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1302 + 1.0))) + _1307) * _1190;
        _1324 = _1157;
        _1325 = _1156;
        _1326 = _1155;
        _1327 = _1167;
        _1328 = _1166;
        _1329 = _1165;
        _1330 = _1177;
        _1331 = _1176;
        _1332 = _1175;
        _1333 = _1190;
        _1334 = _1189;
        _1335 = _1188;
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
    }
    else
    {
        _1324 = _1016;
        _1325 = _1016;
        _1326 = _1016;
        _1327 = _1016;
        _1328 = _1016;
        _1329 = _1016;
        _1330 = _1016;
        _1331 = _1016;
        _1332 = _1016;
        _1333 = _1016;
        _1334 = _1016;
        _1335 = _1016;
        _1336 = 0.0;
        _1337 = 0.0;
        _1338 = 0.0;
    }
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1028)) + _1028;
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1029)) + _1029;
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1030)) + _1030;
    float _1371 = fma(_1350, cbSceneParam._m0[89u].z, fma(_1349, cbSceneParam._m0[89u].y, _1348 * cbSceneParam._m0[89u].x));
    float _1374 = fma(_1350, cbSceneParam._m0[90u].z, fma(_1349, cbSceneParam._m0[90u].y, _1348 * cbSceneParam._m0[90u].x));
    float _1377 = fma(_1350, cbSceneParam._m0[91u].z, fma(_1349, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1348));
    float _1392 = _653 * 0.5;
    float _1393 = _654 * 0.5;
    float _1394 = _655 * 0.5;
    float _1395 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1398 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1401 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1435;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1408 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1015, _1019, _1022, _1025));
        float _1412 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1017, _1020, _1023, _1026));
        float _1416 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1018, _1021, _1024, _1027));
        float _1423 = dot(vec4(cbModelParam._m0[39u]), vec4(_1392, _1393, _1394, 1.0));
        _1435 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1423) ? 0.0 : (isnan(0.0) ? _1423 : max(0.0, _1423))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1435 = 1.0;
    }
    float _1446;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1437 = dot(vec4(cbModelParam._m0[40u]), vec4(_1392, _1393, _1394, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1437) ? 0.0 : (isnan(0.0) ? _1437 : max(0.0, _1437))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1450 = (_1446 * cbModelParam._m0[1u].x) + (_1435 * (1.0 - cbModelParam._m0[1u].x));
    float _1460 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _497);
    float _1461 = isnan(_1460) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1460 : min(cbModelParam._m0[25u].z, _1460));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1510 = fma(_714, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706)) + cbModelParam._m0[13u].w;
        float _1514 = fma(_714, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706)) + cbModelParam._m0[14u].w;
        float _1518 = fma(_714, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706)) + cbModelParam._m0[15u].w;
        float _1521 = fma(_655, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653));
        float _1524 = fma(_655, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653));
        float _1527 = fma(_655, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653));
        float _1555;
        if (_1521 > 0.0)
        {
            _1555 = abs((1.0 - _1510) / _1521);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1510 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1555 = frontier_phi_14_12_ladder;
        }
        float _1778;
        if (_1524 > 0.0)
        {
            _1778 = abs((1.0 - _1514) / _1524);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1514 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1778 = frontier_phi_23_19_ladder;
        }
        float _2024;
        if (_1527 > 0.0)
        {
            _2024 = abs((1.0 - _1518) / _1527);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1518 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2024 = frontier_phi_35_30_ladder;
        }
        float _2026 = isnan(_1778) ? _1555 : (isnan(_1555) ? _1778 : min(_1555, _1778));
        float _2027 = isnan(_2024) ? _2026 : (isnan(_2026) ? _2024 : min(_2026, _2024));
        float _2031 = (_2027 * _1521) + _1510;
        float _2032 = (_2027 * _1524) + _1514;
        float _2033 = (_2027 * _1527) + _1518;
        float _2034 = _2027 * 9.9999997473787516355514526367188e-05;
        float _2036 = (-1.0) - _2034;
        float _2038 = _2034 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2033 > _2038) || ((_2033 < _2036) || ((_2032 > _2038) || ((_2032 < _2036) || ((_2031 < _2036) || (_2031 > _2038))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2157 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2033, cbModelParam._m0[9u].z, fma(_2032, cbModelParam._m0[9u].y, _2031 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2033, cbModelParam._m0[10u].z, fma(_2032, cbModelParam._m0[10u].y, _2031 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2033, cbModelParam._m0[11u].z, fma(_2032, cbModelParam._m0[11u].y, _2031 * cbModelParam._m0[11u].x))), _1461);
            frontier_phi_13_35_ladder = _2157.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2157.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2157.x * cbModelParam._m0[1u].y;
        }
        _1543 = frontier_phi_13_35_ladder_2;
        _1545 = frontier_phi_13_35_ladder_1;
        _1547 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_653, _654, _655), _1461);
        _1543 = _1531.x * cbModelParam._m0[1u].y;
        _1545 = _1531.y * cbModelParam._m0[1u].y;
        _1547 = _1531.z * cbModelParam._m0[1u].y;
    }
    float _1551 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _497);
    float _1552 = isnan(_1551) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1551 : min(cbModelParam._m0[25u].w, _1551));
    float _1643;
    float _1645;
    float _1647;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1607 = fma(_714, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706)) + cbModelParam._m0[21u].w;
        float _1611 = fma(_714, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706)) + cbModelParam._m0[22u].w;
        float _1615 = fma(_714, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706)) + cbModelParam._m0[23u].w;
        float _1618 = fma(_655, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653));
        float _1621 = fma(_655, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653));
        float _1624 = fma(_655, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653));
        float _1783;
        if (_1618 > 0.0)
        {
            _1783 = abs((1.0 - _1607) / _1618);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1607 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1783 = frontier_phi_25_21_ladder;
        }
        float _2051;
        if (_1621 > 0.0)
        {
            _2051 = abs((1.0 - _1611) / _1621);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1611 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2051 = frontier_phi_37_32_ladder;
        }
        float _2256;
        if (_1624 > 0.0)
        {
            _2256 = abs((1.0 - _1615) / _1624);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1615 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2256 = frontier_phi_46_43_ladder;
        }
        float _2258 = isnan(_2051) ? _1783 : (isnan(_1783) ? _2051 : min(_1783, _2051));
        float _2259 = isnan(_2256) ? _2258 : (isnan(_2258) ? _2256 : min(_2258, _2256));
        float _2263 = (_2259 * _1618) + _1607;
        float _2264 = (_2259 * _1621) + _1611;
        float _2265 = (_2259 * _1624) + _1615;
        float _2266 = _2259 * 9.9999997473787516355514526367188e-05;
        float _2267 = (-1.0) - _2266;
        float _2269 = _2266 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2265 > _2269) || ((_2265 < _2267) || ((_2264 > _2269) || ((_2264 < _2267) || ((_2263 < _2267) || (_2263 > _2269))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2265, cbModelParam._m0[17u].z, fma(_2264, cbModelParam._m0[17u].y, _2263 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2265, cbModelParam._m0[18u].z, fma(_2264, cbModelParam._m0[18u].y, _2263 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2265, cbModelParam._m0[19u].z, fma(_2264, cbModelParam._m0[19u].y, _2263 * cbModelParam._m0[19u].x))), _1552);
            frontier_phi_22_46_ladder = _2464.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2464.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2464.x * cbModelParam._m0[1u].z;
        }
        _1643 = frontier_phi_22_46_ladder_2;
        _1645 = frontier_phi_22_46_ladder_1;
        _1647 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_653, _654, _655), _1552);
        _1643 = _1627.x * cbModelParam._m0[1u].z;
        _1645 = _1627.y * cbModelParam._m0[1u].z;
        _1647 = _1627.z * cbModelParam._m0[1u].z;
    }
    float _1659 = ((((1.0 - _674) * ((_661 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_674 * _661)) * _645;
    float _1660 = _1659 * ((cbModelParam._m0[1u].w * (_1643 - _1543)) + _1543);
    float _1661 = _1659 * ((cbModelParam._m0[1u].w * (_1645 - _1545)) + _1545);
    float _1662 = _1659 * ((cbModelParam._m0[1u].w * (_1647 - _1547)) + _1547);
    float _1665 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, _1660 * cbSceneParam._m0[91u].x));
    vec4 _1679 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_582, _583));
    float _1681 = _1679.w;
    float _1693 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1681);
    float _1694 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1681);
    float _1695 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1681);
    uvec4 _1699 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1701 = _1699.x * 14u;
    uint _1702 = _1701 + 13u;
    float _1709 = _645 + (-1.0);
    float _1714 = (cbLight._m0[_1702].x * _1709) + 1.0;
    float _1715 = (cbLight._m0[_1702].y * _1709) + 1.0;
    float _1716 = (cbLight._m0[_1702].z * _1709) + 1.0;
    float _1717 = (cbLight._m0[_1702].w * _1709) + 1.0;
    uint _1718 = _1701 + 5u;
    float _1724 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
    uint _1728 = _1701 + 4u;
    float _1737 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
    uint _1741 = _1701 | 1u;
    float _1752 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_494, _495, _496));
    float _1755 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_494, _495, _496));
    float _3838 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _3849 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1760 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.3183098733425140380859375;
    float _1762 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * 0.3183098733425140380859375;
    float _1769 = ((cbLight._m0[_1718].x * _1724) * _1762) + (((cbLight._m0[_1728].x * _1693) * _1737) * _1760);
    float _1770 = ((_1724 * cbLight._m0[_1718].y) * _1762) + (((cbLight._m0[_1728].y * _1694) * _1737) * _1760);
    float _1771 = ((_1724 * cbLight._m0[_1718].z) * _1762) + (((cbLight._m0[_1728].z * _1695) * _1737) * _1760);
    uvec4 _1775 = floatBitsToUint(cbLight._m0[_1701 + 12u]);
    bool _1777 = _1775.x == 0u;
    float _1788;
    float _1790;
    float _1792;
    if (_1777)
    {
        _1788 = _1769;
        _1790 = _1770;
        _1792 = _1771;
    }
    else
    {
        uint _1796 = _1701 + 6u;
        float _1812 = (dot(vec3(cbLight._m0[_1701 + 2u].xyz), vec3(_494, _495, _496)) * 0.5) + 0.5;
        float _1813 = _1812 * _1812;
        float _3860 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1815 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
        _1788 = (((cbLight._m0[_1796].x * 0.3183098733425140380859375) * _1814) * _1815) + _1769;
        _1790 = (((cbLight._m0[_1796].y * 0.3183098733425140380859375) * _1814) * _1815) + _1770;
        _1792 = (((cbLight._m0[_1796].z * 0.3183098733425140380859375) * _1814) * _1815) + _1771;
    }
    bool _1795 = _1775.y == 0u;
    float _1833;
    float _1835;
    float _1837;
    if (_1795)
    {
        _1833 = _1788;
        _1835 = _1790;
        _1837 = _1792;
    }
    else
    {
        uint _1995 = _1701 + 7u;
        float _2011 = (dot(vec3(cbLight._m0[_1701 + 3u].xyz), vec3(_494, _495, _496)) * 0.5) + 0.5;
        float _2012 = _2011 * _2011;
        float _3876 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _2014 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _1833 = (((cbLight._m0[_1995].x * 0.3183098733425140380859375) * _2013) * _2014) + _1788;
        _1835 = (((cbLight._m0[_1995].y * 0.3183098733425140380859375) * _2013) * _2014) + _1790;
        _1837 = (((cbLight._m0[_1995].z * 0.3183098733425140380859375) * _2013) * _2014) + _1792;
    }
    uint _1840 = _1701 + 8u;
    float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1701].w)) * _497) * 0.949999988079071044921875);
    float _1854 = _1853 * _1853;
    float _1855 = cbLight._m0[_1701].x + _574;
    float _1856 = cbLight._m0[_1701].y + _575;
    float _1857 = cbLight._m0[_1701].z + _576;
    float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
    float _1862 = _1861 * _1855;
    float _1863 = _1861 * _1856;
    float _1864 = _1861 * _1857;
    float _1865 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_1701].xyz));
    float _3892 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _1869 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1870 = dot(vec3(_494, _495, _496), vec3(_1862, _1863, _1864));
    float _3914 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1874 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_1862, _1863, _1864));
    float _3925 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1878 = _1854 * _1854;
    float _1882 = ((_1873 * _1873) * (_1878 + (-1.0))) + 1.0;
    float _1893 = (exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1894 = 1.0 - _1854;
    float _1905 = (0.5 / (((_1869 * ((_1868 * _1894) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _1894) + _1854) * _1868))) * _1868;
    float _3936 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1907 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1878 / ((_1882 * _1882) * 3.141590118408203125));
    uint _1921 = _1701 + 9u;
    float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1741].w)) * _497) * 0.949999988079071044921875);
    float _1933 = _1932 * _1932;
    float _1934 = cbLight._m0[_1741].x + _574;
    float _1935 = cbLight._m0[_1741].y + _575;
    float _1936 = cbLight._m0[_1741].z + _576;
    float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
    float _1941 = _1940 * _1934;
    float _1942 = _1940 * _1935;
    float _1943 = _1940 * _1936;
    float _1944 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_1741].xyz));
    float _3947 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1948 = dot(vec3(_494, _495, _496), vec3(_1941, _1942, _1943));
    float _3958 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1952 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_1941, _1942, _1943));
    float _3969 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1956 = _1933 * _1933;
    float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
    float _1969 = (exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1970 = 1.0 - _1933;
    float _1980 = (0.5 / (((_1869 * ((_1947 * _1970) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _1970) + _1933) * _1947))) * _1947;
    float _3980 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1982 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
    float _1992 = (((_1969 * cbLight._m0[_1921].x) * _1982) * _1724) + ((((cbLight._m0[_1840].x * _1693) * _1893) * _1907) * _1737);
    float _1993 = (((_1969 * cbLight._m0[_1921].y) * _1982) * _1724) + ((((cbLight._m0[_1840].y * _1694) * _1893) * _1907) * _1737);
    float _1994 = (((_1969 * cbLight._m0[_1921].z) * _1982) * _1724) + ((((cbLight._m0[_1840].z * _1695) * _1893) * _1907) * _1737);
    float _2056;
    float _2058;
    float _2060;
    if (_1777)
    {
        _2056 = _1992;
        _2058 = _1993;
        _2060 = _1994;
    }
    else
    {
        uint _2062 = _1701 + 2u;
        uint _2066 = _1701 + 10u;
        float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _497) * 0.949999988079071044921875);
        float _2081 = _2080 * _2080;
        float _2082 = cbLight._m0[_2062].x + _574;
        float _2083 = cbLight._m0[_2062].y + _575;
        float _2084 = cbLight._m0[_2062].z + _576;
        float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
        float _2089 = _2088 * _2082;
        float _2090 = _2088 * _2083;
        float _2091 = _2088 * _2084;
        float _2092 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2062].xyz));
        float _3991 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2096 = dot(vec3(_494, _495, _496), vec3(_2089, _2090, _2091));
        float _4002 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _2100 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2089, _2090, _2091));
        float _4013 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2104 = _2081 * _2081;
        float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
        float _2117 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2118 = 1.0 - _2081;
        float _2128 = (0.5 / (((_1869 * ((_2095 * _2118) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _2118) + _2081) * _2095))) * _2095;
        float _4024 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2130 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
        float _2131 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
        _2056 = (((_2117 * cbLight._m0[_2066].x) * _2130) * _2131) + _1992;
        _2058 = (((_2117 * cbLight._m0[_2066].y) * _2130) * _2131) + _1993;
        _2060 = (((_2117 * cbLight._m0[_2066].z) * _2130) * _2131) + _1994;
    }
    float _2166;
    float _2168;
    float _2170;
    if (_1795)
    {
        _2166 = _2056;
        _2168 = _2058;
        _2170 = _2060;
    }
    else
    {
        uint _2177 = _1701 + 3u;
        uint _2181 = _1701 + 11u;
        float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _497) * 0.949999988079071044921875);
        float _2196 = _2195 * _2195;
        float _2197 = cbLight._m0[_2177].x + _574;
        float _2198 = cbLight._m0[_2177].y + _575;
        float _2199 = cbLight._m0[_2177].z + _576;
        float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
        float _2204 = _2203 * _2197;
        float _2205 = _2203 * _2198;
        float _2206 = _2203 * _2199;
        float _2207 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2177].xyz));
        float _4040 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2211 = dot(vec3(_494, _495, _496), vec3(_2204, _2205, _2206));
        float _4051 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2215 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2204, _2205, _2206));
        float _4062 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2219 = _2196 * _2196;
        float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
        float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2233 = 1.0 - _2196;
        float _2243 = (0.5 / (((_1869 * ((_2210 * _2233) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _2233) + _2196) * _2210))) * _2210;
        float _4073 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2245 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
        float _2246 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _2166 = (((_2232 * cbLight._m0[_2181].x) * _2245) * _2246) + _2056;
        _2168 = (((_2232 * cbLight._m0[_2181].y) * _2245) * _2246) + _2058;
        _2170 = (((_2232 * cbLight._m0[_2181].z) * _2245) * _2246) + _2060;
    }
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    if (_1699.y == 0u)
    {
        float _2321 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2322 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2321;
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2321;
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2321;
        uvec4 _2336 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2337 = _2336.x;
        uint _2348 = uint((float(_2336.y) * floor(float(uint(cbSceneParam._m0[85u].y * _583) / _2337))) + floor(float(uint(cbSceneParam._m0[85u].x * _582) / _2337)));
        float _2358 = (log2(_2324 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2359 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        uint _2362 = uint(isnan(14.0) ? _2359 : (isnan(_2359) ? 14.0 : min(_2359, 14.0)));
        uvec4 _2367 = texelFetch(g_lightClusterGridBuffer, int(((_2362 << 2u) + (_2348 << 6u)) >> 2u));
        uint _2368 = _2367.x;
        uint _2369 = _2336.z;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        if (((((1u << ((_2369 >> 4u) & 15u)) + 4294967295u) & _2368) == 0u) || ((_2369 & 240u) == 0u))
        {
            _2469 = 0.0;
            _2471 = 0.0;
            _2473 = 0.0;
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
        }
        else
        {
            float _2470;
            float _2472;
            float _2474;
            float _2476;
            float _2478;
            float _2480;
            float _2614 = 0.0;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            uint _2620 = 0u;
            uint _2629;
            bool _2630;
            for (;;)
            {
                _2629 = texelFetch(g_lightClassification, int((((_2362 << 5u) + (_2348 << 9u)) + (_2620 << 2u)) >> 2u)).x;
                _2630 = _2629 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2630)
                {
                    frontier_phi_61_pred = _2614;
                    frontier_phi_61_pred_1 = _2619;
                    frontier_phi_61_pred_2 = _2618;
                    frontier_phi_61_pred_3 = _2617;
                    frontier_phi_61_pred_4 = _2616;
                    frontier_phi_61_pred_5 = _2615;
                }
                else
                {
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    uint _2744;
                    _2738 = _2614;
                    _2739 = _2615;
                    _2740 = _2616;
                    _2741 = _2617;
                    _2742 = _2618;
                    _2743 = _2619;
                    _2744 = _2629;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    for (;;)
                    {
                        uint _2748 = uint(findLSB(_2744)) + (_2620 << 5u);
                        uint _2745 = (_2744 + 4294967295u) & _2744;
                        uint _2750 = _2748 * 48u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 3u)).x));
                        uint _2770 = (_2748 * 48u) + 4u;
                        vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 3u)).x));
                        uint _2789 = (_2748 * 48u) + 8u;
                        vec3 _2800 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x));
                        float _2804 = _2764.x - _2322;
                        float _2805 = _2764.y - _2323;
                        float _2806 = _2764.z - _2324;
                        float _2807 = dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806));
                        float _2810 = inversesqrt(_2807);
                        float _2811 = _2810 * _2804;
                        float _2812 = _2810 * _2805;
                        float _2813 = _2810 * _2806;
                        float _2814 = dot(vec3(_601, _604, _607), vec3(_2811, _2812, _2813));
                        float _2819 = 1.0 - (_2807 * _2764.w);
                        float _4099 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2820 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2821 = sqrt(_2807) * _2783.w;
                        float _2824 = 1.39999997615814208984375 / (_2821 + 1.39999997615814208984375);
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2814) + _2825;
                        float _2831 = _2821 * _2821;
                        float _2835 = ((isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0))) * _2820) / ((_2831 * 0.699999988079071044921875) + 1.0);
                        float _2839 = (-0.0) - _2322;
                        float _2840 = (-0.0) - _2323;
                        float _2841 = (-0.0) - _2324;
                        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
                        float _2846 = _2845 * _2839;
                        float _2847 = _2845 * _2840;
                        float _2848 = _2845 * _2841;
                        float _2856 = exp2(log2(1.0 / ((_2831 * 3.5) + 5.0)) * 0.25);
                        float _2857 = 1.0 - _661;
                        float _2864 = sqrt(1.0 - ((1.0 - (_2857 * _2857)) * (1.0 - (_2856 * _2856))));
                        float _2865 = _2864 * _2864;
                        float _2866 = _2865 * _2865;
                        float _2867 = _2846 + _2811;
                        float _2868 = _2847 + _2812;
                        float _2869 = _2848 + _2813;
                        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
                        float _2877 = dot(vec3(_601, _604, _607), vec3(_2846, _2847, _2848));
                        float _4115 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2880 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2881 = dot(vec3(_601, _604, _607), vec3(_2873 * _2867, _2873 * _2868, _2873 * _2869));
                        float _4126 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2884 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2888 = ((_2884 * _2884) * (_2866 + (-1.0))) + 1.0;
                        float _2889 = _2824 * _2865;
                        float _2890 = _2889 * _2889;
                        float _2893 = ((1.0 - _2890) * _2814) + _2890;
                        float _4137 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2894 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                        float _2895 = 1.0 - _2865;
                        float _2905 = (0.5 / (((_2894 * ((_2880 * _2895) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2894 * _2895) + _2865) * _2880))) * _2894;
                        float _4148 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2916 = (((_2866 * 3.1415927410125732421875) * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) / ((_2888 * _2888) * ((_2831 * 2.1991131305694580078125) + 3.141590118408203125))) * _2820;
                        _2673 = (_2835 * _2783.x) + _2741;
                        _2674 = (_2835 * _2783.y) + _2742;
                        _2675 = (_2835 * _2783.z) + _2743;
                        _2670 = (_2916 * _2800.x) + _2738;
                        _2671 = (_2916 * _2800.y) + _2739;
                        _2672 = (_2916 * _2800.z) + _2740;
                        if (_2745 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2738 = _2670;
                            _2739 = _2671;
                            _2740 = _2672;
                            _2741 = _2673;
                            _2742 = _2674;
                            _2743 = _2675;
                            _2744 = _2745;
                        }
                    }
                    frontier_phi_61_pred = _2670;
                    frontier_phi_61_pred_1 = _2675;
                    frontier_phi_61_pred_2 = _2674;
                    frontier_phi_61_pred_3 = _2673;
                    frontier_phi_61_pred_4 = _2672;
                    frontier_phi_61_pred_5 = _2671;
                }
                _2470 = frontier_phi_61_pred;
                _2480 = frontier_phi_61_pred_1;
                _2478 = frontier_phi_61_pred_2;
                _2476 = frontier_phi_61_pred_3;
                _2474 = frontier_phi_61_pred_4;
                _2472 = frontier_phi_61_pred_5;
                uint _2621 = _2620 + 1u;
                if (_2621 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2614 = _2470;
                    _2615 = _2472;
                    _2616 = _2474;
                    _2617 = _2476;
                    _2618 = _2478;
                    _2619 = _2480;
                    _2620 = _2621;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2469 = _2470;
            _2471 = _2472;
            _2473 = _2474;
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
        }
        uvec4 _2483 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2484 = _2483.z;
        uint _2486 = (_2484 >> 8u) & 15u;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        if (((4294967295u << _2486) & _2368) == 0u)
        {
            _2582 = _2469;
            _2584 = _2471;
            _2586 = _2473;
            _2588 = _2475;
            _2590 = _2477;
            _2592 = _2479;
        }
        else
        {
            float _2607 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
            float _2608 = _2607 * _2322;
            float _2609 = _2607 * _2323;
            float _2610 = _2607 * _2324;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2486 < ((_2484 >> 12u) & 15u))
            {
                float _2583;
                float _2585;
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2721 = _2469;
                float _2722 = _2471;
                float _2723 = _2473;
                float _2724 = _2475;
                float _2725 = _2477;
                float _2726 = _2479;
                uint _2727 = _2486;
                uint _2736;
                bool _2737;
                for (;;)
                {
                    _2736 = texelFetch(g_lightClassification, int((((_2362 << 5u) + (_2348 << 9u)) + (_2727 << 2u)) >> 2u)).x;
                    _2737 = _2736 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2737)
                    {
                        frontier_phi_67_pred = _2724;
                        frontier_phi_67_pred_1 = _2725;
                        frontier_phi_67_pred_2 = _2726;
                        frontier_phi_67_pred_3 = _2723;
                        frontier_phi_67_pred_4 = _2722;
                        frontier_phi_67_pred_5 = _2721;
                    }
                    else
                    {
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _2934 = _2721;
                        float _2935 = _2722;
                        float _2936 = _2723;
                        float _2937 = _2724;
                        float _2938 = _2725;
                        float _2939 = _2726;
                        uint _2940 = _2736;
                        uint _2941;
                        vec4 _2966;
                        float _2967;
                        vec4 _2982;
                        vec3 _2994;
                        vec4 _3009;
                        vec4 _3025;
                        float _3071;
                        bool _3072;
                        for (;;)
                        {
                            uint _2951 = ((_2727 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2940));
                            _2941 = (_2940 + 4294967295u) & _2940;
                            uint _2953 = _2951 * 40u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            _2967 = _2966.w;
                            uint _2969 = (_2951 * 40u) + 4u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            uint _2984 = (_2951 * 40u) + 8u;
                            _2994 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x));
                            uint _2996 = (_2951 * 40u) + 16u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3012 = (_2951 * 40u) + 20u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3027 = (_2951 * 40u) + 24u;
                            vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3046 = (_2951 * 40u) + 28u;
                            vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            _3071 = fma(_2324, _3059.z, fma(_2323, _3059.y, _3059.x * _2322)) + _3059.w;
                            _3072 = !((fma(_2324, _3040.z, fma(_2323, _3040.y, _3040.x * _2322)) + _3040.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3072)
                            {
                                float _3099 = _2966.x - _2322;
                                float _3100 = _2966.y - _2323;
                                float _3101 = _2966.z - _2324;
                                float _3102 = dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101));
                                float _3105 = inversesqrt(_3102);
                                float _3106 = _3105 * _3099;
                                float _3107 = _3105 * _3100;
                                float _3108 = _3105 * _3101;
                                float _3112 = 1.0 - (_3102 / (_2967 * _2967));
                                float _4159 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3113 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3117 = sqrt(_3102) * _2982.w;
                                float _3119 = 1.39999997615814208984375 / (_3117 + 1.39999997615814208984375);
                                float _3120 = _3119 * _3119;
                                float _3123 = ((1.0 - _3120) * dot(vec3(_3106, _3107, _3108), vec3(_601, _604, _607))) + _3120;
                                float _3126 = _3117 * _3117;
                                float _3130 = (fma(_2324, _3009.z, fma(_2323, _3009.y, _3009.x * _2322)) + _3009.w) / _3071;
                                float _3131 = (fma(_2324, _3025.z, fma(_2323, _3025.y, _3025.x * _2322)) + _3025.w) / _3071;
                                float _3135 = 1.0 - dot(vec2(_3130, _3131), vec2(_3130, _3131));
                                float _4175 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3137 = _3136 * (((isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))) * _3113) / ((_3126 * 0.699999988079071044921875) + 1.0));
                                float _3149 = exp2(log2(1.0 / ((_3126 * 3.5) + 5.0)) * 0.25);
                                float _3150 = 1.0 - _661;
                                float _3157 = sqrt(1.0 - ((1.0 - (_3150 * _3150)) * (1.0 - (_3149 * _3149))));
                                float _3158 = _3157 * _3157;
                                float _3159 = _3158 * _3158;
                                float _3160 = _3106 - _2608;
                                float _3161 = _3107 - _2609;
                                float _3162 = _3108 - _2610;
                                float _3166 = inversesqrt(dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162)));
                                float _3170 = dot(vec3(_601, _604, _607), vec3((-0.0) - _2608, (-0.0) - _2609, (-0.0) - _2610));
                                float _4186 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3173 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3174 = dot(vec3(_601, _604, _607), vec3(_3166 * _3160, _3166 * _3161, _3166 * _3162));
                                float _4197 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3177 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3181 = ((_3177 * _3177) * (_3159 + (-1.0))) + 1.0;
                                float _3182 = _3119 * _3158;
                                float _3183 = _3182 * _3182;
                                float _3189 = ((1.0 - _3183) * dot(vec3(_601, _604, _607), vec3(_3106, _3107, _3108))) + _3183;
                                float _4208 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3190 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3191 = 1.0 - _3158;
                                float _3201 = (0.5 / (((_3190 * ((_3173 * _3191) + _3158)) + 9.9999999392252902907785028219223e-09) + (((_3190 * _3191) + _3158) * _3173))) * _3190;
                                float _4219 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3211 = (_3136 * _3113) * (((_3159 * 3.1415927410125732421875) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) / ((_3181 * _3181) * ((_3126 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3211 * _2994.x;
                                frontier_phi_73_pred_1 = _3211 * _2994.y;
                                frontier_phi_73_pred_2 = _3137 * _2982.z;
                                frontier_phi_73_pred_3 = _3137 * _2982.y;
                                frontier_phi_73_pred_4 = _3137 * _2982.x;
                                frontier_phi_73_pred_5 = _3211 * _2994.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3215 = frontier_phi_73_pred;
                            _3216 = frontier_phi_73_pred_1;
                            _3220 = frontier_phi_73_pred_2;
                            _3219 = frontier_phi_73_pred_3;
                            _3218 = frontier_phi_73_pred_4;
                            _3217 = frontier_phi_73_pred_5;
                            _2924 = _3218 + _2937;
                            _2925 = _3219 + _2938;
                            _2926 = _3220 + _2939;
                            _2921 = _3215 + _2934;
                            _2922 = _3216 + _2935;
                            _2923 = _3217 + _2936;
                            if (_2941 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2941;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2924;
                        frontier_phi_67_pred_1 = _2925;
                        frontier_phi_67_pred_2 = _2926;
                        frontier_phi_67_pred_3 = _2923;
                        frontier_phi_67_pred_4 = _2922;
                        frontier_phi_67_pred_5 = _2921;
                    }
                    _2589 = frontier_phi_67_pred;
                    _2591 = frontier_phi_67_pred_1;
                    _2593 = frontier_phi_67_pred_2;
                    _2587 = frontier_phi_67_pred_3;
                    _2585 = frontier_phi_67_pred_4;
                    _2583 = frontier_phi_67_pred_5;
                    uint _2728 = _2727 + 1u;
                    if (_2728 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2721 = _2583;
                        _2722 = _2585;
                        _2723 = _2587;
                        _2724 = _2589;
                        _2725 = _2591;
                        _2726 = _2593;
                        _2727 = _2728;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2591;
                frontier_phi_55_56_ladder_1 = _2593;
                frontier_phi_55_56_ladder_2 = _2589;
                frontier_phi_55_56_ladder_3 = _2587;
                frontier_phi_55_56_ladder_4 = _2585;
                frontier_phi_55_56_ladder_5 = _2583;
            }
            else
            {
                frontier_phi_55_56_ladder = _2477;
                frontier_phi_55_56_ladder_1 = _2479;
                frontier_phi_55_56_ladder_2 = _2475;
                frontier_phi_55_56_ladder_3 = _2473;
                frontier_phi_55_56_ladder_4 = _2471;
                frontier_phi_55_56_ladder_5 = _2469;
            }
            _2582 = frontier_phi_55_56_ladder_5;
            _2584 = frontier_phi_55_56_ladder_4;
            _2586 = frontier_phi_55_56_ladder_3;
            _2588 = frontier_phi_55_56_ladder_2;
            _2590 = frontier_phi_55_56_ladder;
            _2592 = frontier_phi_55_56_ladder_1;
        }
        float _2597 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
        _2381 = (_2597 * _2588) + _1833;
        _2383 = (_2597 * _2590) + _1835;
        _2385 = (_2597 * _2592) + _1837;
        _2387 = ((_2582 * 0.039999999105930328369140625) * _2597) + _2166;
        _2389 = ((_2584 * 0.039999999105930328369140625) * _2597) + _2168;
        _2391 = ((_2586 * 0.039999999105930328369140625) * _2597) + _2170;
    }
    else
    {
        _2381 = _1833;
        _2383 = _1835;
        _2385 = _1837;
        _2387 = _2166;
        _2389 = _2168;
        _2391 = _2170;
    }
    float _4235 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4246 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4257 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    uint _2411 = _226 + 6u;
    float _2419 = _582 / cbSceneParam._m0[86u].x;
    float _2420 = _583 / cbSceneParam._m0[86u].y;
    vec4 _2434 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2419, _2420, (log2((isnan(cbSceneParam._m0[77u].w) ? _515 : (isnan(_515) ? cbSceneParam._m0[77u].w : min(_515, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2436 = _2434.x;
    float _2437 = _2434.y;
    float _2438 = _2434.z;
    float _2439 = _2434.w;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    if (_515 > cbSceneParam._m0[78u].w)
    {
        float _2494 = isnan(_515) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _515 : min(cbSceneParam._m0[80u].w, _515));
        float _2495 = _2494 / _515;
        float _2506 = _2495 * _567;
        float _2507 = _568 * _2495;
        float _2508 = (-0.0) - _2507;
        float _2510 = _2495 * _569;
        float _2512 = (cbSceneParam._m0[77u].w * _2508) / _2494;
        float _2513 = _2512 + cbSceneParam._m0[79u].w;
        float _2514 = cbSceneParam._m0[79u].w - _2507;
        float _2520 = sqrt(((_2506 * _2506) + (_2507 * _2507)) + (_2510 * _2510));
        float _2523 = (1.0 - (cbSceneParam._m0[77u].w / _2494)) * _2520;
        float _2528 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2530 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2683;
        if (abs((_2508 - _2512) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2683 = ((((_2513 > 0.0) ? exp2(_2528 * _2513) : (2.0 - exp2(_2530 * _2513))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2523;
        }
        else
        {
            float _2643 = 1.0 / cbSceneParam._m0[80u].x;
            float _2644 = isnan(_2514) ? _2513 : (isnan(_2513) ? _2514 : max(_2513, _2514));
            float _2645 = isnan(_2514) ? _2513 : (isnan(_2513) ? _2514 : min(_2513, _2514));
            float _2654 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : min(_2644, 0.0));
            float _2655 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : min(_2645, 0.0));
            _2683 = ((abs(_2520 / _2508) * cbSceneParam._m0[80u].y) * ((((_2654 - _2655) * 2.0) - ((exp2(_2528 * (isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0)))) - exp2(_2528 * (isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0))))) * _2643)) - ((exp2(_2530 * _2654) - exp2(_2530 * _2655)) * _2643))) + (_2523 * cbSceneParam._m0[80u].z);
        }
        vec4 _2685 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2419, _2420, 1.0), 0.0);
        float _2694 = exp2((_2683 * (-1.44269502162933349609375)) * (1.0 - _2685.w));
        float _2695 = log2(_2694);
        float _2711 = log2(_2439);
        _2532 = (exp2(_2711 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2695 * cbSceneParam._m0[78u].x)) * _2685.x) / cbSceneParam._m0[78u].x)) + _2436;
        _2534 = (exp2(_2711 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2695 * cbSceneParam._m0[78u].y)) * _2685.y) / cbSceneParam._m0[78u].y)) + _2437;
        _2536 = (exp2(_2711 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2695 * cbSceneParam._m0[78u].z)) * _2685.z) / cbSceneParam._m0[78u].z)) + _2438;
        _2538 = _2694 * _2439;
    }
    else
    {
        _2532 = _2436;
        _2534 = _2437;
        _2536 = _2438;
        _2538 = _2439;
    }
    float _2550 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2551 = _2550 == 3.0;
    float _2552 = log2(_2538);
    float _2559 = exp2(_2552 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2381 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _645))) + ((_2387 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1450)) * cbPerFrame._m0[3u].x));
    float _2560 = exp2(_2552 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2383 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _645))) + ((_2389 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1450)) * cbPerFrame._m0[3u].x));
    float _2561 = exp2(_2552 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2385 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _645))) + ((_2391 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1450)) * cbPerFrame._m0[3u].x));
    float _2570 = (_2550 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2570 * (_2551 ? _2559 : (_2559 + (cbSceneParam._m0[72u].w * _2532)));
    SV_Target.y = _2570 * (_2551 ? _2560 : (_2560 + (cbSceneParam._m0[72u].w * _2534)));
    SV_Target.z = _2570 * (_2551 ? _2561 : (_2561 + (cbSceneParam._m0[72u].w * _2536)));
    SV_Target.w = cbInstanceData._m0[_2411].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2411].w;
}


