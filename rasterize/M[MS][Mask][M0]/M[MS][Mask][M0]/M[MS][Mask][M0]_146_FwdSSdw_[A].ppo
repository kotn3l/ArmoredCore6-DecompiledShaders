#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1529;
float _3908;
float _3909;
float _3910;
float _3911;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _349.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].z) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3920 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _428 = (_421 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _429 = (_421 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _430 = (_421 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _479 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _493 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _349.y) * 2.0) - ((((_469 - _479) * cbMtdParam._m0[24u].z) + _479) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3931 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _501 = (_494 * ((_447.x * cbMtdParam._m0[13u].x) - _428)) + _428;
    float _502 = (_494 * ((_447.y * cbMtdParam._m0[13u].y) - _429)) + _429;
    float _503 = (_494 * ((_447.z * cbMtdParam._m0[13u].z) - _430)) + _430;
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _540 = _538.x;
    float _550 = dot(vec4(_540, _538.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _562 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _349.z) * 2.0) - ((((_540 - _550) * cbMtdParam._m0[24u].z) + _550) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3942 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _570 = (_563 * ((_521.x * cbMtdParam._m0[14u].x) - _501)) + _501;
    float _571 = (_563 * ((_521.y * cbMtdParam._m0[14u].y) - _502)) + _502;
    float _572 = (_563 * ((_521.z * cbMtdParam._m0[14u].z) - _503)) + _503;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _610 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _629 = _627.x;
    float _630 = _627.y;
    float _631 = _627.z;
    float _638 = ((_610.x - _629) * _421) + _629;
    float _639 = ((_610.y - _630) * _421) + _630;
    float _640 = ((_610.z - _631) * _421) + _631;
    vec4 _652 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _663 = ((_652.x - _638) * _494) + _638;
    float _664 = ((_652.y - _639) * _494) + _639;
    float _665 = ((_652.z - _640) * _494) + _640;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _690 = ((_677.z - _665) * _563) + _665;
    float _693 = ((((_677.x - _663) * _563) + _663) * 2.0) + (-1.0);
    float _695 = ((((_677.y - _664) * _563) + _664) * 2.0) + (-1.0);
    float _696 = dot(vec2(_693, _695), vec2(_693, _695));
    float _3953 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _701 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _727 = (((_715.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _693;
    float _728 = (((_715.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _695;
    float _731 = fma(_701, _251, fma(_728, _258, _727 * _244));
    float _734 = fma(_701, _252, fma(_728, _259, _727 * _245));
    float _737 = fma(_701, _253, fma(_728, _260, _727 * _246));
    float _741 = inversesqrt(dot(vec3(_731, _734, _737), vec3(_731, _734, _737)));
    vec4 _768 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _770 = _768.x;
    float _771 = 1.0 - _770;
    float _777 = (cbMtdParam._m0[19u].x + dot(vec4(_741 * _731, _741 * _734, _741 * _737, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_770 - _771) * cbMtdParam._m0[24u].w) + _771) * cbMtdParam._m0[21u].z);
    float _3964 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _778 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _780 = (-0.0) - cbMtdParam._m0[24u].x;
    float _782 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _782 : (isnan(_782) ? 1.0 : min(_782, 1.0));
    float _790 = _778 - ((_778 * TEXCOORD_8.x) * _783);
    float _791 = _778 - ((_778 * TEXCOORD_8.y) * _783);
    float _792 = _778 - ((_778 * TEXCOORD_8.z) * _783);
    float _799 = (_790 * ((_590.x * cbMtdParam._m0[18u].x) - _570)) + _570;
    float _800 = (_791 * ((_590.y * cbMtdParam._m0[18u].y) - _571)) + _571;
    float _801 = (_792 * ((_590.z * cbMtdParam._m0[18u].z) - _572)) + _572;
    vec4 _813 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _815 = _813.x;
    float _816 = 1.0 - _815;
    float _844 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_815 - _816) * cbMtdParam._m0[24u].y) + _816) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3985 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _845 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _853 = ((((cbMtdParam._m0[10u].x - _799) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _845) + _799;
    float _854 = ((((cbMtdParam._m0[10u].y - _800) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _845) + _800;
    float _855 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _801)) * _845) + _801;
    float _859 = (cbMtdParam._m0[19u].w * (_715.z - _690)) + _690;
    vec4 _873 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _880 = (_873.x * 2.0) + (-1.0);
    float _881 = (_873.y * 2.0) + (-1.0);
    float _882 = dot(vec2(_880, _881), vec2(_880, _881));
    float _3996 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _890 = ((_873.z - _859) * _790) + _859;
    float _893 = ((cbMtdParam._m0[23u].y - _890) * _845) + _890;
    vec4 _912 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _918 = (_912.x * 2.0) + (-1.0);
    float _919 = (_912.y * 2.0) + (-1.0);
    float _920 = dot(vec2(_918, _919), vec2(_918, _919));
    float _4007 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _935 = ((sqrt(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) - _701) * _792) + _701;
    float _938 = (((_880 - _727) * _790) + _727) + (cbMtdParam._m0[21u].x * _727);
    float _939 = (((_881 - _728) * _791) + _728) + (cbMtdParam._m0[21u].x * _728);
    float _950 = (((_918 - _938) + (_938 * cbMtdParam._m0[22u].z)) * _845) + _938;
    float _951 = (((_919 - _939) + (_939 * cbMtdParam._m0[22u].z)) * _845) + _939;
    float _952 = (_845 * (sqrt(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) - _935)) + _935;
    float _954 = cbMtdParam._m0[22u].x + _715.w;
    float _957 = fma(_952, _251, fma(_951, _258, _950 * _244));
    float _960 = fma(_952, _252, fma(_951, _259, _950 * _245));
    float _963 = fma(_952, _253, fma(_951, _260, _950 * _246));
    float _967 = inversesqrt(dot(vec3(_957, _960, _963), vec3(_957, _960, _963)));
    float _968 = _967 * _957;
    float _969 = _967 * _960;
    float _970 = _967 * _963;
    float _4018 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _971 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4040 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4051 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4062 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _989 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1040 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1030);
    float _1041 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1030);
    float _1042 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1030);
    float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
    float _1047 = _1040 * _1046;
    float _1048 = _1041 * _1046;
    float _1049 = _1042 * _1046;
    vec4 _1054 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1056 = _1054.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1210 = sqrt(((_1040 * _1040) + (_1041 * _1041)) + (_1042 * _1042));
        float _1216 = (cbMatDynParam._m0[5u].x * _1210) + cbMatDynParam._m0[5u].y;
        float _4073 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1221 = (cbMatDynParam._m0[5u].z * _1210) + cbMatDynParam._m0[5u].w;
        float _4084 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) - _1217)) + _1217) < ((_1056 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1067 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1068 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1086 = fma(_970, cbSceneParam._m0[5u].z, fma(_969, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _968));
    float _1089 = fma(_970, cbSceneParam._m0[6u].z, fma(_969, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _968));
    float _1092 = fma(_970, cbSceneParam._m0[7u].z, fma(_969, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _968));
    uint _1105 = _263 + 9u;
    uint _1106 = _1105 + uint(cbMatDynParam._m0[0u].w);
    float _1112 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * cbInstanceData._m0[_1106].x;
    float _1113 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_1106].y;
    float _1114 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * cbInstanceData._m0[_1106].z;
    float _4095 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1115 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1116 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1117 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    vec4 _1126 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1067, cbSceneParam._m0[86u].y * _1068));
    float _1130 = ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * TEXCOORD_5.w) * _1126.x;
    float _1131 = dot(vec3(_968, _969, _970), vec3(_1047, _1048, _1049));
    float _1134 = _1131 * 2.0;
    float _1138 = (_1134 * _968) - _1047;
    float _1139 = (_1134 * _969) - _1048;
    float _1140 = (_1134 * _970) - _1049;
    float _1144 = abs(dot(vec3(_1047, _1048, _1049), vec3(_968, _969, _970)));
    float _4128 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1146 = sqrt(_971);
    float _1159 = exp2((_1146 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1146 * 3.0));
    float _1191 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1195 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1528;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1253 = fma(_1199, cbModelParam._m0[26u].z, fma(_1195, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1191));
        float _1257 = fma(_1199, cbModelParam._m0[27u].z, fma(_1195, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1191));
        float _1261 = fma(_1199, cbModelParam._m0[28u].z, fma(_1195, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1191));
        float _1286 = _1191 + _968;
        float _1287 = _1195 + _969;
        float _1288 = _1199 + _970;
        float _1298 = fma(_1288, cbModelParam._m0[26u].z, fma(_1287, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1286)) - _1253;
        float _1299 = fma(_1288, cbModelParam._m0[27u].z, fma(_1287, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1286)) - _1257;
        float _1300 = fma(_1288, cbModelParam._m0[28u].z, fma(_1287, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1286)) - _1261;
        float _1304 = inversesqrt(dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300)));
        float _1317 = ((_1304 * _1298) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1253 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1304 * _1299) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1257 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1304 * _1300) / cbModelParam._m0[34u].z) + ((((((_1261 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        float _1356 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1322.x + (-0.5));
        float _1358 = _1356 * (_1322.y + (-0.5));
        float _1359 = _1356 * (_1322.z + (-0.5));
        float _1366 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1329.x + (-0.5));
        float _1368 = _1366 * (_1329.y + (-0.5));
        float _1369 = _1366 * (_1329.z + (-0.5));
        float _1376 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1336.x + (-0.5));
        float _1378 = _1376 * (_1336.y + (-0.5));
        float _1379 = _1376 * (_1336.z + (-0.5));
        float _1386 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1343.x + (-0.5));
        float _1388 = _1386 * (_1343.y + (-0.5));
        float _1389 = _1386 * (_1343.z + (-0.5));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = _1357 * 0.5;
        float _1394 = _1367 * 0.5;
        float _1395 = _1377 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1410 = (dot(vec3(_968, _969, _970), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1420 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4176 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1422 + 1.0))) + _1427) * _1390;
        float _1437 = _1358 * 0.5;
        float _1438 = _1368 * 0.5;
        float _1439 = _1378 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_968, _969, _970), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4209 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1464 + 1.0))) + _1469) * _1391;
        float _1479 = _1359 * 0.5;
        float _1480 = _1369 * 0.5;
        float _1481 = _1379 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_968, _969, _970), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4242 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1506 + 1.0))) + _1511) * _1392;
        _1528 = _1359;
        _1530 = _1358;
        _1531 = _1357;
        _1532 = _1369;
        _1533 = _1368;
        _1534 = _1367;
        _1535 = _1379;
        _1536 = _1378;
        _1537 = _1377;
        _1538 = _1392;
        _1539 = _1391;
        _1540 = _1390;
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1529;
        _1530 = _1529;
        _1531 = _1529;
        _1532 = _1529;
        _1533 = _1529;
        _1534 = _1529;
        _1535 = _1529;
        _1536 = _1529;
        _1537 = _1529;
        _1538 = _1529;
        _1539 = _1529;
        _1540 = _1529;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1569 = fma(_1199, cbModelParam._m0[30u].z, fma(_1195, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191));
        float _1573 = fma(_1199, cbModelParam._m0[31u].z, fma(_1195, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191));
        float _1577 = fma(_1199, cbModelParam._m0[32u].z, fma(_1195, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191));
        float _1600 = _1191 + _968;
        float _1601 = _1195 + _969;
        float _1602 = _1199 + _970;
        float _1612 = fma(_1602, cbModelParam._m0[30u].z, fma(_1601, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1600)) - _1569;
        float _1613 = fma(_1602, cbModelParam._m0[31u].z, fma(_1601, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1600)) - _1573;
        float _1614 = fma(_1602, cbModelParam._m0[32u].z, fma(_1601, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1600)) - _1577;
        float _1618 = inversesqrt(dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614)));
        float _1631 = ((_1618 * _1612) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1569 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1632 = ((_1618 * _1613) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1573 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1618 * _1614) / cbModelParam._m0[35u].z) + ((((((_1577 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1649 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1656 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        float _1668 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1635.x + (-0.5));
        float _1670 = _1668 * (_1635.y + (-0.5));
        float _1671 = _1668 * (_1635.z + (-0.5));
        float _1678 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1642.x + (-0.5));
        float _1680 = _1678 * (_1642.y + (-0.5));
        float _1681 = _1678 * (_1642.z + (-0.5));
        float _1688 = exp2((_1649.w + (-0.5)) * 20.0) * 2.0;
        float _1689 = _1688 * (_1649.x + (-0.5));
        float _1690 = _1688 * (_1649.y + (-0.5));
        float _1691 = _1688 * (_1649.z + (-0.5));
        float _1698 = exp2((_1656.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1656.x + (-0.5));
        float _1700 = _1698 * (_1656.y + (-0.5));
        float _1701 = _1698 * (_1656.z + (-0.5));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = _1669 * 0.5;
        float _1706 = _1679 * 0.5;
        float _1707 = _1689 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_968, _969, _970), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4305 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1732 + 1.0))) + _1737) * _1702;
        float _1747 = _1670 * 0.5;
        float _1748 = _1680 * 0.5;
        float _1749 = _1690 * 0.5;
        float _1750 = dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749));
        float _1755 = (_1750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1750);
        float _1763 = (dot(vec3(_968, _969, _970), vec3(_1755 * _1747, _1755 * _1748, _1755 * _1749)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1774 = _1773 * 2.0;
        float _1778 = (1.0 - _1773) / (_1773 + 1.0);
        float _4338 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1788 = ((((1.0 - _1779) * (_1774 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1774 + 1.0))) + _1779) * _1703;
        float _1789 = _1671 * 0.5;
        float _1790 = _1681 * 0.5;
        float _1791 = _1691 * 0.5;
        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
        float _1797 = (_1792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1792);
        float _1805 = (dot(vec3(_968, _969, _970), vec3(_1797 * _1789, _1797 * _1790, _1797 * _1791)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1814 = sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1816 = _1815 * 2.0;
        float _1820 = (1.0 - _1815) / (_1815 + 1.0);
        float _4371 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1830 = ((((1.0 - _1821) * (_1816 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1816 + 1.0))) + _1821) * _1704;
        _1838 = _1671;
        _1839 = _1670;
        _1840 = _1669;
        _1841 = _1681;
        _1842 = _1680;
        _1843 = _1679;
        _1844 = _1691;
        _1845 = _1690;
        _1846 = _1689;
        _1847 = _1704;
        _1848 = _1703;
        _1849 = _1702;
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)));
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)));
    }
    else
    {
        _1838 = _1529;
        _1839 = _1529;
        _1840 = _1529;
        _1841 = _1529;
        _1842 = _1529;
        _1843 = _1529;
        _1844 = _1529;
        _1845 = _1529;
        _1846 = _1529;
        _1847 = _1529;
        _1848 = _1529;
        _1849 = _1529;
        _1850 = 0.0;
        _1851 = 0.0;
        _1852 = 0.0;
    }
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1541)) + _1541;
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1542)) + _1542;
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1543)) + _1543;
    float _1885 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1863, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1863, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1863, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1862));
    float _1906 = _1138 * 0.5;
    float _1907 = _1139 * 0.5;
    float _1908 = _1140 * 0.5;
    float _1909 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1912 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1915 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1949;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1922 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1528, _1532, _1535, _1538));
        float _1926 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1530, _1533, _1536, _1539));
        float _1930 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1531, _1534, _1537, _1540));
        float _1937 = dot(vec4(cbModelParam._m0[39u]), vec4(_1906, _1907, _1908, 1.0));
        _1949 = dot(vec3(isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0)), isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1937) ? 0.0 : (isnan(0.0) ? _1937 : max(0.0, _1937))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1949 = 1.0;
    }
    float _1960;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1951 = dot(vec4(cbModelParam._m0[40u]), vec4(_1906, _1907, _1908, 1.0));
        _1960 = dot(vec3(isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1951) ? 0.0 : (isnan(0.0) ? _1951 : max(0.0, _1951))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1960 = 1.0;
    }
    float _1964 = (_1960 * cbModelParam._m0[1u].x) + (_1949 * (1.0 - cbModelParam._m0[1u].x));
    float _1974 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _971);
    float _1975 = isnan(_1974) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1974 : min(cbModelParam._m0[25u].z, _1974));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2022 = fma(_1199, cbModelParam._m0[13u].z, fma(_1195, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1191)) + cbModelParam._m0[13u].w;
        float _2026 = fma(_1199, cbModelParam._m0[14u].z, fma(_1195, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1191)) + cbModelParam._m0[14u].w;
        float _2030 = fma(_1199, cbModelParam._m0[15u].z, fma(_1195, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1191)) + cbModelParam._m0[15u].w;
        float _2033 = fma(_1140, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138));
        float _2036 = fma(_1140, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138));
        float _2039 = fma(_1140, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138));
        float _2067;
        if (_2033 > 0.0)
        {
            _2067 = abs((1.0 - _2022) / _2033);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2022 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2067 = frontier_phi_17_15_ladder;
        }
        float _2288;
        if (_2036 > 0.0)
        {
            _2288 = abs((1.0 - _2026) / _2036);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2026 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2288 = frontier_phi_26_22_ladder;
        }
        float _2534;
        if (_2039 > 0.0)
        {
            _2534 = abs((1.0 - _2030) / _2039);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2030 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2534 = frontier_phi_38_33_ladder;
        }
        float _2536 = isnan(_2288) ? _2067 : (isnan(_2067) ? _2288 : min(_2067, _2288));
        float _2537 = isnan(_2534) ? _2536 : (isnan(_2536) ? _2534 : min(_2536, _2534));
        float _2541 = (_2537 * _2033) + _2022;
        float _2542 = (_2537 * _2036) + _2026;
        float _2543 = (_2537 * _2039) + _2030;
        float _2544 = _2537 * 9.9999997473787516355514526367188e-05;
        float _2546 = (-1.0) - _2544;
        float _2548 = _2544 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2543 > _2548) || ((_2543 < _2546) || ((_2542 > _2548) || ((_2542 < _2546) || ((_2541 < _2546) || (_2541 > _2548))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2543, cbModelParam._m0[9u].z, fma(_2542, cbModelParam._m0[9u].y, _2541 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2543, cbModelParam._m0[10u].z, fma(_2542, cbModelParam._m0[10u].y, _2541 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2543, cbModelParam._m0[11u].z, fma(_2542, cbModelParam._m0[11u].y, _2541 * cbModelParam._m0[11u].x))), _1975);
            frontier_phi_16_38_ladder = _2667.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2667.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2667.x * cbModelParam._m0[1u].y;
        }
        _2055 = frontier_phi_16_38_ladder_2;
        _2057 = frontier_phi_16_38_ladder_1;
        _2059 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2043 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1138, _1139, _1140), _1975);
        _2055 = _2043.x * cbModelParam._m0[1u].y;
        _2057 = _2043.y * cbModelParam._m0[1u].y;
        _2059 = _2043.z * cbModelParam._m0[1u].y;
    }
    float _2063 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _971);
    float _2064 = isnan(_2063) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2063 : min(cbModelParam._m0[25u].w, _2063));
    float _2153;
    float _2155;
    float _2157;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2117 = fma(_1199, cbModelParam._m0[21u].z, fma(_1195, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1191)) + cbModelParam._m0[21u].w;
        float _2121 = fma(_1199, cbModelParam._m0[22u].z, fma(_1195, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1191)) + cbModelParam._m0[22u].w;
        float _2125 = fma(_1199, cbModelParam._m0[23u].z, fma(_1195, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1191)) + cbModelParam._m0[23u].w;
        float _2128 = fma(_1140, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138));
        float _2131 = fma(_1140, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138));
        float _2134 = fma(_1140, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138));
        float _2293;
        if (_2128 > 0.0)
        {
            _2293 = abs((1.0 - _2117) / _2128);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2117 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2293 = frontier_phi_28_24_ladder;
        }
        float _2561;
        if (_2131 > 0.0)
        {
            _2561 = abs((1.0 - _2121) / _2131);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2121 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2561 = frontier_phi_40_35_ladder;
        }
        float _2766;
        if (_2134 > 0.0)
        {
            _2766 = abs((1.0 - _2125) / _2134);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2125 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2766 = frontier_phi_49_46_ladder;
        }
        float _2768 = isnan(_2561) ? _2293 : (isnan(_2293) ? _2561 : min(_2293, _2561));
        float _2769 = isnan(_2766) ? _2768 : (isnan(_2768) ? _2766 : min(_2768, _2766));
        float _2773 = (_2769 * _2128) + _2117;
        float _2774 = (_2769 * _2131) + _2121;
        float _2775 = (_2769 * _2134) + _2125;
        float _2776 = _2769 * 9.9999997473787516355514526367188e-05;
        float _2777 = (-1.0) - _2776;
        float _2779 = _2776 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2775 > _2779) || ((_2775 < _2777) || ((_2774 > _2779) || ((_2774 < _2777) || ((_2773 < _2777) || (_2773 > _2779))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2775, cbModelParam._m0[17u].z, fma(_2774, cbModelParam._m0[17u].y, _2773 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2775, cbModelParam._m0[18u].z, fma(_2774, cbModelParam._m0[18u].y, _2773 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2775, cbModelParam._m0[19u].z, fma(_2774, cbModelParam._m0[19u].y, _2773 * cbModelParam._m0[19u].x))), _2064);
            frontier_phi_25_49_ladder = _2974.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2974.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2974.x * cbModelParam._m0[1u].z;
        }
        _2153 = frontier_phi_25_49_ladder_2;
        _2155 = frontier_phi_25_49_ladder_1;
        _2157 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2137 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1138, _1139, _1140), _2064);
        _2153 = _2137.x * cbModelParam._m0[1u].z;
        _2155 = _2137.y * cbModelParam._m0[1u].z;
        _2157 = _2137.z * cbModelParam._m0[1u].z;
    }
    float _2169 = ((((1.0 - _1159) * ((_1146 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1159 * _1146)) * _1130;
    float _2170 = _2169 * ((cbModelParam._m0[1u].w * (_2153 - _2055)) + _2055);
    float _2171 = _2169 * ((cbModelParam._m0[1u].w * (_2155 - _2057)) + _2057);
    float _2172 = _2169 * ((cbModelParam._m0[1u].w * (_2157 - _2059)) + _2059);
    float _2175 = fma(_2172, cbSceneParam._m0[89u].z, fma(_2171, cbSceneParam._m0[89u].y, _2170 * cbSceneParam._m0[89u].x));
    float _2178 = fma(_2172, cbSceneParam._m0[90u].z, fma(_2171, cbSceneParam._m0[90u].y, _2170 * cbSceneParam._m0[90u].x));
    float _2181 = fma(_2172, cbSceneParam._m0[91u].z, fma(_2171, cbSceneParam._m0[91u].y, _2170 * cbSceneParam._m0[91u].x));
    vec4 _2189 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1067, _1068));
    float _2191 = _2189.w;
    float _2203 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2191);
    float _2204 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2191);
    float _2205 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2191);
    uvec4 _2209 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2211 = _2209.x * 14u;
    uint _2212 = _2211 + 13u;
    float _2219 = _1130 + (-1.0);
    float _2224 = (cbLight._m0[_2212].x * _2219) + 1.0;
    float _2225 = (cbLight._m0[_2212].y * _2219) + 1.0;
    float _2226 = (cbLight._m0[_2212].z * _2219) + 1.0;
    float _2227 = (cbLight._m0[_2212].w * _2219) + 1.0;
    uint _2228 = _2211 + 5u;
    float _2234 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
    uint _2238 = _2211 + 4u;
    float _2247 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
    uint _2251 = _2211 | 1u;
    float _2262 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_968, _969, _970));
    float _2265 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_968, _969, _970));
    float _4507 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _4518 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2270 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * 0.3183098733425140380859375;
    float _2272 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * 0.3183098733425140380859375;
    float _2279 = ((cbLight._m0[_2228].x * _2234) * _2272) + (((cbLight._m0[_2238].x * _2203) * _2247) * _2270);
    float _2280 = ((_2234 * cbLight._m0[_2228].y) * _2272) + (((cbLight._m0[_2238].y * _2204) * _2247) * _2270);
    float _2281 = ((_2234 * cbLight._m0[_2228].z) * _2272) + (((cbLight._m0[_2238].z * _2205) * _2247) * _2270);
    uvec4 _2285 = floatBitsToUint(cbLight._m0[_2211 + 12u]);
    bool _2287 = _2285.x == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2287)
    {
        _2298 = _2279;
        _2300 = _2280;
        _2302 = _2281;
    }
    else
    {
        uint _2306 = _2211 + 6u;
        float _2322 = (dot(vec3(cbLight._m0[_2211 + 2u].xyz), vec3(_968, _969, _970)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4529 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2325 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2298 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2279;
        _2300 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2280;
        _2302 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2281;
    }
    bool _2305 = _2285.y == 0u;
    float _2343;
    float _2345;
    float _2347;
    if (_2305)
    {
        _2343 = _2298;
        _2345 = _2300;
        _2347 = _2302;
    }
    else
    {
        uint _2505 = _2211 + 7u;
        float _2521 = (dot(vec3(cbLight._m0[_2211 + 3u].xyz), vec3(_968, _969, _970)) * 0.5) + 0.5;
        float _2522 = _2521 * _2521;
        float _4545 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2523 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2524 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2343 = (((cbLight._m0[_2505].x * 0.3183098733425140380859375) * _2523) * _2524) + _2298;
        _2345 = (((cbLight._m0[_2505].y * 0.3183098733425140380859375) * _2523) * _2524) + _2300;
        _2347 = (((cbLight._m0[_2505].z * 0.3183098733425140380859375) * _2523) * _2524) + _2302;
    }
    uint _2350 = _2211 + 8u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _971) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2211].x + _1047;
    float _2366 = cbLight._m0[_2211].y + _1048;
    float _2367 = cbLight._m0[_2211].z + _1049;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_968, _969, _970), vec3(cbLight._m0[_2211].xyz));
    float _4561 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _4572 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _2379 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2380 = dot(vec3(_968, _969, _970), vec3(_2372, _2373, _2374));
    float _4583 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2384 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2372, _2373, _2374));
    float _4594 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2388 = _2364 * _2364;
    float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
    float _2403 = (exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2404 = 1.0 - _2364;
    float _2415 = (0.5 / (((_2379 * ((_2378 * _2404) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2404) + _2364) * _2378))) * _2378;
    float _4605 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2417 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
    uint _2431 = _2211 + 9u;
    float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _971) * 0.949999988079071044921875);
    float _2443 = _2442 * _2442;
    float _2444 = cbLight._m0[_2251].x + _1047;
    float _2445 = cbLight._m0[_2251].y + _1048;
    float _2446 = cbLight._m0[_2251].z + _1049;
    float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
    float _2451 = _2450 * _2444;
    float _2452 = _2450 * _2445;
    float _2453 = _2450 * _2446;
    float _2454 = dot(vec3(_968, _969, _970), vec3(cbLight._m0[_2251].xyz));
    float _4616 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _2458 = dot(vec3(_968, _969, _970), vec3(_2451, _2452, _2453));
    float _4627 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _2462 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2451, _2452, _2453));
    float _4638 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2466 = _2443 * _2443;
    float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
    float _2479 = (exp2(log2(1.0 - (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2480 = 1.0 - _2443;
    float _2490 = (0.5 / (((_2379 * ((_2457 * _2480) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2480) + _2443) * _2457))) * _2457;
    float _4649 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2492 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
    float _2502 = (((_2479 * cbLight._m0[_2431].x) * _2492) * _2234) + ((((cbLight._m0[_2350].x * _2203) * _2403) * _2417) * _2247);
    float _2503 = (((_2479 * cbLight._m0[_2431].y) * _2492) * _2234) + ((((cbLight._m0[_2350].y * _2204) * _2403) * _2417) * _2247);
    float _2504 = (((_2479 * cbLight._m0[_2431].z) * _2492) * _2234) + ((((cbLight._m0[_2350].z * _2205) * _2403) * _2417) * _2247);
    float _2566;
    float _2568;
    float _2570;
    if (_2287)
    {
        _2566 = _2502;
        _2568 = _2503;
        _2570 = _2504;
    }
    else
    {
        uint _2572 = _2211 + 2u;
        uint _2576 = _2211 + 10u;
        float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _971) * 0.949999988079071044921875);
        float _2591 = _2590 * _2590;
        float _2592 = cbLight._m0[_2572].x + _1047;
        float _2593 = cbLight._m0[_2572].y + _1048;
        float _2594 = cbLight._m0[_2572].z + _1049;
        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
        float _2599 = _2598 * _2592;
        float _2600 = _2598 * _2593;
        float _2601 = _2598 * _2594;
        float _2602 = dot(vec3(_968, _969, _970), vec3(cbLight._m0[_2572].xyz));
        float _4660 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2606 = dot(vec3(_968, _969, _970), vec3(_2599, _2600, _2601));
        float _4671 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2610 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2599, _2600, _2601));
        float _4682 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2614 = _2591 * _2591;
        float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
        float _2627 = (exp2(log2(1.0 - (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2628 = 1.0 - _2591;
        float _2638 = (0.5 / (((_2379 * ((_2605 * _2628) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2628) + _2591) * _2605))) * _2605;
        float _4693 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2640 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
        float _2641 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2566 = (((_2627 * cbLight._m0[_2576].x) * _2640) * _2641) + _2502;
        _2568 = (((_2627 * cbLight._m0[_2576].y) * _2640) * _2641) + _2503;
        _2570 = (((_2627 * cbLight._m0[_2576].z) * _2640) * _2641) + _2504;
    }
    float _2676;
    float _2678;
    float _2680;
    if (_2305)
    {
        _2676 = _2566;
        _2678 = _2568;
        _2680 = _2570;
    }
    else
    {
        uint _2687 = _2211 + 3u;
        uint _2691 = _2211 + 11u;
        float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2687].w)) * _971) * 0.949999988079071044921875);
        float _2706 = _2705 * _2705;
        float _2707 = cbLight._m0[_2687].x + _1047;
        float _2708 = cbLight._m0[_2687].y + _1048;
        float _2709 = cbLight._m0[_2687].z + _1049;
        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
        float _2714 = _2713 * _2707;
        float _2715 = _2713 * _2708;
        float _2716 = _2713 * _2709;
        float _2717 = dot(vec3(_968, _969, _970), vec3(cbLight._m0[_2687].xyz));
        float _4709 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2721 = dot(vec3(_968, _969, _970), vec3(_2714, _2715, _2716));
        float _4720 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2725 = dot(vec3(cbLight._m0[_2687].xyz), vec3(_2714, _2715, _2716));
        float _4731 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2729 = _2706 * _2706;
        float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
        float _2742 = (exp2(log2(1.0 - (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2743 = 1.0 - _2706;
        float _2753 = (0.5 / (((_2379 * ((_2720 * _2743) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2743) + _2706) * _2720))) * _2720;
        float _4742 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2755 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
        float _2756 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2676 = (((_2742 * cbLight._m0[_2691].x) * _2755) * _2756) + _2566;
        _2678 = (((_2742 * cbLight._m0[_2691].y) * _2755) * _2756) + _2568;
        _2680 = (((_2742 * cbLight._m0[_2691].z) * _2755) * _2756) + _2570;
    }
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_2209.y == 0u)
    {
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2831;
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2831;
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2831;
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.x;
        uint _2858 = uint((float(_2846.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1068) / _2847))) + floor(float(uint(cbSceneParam._m0[85u].x * _1067) / _2847)));
        float _2868 = (log2(_2834 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2869 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        uint _2872 = uint(isnan(14.0) ? _2869 : (isnan(_2869) ? 14.0 : min(_2869, 14.0)));
        uvec4 _2877 = texelFetch(g_lightClusterGridBuffer, int(((_2872 << 2u) + (_2858 << 6u)) >> 2u));
        uint _2878 = _2877.x;
        uint _2879 = _2846.z;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        if (((((1u << ((_2879 >> 4u) & 15u)) + 4294967295u) & _2878) == 0u) || ((_2879 & 240u) == 0u))
        {
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
        }
        else
        {
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            uint _3137 = 0u;
            uint _3146;
            bool _3147;
            for (;;)
            {
                _3146 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3137 << 2u)) >> 2u)).x;
                _3147 = _3146 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3147)
                {
                    frontier_phi_66_pred = _3131;
                    frontier_phi_66_pred_1 = _3136;
                    frontier_phi_66_pred_2 = _3135;
                    frontier_phi_66_pred_3 = _3134;
                    frontier_phi_66_pred_4 = _3133;
                    frontier_phi_66_pred_5 = _3132;
                }
                else
                {
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    uint _3282;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3146;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    for (;;)
                    {
                        uint _3286 = uint(findLSB(_3282)) + (_3137 << 5u);
                        uint _3283 = (_3282 + 4294967295u) & _3282;
                        uint _3288 = _3286 * 48u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3288)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 3u)).x));
                        uint _3308 = (_3286 * 48u) + 4u;
                        vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 3u)).x));
                        uint _3327 = (_3286 * 48u) + 8u;
                        vec3 _3338 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x));
                        float _3342 = _3302.x - _2832;
                        float _3343 = _3302.y - _2833;
                        float _3344 = _3302.z - _2834;
                        float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                        float _3348 = inversesqrt(_3345);
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3352 = dot(vec3(_1086, _1089, _1092), vec3(_3349, _3350, _3351));
                        float _3357 = 1.0 - (_3345 * _3302.w);
                        float _4768 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3358 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3359 = sqrt(_3345) * _3321.w;
                        float _3362 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                        float _3363 = _3362 * _3362;
                        float _3366 = ((1.0 - _3363) * _3352) + _3363;
                        float _3369 = _3359 * _3359;
                        float _3373 = ((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3358) / ((_3369 * 0.699999988079071044921875) + 1.0);
                        float _3377 = (-0.0) - _2832;
                        float _3378 = (-0.0) - _2833;
                        float _3379 = (-0.0) - _2834;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3384 = _3383 * _3377;
                        float _3385 = _3383 * _3378;
                        float _3386 = _3383 * _3379;
                        float _3394 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                        float _3395 = 1.0 - _1146;
                        float _3402 = sqrt(1.0 - ((1.0 - (_3395 * _3395)) * (1.0 - (_3394 * _3394))));
                        float _3403 = _3402 * _3402;
                        float _3404 = _3403 * _3403;
                        float _3405 = _3384 + _3349;
                        float _3406 = _3385 + _3350;
                        float _3407 = _3386 + _3351;
                        float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                        float _3415 = dot(vec3(_1086, _1089, _1092), vec3(_3384, _3385, _3386));
                        float _4784 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3419 = dot(vec3(_1086, _1089, _1092), vec3(_3411 * _3405, _3411 * _3406, _3411 * _3407));
                        float _4795 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3426 = ((_3422 * _3422) * (_3404 + (-1.0))) + 1.0;
                        float _3427 = _3362 * _3403;
                        float _3428 = _3427 * _3427;
                        float _3431 = ((1.0 - _3428) * _3352) + _3428;
                        float _4806 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3432 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3433 = 1.0 - _3403;
                        float _3443 = (0.5 / (((_3432 * ((_3418 * _3433) + _3403)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3403) * _3418))) * _3432;
                        float _4817 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3454 = (((_3404 * 3.1415927410125732421875) * (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) / ((_3426 * _3426) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125))) * _3358;
                        _3206 = (_3373 * _3321.x) + _3279;
                        _3207 = (_3373 * _3321.y) + _3280;
                        _3208 = (_3373 * _3321.z) + _3281;
                        _3203 = (_3454 * _3338.x) + _3276;
                        _3204 = (_3454 * _3338.y) + _3277;
                        _3205 = (_3454 * _3338.z) + _3278;
                        if (_3283 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3283;
                        }
                    }
                    frontier_phi_66_pred = _3203;
                    frontier_phi_66_pred_1 = _3208;
                    frontier_phi_66_pred_2 = _3207;
                    frontier_phi_66_pred_3 = _3206;
                    frontier_phi_66_pred_4 = _3205;
                    frontier_phi_66_pred_5 = _3204;
                }
                _2980 = frontier_phi_66_pred;
                _2990 = frontier_phi_66_pred_1;
                _2988 = frontier_phi_66_pred_2;
                _2986 = frontier_phi_66_pred_3;
                _2984 = frontier_phi_66_pred_4;
                _2982 = frontier_phi_66_pred_5;
                uint _3138 = _3137 + 1u;
                if (_3138 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3131 = _2980;
                    _3132 = _2982;
                    _3133 = _2984;
                    _3134 = _2986;
                    _3135 = _2988;
                    _3136 = _2990;
                    _3137 = _3138;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
        }
        uvec4 _2993 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2994 = _2993.z;
        uint _2996 = (_2994 >> 8u) & 15u;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        if (((4294967295u << _2996) & _2878) == 0u)
        {
            _3099 = _2979;
            _3101 = _2981;
            _3103 = _2983;
            _3105 = _2985;
            _3107 = _2987;
            _3109 = _2989;
        }
        else
        {
            float _3124 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
            float _3125 = _3124 * _2832;
            float _3126 = _3124 * _2833;
            float _3127 = _3124 * _2834;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2996 < ((_2994 >> 12u) & 15u))
            {
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3259 = _2979;
                float _3260 = _2981;
                float _3261 = _2983;
                float _3262 = _2985;
                float _3263 = _2987;
                float _3264 = _2989;
                uint _3265 = _2996;
                uint _3274;
                bool _3275;
                for (;;)
                {
                    _3274 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3265 << 2u)) >> 2u)).x;
                    _3275 = _3274 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3275)
                    {
                        frontier_phi_77_pred = _3264;
                        frontier_phi_77_pred_1 = _3263;
                        frontier_phi_77_pred_2 = _3262;
                        frontier_phi_77_pred_3 = _3261;
                        frontier_phi_77_pred_4 = _3260;
                        frontier_phi_77_pred_5 = _3259;
                    }
                    else
                    {
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        uint _3487 = _3274;
                        uint _3488;
                        vec4 _3513;
                        float _3514;
                        vec4 _3529;
                        vec3 _3541;
                        vec4 _3556;
                        vec4 _3571;
                        float _3617;
                        bool _3618;
                        for (;;)
                        {
                            uint _3498 = ((_3265 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3487));
                            _3488 = (_3487 + 4294967295u) & _3487;
                            uint _3500 = _3498 * 40u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            _3514 = _3513.w;
                            uint _3516 = (_3498 * 40u) + 4u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3498 * 40u) + 8u;
                            _3541 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x));
                            uint _3543 = (_3498 * 40u) + 16u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3498 * 40u) + 20u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3498 * 40u) + 24u;
                            vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3592 = (_3498 * 40u) + 28u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            _3617 = fma(_2834, _3605.z, fma(_2833, _3605.y, _3605.x * _2832)) + _3605.w;
                            _3618 = !((fma(_2834, _3586.z, fma(_2833, _3586.y, _3586.x * _2832)) + _3586.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3618)
                            {
                                float _3645 = _3513.x - _2832;
                                float _3646 = _3513.y - _2833;
                                float _3647 = _3513.z - _2834;
                                float _3648 = dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647));
                                float _3651 = inversesqrt(_3648);
                                float _3652 = _3651 * _3645;
                                float _3653 = _3651 * _3646;
                                float _3654 = _3651 * _3647;
                                float _3658 = 1.0 - (_3648 / (_3514 * _3514));
                                float _4828 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3663 = sqrt(_3648) * _3529.w;
                                float _3665 = 1.39999997615814208984375 / (_3663 + 1.39999997615814208984375);
                                float _3666 = _3665 * _3665;
                                float _3669 = ((1.0 - _3666) * dot(vec3(_3652, _3653, _3654), vec3(_1086, _1089, _1092))) + _3666;
                                float _3672 = _3663 * _3663;
                                float _3676 = (fma(_2834, _3556.z, fma(_2833, _3556.y, _3556.x * _2832)) + _3556.w) / _3617;
                                float _3677 = (fma(_2834, _3571.z, fma(_2833, _3571.y, _3571.x * _2832)) + _3571.w) / _3617;
                                float _3681 = 1.0 - dot(vec2(_3676, _3677), vec2(_3676, _3677));
                                float _4844 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3683 = _3682 * (((isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0))) * _3659) / ((_3672 * 0.699999988079071044921875) + 1.0));
                                float _3695 = exp2(log2(1.0 / ((_3672 * 3.5) + 5.0)) * 0.25);
                                float _3696 = 1.0 - _1146;
                                float _3703 = sqrt(1.0 - ((1.0 - (_3696 * _3696)) * (1.0 - (_3695 * _3695))));
                                float _3704 = _3703 * _3703;
                                float _3705 = _3704 * _3704;
                                float _3706 = _3652 - _3125;
                                float _3707 = _3653 - _3126;
                                float _3708 = _3654 - _3127;
                                float _3712 = inversesqrt(dot(vec3(_3706, _3707, _3708), vec3(_3706, _3707, _3708)));
                                float _3716 = dot(vec3(_1086, _1089, _1092), vec3((-0.0) - _3125, (-0.0) - _3126, (-0.0) - _3127));
                                float _4855 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3720 = dot(vec3(_1086, _1089, _1092), vec3(_3712 * _3706, _3712 * _3707, _3712 * _3708));
                                float _4866 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3723 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3727 = ((_3723 * _3723) * (_3705 + (-1.0))) + 1.0;
                                float _3728 = _3665 * _3704;
                                float _3729 = _3728 * _3728;
                                float _3735 = ((1.0 - _3729) * dot(vec3(_1086, _1089, _1092), vec3(_3652, _3653, _3654))) + _3729;
                                float _4877 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3737 = 1.0 - _3704;
                                float _3747 = (0.5 / (((_3736 * ((_3719 * _3737) + _3704)) + 9.9999999392252902907785028219223e-09) + (((_3736 * _3737) + _3704) * _3719))) * _3736;
                                float _4888 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3757 = (_3682 * _3659) * (((_3705 * 3.1415927410125732421875) * (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0)))) / ((_3727 * _3727) * ((_3672 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3683 * _3529.y;
                                frontier_phi_83_pred_1 = _3683 * _3529.x;
                                frontier_phi_83_pred_2 = _3757 * _3541.z;
                                frontier_phi_83_pred_3 = _3757 * _3541.y;
                                frontier_phi_83_pred_4 = _3757 * _3541.x;
                                frontier_phi_83_pred_5 = _3683 * _3529.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3765 = frontier_phi_83_pred;
                            _3764 = frontier_phi_83_pred_1;
                            _3763 = frontier_phi_83_pred_2;
                            _3762 = frontier_phi_83_pred_3;
                            _3761 = frontier_phi_83_pred_4;
                            _3766 = frontier_phi_83_pred_5;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            if (_3488 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3488;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3473;
                        frontier_phi_77_pred_1 = _3472;
                        frontier_phi_77_pred_2 = _3471;
                        frontier_phi_77_pred_3 = _3470;
                        frontier_phi_77_pred_4 = _3469;
                        frontier_phi_77_pred_5 = _3468;
                    }
                    _3110 = frontier_phi_77_pred;
                    _3108 = frontier_phi_77_pred_1;
                    _3106 = frontier_phi_77_pred_2;
                    _3104 = frontier_phi_77_pred_3;
                    _3102 = frontier_phi_77_pred_4;
                    _3100 = frontier_phi_77_pred_5;
                    uint _3266 = _3265 + 1u;
                    if (_3266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3259 = _3100;
                        _3260 = _3102;
                        _3261 = _3104;
                        _3262 = _3106;
                        _3263 = _3108;
                        _3264 = _3110;
                        _3265 = _3266;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3104;
                frontier_phi_58_59_ladder_1 = _3110;
                frontier_phi_58_59_ladder_2 = _3108;
                frontier_phi_58_59_ladder_3 = _3106;
                frontier_phi_58_59_ladder_4 = _3102;
                frontier_phi_58_59_ladder_5 = _3100;
            }
            else
            {
                frontier_phi_58_59_ladder = _2983;
                frontier_phi_58_59_ladder_1 = _2989;
                frontier_phi_58_59_ladder_2 = _2987;
                frontier_phi_58_59_ladder_3 = _2985;
                frontier_phi_58_59_ladder_4 = _2981;
                frontier_phi_58_59_ladder_5 = _2979;
            }
            _3099 = frontier_phi_58_59_ladder_5;
            _3101 = frontier_phi_58_59_ladder_4;
            _3103 = frontier_phi_58_59_ladder;
            _3105 = frontier_phi_58_59_ladder_3;
            _3107 = frontier_phi_58_59_ladder_2;
            _3109 = frontier_phi_58_59_ladder_1;
        }
        float _3114 = isnan(1.0) ? _1130 : (isnan(_1130) ? 1.0 : min(_1130, 1.0));
        _2891 = (_3114 * _3105) + _2343;
        _2893 = (_3114 * _3107) + _2345;
        _2895 = (_3114 * _3109) + _2347;
        _2897 = ((_3099 * 0.039999999105930328369140625) * _3114) + _2676;
        _2899 = ((_3101 * 0.039999999105930328369140625) * _3114) + _2678;
        _2901 = ((_3103 * 0.039999999105930328369140625) * _3114) + _2680;
    }
    else
    {
        _2891 = _2343;
        _2893 = _2345;
        _2895 = _2347;
        _2897 = _2676;
        _2899 = _2678;
        _2901 = _2680;
    }
    float _4904 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _4915 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _4926 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2918 = ((isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2891 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1130))) + ((_2897 + ((isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) * _1964)) * cbPerFrame._m0[3u].x);
    float _2919 = ((isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2893 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1130))) + ((_2899 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1964)) * cbPerFrame._m0[3u].x);
    float _2920 = ((isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2895 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1130))) + ((_2901 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1964)) * cbPerFrame._m0[3u].x);
    uint _2921 = _263 + 6u;
    float _2929 = _1067 / cbSceneParam._m0[86u].x;
    float _2930 = _1068 / cbSceneParam._m0[86u].y;
    vec4 _2944 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, (log2((isnan(cbSceneParam._m0[77u].w) ? _989 : (isnan(_989) ? cbSceneParam._m0[77u].w : min(_989, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2946 = _2944.x;
    float _2947 = _2944.y;
    float _2948 = _2944.z;
    float _2949 = _2944.w;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    if (_989 > cbSceneParam._m0[78u].w)
    {
        float _3004 = isnan(_989) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _989 : min(cbSceneParam._m0[80u].w, _989));
        float _3005 = _3004 / _989;
        float _3016 = _3005 * _1040;
        float _3017 = _1041 * _3005;
        float _3018 = (-0.0) - _3017;
        float _3019 = _3005 * _1042;
        float _3021 = (cbSceneParam._m0[77u].w * _3018) / _3004;
        float _3022 = _3021 + cbSceneParam._m0[79u].w;
        float _3023 = cbSceneParam._m0[79u].w - _3017;
        float _3029 = sqrt(((_3016 * _3016) + (_3017 * _3017)) + (_3019 * _3019));
        float _3032 = (1.0 - (cbSceneParam._m0[77u].w / _3004)) * _3029;
        float _3037 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3039 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3216;
        if (abs((_3018 - _3021) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3216 = ((((_3022 > 0.0) ? exp2(_3037 * _3022) : (2.0 - exp2(_3039 * _3022))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3032;
        }
        else
        {
            float _3160 = 1.0 / cbSceneParam._m0[80u].x;
            float _3161 = isnan(_3023) ? _3022 : (isnan(_3022) ? _3023 : max(_3022, _3023));
            float _3162 = isnan(_3023) ? _3022 : (isnan(_3022) ? _3023 : min(_3022, _3023));
            float _3171 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : min(_3161, 0.0));
            float _3172 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : min(_3162, 0.0));
            _3216 = ((abs(_3029 / _3018) * cbSceneParam._m0[80u].y) * ((((_3171 - _3172) * 2.0) - ((exp2(_3037 * (isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0)))) - exp2(_3037 * (isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))))) * _3160)) - ((exp2(_3039 * _3171) - exp2(_3039 * _3172)) * _3160))) + (_3032 * cbSceneParam._m0[80u].z);
        }
        vec4 _3218 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, 1.0), 0.0);
        float _3227 = exp2((_3216 * (-1.44269502162933349609375)) * (1.0 - _3218.w));
        float _3228 = log2(_3227);
        float _3244 = log2(_2949);
        _3041 = (exp2(_3244 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].x)) * _3218.x) / cbSceneParam._m0[78u].x)) + _2946;
        _3043 = (exp2(_3244 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].y)) * _3218.y) / cbSceneParam._m0[78u].y)) + _2947;
        _3045 = (exp2(_3244 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].z)) * _3218.z) / cbSceneParam._m0[78u].z)) + _2948;
        _3047 = _3227 * _2949;
    }
    else
    {
        _3041 = _2946;
        _3043 = _2947;
        _3045 = _2948;
        _3047 = _2949;
    }
    bool _3254;
    vec4 _3057;
    vec4 _3079;
    float _3081;
    float _3085;
    float _3086;
    float _3087;
    float _3088;
    bool _3098;
    for (;;)
    {
        _3057 = cbMatDynParam._m0[0u];
        float _3059 = roundEven(_3057.y);
        bool _3060 = _3059 == 3.0;
        float _3061 = log2(_3047);
        float _3068 = exp2(_3061 * cbSceneParam._m0[78u].x) * _2918;
        float _3069 = exp2(_3061 * cbSceneParam._m0[78u].y) * _2919;
        float _3070 = exp2(_3061 * cbSceneParam._m0[78u].z) * _2920;
        float _3077 = _1056 + (-0.5);
        _3079 = cbMtdParam._m0[1u];
        _3081 = _3079.y * _3077;
        float _3084 = (_3059 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3085 = _3084 * (_3060 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3041)));
        _3086 = _3084 * (_3060 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3043)));
        _3087 = _3084 * (_3060 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3045)));
        _3088 = _3077 * 0.999000012874603271484375;
        _3098 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3098)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3088) < 0.5)
            {
                _3254 = true;
                break;
            }
        }
        uint _3195 = _1105 + uint(_3057.w);
        if ((cbInstanceData._m0[_3195].w < 1.0) && ((cbInstanceData._m0[_3195].w + _3088) < 0.5))
        {
            _3254 = true;
            break;
        }
        if ((_3081 + 1.0) < _3079.x)
        {
            _3254 = true;
            break;
        }
        _3254 = false;
        break;
    }
    float _3459;
    if (_3254)
    {
        discard_state = true;
        _3459 = 0.0;
    }
    else
    {
        _3459 = cbInstanceData._m0[_2921].w;
    }
    SV_Target.x = _3085;
    SV_Target.y = _3086;
    SV_Target.z = _3087;
    SV_Target.w = _3459;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2921].w;
    discard_exit();
}


