#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1269;
float _3655;
float _3656;
float _3657;
float _3658;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3667 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3678 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3689 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].z) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3700 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _448 = (_441 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _449 = (_441 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _450 = (_441 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    float _454 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _448;
    float _457 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _449;
    float _460 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _450;
    float _467 = ((_448 - _454) * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) + _454;
    float _468 = ((_449 - _457) * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) + _457;
    float _469 = ((_450 - _460) * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) + _460;
    vec4 _482 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _524 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    float _537 = ((_507.z - _528) * _441) + _528;
    float _540 = ((((_507.x - _526) * _441) + _526) * 2.0) + (-1.0);
    float _541 = ((((_507.y - _527) * _441) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3711 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _581 = (_540 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_482.x * 2.0) + (-1.0)))) + (((_569.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _582 = (_541 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_482.y * 2.0) + (-1.0)))) + (((_569.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _596 = _594.x;
    float _597 = 1.0 - _596;
    float _623 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_596 - _597) * cbMtdParam._m0[24u].y) + _597) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3722 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _632 = ((((cbMtdParam._m0[10u].x - _467) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _624) + _467;
    float _633 = ((((cbMtdParam._m0[10u].y - _468) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _624) + _468;
    float _634 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _469)) * _624) + _469;
    float _639 = (((_482.z - _537) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _537;
    float _643 = ((_569.z - _639) * cbMtdParam._m0[19u].w) + _639;
    float _647 = ((cbMtdParam._m0[23u].y - _643) * _624) + _643;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _672 = (_666.x * 2.0) + (-1.0);
    float _673 = (_666.y * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _3733 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _690 = (_624 * (((cbMtdParam._m0[22u].z * _581) - _581) + _672)) + _581;
    float _691 = (_624 * (((cbMtdParam._m0[22u].z * _582) - _582) + _673)) + _582;
    float _692 = (_624 * (sqrt(1.0 - (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) - _547)) + _547;
    float _694 = cbMtdParam._m0[22u].x + _569.w;
    float _697 = fma(_692, _243 * NORMAL.x, fma(_691, _250 * TANGENT.x, (_236 * _228) * _690));
    float _700 = fma(_692, _243 * NORMAL.y, fma(_691, _250 * TANGENT.y, (_236 * _229) * _690));
    float _703 = fma(_692, _243 * NORMAL.z, fma(_691, _250 * TANGENT.z, (_236 * _230) * _690));
    float _707 = inversesqrt(dot(vec3(_697, _700, _703), vec3(_697, _700, _703)));
    float _708 = _707 * _697;
    float _709 = _707 * _700;
    float _710 = _707 * _703;
    float _3744 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _711 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _3755 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _3766 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3777 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3788 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _780 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _770);
    float _781 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _770);
    float _782 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _770);
    float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
    float _787 = _780 * _786;
    float _788 = _781 * _786;
    float _789 = _782 * _786;
    vec4 _794 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _796 = _794.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _950 = sqrt(((_780 * _780) + (_781 * _781)) + (_782 * _782));
        float _956 = (cbMatDynParam._m0[5u].x * _950) + cbMatDynParam._m0[5u].y;
        float _3799 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _961 = (cbMatDynParam._m0[5u].z * _950) + cbMatDynParam._m0[5u].w;
        float _3810 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) - _957)) + _957) < ((_796 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _807 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _808 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _826 = fma(_710, cbSceneParam._m0[5u].z, fma(_709, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _708));
    float _829 = fma(_710, cbSceneParam._m0[6u].z, fma(_709, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _708));
    float _832 = fma(_710, cbSceneParam._m0[7u].z, fma(_709, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _708));
    uint _845 = _275 + 9u;
    uint _846 = _845 + uint(cbMatDynParam._m0[0u].w);
    float _852 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * cbInstanceData._m0[_846].x;
    float _853 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_846].y;
    float _854 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_846].z;
    float _3821 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    vec4 _866 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _807, cbSceneParam._m0[86u].y * _808));
    float _870 = ((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * TEXCOORD_5.w) * _866.x;
    float _871 = dot(vec3(_708, _709, _710), vec3(_787, _788, _789));
    float _874 = _871 * 2.0;
    float _878 = (_874 * _708) - _787;
    float _879 = (_874 * _709) - _788;
    float _880 = (_874 * _710) - _789;
    float _884 = abs(dot(vec3(_787, _788, _789), vec3(_708, _709, _710)));
    float _3854 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _886 = sqrt(_711);
    float _899 = exp2((_886 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1268;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _993 = fma(_939, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931));
        float _997 = fma(_939, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931));
        float _1001 = fma(_939, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931));
        float _1026 = _931 + _708;
        float _1027 = _935 + _709;
        float _1028 = _939 + _710;
        float _1038 = fma(_1028, cbModelParam._m0[26u].z, fma(_1027, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026)) - _993;
        float _1039 = fma(_1028, cbModelParam._m0[27u].z, fma(_1027, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026)) - _997;
        float _1040 = fma(_1028, cbModelParam._m0[28u].z, fma(_1027, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026)) - _1001;
        float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
        float _1057 = ((_1044 * _1038) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_993 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1044 * _1039) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_997 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1044 * _1040) / cbModelParam._m0[34u].z) + ((((((_1001 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        float _1096 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1062.x + (-0.5));
        float _1098 = _1096 * (_1062.y + (-0.5));
        float _1099 = _1096 * (_1062.z + (-0.5));
        float _1106 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1069.x + (-0.5));
        float _1108 = _1106 * (_1069.y + (-0.5));
        float _1109 = _1106 * (_1069.z + (-0.5));
        float _1116 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1076.x + (-0.5));
        float _1118 = _1116 * (_1076.y + (-0.5));
        float _1119 = _1116 * (_1076.z + (-0.5));
        float _1126 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1083.x + (-0.5));
        float _1128 = _1126 * (_1083.y + (-0.5));
        float _1129 = _1126 * (_1083.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1150 = (dot(vec3(_708, _709, _710), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1160 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3902 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1162 + 1.0))) + _1167) * _1130;
        float _1177 = _1098 * 0.5;
        float _1178 = _1108 * 0.5;
        float _1179 = _1118 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_708, _709, _710), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3935 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1204 + 1.0))) + _1209) * _1131;
        float _1219 = _1099 * 0.5;
        float _1220 = _1109 * 0.5;
        float _1221 = _1119 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_708, _709, _710), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3968 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1246 + 1.0))) + _1251) * _1132;
        _1268 = _1099;
        _1270 = _1098;
        _1271 = _1097;
        _1272 = _1109;
        _1273 = _1108;
        _1274 = _1107;
        _1275 = _1119;
        _1276 = _1118;
        _1277 = _1117;
        _1278 = _1132;
        _1279 = _1131;
        _1280 = _1130;
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _1269;
        _1270 = _1269;
        _1271 = _1269;
        _1272 = _1269;
        _1273 = _1269;
        _1274 = _1269;
        _1275 = _1269;
        _1276 = _1269;
        _1277 = _1269;
        _1278 = _1269;
        _1279 = _1269;
        _1280 = _1269;
        _1281 = 0.0;
        _1282 = 0.0;
        _1283 = 0.0;
    }
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1311 = fma(_939, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931));
        float _1315 = fma(_939, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931));
        float _1319 = fma(_939, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931));
        float _1342 = _931 + _708;
        float _1343 = _935 + _709;
        float _1344 = _939 + _710;
        float _1354 = fma(_1344, cbModelParam._m0[30u].z, fma(_1343, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1342)) - _1311;
        float _1355 = fma(_1344, cbModelParam._m0[31u].z, fma(_1343, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1342)) - _1315;
        float _1356 = fma(_1344, cbModelParam._m0[32u].z, fma(_1343, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1342)) - _1319;
        float _1360 = inversesqrt(dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356)));
        float _1373 = ((_1360 * _1354) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1311 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1360 * _1355) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1315 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1360 * _1356) / cbModelParam._m0[35u].z) + ((((((_1319 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        float _1410 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1377.x + (-0.5));
        float _1412 = _1410 * (_1377.y + (-0.5));
        float _1413 = _1410 * (_1377.z + (-0.5));
        float _1420 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1384.x + (-0.5));
        float _1422 = _1420 * (_1384.y + (-0.5));
        float _1423 = _1420 * (_1384.z + (-0.5));
        float _1430 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1391.x + (-0.5));
        float _1432 = _1430 * (_1391.y + (-0.5));
        float _1433 = _1430 * (_1391.z + (-0.5));
        float _1440 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1398.x + (-0.5));
        float _1442 = _1440 * (_1398.y + (-0.5));
        float _1443 = _1440 * (_1398.z + (-0.5));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = _1411 * 0.5;
        float _1448 = _1421 * 0.5;
        float _1449 = _1431 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_708, _709, _710), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4031 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1474 + 1.0))) + _1479) * _1444;
        float _1489 = _1412 * 0.5;
        float _1490 = _1422 * 0.5;
        float _1491 = _1432 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_708, _709, _710), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _4064 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1516 + 1.0))) + _1521) * _1445;
        float _1531 = _1413 * 0.5;
        float _1532 = _1423 * 0.5;
        float _1533 = _1433 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_708, _709, _710), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4097 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1558 + 1.0))) + _1563) * _1446;
        _1580 = _1413;
        _1581 = _1412;
        _1582 = _1411;
        _1583 = _1423;
        _1584 = _1422;
        _1585 = _1421;
        _1586 = _1433;
        _1587 = _1432;
        _1588 = _1431;
        _1589 = _1446;
        _1590 = _1445;
        _1591 = _1444;
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
    }
    else
    {
        _1580 = _1269;
        _1581 = _1269;
        _1582 = _1269;
        _1583 = _1269;
        _1584 = _1269;
        _1585 = _1269;
        _1586 = _1269;
        _1587 = _1269;
        _1588 = _1269;
        _1589 = _1269;
        _1590 = _1269;
        _1591 = _1269;
        _1592 = 0.0;
        _1593 = 0.0;
        _1594 = 0.0;
    }
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1281)) + _1281;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1282)) + _1282;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1283)) + _1283;
    float _1627 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1605, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1630 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1605, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1633 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1605, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1604));
    float _1648 = _878 * 0.5;
    float _1649 = _879 * 0.5;
    float _1650 = _880 * 0.5;
    float _1651 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1654 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1657 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1691;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1664 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1268, _1272, _1275, _1278));
        float _1668 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1270, _1273, _1276, _1279));
        float _1672 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1271, _1274, _1277, _1280));
        float _1679 = dot(vec4(cbModelParam._m0[39u]), vec4(_1648, _1649, _1650, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1702;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1693 = dot(vec4(cbModelParam._m0[40u]), vec4(_1648, _1649, _1650, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1706 = (_1702 * cbModelParam._m0[1u].x) + (_1691 * (1.0 - cbModelParam._m0[1u].x));
    float _1716 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _711);
    float _1717 = isnan(_1716) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1716 : min(cbModelParam._m0[25u].z, _1716));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1766 = fma(_939, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931)) + cbModelParam._m0[13u].w;
        float _1770 = fma(_939, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931)) + cbModelParam._m0[14u].w;
        float _1774 = fma(_939, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931)) + cbModelParam._m0[15u].w;
        float _1777 = fma(_880, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878));
        float _1780 = fma(_880, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878));
        float _1783 = fma(_880, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878));
        float _1811;
        if (_1777 > 0.0)
        {
            _1811 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1811 = frontier_phi_17_15_ladder;
        }
        float _2034;
        if (_1780 > 0.0)
        {
            _2034 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2034 = frontier_phi_26_22_ladder;
        }
        float _2280;
        if (_1783 > 0.0)
        {
            _2280 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2280 = frontier_phi_38_33_ladder;
        }
        float _2282 = isnan(_2034) ? _1811 : (isnan(_1811) ? _2034 : min(_1811, _2034));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1777) + _1766;
        float _2288 = (_2283 * _1780) + _1770;
        float _2289 = (_2283 * _1783) + _1774;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2292 = (-1.0) - _2290;
        float _2294 = _2290 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2289 > _2294) || ((_2289 < _2292) || ((_2288 > _2294) || ((_2288 < _2292) || ((_2287 < _2292) || (_2287 > _2294))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2413 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2289, cbModelParam._m0[9u].z, fma(_2288, cbModelParam._m0[9u].y, _2287 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2289, cbModelParam._m0[10u].z, fma(_2288, cbModelParam._m0[10u].y, _2287 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2289, cbModelParam._m0[11u].z, fma(_2288, cbModelParam._m0[11u].y, _2287 * cbModelParam._m0[11u].x))), _1717);
            frontier_phi_16_38_ladder = _2413.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2413.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2413.x * cbModelParam._m0[1u].y;
        }
        _1799 = frontier_phi_16_38_ladder_2;
        _1801 = frontier_phi_16_38_ladder_1;
        _1803 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_878, _879, _880), _1717);
        _1799 = _1787.x * cbModelParam._m0[1u].y;
        _1801 = _1787.y * cbModelParam._m0[1u].y;
        _1803 = _1787.z * cbModelParam._m0[1u].y;
    }
    float _1807 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _711);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1807 : min(cbModelParam._m0[25u].w, _1807));
    float _1899;
    float _1901;
    float _1903;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1863 = fma(_939, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931)) + cbModelParam._m0[21u].w;
        float _1867 = fma(_939, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931)) + cbModelParam._m0[22u].w;
        float _1871 = fma(_939, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931)) + cbModelParam._m0[23u].w;
        float _1874 = fma(_880, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878));
        float _1877 = fma(_880, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878));
        float _1880 = fma(_880, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878));
        float _2039;
        if (_1874 > 0.0)
        {
            _2039 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2039 = frontier_phi_28_24_ladder;
        }
        float _2307;
        if (_1877 > 0.0)
        {
            _2307 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2307 = frontier_phi_40_35_ladder;
        }
        float _2512;
        if (_1880 > 0.0)
        {
            _2512 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2512 = frontier_phi_49_46_ladder;
        }
        float _2514 = isnan(_2307) ? _2039 : (isnan(_2039) ? _2307 : min(_2039, _2307));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _1874) + _1863;
        float _2520 = (_2515 * _1877) + _1867;
        float _2521 = (_2515 * _1880) + _1871;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2522;
        float _2525 = _2522 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2521 > _2525) || ((_2521 < _2523) || ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 < _2523) || (_2519 > _2525))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2720 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2521, cbModelParam._m0[17u].z, fma(_2520, cbModelParam._m0[17u].y, _2519 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2521, cbModelParam._m0[18u].z, fma(_2520, cbModelParam._m0[18u].y, _2519 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2521, cbModelParam._m0[19u].z, fma(_2520, cbModelParam._m0[19u].y, _2519 * cbModelParam._m0[19u].x))), _1808);
            frontier_phi_25_49_ladder = _2720.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2720.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2720.x * cbModelParam._m0[1u].z;
        }
        _1899 = frontier_phi_25_49_ladder_2;
        _1901 = frontier_phi_25_49_ladder_1;
        _1903 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1883 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_878, _879, _880), _1808);
        _1899 = _1883.x * cbModelParam._m0[1u].z;
        _1901 = _1883.y * cbModelParam._m0[1u].z;
        _1903 = _1883.z * cbModelParam._m0[1u].z;
    }
    float _1915 = ((((1.0 - _899) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_899 * _886)) * _870;
    float _1916 = _1915 * ((cbModelParam._m0[1u].w * (_1899 - _1799)) + _1799);
    float _1917 = _1915 * ((cbModelParam._m0[1u].w * (_1901 - _1801)) + _1801);
    float _1918 = _1915 * ((cbModelParam._m0[1u].w * (_1903 - _1803)) + _1803);
    float _1921 = fma(_1918, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1916 * cbSceneParam._m0[89u].x));
    float _1924 = fma(_1918, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1916 * cbSceneParam._m0[90u].x));
    float _1927 = fma(_1918, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, _1916 * cbSceneParam._m0[91u].x));
    vec4 _1935 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_807, _808));
    float _1937 = _1935.w;
    float _1949 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1937);
    float _1950 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1937);
    float _1951 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1937);
    uvec4 _1955 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _1957 = _1955.x * 14u;
    uint _1958 = _1957 + 13u;
    float _1965 = _870 + (-1.0);
    float _1970 = (cbLight._m0[_1958].x * _1965) + 1.0;
    float _1971 = (cbLight._m0[_1958].y * _1965) + 1.0;
    float _1972 = (cbLight._m0[_1958].z * _1965) + 1.0;
    float _1973 = (cbLight._m0[_1958].w * _1965) + 1.0;
    uint _1974 = _1957 + 5u;
    float _1980 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
    uint _1984 = _1957 + 4u;
    float _1993 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    uint _1997 = _1957 | 1u;
    float _2008 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_708, _709, _710));
    float _2011 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_708, _709, _710));
    float _4233 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _4244 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2016 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * 0.3183098733425140380859375;
    float _2018 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.3183098733425140380859375;
    float _2025 = ((cbLight._m0[_1974].x * _1980) * _2018) + (((cbLight._m0[_1984].x * _1949) * _1993) * _2016);
    float _2026 = ((_1980 * cbLight._m0[_1974].y) * _2018) + (((cbLight._m0[_1984].y * _1950) * _1993) * _2016);
    float _2027 = ((_1980 * cbLight._m0[_1974].z) * _2018) + (((cbLight._m0[_1984].z * _1951) * _1993) * _2016);
    uvec4 _2031 = floatBitsToUint(cbLight._m0[_1957 + 12u]);
    bool _2033 = _2031.x == 0u;
    float _2044;
    float _2046;
    float _2048;
    if (_2033)
    {
        _2044 = _2025;
        _2046 = _2026;
        _2048 = _2027;
    }
    else
    {
        uint _2052 = _1957 + 6u;
        float _2068 = (dot(vec3(cbLight._m0[_1957 + 2u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2069 = _2068 * _2068;
        float _4255 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2070 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2071 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2044 = (((cbLight._m0[_2052].x * 0.3183098733425140380859375) * _2070) * _2071) + _2025;
        _2046 = (((cbLight._m0[_2052].y * 0.3183098733425140380859375) * _2070) * _2071) + _2026;
        _2048 = (((cbLight._m0[_2052].z * 0.3183098733425140380859375) * _2070) * _2071) + _2027;
    }
    bool _2051 = _2031.y == 0u;
    float _2089;
    float _2091;
    float _2093;
    if (_2051)
    {
        _2089 = _2044;
        _2091 = _2046;
        _2093 = _2048;
    }
    else
    {
        uint _2251 = _1957 + 7u;
        float _2267 = (dot(vec3(cbLight._m0[_1957 + 3u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2268 = _2267 * _2267;
        float _4271 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2269 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2270 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2089 = (((cbLight._m0[_2251].x * 0.3183098733425140380859375) * _2269) * _2270) + _2044;
        _2091 = (((cbLight._m0[_2251].y * 0.3183098733425140380859375) * _2269) * _2270) + _2046;
        _2093 = (((cbLight._m0[_2251].z * 0.3183098733425140380859375) * _2269) * _2270) + _2048;
    }
    uint _2096 = _1957 + 8u;
    float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1957].w)) * _711) * 0.949999988079071044921875);
    float _2110 = _2109 * _2109;
    float _2111 = cbLight._m0[_1957].x + _787;
    float _2112 = cbLight._m0[_1957].y + _788;
    float _2113 = cbLight._m0[_1957].z + _789;
    float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
    float _2118 = _2117 * _2111;
    float _2119 = _2117 * _2112;
    float _2120 = _2117 * _2113;
    float _2121 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_1957].xyz));
    float _4287 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _4298 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2125 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2126 = dot(vec3(_708, _709, _710), vec3(_2118, _2119, _2120));
    float _4309 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2130 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_2118, _2119, _2120));
    float _4320 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2134 = _2110 * _2110;
    float _2138 = ((_2129 * _2129) * (_2134 + (-1.0))) + 1.0;
    float _2149 = (exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2150 = 1.0 - _2110;
    float _2161 = (0.5 / (((_2125 * ((_2124 * _2150) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2150) + _2110) * _2124))) * _2124;
    float _4331 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2163 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2134 / ((_2138 * _2138) * 3.141590118408203125));
    uint _2177 = _1957 + 9u;
    float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _711) * 0.949999988079071044921875);
    float _2189 = _2188 * _2188;
    float _2190 = cbLight._m0[_1997].x + _787;
    float _2191 = cbLight._m0[_1997].y + _788;
    float _2192 = cbLight._m0[_1997].z + _789;
    float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
    float _2197 = _2196 * _2190;
    float _2198 = _2196 * _2191;
    float _2199 = _2196 * _2192;
    float _2200 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_1997].xyz));
    float _4342 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2204 = dot(vec3(_708, _709, _710), vec3(_2197, _2198, _2199));
    float _4353 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2197, _2198, _2199));
    float _4364 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2189 * _2189;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2225 = (exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2226 = 1.0 - _2189;
    float _2236 = (0.5 / (((_2125 * ((_2203 * _2226) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2226) + _2189) * _2203))) * _2203;
    float _4375 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2238 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    float _2248 = (((_2225 * cbLight._m0[_2177].x) * _2238) * _1980) + ((((cbLight._m0[_2096].x * _1949) * _2149) * _2163) * _1993);
    float _2249 = (((_2225 * cbLight._m0[_2177].y) * _2238) * _1980) + ((((cbLight._m0[_2096].y * _1950) * _2149) * _2163) * _1993);
    float _2250 = (((_2225 * cbLight._m0[_2177].z) * _2238) * _1980) + ((((cbLight._m0[_2096].z * _1951) * _2149) * _2163) * _1993);
    float _2312;
    float _2314;
    float _2316;
    if (_2033)
    {
        _2312 = _2248;
        _2314 = _2249;
        _2316 = _2250;
    }
    else
    {
        uint _2318 = _1957 + 2u;
        uint _2322 = _1957 + 10u;
        float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _711) * 0.949999988079071044921875);
        float _2337 = _2336 * _2336;
        float _2338 = cbLight._m0[_2318].x + _787;
        float _2339 = cbLight._m0[_2318].y + _788;
        float _2340 = cbLight._m0[_2318].z + _789;
        float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
        float _2345 = _2344 * _2338;
        float _2346 = _2344 * _2339;
        float _2347 = _2344 * _2340;
        float _2348 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2318].xyz));
        float _4386 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2352 = dot(vec3(_708, _709, _710), vec3(_2345, _2346, _2347));
        float _4397 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2356 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2345, _2346, _2347));
        float _4408 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2360 = _2337 * _2337;
        float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
        float _2373 = (exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2374 = 1.0 - _2337;
        float _2384 = (0.5 / (((_2125 * ((_2351 * _2374) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2374) + _2337) * _2351))) * _2351;
        float _4419 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2386 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
        float _2387 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2312 = (((_2373 * cbLight._m0[_2322].x) * _2386) * _2387) + _2248;
        _2314 = (((_2373 * cbLight._m0[_2322].y) * _2386) * _2387) + _2249;
        _2316 = (((_2373 * cbLight._m0[_2322].z) * _2386) * _2387) + _2250;
    }
    float _2422;
    float _2424;
    float _2426;
    if (_2051)
    {
        _2422 = _2312;
        _2424 = _2314;
        _2426 = _2316;
    }
    else
    {
        uint _2433 = _1957 + 3u;
        uint _2437 = _1957 + 11u;
        float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _711) * 0.949999988079071044921875);
        float _2452 = _2451 * _2451;
        float _2453 = cbLight._m0[_2433].x + _787;
        float _2454 = cbLight._m0[_2433].y + _788;
        float _2455 = cbLight._m0[_2433].z + _789;
        float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
        float _2460 = _2459 * _2453;
        float _2461 = _2459 * _2454;
        float _2462 = _2459 * _2455;
        float _2463 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2433].xyz));
        float _4435 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2467 = dot(vec3(_708, _709, _710), vec3(_2460, _2461, _2462));
        float _4446 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2471 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2460, _2461, _2462));
        float _4457 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2475 = _2452 * _2452;
        float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
        float _2488 = (exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2489 = 1.0 - _2452;
        float _2499 = (0.5 / (((_2125 * ((_2466 * _2489) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2489) + _2452) * _2466))) * _2466;
        float _4468 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2501 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
        float _2502 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2422 = (((_2488 * cbLight._m0[_2437].x) * _2501) * _2502) + _2312;
        _2424 = (((_2488 * cbLight._m0[_2437].y) * _2501) * _2502) + _2314;
        _2426 = (((_2488 * cbLight._m0[_2437].z) * _2501) * _2502) + _2316;
    }
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_1955.y == 0u)
    {
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2577;
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2577;
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2577;
        uvec4 _2592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2593 = _2592.x;
        uint _2604 = uint((float(_2592.y) * floor(float(uint(cbSceneParam._m0[85u].y * _808) / _2593))) + floor(float(uint(cbSceneParam._m0[85u].x * _807) / _2593)));
        float _2614 = (log2(_2580 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2615 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        uint _2618 = uint(isnan(14.0) ? _2615 : (isnan(_2615) ? 14.0 : min(_2615, 14.0)));
        uvec4 _2623 = texelFetch(g_lightClusterGridBuffer, int(((_2618 << 2u) + (_2604 << 6u)) >> 2u));
        uint _2624 = _2623.x;
        uint _2625 = _2592.z;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        if (((((1u << ((_2625 >> 4u) & 15u)) + 4294967295u) & _2624) == 0u) || ((_2625 & 240u) == 0u))
        {
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
        }
        else
        {
            float _2726;
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            uint _2884 = 0u;
            uint _2893;
            bool _2894;
            for (;;)
            {
                _2893 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2884 << 2u)) >> 2u)).x;
                _2894 = _2893 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2894)
                {
                    frontier_phi_66_pred = _2878;
                    frontier_phi_66_pred_1 = _2883;
                    frontier_phi_66_pred_2 = _2882;
                    frontier_phi_66_pred_3 = _2881;
                    frontier_phi_66_pred_4 = _2880;
                    frontier_phi_66_pred_5 = _2879;
                }
                else
                {
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    uint _3029;
                    _3023 = _2878;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2893;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    for (;;)
                    {
                        uint _3033 = uint(findLSB(_3029)) + (_2884 << 5u);
                        uint _3030 = (_3029 + 4294967295u) & _3029;
                        uint _3035 = _3033 * 48u;
                        vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 3u)).x));
                        uint _3055 = (_3033 * 48u) + 4u;
                        vec4 _3068 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 3u)).x));
                        uint _3074 = (_3033 * 48u) + 8u;
                        vec3 _3085 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x));
                        float _3089 = _3049.x - _2578;
                        float _3090 = _3049.y - _2579;
                        float _3091 = _3049.z - _2580;
                        float _3092 = dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091));
                        float _3095 = inversesqrt(_3092);
                        float _3096 = _3095 * _3089;
                        float _3097 = _3095 * _3090;
                        float _3098 = _3095 * _3091;
                        float _3099 = dot(vec3(_826, _829, _832), vec3(_3096, _3097, _3098));
                        float _3104 = 1.0 - (_3092 * _3049.w);
                        float _4494 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3105 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3106 = sqrt(_3092) * _3068.w;
                        float _3109 = 1.39999997615814208984375 / (_3106 + 1.39999997615814208984375);
                        float _3110 = _3109 * _3109;
                        float _3113 = ((1.0 - _3110) * _3099) + _3110;
                        float _3116 = _3106 * _3106;
                        float _3120 = ((isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0))) * _3105) / ((_3116 * 0.699999988079071044921875) + 1.0);
                        float _3124 = (-0.0) - _2578;
                        float _3125 = (-0.0) - _2579;
                        float _3126 = (-0.0) - _2580;
                        float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3141 = exp2(log2(1.0 / ((_3116 * 3.5) + 5.0)) * 0.25);
                        float _3142 = 1.0 - _886;
                        float _3149 = sqrt(1.0 - ((1.0 - (_3142 * _3142)) * (1.0 - (_3141 * _3141))));
                        float _3150 = _3149 * _3149;
                        float _3151 = _3150 * _3150;
                        float _3152 = _3131 + _3096;
                        float _3153 = _3132 + _3097;
                        float _3154 = _3133 + _3098;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3162 = dot(vec3(_826, _829, _832), vec3(_3131, _3132, _3133));
                        float _4510 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3165 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3166 = dot(vec3(_826, _829, _832), vec3(_3158 * _3152, _3158 * _3153, _3158 * _3154));
                        float _4521 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3169 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3173 = ((_3169 * _3169) * (_3151 + (-1.0))) + 1.0;
                        float _3174 = _3109 * _3150;
                        float _3175 = _3174 * _3174;
                        float _3178 = ((1.0 - _3175) * _3099) + _3175;
                        float _4532 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3179 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3180 = 1.0 - _3150;
                        float _3190 = (0.5 / (((_3179 * ((_3165 * _3180) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_3179 * _3180) + _3150) * _3165))) * _3179;
                        float _4543 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3201 = (((_3151 * 3.1415927410125732421875) * (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) / ((_3173 * _3173) * ((_3116 * 2.1991131305694580078125) + 3.141590118408203125))) * _3105;
                        _2953 = (_3120 * _3068.x) + _3026;
                        _2954 = (_3120 * _3068.y) + _3027;
                        _2955 = (_3120 * _3068.z) + _3028;
                        _2950 = (_3201 * _3085.x) + _3023;
                        _2951 = (_3201 * _3085.y) + _3024;
                        _2952 = (_3201 * _3085.z) + _3025;
                        if (_3030 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3023 = _2950;
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _3030;
                        }
                    }
                    frontier_phi_66_pred = _2950;
                    frontier_phi_66_pred_1 = _2955;
                    frontier_phi_66_pred_2 = _2954;
                    frontier_phi_66_pred_3 = _2953;
                    frontier_phi_66_pred_4 = _2952;
                    frontier_phi_66_pred_5 = _2951;
                }
                _2726 = frontier_phi_66_pred;
                _2736 = frontier_phi_66_pred_1;
                _2734 = frontier_phi_66_pred_2;
                _2732 = frontier_phi_66_pred_3;
                _2730 = frontier_phi_66_pred_4;
                _2728 = frontier_phi_66_pred_5;
                uint _2885 = _2884 + 1u;
                if (_2885 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2878 = _2726;
                    _2879 = _2728;
                    _2880 = _2730;
                    _2881 = _2732;
                    _2882 = _2734;
                    _2883 = _2736;
                    _2884 = _2885;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
        }
        uvec4 _2739 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2740 = _2739.z;
        uint _2742 = (_2740 >> 8u) & 15u;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        if (((4294967295u << _2742) & _2624) == 0u)
        {
            _2846 = _2725;
            _2848 = _2727;
            _2850 = _2729;
            _2852 = _2731;
            _2854 = _2733;
            _2856 = _2735;
        }
        else
        {
            float _2871 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
            float _2872 = _2871 * _2578;
            float _2873 = _2871 * _2579;
            float _2874 = _2871 * _2580;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2742 < ((_2740 >> 12u) & 15u))
            {
                float _2847;
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _3006 = _2725;
                float _3007 = _2727;
                float _3008 = _2729;
                float _3009 = _2731;
                float _3010 = _2733;
                float _3011 = _2735;
                uint _3012 = _2742;
                uint _3021;
                bool _3022;
                for (;;)
                {
                    _3021 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_3012 << 2u)) >> 2u)).x;
                    _3022 = _3021 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3022)
                    {
                        frontier_phi_77_pred = _3011;
                        frontier_phi_77_pred_1 = _3010;
                        frontier_phi_77_pred_2 = _3009;
                        frontier_phi_77_pred_3 = _3008;
                        frontier_phi_77_pred_4 = _3007;
                        frontier_phi_77_pred_5 = _3006;
                    }
                    else
                    {
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3228 = _3006;
                        float _3229 = _3007;
                        float _3230 = _3008;
                        float _3231 = _3009;
                        float _3232 = _3010;
                        float _3233 = _3011;
                        uint _3234 = _3021;
                        uint _3235;
                        vec4 _3260;
                        float _3261;
                        vec4 _3276;
                        vec3 _3288;
                        vec4 _3303;
                        vec4 _3318;
                        float _3364;
                        bool _3365;
                        for (;;)
                        {
                            uint _3245 = ((_3012 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3234));
                            _3235 = (_3234 + 4294967295u) & _3234;
                            uint _3247 = _3245 * 40u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            _3261 = _3260.w;
                            uint _3263 = (_3245 * 40u) + 4u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3278 = (_3245 * 40u) + 8u;
                            _3288 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x));
                            uint _3290 = (_3245 * 40u) + 16u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3305 = (_3245 * 40u) + 20u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3245 * 40u) + 24u;
                            vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3339 = (_3245 * 40u) + 28u;
                            vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            _3364 = fma(_2580, _3352.z, fma(_2579, _3352.y, _3352.x * _2578)) + _3352.w;
                            _3365 = !((fma(_2580, _3333.z, fma(_2579, _3333.y, _3333.x * _2578)) + _3333.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3365)
                            {
                                float _3392 = _3260.x - _2578;
                                float _3393 = _3260.y - _2579;
                                float _3394 = _3260.z - _2580;
                                float _3395 = dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394));
                                float _3398 = inversesqrt(_3395);
                                float _3399 = _3398 * _3392;
                                float _3400 = _3398 * _3393;
                                float _3401 = _3398 * _3394;
                                float _3405 = 1.0 - (_3395 / (_3261 * _3261));
                                float _4554 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3410 = sqrt(_3395) * _3276.w;
                                float _3412 = 1.39999997615814208984375 / (_3410 + 1.39999997615814208984375);
                                float _3413 = _3412 * _3412;
                                float _3416 = ((1.0 - _3413) * dot(vec3(_3399, _3400, _3401), vec3(_826, _829, _832))) + _3413;
                                float _3419 = _3410 * _3410;
                                float _3423 = (fma(_2580, _3303.z, fma(_2579, _3303.y, _3303.x * _2578)) + _3303.w) / _3364;
                                float _3424 = (fma(_2580, _3318.z, fma(_2579, _3318.y, _3318.x * _2578)) + _3318.w) / _3364;
                                float _3428 = 1.0 - dot(vec2(_3423, _3424), vec2(_3423, _3424));
                                float _4570 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3430 = _3429 * (((isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0))) * _3406) / ((_3419 * 0.699999988079071044921875) + 1.0));
                                float _3442 = exp2(log2(1.0 / ((_3419 * 3.5) + 5.0)) * 0.25);
                                float _3443 = 1.0 - _886;
                                float _3450 = sqrt(1.0 - ((1.0 - (_3443 * _3443)) * (1.0 - (_3442 * _3442))));
                                float _3451 = _3450 * _3450;
                                float _3452 = _3451 * _3451;
                                float _3453 = _3399 - _2872;
                                float _3454 = _3400 - _2873;
                                float _3455 = _3401 - _2874;
                                float _3459 = inversesqrt(dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455)));
                                float _3463 = dot(vec3(_826, _829, _832), vec3((-0.0) - _2872, (-0.0) - _2873, (-0.0) - _2874));
                                float _4581 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3466 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3467 = dot(vec3(_826, _829, _832), vec3(_3459 * _3453, _3459 * _3454, _3459 * _3455));
                                float _4592 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3474 = ((_3470 * _3470) * (_3452 + (-1.0))) + 1.0;
                                float _3475 = _3412 * _3451;
                                float _3476 = _3475 * _3475;
                                float _3482 = ((1.0 - _3476) * dot(vec3(_826, _829, _832), vec3(_3399, _3400, _3401))) + _3476;
                                float _4603 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3484 = 1.0 - _3451;
                                float _3494 = (0.5 / (((_3483 * ((_3466 * _3484) + _3451)) + 9.9999999392252902907785028219223e-09) + (((_3483 * _3484) + _3451) * _3466))) * _3483;
                                float _4614 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3504 = (_3429 * _3406) * (((_3452 * 3.1415927410125732421875) * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) / ((_3474 * _3474) * ((_3419 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3430 * _3276.y;
                                frontier_phi_83_pred_1 = _3430 * _3276.x;
                                frontier_phi_83_pred_2 = _3504 * _3288.z;
                                frontier_phi_83_pred_3 = _3504 * _3288.y;
                                frontier_phi_83_pred_4 = _3504 * _3288.x;
                                frontier_phi_83_pred_5 = _3430 * _3276.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3512 = frontier_phi_83_pred;
                            _3511 = frontier_phi_83_pred_1;
                            _3510 = frontier_phi_83_pred_2;
                            _3509 = frontier_phi_83_pred_3;
                            _3508 = frontier_phi_83_pred_4;
                            _3513 = frontier_phi_83_pred_5;
                            _3218 = _3511 + _3231;
                            _3219 = _3512 + _3232;
                            _3220 = _3513 + _3233;
                            _3215 = _3508 + _3228;
                            _3216 = _3509 + _3229;
                            _3217 = _3510 + _3230;
                            if (_3235 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3235;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3220;
                        frontier_phi_77_pred_1 = _3219;
                        frontier_phi_77_pred_2 = _3218;
                        frontier_phi_77_pred_3 = _3217;
                        frontier_phi_77_pred_4 = _3216;
                        frontier_phi_77_pred_5 = _3215;
                    }
                    _2857 = frontier_phi_77_pred;
                    _2855 = frontier_phi_77_pred_1;
                    _2853 = frontier_phi_77_pred_2;
                    _2851 = frontier_phi_77_pred_3;
                    _2849 = frontier_phi_77_pred_4;
                    _2847 = frontier_phi_77_pred_5;
                    uint _3013 = _3012 + 1u;
                    if (_3013 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3006 = _2847;
                        _3007 = _2849;
                        _3008 = _2851;
                        _3009 = _2853;
                        _3010 = _2855;
                        _3011 = _2857;
                        _3012 = _3013;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2851;
                frontier_phi_58_59_ladder_1 = _2857;
                frontier_phi_58_59_ladder_2 = _2855;
                frontier_phi_58_59_ladder_3 = _2853;
                frontier_phi_58_59_ladder_4 = _2849;
                frontier_phi_58_59_ladder_5 = _2847;
            }
            else
            {
                frontier_phi_58_59_ladder = _2729;
                frontier_phi_58_59_ladder_1 = _2735;
                frontier_phi_58_59_ladder_2 = _2733;
                frontier_phi_58_59_ladder_3 = _2731;
                frontier_phi_58_59_ladder_4 = _2727;
                frontier_phi_58_59_ladder_5 = _2725;
            }
            _2846 = frontier_phi_58_59_ladder_5;
            _2848 = frontier_phi_58_59_ladder_4;
            _2850 = frontier_phi_58_59_ladder;
            _2852 = frontier_phi_58_59_ladder_3;
            _2854 = frontier_phi_58_59_ladder_2;
            _2856 = frontier_phi_58_59_ladder_1;
        }
        float _2861 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2637 = (_2861 * _2852) + _2089;
        _2639 = (_2861 * _2854) + _2091;
        _2641 = (_2861 * _2856) + _2093;
        _2643 = ((_2846 * 0.039999999105930328369140625) * _2861) + _2422;
        _2645 = ((_2848 * 0.039999999105930328369140625) * _2861) + _2424;
        _2647 = ((_2850 * 0.039999999105930328369140625) * _2861) + _2426;
    }
    else
    {
        _2637 = _2089;
        _2639 = _2091;
        _2641 = _2093;
        _2643 = _2422;
        _2645 = _2424;
        _2647 = _2426;
    }
    float _4630 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4641 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4652 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2664 = ((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2637 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _870))) + ((_2643 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1706)) * cbPerFrame._m0[3u].x);
    float _2665 = ((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2639 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _870))) + ((_2645 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1706)) * cbPerFrame._m0[3u].x);
    float _2666 = ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2641 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _870))) + ((_2647 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1706)) * cbPerFrame._m0[3u].x);
    uint _2667 = _275 + 6u;
    float _2675 = _807 / cbSceneParam._m0[86u].x;
    float _2676 = _808 / cbSceneParam._m0[86u].y;
    vec4 _2690 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2675, _2676, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2692 = _2690.x;
    float _2693 = _2690.y;
    float _2694 = _2690.z;
    float _2695 = _2690.w;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2750 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2751 = _2750 / _729;
        float _2762 = _2751 * _780;
        float _2763 = _781 * _2751;
        float _2764 = (-0.0) - _2763;
        float _2766 = _2751 * _782;
        float _2768 = (cbSceneParam._m0[77u].w * _2764) / _2750;
        float _2769 = _2768 + cbSceneParam._m0[79u].w;
        float _2770 = cbSceneParam._m0[79u].w - _2763;
        float _2776 = sqrt(((_2762 * _2762) + (_2763 * _2763)) + (_2766 * _2766));
        float _2779 = (1.0 - (cbSceneParam._m0[77u].w / _2750)) * _2776;
        float _2784 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2786 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2963;
        if (abs((_2764 - _2768) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2963 = ((((_2769 > 0.0) ? exp2(_2784 * _2769) : (2.0 - exp2(_2786 * _2769))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2779;
        }
        else
        {
            float _2907 = 1.0 / cbSceneParam._m0[80u].x;
            float _2908 = isnan(_2770) ? _2769 : (isnan(_2769) ? _2770 : max(_2769, _2770));
            float _2909 = isnan(_2770) ? _2769 : (isnan(_2769) ? _2770 : min(_2769, _2770));
            float _2918 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : min(_2908, 0.0));
            float _2919 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : min(_2909, 0.0));
            _2963 = ((abs(_2776 / _2764) * cbSceneParam._m0[80u].y) * ((((_2918 - _2919) * 2.0) - ((exp2(_2784 * (isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0)))) - exp2(_2784 * (isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0))))) * _2907)) - ((exp2(_2786 * _2918) - exp2(_2786 * _2919)) * _2907))) + (_2779 * cbSceneParam._m0[80u].z);
        }
        vec4 _2965 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2675, _2676, 1.0), 0.0);
        float _2974 = exp2((_2963 * (-1.44269502162933349609375)) * (1.0 - _2965.w));
        float _2975 = log2(_2974);
        float _2991 = log2(_2695);
        _2788 = (exp2(_2991 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2975 * cbSceneParam._m0[78u].x)) * _2965.x) / cbSceneParam._m0[78u].x)) + _2692;
        _2790 = (exp2(_2991 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2975 * cbSceneParam._m0[78u].y)) * _2965.y) / cbSceneParam._m0[78u].y)) + _2693;
        _2792 = (exp2(_2991 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2975 * cbSceneParam._m0[78u].z)) * _2965.z) / cbSceneParam._m0[78u].z)) + _2694;
        _2794 = _2974 * _2695;
    }
    else
    {
        _2788 = _2692;
        _2790 = _2693;
        _2792 = _2694;
        _2794 = _2695;
    }
    bool _3001;
    vec4 _2804;
    vec4 _2826;
    float _2828;
    float _2832;
    float _2833;
    float _2834;
    float _2835;
    bool _2845;
    for (;;)
    {
        _2804 = cbMatDynParam._m0[0u];
        float _2806 = roundEven(_2804.y);
        bool _2807 = _2806 == 3.0;
        float _2808 = log2(_2794);
        float _2815 = exp2(_2808 * cbSceneParam._m0[78u].x) * _2664;
        float _2816 = exp2(_2808 * cbSceneParam._m0[78u].y) * _2665;
        float _2817 = exp2(_2808 * cbSceneParam._m0[78u].z) * _2666;
        float _2824 = _796 + (-0.5);
        _2826 = cbMtdParam._m0[1u];
        _2828 = _2826.y * _2824;
        float _2831 = (_2806 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2832 = _2831 * (_2807 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2788)));
        _2833 = _2831 * (_2807 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2790)));
        _2834 = _2831 * (_2807 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2792)));
        _2835 = _2824 * 0.999000012874603271484375;
        _2845 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2845)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _2835) < 0.5)
            {
                _3001 = true;
                break;
            }
        }
        uint _2942 = _845 + uint(_2804.w);
        if ((cbInstanceData._m0[_2942].w < 1.0) && ((cbInstanceData._m0[_2942].w + _2835) < 0.5))
        {
            _3001 = true;
            break;
        }
        if ((_2828 + 1.0) < _2826.x)
        {
            _3001 = true;
            break;
        }
        _3001 = false;
        break;
    }
    float _3206;
    if (_3001)
    {
        discard_state = true;
        _3206 = 0.0;
    }
    else
    {
        _3206 = cbInstanceData._m0[_2667].w;
    }
    SV_Target.x = _2832;
    SV_Target.y = _2833;
    SV_Target.z = _2834;
    SV_Target.w = _3206;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2667].w;
    discard_exit();
}


