#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1272;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _304.x * cbMtdParam._m0[11u].x;
    float _310 = _304.y * cbMtdParam._m0[11u].y;
    float _311 = _304.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _350.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[24u].z) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3575 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _426 = (_419 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _427 = (_419 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _428 = (_419 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _477 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _491 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _350.y) * 2.0) - ((((_467 - _477) * cbMtdParam._m0[24u].z) + _477) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3586 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _505 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _280.x) * ((_492 * ((_445.x * cbMtdParam._m0[13u].x) - _426)) + _426);
    float _508 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _280.y) * ((_492 * ((_445.y * cbMtdParam._m0[13u].y) - _427)) + _427);
    float _511 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _280.z) * ((_492 * ((_445.z * cbMtdParam._m0[13u].z) - _428)) + _428);
    vec4 _530 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _569 = _567.x;
    float _570 = _567.y;
    float _571 = _567.z;
    float _578 = ((_550.x - _569) * _419) + _569;
    float _579 = ((_550.y - _570) * _419) + _570;
    float _580 = ((_550.z - _571) * _419) + _571;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _605 = ((_592.z - _580) * _492) + _580;
    float _608 = ((((_592.x - _578) * _492) + _578) * 2.0) + (-1.0);
    float _610 = ((((_592.y - _579) * _492) + _579) * 2.0) + (-1.0);
    float _611 = dot(vec2(_608, _610), vec2(_608, _610));
    float _3597 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _616 = sqrt(1.0 - (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _657 = _655.x;
    float _658 = 1.0 - _657;
    float _671 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_657 - _658) * cbMtdParam._m0[24u].w) + _658) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3608 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _672 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _679 = (_672 * ((_530.x * cbMtdParam._m0[18u].x) - _505)) + _505;
    float _680 = (_672 * ((_530.y * cbMtdParam._m0[18u].y) - _508)) + _508;
    float _681 = (_672 * ((_530.z * cbMtdParam._m0[18u].z) - _511)) + _511;
    float _685 = (cbMtdParam._m0[19u].w * (_630.z - _605)) + _605;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _705 = (_698.x * 2.0) + (-1.0);
    float _706 = (_698.y * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _3619 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _715 = (_672 * (_698.z - _685)) + _685;
    float _718 = (((_630.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _608;
    float _719 = (((_630.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _610;
    float _731 = (((_705 - _718) + (cbMtdParam._m0[21u].x * _718)) * _672) + _718;
    float _732 = (((_706 - _719) + (cbMtdParam._m0[21u].x * _719)) * _672) + _719;
    float _733 = (_672 * (sqrt(1.0 - (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) - _616)) + _616;
    float _737 = cbMtdParam._m0[22u].x + _630.w;
    float _740 = fma(_733, _227 * NORMAL.x, fma(_732, _234 * TANGENT.x, (_220 * _212) * _731));
    float _743 = fma(_733, _227 * NORMAL.y, fma(_732, _234 * TANGENT.y, (_220 * _213) * _731));
    float _746 = fma(_733, _227 * NORMAL.z, fma(_732, _234 * TANGENT.z, (_220 * _214) * _731));
    float _750 = inversesqrt(dot(vec3(_740, _743, _746), vec3(_740, _743, _746)));
    float _751 = _750 * _740;
    float _752 = _750 * _743;
    float _753 = _750 * _746;
    float _3630 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _754 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3652 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _3663 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _3674 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _772 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _823 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _813);
    float _824 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _813);
    float _825 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _813);
    float _829 = inversesqrt(dot(vec3(_823, _824, _825), vec3(_823, _824, _825)));
    float _830 = _823 * _829;
    float _831 = _824 * _829;
    float _832 = _825 * _829;
    float _838 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _839 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _857 = fma(_753, cbSceneParam._m0[5u].z, fma(_752, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _751));
    float _860 = fma(_753, cbSceneParam._m0[6u].z, fma(_752, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _751));
    float _863 = fma(_753, cbSceneParam._m0[7u].z, fma(_752, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _751));
    uint _877 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _883 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_877].x;
    float _884 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * cbInstanceData._m0[_877].y;
    float _885 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * cbInstanceData._m0[_877].z;
    float _3685 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    vec4 _897 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _838, cbSceneParam._m0[86u].y * _839));
    float _901 = ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * TEXCOORD_5.w) * _897.x;
    float _902 = dot(vec3(_751, _752, _753), vec3(_830, _831, _832));
    float _905 = _902 * 2.0;
    float _909 = (_905 * _751) - _830;
    float _910 = (_905 * _752) - _831;
    float _911 = (_905 * _753) - _832;
    float _915 = abs(dot(vec3(_830, _831, _832), vec3(_751, _752, _753)));
    float _3718 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _917 = sqrt(_754);
    float _930 = exp2((_917 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_917 * 3.0));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1271;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _996 = fma(_970, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _962));
        float _1000 = fma(_970, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _962));
        float _1004 = fma(_970, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _962));
        float _1029 = _962 + _751;
        float _1030 = _966 + _752;
        float _1031 = _970 + _753;
        float _1041 = fma(_1031, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029)) - _996;
        float _1042 = fma(_1031, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029)) - _1000;
        float _1043 = fma(_1031, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029)) - _1004;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_996 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1000 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[34u].z) + ((((((_1004 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1099 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1065.x + (-0.5));
        float _1101 = _1099 * (_1065.y + (-0.5));
        float _1102 = _1099 * (_1065.z + (-0.5));
        float _1109 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1072.x + (-0.5));
        float _1111 = _1109 * (_1072.y + (-0.5));
        float _1112 = _1109 * (_1072.z + (-0.5));
        float _1119 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1079.x + (-0.5));
        float _1121 = _1119 * (_1079.y + (-0.5));
        float _1122 = _1119 * (_1079.z + (-0.5));
        float _1129 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1086.x + (-0.5));
        float _1131 = _1129 * (_1086.y + (-0.5));
        float _1132 = _1129 * (_1086.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1153 = (dot(vec3(_751, _752, _753), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1163 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3766 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1165 + 1.0))) + _1170) * _1133;
        float _1180 = _1101 * 0.5;
        float _1181 = _1111 * 0.5;
        float _1182 = _1121 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_751, _752, _753), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3799 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1207 + 1.0))) + _1212) * _1134;
        float _1222 = _1102 * 0.5;
        float _1223 = _1112 * 0.5;
        float _1224 = _1122 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_751, _752, _753), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3832 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1249 + 1.0))) + _1254) * _1135;
        _1271 = _1102;
        _1273 = _1101;
        _1274 = _1100;
        _1275 = _1112;
        _1276 = _1111;
        _1277 = _1110;
        _1278 = _1122;
        _1279 = _1121;
        _1280 = _1120;
        _1281 = _1135;
        _1282 = _1134;
        _1283 = _1133;
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
    }
    else
    {
        _1271 = _1272;
        _1273 = _1272;
        _1274 = _1272;
        _1275 = _1272;
        _1276 = _1272;
        _1277 = _1272;
        _1278 = _1272;
        _1279 = _1272;
        _1280 = _1272;
        _1281 = _1272;
        _1282 = _1272;
        _1283 = _1272;
        _1284 = 0.0;
        _1285 = 0.0;
        _1286 = 0.0;
    }
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1310 = fma(_970, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _962));
        float _1314 = fma(_970, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _962));
        float _1318 = fma(_970, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _962));
        float _1341 = _962 + _751;
        float _1342 = _966 + _752;
        float _1343 = _970 + _753;
        float _1353 = fma(_1343, cbModelParam._m0[30u].z, fma(_1342, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341)) - _1310;
        float _1354 = fma(_1343, cbModelParam._m0[31u].z, fma(_1342, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341)) - _1314;
        float _1355 = fma(_1343, cbModelParam._m0[32u].z, fma(_1342, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341)) - _1318;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1310 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1314 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[35u].z) + ((((((_1318 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1409 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1376.x + (-0.5));
        float _1411 = _1409 * (_1376.y + (-0.5));
        float _1412 = _1409 * (_1376.z + (-0.5));
        float _1419 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1383.x + (-0.5));
        float _1421 = _1419 * (_1383.y + (-0.5));
        float _1422 = _1419 * (_1383.z + (-0.5));
        float _1429 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1390.x + (-0.5));
        float _1431 = _1429 * (_1390.y + (-0.5));
        float _1432 = _1429 * (_1390.z + (-0.5));
        float _1439 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1397.x + (-0.5));
        float _1441 = _1439 * (_1397.y + (-0.5));
        float _1442 = _1439 * (_1397.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_751, _752, _753), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _3895 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1473 + 1.0))) + _1478) * _1443;
        float _1488 = _1411 * 0.5;
        float _1489 = _1421 * 0.5;
        float _1490 = _1431 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_751, _752, _753), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _3928 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1515 + 1.0))) + _1520) * _1444;
        float _1530 = _1412 * 0.5;
        float _1531 = _1422 * 0.5;
        float _1532 = _1432 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_751, _752, _753), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _3961 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1557 + 1.0))) + _1562) * _1445;
        _1579 = _1412;
        _1580 = _1411;
        _1581 = _1410;
        _1582 = _1422;
        _1583 = _1421;
        _1584 = _1420;
        _1585 = _1432;
        _1586 = _1431;
        _1587 = _1430;
        _1588 = _1445;
        _1589 = _1444;
        _1590 = _1443;
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1272;
        _1580 = _1272;
        _1581 = _1272;
        _1582 = _1272;
        _1583 = _1272;
        _1584 = _1272;
        _1585 = _1272;
        _1586 = _1272;
        _1587 = _1272;
        _1588 = _1272;
        _1589 = _1272;
        _1590 = _1272;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1284)) + _1284;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1285)) + _1285;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1286)) + _1286;
    float _1626 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1603));
    float _1647 = _909 * 0.5;
    float _1648 = _910 * 0.5;
    float _1649 = _911 * 0.5;
    float _1650 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1653 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1656 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1690;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1663 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1271, _1275, _1278, _1281));
        float _1667 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1671 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1678 = dot(vec4(cbModelParam._m0[39u]), vec4(_1647, _1648, _1649, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1701;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1692 = dot(vec4(cbModelParam._m0[40u]), vec4(_1647, _1648, _1649, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1705 = (_1701 * cbModelParam._m0[1u].x) + (_1690 * (1.0 - cbModelParam._m0[1u].x));
    float _1715 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _754);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1715 : min(cbModelParam._m0[25u].z, _1715));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1763 = fma(_970, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _962)) + cbModelParam._m0[13u].w;
        float _1767 = fma(_970, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _962)) + cbModelParam._m0[14u].w;
        float _1771 = fma(_970, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _962)) + cbModelParam._m0[15u].w;
        float _1774 = fma(_911, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909));
        float _1777 = fma(_911, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909));
        float _1780 = fma(_911, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909));
        float _1808;
        if (_1774 > 0.0)
        {
            _1808 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1808 = frontier_phi_14_12_ladder;
        }
        float _2008;
        if (_1777 > 0.0)
        {
            _2008 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2008 = frontier_phi_23_19_ladder;
        }
        float _2251;
        if (_1780 > 0.0)
        {
            _2251 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2251 = frontier_phi_35_30_ladder;
        }
        float _2253 = isnan(_2008) ? _1808 : (isnan(_1808) ? _2008 : min(_1808, _2008));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1774) + _1763;
        float _2259 = (_2254 * _1777) + _1767;
        float _2260 = (_2254 * _1780) + _1771;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2261;
        float _2265 = _2261 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 > _2265) || ((_2259 < _2263) || ((_2258 < _2263) || (_2258 > _2265))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2260, cbModelParam._m0[9u].z, fma(_2259, cbModelParam._m0[9u].y, _2258 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2260, cbModelParam._m0[10u].z, fma(_2259, cbModelParam._m0[10u].y, _2258 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2260, cbModelParam._m0[11u].z, fma(_2259, cbModelParam._m0[11u].y, _2258 * cbModelParam._m0[11u].x))), _1716);
            frontier_phi_13_35_ladder = _2384.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2384.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2384.x * cbModelParam._m0[1u].y;
        }
        _1796 = frontier_phi_13_35_ladder_2;
        _1798 = frontier_phi_13_35_ladder_1;
        _1800 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_909, _910, _911), _1716);
        _1796 = _1784.x * cbModelParam._m0[1u].y;
        _1798 = _1784.y * cbModelParam._m0[1u].y;
        _1800 = _1784.z * cbModelParam._m0[1u].y;
    }
    float _1804 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _754);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1804 : min(cbModelParam._m0[25u].w, _1804));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1858 = fma(_970, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _962)) + cbModelParam._m0[21u].w;
        float _1862 = fma(_970, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _962)) + cbModelParam._m0[22u].w;
        float _1866 = fma(_970, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _962)) + cbModelParam._m0[23u].w;
        float _1869 = fma(_911, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909));
        float _1872 = fma(_911, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909));
        float _1875 = fma(_911, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909));
        float _2013;
        if (_1869 > 0.0)
        {
            _2013 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2013 = frontier_phi_25_21_ladder;
        }
        float _2278;
        if (_1872 > 0.0)
        {
            _2278 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2278 = frontier_phi_37_32_ladder;
        }
        float _2483;
        if (_1875 > 0.0)
        {
            _2483 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2483 = frontier_phi_46_43_ladder;
        }
        float _2485 = isnan(_2278) ? _2013 : (isnan(_2013) ? _2278 : min(_2013, _2278));
        float _2486 = isnan(_2483) ? _2485 : (isnan(_2485) ? _2483 : min(_2485, _2483));
        float _2490 = (_2486 * _1869) + _1858;
        float _2491 = (_2486 * _1872) + _1862;
        float _2492 = (_2486 * _1875) + _1866;
        float _2493 = _2486 * 9.9999997473787516355514526367188e-05;
        float _2494 = (-1.0) - _2493;
        float _2496 = _2493 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2492 > _2496) || ((_2492 < _2494) || ((_2491 > _2496) || ((_2491 < _2494) || ((_2490 < _2494) || (_2490 > _2496))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2691 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2492, cbModelParam._m0[17u].z, fma(_2491, cbModelParam._m0[17u].y, _2490 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2492, cbModelParam._m0[18u].z, fma(_2491, cbModelParam._m0[18u].y, _2490 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2492, cbModelParam._m0[19u].z, fma(_2491, cbModelParam._m0[19u].y, _2490 * cbModelParam._m0[19u].x))), _1805);
            frontier_phi_22_46_ladder = _2691.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2691.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2691.x * cbModelParam._m0[1u].z;
        }
        _1894 = frontier_phi_22_46_ladder_2;
        _1896 = frontier_phi_22_46_ladder_1;
        _1898 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_909, _910, _911), _1805);
        _1894 = _1878.x * cbModelParam._m0[1u].z;
        _1896 = _1878.y * cbModelParam._m0[1u].z;
        _1898 = _1878.z * cbModelParam._m0[1u].z;
    }
    float _1910 = ((((1.0 - _930) * ((_917 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_930 * _917)) * _901;
    float _1911 = _1910 * ((cbModelParam._m0[1u].w * (_1894 - _1796)) + _1796);
    float _1912 = _1910 * ((cbModelParam._m0[1u].w * (_1896 - _1798)) + _1798);
    float _1913 = _1910 * ((cbModelParam._m0[1u].w * (_1898 - _1800)) + _1800);
    float _1916 = fma(_1913, cbSceneParam._m0[89u].z, fma(_1912, cbSceneParam._m0[89u].y, _1911 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1913, cbSceneParam._m0[90u].z, fma(_1912, cbSceneParam._m0[90u].y, _1911 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1913, cbSceneParam._m0[91u].z, fma(_1912, cbSceneParam._m0[91u].y, _1911 * cbSceneParam._m0[91u].x));
    uvec4 _1932 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1934 = _1932.x * 14u;
    uint _1935 = _1934 + 13u;
    float _1942 = _901 + (-1.0);
    float _1947 = (cbLight._m0[_1935].x * _1942) + 1.0;
    float _1948 = (cbLight._m0[_1935].y * _1942) + 1.0;
    float _1949 = (cbLight._m0[_1935].z * _1942) + 1.0;
    float _1950 = (cbLight._m0[_1935].w * _1942) + 1.0;
    uint _1951 = _1934 + 5u;
    float _1957 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1961 = _1934 + 4u;
    float _1967 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1971 = _1934 | 1u;
    float _1982 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_751, _752, _753));
    float _1985 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_751, _752, _753));
    float _4097 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _4108 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1990 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.3183098733425140380859375;
    float _1992 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.3183098733425140380859375;
    float _1999 = ((cbLight._m0[_1951].x * _1957) * _1992) + ((cbLight._m0[_1961].x * _1967) * _1990);
    float _2000 = ((_1957 * cbLight._m0[_1951].y) * _1992) + ((_1967 * cbLight._m0[_1961].y) * _1990);
    float _2001 = ((_1957 * cbLight._m0[_1951].z) * _1992) + ((_1967 * cbLight._m0[_1961].z) * _1990);
    uvec4 _2005 = floatBitsToUint(cbLight._m0[_1934 + 12u]);
    bool _2007 = _2005.x == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_2007)
    {
        _2018 = _1999;
        _2020 = _2000;
        _2022 = _2001;
    }
    else
    {
        uint _2026 = _1934 + 6u;
        float _2042 = (dot(vec3(cbLight._m0[_1934 + 2u].xyz), vec3(_751, _752, _753)) * 0.5) + 0.5;
        float _2043 = _2042 * _2042;
        float _4119 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2044 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2045 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2018 = (((cbLight._m0[_2026].x * 0.3183098733425140380859375) * _2044) * _2045) + _1999;
        _2020 = (((cbLight._m0[_2026].y * 0.3183098733425140380859375) * _2044) * _2045) + _2000;
        _2022 = (((cbLight._m0[_2026].z * 0.3183098733425140380859375) * _2044) * _2045) + _2001;
    }
    bool _2025 = _2005.y == 0u;
    float _2063;
    float _2065;
    float _2067;
    if (_2025)
    {
        _2063 = _2018;
        _2065 = _2020;
        _2067 = _2022;
    }
    else
    {
        uint _2222 = _1934 + 7u;
        float _2238 = (dot(vec3(cbLight._m0[_1934 + 3u].xyz), vec3(_751, _752, _753)) * 0.5) + 0.5;
        float _2239 = _2238 * _2238;
        float _4135 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2240 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2241 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2063 = (((cbLight._m0[_2222].x * 0.3183098733425140380859375) * _2240) * _2241) + _2018;
        _2065 = (((cbLight._m0[_2222].y * 0.3183098733425140380859375) * _2240) * _2241) + _2020;
        _2067 = (((cbLight._m0[_2222].z * 0.3183098733425140380859375) * _2240) * _2241) + _2022;
    }
    uint _2070 = _1934 + 8u;
    float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _754) * 0.949999988079071044921875);
    float _2084 = _2083 * _2083;
    float _2085 = cbLight._m0[_1934].x + _830;
    float _2086 = cbLight._m0[_1934].y + _831;
    float _2087 = cbLight._m0[_1934].z + _832;
    float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
    float _2092 = _2091 * _2085;
    float _2093 = _2091 * _2086;
    float _2094 = _2091 * _2087;
    float _2095 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_1934].xyz));
    float _4151 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _4162 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _2099 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2100 = dot(vec3(_751, _752, _753), vec3(_2092, _2093, _2094));
    float _4173 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2092, _2093, _2094));
    float _4184 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2084 * _2084;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2124 = 1.0 - _2084;
    float _2135 = (0.5 / (((_2099 * ((_2098 * _2124) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2124) + _2084) * _2098))) * _2098;
    float _4195 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2137 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    uint _2148 = _1934 + 9u;
    float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _754) * 0.949999988079071044921875);
    float _2160 = _2159 * _2159;
    float _2161 = cbLight._m0[_1971].x + _830;
    float _2162 = cbLight._m0[_1971].y + _831;
    float _2163 = cbLight._m0[_1971].z + _832;
    float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
    float _2168 = _2167 * _2161;
    float _2169 = _2167 * _2162;
    float _2170 = _2167 * _2163;
    float _2171 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_1971].xyz));
    float _4206 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2175 = dot(vec3(_751, _752, _753), vec3(_2168, _2169, _2170));
    float _4217 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2168, _2169, _2170));
    float _4228 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2160 * _2160;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2196 = (exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2197 = 1.0 - _2160;
    float _2207 = (0.5 / (((_2099 * ((_2174 * _2197) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2197) + _2160) * _2174))) * _2174;
    float _4239 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2209 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    float _2219 = (((_2196 * cbLight._m0[_2148].x) * _2209) * _1957) + (((_2123 * cbLight._m0[_2070].x) * _2137) * _1967);
    float _2220 = (((_2196 * cbLight._m0[_2148].y) * _2209) * _1957) + (((_2123 * cbLight._m0[_2070].y) * _2137) * _1967);
    float _2221 = (((_2196 * cbLight._m0[_2148].z) * _2209) * _1957) + (((_2123 * cbLight._m0[_2070].z) * _2137) * _1967);
    float _2283;
    float _2285;
    float _2287;
    if (_2007)
    {
        _2283 = _2219;
        _2285 = _2220;
        _2287 = _2221;
    }
    else
    {
        uint _2289 = _1934 + 2u;
        uint _2293 = _1934 + 10u;
        float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _754) * 0.949999988079071044921875);
        float _2308 = _2307 * _2307;
        float _2309 = cbLight._m0[_2289].x + _830;
        float _2310 = cbLight._m0[_2289].y + _831;
        float _2311 = cbLight._m0[_2289].z + _832;
        float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
        float _2316 = _2315 * _2309;
        float _2317 = _2315 * _2310;
        float _2318 = _2315 * _2311;
        float _2319 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2289].xyz));
        float _4250 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2323 = dot(vec3(_751, _752, _753), vec3(_2316, _2317, _2318));
        float _4261 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2327 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2316, _2317, _2318));
        float _4272 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2331 = _2308 * _2308;
        float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
        float _2344 = (exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2345 = 1.0 - _2308;
        float _2355 = (0.5 / (((_2099 * ((_2322 * _2345) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2345) + _2308) * _2322))) * _2322;
        float _4283 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2357 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
        float _2358 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2283 = (((_2344 * cbLight._m0[_2293].x) * _2357) * _2358) + _2219;
        _2285 = (((_2344 * cbLight._m0[_2293].y) * _2357) * _2358) + _2220;
        _2287 = (((_2344 * cbLight._m0[_2293].z) * _2357) * _2358) + _2221;
    }
    float _2393;
    float _2395;
    float _2397;
    if (_2025)
    {
        _2393 = _2283;
        _2395 = _2285;
        _2397 = _2287;
    }
    else
    {
        uint _2404 = _1934 + 3u;
        uint _2408 = _1934 + 11u;
        float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2404].w)) * _754) * 0.949999988079071044921875);
        float _2423 = _2422 * _2422;
        float _2424 = cbLight._m0[_2404].x + _830;
        float _2425 = cbLight._m0[_2404].y + _831;
        float _2426 = cbLight._m0[_2404].z + _832;
        float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
        float _2431 = _2430 * _2424;
        float _2432 = _2430 * _2425;
        float _2433 = _2430 * _2426;
        float _2434 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2404].xyz));
        float _4299 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2438 = dot(vec3(_751, _752, _753), vec3(_2431, _2432, _2433));
        float _4310 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2442 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_2431, _2432, _2433));
        float _4321 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2446 = _2423 * _2423;
        float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
        float _2459 = (exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2460 = 1.0 - _2423;
        float _2470 = (0.5 / (((_2099 * ((_2437 * _2460) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2460) + _2423) * _2437))) * _2437;
        float _4332 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2472 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
        float _2473 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2393 = (((_2459 * cbLight._m0[_2408].x) * _2472) * _2473) + _2283;
        _2395 = (((_2459 * cbLight._m0[_2408].y) * _2472) * _2473) + _2285;
        _2397 = (((_2459 * cbLight._m0[_2408].z) * _2472) * _2473) + _2287;
    }
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    if (_1932.y == 0u)
    {
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2549 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2548;
        float _2550 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2548;
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2548;
        uvec4 _2563 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2564 = _2563.x;
        uint _2575 = uint((float(_2563.y) * floor(float(uint(cbSceneParam._m0[85u].y * _839) / _2564))) + floor(float(uint(cbSceneParam._m0[85u].x * _838) / _2564)));
        float _2585 = (log2(_2551 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2586 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        uint _2589 = uint(isnan(14.0) ? _2586 : (isnan(_2586) ? 14.0 : min(_2586, 14.0)));
        uvec4 _2594 = texelFetch(g_lightClusterGridBuffer, int(((_2589 << 2u) + (_2575 << 6u)) >> 2u));
        uint _2595 = _2594.x;
        uint _2596 = _2563.z;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        if (((((1u << ((_2596 >> 4u) & 15u)) + 4294967295u) & _2595) == 0u) || ((_2596 & 240u) == 0u))
        {
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
        }
        else
        {
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            uint _2847 = 0u;
            uint _2856;
            bool _2857;
            for (;;)
            {
                _2856 = texelFetch(g_lightClassification, int((((_2589 << 5u) + (_2575 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                _2857 = _2856 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2857)
                {
                    frontier_phi_61_pred = _2841;
                    frontier_phi_61_pred_1 = _2846;
                    frontier_phi_61_pred_2 = _2845;
                    frontier_phi_61_pred_3 = _2844;
                    frontier_phi_61_pred_4 = _2843;
                    frontier_phi_61_pred_5 = _2842;
                }
                else
                {
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    uint _2971;
                    _2965 = _2841;
                    _2966 = _2842;
                    _2967 = _2843;
                    _2968 = _2844;
                    _2969 = _2845;
                    _2970 = _2846;
                    _2971 = _2856;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    for (;;)
                    {
                        uint _2975 = uint(findLSB(_2971)) + (_2847 << 5u);
                        uint _2972 = (_2971 + 4294967295u) & _2971;
                        uint _2977 = _2975 * 48u;
                        vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 3u)).x));
                        uint _2997 = (_2975 * 48u) + 4u;
                        vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 3u)).x));
                        uint _3016 = (_2975 * 48u) + 8u;
                        vec3 _3027 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x));
                        float _3031 = _2991.x - _2549;
                        float _3032 = _2991.y - _2550;
                        float _3033 = _2991.z - _2551;
                        float _3034 = dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033));
                        float _3037 = inversesqrt(_3034);
                        float _3038 = _3037 * _3031;
                        float _3039 = _3037 * _3032;
                        float _3040 = _3037 * _3033;
                        float _3041 = dot(vec3(_857, _860, _863), vec3(_3038, _3039, _3040));
                        float _3046 = 1.0 - (_3034 * _2991.w);
                        float _4358 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3047 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3048 = sqrt(_3034) * _3010.w;
                        float _3051 = 1.39999997615814208984375 / (_3048 + 1.39999997615814208984375);
                        float _3052 = _3051 * _3051;
                        float _3055 = ((1.0 - _3052) * _3041) + _3052;
                        float _3058 = _3048 * _3048;
                        float _3062 = ((isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))) * _3047) / ((_3058 * 0.699999988079071044921875) + 1.0);
                        float _3066 = (-0.0) - _2549;
                        float _3067 = (-0.0) - _2550;
                        float _3068 = (-0.0) - _2551;
                        float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
                        float _3073 = _3072 * _3066;
                        float _3074 = _3072 * _3067;
                        float _3075 = _3072 * _3068;
                        float _3083 = exp2(log2(1.0 / ((_3058 * 3.5) + 5.0)) * 0.25);
                        float _3084 = 1.0 - _917;
                        float _3091 = sqrt(1.0 - ((1.0 - (_3084 * _3084)) * (1.0 - (_3083 * _3083))));
                        float _3092 = _3091 * _3091;
                        float _3093 = _3092 * _3092;
                        float _3094 = _3073 + _3038;
                        float _3095 = _3074 + _3039;
                        float _3096 = _3075 + _3040;
                        float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                        float _3104 = dot(vec3(_857, _860, _863), vec3(_3073, _3074, _3075));
                        float _4374 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3108 = dot(vec3(_857, _860, _863), vec3(_3100 * _3094, _3100 * _3095, _3100 * _3096));
                        float _4385 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3111 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3115 = ((_3111 * _3111) * (_3093 + (-1.0))) + 1.0;
                        float _3116 = _3051 * _3092;
                        float _3117 = _3116 * _3116;
                        float _3120 = ((1.0 - _3117) * _3041) + _3117;
                        float _4396 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3121 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3122 = 1.0 - _3092;
                        float _3132 = (0.5 / (((_3121 * ((_3107 * _3122) + _3092)) + 9.9999999392252902907785028219223e-09) + (((_3121 * _3122) + _3092) * _3107))) * _3121;
                        float _4407 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3143 = (((_3093 * 3.1415927410125732421875) * (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) / ((_3115 * _3115) * ((_3058 * 2.1991131305694580078125) + 3.141590118408203125))) * _3047;
                        _2900 = (_3062 * _3010.x) + _2968;
                        _2901 = (_3062 * _3010.y) + _2969;
                        _2902 = (_3062 * _3010.z) + _2970;
                        _2897 = (_3143 * _3027.x) + _2965;
                        _2898 = (_3143 * _3027.y) + _2966;
                        _2899 = (_3143 * _3027.z) + _2967;
                        if (_2972 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2965 = _2897;
                            _2966 = _2898;
                            _2967 = _2899;
                            _2968 = _2900;
                            _2969 = _2901;
                            _2970 = _2902;
                            _2971 = _2972;
                        }
                    }
                    frontier_phi_61_pred = _2897;
                    frontier_phi_61_pred_1 = _2902;
                    frontier_phi_61_pred_2 = _2901;
                    frontier_phi_61_pred_3 = _2900;
                    frontier_phi_61_pred_4 = _2899;
                    frontier_phi_61_pred_5 = _2898;
                }
                _2697 = frontier_phi_61_pred;
                _2707 = frontier_phi_61_pred_1;
                _2705 = frontier_phi_61_pred_2;
                _2703 = frontier_phi_61_pred_3;
                _2701 = frontier_phi_61_pred_4;
                _2699 = frontier_phi_61_pred_5;
                uint _2848 = _2847 + 1u;
                if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2841 = _2697;
                    _2842 = _2699;
                    _2843 = _2701;
                    _2844 = _2703;
                    _2845 = _2705;
                    _2846 = _2707;
                    _2847 = _2848;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
        }
        uvec4 _2710 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2711 = _2710.z;
        uint _2713 = (_2711 >> 8u) & 15u;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        if (((4294967295u << _2713) & _2595) == 0u)
        {
            _2809 = _2696;
            _2811 = _2698;
            _2813 = _2700;
            _2815 = _2702;
            _2817 = _2704;
            _2819 = _2706;
        }
        else
        {
            float _2834 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
            float _2835 = _2834 * _2549;
            float _2836 = _2834 * _2550;
            float _2837 = _2834 * _2551;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2713 < ((_2711 >> 12u) & 15u))
            {
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2948 = _2696;
                float _2949 = _2698;
                float _2950 = _2700;
                float _2951 = _2702;
                float _2952 = _2704;
                float _2953 = _2706;
                uint _2954 = _2713;
                uint _2963;
                bool _2964;
                for (;;)
                {
                    _2963 = texelFetch(g_lightClassification, int((((_2589 << 5u) + (_2575 << 9u)) + (_2954 << 2u)) >> 2u)).x;
                    _2964 = _2963 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2964)
                    {
                        frontier_phi_67_pred = _2951;
                        frontier_phi_67_pred_1 = _2952;
                        frontier_phi_67_pred_2 = _2953;
                        frontier_phi_67_pred_3 = _2950;
                        frontier_phi_67_pred_4 = _2949;
                        frontier_phi_67_pred_5 = _2948;
                    }
                    else
                    {
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3161 = _2948;
                        float _3162 = _2949;
                        float _3163 = _2950;
                        float _3164 = _2951;
                        float _3165 = _2952;
                        float _3166 = _2953;
                        uint _3167 = _2963;
                        uint _3168;
                        vec4 _3193;
                        float _3194;
                        vec4 _3209;
                        vec3 _3221;
                        vec4 _3236;
                        vec4 _3251;
                        float _3297;
                        bool _3298;
                        for (;;)
                        {
                            uint _3178 = ((_2954 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3167));
                            _3168 = (_3167 + 4294967295u) & _3167;
                            uint _3180 = _3178 * 40u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            _3194 = _3193.w;
                            uint _3196 = (_3178 * 40u) + 4u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3211 = (_3178 * 40u) + 8u;
                            _3221 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x));
                            uint _3223 = (_3178 * 40u) + 16u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3238 = (_3178 * 40u) + 20u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3178 * 40u) + 24u;
                            vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3272 = (_3178 * 40u) + 28u;
                            vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3297 = fma(_2551, _3285.z, fma(_2550, _3285.y, _3285.x * _2549)) + _3285.w;
                            _3298 = !((fma(_2551, _3266.z, fma(_2550, _3266.y, _3266.x * _2549)) + _3266.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3298)
                            {
                                float _3325 = _3193.x - _2549;
                                float _3326 = _3193.y - _2550;
                                float _3327 = _3193.z - _2551;
                                float _3328 = dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327));
                                float _3331 = inversesqrt(_3328);
                                float _3332 = _3331 * _3325;
                                float _3333 = _3331 * _3326;
                                float _3334 = _3331 * _3327;
                                float _3338 = 1.0 - (_3328 / (_3194 * _3194));
                                float _4418 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3343 = sqrt(_3328) * _3209.w;
                                float _3345 = 1.39999997615814208984375 / (_3343 + 1.39999997615814208984375);
                                float _3346 = _3345 * _3345;
                                float _3349 = ((1.0 - _3346) * dot(vec3(_3332, _3333, _3334), vec3(_857, _860, _863))) + _3346;
                                float _3352 = _3343 * _3343;
                                float _3356 = (fma(_2551, _3236.z, fma(_2550, _3236.y, _3236.x * _2549)) + _3236.w) / _3297;
                                float _3357 = (fma(_2551, _3251.z, fma(_2550, _3251.y, _3251.x * _2549)) + _3251.w) / _3297;
                                float _3361 = 1.0 - dot(vec2(_3356, _3357), vec2(_3356, _3357));
                                float _4434 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3363 = _3362 * (((isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))) * _3339) / ((_3352 * 0.699999988079071044921875) + 1.0));
                                float _3375 = exp2(log2(1.0 / ((_3352 * 3.5) + 5.0)) * 0.25);
                                float _3376 = 1.0 - _917;
                                float _3383 = sqrt(1.0 - ((1.0 - (_3376 * _3376)) * (1.0 - (_3375 * _3375))));
                                float _3384 = _3383 * _3383;
                                float _3385 = _3384 * _3384;
                                float _3386 = _3332 - _2835;
                                float _3387 = _3333 - _2836;
                                float _3388 = _3334 - _2837;
                                float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                                float _3396 = dot(vec3(_857, _860, _863), vec3((-0.0) - _2835, (-0.0) - _2836, (-0.0) - _2837));
                                float _4445 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3399 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3400 = dot(vec3(_857, _860, _863), vec3(_3392 * _3386, _3392 * _3387, _3392 * _3388));
                                float _4456 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3403 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3407 = ((_3403 * _3403) * (_3385 + (-1.0))) + 1.0;
                                float _3408 = _3345 * _3384;
                                float _3409 = _3408 * _3408;
                                float _3415 = ((1.0 - _3409) * dot(vec3(_857, _860, _863), vec3(_3332, _3333, _3334))) + _3409;
                                float _4467 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3417 = 1.0 - _3384;
                                float _3427 = (0.5 / (((_3416 * ((_3399 * _3417) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3416 * _3417) + _3384) * _3399))) * _3416;
                                float _4478 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3437 = (_3362 * _3339) * (((_3385 * 3.1415927410125732421875) * (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) / ((_3407 * _3407) * ((_3352 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3437 * _3221.x;
                                frontier_phi_73_pred_1 = _3437 * _3221.y;
                                frontier_phi_73_pred_2 = _3363 * _3209.z;
                                frontier_phi_73_pred_3 = _3363 * _3209.y;
                                frontier_phi_73_pred_4 = _3363 * _3209.x;
                                frontier_phi_73_pred_5 = _3437 * _3221.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3441 = frontier_phi_73_pred;
                            _3442 = frontier_phi_73_pred_1;
                            _3446 = frontier_phi_73_pred_2;
                            _3445 = frontier_phi_73_pred_3;
                            _3444 = frontier_phi_73_pred_4;
                            _3443 = frontier_phi_73_pred_5;
                            _3151 = _3444 + _3164;
                            _3152 = _3445 + _3165;
                            _3153 = _3446 + _3166;
                            _3148 = _3441 + _3161;
                            _3149 = _3442 + _3162;
                            _3150 = _3443 + _3163;
                            if (_3168 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3168;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3151;
                        frontier_phi_67_pred_1 = _3152;
                        frontier_phi_67_pred_2 = _3153;
                        frontier_phi_67_pred_3 = _3150;
                        frontier_phi_67_pred_4 = _3149;
                        frontier_phi_67_pred_5 = _3148;
                    }
                    _2816 = frontier_phi_67_pred;
                    _2818 = frontier_phi_67_pred_1;
                    _2820 = frontier_phi_67_pred_2;
                    _2814 = frontier_phi_67_pred_3;
                    _2812 = frontier_phi_67_pred_4;
                    _2810 = frontier_phi_67_pred_5;
                    uint _2955 = _2954 + 1u;
                    if (_2955 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2948 = _2810;
                        _2949 = _2812;
                        _2950 = _2814;
                        _2951 = _2816;
                        _2952 = _2818;
                        _2953 = _2820;
                        _2954 = _2955;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2818;
                frontier_phi_55_56_ladder_1 = _2820;
                frontier_phi_55_56_ladder_2 = _2816;
                frontier_phi_55_56_ladder_3 = _2814;
                frontier_phi_55_56_ladder_4 = _2812;
                frontier_phi_55_56_ladder_5 = _2810;
            }
            else
            {
                frontier_phi_55_56_ladder = _2704;
                frontier_phi_55_56_ladder_1 = _2706;
                frontier_phi_55_56_ladder_2 = _2702;
                frontier_phi_55_56_ladder_3 = _2700;
                frontier_phi_55_56_ladder_4 = _2698;
                frontier_phi_55_56_ladder_5 = _2696;
            }
            _2809 = frontier_phi_55_56_ladder_5;
            _2811 = frontier_phi_55_56_ladder_4;
            _2813 = frontier_phi_55_56_ladder_3;
            _2815 = frontier_phi_55_56_ladder_2;
            _2817 = frontier_phi_55_56_ladder;
            _2819 = frontier_phi_55_56_ladder_1;
        }
        float _2824 = isnan(1.0) ? _901 : (isnan(_901) ? 1.0 : min(_901, 1.0));
        _2608 = (_2824 * _2815) + _2063;
        _2610 = (_2824 * _2817) + _2065;
        _2612 = (_2824 * _2819) + _2067;
        _2614 = ((_2809 * 0.039999999105930328369140625) * _2824) + _2393;
        _2616 = ((_2811 * 0.039999999105930328369140625) * _2824) + _2395;
        _2618 = ((_2813 * 0.039999999105930328369140625) * _2824) + _2397;
    }
    else
    {
        _2608 = _2063;
        _2610 = _2065;
        _2612 = _2067;
        _2614 = _2393;
        _2616 = _2395;
        _2618 = _2397;
    }
    float _4494 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4505 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4516 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    uint _2638 = _240 + 6u;
    float _2646 = _838 / cbSceneParam._m0[86u].x;
    float _2647 = _839 / cbSceneParam._m0[86u].y;
    vec4 _2661 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, (log2((isnan(cbSceneParam._m0[77u].w) ? _772 : (isnan(_772) ? cbSceneParam._m0[77u].w : min(_772, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2663 = _2661.x;
    float _2664 = _2661.y;
    float _2665 = _2661.z;
    float _2666 = _2661.w;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    if (_772 > cbSceneParam._m0[78u].w)
    {
        float _2721 = isnan(_772) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _772 : min(cbSceneParam._m0[80u].w, _772));
        float _2722 = _2721 / _772;
        float _2733 = _2722 * _823;
        float _2734 = _824 * _2722;
        float _2735 = (-0.0) - _2734;
        float _2737 = _2722 * _825;
        float _2739 = (cbSceneParam._m0[77u].w * _2735) / _2721;
        float _2740 = _2739 + cbSceneParam._m0[79u].w;
        float _2741 = cbSceneParam._m0[79u].w - _2734;
        float _2747 = sqrt(((_2733 * _2733) + (_2734 * _2734)) + (_2737 * _2737));
        float _2750 = (1.0 - (cbSceneParam._m0[77u].w / _2721)) * _2747;
        float _2755 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2757 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2910;
        if (abs((_2735 - _2739) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2910 = ((((_2740 > 0.0) ? exp2(_2755 * _2740) : (2.0 - exp2(_2757 * _2740))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2750;
        }
        else
        {
            float _2870 = 1.0 / cbSceneParam._m0[80u].x;
            float _2871 = isnan(_2741) ? _2740 : (isnan(_2740) ? _2741 : max(_2740, _2741));
            float _2872 = isnan(_2741) ? _2740 : (isnan(_2740) ? _2741 : min(_2740, _2741));
            float _2881 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : min(_2871, 0.0));
            float _2882 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : min(_2872, 0.0));
            _2910 = ((abs(_2747 / _2735) * cbSceneParam._m0[80u].y) * ((((_2881 - _2882) * 2.0) - ((exp2(_2755 * (isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0)))) - exp2(_2755 * (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))))) * _2870)) - ((exp2(_2757 * _2881) - exp2(_2757 * _2882)) * _2870))) + (_2750 * cbSceneParam._m0[80u].z);
        }
        vec4 _2912 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, 1.0), 0.0);
        float _2921 = exp2((_2910 * (-1.44269502162933349609375)) * (1.0 - _2912.w));
        float _2922 = log2(_2921);
        float _2938 = log2(_2666);
        _2759 = (exp2(_2938 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].x)) * _2912.x) / cbSceneParam._m0[78u].x)) + _2663;
        _2761 = (exp2(_2938 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].y)) * _2912.y) / cbSceneParam._m0[78u].y)) + _2664;
        _2763 = (exp2(_2938 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].z)) * _2912.z) / cbSceneParam._m0[78u].z)) + _2665;
        _2765 = _2921 * _2666;
    }
    else
    {
        _2759 = _2663;
        _2761 = _2664;
        _2763 = _2665;
        _2765 = _2666;
    }
    float _2777 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2778 = _2777 == 3.0;
    float _2779 = log2(_2765);
    float _2786 = exp2(_2779 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2608 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _901))) + ((_2614 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1705)) * cbPerFrame._m0[3u].x));
    float _2787 = exp2(_2779 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2610 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _901))) + ((_2616 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1705)) * cbPerFrame._m0[3u].x));
    float _2788 = exp2(_2779 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2612 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _901))) + ((_2618 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1705)) * cbPerFrame._m0[3u].x));
    float _2797 = (_2777 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2797 * (_2778 ? _2786 : (_2786 + (cbSceneParam._m0[72u].w * _2759)));
    SV_Target.y = _2797 * (_2778 ? _2787 : (_2787 + (cbSceneParam._m0[72u].w * _2761)));
    SV_Target.z = _2797 * (_2778 ? _2788 : (_2788 + (cbSceneParam._m0[72u].w * _2763)));
    SV_Target.w = cbInstanceData._m0[_2638].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2638].w;
}


