#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1311;
float _3694;
float _3695;
float _3696;
float _3697;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _306.x * cbMtdParam._m0[11u].x;
    float _312 = _306.y * cbMtdParam._m0[11u].y;
    float _313 = _306.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _352.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].z) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3706 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _428 = (_421 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _429 = (_421 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _430 = (_421 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _479 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _493 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _352.y) * 2.0) - ((((_469 - _479) * cbMtdParam._m0[24u].z) + _479) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3717 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _507 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _282.x) * ((_494 * ((_447.x * cbMtdParam._m0[13u].x) - _428)) + _428);
    float _510 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _282.y) * ((_494 * ((_447.y * cbMtdParam._m0[13u].y) - _429)) + _429);
    float _513 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _282.z) * ((_494 * ((_447.z * cbMtdParam._m0[13u].z) - _430)) + _430);
    vec4 _531 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _550 = _548.x;
    float _551 = _548.y;
    float _552 = _548.z;
    float _559 = ((_531.x - _550) * _421) + _550;
    float _560 = ((_531.y - _551) * _421) + _551;
    float _561 = ((_531.z - _552) * _421) + _552;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _586 = ((_573.z - _561) * _494) + _561;
    float _589 = ((((_573.x - _559) * _494) + _559) * 2.0) + (-1.0);
    float _591 = ((((_573.y - _560) * _494) + _560) * 2.0) + (-1.0);
    float _592 = dot(vec2(_589, _591), vec2(_589, _591));
    float _3728 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _597 = sqrt(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _623 = (((_611.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _589;
    float _624 = (((_611.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _591;
    float _627 = fma(_597, _230, fma(_624, _237, _623 * _223));
    float _630 = fma(_597, _231, fma(_624, _238, _623 * _224));
    float _633 = fma(_597, _232, fma(_624, _239, _623 * _225));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _666 = _664.x;
    float _667 = 1.0 - _666;
    float _673 = (cbMtdParam._m0[19u].x + dot(vec4(_637 * _627, _637 * _630, _637 * _633, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_666 - _667) * cbMtdParam._m0[24u].w) + _667) * cbMtdParam._m0[21u].z);
    float _3739 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _681 = (_674 * (cbMtdParam._m0[17u].x - _507)) + _507;
    float _682 = (_674 * (cbMtdParam._m0[17u].y - _510)) + _510;
    float _683 = (_674 * (cbMtdParam._m0[17u].z - _513)) + _513;
    float _687 = (cbMtdParam._m0[19u].w * (_611.z - _586)) + _586;
    vec4 _700 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _707 = (_700.x * 2.0) + (-1.0);
    float _708 = (_700.y * 2.0) + (-1.0);
    float _709 = dot(vec2(_707, _708), vec2(_707, _708));
    float _3750 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _717 = ((_700.z - _687) * _674) + _687;
    float _727 = ((sqrt(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) - _597) * _674) + _597;
    float _730 = (((_707 - _623) * _674) + _623) + (cbMtdParam._m0[21u].x * _623);
    float _731 = (((_708 - _624) * _674) + _624) + (cbMtdParam._m0[21u].x * _624);
    float _735 = cbMtdParam._m0[22u].x + _611.w;
    float _738 = fma(_727, _230, fma(_731, _237, _730 * _223));
    float _741 = fma(_727, _231, fma(_731, _238, _730 * _224));
    float _744 = fma(_727, _232, fma(_731, _239, _730 * _225));
    float _748 = inversesqrt(dot(vec3(_738, _741, _744), vec3(_738, _741, _744)));
    float _749 = _748 * _738;
    float _750 = _748 * _741;
    float _751 = _748 * _744;
    float _3761 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _752 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _3783 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _3794 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3805 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _770 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _821 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _811);
    float _822 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _811);
    float _823 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _811);
    float _827 = inversesqrt(dot(vec3(_821, _822, _823), vec3(_821, _822, _823)));
    float _828 = _821 * _827;
    float _829 = _822 * _827;
    float _830 = _823 * _827;
    vec4 _835 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _837 = _835.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _991 = sqrt(((_821 * _821) + (_822 * _822)) + (_823 * _823));
        float _997 = (cbMatDynParam._m0[5u].x * _991) + cbMatDynParam._m0[5u].y;
        float _3816 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1002 = (cbMatDynParam._m0[5u].z * _991) + cbMatDynParam._m0[5u].w;
        float _3827 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) - _998)) + _998) < ((_837 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _848 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _849 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _867 = fma(_751, cbSceneParam._m0[5u].z, fma(_750, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _749));
    float _870 = fma(_751, cbSceneParam._m0[6u].z, fma(_750, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _749));
    float _873 = fma(_751, cbSceneParam._m0[7u].z, fma(_750, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _749));
    uint _886 = _242 + 9u;
    uint _887 = _886 + uint(cbMatDynParam._m0[0u].w);
    float _893 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * cbInstanceData._m0[_887].x;
    float _894 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * cbInstanceData._m0[_887].y;
    float _895 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_887].z;
    float _3838 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    vec4 _907 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _848, cbSceneParam._m0[86u].y * _849));
    float _911 = ((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * TEXCOORD_5.w) * _907.x;
    float _912 = dot(vec3(_749, _750, _751), vec3(_828, _829, _830));
    float _915 = _912 * 2.0;
    float _919 = (_915 * _749) - _828;
    float _920 = (_915 * _750) - _829;
    float _921 = (_915 * _751) - _830;
    float _925 = abs(dot(vec3(_828, _829, _830), vec3(_749, _750, _751)));
    float _3871 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _927 = sqrt(_752);
    float _940 = exp2((_927 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_927 * 3.0));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1310;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1035 = fma(_980, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _972));
        float _1039 = fma(_980, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _972));
        float _1043 = fma(_980, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _972));
        float _1068 = _972 + _749;
        float _1069 = _976 + _750;
        float _1070 = _980 + _751;
        float _1080 = fma(_1070, cbModelParam._m0[26u].z, fma(_1069, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068)) - _1035;
        float _1081 = fma(_1070, cbModelParam._m0[27u].z, fma(_1069, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068)) - _1039;
        float _1082 = fma(_1070, cbModelParam._m0[28u].z, fma(_1069, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068)) - _1043;
        float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
        float _1099 = ((_1086 * _1080) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1035 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1086 * _1081) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1039 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1086 * _1082) / cbModelParam._m0[34u].z) + ((((((_1043 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        float _1138 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1104.x + (-0.5));
        float _1140 = _1138 * (_1104.y + (-0.5));
        float _1141 = _1138 * (_1104.z + (-0.5));
        float _1148 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1111.x + (-0.5));
        float _1150 = _1148 * (_1111.y + (-0.5));
        float _1151 = _1148 * (_1111.z + (-0.5));
        float _1158 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1118.x + (-0.5));
        float _1160 = _1158 * (_1118.y + (-0.5));
        float _1161 = _1158 * (_1118.z + (-0.5));
        float _1168 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1125.x + (-0.5));
        float _1170 = _1168 * (_1125.y + (-0.5));
        float _1171 = _1168 * (_1125.z + (-0.5));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = _1139 * 0.5;
        float _1176 = _1149 * 0.5;
        float _1177 = _1159 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1192 = (dot(vec3(_749, _750, _751), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1202 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3919 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1204 + 1.0))) + _1209) * _1172;
        float _1219 = _1140 * 0.5;
        float _1220 = _1150 * 0.5;
        float _1221 = _1160 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_749, _750, _751), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3952 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1246 + 1.0))) + _1251) * _1173;
        float _1261 = _1141 * 0.5;
        float _1262 = _1151 * 0.5;
        float _1263 = _1161 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_749, _750, _751), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3985 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1288 + 1.0))) + _1293) * _1174;
        _1310 = _1141;
        _1312 = _1140;
        _1313 = _1139;
        _1314 = _1151;
        _1315 = _1150;
        _1316 = _1149;
        _1317 = _1161;
        _1318 = _1160;
        _1319 = _1159;
        _1320 = _1174;
        _1321 = _1173;
        _1322 = _1172;
        _1323 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1324 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
    }
    else
    {
        _1310 = _1311;
        _1312 = _1311;
        _1313 = _1311;
        _1314 = _1311;
        _1315 = _1311;
        _1316 = _1311;
        _1317 = _1311;
        _1318 = _1311;
        _1319 = _1311;
        _1320 = _1311;
        _1321 = _1311;
        _1322 = _1311;
        _1323 = 0.0;
        _1324 = 0.0;
        _1325 = 0.0;
    }
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1352 = fma(_980, cbModelParam._m0[30u].z, fma(_976, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _972));
        float _1356 = fma(_980, cbModelParam._m0[31u].z, fma(_976, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _972));
        float _1360 = fma(_980, cbModelParam._m0[32u].z, fma(_976, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _972));
        float _1383 = _972 + _749;
        float _1384 = _976 + _750;
        float _1385 = _980 + _751;
        float _1395 = fma(_1385, cbModelParam._m0[30u].z, fma(_1384, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1383)) - _1352;
        float _1396 = fma(_1385, cbModelParam._m0[31u].z, fma(_1384, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1383)) - _1356;
        float _1397 = fma(_1385, cbModelParam._m0[32u].z, fma(_1384, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1383)) - _1360;
        float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
        float _1414 = ((_1401 * _1395) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1352 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1401 * _1396) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1356 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1401 * _1397) / cbModelParam._m0[35u].z) + ((((((_1360 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        float _1451 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1418.x + (-0.5));
        float _1453 = _1451 * (_1418.y + (-0.5));
        float _1454 = _1451 * (_1418.z + (-0.5));
        float _1461 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1425.x + (-0.5));
        float _1463 = _1461 * (_1425.y + (-0.5));
        float _1464 = _1461 * (_1425.z + (-0.5));
        float _1471 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1432.x + (-0.5));
        float _1473 = _1471 * (_1432.y + (-0.5));
        float _1474 = _1471 * (_1432.z + (-0.5));
        float _1481 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1439.x + (-0.5));
        float _1483 = _1481 * (_1439.y + (-0.5));
        float _1484 = _1481 * (_1439.z + (-0.5));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = _1452 * 0.5;
        float _1489 = _1462 * 0.5;
        float _1490 = _1472 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_749, _750, _751), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4048 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1515 + 1.0))) + _1520) * _1485;
        float _1530 = _1453 * 0.5;
        float _1531 = _1463 * 0.5;
        float _1532 = _1473 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_749, _750, _751), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4081 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1557 + 1.0))) + _1562) * _1486;
        float _1572 = _1454 * 0.5;
        float _1573 = _1464 * 0.5;
        float _1574 = _1474 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_749, _750, _751), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4114 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1599 + 1.0))) + _1604) * _1487;
        _1621 = _1454;
        _1622 = _1453;
        _1623 = _1452;
        _1624 = _1464;
        _1625 = _1463;
        _1626 = _1462;
        _1627 = _1474;
        _1628 = _1473;
        _1629 = _1472;
        _1630 = _1487;
        _1631 = _1486;
        _1632 = _1485;
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
    }
    else
    {
        _1621 = _1311;
        _1622 = _1311;
        _1623 = _1311;
        _1624 = _1311;
        _1625 = _1311;
        _1626 = _1311;
        _1627 = _1311;
        _1628 = _1311;
        _1629 = _1311;
        _1630 = _1311;
        _1631 = _1311;
        _1632 = _1311;
        _1633 = 0.0;
        _1634 = 0.0;
        _1635 = 0.0;
    }
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1323)) + _1323;
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1324)) + _1324;
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1325)) + _1325;
    float _1668 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1671 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1674 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1645));
    float _1689 = _919 * 0.5;
    float _1690 = _920 * 0.5;
    float _1691 = _921 * 0.5;
    float _1692 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1695 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1698 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1732;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1705 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1310, _1314, _1317, _1320));
        float _1709 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1312, _1315, _1318, _1321));
        float _1713 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1313, _1316, _1319, _1322));
        float _1720 = dot(vec4(cbModelParam._m0[39u]), vec4(_1689, _1690, _1691, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1743;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1734 = dot(vec4(cbModelParam._m0[40u]), vec4(_1689, _1690, _1691, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1747 = (_1743 * cbModelParam._m0[1u].x) + (_1732 * (1.0 - cbModelParam._m0[1u].x));
    float _1757 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _752);
    float _1758 = isnan(_1757) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1757 : min(cbModelParam._m0[25u].z, _1757));
    float _1839;
    float _1841;
    float _1843;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1806 = fma(_980, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972)) + cbModelParam._m0[13u].w;
        float _1810 = fma(_980, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972)) + cbModelParam._m0[14u].w;
        float _1814 = fma(_980, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972)) + cbModelParam._m0[15u].w;
        float _1817 = fma(_921, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919));
        float _1820 = fma(_921, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919));
        float _1823 = fma(_921, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919));
        float _1851;
        if (_1817 > 0.0)
        {
            _1851 = abs((1.0 - _1806) / _1817);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1806 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1851 = frontier_phi_17_15_ladder;
        }
        float _2073;
        if (_1820 > 0.0)
        {
            _2073 = abs((1.0 - _1810) / _1820);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1810 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2073 = frontier_phi_26_22_ladder;
        }
        float _2319;
        if (_1823 > 0.0)
        {
            _2319 = abs((1.0 - _1814) / _1823);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1814 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2319 = frontier_phi_38_33_ladder;
        }
        float _2321 = isnan(_2073) ? _1851 : (isnan(_1851) ? _2073 : min(_1851, _2073));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1817) + _1806;
        float _2327 = (_2322 * _1820) + _1810;
        float _2328 = (_2322 * _1823) + _1814;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2329;
        float _2333 = _2329 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 > _2333) || ((_2327 < _2331) || ((_2326 < _2331) || (_2326 > _2333))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2328, cbModelParam._m0[9u].z, fma(_2327, cbModelParam._m0[9u].y, _2326 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2328, cbModelParam._m0[10u].z, fma(_2327, cbModelParam._m0[10u].y, _2326 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2328, cbModelParam._m0[11u].z, fma(_2327, cbModelParam._m0[11u].y, _2326 * cbModelParam._m0[11u].x))), _1758);
            frontier_phi_16_38_ladder = _2452.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2452.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2452.x * cbModelParam._m0[1u].y;
        }
        _1839 = frontier_phi_16_38_ladder_2;
        _1841 = frontier_phi_16_38_ladder_1;
        _1843 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_919, _920, _921), _1758);
        _1839 = _1827.x * cbModelParam._m0[1u].y;
        _1841 = _1827.y * cbModelParam._m0[1u].y;
        _1843 = _1827.z * cbModelParam._m0[1u].y;
    }
    float _1847 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _752);
    float _1848 = isnan(_1847) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1847 : min(cbModelParam._m0[25u].w, _1847));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1902 = fma(_980, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972)) + cbModelParam._m0[21u].w;
        float _1906 = fma(_980, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972)) + cbModelParam._m0[22u].w;
        float _1910 = fma(_980, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972)) + cbModelParam._m0[23u].w;
        float _1913 = fma(_921, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919));
        float _1916 = fma(_921, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919));
        float _1919 = fma(_921, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919));
        float _2078;
        if (_1913 > 0.0)
        {
            _2078 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2078 = frontier_phi_28_24_ladder;
        }
        float _2346;
        if (_1916 > 0.0)
        {
            _2346 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2346 = frontier_phi_40_35_ladder;
        }
        float _2551;
        if (_1919 > 0.0)
        {
            _2551 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2551 = frontier_phi_49_46_ladder;
        }
        float _2553 = isnan(_2346) ? _2078 : (isnan(_2078) ? _2346 : min(_2078, _2346));
        float _2554 = isnan(_2551) ? _2553 : (isnan(_2553) ? _2551 : min(_2553, _2551));
        float _2558 = (_2554 * _1913) + _1902;
        float _2559 = (_2554 * _1916) + _1906;
        float _2560 = (_2554 * _1919) + _1910;
        float _2561 = _2554 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2561;
        float _2564 = _2561 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2560 > _2564) || ((_2560 < _2562) || ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 < _2562) || (_2558 > _2564))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2560, cbModelParam._m0[17u].z, fma(_2559, cbModelParam._m0[17u].y, _2558 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2560, cbModelParam._m0[18u].z, fma(_2559, cbModelParam._m0[18u].y, _2558 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2560, cbModelParam._m0[19u].z, fma(_2559, cbModelParam._m0[19u].y, _2558 * cbModelParam._m0[19u].x))), _1848);
            frontier_phi_25_49_ladder = _2759.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2759.x * cbModelParam._m0[1u].z;
        }
        _1938 = frontier_phi_25_49_ladder_2;
        _1940 = frontier_phi_25_49_ladder_1;
        _1942 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_919, _920, _921), _1848);
        _1938 = _1922.x * cbModelParam._m0[1u].z;
        _1940 = _1922.y * cbModelParam._m0[1u].z;
        _1942 = _1922.z * cbModelParam._m0[1u].z;
    }
    float _1954 = ((((1.0 - _940) * ((_927 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_940 * _927)) * _911;
    float _1955 = _1954 * ((cbModelParam._m0[1u].w * (_1938 - _1839)) + _1839);
    float _1956 = _1954 * ((cbModelParam._m0[1u].w * (_1940 - _1841)) + _1841);
    float _1957 = _1954 * ((cbModelParam._m0[1u].w * (_1942 - _1843)) + _1843);
    float _1960 = fma(_1957, cbSceneParam._m0[89u].z, fma(_1956, cbSceneParam._m0[89u].y, _1955 * cbSceneParam._m0[89u].x));
    float _1963 = fma(_1957, cbSceneParam._m0[90u].z, fma(_1956, cbSceneParam._m0[90u].y, _1955 * cbSceneParam._m0[90u].x));
    float _1966 = fma(_1957, cbSceneParam._m0[91u].z, fma(_1956, cbSceneParam._m0[91u].y, _1955 * cbSceneParam._m0[91u].x));
    vec4 _1974 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_848, _849));
    float _1976 = _1974.w;
    float _1988 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1976);
    float _1989 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1976);
    float _1990 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1976);
    uvec4 _1994 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1996 = _1994.x * 14u;
    uint _1997 = _1996 + 13u;
    float _2004 = _911 + (-1.0);
    float _2009 = (cbLight._m0[_1997].x * _2004) + 1.0;
    float _2010 = (cbLight._m0[_1997].y * _2004) + 1.0;
    float _2011 = (cbLight._m0[_1997].z * _2004) + 1.0;
    float _2012 = (cbLight._m0[_1997].w * _2004) + 1.0;
    uint _2013 = _1996 + 5u;
    float _2019 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2023 = _1996 + 4u;
    float _2032 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2036 = _1996 | 1u;
    float _2047 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_749, _750, _751));
    float _2050 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_749, _750, _751));
    float _4250 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _4261 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2055 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _2057 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.3183098733425140380859375;
    float _2064 = ((cbLight._m0[_2013].x * _2019) * _2057) + (((cbLight._m0[_2023].x * _1988) * _2032) * _2055);
    float _2065 = ((_2019 * cbLight._m0[_2013].y) * _2057) + (((cbLight._m0[_2023].y * _1989) * _2032) * _2055);
    float _2066 = ((_2019 * cbLight._m0[_2013].z) * _2057) + (((cbLight._m0[_2023].z * _1990) * _2032) * _2055);
    uvec4 _2070 = floatBitsToUint(cbLight._m0[_1996 + 12u]);
    bool _2072 = _2070.x == 0u;
    float _2083;
    float _2085;
    float _2087;
    if (_2072)
    {
        _2083 = _2064;
        _2085 = _2065;
        _2087 = _2066;
    }
    else
    {
        uint _2091 = _1996 + 6u;
        float _2107 = (dot(vec3(cbLight._m0[_1996 + 2u].xyz), vec3(_749, _750, _751)) * 0.5) + 0.5;
        float _2108 = _2107 * _2107;
        float _4272 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2109 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2110 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2083 = (((cbLight._m0[_2091].x * 0.3183098733425140380859375) * _2109) * _2110) + _2064;
        _2085 = (((cbLight._m0[_2091].y * 0.3183098733425140380859375) * _2109) * _2110) + _2065;
        _2087 = (((cbLight._m0[_2091].z * 0.3183098733425140380859375) * _2109) * _2110) + _2066;
    }
    bool _2090 = _2070.y == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2090)
    {
        _2128 = _2083;
        _2130 = _2085;
        _2132 = _2087;
    }
    else
    {
        uint _2290 = _1996 + 7u;
        float _2306 = (dot(vec3(cbLight._m0[_1996 + 3u].xyz), vec3(_749, _750, _751)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4288 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2309 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2128 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2083;
        _2130 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2085;
        _2132 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2087;
    }
    uint _2135 = _1996 + 8u;
    float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _752) * 0.949999988079071044921875);
    float _2149 = _2148 * _2148;
    float _2150 = cbLight._m0[_1996].x + _828;
    float _2151 = cbLight._m0[_1996].y + _829;
    float _2152 = cbLight._m0[_1996].z + _830;
    float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
    float _2157 = _2156 * _2150;
    float _2158 = _2156 * _2151;
    float _2159 = _2156 * _2152;
    float _2160 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_1996].xyz));
    float _4304 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _2164 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2165 = dot(vec3(_749, _750, _751), vec3(_2157, _2158, _2159));
    float _4326 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2157, _2158, _2159));
    float _4337 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2149 * _2149;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2189 = 1.0 - _2149;
    float _2200 = (0.5 / (((_2164 * ((_2163 * _2189) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2189) + _2149) * _2163))) * _2163;
    float _4348 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2202 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    uint _2216 = _1996 + 9u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _752) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_2036].x + _828;
    float _2230 = cbLight._m0[_2036].y + _829;
    float _2231 = cbLight._m0[_2036].z + _830;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2036].xyz));
    float _4359 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2243 = dot(vec3(_749, _750, _751), vec3(_2236, _2237, _2238));
    float _4370 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2236, _2237, _2238));
    float _4381 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2228 * _2228;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2264 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2265 = 1.0 - _2228;
    float _2275 = (0.5 / (((_2164 * ((_2242 * _2265) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2265) + _2228) * _2242))) * _2242;
    float _4392 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2277 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    float _2287 = (((_2264 * cbLight._m0[_2216].x) * _2277) * _2019) + ((((cbLight._m0[_2135].x * _1988) * _2188) * _2202) * _2032);
    float _2288 = (((_2264 * cbLight._m0[_2216].y) * _2277) * _2019) + ((((cbLight._m0[_2135].y * _1989) * _2188) * _2202) * _2032);
    float _2289 = (((_2264 * cbLight._m0[_2216].z) * _2277) * _2019) + ((((cbLight._m0[_2135].z * _1990) * _2188) * _2202) * _2032);
    float _2351;
    float _2353;
    float _2355;
    if (_2072)
    {
        _2351 = _2287;
        _2353 = _2288;
        _2355 = _2289;
    }
    else
    {
        uint _2357 = _1996 + 2u;
        uint _2361 = _1996 + 10u;
        float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _752) * 0.949999988079071044921875);
        float _2376 = _2375 * _2375;
        float _2377 = cbLight._m0[_2357].x + _828;
        float _2378 = cbLight._m0[_2357].y + _829;
        float _2379 = cbLight._m0[_2357].z + _830;
        float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
        float _2384 = _2383 * _2377;
        float _2385 = _2383 * _2378;
        float _2386 = _2383 * _2379;
        float _2387 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2357].xyz));
        float _4403 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2391 = dot(vec3(_749, _750, _751), vec3(_2384, _2385, _2386));
        float _4414 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2395 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2384, _2385, _2386));
        float _4425 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2399 = _2376 * _2376;
        float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
        float _2412 = (exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2413 = 1.0 - _2376;
        float _2423 = (0.5 / (((_2164 * ((_2390 * _2413) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2413) + _2376) * _2390))) * _2390;
        float _4436 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2425 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
        float _2426 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2351 = (((_2412 * cbLight._m0[_2361].x) * _2425) * _2426) + _2287;
        _2353 = (((_2412 * cbLight._m0[_2361].y) * _2425) * _2426) + _2288;
        _2355 = (((_2412 * cbLight._m0[_2361].z) * _2425) * _2426) + _2289;
    }
    float _2461;
    float _2463;
    float _2465;
    if (_2090)
    {
        _2461 = _2351;
        _2463 = _2353;
        _2465 = _2355;
    }
    else
    {
        uint _2472 = _1996 + 3u;
        uint _2476 = _1996 + 11u;
        float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _752) * 0.949999988079071044921875);
        float _2491 = _2490 * _2490;
        float _2492 = cbLight._m0[_2472].x + _828;
        float _2493 = cbLight._m0[_2472].y + _829;
        float _2494 = cbLight._m0[_2472].z + _830;
        float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
        float _2499 = _2498 * _2492;
        float _2500 = _2498 * _2493;
        float _2501 = _2498 * _2494;
        float _2502 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2472].xyz));
        float _4452 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2506 = dot(vec3(_749, _750, _751), vec3(_2499, _2500, _2501));
        float _4463 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2510 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2499, _2500, _2501));
        float _4474 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2514 = _2491 * _2491;
        float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
        float _2527 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2528 = 1.0 - _2491;
        float _2538 = (0.5 / (((_2164 * ((_2505 * _2528) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2528) + _2491) * _2505))) * _2505;
        float _4485 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2540 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
        float _2541 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2461 = (((_2527 * cbLight._m0[_2476].x) * _2540) * _2541) + _2351;
        _2463 = (((_2527 * cbLight._m0[_2476].y) * _2540) * _2541) + _2353;
        _2465 = (((_2527 * cbLight._m0[_2476].z) * _2540) * _2541) + _2355;
    }
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    if (_1994.y == 0u)
    {
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2617 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2616;
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2616;
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2616;
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.x;
        uint _2643 = uint((float(_2631.y) * floor(float(uint(cbSceneParam._m0[85u].y * _849) / _2632))) + floor(float(uint(cbSceneParam._m0[85u].x * _848) / _2632)));
        float _2653 = (log2(_2619 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2654 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        uint _2657 = uint(isnan(14.0) ? _2654 : (isnan(_2654) ? 14.0 : min(_2654, 14.0)));
        uvec4 _2662 = texelFetch(g_lightClusterGridBuffer, int(((_2657 << 2u) + (_2643 << 6u)) >> 2u));
        uint _2663 = _2662.x;
        uint _2664 = _2631.z;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        if (((((1u << ((_2664 >> 4u) & 15u)) + 4294967295u) & _2663) == 0u) || ((_2664 & 240u) == 0u))
        {
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
        }
        else
        {
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            uint _2923 = 0u;
            uint _2932;
            bool _2933;
            for (;;)
            {
                _2932 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_2923 << 2u)) >> 2u)).x;
                _2933 = _2932 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2933)
                {
                    frontier_phi_66_pred = _2917;
                    frontier_phi_66_pred_1 = _2922;
                    frontier_phi_66_pred_2 = _2921;
                    frontier_phi_66_pred_3 = _2920;
                    frontier_phi_66_pred_4 = _2919;
                    frontier_phi_66_pred_5 = _2918;
                }
                else
                {
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    uint _3068;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2919;
                    _3065 = _2920;
                    _3066 = _2921;
                    _3067 = _2922;
                    _3068 = _2932;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    for (;;)
                    {
                        uint _3072 = uint(findLSB(_3068)) + (_2923 << 5u);
                        uint _3069 = (_3068 + 4294967295u) & _3068;
                        uint _3074 = _3072 * 48u;
                        vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 3u)).x));
                        uint _3094 = (_3072 * 48u) + 4u;
                        vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 3u)).x));
                        uint _3113 = (_3072 * 48u) + 8u;
                        vec3 _3124 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x));
                        float _3128 = _3088.x - _2617;
                        float _3129 = _3088.y - _2618;
                        float _3130 = _3088.z - _2619;
                        float _3131 = dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130));
                        float _3134 = inversesqrt(_3131);
                        float _3135 = _3134 * _3128;
                        float _3136 = _3134 * _3129;
                        float _3137 = _3134 * _3130;
                        float _3138 = dot(vec3(_867, _870, _873), vec3(_3135, _3136, _3137));
                        float _3143 = 1.0 - (_3131 * _3088.w);
                        float _4511 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3144 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3145 = sqrt(_3131) * _3107.w;
                        float _3148 = 1.39999997615814208984375 / (_3145 + 1.39999997615814208984375);
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3138) + _3149;
                        float _3155 = _3145 * _3145;
                        float _3159 = ((isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0))) * _3144) / ((_3155 * 0.699999988079071044921875) + 1.0);
                        float _3163 = (-0.0) - _2617;
                        float _3164 = (-0.0) - _2618;
                        float _3165 = (-0.0) - _2619;
                        float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                        float _3170 = _3169 * _3163;
                        float _3171 = _3169 * _3164;
                        float _3172 = _3169 * _3165;
                        float _3180 = exp2(log2(1.0 / ((_3155 * 3.5) + 5.0)) * 0.25);
                        float _3181 = 1.0 - _927;
                        float _3188 = sqrt(1.0 - ((1.0 - (_3181 * _3181)) * (1.0 - (_3180 * _3180))));
                        float _3189 = _3188 * _3188;
                        float _3190 = _3189 * _3189;
                        float _3191 = _3170 + _3135;
                        float _3192 = _3171 + _3136;
                        float _3193 = _3172 + _3137;
                        float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                        float _3201 = dot(vec3(_867, _870, _873), vec3(_3170, _3171, _3172));
                        float _4527 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3205 = dot(vec3(_867, _870, _873), vec3(_3197 * _3191, _3197 * _3192, _3197 * _3193));
                        float _4538 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3212 = ((_3208 * _3208) * (_3190 + (-1.0))) + 1.0;
                        float _3213 = _3148 * _3189;
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3138) + _3214;
                        float _4549 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3219 = 1.0 - _3189;
                        float _3229 = (0.5 / (((_3218 * ((_3204 * _3219) + _3189)) + 9.9999999392252902907785028219223e-09) + (((_3218 * _3219) + _3189) * _3204))) * _3218;
                        float _4560 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3240 = (((_3190 * 3.1415927410125732421875) * (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) / ((_3212 * _3212) * ((_3155 * 2.1991131305694580078125) + 3.141590118408203125))) * _3144;
                        _2992 = (_3159 * _3107.x) + _3065;
                        _2993 = (_3159 * _3107.y) + _3066;
                        _2994 = (_3159 * _3107.z) + _3067;
                        _2989 = (_3240 * _3124.x) + _3062;
                        _2990 = (_3240 * _3124.y) + _3063;
                        _2991 = (_3240 * _3124.z) + _3064;
                        if (_3069 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _2991;
                            _3065 = _2992;
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _3069;
                        }
                    }
                    frontier_phi_66_pred = _2989;
                    frontier_phi_66_pred_1 = _2994;
                    frontier_phi_66_pred_2 = _2993;
                    frontier_phi_66_pred_3 = _2992;
                    frontier_phi_66_pred_4 = _2991;
                    frontier_phi_66_pred_5 = _2990;
                }
                _2765 = frontier_phi_66_pred;
                _2775 = frontier_phi_66_pred_1;
                _2773 = frontier_phi_66_pred_2;
                _2771 = frontier_phi_66_pred_3;
                _2769 = frontier_phi_66_pred_4;
                _2767 = frontier_phi_66_pred_5;
                uint _2924 = _2923 + 1u;
                if (_2924 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2917 = _2765;
                    _2918 = _2767;
                    _2919 = _2769;
                    _2920 = _2771;
                    _2921 = _2773;
                    _2922 = _2775;
                    _2923 = _2924;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
        }
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.z;
        uint _2781 = (_2779 >> 8u) & 15u;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((4294967295u << _2781) & _2663) == 0u)
        {
            _2885 = _2764;
            _2887 = _2766;
            _2889 = _2768;
            _2891 = _2770;
            _2893 = _2772;
            _2895 = _2774;
        }
        else
        {
            float _2910 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
            float _2911 = _2910 * _2617;
            float _2912 = _2910 * _2618;
            float _2913 = _2910 * _2619;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2781 < ((_2779 >> 12u) & 15u))
            {
                float _2886;
                float _2888;
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _3045 = _2764;
                float _3046 = _2766;
                float _3047 = _2768;
                float _3048 = _2770;
                float _3049 = _2772;
                float _3050 = _2774;
                uint _3051 = _2781;
                uint _3060;
                bool _3061;
                for (;;)
                {
                    _3060 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_3051 << 2u)) >> 2u)).x;
                    _3061 = _3060 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3061)
                    {
                        frontier_phi_77_pred = _3050;
                        frontier_phi_77_pred_1 = _3049;
                        frontier_phi_77_pred_2 = _3048;
                        frontier_phi_77_pred_3 = _3047;
                        frontier_phi_77_pred_4 = _3046;
                        frontier_phi_77_pred_5 = _3045;
                    }
                    else
                    {
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3267 = _3045;
                        float _3268 = _3046;
                        float _3269 = _3047;
                        float _3270 = _3048;
                        float _3271 = _3049;
                        float _3272 = _3050;
                        uint _3273 = _3060;
                        uint _3274;
                        vec4 _3299;
                        float _3300;
                        vec4 _3315;
                        vec3 _3327;
                        vec4 _3342;
                        vec4 _3357;
                        float _3403;
                        bool _3404;
                        for (;;)
                        {
                            uint _3284 = ((_3051 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3273));
                            _3274 = (_3273 + 4294967295u) & _3273;
                            uint _3286 = _3284 * 40u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            _3300 = _3299.w;
                            uint _3302 = (_3284 * 40u) + 4u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3317 = (_3284 * 40u) + 8u;
                            _3327 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x));
                            uint _3329 = (_3284 * 40u) + 16u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3344 = (_3284 * 40u) + 20u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3359 = (_3284 * 40u) + 24u;
                            vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3378 = (_3284 * 40u) + 28u;
                            vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            _3403 = fma(_2619, _3391.z, fma(_2618, _3391.y, _3391.x * _2617)) + _3391.w;
                            _3404 = !((fma(_2619, _3372.z, fma(_2618, _3372.y, _3372.x * _2617)) + _3372.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3404)
                            {
                                float _3431 = _3299.x - _2617;
                                float _3432 = _3299.y - _2618;
                                float _3433 = _3299.z - _2619;
                                float _3434 = dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433));
                                float _3437 = inversesqrt(_3434);
                                float _3438 = _3437 * _3431;
                                float _3439 = _3437 * _3432;
                                float _3440 = _3437 * _3433;
                                float _3444 = 1.0 - (_3434 / (_3300 * _3300));
                                float _4571 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3449 = sqrt(_3434) * _3315.w;
                                float _3451 = 1.39999997615814208984375 / (_3449 + 1.39999997615814208984375);
                                float _3452 = _3451 * _3451;
                                float _3455 = ((1.0 - _3452) * dot(vec3(_3438, _3439, _3440), vec3(_867, _870, _873))) + _3452;
                                float _3458 = _3449 * _3449;
                                float _3462 = (fma(_2619, _3342.z, fma(_2618, _3342.y, _3342.x * _2617)) + _3342.w) / _3403;
                                float _3463 = (fma(_2619, _3357.z, fma(_2618, _3357.y, _3357.x * _2617)) + _3357.w) / _3403;
                                float _3467 = 1.0 - dot(vec2(_3462, _3463), vec2(_3462, _3463));
                                float _4587 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3469 = _3468 * (((isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0))) * _3445) / ((_3458 * 0.699999988079071044921875) + 1.0));
                                float _3481 = exp2(log2(1.0 / ((_3458 * 3.5) + 5.0)) * 0.25);
                                float _3482 = 1.0 - _927;
                                float _3489 = sqrt(1.0 - ((1.0 - (_3482 * _3482)) * (1.0 - (_3481 * _3481))));
                                float _3490 = _3489 * _3489;
                                float _3491 = _3490 * _3490;
                                float _3492 = _3438 - _2911;
                                float _3493 = _3439 - _2912;
                                float _3494 = _3440 - _2913;
                                float _3498 = inversesqrt(dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494)));
                                float _3502 = dot(vec3(_867, _870, _873), vec3((-0.0) - _2911, (-0.0) - _2912, (-0.0) - _2913));
                                float _4598 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3505 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3506 = dot(vec3(_867, _870, _873), vec3(_3498 * _3492, _3498 * _3493, _3498 * _3494));
                                float _4609 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3509 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3513 = ((_3509 * _3509) * (_3491 + (-1.0))) + 1.0;
                                float _3514 = _3451 * _3490;
                                float _3515 = _3514 * _3514;
                                float _3521 = ((1.0 - _3515) * dot(vec3(_867, _870, _873), vec3(_3438, _3439, _3440))) + _3515;
                                float _4620 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3523 = 1.0 - _3490;
                                float _3533 = (0.5 / (((_3522 * ((_3505 * _3523) + _3490)) + 9.9999999392252902907785028219223e-09) + (((_3522 * _3523) + _3490) * _3505))) * _3522;
                                float _4631 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3543 = (_3468 * _3445) * (((_3491 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3513 * _3513) * ((_3458 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3469 * _3315.y;
                                frontier_phi_83_pred_1 = _3469 * _3315.x;
                                frontier_phi_83_pred_2 = _3543 * _3327.z;
                                frontier_phi_83_pred_3 = _3543 * _3327.y;
                                frontier_phi_83_pred_4 = _3543 * _3327.x;
                                frontier_phi_83_pred_5 = _3469 * _3315.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3551 = frontier_phi_83_pred;
                            _3550 = frontier_phi_83_pred_1;
                            _3549 = frontier_phi_83_pred_2;
                            _3548 = frontier_phi_83_pred_3;
                            _3547 = frontier_phi_83_pred_4;
                            _3552 = frontier_phi_83_pred_5;
                            _3257 = _3550 + _3270;
                            _3258 = _3551 + _3271;
                            _3259 = _3552 + _3272;
                            _3254 = _3547 + _3267;
                            _3255 = _3548 + _3268;
                            _3256 = _3549 + _3269;
                            if (_3274 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3274;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3259;
                        frontier_phi_77_pred_1 = _3258;
                        frontier_phi_77_pred_2 = _3257;
                        frontier_phi_77_pred_3 = _3256;
                        frontier_phi_77_pred_4 = _3255;
                        frontier_phi_77_pred_5 = _3254;
                    }
                    _2896 = frontier_phi_77_pred;
                    _2894 = frontier_phi_77_pred_1;
                    _2892 = frontier_phi_77_pred_2;
                    _2890 = frontier_phi_77_pred_3;
                    _2888 = frontier_phi_77_pred_4;
                    _2886 = frontier_phi_77_pred_5;
                    uint _3052 = _3051 + 1u;
                    if (_3052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3045 = _2886;
                        _3046 = _2888;
                        _3047 = _2890;
                        _3048 = _2892;
                        _3049 = _2894;
                        _3050 = _2896;
                        _3051 = _3052;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2890;
                frontier_phi_58_59_ladder_1 = _2896;
                frontier_phi_58_59_ladder_2 = _2894;
                frontier_phi_58_59_ladder_3 = _2892;
                frontier_phi_58_59_ladder_4 = _2888;
                frontier_phi_58_59_ladder_5 = _2886;
            }
            else
            {
                frontier_phi_58_59_ladder = _2768;
                frontier_phi_58_59_ladder_1 = _2774;
                frontier_phi_58_59_ladder_2 = _2772;
                frontier_phi_58_59_ladder_3 = _2770;
                frontier_phi_58_59_ladder_4 = _2766;
                frontier_phi_58_59_ladder_5 = _2764;
            }
            _2885 = frontier_phi_58_59_ladder_5;
            _2887 = frontier_phi_58_59_ladder_4;
            _2889 = frontier_phi_58_59_ladder;
            _2891 = frontier_phi_58_59_ladder_3;
            _2893 = frontier_phi_58_59_ladder_2;
            _2895 = frontier_phi_58_59_ladder_1;
        }
        float _2900 = isnan(1.0) ? _911 : (isnan(_911) ? 1.0 : min(_911, 1.0));
        _2676 = (_2900 * _2891) + _2128;
        _2678 = (_2900 * _2893) + _2130;
        _2680 = (_2900 * _2895) + _2132;
        _2682 = ((_2885 * 0.039999999105930328369140625) * _2900) + _2461;
        _2684 = ((_2887 * 0.039999999105930328369140625) * _2900) + _2463;
        _2686 = ((_2889 * 0.039999999105930328369140625) * _2900) + _2465;
    }
    else
    {
        _2676 = _2128;
        _2678 = _2130;
        _2680 = _2132;
        _2682 = _2461;
        _2684 = _2463;
        _2686 = _2465;
    }
    float _4647 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4658 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _4669 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _2703 = ((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2676 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _911))) + ((_2682 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1747)) * cbPerFrame._m0[3u].x);
    float _2704 = ((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2678 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _911))) + ((_2684 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1747)) * cbPerFrame._m0[3u].x);
    float _2705 = ((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2680 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _911))) + ((_2686 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1747)) * cbPerFrame._m0[3u].x);
    uint _2706 = _242 + 6u;
    float _2714 = _848 / cbSceneParam._m0[86u].x;
    float _2715 = _849 / cbSceneParam._m0[86u].y;
    vec4 _2729 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, (log2((isnan(cbSceneParam._m0[77u].w) ? _770 : (isnan(_770) ? cbSceneParam._m0[77u].w : min(_770, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2731 = _2729.x;
    float _2732 = _2729.y;
    float _2733 = _2729.z;
    float _2734 = _2729.w;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_770 > cbSceneParam._m0[78u].w)
    {
        float _2789 = isnan(_770) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _770 : min(cbSceneParam._m0[80u].w, _770));
        float _2790 = _2789 / _770;
        float _2801 = _2790 * _821;
        float _2802 = _822 * _2790;
        float _2803 = (-0.0) - _2802;
        float _2805 = _2790 * _823;
        float _2807 = (cbSceneParam._m0[77u].w * _2803) / _2789;
        float _2808 = _2807 + cbSceneParam._m0[79u].w;
        float _2809 = cbSceneParam._m0[79u].w - _2802;
        float _2815 = sqrt(((_2801 * _2801) + (_2802 * _2802)) + (_2805 * _2805));
        float _2818 = (1.0 - (cbSceneParam._m0[77u].w / _2789)) * _2815;
        float _2823 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2825 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3002;
        if (abs((_2803 - _2807) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3002 = ((((_2808 > 0.0) ? exp2(_2823 * _2808) : (2.0 - exp2(_2825 * _2808))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2818;
        }
        else
        {
            float _2946 = 1.0 / cbSceneParam._m0[80u].x;
            float _2947 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : max(_2808, _2809));
            float _2948 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : min(_2808, _2809));
            float _2957 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : min(_2947, 0.0));
            float _2958 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : min(_2948, 0.0));
            _3002 = ((abs(_2815 / _2803) * cbSceneParam._m0[80u].y) * ((((_2957 - _2958) * 2.0) - ((exp2(_2823 * (isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0)))) - exp2(_2823 * (isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))))) * _2946)) - ((exp2(_2825 * _2957) - exp2(_2825 * _2958)) * _2946))) + (_2818 * cbSceneParam._m0[80u].z);
        }
        vec4 _3004 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, 1.0), 0.0);
        float _3013 = exp2((_3002 * (-1.44269502162933349609375)) * (1.0 - _3004.w));
        float _3014 = log2(_3013);
        float _3030 = log2(_2734);
        _2827 = (exp2(_3030 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].x)) * _3004.x) / cbSceneParam._m0[78u].x)) + _2731;
        _2829 = (exp2(_3030 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].y)) * _3004.y) / cbSceneParam._m0[78u].y)) + _2732;
        _2831 = (exp2(_3030 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].z)) * _3004.z) / cbSceneParam._m0[78u].z)) + _2733;
        _2833 = _3013 * _2734;
    }
    else
    {
        _2827 = _2731;
        _2829 = _2732;
        _2831 = _2733;
        _2833 = _2734;
    }
    bool _3040;
    vec4 _2843;
    vec4 _2865;
    float _2867;
    float _2871;
    float _2872;
    float _2873;
    float _2874;
    bool _2884;
    for (;;)
    {
        _2843 = cbMatDynParam._m0[0u];
        float _2845 = roundEven(_2843.y);
        bool _2846 = _2845 == 3.0;
        float _2847 = log2(_2833);
        float _2854 = exp2(_2847 * cbSceneParam._m0[78u].x) * _2703;
        float _2855 = exp2(_2847 * cbSceneParam._m0[78u].y) * _2704;
        float _2856 = exp2(_2847 * cbSceneParam._m0[78u].z) * _2705;
        float _2863 = _837 + (-0.5);
        _2865 = cbMtdParam._m0[1u];
        _2867 = _2865.y * _2863;
        float _2870 = (_2845 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2871 = _2870 * (_2846 ? _2854 : (_2854 + (cbSceneParam._m0[72u].w * _2827)));
        _2872 = _2870 * (_2846 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2829)));
        _2873 = _2870 * (_2846 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2831)));
        _2874 = _2863 * 0.999000012874603271484375;
        _2884 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2884)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _2874) < 0.5)
            {
                _3040 = true;
                break;
            }
        }
        uint _2981 = _886 + uint(_2843.w);
        if ((cbInstanceData._m0[_2981].w < 1.0) && ((cbInstanceData._m0[_2981].w + _2874) < 0.5))
        {
            _3040 = true;
            break;
        }
        if ((_2867 + 1.0) < _2865.x)
        {
            _3040 = true;
            break;
        }
        _3040 = false;
        break;
    }
    float _3245;
    if (_3040)
    {
        discard_state = true;
        _3245 = 0.0;
    }
    else
    {
        _3245 = cbInstanceData._m0[_2706].w;
    }
    SV_Target.x = _2871;
    SV_Target.y = _2872;
    SV_Target.z = _2873;
    SV_Target.w = _3245;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2706].w;
    discard_exit();
}


