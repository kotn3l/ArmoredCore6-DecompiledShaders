#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1161;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _296.x * cbMtdParam._m0[11u].x;
    float _302 = _296.y * cbMtdParam._m0[11u].y;
    float _303 = _296.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _378 = _376.x;
    float _390 = dot(vec4(_378, _376.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_378 - _390) * cbMtdParam._m0[24u].z) + _390) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3492 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _421 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _272.x) * ((_408 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301);
    float _424 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _272.y) * ((_408 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302);
    float _427 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _272.z) * ((_408 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303);
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _462 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _464 = _462.x;
    float _465 = _462.y;
    float _466 = _462.z;
    float _475 = ((_445.z - _466) * _408) + _466;
    float _478 = ((((_445.x - _464) * _408) + _464) * 2.0) + (-1.0);
    float _480 = ((((_445.y - _465) * _408) + _465) * 2.0) + (-1.0);
    float _481 = dot(vec2(_478, _480), vec2(_478, _480));
    float _3503 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _514 = (((_502.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _478;
    float _515 = (((_502.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _480;
    float _518 = fma(_486, _220, fma(_515, _227, _514 * _213));
    float _521 = fma(_486, _221, fma(_515, _228, _514 * _214));
    float _524 = fma(_486, _222, fma(_515, _229, _514 * _215));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _557 = _555.x;
    float _558 = 1.0 - _557;
    float _564 = (cbMtdParam._m0[19u].x + dot(vec4(_528 * _518, _528 * _521, _528 * _524, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_557 - _558) * cbMtdParam._m0[24u].w) + _558) * cbMtdParam._m0[21u].z);
    float _3514 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _572 = (_565 * (cbMtdParam._m0[17u].x - _421)) + _421;
    float _573 = (_565 * (cbMtdParam._m0[17u].y - _424)) + _424;
    float _574 = (_565 * (cbMtdParam._m0[17u].z - _427)) + _427;
    float _578 = (cbMtdParam._m0[19u].w * (_502.z - _475)) + _475;
    vec4 _591 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _598 = (_591.x * 2.0) + (-1.0);
    float _599 = (_591.y * 2.0) + (-1.0);
    float _600 = dot(vec2(_598, _599), vec2(_598, _599));
    float _3525 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _608 = ((_591.z - _578) * _565) + _578;
    float _618 = ((sqrt(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) - _486) * _565) + _486;
    float _621 = (((_598 - _514) * _565) + _514) + (cbMtdParam._m0[21u].x * _514);
    float _622 = (((_599 - _515) * _565) + _515) + (cbMtdParam._m0[21u].x * _515);
    float _626 = cbMtdParam._m0[22u].x + _502.w;
    float _629 = fma(_618, _220, fma(_622, _227, _621 * _213));
    float _632 = fma(_618, _221, fma(_622, _228, _621 * _214));
    float _635 = fma(_618, _222, fma(_622, _229, _621 * _215));
    float _639 = inversesqrt(dot(vec3(_629, _632, _635), vec3(_629, _632, _635)));
    float _640 = _639 * _629;
    float _641 = _639 * _632;
    float _642 = _639 * _635;
    float _3536 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _643 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3558 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3569 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3580 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _661 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _712 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _702);
    float _713 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _702);
    float _714 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _702);
    float _718 = inversesqrt(dot(vec3(_712, _713, _714), vec3(_712, _713, _714)));
    float _719 = _712 * _718;
    float _720 = _713 * _718;
    float _721 = _714 * _718;
    float _727 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _728 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _746 = fma(_642, cbSceneParam._m0[5u].z, fma(_641, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _640));
    float _749 = fma(_642, cbSceneParam._m0[6u].z, fma(_641, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _640));
    float _752 = fma(_642, cbSceneParam._m0[7u].z, fma(_641, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _640));
    uint _766 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _772 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_766].x;
    float _773 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_766].y;
    float _774 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_766].z;
    float _3591 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _3613 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    vec4 _786 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _727, cbSceneParam._m0[86u].y * _728));
    float _790 = ((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * TEXCOORD_5.w) * _786.x;
    float _791 = dot(vec3(_640, _641, _642), vec3(_719, _720, _721));
    float _794 = _791 * 2.0;
    float _798 = (_794 * _640) - _719;
    float _799 = (_794 * _641) - _720;
    float _800 = (_794 * _642) - _721;
    float _804 = abs(dot(vec3(_719, _720, _721), vec3(_640, _641, _642)));
    float _3624 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _806 = sqrt(_643);
    float _819 = exp2((_806 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_806 * 3.0));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1160;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _885 = fma(_859, cbModelParam._m0[26u].z, fma(_855, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851));
        float _889 = fma(_859, cbModelParam._m0[27u].z, fma(_855, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851));
        float _893 = fma(_859, cbModelParam._m0[28u].z, fma(_855, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851));
        float _918 = _851 + _640;
        float _919 = _855 + _641;
        float _920 = _859 + _642;
        float _930 = fma(_920, cbModelParam._m0[26u].z, fma(_919, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _918)) - _885;
        float _931 = fma(_920, cbModelParam._m0[27u].z, fma(_919, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _918)) - _889;
        float _932 = fma(_920, cbModelParam._m0[28u].z, fma(_919, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _918)) - _893;
        float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
        float _949 = ((_936 * _930) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_885 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_936 * _931) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_889 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_936 * _932) / cbModelParam._m0[34u].z) + ((((((_893 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _988 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_954.x + (-0.5));
        float _990 = _988 * (_954.y + (-0.5));
        float _991 = _988 * (_954.z + (-0.5));
        float _998 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_961.x + (-0.5));
        float _1000 = _998 * (_961.y + (-0.5));
        float _1001 = _998 * (_961.z + (-0.5));
        float _1008 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_968.x + (-0.5));
        float _1010 = _1008 * (_968.y + (-0.5));
        float _1011 = _1008 * (_968.z + (-0.5));
        float _1018 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_975.x + (-0.5));
        float _1020 = _1018 * (_975.y + (-0.5));
        float _1021 = _1018 * (_975.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1042 = (dot(vec3(_640, _641, _642), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1052 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3672 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1054 + 1.0))) + _1059) * _1022;
        float _1069 = _990 * 0.5;
        float _1070 = _1000 * 0.5;
        float _1071 = _1010 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_640, _641, _642), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3705 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1096 + 1.0))) + _1101) * _1023;
        float _1111 = _991 * 0.5;
        float _1112 = _1001 * 0.5;
        float _1113 = _1011 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_640, _641, _642), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3738 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1138 + 1.0))) + _1143) * _1024;
        _1160 = _991;
        _1162 = _990;
        _1163 = _989;
        _1164 = _1001;
        _1165 = _1000;
        _1166 = _999;
        _1167 = _1011;
        _1168 = _1010;
        _1169 = _1009;
        _1170 = _1024;
        _1171 = _1023;
        _1172 = _1022;
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
    }
    else
    {
        _1160 = _1161;
        _1162 = _1161;
        _1163 = _1161;
        _1164 = _1161;
        _1165 = _1161;
        _1166 = _1161;
        _1167 = _1161;
        _1168 = _1161;
        _1169 = _1161;
        _1170 = _1161;
        _1171 = _1161;
        _1172 = _1161;
        _1173 = 0.0;
        _1174 = 0.0;
        _1175 = 0.0;
    }
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1200 = fma(_859, cbModelParam._m0[30u].z, fma(_855, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _851));
        float _1204 = fma(_859, cbModelParam._m0[31u].z, fma(_855, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _851));
        float _1208 = fma(_859, cbModelParam._m0[32u].z, fma(_855, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _851));
        float _1231 = _851 + _640;
        float _1232 = _855 + _641;
        float _1233 = _859 + _642;
        float _1243 = fma(_1233, cbModelParam._m0[30u].z, fma(_1232, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1231)) - _1200;
        float _1244 = fma(_1233, cbModelParam._m0[31u].z, fma(_1232, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1231)) - _1204;
        float _1245 = fma(_1233, cbModelParam._m0[32u].z, fma(_1232, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1231)) - _1208;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1262 = ((_1249 * _1243) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1200 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1244) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1204 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1249 * _1245) / cbModelParam._m0[35u].z) + ((((((_1208 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        float _1299 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1266.x + (-0.5));
        float _1301 = _1299 * (_1266.y + (-0.5));
        float _1302 = _1299 * (_1266.z + (-0.5));
        float _1309 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1273.x + (-0.5));
        float _1311 = _1309 * (_1273.y + (-0.5));
        float _1312 = _1309 * (_1273.z + (-0.5));
        float _1319 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1280.x + (-0.5));
        float _1321 = _1319 * (_1280.y + (-0.5));
        float _1322 = _1319 * (_1280.z + (-0.5));
        float _1329 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1287.x + (-0.5));
        float _1331 = _1329 * (_1287.y + (-0.5));
        float _1332 = _1329 * (_1287.z + (-0.5));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = _1300 * 0.5;
        float _1337 = _1310 * 0.5;
        float _1338 = _1320 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_640, _641, _642), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3801 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1363 + 1.0))) + _1368) * _1333;
        float _1378 = _1301 * 0.5;
        float _1379 = _1311 * 0.5;
        float _1380 = _1321 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_640, _641, _642), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3834 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1405 + 1.0))) + _1410) * _1334;
        float _1420 = _1302 * 0.5;
        float _1421 = _1312 * 0.5;
        float _1422 = _1322 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_640, _641, _642), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _3867 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1447 + 1.0))) + _1452) * _1335;
        _1469 = _1302;
        _1470 = _1301;
        _1471 = _1300;
        _1472 = _1312;
        _1473 = _1311;
        _1474 = _1310;
        _1475 = _1322;
        _1476 = _1321;
        _1477 = _1320;
        _1478 = _1335;
        _1479 = _1334;
        _1480 = _1333;
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
    }
    else
    {
        _1469 = _1161;
        _1470 = _1161;
        _1471 = _1161;
        _1472 = _1161;
        _1473 = _1161;
        _1474 = _1161;
        _1475 = _1161;
        _1476 = _1161;
        _1477 = _1161;
        _1478 = _1161;
        _1479 = _1161;
        _1480 = _1161;
        _1481 = 0.0;
        _1482 = 0.0;
        _1483 = 0.0;
    }
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1173)) + _1173;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1174)) + _1174;
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1175)) + _1175;
    float _1516 = fma(_1495, cbSceneParam._m0[89u].z, fma(_1494, cbSceneParam._m0[89u].y, _1493 * cbSceneParam._m0[89u].x));
    float _1519 = fma(_1495, cbSceneParam._m0[90u].z, fma(_1494, cbSceneParam._m0[90u].y, _1493 * cbSceneParam._m0[90u].x));
    float _1522 = fma(_1495, cbSceneParam._m0[91u].z, fma(_1494, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1493));
    float _1537 = _798 * 0.5;
    float _1538 = _799 * 0.5;
    float _1539 = _800 * 0.5;
    float _1540 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1543 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1546 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1580;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1553 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1160, _1164, _1167, _1170));
        float _1557 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1162, _1165, _1168, _1171));
        float _1561 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1163, _1166, _1169, _1172));
        float _1568 = dot(vec4(cbModelParam._m0[39u]), vec4(_1537, _1538, _1539, 1.0));
        _1580 = dot(vec3(isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1568) ? 0.0 : (isnan(0.0) ? _1568 : max(0.0, _1568))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1580 = 1.0;
    }
    float _1591;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1582 = dot(vec4(cbModelParam._m0[40u]), vec4(_1537, _1538, _1539, 1.0));
        _1591 = dot(vec3(isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1591 = 1.0;
    }
    float _1595 = (_1591 * cbModelParam._m0[1u].x) + (_1580 * (1.0 - cbModelParam._m0[1u].x));
    float _1605 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _643);
    float _1606 = isnan(_1605) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1605 : min(cbModelParam._m0[25u].z, _1605));
    float _1687;
    float _1689;
    float _1691;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1654 = fma(_859, cbModelParam._m0[13u].z, fma(_855, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _851)) + cbModelParam._m0[13u].w;
        float _1658 = fma(_859, cbModelParam._m0[14u].z, fma(_855, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _851)) + cbModelParam._m0[14u].w;
        float _1662 = fma(_859, cbModelParam._m0[15u].z, fma(_855, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _851)) + cbModelParam._m0[15u].w;
        float _1665 = fma(_800, cbModelParam._m0[13u].z, fma(_799, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _798));
        float _1668 = fma(_800, cbModelParam._m0[14u].z, fma(_799, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _798));
        float _1671 = fma(_800, cbModelParam._m0[15u].z, fma(_799, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _798));
        float _1699;
        if (_1665 > 0.0)
        {
            _1699 = abs((1.0 - _1654) / _1665);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1654 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1699 = frontier_phi_14_12_ladder;
        }
        float _1921;
        if (_1668 > 0.0)
        {
            _1921 = abs((1.0 - _1658) / _1668);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1658 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1921 = frontier_phi_23_19_ladder;
        }
        float _2167;
        if (_1671 > 0.0)
        {
            _2167 = abs((1.0 - _1662) / _1671);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1662 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2167 = frontier_phi_35_30_ladder;
        }
        float _2169 = isnan(_1921) ? _1699 : (isnan(_1699) ? _1921 : min(_1699, _1921));
        float _2170 = isnan(_2167) ? _2169 : (isnan(_2169) ? _2167 : min(_2169, _2167));
        float _2174 = (_2170 * _1665) + _1654;
        float _2175 = (_2170 * _1668) + _1658;
        float _2176 = (_2170 * _1671) + _1662;
        float _2177 = _2170 * 9.9999997473787516355514526367188e-05;
        float _2179 = (-1.0) - _2177;
        float _2181 = _2177 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2176 > _2181) || ((_2176 < _2179) || ((_2175 > _2181) || ((_2175 < _2179) || ((_2174 < _2179) || (_2174 > _2181))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2300 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2176, cbModelParam._m0[9u].z, fma(_2175, cbModelParam._m0[9u].y, _2174 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2176, cbModelParam._m0[10u].z, fma(_2175, cbModelParam._m0[10u].y, _2174 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2176, cbModelParam._m0[11u].z, fma(_2175, cbModelParam._m0[11u].y, _2174 * cbModelParam._m0[11u].x))), _1606);
            frontier_phi_13_35_ladder = _2300.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2300.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2300.x * cbModelParam._m0[1u].y;
        }
        _1687 = frontier_phi_13_35_ladder_2;
        _1689 = frontier_phi_13_35_ladder_1;
        _1691 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1675 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_798, _799, _800), _1606);
        _1687 = _1675.x * cbModelParam._m0[1u].y;
        _1689 = _1675.y * cbModelParam._m0[1u].y;
        _1691 = _1675.z * cbModelParam._m0[1u].y;
    }
    float _1695 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _643);
    float _1696 = isnan(_1695) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1695 : min(cbModelParam._m0[25u].w, _1695));
    float _1786;
    float _1788;
    float _1790;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1750 = fma(_859, cbModelParam._m0[21u].z, fma(_855, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _851)) + cbModelParam._m0[21u].w;
        float _1754 = fma(_859, cbModelParam._m0[22u].z, fma(_855, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _851)) + cbModelParam._m0[22u].w;
        float _1758 = fma(_859, cbModelParam._m0[23u].z, fma(_855, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _851)) + cbModelParam._m0[23u].w;
        float _1761 = fma(_800, cbModelParam._m0[21u].z, fma(_799, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _798));
        float _1764 = fma(_800, cbModelParam._m0[22u].z, fma(_799, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _798));
        float _1767 = fma(_800, cbModelParam._m0[23u].z, fma(_799, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _798));
        float _1926;
        if (_1761 > 0.0)
        {
            _1926 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1926 = frontier_phi_25_21_ladder;
        }
        float _2194;
        if (_1764 > 0.0)
        {
            _2194 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2194 = frontier_phi_37_32_ladder;
        }
        float _2399;
        if (_1767 > 0.0)
        {
            _2399 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2399 = frontier_phi_46_43_ladder;
        }
        float _2401 = isnan(_2194) ? _1926 : (isnan(_1926) ? _2194 : min(_1926, _2194));
        float _2402 = isnan(_2399) ? _2401 : (isnan(_2401) ? _2399 : min(_2401, _2399));
        float _2406 = (_2402 * _1761) + _1750;
        float _2407 = (_2402 * _1764) + _1754;
        float _2408 = (_2402 * _1767) + _1758;
        float _2409 = _2402 * 9.9999997473787516355514526367188e-05;
        float _2410 = (-1.0) - _2409;
        float _2412 = _2409 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2408 > _2412) || ((_2408 < _2410) || ((_2407 > _2412) || ((_2407 < _2410) || ((_2406 < _2410) || (_2406 > _2412))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2607 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2408, cbModelParam._m0[17u].z, fma(_2407, cbModelParam._m0[17u].y, _2406 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2408, cbModelParam._m0[18u].z, fma(_2407, cbModelParam._m0[18u].y, _2406 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2408, cbModelParam._m0[19u].z, fma(_2407, cbModelParam._m0[19u].y, _2406 * cbModelParam._m0[19u].x))), _1696);
            frontier_phi_22_46_ladder = _2607.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2607.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2607.x * cbModelParam._m0[1u].z;
        }
        _1786 = frontier_phi_22_46_ladder_2;
        _1788 = frontier_phi_22_46_ladder_1;
        _1790 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1770 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_798, _799, _800), _1696);
        _1786 = _1770.x * cbModelParam._m0[1u].z;
        _1788 = _1770.y * cbModelParam._m0[1u].z;
        _1790 = _1770.z * cbModelParam._m0[1u].z;
    }
    float _1802 = ((((1.0 - _819) * ((_806 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_819 * _806)) * _790;
    float _1803 = _1802 * ((cbModelParam._m0[1u].w * (_1786 - _1687)) + _1687);
    float _1804 = _1802 * ((cbModelParam._m0[1u].w * (_1788 - _1689)) + _1689);
    float _1805 = _1802 * ((cbModelParam._m0[1u].w * (_1790 - _1691)) + _1691);
    float _1808 = fma(_1805, cbSceneParam._m0[89u].z, fma(_1804, cbSceneParam._m0[89u].y, _1803 * cbSceneParam._m0[89u].x));
    float _1811 = fma(_1805, cbSceneParam._m0[90u].z, fma(_1804, cbSceneParam._m0[90u].y, _1803 * cbSceneParam._m0[90u].x));
    float _1814 = fma(_1805, cbSceneParam._m0[91u].z, fma(_1804, cbSceneParam._m0[91u].y, _1803 * cbSceneParam._m0[91u].x));
    vec4 _1822 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_727, _728));
    float _1824 = _1822.w;
    float _1836 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1824);
    float _1837 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1824);
    float _1838 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1824);
    uvec4 _1842 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1844 = _1842.x * 14u;
    uint _1845 = _1844 + 13u;
    float _1852 = _790 + (-1.0);
    float _1857 = (cbLight._m0[_1845].x * _1852) + 1.0;
    float _1858 = (cbLight._m0[_1845].y * _1852) + 1.0;
    float _1859 = (cbLight._m0[_1845].z * _1852) + 1.0;
    float _1860 = (cbLight._m0[_1845].w * _1852) + 1.0;
    uint _1861 = _1844 + 5u;
    float _1867 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1871 = _1844 + 4u;
    float _1880 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1884 = _1844 | 1u;
    float _1895 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_640, _641, _642));
    float _1898 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_640, _641, _642));
    float _4003 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _4014 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1903 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1905 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.3183098733425140380859375;
    float _1912 = ((cbLight._m0[_1861].x * _1867) * _1905) + (((cbLight._m0[_1871].x * _1836) * _1880) * _1903);
    float _1913 = ((_1867 * cbLight._m0[_1861].y) * _1905) + (((cbLight._m0[_1871].y * _1837) * _1880) * _1903);
    float _1914 = ((_1867 * cbLight._m0[_1861].z) * _1905) + (((cbLight._m0[_1871].z * _1838) * _1880) * _1903);
    uvec4 _1918 = floatBitsToUint(cbLight._m0[_1844 + 12u]);
    bool _1920 = _1918.x == 0u;
    float _1931;
    float _1933;
    float _1935;
    if (_1920)
    {
        _1931 = _1912;
        _1933 = _1913;
        _1935 = _1914;
    }
    else
    {
        uint _1939 = _1844 + 6u;
        float _1955 = (dot(vec3(cbLight._m0[_1844 + 2u].xyz), vec3(_640, _641, _642)) * 0.5) + 0.5;
        float _1956 = _1955 * _1955;
        float _4025 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1957 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1958 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _1931 = (((cbLight._m0[_1939].x * 0.3183098733425140380859375) * _1957) * _1958) + _1912;
        _1933 = (((cbLight._m0[_1939].y * 0.3183098733425140380859375) * _1957) * _1958) + _1913;
        _1935 = (((cbLight._m0[_1939].z * 0.3183098733425140380859375) * _1957) * _1958) + _1914;
    }
    bool _1938 = _1918.y == 0u;
    float _1976;
    float _1978;
    float _1980;
    if (_1938)
    {
        _1976 = _1931;
        _1978 = _1933;
        _1980 = _1935;
    }
    else
    {
        uint _2138 = _1844 + 7u;
        float _2154 = (dot(vec3(cbLight._m0[_1844 + 3u].xyz), vec3(_640, _641, _642)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4041 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2157 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _1976 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _1931;
        _1978 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _1933;
        _1980 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _1935;
    }
    uint _1983 = _1844 + 8u;
    float _1996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _643) * 0.949999988079071044921875);
    float _1997 = _1996 * _1996;
    float _1998 = cbLight._m0[_1844].x + _719;
    float _1999 = cbLight._m0[_1844].y + _720;
    float _2000 = cbLight._m0[_1844].z + _721;
    float _2004 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
    float _2005 = _2004 * _1998;
    float _2006 = _2004 * _1999;
    float _2007 = _2004 * _2000;
    float _2008 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_1844].xyz));
    float _4057 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _2012 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _2013 = dot(vec3(_640, _641, _642), vec3(_2005, _2006, _2007));
    float _4079 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _2017 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2005, _2006, _2007));
    float _4090 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2021 = _1997 * _1997;
    float _2025 = ((_2016 * _2016) * (_2021 + (-1.0))) + 1.0;
    float _2036 = (exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2037 = 1.0 - _1997;
    float _2048 = (0.5 / (((_2012 * ((_2011 * _2037) + _1997)) + 9.9999999392252902907785028219223e-09) + (((_2012 * _2037) + _1997) * _2011))) * _2011;
    float _4101 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2050 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2021 / ((_2025 * _2025) * 3.141590118408203125));
    uint _2064 = _1844 + 9u;
    float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1884].w)) * _643) * 0.949999988079071044921875);
    float _2076 = _2075 * _2075;
    float _2077 = cbLight._m0[_1884].x + _719;
    float _2078 = cbLight._m0[_1884].y + _720;
    float _2079 = cbLight._m0[_1884].z + _721;
    float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
    float _2084 = _2083 * _2077;
    float _2085 = _2083 * _2078;
    float _2086 = _2083 * _2079;
    float _2087 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_1884].xyz));
    float _4112 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2091 = dot(vec3(_640, _641, _642), vec3(_2084, _2085, _2086));
    float _4123 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2095 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_2084, _2085, _2086));
    float _4134 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2099 = _2076 * _2076;
    float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
    float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2113 = 1.0 - _2076;
    float _2123 = (0.5 / (((_2012 * ((_2090 * _2113) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_2012 * _2113) + _2076) * _2090))) * _2090;
    float _4145 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2125 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
    float _2135 = (((_2112 * cbLight._m0[_2064].x) * _2125) * _1867) + ((((cbLight._m0[_1983].x * _1836) * _2036) * _2050) * _1880);
    float _2136 = (((_2112 * cbLight._m0[_2064].y) * _2125) * _1867) + ((((cbLight._m0[_1983].y * _1837) * _2036) * _2050) * _1880);
    float _2137 = (((_2112 * cbLight._m0[_2064].z) * _2125) * _1867) + ((((cbLight._m0[_1983].z * _1838) * _2036) * _2050) * _1880);
    float _2199;
    float _2201;
    float _2203;
    if (_1920)
    {
        _2199 = _2135;
        _2201 = _2136;
        _2203 = _2137;
    }
    else
    {
        uint _2205 = _1844 + 2u;
        uint _2209 = _1844 + 10u;
        float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _643) * 0.949999988079071044921875);
        float _2224 = _2223 * _2223;
        float _2225 = cbLight._m0[_2205].x + _719;
        float _2226 = cbLight._m0[_2205].y + _720;
        float _2227 = cbLight._m0[_2205].z + _721;
        float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
        float _2232 = _2231 * _2225;
        float _2233 = _2231 * _2226;
        float _2234 = _2231 * _2227;
        float _2235 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_2205].xyz));
        float _4156 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2239 = dot(vec3(_640, _641, _642), vec3(_2232, _2233, _2234));
        float _4167 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2243 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2232, _2233, _2234));
        float _4178 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2247 = _2224 * _2224;
        float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
        float _2260 = (exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2261 = 1.0 - _2224;
        float _2271 = (0.5 / (((_2012 * ((_2238 * _2261) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2012 * _2261) + _2224) * _2238))) * _2238;
        float _4189 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2273 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
        float _2274 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2199 = (((_2260 * cbLight._m0[_2209].x) * _2273) * _2274) + _2135;
        _2201 = (((_2260 * cbLight._m0[_2209].y) * _2273) * _2274) + _2136;
        _2203 = (((_2260 * cbLight._m0[_2209].z) * _2273) * _2274) + _2137;
    }
    float _2309;
    float _2311;
    float _2313;
    if (_1938)
    {
        _2309 = _2199;
        _2311 = _2201;
        _2313 = _2203;
    }
    else
    {
        uint _2320 = _1844 + 3u;
        uint _2324 = _1844 + 11u;
        float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _643) * 0.949999988079071044921875);
        float _2339 = _2338 * _2338;
        float _2340 = cbLight._m0[_2320].x + _719;
        float _2341 = cbLight._m0[_2320].y + _720;
        float _2342 = cbLight._m0[_2320].z + _721;
        float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
        float _2347 = _2346 * _2340;
        float _2348 = _2346 * _2341;
        float _2349 = _2346 * _2342;
        float _2350 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_2320].xyz));
        float _4205 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2354 = dot(vec3(_640, _641, _642), vec3(_2347, _2348, _2349));
        float _4216 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2358 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2347, _2348, _2349));
        float _4227 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2362 = _2339 * _2339;
        float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
        float _2375 = (exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2376 = 1.0 - _2339;
        float _2386 = (0.5 / (((_2012 * ((_2353 * _2376) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2012 * _2376) + _2339) * _2353))) * _2353;
        float _4238 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2388 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
        float _2389 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2309 = (((_2375 * cbLight._m0[_2324].x) * _2388) * _2389) + _2199;
        _2311 = (((_2375 * cbLight._m0[_2324].y) * _2388) * _2389) + _2201;
        _2313 = (((_2375 * cbLight._m0[_2324].z) * _2388) * _2389) + _2203;
    }
    float _2524;
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    float _2534;
    if (_1842.y == 0u)
    {
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2464;
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2464;
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2464;
        uvec4 _2479 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2480 = _2479.x;
        uint _2491 = uint((float(_2479.y) * floor(float(uint(cbSceneParam._m0[85u].y * _728) / _2480))) + floor(float(uint(cbSceneParam._m0[85u].x * _727) / _2480)));
        float _2501 = (log2(_2467 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2502 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        uint _2505 = uint(isnan(14.0) ? _2502 : (isnan(_2502) ? 14.0 : min(_2502, 14.0)));
        uvec4 _2510 = texelFetch(g_lightClusterGridBuffer, int(((_2505 << 2u) + (_2491 << 6u)) >> 2u));
        uint _2511 = _2510.x;
        uint _2512 = _2479.z;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        if (((((1u << ((_2512 >> 4u) & 15u)) + 4294967295u) & _2511) == 0u) || ((_2512 & 240u) == 0u))
        {
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
        }
        else
        {
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2623;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            uint _2763 = 0u;
            uint _2772;
            bool _2773;
            for (;;)
            {
                _2772 = texelFetch(g_lightClassification, int((((_2505 << 5u) + (_2491 << 9u)) + (_2763 << 2u)) >> 2u)).x;
                _2773 = _2772 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2773)
                {
                    frontier_phi_61_pred = _2757;
                    frontier_phi_61_pred_1 = _2762;
                    frontier_phi_61_pred_2 = _2761;
                    frontier_phi_61_pred_3 = _2760;
                    frontier_phi_61_pred_4 = _2759;
                    frontier_phi_61_pred_5 = _2758;
                }
                else
                {
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    uint _2887;
                    _2881 = _2757;
                    _2882 = _2758;
                    _2883 = _2759;
                    _2884 = _2760;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2772;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    for (;;)
                    {
                        uint _2891 = uint(findLSB(_2887)) + (_2763 << 5u);
                        uint _2888 = (_2887 + 4294967295u) & _2887;
                        uint _2893 = _2891 * 48u;
                        vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2893)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 3u)).x));
                        uint _2913 = (_2891 * 48u) + 4u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 3u)).x));
                        uint _2932 = (_2891 * 48u) + 8u;
                        vec3 _2943 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x));
                        float _2947 = _2907.x - _2465;
                        float _2948 = _2907.y - _2466;
                        float _2949 = _2907.z - _2467;
                        float _2950 = dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949));
                        float _2953 = inversesqrt(_2950);
                        float _2954 = _2953 * _2947;
                        float _2955 = _2953 * _2948;
                        float _2956 = _2953 * _2949;
                        float _2957 = dot(vec3(_746, _749, _752), vec3(_2954, _2955, _2956));
                        float _2962 = 1.0 - (_2950 * _2907.w);
                        float _4264 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2963 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2964 = sqrt(_2950) * _2926.w;
                        float _2967 = 1.39999997615814208984375 / (_2964 + 1.39999997615814208984375);
                        float _2968 = _2967 * _2967;
                        float _2971 = ((1.0 - _2968) * _2957) + _2968;
                        float _2974 = _2964 * _2964;
                        float _2978 = ((isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))) * _2963) / ((_2974 * 0.699999988079071044921875) + 1.0);
                        float _2982 = (-0.0) - _2465;
                        float _2983 = (-0.0) - _2466;
                        float _2984 = (-0.0) - _2467;
                        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2999 = exp2(log2(1.0 / ((_2974 * 3.5) + 5.0)) * 0.25);
                        float _3000 = 1.0 - _806;
                        float _3007 = sqrt(1.0 - ((1.0 - (_3000 * _3000)) * (1.0 - (_2999 * _2999))));
                        float _3008 = _3007 * _3007;
                        float _3009 = _3008 * _3008;
                        float _3010 = _2989 + _2954;
                        float _3011 = _2990 + _2955;
                        float _3012 = _2991 + _2956;
                        float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                        float _3020 = dot(vec3(_746, _749, _752), vec3(_2989, _2990, _2991));
                        float _4280 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3023 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _3024 = dot(vec3(_746, _749, _752), vec3(_3016 * _3010, _3016 * _3011, _3016 * _3012));
                        float _4291 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3027 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _3031 = ((_3027 * _3027) * (_3009 + (-1.0))) + 1.0;
                        float _3032 = _2967 * _3008;
                        float _3033 = _3032 * _3032;
                        float _3036 = ((1.0 - _3033) * _2957) + _3033;
                        float _4302 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3037 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _3038 = 1.0 - _3008;
                        float _3048 = (0.5 / (((_3037 * ((_3023 * _3038) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_3037 * _3038) + _3008) * _3023))) * _3037;
                        float _4313 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3059 = (((_3009 * 3.1415927410125732421875) * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) / ((_3031 * _3031) * ((_2974 * 2.1991131305694580078125) + 3.141590118408203125))) * _2963;
                        _2816 = (_2978 * _2926.x) + _2884;
                        _2817 = (_2978 * _2926.y) + _2885;
                        _2818 = (_2978 * _2926.z) + _2886;
                        _2813 = (_3059 * _2943.x) + _2881;
                        _2814 = (_3059 * _2943.y) + _2882;
                        _2815 = (_3059 * _2943.z) + _2883;
                        if (_2888 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2881 = _2813;
                            _2882 = _2814;
                            _2883 = _2815;
                            _2884 = _2816;
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2888;
                        }
                    }
                    frontier_phi_61_pred = _2813;
                    frontier_phi_61_pred_1 = _2818;
                    frontier_phi_61_pred_2 = _2817;
                    frontier_phi_61_pred_3 = _2816;
                    frontier_phi_61_pred_4 = _2815;
                    frontier_phi_61_pred_5 = _2814;
                }
                _2613 = frontier_phi_61_pred;
                _2623 = frontier_phi_61_pred_1;
                _2621 = frontier_phi_61_pred_2;
                _2619 = frontier_phi_61_pred_3;
                _2617 = frontier_phi_61_pred_4;
                _2615 = frontier_phi_61_pred_5;
                uint _2764 = _2763 + 1u;
                if (_2764 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2757 = _2613;
                    _2758 = _2615;
                    _2759 = _2617;
                    _2760 = _2619;
                    _2761 = _2621;
                    _2762 = _2623;
                    _2763 = _2764;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
        }
        uvec4 _2626 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2627 = _2626.z;
        uint _2629 = (_2627 >> 8u) & 15u;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        if (((4294967295u << _2629) & _2511) == 0u)
        {
            _2725 = _2612;
            _2727 = _2614;
            _2729 = _2616;
            _2731 = _2618;
            _2733 = _2620;
            _2735 = _2622;
        }
        else
        {
            float _2750 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
            float _2751 = _2750 * _2465;
            float _2752 = _2750 * _2466;
            float _2753 = _2750 * _2467;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2629 < ((_2627 >> 12u) & 15u))
            {
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2864 = _2612;
                float _2865 = _2614;
                float _2866 = _2616;
                float _2867 = _2618;
                float _2868 = _2620;
                float _2869 = _2622;
                uint _2870 = _2629;
                uint _2879;
                bool _2880;
                for (;;)
                {
                    _2879 = texelFetch(g_lightClassification, int((((_2505 << 5u) + (_2491 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                    _2880 = _2879 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2880)
                    {
                        frontier_phi_67_pred = _2867;
                        frontier_phi_67_pred_1 = _2868;
                        frontier_phi_67_pred_2 = _2869;
                        frontier_phi_67_pred_3 = _2866;
                        frontier_phi_67_pred_4 = _2865;
                        frontier_phi_67_pred_5 = _2864;
                    }
                    else
                    {
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3077 = _2864;
                        float _3078 = _2865;
                        float _3079 = _2866;
                        float _3080 = _2867;
                        float _3081 = _2868;
                        float _3082 = _2869;
                        uint _3083 = _2879;
                        uint _3084;
                        vec4 _3109;
                        float _3110;
                        vec4 _3125;
                        vec3 _3137;
                        vec4 _3152;
                        vec4 _3168;
                        float _3214;
                        bool _3215;
                        for (;;)
                        {
                            uint _3094 = ((_2870 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3083));
                            _3084 = (_3083 + 4294967295u) & _3083;
                            uint _3096 = _3094 * 40u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            _3110 = _3109.w;
                            uint _3112 = (_3094 * 40u) + 4u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3127 = (_3094 * 40u) + 8u;
                            _3137 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x));
                            uint _3139 = (_3094 * 40u) + 16u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3155 = (_3094 * 40u) + 20u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3170 = (_3094 * 40u) + 24u;
                            vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3189 = (_3094 * 40u) + 28u;
                            vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            _3214 = fma(_2467, _3202.z, fma(_2466, _3202.y, _3202.x * _2465)) + _3202.w;
                            _3215 = !((fma(_2467, _3183.z, fma(_2466, _3183.y, _3183.x * _2465)) + _3183.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3215)
                            {
                                float _3242 = _3109.x - _2465;
                                float _3243 = _3109.y - _2466;
                                float _3244 = _3109.z - _2467;
                                float _3245 = dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244));
                                float _3248 = inversesqrt(_3245);
                                float _3249 = _3248 * _3242;
                                float _3250 = _3248 * _3243;
                                float _3251 = _3248 * _3244;
                                float _3255 = 1.0 - (_3245 / (_3110 * _3110));
                                float _4324 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3260 = sqrt(_3245) * _3125.w;
                                float _3262 = 1.39999997615814208984375 / (_3260 + 1.39999997615814208984375);
                                float _3263 = _3262 * _3262;
                                float _3266 = ((1.0 - _3263) * dot(vec3(_3249, _3250, _3251), vec3(_746, _749, _752))) + _3263;
                                float _3269 = _3260 * _3260;
                                float _3273 = (fma(_2467, _3152.z, fma(_2466, _3152.y, _3152.x * _2465)) + _3152.w) / _3214;
                                float _3274 = (fma(_2467, _3168.z, fma(_2466, _3168.y, _3168.x * _2465)) + _3168.w) / _3214;
                                float _3278 = 1.0 - dot(vec2(_3273, _3274), vec2(_3273, _3274));
                                float _4340 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3280 = _3279 * (((isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))) * _3256) / ((_3269 * 0.699999988079071044921875) + 1.0));
                                float _3292 = exp2(log2(1.0 / ((_3269 * 3.5) + 5.0)) * 0.25);
                                float _3293 = 1.0 - _806;
                                float _3300 = sqrt(1.0 - ((1.0 - (_3293 * _3293)) * (1.0 - (_3292 * _3292))));
                                float _3301 = _3300 * _3300;
                                float _3302 = _3301 * _3301;
                                float _3303 = _3249 - _2751;
                                float _3304 = _3250 - _2752;
                                float _3305 = _3251 - _2753;
                                float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
                                float _3313 = dot(vec3(_746, _749, _752), vec3((-0.0) - _2751, (-0.0) - _2752, (-0.0) - _2753));
                                float _4351 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3316 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3317 = dot(vec3(_746, _749, _752), vec3(_3309 * _3303, _3309 * _3304, _3309 * _3305));
                                float _4362 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3320 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3324 = ((_3320 * _3320) * (_3302 + (-1.0))) + 1.0;
                                float _3325 = _3262 * _3301;
                                float _3326 = _3325 * _3325;
                                float _3332 = ((1.0 - _3326) * dot(vec3(_746, _749, _752), vec3(_3249, _3250, _3251))) + _3326;
                                float _4373 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3334 = 1.0 - _3301;
                                float _3344 = (0.5 / (((_3333 * ((_3316 * _3334) + _3301)) + 9.9999999392252902907785028219223e-09) + (((_3333 * _3334) + _3301) * _3316))) * _3333;
                                float _4384 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3354 = (_3279 * _3256) * (((_3302 * 3.1415927410125732421875) * (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) / ((_3324 * _3324) * ((_3269 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3354 * _3137.x;
                                frontier_phi_73_pred_1 = _3354 * _3137.y;
                                frontier_phi_73_pred_2 = _3280 * _3125.z;
                                frontier_phi_73_pred_3 = _3280 * _3125.y;
                                frontier_phi_73_pred_4 = _3280 * _3125.x;
                                frontier_phi_73_pred_5 = _3354 * _3137.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3358 = frontier_phi_73_pred;
                            _3359 = frontier_phi_73_pred_1;
                            _3363 = frontier_phi_73_pred_2;
                            _3362 = frontier_phi_73_pred_3;
                            _3361 = frontier_phi_73_pred_4;
                            _3360 = frontier_phi_73_pred_5;
                            _3067 = _3361 + _3080;
                            _3068 = _3362 + _3081;
                            _3069 = _3363 + _3082;
                            _3064 = _3358 + _3077;
                            _3065 = _3359 + _3078;
                            _3066 = _3360 + _3079;
                            if (_3084 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3084;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3067;
                        frontier_phi_67_pred_1 = _3068;
                        frontier_phi_67_pred_2 = _3069;
                        frontier_phi_67_pred_3 = _3066;
                        frontier_phi_67_pred_4 = _3065;
                        frontier_phi_67_pred_5 = _3064;
                    }
                    _2732 = frontier_phi_67_pred;
                    _2734 = frontier_phi_67_pred_1;
                    _2736 = frontier_phi_67_pred_2;
                    _2730 = frontier_phi_67_pred_3;
                    _2728 = frontier_phi_67_pred_4;
                    _2726 = frontier_phi_67_pred_5;
                    uint _2871 = _2870 + 1u;
                    if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2864 = _2726;
                        _2865 = _2728;
                        _2866 = _2730;
                        _2867 = _2732;
                        _2868 = _2734;
                        _2869 = _2736;
                        _2870 = _2871;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2734;
                frontier_phi_55_56_ladder_1 = _2736;
                frontier_phi_55_56_ladder_2 = _2732;
                frontier_phi_55_56_ladder_3 = _2730;
                frontier_phi_55_56_ladder_4 = _2728;
                frontier_phi_55_56_ladder_5 = _2726;
            }
            else
            {
                frontier_phi_55_56_ladder = _2620;
                frontier_phi_55_56_ladder_1 = _2622;
                frontier_phi_55_56_ladder_2 = _2618;
                frontier_phi_55_56_ladder_3 = _2616;
                frontier_phi_55_56_ladder_4 = _2614;
                frontier_phi_55_56_ladder_5 = _2612;
            }
            _2725 = frontier_phi_55_56_ladder_5;
            _2727 = frontier_phi_55_56_ladder_4;
            _2729 = frontier_phi_55_56_ladder_3;
            _2731 = frontier_phi_55_56_ladder_2;
            _2733 = frontier_phi_55_56_ladder;
            _2735 = frontier_phi_55_56_ladder_1;
        }
        float _2740 = isnan(1.0) ? _790 : (isnan(_790) ? 1.0 : min(_790, 1.0));
        _2524 = (_2740 * _2731) + _1976;
        _2526 = (_2740 * _2733) + _1978;
        _2528 = (_2740 * _2735) + _1980;
        _2530 = ((_2725 * 0.039999999105930328369140625) * _2740) + _2309;
        _2532 = ((_2727 * 0.039999999105930328369140625) * _2740) + _2311;
        _2534 = ((_2729 * 0.039999999105930328369140625) * _2740) + _2313;
    }
    else
    {
        _2524 = _1976;
        _2526 = _1978;
        _2528 = _1980;
        _2530 = _2309;
        _2532 = _2311;
        _2534 = _2313;
    }
    float _4400 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4411 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4422 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    uint _2554 = _232 + 6u;
    float _2562 = _727 / cbSceneParam._m0[86u].x;
    float _2563 = _728 / cbSceneParam._m0[86u].y;
    vec4 _2577 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2562, _2563, (log2((isnan(cbSceneParam._m0[77u].w) ? _661 : (isnan(_661) ? cbSceneParam._m0[77u].w : min(_661, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2579 = _2577.x;
    float _2580 = _2577.y;
    float _2581 = _2577.z;
    float _2582 = _2577.w;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    if (_661 > cbSceneParam._m0[78u].w)
    {
        float _2637 = isnan(_661) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _661 : min(cbSceneParam._m0[80u].w, _661));
        float _2638 = _2637 / _661;
        float _2649 = _2638 * _712;
        float _2650 = _713 * _2638;
        float _2651 = (-0.0) - _2650;
        float _2653 = _2638 * _714;
        float _2655 = (cbSceneParam._m0[77u].w * _2651) / _2637;
        float _2656 = _2655 + cbSceneParam._m0[79u].w;
        float _2657 = cbSceneParam._m0[79u].w - _2650;
        float _2663 = sqrt(((_2649 * _2649) + (_2650 * _2650)) + (_2653 * _2653));
        float _2666 = (1.0 - (cbSceneParam._m0[77u].w / _2637)) * _2663;
        float _2671 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2673 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2826;
        if (abs((_2651 - _2655) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2826 = ((((_2656 > 0.0) ? exp2(_2671 * _2656) : (2.0 - exp2(_2673 * _2656))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2666;
        }
        else
        {
            float _2786 = 1.0 / cbSceneParam._m0[80u].x;
            float _2787 = isnan(_2657) ? _2656 : (isnan(_2656) ? _2657 : max(_2656, _2657));
            float _2788 = isnan(_2657) ? _2656 : (isnan(_2656) ? _2657 : min(_2656, _2657));
            float _2797 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : min(_2787, 0.0));
            float _2798 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : min(_2788, 0.0));
            _2826 = ((abs(_2663 / _2651) * cbSceneParam._m0[80u].y) * ((((_2797 - _2798) * 2.0) - ((exp2(_2671 * (isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0)))) - exp2(_2671 * (isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0))))) * _2786)) - ((exp2(_2673 * _2797) - exp2(_2673 * _2798)) * _2786))) + (_2666 * cbSceneParam._m0[80u].z);
        }
        vec4 _2828 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2562, _2563, 1.0), 0.0);
        float _2837 = exp2((_2826 * (-1.44269502162933349609375)) * (1.0 - _2828.w));
        float _2838 = log2(_2837);
        float _2854 = log2(_2582);
        _2675 = (exp2(_2854 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].x)) * _2828.x) / cbSceneParam._m0[78u].x)) + _2579;
        _2677 = (exp2(_2854 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].y)) * _2828.y) / cbSceneParam._m0[78u].y)) + _2580;
        _2679 = (exp2(_2854 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].z)) * _2828.z) / cbSceneParam._m0[78u].z)) + _2581;
        _2681 = _2837 * _2582;
    }
    else
    {
        _2675 = _2579;
        _2677 = _2580;
        _2679 = _2581;
        _2681 = _2582;
    }
    float _2693 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2694 = _2693 == 3.0;
    float _2695 = log2(_2681);
    float _2702 = exp2(_2695 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2524 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _790))) + ((_2530 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1595)) * cbPerFrame._m0[3u].x));
    float _2703 = exp2(_2695 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2526 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _790))) + ((_2532 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1595)) * cbPerFrame._m0[3u].x));
    float _2704 = exp2(_2695 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2528 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _790))) + ((_2534 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1595)) * cbPerFrame._m0[3u].x));
    float _2713 = (_2693 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2713 * (_2694 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2675)));
    SV_Target.y = _2713 * (_2694 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2677)));
    SV_Target.z = _2713 * (_2694 ? _2704 : (_2704 + (cbSceneParam._m0[72u].w * _2679)));
    SV_Target.w = cbInstanceData._m0[_2554].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2554].w;
}


