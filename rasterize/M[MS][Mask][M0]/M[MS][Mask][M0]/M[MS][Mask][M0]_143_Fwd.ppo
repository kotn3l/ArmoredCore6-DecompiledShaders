#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1451;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3753 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3764 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3775 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _376.x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[24u].z) + _428) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3786 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _453 = (_446 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _454 = (_446 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _455 = (_446 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _293) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _294) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _494 = _492.x;
    float _504 = dot(vec4(_494, _492.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _518 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _376.y) * 2.0) - ((((_494 - _504) * cbMtdParam._m0[24u].z) + _504) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3797 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _526 = (_519 * ((_472.x * cbMtdParam._m0[13u].x) - _453)) + _453;
    float _527 = (_519 * ((_472.y * cbMtdParam._m0[13u].y) - _454)) + _454;
    float _528 = (_519 * ((_472.z * cbMtdParam._m0[13u].z) - _455)) + _455;
    vec4 _546 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _293) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _294) + cbTextureTilingScale._m0[24u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _565 = _563.x;
    float _575 = dot(vec4(_565, _563.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _587 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _376.z) * 2.0) - ((((_565 - _575) * cbMtdParam._m0[24u].z) + _575) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3808 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _595 = (_588 * ((_546.x * cbMtdParam._m0[14u].x) - _526)) + _526;
    float _596 = (_588 * ((_546.y * cbMtdParam._m0[14u].y) - _527)) + _527;
    float _597 = (_588 * ((_546.z * cbMtdParam._m0[14u].z) - _528)) + _528;
    float _601 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _595;
    float _604 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _596;
    float _607 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _597;
    float _614 = ((_595 - _601) * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) + _601;
    float _615 = ((_596 - _604) * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) + _604;
    float _616 = ((_597 - _607) * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) + _607;
    vec4 _634 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _293) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _294) + cbTextureTilingScale._m0[14u].w));
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _697 = _695.x;
    float _698 = _695.y;
    float _699 = _695.z;
    float _706 = ((_678.x - _697) * _446) + _697;
    float _707 = ((_678.y - _698) * _446) + _698;
    float _708 = ((_678.z - _699) * _446) + _699;
    vec4 _720 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _293) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _294) + cbTextureTilingScale._m0[2u].w));
    float _731 = ((_720.x - _706) * _519) + _706;
    float _732 = ((_720.y - _707) * _519) + _707;
    float _733 = ((_720.z - _708) * _519) + _708;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _293) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _294) + cbTextureTilingScale._m0[23u].w));
    float _758 = ((_745.z - _733) * _588) + _733;
    float _761 = ((((_745.x - _731) * _588) + _731) * 2.0) + (-1.0);
    float _762 = ((((_745.y - _732) * _588) + _732) * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _3819 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _768 = sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))));
    vec4 _786 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _798 = (_761 + ((((_653.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_786.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _799 = (_762 + ((((_653.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_786.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _802 = fma(_768, _241, fma(_799, _248, _798 * _234));
    float _805 = fma(_768, _242, fma(_799, _249, _798 * _235));
    float _808 = fma(_768, _243, fma(_799, _250, _798 * _236));
    float _812 = inversesqrt(dot(vec3(_802, _805, _808), vec3(_802, _805, _808)));
    vec4 _839 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _841 = _839.x;
    float _842 = 1.0 - _841;
    float _848 = (cbMtdParam._m0[19u].x + dot(vec4(_812 * _802, _812 * _805, _812 * _808, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_841 - _842) * cbMtdParam._m0[24u].w) + _842) * cbMtdParam._m0[21u].z);
    float _3830 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _849 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _856 = (_849 * ((_634.x * cbMtdParam._m0[18u].x) - _614)) + _614;
    float _857 = (_849 * ((_634.y * cbMtdParam._m0[18u].y) - _615)) + _615;
    float _858 = (_849 * ((_634.z * cbMtdParam._m0[18u].z) - _616)) + _616;
    float _863 = (((_653.z - _758) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _758;
    float _867 = ((_786.z - _863) * cbMtdParam._m0[19u].w) + _863;
    vec4 _880 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _887 = (_880.x * 2.0) + (-1.0);
    float _888 = (_880.y * 2.0) + (-1.0);
    float _889 = dot(vec2(_887, _888), vec2(_887, _888));
    float _3841 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _897 = ((_880.z - _867) * _849) + _867;
    float _907 = ((sqrt(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) - _768) * _849) + _768;
    float _910 = (((_887 - _798) * _849) + _798) + (cbMtdParam._m0[21u].x * _798);
    float _911 = (((_888 - _799) * _849) + _799) + (cbMtdParam._m0[21u].x * _799);
    float _915 = cbMtdParam._m0[22u].x + _786.w;
    float _918 = fma(_907, _241, fma(_911, _248, _910 * _234));
    float _921 = fma(_907, _242, fma(_911, _249, _910 * _235));
    float _924 = fma(_907, _243, fma(_911, _250, _910 * _236));
    float _928 = inversesqrt(dot(vec3(_918, _921, _924), vec3(_918, _921, _924)));
    float _929 = _928 * _918;
    float _930 = _928 * _921;
    float _931 = _928 * _924;
    float _3852 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _932 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _3874 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _3885 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _3896 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _950 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1002 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _992);
    float _1003 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _992);
    float _1004 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _992);
    float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
    float _1009 = _1002 * _1008;
    float _1010 = _1003 * _1008;
    float _1011 = _1004 * _1008;
    float _1017 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1018 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1036 = fma(_931, cbSceneParam._m0[5u].z, fma(_930, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _929));
    float _1039 = fma(_931, cbSceneParam._m0[6u].z, fma(_930, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _929));
    float _1042 = fma(_931, cbSceneParam._m0[7u].z, fma(_930, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _929));
    uint _1056 = (_274 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1062 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_1056].x;
    float _1063 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_1056].y;
    float _1064 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_1056].z;
    float _3907 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1065 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    vec4 _1076 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1017, cbSceneParam._m0[86u].y * _1018));
    float _1080 = ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * TEXCOORD_5.w) * _1076.x;
    float _1081 = dot(vec3(_929, _930, _931), vec3(_1009, _1010, _1011));
    float _1084 = _1081 * 2.0;
    float _1088 = (_1084 * _929) - _1009;
    float _1089 = (_1084 * _930) - _1010;
    float _1090 = (_1084 * _931) - _1011;
    float _1094 = abs(dot(vec3(_1009, _1010, _1011), vec3(_929, _930, _931)));
    float _3940 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1096 = sqrt(_932);
    float _1109 = exp2((_1096 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1096 * 3.0));
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1450;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1175 = fma(_1149, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141));
        float _1179 = fma(_1149, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141));
        float _1183 = fma(_1149, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141));
        float _1208 = _1141 + _929;
        float _1209 = _1145 + _930;
        float _1210 = _1149 + _931;
        float _1220 = fma(_1210, cbModelParam._m0[26u].z, fma(_1209, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1208)) - _1175;
        float _1221 = fma(_1210, cbModelParam._m0[27u].z, fma(_1209, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1208)) - _1179;
        float _1222 = fma(_1210, cbModelParam._m0[28u].z, fma(_1209, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1208)) - _1183;
        float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
        float _1239 = ((_1226 * _1220) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1175 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1226 * _1221) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1179 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1226 * _1222) / cbModelParam._m0[34u].z) + ((((((_1183 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1278 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1244.x + (-0.5));
        float _1280 = _1278 * (_1244.y + (-0.5));
        float _1281 = _1278 * (_1244.z + (-0.5));
        float _1288 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1251.x + (-0.5));
        float _1290 = _1288 * (_1251.y + (-0.5));
        float _1291 = _1288 * (_1251.z + (-0.5));
        float _1298 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1258.x + (-0.5));
        float _1300 = _1298 * (_1258.y + (-0.5));
        float _1301 = _1298 * (_1258.z + (-0.5));
        float _1308 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1265.x + (-0.5));
        float _1310 = _1308 * (_1265.y + (-0.5));
        float _1311 = _1308 * (_1265.z + (-0.5));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = _1279 * 0.5;
        float _1316 = _1289 * 0.5;
        float _1317 = _1299 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1332 = (dot(vec3(_929, _930, _931), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1342 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _3988 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1344 + 1.0))) + _1349) * _1312;
        float _1359 = _1280 * 0.5;
        float _1360 = _1290 * 0.5;
        float _1361 = _1300 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_929, _930, _931), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4021 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1386 + 1.0))) + _1391) * _1313;
        float _1401 = _1281 * 0.5;
        float _1402 = _1291 * 0.5;
        float _1403 = _1301 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_929, _930, _931), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4054 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1428 + 1.0))) + _1433) * _1314;
        _1450 = _1281;
        _1452 = _1280;
        _1453 = _1279;
        _1454 = _1291;
        _1455 = _1290;
        _1456 = _1289;
        _1457 = _1301;
        _1458 = _1300;
        _1459 = _1299;
        _1460 = _1314;
        _1461 = _1313;
        _1462 = _1312;
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
    }
    else
    {
        _1450 = _1451;
        _1452 = _1451;
        _1453 = _1451;
        _1454 = _1451;
        _1455 = _1451;
        _1456 = _1451;
        _1457 = _1451;
        _1458 = _1451;
        _1459 = _1451;
        _1460 = _1451;
        _1461 = _1451;
        _1462 = _1451;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1488 = fma(_1149, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141));
        float _1492 = fma(_1149, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141));
        float _1496 = fma(_1149, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141));
        float _1519 = _1141 + _929;
        float _1520 = _1145 + _930;
        float _1521 = _1149 + _931;
        float _1531 = fma(_1521, cbModelParam._m0[30u].z, fma(_1520, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1519)) - _1488;
        float _1532 = fma(_1521, cbModelParam._m0[31u].z, fma(_1520, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1519)) - _1492;
        float _1533 = fma(_1521, cbModelParam._m0[32u].z, fma(_1520, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1519)) - _1496;
        float _1537 = inversesqrt(dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533)));
        float _1550 = ((_1537 * _1531) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1488 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1551 = ((_1537 * _1532) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1492 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1552 = ((_1537 * _1533) / cbModelParam._m0[35u].z) + ((((((_1496 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        float _1587 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1554.x + (-0.5));
        float _1589 = _1587 * (_1554.y + (-0.5));
        float _1590 = _1587 * (_1554.z + (-0.5));
        float _1597 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1561.x + (-0.5));
        float _1599 = _1597 * (_1561.y + (-0.5));
        float _1600 = _1597 * (_1561.z + (-0.5));
        float _1607 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1568.x + (-0.5));
        float _1609 = _1607 * (_1568.y + (-0.5));
        float _1610 = _1607 * (_1568.z + (-0.5));
        float _1617 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1575.x + (-0.5));
        float _1619 = _1617 * (_1575.y + (-0.5));
        float _1620 = _1617 * (_1575.z + (-0.5));
        float _1621 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = _1588 * 0.5;
        float _1625 = _1598 * 0.5;
        float _1626 = _1608 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_929, _930, _931), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1621 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4117 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1651 + 1.0))) + _1656) * _1621;
        float _1666 = _1589 * 0.5;
        float _1667 = _1599 * 0.5;
        float _1668 = _1609 * 0.5;
        float _1669 = dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668));
        float _1674 = (_1669 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1669);
        float _1682 = (dot(vec3(_929, _930, _931), vec3(_1674 * _1666, _1674 * _1667, _1674 * _1668)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1691 = sqrt(((_1667 * _1667) + (_1666 * _1666)) + (_1668 * _1668)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1693 = _1692 * 2.0;
        float _1697 = (1.0 - _1692) / (_1692 + 1.0);
        float _4150 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1707 = ((((1.0 - _1698) * (_1693 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1693 + 1.0))) + _1698) * _1622;
        float _1708 = _1590 * 0.5;
        float _1709 = _1600 * 0.5;
        float _1710 = _1610 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_929, _930, _931), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4183 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1735 + 1.0))) + _1740) * _1623;
        _1757 = _1590;
        _1758 = _1589;
        _1759 = _1588;
        _1760 = _1600;
        _1761 = _1599;
        _1762 = _1598;
        _1763 = _1610;
        _1764 = _1609;
        _1765 = _1608;
        _1766 = _1623;
        _1767 = _1622;
        _1768 = _1621;
        _1769 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)));
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
    }
    else
    {
        _1757 = _1451;
        _1758 = _1451;
        _1759 = _1451;
        _1760 = _1451;
        _1761 = _1451;
        _1762 = _1451;
        _1763 = _1451;
        _1764 = _1451;
        _1765 = _1451;
        _1766 = _1451;
        _1767 = _1451;
        _1768 = _1451;
        _1769 = 0.0;
        _1770 = 0.0;
        _1771 = 0.0;
    }
    float _1781 = (cbModelParam._m0[1u].x * (_1769 - _1463)) + _1463;
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1464)) + _1464;
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1465)) + _1465;
    float _1804 = fma(_1783, cbSceneParam._m0[89u].z, fma(_1782, cbSceneParam._m0[89u].y, _1781 * cbSceneParam._m0[89u].x));
    float _1807 = fma(_1783, cbSceneParam._m0[90u].z, fma(_1782, cbSceneParam._m0[90u].y, _1781 * cbSceneParam._m0[90u].x));
    float _1810 = fma(_1783, cbSceneParam._m0[91u].z, fma(_1782, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1781));
    float _1825 = _1088 * 0.5;
    float _1826 = _1089 * 0.5;
    float _1827 = _1090 * 0.5;
    float _1828 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1831 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1834 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1757, _1760, _1763, _1766));
    float _1868;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1841 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1450, _1454, _1457, _1460));
        float _1845 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1452, _1455, _1458, _1461));
        float _1849 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1453, _1456, _1459, _1462));
        float _1856 = dot(vec4(cbModelParam._m0[39u]), vec4(_1825, _1826, _1827, 1.0));
        _1868 = dot(vec3(isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1856) ? 0.0 : (isnan(0.0) ? _1856 : max(0.0, _1856))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1868 = 1.0;
    }
    float _1879;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1870 = dot(vec4(cbModelParam._m0[40u]), vec4(_1825, _1826, _1827, 1.0));
        _1879 = dot(vec3(isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1870) ? 0.0 : (isnan(0.0) ? _1870 : max(0.0, _1870))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1879 = 1.0;
    }
    float _1883 = (_1879 * cbModelParam._m0[1u].x) + (_1868 * (1.0 - cbModelParam._m0[1u].x));
    float _1893 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _932);
    float _1894 = isnan(_1893) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1893 : min(cbModelParam._m0[25u].z, _1893));
    float _1974;
    float _1976;
    float _1978;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1941 = fma(_1149, cbModelParam._m0[13u].z, fma(_1145, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1141)) + cbModelParam._m0[13u].w;
        float _1945 = fma(_1149, cbModelParam._m0[14u].z, fma(_1145, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1141)) + cbModelParam._m0[14u].w;
        float _1949 = fma(_1149, cbModelParam._m0[15u].z, fma(_1145, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1141)) + cbModelParam._m0[15u].w;
        float _1952 = fma(_1090, cbModelParam._m0[13u].z, fma(_1089, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1088));
        float _1955 = fma(_1090, cbModelParam._m0[14u].z, fma(_1089, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1088));
        float _1958 = fma(_1090, cbModelParam._m0[15u].z, fma(_1089, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1088));
        float _1986;
        if (_1952 > 0.0)
        {
            _1986 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1986 = frontier_phi_14_12_ladder;
        }
        float _2186;
        if (_1955 > 0.0)
        {
            _2186 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2186 = frontier_phi_23_19_ladder;
        }
        float _2429;
        if (_1958 > 0.0)
        {
            _2429 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2429 = frontier_phi_35_30_ladder;
        }
        float _2431 = isnan(_2186) ? _1986 : (isnan(_1986) ? _2186 : min(_1986, _2186));
        float _2432 = isnan(_2429) ? _2431 : (isnan(_2431) ? _2429 : min(_2431, _2429));
        float _2436 = (_2432 * _1952) + _1941;
        float _2437 = (_2432 * _1955) + _1945;
        float _2438 = (_2432 * _1958) + _1949;
        float _2439 = _2432 * 9.9999997473787516355514526367188e-05;
        float _2441 = (-1.0) - _2439;
        float _2443 = _2439 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2438 > _2443) || ((_2438 < _2441) || ((_2437 > _2443) || ((_2437 < _2441) || ((_2436 < _2441) || (_2436 > _2443))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2438, cbModelParam._m0[9u].z, fma(_2437, cbModelParam._m0[9u].y, _2436 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2438, cbModelParam._m0[10u].z, fma(_2437, cbModelParam._m0[10u].y, _2436 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2438, cbModelParam._m0[11u].z, fma(_2437, cbModelParam._m0[11u].y, _2436 * cbModelParam._m0[11u].x))), _1894);
            frontier_phi_13_35_ladder = _2562.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2562.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2562.x * cbModelParam._m0[1u].y;
        }
        _1974 = frontier_phi_13_35_ladder_2;
        _1976 = frontier_phi_13_35_ladder_1;
        _1978 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1088, _1089, _1090), _1894);
        _1974 = _1962.x * cbModelParam._m0[1u].y;
        _1976 = _1962.y * cbModelParam._m0[1u].y;
        _1978 = _1962.z * cbModelParam._m0[1u].y;
    }
    float _1982 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _932);
    float _1983 = isnan(_1982) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1982 : min(cbModelParam._m0[25u].w, _1982));
    float _2072;
    float _2074;
    float _2076;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2036 = fma(_1149, cbModelParam._m0[21u].z, fma(_1145, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1141)) + cbModelParam._m0[21u].w;
        float _2040 = fma(_1149, cbModelParam._m0[22u].z, fma(_1145, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1141)) + cbModelParam._m0[22u].w;
        float _2044 = fma(_1149, cbModelParam._m0[23u].z, fma(_1145, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1141)) + cbModelParam._m0[23u].w;
        float _2047 = fma(_1090, cbModelParam._m0[21u].z, fma(_1089, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1088));
        float _2050 = fma(_1090, cbModelParam._m0[22u].z, fma(_1089, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1088));
        float _2053 = fma(_1090, cbModelParam._m0[23u].z, fma(_1089, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1088));
        float _2191;
        if (_2047 > 0.0)
        {
            _2191 = abs((1.0 - _2036) / _2047);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2036 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2191 = frontier_phi_25_21_ladder;
        }
        float _2456;
        if (_2050 > 0.0)
        {
            _2456 = abs((1.0 - _2040) / _2050);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2040 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2456 = frontier_phi_37_32_ladder;
        }
        float _2661;
        if (_2053 > 0.0)
        {
            _2661 = abs((1.0 - _2044) / _2053);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2044 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2661 = frontier_phi_46_43_ladder;
        }
        float _2663 = isnan(_2456) ? _2191 : (isnan(_2191) ? _2456 : min(_2191, _2456));
        float _2664 = isnan(_2661) ? _2663 : (isnan(_2663) ? _2661 : min(_2663, _2661));
        float _2668 = (_2664 * _2047) + _2036;
        float _2669 = (_2664 * _2050) + _2040;
        float _2670 = (_2664 * _2053) + _2044;
        float _2671 = _2664 * 9.9999997473787516355514526367188e-05;
        float _2672 = (-1.0) - _2671;
        float _2674 = _2671 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2670 > _2674) || ((_2670 < _2672) || ((_2669 > _2674) || ((_2669 < _2672) || ((_2668 < _2672) || (_2668 > _2674))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2670, cbModelParam._m0[17u].z, fma(_2669, cbModelParam._m0[17u].y, _2668 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2670, cbModelParam._m0[18u].z, fma(_2669, cbModelParam._m0[18u].y, _2668 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2670, cbModelParam._m0[19u].z, fma(_2669, cbModelParam._m0[19u].y, _2668 * cbModelParam._m0[19u].x))), _1983);
            frontier_phi_22_46_ladder = _2869.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2869.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2869.x * cbModelParam._m0[1u].z;
        }
        _2072 = frontier_phi_22_46_ladder_2;
        _2074 = frontier_phi_22_46_ladder_1;
        _2076 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2056 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1088, _1089, _1090), _1983);
        _2072 = _2056.x * cbModelParam._m0[1u].z;
        _2074 = _2056.y * cbModelParam._m0[1u].z;
        _2076 = _2056.z * cbModelParam._m0[1u].z;
    }
    float _2088 = ((((1.0 - _1109) * ((_1096 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1109 * _1096)) * _1080;
    float _2089 = _2088 * ((cbModelParam._m0[1u].w * (_2072 - _1974)) + _1974);
    float _2090 = _2088 * ((cbModelParam._m0[1u].w * (_2074 - _1976)) + _1976);
    float _2091 = _2088 * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2094 = fma(_2091, cbSceneParam._m0[89u].z, fma(_2090, cbSceneParam._m0[89u].y, _2089 * cbSceneParam._m0[89u].x));
    float _2097 = fma(_2091, cbSceneParam._m0[90u].z, fma(_2090, cbSceneParam._m0[90u].y, _2089 * cbSceneParam._m0[90u].x));
    float _2100 = fma(_2091, cbSceneParam._m0[91u].z, fma(_2090, cbSceneParam._m0[91u].y, _2089 * cbSceneParam._m0[91u].x));
    uvec4 _2110 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2112 = _2110.x * 14u;
    uint _2113 = _2112 + 13u;
    float _2120 = _1080 + (-1.0);
    float _2125 = (cbLight._m0[_2113].x * _2120) + 1.0;
    float _2126 = (cbLight._m0[_2113].y * _2120) + 1.0;
    float _2127 = (cbLight._m0[_2113].z * _2120) + 1.0;
    float _2128 = (cbLight._m0[_2113].w * _2120) + 1.0;
    uint _2129 = _2112 + 5u;
    float _2135 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2139 = _2112 + 4u;
    float _2145 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
    uint _2149 = _2112 | 1u;
    float _2160 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_929, _930, _931));
    float _2163 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_929, _930, _931));
    float _4319 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _4330 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2168 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.3183098733425140380859375;
    float _2170 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.3183098733425140380859375;
    float _2177 = ((cbLight._m0[_2129].x * _2135) * _2170) + ((cbLight._m0[_2139].x * _2145) * _2168);
    float _2178 = ((_2135 * cbLight._m0[_2129].y) * _2170) + ((_2145 * cbLight._m0[_2139].y) * _2168);
    float _2179 = ((_2135 * cbLight._m0[_2129].z) * _2170) + ((_2145 * cbLight._m0[_2139].z) * _2168);
    uvec4 _2183 = floatBitsToUint(cbLight._m0[_2112 + 12u]);
    bool _2185 = _2183.x == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2185)
    {
        _2196 = _2177;
        _2198 = _2178;
        _2200 = _2179;
    }
    else
    {
        uint _2204 = _2112 + 6u;
        float _2220 = (dot(vec3(cbLight._m0[_2112 + 2u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4341 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2223 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2196 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _2177;
        _2198 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _2178;
        _2200 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _2179;
    }
    bool _2203 = _2183.y == 0u;
    float _2241;
    float _2243;
    float _2245;
    if (_2203)
    {
        _2241 = _2196;
        _2243 = _2198;
        _2245 = _2200;
    }
    else
    {
        uint _2400 = _2112 + 7u;
        float _2416 = (dot(vec3(cbLight._m0[_2112 + 3u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2417 = _2416 * _2416;
        float _4357 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2418 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2419 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2241 = (((cbLight._m0[_2400].x * 0.3183098733425140380859375) * _2418) * _2419) + _2196;
        _2243 = (((cbLight._m0[_2400].y * 0.3183098733425140380859375) * _2418) * _2419) + _2198;
        _2245 = (((cbLight._m0[_2400].z * 0.3183098733425140380859375) * _2418) * _2419) + _2200;
    }
    uint _2248 = _2112 + 8u;
    float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _932) * 0.949999988079071044921875);
    float _2262 = _2261 * _2261;
    float _2263 = cbLight._m0[_2112].x + _1009;
    float _2264 = cbLight._m0[_2112].y + _1010;
    float _2265 = cbLight._m0[_2112].z + _1011;
    float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
    float _2270 = _2269 * _2263;
    float _2271 = _2269 * _2264;
    float _2272 = _2269 * _2265;
    float _2273 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2112].xyz));
    float _4373 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _4384 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _2277 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2278 = dot(vec3(_929, _930, _931), vec3(_2270, _2271, _2272));
    float _4395 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2282 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2270, _2271, _2272));
    float _4406 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2286 = _2262 * _2262;
    float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
    float _2301 = (exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2302 = 1.0 - _2262;
    float _2313 = (0.5 / (((_2277 * ((_2276 * _2302) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2302) + _2262) * _2276))) * _2276;
    float _4417 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2315 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
    uint _2326 = _2112 + 9u;
    float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _932) * 0.949999988079071044921875);
    float _2338 = _2337 * _2337;
    float _2339 = cbLight._m0[_2149].x + _1009;
    float _2340 = cbLight._m0[_2149].y + _1010;
    float _2341 = cbLight._m0[_2149].z + _1011;
    float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
    float _2346 = _2345 * _2339;
    float _2347 = _2345 * _2340;
    float _2348 = _2345 * _2341;
    float _2349 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2149].xyz));
    float _4428 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2353 = dot(vec3(_929, _930, _931), vec3(_2346, _2347, _2348));
    float _4439 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2357 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2346, _2347, _2348));
    float _4450 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2361 = _2338 * _2338;
    float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
    float _2374 = (exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2375 = 1.0 - _2338;
    float _2385 = (0.5 / (((_2277 * ((_2352 * _2375) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2375) + _2338) * _2352))) * _2352;
    float _4461 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2387 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
    float _2397 = (((_2374 * cbLight._m0[_2326].x) * _2387) * _2135) + (((_2301 * cbLight._m0[_2248].x) * _2315) * _2145);
    float _2398 = (((_2374 * cbLight._m0[_2326].y) * _2387) * _2135) + (((_2301 * cbLight._m0[_2248].y) * _2315) * _2145);
    float _2399 = (((_2374 * cbLight._m0[_2326].z) * _2387) * _2135) + (((_2301 * cbLight._m0[_2248].z) * _2315) * _2145);
    float _2461;
    float _2463;
    float _2465;
    if (_2185)
    {
        _2461 = _2397;
        _2463 = _2398;
        _2465 = _2399;
    }
    else
    {
        uint _2467 = _2112 + 2u;
        uint _2471 = _2112 + 10u;
        float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _932) * 0.949999988079071044921875);
        float _2486 = _2485 * _2485;
        float _2487 = cbLight._m0[_2467].x + _1009;
        float _2488 = cbLight._m0[_2467].y + _1010;
        float _2489 = cbLight._m0[_2467].z + _1011;
        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
        float _2494 = _2493 * _2487;
        float _2495 = _2493 * _2488;
        float _2496 = _2493 * _2489;
        float _2497 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2467].xyz));
        float _4472 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2501 = dot(vec3(_929, _930, _931), vec3(_2494, _2495, _2496));
        float _4483 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2505 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2494, _2495, _2496));
        float _4494 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2509 = _2486 * _2486;
        float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
        float _2522 = (exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2523 = 1.0 - _2486;
        float _2533 = (0.5 / (((_2277 * ((_2500 * _2523) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2523) + _2486) * _2500))) * _2500;
        float _4505 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2461 = (((_2522 * cbLight._m0[_2471].x) * _2535) * _2536) + _2397;
        _2463 = (((_2522 * cbLight._m0[_2471].y) * _2535) * _2536) + _2398;
        _2465 = (((_2522 * cbLight._m0[_2471].z) * _2535) * _2536) + _2399;
    }
    float _2571;
    float _2573;
    float _2575;
    if (_2203)
    {
        _2571 = _2461;
        _2573 = _2463;
        _2575 = _2465;
    }
    else
    {
        uint _2582 = _2112 + 3u;
        uint _2586 = _2112 + 11u;
        float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2582].w)) * _932) * 0.949999988079071044921875);
        float _2601 = _2600 * _2600;
        float _2602 = cbLight._m0[_2582].x + _1009;
        float _2603 = cbLight._m0[_2582].y + _1010;
        float _2604 = cbLight._m0[_2582].z + _1011;
        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
        float _2609 = _2608 * _2602;
        float _2610 = _2608 * _2603;
        float _2611 = _2608 * _2604;
        float _2612 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2582].xyz));
        float _4521 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2616 = dot(vec3(_929, _930, _931), vec3(_2609, _2610, _2611));
        float _4532 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2620 = dot(vec3(cbLight._m0[_2582].xyz), vec3(_2609, _2610, _2611));
        float _4543 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2624 = _2601 * _2601;
        float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
        float _2637 = (exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2638 = 1.0 - _2601;
        float _2648 = (0.5 / (((_2277 * ((_2615 * _2638) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2638) + _2601) * _2615))) * _2615;
        float _4554 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2571 = (((_2637 * cbLight._m0[_2586].x) * _2650) * _2651) + _2461;
        _2573 = (((_2637 * cbLight._m0[_2586].y) * _2650) * _2651) + _2463;
        _2575 = (((_2637 * cbLight._m0[_2586].z) * _2650) * _2651) + _2465;
    }
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_2110.y == 0u)
    {
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2726;
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2726;
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2726;
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.x;
        uint _2753 = uint((float(_2741.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1018) / _2742))) + floor(float(uint(cbSceneParam._m0[85u].x * _1017) / _2742)));
        float _2763 = (log2(_2729 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2764 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        uint _2767 = uint(isnan(14.0) ? _2764 : (isnan(_2764) ? 14.0 : min(_2764, 14.0)));
        uvec4 _2772 = texelFetch(g_lightClusterGridBuffer, int(((_2767 << 2u) + (_2753 << 6u)) >> 2u));
        uint _2773 = _2772.x;
        uint _2774 = _2741.z;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        if (((((1u << ((_2774 >> 4u) & 15u)) + 4294967295u) & _2773) == 0u) || ((_2774 & 240u) == 0u))
        {
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
        }
        else
        {
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            uint _3025 = 0u;
            uint _3034;
            bool _3035;
            for (;;)
            {
                _3034 = texelFetch(g_lightClassification, int((((_2767 << 5u) + (_2753 << 9u)) + (_3025 << 2u)) >> 2u)).x;
                _3035 = _3034 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3035)
                {
                    frontier_phi_61_pred = _3019;
                    frontier_phi_61_pred_1 = _3024;
                    frontier_phi_61_pred_2 = _3023;
                    frontier_phi_61_pred_3 = _3022;
                    frontier_phi_61_pred_4 = _3021;
                    frontier_phi_61_pred_5 = _3020;
                }
                else
                {
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    uint _3149;
                    _3143 = _3019;
                    _3144 = _3020;
                    _3145 = _3021;
                    _3146 = _3022;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3034;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    for (;;)
                    {
                        uint _3153 = uint(findLSB(_3149)) + (_3025 << 5u);
                        uint _3150 = (_3149 + 4294967295u) & _3149;
                        uint _3155 = _3153 * 48u;
                        vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 3u)).x));
                        uint _3175 = (_3153 * 48u) + 4u;
                        vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3194 = (_3153 * 48u) + 8u;
                        vec3 _3205 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x));
                        float _3209 = _3169.x - _2727;
                        float _3210 = _3169.y - _2728;
                        float _3211 = _3169.z - _2729;
                        float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                        float _3215 = inversesqrt(_3212);
                        float _3216 = _3215 * _3209;
                        float _3217 = _3215 * _3210;
                        float _3218 = _3215 * _3211;
                        float _3219 = dot(vec3(_1036, _1039, _1042), vec3(_3216, _3217, _3218));
                        float _3224 = 1.0 - (_3212 * _3169.w);
                        float _4580 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3225 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3226 = sqrt(_3212) * _3188.w;
                        float _3229 = 1.39999997615814208984375 / (_3226 + 1.39999997615814208984375);
                        float _3230 = _3229 * _3229;
                        float _3233 = ((1.0 - _3230) * _3219) + _3230;
                        float _3236 = _3226 * _3226;
                        float _3240 = ((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3225) / ((_3236 * 0.699999988079071044921875) + 1.0);
                        float _3244 = (-0.0) - _2727;
                        float _3245 = (-0.0) - _2728;
                        float _3246 = (-0.0) - _2729;
                        float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                        float _3251 = _3250 * _3244;
                        float _3252 = _3250 * _3245;
                        float _3253 = _3250 * _3246;
                        float _3261 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                        float _3262 = 1.0 - _1096;
                        float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                        float _3270 = _3269 * _3269;
                        float _3271 = _3270 * _3270;
                        float _3272 = _3251 + _3216;
                        float _3273 = _3252 + _3217;
                        float _3274 = _3253 + _3218;
                        float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                        float _3282 = dot(vec3(_1036, _1039, _1042), vec3(_3251, _3252, _3253));
                        float _4596 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3286 = dot(vec3(_1036, _1039, _1042), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                        float _4607 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                        float _3294 = _3229 * _3270;
                        float _3295 = _3294 * _3294;
                        float _3298 = ((1.0 - _3295) * _3219) + _3295;
                        float _4618 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3299 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3300 = 1.0 - _3270;
                        float _3310 = (0.5 / (((_3299 * ((_3285 * _3300) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3299 * _3300) + _3270) * _3285))) * _3299;
                        float _4629 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3321 = (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) / ((_3293 * _3293) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125))) * _3225;
                        _3078 = (_3240 * _3188.x) + _3146;
                        _3079 = (_3240 * _3188.y) + _3147;
                        _3080 = (_3240 * _3188.z) + _3148;
                        _3075 = (_3321 * _3205.x) + _3143;
                        _3076 = (_3321 * _3205.y) + _3144;
                        _3077 = (_3321 * _3205.z) + _3145;
                        if (_3150 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3143 = _3075;
                            _3144 = _3076;
                            _3145 = _3077;
                            _3146 = _3078;
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3150;
                        }
                    }
                    frontier_phi_61_pred = _3075;
                    frontier_phi_61_pred_1 = _3080;
                    frontier_phi_61_pred_2 = _3079;
                    frontier_phi_61_pred_3 = _3078;
                    frontier_phi_61_pred_4 = _3077;
                    frontier_phi_61_pred_5 = _3076;
                }
                _2875 = frontier_phi_61_pred;
                _2885 = frontier_phi_61_pred_1;
                _2883 = frontier_phi_61_pred_2;
                _2881 = frontier_phi_61_pred_3;
                _2879 = frontier_phi_61_pred_4;
                _2877 = frontier_phi_61_pred_5;
                uint _3026 = _3025 + 1u;
                if (_3026 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3019 = _2875;
                    _3020 = _2877;
                    _3021 = _2879;
                    _3022 = _2881;
                    _3023 = _2883;
                    _3024 = _2885;
                    _3025 = _3026;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
        }
        uvec4 _2888 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2889 = _2888.z;
        uint _2891 = (_2889 >> 8u) & 15u;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        if (((4294967295u << _2891) & _2773) == 0u)
        {
            _2987 = _2874;
            _2989 = _2876;
            _2991 = _2878;
            _2993 = _2880;
            _2995 = _2882;
            _2997 = _2884;
        }
        else
        {
            float _3012 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
            float _3013 = _3012 * _2727;
            float _3014 = _3012 * _2728;
            float _3015 = _3012 * _2729;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2891 < ((_2889 >> 12u) & 15u))
            {
                float _2988;
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3126 = _2874;
                float _3127 = _2876;
                float _3128 = _2878;
                float _3129 = _2880;
                float _3130 = _2882;
                float _3131 = _2884;
                uint _3132 = _2891;
                uint _3141;
                bool _3142;
                for (;;)
                {
                    _3141 = texelFetch(g_lightClassification, int((((_2767 << 5u) + (_2753 << 9u)) + (_3132 << 2u)) >> 2u)).x;
                    _3142 = _3141 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3142)
                    {
                        frontier_phi_67_pred = _3129;
                        frontier_phi_67_pred_1 = _3130;
                        frontier_phi_67_pred_2 = _3131;
                        frontier_phi_67_pred_3 = _3128;
                        frontier_phi_67_pred_4 = _3127;
                        frontier_phi_67_pred_5 = _3126;
                    }
                    else
                    {
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3339 = _3126;
                        float _3340 = _3127;
                        float _3341 = _3128;
                        float _3342 = _3129;
                        float _3343 = _3130;
                        float _3344 = _3131;
                        uint _3345 = _3141;
                        uint _3346;
                        vec4 _3371;
                        float _3372;
                        vec4 _3387;
                        vec3 _3399;
                        vec4 _3414;
                        vec4 _3429;
                        float _3475;
                        bool _3476;
                        for (;;)
                        {
                            uint _3356 = ((_3132 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3345));
                            _3346 = (_3345 + 4294967295u) & _3345;
                            uint _3358 = _3356 * 40u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            _3372 = _3371.w;
                            uint _3374 = (_3356 * 40u) + 4u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3356 * 40u) + 8u;
                            _3399 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x));
                            uint _3401 = (_3356 * 40u) + 16u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3356 * 40u) + 20u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3356 * 40u) + 24u;
                            vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3450 = (_3356 * 40u) + 28u;
                            vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            _3475 = fma(_2729, _3463.z, fma(_2728, _3463.y, _3463.x * _2727)) + _3463.w;
                            _3476 = !((fma(_2729, _3444.z, fma(_2728, _3444.y, _3444.x * _2727)) + _3444.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3476)
                            {
                                float _3503 = _3371.x - _2727;
                                float _3504 = _3371.y - _2728;
                                float _3505 = _3371.z - _2729;
                                float _3506 = dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505));
                                float _3509 = inversesqrt(_3506);
                                float _3510 = _3509 * _3503;
                                float _3511 = _3509 * _3504;
                                float _3512 = _3509 * _3505;
                                float _3516 = 1.0 - (_3506 / (_3372 * _3372));
                                float _4640 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3521 = sqrt(_3506) * _3387.w;
                                float _3523 = 1.39999997615814208984375 / (_3521 + 1.39999997615814208984375);
                                float _3524 = _3523 * _3523;
                                float _3527 = ((1.0 - _3524) * dot(vec3(_3510, _3511, _3512), vec3(_1036, _1039, _1042))) + _3524;
                                float _3530 = _3521 * _3521;
                                float _3534 = (fma(_2729, _3414.z, fma(_2728, _3414.y, _3414.x * _2727)) + _3414.w) / _3475;
                                float _3535 = (fma(_2729, _3429.z, fma(_2728, _3429.y, _3429.x * _2727)) + _3429.w) / _3475;
                                float _3539 = 1.0 - dot(vec2(_3534, _3535), vec2(_3534, _3535));
                                float _4656 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3541 = _3540 * (((isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0))) * _3517) / ((_3530 * 0.699999988079071044921875) + 1.0));
                                float _3553 = exp2(log2(1.0 / ((_3530 * 3.5) + 5.0)) * 0.25);
                                float _3554 = 1.0 - _1096;
                                float _3561 = sqrt(1.0 - ((1.0 - (_3554 * _3554)) * (1.0 - (_3553 * _3553))));
                                float _3562 = _3561 * _3561;
                                float _3563 = _3562 * _3562;
                                float _3564 = _3510 - _3013;
                                float _3565 = _3511 - _3014;
                                float _3566 = _3512 - _3015;
                                float _3570 = inversesqrt(dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566)));
                                float _3574 = dot(vec3(_1036, _1039, _1042), vec3((-0.0) - _3013, (-0.0) - _3014, (-0.0) - _3015));
                                float _4667 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3578 = dot(vec3(_1036, _1039, _1042), vec3(_3570 * _3564, _3570 * _3565, _3570 * _3566));
                                float _4678 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3581 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3585 = ((_3581 * _3581) * (_3563 + (-1.0))) + 1.0;
                                float _3586 = _3523 * _3562;
                                float _3587 = _3586 * _3586;
                                float _3593 = ((1.0 - _3587) * dot(vec3(_1036, _1039, _1042), vec3(_3510, _3511, _3512))) + _3587;
                                float _4689 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3594 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3595 = 1.0 - _3562;
                                float _3605 = (0.5 / (((_3594 * ((_3577 * _3595) + _3562)) + 9.9999999392252902907785028219223e-09) + (((_3594 * _3595) + _3562) * _3577))) * _3594;
                                float _4700 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3615 = (_3540 * _3517) * (((_3563 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3585 * _3585) * ((_3530 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3615 * _3399.x;
                                frontier_phi_73_pred_1 = _3615 * _3399.y;
                                frontier_phi_73_pred_2 = _3541 * _3387.z;
                                frontier_phi_73_pred_3 = _3541 * _3387.y;
                                frontier_phi_73_pred_4 = _3541 * _3387.x;
                                frontier_phi_73_pred_5 = _3615 * _3399.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3619 = frontier_phi_73_pred;
                            _3620 = frontier_phi_73_pred_1;
                            _3624 = frontier_phi_73_pred_2;
                            _3623 = frontier_phi_73_pred_3;
                            _3622 = frontier_phi_73_pred_4;
                            _3621 = frontier_phi_73_pred_5;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            _3326 = _3619 + _3339;
                            _3327 = _3620 + _3340;
                            _3328 = _3621 + _3341;
                            if (_3346 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3346;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3329;
                        frontier_phi_67_pred_1 = _3330;
                        frontier_phi_67_pred_2 = _3331;
                        frontier_phi_67_pred_3 = _3328;
                        frontier_phi_67_pred_4 = _3327;
                        frontier_phi_67_pred_5 = _3326;
                    }
                    _2994 = frontier_phi_67_pred;
                    _2996 = frontier_phi_67_pred_1;
                    _2998 = frontier_phi_67_pred_2;
                    _2992 = frontier_phi_67_pred_3;
                    _2990 = frontier_phi_67_pred_4;
                    _2988 = frontier_phi_67_pred_5;
                    uint _3133 = _3132 + 1u;
                    if (_3133 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3126 = _2988;
                        _3127 = _2990;
                        _3128 = _2992;
                        _3129 = _2994;
                        _3130 = _2996;
                        _3131 = _2998;
                        _3132 = _3133;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2996;
                frontier_phi_55_56_ladder_1 = _2998;
                frontier_phi_55_56_ladder_2 = _2994;
                frontier_phi_55_56_ladder_3 = _2992;
                frontier_phi_55_56_ladder_4 = _2990;
                frontier_phi_55_56_ladder_5 = _2988;
            }
            else
            {
                frontier_phi_55_56_ladder = _2882;
                frontier_phi_55_56_ladder_1 = _2884;
                frontier_phi_55_56_ladder_2 = _2880;
                frontier_phi_55_56_ladder_3 = _2878;
                frontier_phi_55_56_ladder_4 = _2876;
                frontier_phi_55_56_ladder_5 = _2874;
            }
            _2987 = frontier_phi_55_56_ladder_5;
            _2989 = frontier_phi_55_56_ladder_4;
            _2991 = frontier_phi_55_56_ladder_3;
            _2993 = frontier_phi_55_56_ladder_2;
            _2995 = frontier_phi_55_56_ladder;
            _2997 = frontier_phi_55_56_ladder_1;
        }
        float _3002 = isnan(1.0) ? _1080 : (isnan(_1080) ? 1.0 : min(_1080, 1.0));
        _2786 = (_3002 * _2993) + _2241;
        _2788 = (_3002 * _2995) + _2243;
        _2790 = (_3002 * _2997) + _2245;
        _2792 = ((_2987 * 0.039999999105930328369140625) * _3002) + _2571;
        _2794 = ((_2989 * 0.039999999105930328369140625) * _3002) + _2573;
        _2796 = ((_2991 * 0.039999999105930328369140625) * _3002) + _2575;
    }
    else
    {
        _2786 = _2241;
        _2788 = _2243;
        _2790 = _2245;
        _2792 = _2571;
        _2794 = _2573;
        _2796 = _2575;
    }
    float _4716 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _4727 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _4738 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    uint _2816 = _274 + 6u;
    float _2824 = _1017 / cbSceneParam._m0[86u].x;
    float _2825 = _1018 / cbSceneParam._m0[86u].y;
    vec4 _2839 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2824, _2825, (log2((isnan(cbSceneParam._m0[77u].w) ? _950 : (isnan(_950) ? cbSceneParam._m0[77u].w : min(_950, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2841 = _2839.x;
    float _2842 = _2839.y;
    float _2843 = _2839.z;
    float _2844 = _2839.w;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    if (_950 > cbSceneParam._m0[78u].w)
    {
        float _2899 = isnan(_950) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _950 : min(cbSceneParam._m0[80u].w, _950));
        float _2900 = _2899 / _950;
        float _2911 = _2900 * _1002;
        float _2912 = _1003 * _2900;
        float _2913 = (-0.0) - _2912;
        float _2915 = _2900 * _1004;
        float _2917 = (cbSceneParam._m0[77u].w * _2913) / _2899;
        float _2918 = _2917 + cbSceneParam._m0[79u].w;
        float _2919 = cbSceneParam._m0[79u].w - _2912;
        float _2925 = sqrt(((_2911 * _2911) + (_2912 * _2912)) + (_2915 * _2915));
        float _2928 = (1.0 - (cbSceneParam._m0[77u].w / _2899)) * _2925;
        float _2933 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2935 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3088;
        if (abs((_2913 - _2917) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3088 = ((((_2918 > 0.0) ? exp2(_2933 * _2918) : (2.0 - exp2(_2935 * _2918))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2928;
        }
        else
        {
            float _3048 = 1.0 / cbSceneParam._m0[80u].x;
            float _3049 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : max(_2918, _2919));
            float _3050 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : min(_2918, _2919));
            float _3059 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : min(_3049, 0.0));
            float _3060 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : min(_3050, 0.0));
            _3088 = ((abs(_2925 / _2913) * cbSceneParam._m0[80u].y) * ((((_3059 - _3060) * 2.0) - ((exp2(_2933 * (isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0)))) - exp2(_2933 * (isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0))))) * _3048)) - ((exp2(_2935 * _3059) - exp2(_2935 * _3060)) * _3048))) + (_2928 * cbSceneParam._m0[80u].z);
        }
        vec4 _3090 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2824, _2825, 1.0), 0.0);
        float _3099 = exp2((_3088 * (-1.44269502162933349609375)) * (1.0 - _3090.w));
        float _3100 = log2(_3099);
        float _3116 = log2(_2844);
        _2937 = (exp2(_3116 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3100 * cbSceneParam._m0[78u].x)) * _3090.x) / cbSceneParam._m0[78u].x)) + _2841;
        _2939 = (exp2(_3116 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3100 * cbSceneParam._m0[78u].y)) * _3090.y) / cbSceneParam._m0[78u].y)) + _2842;
        _2941 = (exp2(_3116 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3100 * cbSceneParam._m0[78u].z)) * _3090.z) / cbSceneParam._m0[78u].z)) + _2843;
        _2943 = _3099 * _2844;
    }
    else
    {
        _2937 = _2841;
        _2939 = _2842;
        _2941 = _2843;
        _2943 = _2844;
    }
    float _2955 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2956 = _2955 == 3.0;
    float _2957 = log2(_2943);
    float _2964 = exp2(_2957 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2786 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1080))) + ((_2792 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1883)) * cbPerFrame._m0[3u].x));
    float _2965 = exp2(_2957 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2788 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1080))) + ((_2794 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1883)) * cbPerFrame._m0[3u].x));
    float _2966 = exp2(_2957 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2790 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1080))) + ((_2796 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1883)) * cbPerFrame._m0[3u].x));
    float _2975 = (_2955 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2975 * (_2956 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2937)));
    SV_Target.y = _2975 * (_2956 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2939)));
    SV_Target.z = _2975 * (_2956 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2941)));
    SV_Target.w = cbInstanceData._m0[_2816].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2816].w;
}


