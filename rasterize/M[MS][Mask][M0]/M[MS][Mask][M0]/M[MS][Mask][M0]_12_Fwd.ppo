#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1144;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _296.x * cbMtdParam._m0[11u].x;
    float _302 = _296.y * cbMtdParam._m0[11u].y;
    float _303 = _296.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _378 = _376.x;
    float _390 = dot(vec4(_378, _376.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_378 - _390) * cbMtdParam._m0[24u].z) + _390) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3451 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _421 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _272.x) * ((_408 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301);
    float _424 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _272.y) * ((_408 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302);
    float _427 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _272.z) * ((_408 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303);
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _462 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _464 = _462.x;
    float _465 = _462.y;
    float _466 = _462.z;
    float _475 = ((_445.z - _466) * _408) + _466;
    float _478 = ((((_445.x - _464) * _408) + _464) * 2.0) + (-1.0);
    float _480 = ((((_445.y - _465) * _408) + _465) * 2.0) + (-1.0);
    float _481 = dot(vec2(_478, _480), vec2(_478, _480));
    float _3462 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _529 = _527.x;
    float _530 = 1.0 - _529;
    float _543 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_529 - _530) * cbMtdParam._m0[24u].w) + _530) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3473 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _551 = (_544 * (cbMtdParam._m0[17u].x - _421)) + _421;
    float _552 = (_544 * (cbMtdParam._m0[17u].y - _424)) + _424;
    float _553 = (_544 * (cbMtdParam._m0[17u].z - _427)) + _427;
    float _557 = (cbMtdParam._m0[19u].w * (_502.z - _475)) + _475;
    vec4 _570 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _577 = (_570.x * 2.0) + (-1.0);
    float _578 = (_570.y * 2.0) + (-1.0);
    float _579 = dot(vec2(_577, _578), vec2(_577, _578));
    float _3484 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _587 = (_544 * (_570.z - _557)) + _557;
    float _590 = (((_502.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _478;
    float _591 = (((_502.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _480;
    float _603 = (((_577 - _590) + (cbMtdParam._m0[21u].x * _590)) * _544) + _590;
    float _604 = (((_578 - _591) + (cbMtdParam._m0[21u].x * _591)) * _544) + _591;
    float _605 = (_544 * (sqrt(1.0 - (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) - _486)) + _486;
    float _609 = cbMtdParam._m0[22u].x + _502.w;
    float _612 = fma(_605, _219 * NORMAL.x, fma(_604, _226 * TANGENT.x, (_212 * _204) * _603));
    float _615 = fma(_605, _219 * NORMAL.y, fma(_604, _226 * TANGENT.y, (_212 * _205) * _603));
    float _618 = fma(_605, _219 * NORMAL.z, fma(_604, _226 * TANGENT.z, (_212 * _206) * _603));
    float _622 = inversesqrt(dot(vec3(_612, _615, _618), vec3(_612, _615, _618)));
    float _623 = _622 * _612;
    float _624 = _622 * _615;
    float _625 = _622 * _618;
    float _3495 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _626 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _3517 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _3528 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3539 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _644 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _695 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _685);
    float _696 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _685);
    float _697 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _685);
    float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
    float _702 = _695 * _701;
    float _703 = _696 * _701;
    float _704 = _697 * _701;
    float _710 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _711 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _729 = fma(_625, cbSceneParam._m0[5u].z, fma(_624, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _623));
    float _732 = fma(_625, cbSceneParam._m0[6u].z, fma(_624, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _623));
    float _735 = fma(_625, cbSceneParam._m0[7u].z, fma(_624, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _623));
    uint _749 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _755 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_749].x;
    float _756 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_749].y;
    float _757 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_749].z;
    float _3550 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    vec4 _769 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _710, cbSceneParam._m0[86u].y * _711));
    float _773 = ((isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * TEXCOORD_5.w) * _769.x;
    float _774 = dot(vec3(_623, _624, _625), vec3(_702, _703, _704));
    float _777 = _774 * 2.0;
    float _781 = (_777 * _623) - _702;
    float _782 = (_777 * _624) - _703;
    float _783 = (_777 * _625) - _704;
    float _787 = abs(dot(vec3(_702, _703, _704), vec3(_623, _624, _625)));
    float _3583 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _789 = sqrt(_626);
    float _802 = exp2((_789 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_789 * 3.0));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1143;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _868 = fma(_842, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _834));
        float _872 = fma(_842, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _834));
        float _876 = fma(_842, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _834));
        float _901 = _834 + _623;
        float _902 = _838 + _624;
        float _903 = _842 + _625;
        float _913 = fma(_903, cbModelParam._m0[26u].z, fma(_902, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _901)) - _868;
        float _914 = fma(_903, cbModelParam._m0[27u].z, fma(_902, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _901)) - _872;
        float _915 = fma(_903, cbModelParam._m0[28u].z, fma(_902, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _901)) - _876;
        float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
        float _932 = ((_919 * _913) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_868 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _933 = ((_919 * _914) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_872 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _934 = ((_919 * _915) / cbModelParam._m0[34u].z) + ((((((_876 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        float _971 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_937.x + (-0.5));
        float _973 = _971 * (_937.y + (-0.5));
        float _974 = _971 * (_937.z + (-0.5));
        float _981 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_944.x + (-0.5));
        float _983 = _981 * (_944.y + (-0.5));
        float _984 = _981 * (_944.z + (-0.5));
        float _991 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_951.x + (-0.5));
        float _993 = _991 * (_951.y + (-0.5));
        float _994 = _991 * (_951.z + (-0.5));
        float _1001 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_958.x + (-0.5));
        float _1003 = _1001 * (_958.y + (-0.5));
        float _1004 = _1001 * (_958.z + (-0.5));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = _972 * 0.5;
        float _1009 = _982 * 0.5;
        float _1010 = _992 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1025 = (dot(vec3(_623, _624, _625), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1035 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3631 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1037 + 1.0))) + _1042) * _1005;
        float _1052 = _973 * 0.5;
        float _1053 = _983 * 0.5;
        float _1054 = _993 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_623, _624, _625), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3664 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1079 + 1.0))) + _1084) * _1006;
        float _1094 = _974 * 0.5;
        float _1095 = _984 * 0.5;
        float _1096 = _994 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_623, _624, _625), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3697 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1121 + 1.0))) + _1126) * _1007;
        _1143 = _974;
        _1145 = _973;
        _1146 = _972;
        _1147 = _984;
        _1148 = _983;
        _1149 = _982;
        _1150 = _994;
        _1151 = _993;
        _1152 = _992;
        _1153 = _1007;
        _1154 = _1006;
        _1155 = _1005;
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
    }
    else
    {
        _1143 = _1144;
        _1145 = _1144;
        _1146 = _1144;
        _1147 = _1144;
        _1148 = _1144;
        _1149 = _1144;
        _1150 = _1144;
        _1151 = _1144;
        _1152 = _1144;
        _1153 = _1144;
        _1154 = _1144;
        _1155 = _1144;
        _1156 = 0.0;
        _1157 = 0.0;
        _1158 = 0.0;
    }
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1183 = fma(_842, cbModelParam._m0[30u].z, fma(_838, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _834));
        float _1187 = fma(_842, cbModelParam._m0[31u].z, fma(_838, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _834));
        float _1191 = fma(_842, cbModelParam._m0[32u].z, fma(_838, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _834));
        float _1214 = _834 + _623;
        float _1215 = _838 + _624;
        float _1216 = _842 + _625;
        float _1226 = fma(_1216, cbModelParam._m0[30u].z, fma(_1215, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1214)) - _1183;
        float _1227 = fma(_1216, cbModelParam._m0[31u].z, fma(_1215, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1214)) - _1187;
        float _1228 = fma(_1216, cbModelParam._m0[32u].z, fma(_1215, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1214)) - _1191;
        float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
        float _1245 = ((_1232 * _1226) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1183 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1232 * _1227) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1187 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1232 * _1228) / cbModelParam._m0[35u].z) + ((((((_1191 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        float _1282 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1249.x + (-0.5));
        float _1284 = _1282 * (_1249.y + (-0.5));
        float _1285 = _1282 * (_1249.z + (-0.5));
        float _1292 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1256.x + (-0.5));
        float _1294 = _1292 * (_1256.y + (-0.5));
        float _1295 = _1292 * (_1256.z + (-0.5));
        float _1302 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1263.x + (-0.5));
        float _1304 = _1302 * (_1263.y + (-0.5));
        float _1305 = _1302 * (_1263.z + (-0.5));
        float _1312 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1270.x + (-0.5));
        float _1314 = _1312 * (_1270.y + (-0.5));
        float _1315 = _1312 * (_1270.z + (-0.5));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = _1283 * 0.5;
        float _1320 = _1293 * 0.5;
        float _1321 = _1303 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_623, _624, _625), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3760 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1346 + 1.0))) + _1351) * _1316;
        float _1361 = _1284 * 0.5;
        float _1362 = _1294 * 0.5;
        float _1363 = _1304 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_623, _624, _625), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3793 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1388 + 1.0))) + _1393) * _1317;
        float _1403 = _1285 * 0.5;
        float _1404 = _1295 * 0.5;
        float _1405 = _1305 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_623, _624, _625), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3826 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1430 + 1.0))) + _1435) * _1318;
        _1452 = _1285;
        _1453 = _1284;
        _1454 = _1283;
        _1455 = _1295;
        _1456 = _1294;
        _1457 = _1293;
        _1458 = _1305;
        _1459 = _1304;
        _1460 = _1303;
        _1461 = _1318;
        _1462 = _1317;
        _1463 = _1316;
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
    }
    else
    {
        _1452 = _1144;
        _1453 = _1144;
        _1454 = _1144;
        _1455 = _1144;
        _1456 = _1144;
        _1457 = _1144;
        _1458 = _1144;
        _1459 = _1144;
        _1460 = _1144;
        _1461 = _1144;
        _1462 = _1144;
        _1463 = _1144;
        _1464 = 0.0;
        _1465 = 0.0;
        _1466 = 0.0;
    }
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1156)) + _1156;
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1157)) + _1157;
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1158)) + _1158;
    float _1499 = fma(_1478, cbSceneParam._m0[89u].z, fma(_1477, cbSceneParam._m0[89u].y, _1476 * cbSceneParam._m0[89u].x));
    float _1502 = fma(_1478, cbSceneParam._m0[90u].z, fma(_1477, cbSceneParam._m0[90u].y, _1476 * cbSceneParam._m0[90u].x));
    float _1505 = fma(_1478, cbSceneParam._m0[91u].z, fma(_1477, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1476));
    float _1520 = _781 * 0.5;
    float _1521 = _782 * 0.5;
    float _1522 = _783 * 0.5;
    float _1523 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1526 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1529 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1563;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1536 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1143, _1147, _1150, _1153));
        float _1540 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1145, _1148, _1151, _1154));
        float _1544 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1146, _1149, _1152, _1155));
        float _1551 = dot(vec4(cbModelParam._m0[39u]), vec4(_1520, _1521, _1522, 1.0));
        _1563 = dot(vec3(isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1551) ? 0.0 : (isnan(0.0) ? _1551 : max(0.0, _1551))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1563 = 1.0;
    }
    float _1574;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1565 = dot(vec4(cbModelParam._m0[40u]), vec4(_1520, _1521, _1522, 1.0));
        _1574 = dot(vec3(isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1565) ? 0.0 : (isnan(0.0) ? _1565 : max(0.0, _1565))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1574 = 1.0;
    }
    float _1578 = (_1574 * cbModelParam._m0[1u].x) + (_1563 * (1.0 - cbModelParam._m0[1u].x));
    float _1588 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _626);
    float _1589 = isnan(_1588) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1588 : min(cbModelParam._m0[25u].z, _1588));
    float _1670;
    float _1672;
    float _1674;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1637 = fma(_842, cbModelParam._m0[13u].z, fma(_838, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _834)) + cbModelParam._m0[13u].w;
        float _1641 = fma(_842, cbModelParam._m0[14u].z, fma(_838, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _834)) + cbModelParam._m0[14u].w;
        float _1645 = fma(_842, cbModelParam._m0[15u].z, fma(_838, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _834)) + cbModelParam._m0[15u].w;
        float _1648 = fma(_783, cbModelParam._m0[13u].z, fma(_782, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781));
        float _1651 = fma(_783, cbModelParam._m0[14u].z, fma(_782, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781));
        float _1654 = fma(_783, cbModelParam._m0[15u].z, fma(_782, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781));
        float _1682;
        if (_1648 > 0.0)
        {
            _1682 = abs((1.0 - _1637) / _1648);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1637 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1682 = frontier_phi_14_12_ladder;
        }
        float _1883;
        if (_1651 > 0.0)
        {
            _1883 = abs((1.0 - _1641) / _1651);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1641 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1883 = frontier_phi_23_19_ladder;
        }
        float _2126;
        if (_1654 > 0.0)
        {
            _2126 = abs((1.0 - _1645) / _1654);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1645 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2126 = frontier_phi_35_30_ladder;
        }
        float _2128 = isnan(_1883) ? _1682 : (isnan(_1682) ? _1883 : min(_1682, _1883));
        float _2129 = isnan(_2126) ? _2128 : (isnan(_2128) ? _2126 : min(_2128, _2126));
        float _2133 = (_2129 * _1648) + _1637;
        float _2134 = (_2129 * _1651) + _1641;
        float _2135 = (_2129 * _1654) + _1645;
        float _2136 = _2129 * 9.9999997473787516355514526367188e-05;
        float _2138 = (-1.0) - _2136;
        float _2140 = _2136 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2135 > _2140) || ((_2135 < _2138) || ((_2134 > _2140) || ((_2134 < _2138) || ((_2133 < _2138) || (_2133 > _2140))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2259 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2135, cbModelParam._m0[9u].z, fma(_2134, cbModelParam._m0[9u].y, _2133 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2135, cbModelParam._m0[10u].z, fma(_2134, cbModelParam._m0[10u].y, _2133 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2135, cbModelParam._m0[11u].z, fma(_2134, cbModelParam._m0[11u].y, _2133 * cbModelParam._m0[11u].x))), _1589);
            frontier_phi_13_35_ladder = _2259.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2259.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2259.x * cbModelParam._m0[1u].y;
        }
        _1670 = frontier_phi_13_35_ladder_2;
        _1672 = frontier_phi_13_35_ladder_1;
        _1674 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_781, _782, _783), _1589);
        _1670 = _1658.x * cbModelParam._m0[1u].y;
        _1672 = _1658.y * cbModelParam._m0[1u].y;
        _1674 = _1658.z * cbModelParam._m0[1u].y;
    }
    float _1678 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _626);
    float _1679 = isnan(_1678) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1678 : min(cbModelParam._m0[25u].w, _1678));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1733 = fma(_842, cbModelParam._m0[21u].z, fma(_838, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _834)) + cbModelParam._m0[21u].w;
        float _1737 = fma(_842, cbModelParam._m0[22u].z, fma(_838, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _834)) + cbModelParam._m0[22u].w;
        float _1741 = fma(_842, cbModelParam._m0[23u].z, fma(_838, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _834)) + cbModelParam._m0[23u].w;
        float _1744 = fma(_783, cbModelParam._m0[21u].z, fma(_782, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781));
        float _1747 = fma(_783, cbModelParam._m0[22u].z, fma(_782, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781));
        float _1750 = fma(_783, cbModelParam._m0[23u].z, fma(_782, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781));
        float _1888;
        if (_1744 > 0.0)
        {
            _1888 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1888 = frontier_phi_25_21_ladder;
        }
        float _2153;
        if (_1747 > 0.0)
        {
            _2153 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2153 = frontier_phi_37_32_ladder;
        }
        float _2358;
        if (_1750 > 0.0)
        {
            _2358 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2358 = frontier_phi_46_43_ladder;
        }
        float _2360 = isnan(_2153) ? _1888 : (isnan(_1888) ? _2153 : min(_1888, _2153));
        float _2361 = isnan(_2358) ? _2360 : (isnan(_2360) ? _2358 : min(_2360, _2358));
        float _2365 = (_2361 * _1744) + _1733;
        float _2366 = (_2361 * _1747) + _1737;
        float _2367 = (_2361 * _1750) + _1741;
        float _2368 = _2361 * 9.9999997473787516355514526367188e-05;
        float _2369 = (-1.0) - _2368;
        float _2371 = _2368 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2367 > _2371) || ((_2367 < _2369) || ((_2366 > _2371) || ((_2366 < _2369) || ((_2365 < _2369) || (_2365 > _2371))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2367, cbModelParam._m0[17u].z, fma(_2366, cbModelParam._m0[17u].y, _2365 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2367, cbModelParam._m0[18u].z, fma(_2366, cbModelParam._m0[18u].y, _2365 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2367, cbModelParam._m0[19u].z, fma(_2366, cbModelParam._m0[19u].y, _2365 * cbModelParam._m0[19u].x))), _1679);
            frontier_phi_22_46_ladder = _2566.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2566.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2566.x * cbModelParam._m0[1u].z;
        }
        _1769 = frontier_phi_22_46_ladder_2;
        _1771 = frontier_phi_22_46_ladder_1;
        _1773 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_781, _782, _783), _1679);
        _1769 = _1753.x * cbModelParam._m0[1u].z;
        _1771 = _1753.y * cbModelParam._m0[1u].z;
        _1773 = _1753.z * cbModelParam._m0[1u].z;
    }
    float _1785 = ((((1.0 - _802) * ((_789 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_802 * _789)) * _773;
    float _1786 = _1785 * ((cbModelParam._m0[1u].w * (_1769 - _1670)) + _1670);
    float _1787 = _1785 * ((cbModelParam._m0[1u].w * (_1771 - _1672)) + _1672);
    float _1788 = _1785 * ((cbModelParam._m0[1u].w * (_1773 - _1674)) + _1674);
    float _1791 = fma(_1788, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1794 = fma(_1788, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1797 = fma(_1788, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, _1786 * cbSceneParam._m0[91u].x));
    uvec4 _1807 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1809 = _1807.x * 14u;
    uint _1810 = _1809 + 13u;
    float _1817 = _773 + (-1.0);
    float _1822 = (cbLight._m0[_1810].x * _1817) + 1.0;
    float _1823 = (cbLight._m0[_1810].y * _1817) + 1.0;
    float _1824 = (cbLight._m0[_1810].z * _1817) + 1.0;
    float _1825 = (cbLight._m0[_1810].w * _1817) + 1.0;
    uint _1826 = _1809 + 5u;
    float _1832 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
    uint _1836 = _1809 + 4u;
    float _1842 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1846 = _1809 | 1u;
    float _1857 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_623, _624, _625));
    float _1860 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_623, _624, _625));
    float _3962 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _3973 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1865 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.3183098733425140380859375;
    float _1867 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.3183098733425140380859375;
    float _1874 = ((cbLight._m0[_1826].x * _1832) * _1867) + ((cbLight._m0[_1836].x * _1842) * _1865);
    float _1875 = ((_1832 * cbLight._m0[_1826].y) * _1867) + ((_1842 * cbLight._m0[_1836].y) * _1865);
    float _1876 = ((_1832 * cbLight._m0[_1826].z) * _1867) + ((_1842 * cbLight._m0[_1836].z) * _1865);
    uvec4 _1880 = floatBitsToUint(cbLight._m0[_1809 + 12u]);
    bool _1882 = _1880.x == 0u;
    float _1893;
    float _1895;
    float _1897;
    if (_1882)
    {
        _1893 = _1874;
        _1895 = _1875;
        _1897 = _1876;
    }
    else
    {
        uint _1901 = _1809 + 6u;
        float _1917 = (dot(vec3(cbLight._m0[_1809 + 2u].xyz), vec3(_623, _624, _625)) * 0.5) + 0.5;
        float _1918 = _1917 * _1917;
        float _3984 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1920 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _1893 = (((cbLight._m0[_1901].x * 0.3183098733425140380859375) * _1919) * _1920) + _1874;
        _1895 = (((cbLight._m0[_1901].y * 0.3183098733425140380859375) * _1919) * _1920) + _1875;
        _1897 = (((cbLight._m0[_1901].z * 0.3183098733425140380859375) * _1919) * _1920) + _1876;
    }
    bool _1900 = _1880.y == 0u;
    float _1938;
    float _1940;
    float _1942;
    if (_1900)
    {
        _1938 = _1893;
        _1940 = _1895;
        _1942 = _1897;
    }
    else
    {
        uint _2097 = _1809 + 7u;
        float _2113 = (dot(vec3(cbLight._m0[_1809 + 3u].xyz), vec3(_623, _624, _625)) * 0.5) + 0.5;
        float _2114 = _2113 * _2113;
        float _4000 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2115 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2116 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
        _1938 = (((cbLight._m0[_2097].x * 0.3183098733425140380859375) * _2115) * _2116) + _1893;
        _1940 = (((cbLight._m0[_2097].y * 0.3183098733425140380859375) * _2115) * _2116) + _1895;
        _1942 = (((cbLight._m0[_2097].z * 0.3183098733425140380859375) * _2115) * _2116) + _1897;
    }
    uint _1945 = _1809 + 8u;
    float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1809].w)) * _626) * 0.949999988079071044921875);
    float _1959 = _1958 * _1958;
    float _1960 = cbLight._m0[_1809].x + _702;
    float _1961 = cbLight._m0[_1809].y + _703;
    float _1962 = cbLight._m0[_1809].z + _704;
    float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
    float _1967 = _1966 * _1960;
    float _1968 = _1966 * _1961;
    float _1969 = _1966 * _1962;
    float _1970 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_1809].xyz));
    float _4016 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _1974 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1975 = dot(vec3(_623, _624, _625), vec3(_1967, _1968, _1969));
    float _4038 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1979 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_1967, _1968, _1969));
    float _4049 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1983 = _1959 * _1959;
    float _1987 = ((_1978 * _1978) * (_1983 + (-1.0))) + 1.0;
    float _1998 = (exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1999 = 1.0 - _1959;
    float _2010 = (0.5 / (((_1974 * ((_1973 * _1999) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _1999) + _1959) * _1973))) * _1973;
    float _4060 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2012 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1983 / ((_1987 * _1987) * 3.141590118408203125));
    uint _2023 = _1809 + 9u;
    float _2034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _626) * 0.949999988079071044921875);
    float _2035 = _2034 * _2034;
    float _2036 = cbLight._m0[_1846].x + _702;
    float _2037 = cbLight._m0[_1846].y + _703;
    float _2038 = cbLight._m0[_1846].z + _704;
    float _2042 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
    float _2043 = _2042 * _2036;
    float _2044 = _2042 * _2037;
    float _2045 = _2042 * _2038;
    float _2046 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_1846].xyz));
    float _4071 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _2050 = dot(vec3(_623, _624, _625), vec3(_2043, _2044, _2045));
    float _4082 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _2054 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2043, _2044, _2045));
    float _4093 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2058 = _2035 * _2035;
    float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
    float _2071 = (exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2072 = 1.0 - _2035;
    float _2082 = (0.5 / (((_1974 * ((_2049 * _2072) + _2035)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2072) + _2035) * _2049))) * _2049;
    float _4104 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2084 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
    float _2094 = (((_2071 * cbLight._m0[_2023].x) * _2084) * _1832) + (((_1998 * cbLight._m0[_1945].x) * _2012) * _1842);
    float _2095 = (((_2071 * cbLight._m0[_2023].y) * _2084) * _1832) + (((_1998 * cbLight._m0[_1945].y) * _2012) * _1842);
    float _2096 = (((_2071 * cbLight._m0[_2023].z) * _2084) * _1832) + (((_1998 * cbLight._m0[_1945].z) * _2012) * _1842);
    float _2158;
    float _2160;
    float _2162;
    if (_1882)
    {
        _2158 = _2094;
        _2160 = _2095;
        _2162 = _2096;
    }
    else
    {
        uint _2164 = _1809 + 2u;
        uint _2168 = _1809 + 10u;
        float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _626) * 0.949999988079071044921875);
        float _2183 = _2182 * _2182;
        float _2184 = cbLight._m0[_2164].x + _702;
        float _2185 = cbLight._m0[_2164].y + _703;
        float _2186 = cbLight._m0[_2164].z + _704;
        float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
        float _2191 = _2190 * _2184;
        float _2192 = _2190 * _2185;
        float _2193 = _2190 * _2186;
        float _2194 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_2164].xyz));
        float _4115 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2198 = dot(vec3(_623, _624, _625), vec3(_2191, _2192, _2193));
        float _4126 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2202 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2191, _2192, _2193));
        float _4137 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2206 = _2183 * _2183;
        float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
        float _2219 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2220 = 1.0 - _2183;
        float _2230 = (0.5 / (((_1974 * ((_2197 * _2220) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2220) + _2183) * _2197))) * _2197;
        float _4148 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2232 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
        float _2233 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _2158 = (((_2219 * cbLight._m0[_2168].x) * _2232) * _2233) + _2094;
        _2160 = (((_2219 * cbLight._m0[_2168].y) * _2232) * _2233) + _2095;
        _2162 = (((_2219 * cbLight._m0[_2168].z) * _2232) * _2233) + _2096;
    }
    float _2268;
    float _2270;
    float _2272;
    if (_1900)
    {
        _2268 = _2158;
        _2270 = _2160;
        _2272 = _2162;
    }
    else
    {
        uint _2279 = _1809 + 3u;
        uint _2283 = _1809 + 11u;
        float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _626) * 0.949999988079071044921875);
        float _2298 = _2297 * _2297;
        float _2299 = cbLight._m0[_2279].x + _702;
        float _2300 = cbLight._m0[_2279].y + _703;
        float _2301 = cbLight._m0[_2279].z + _704;
        float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
        float _2306 = _2305 * _2299;
        float _2307 = _2305 * _2300;
        float _2308 = _2305 * _2301;
        float _2309 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_2279].xyz));
        float _4164 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2313 = dot(vec3(_623, _624, _625), vec3(_2306, _2307, _2308));
        float _4175 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2317 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2306, _2307, _2308));
        float _4186 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2321 = _2298 * _2298;
        float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
        float _2334 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2335 = 1.0 - _2298;
        float _2345 = (0.5 / (((_1974 * ((_2312 * _2335) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2335) + _2298) * _2312))) * _2312;
        float _4197 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2347 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
        float _2348 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
        _2268 = (((_2334 * cbLight._m0[_2283].x) * _2347) * _2348) + _2158;
        _2270 = (((_2334 * cbLight._m0[_2283].y) * _2347) * _2348) + _2160;
        _2272 = (((_2334 * cbLight._m0[_2283].z) * _2347) * _2348) + _2162;
    }
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    if (_1807.y == 0u)
    {
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2423;
        float _2425 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2423;
        float _2426 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2423;
        uvec4 _2438 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2439 = _2438.x;
        uint _2450 = uint((float(_2438.y) * floor(float(uint(cbSceneParam._m0[85u].y * _711) / _2439))) + floor(float(uint(cbSceneParam._m0[85u].x * _710) / _2439)));
        float _2460 = (log2(_2426 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2461 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        uint _2464 = uint(isnan(14.0) ? _2461 : (isnan(_2461) ? 14.0 : min(_2461, 14.0)));
        uvec4 _2469 = texelFetch(g_lightClusterGridBuffer, int(((_2464 << 2u) + (_2450 << 6u)) >> 2u));
        uint _2470 = _2469.x;
        uint _2471 = _2438.z;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        if (((((1u << ((_2471 >> 4u) & 15u)) + 4294967295u) & _2470) == 0u) || ((_2471 & 240u) == 0u))
        {
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
        }
        else
        {
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2582;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            uint _2722 = 0u;
            uint _2731;
            bool _2732;
            for (;;)
            {
                _2731 = texelFetch(g_lightClassification, int((((_2464 << 5u) + (_2450 << 9u)) + (_2722 << 2u)) >> 2u)).x;
                _2732 = _2731 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2732)
                {
                    frontier_phi_61_pred = _2716;
                    frontier_phi_61_pred_1 = _2721;
                    frontier_phi_61_pred_2 = _2720;
                    frontier_phi_61_pred_3 = _2719;
                    frontier_phi_61_pred_4 = _2718;
                    frontier_phi_61_pred_5 = _2717;
                }
                else
                {
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    uint _2846;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2720;
                    _2845 = _2721;
                    _2846 = _2731;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    for (;;)
                    {
                        uint _2850 = uint(findLSB(_2846)) + (_2722 << 5u);
                        uint _2847 = (_2846 + 4294967295u) & _2846;
                        uint _2852 = _2850 * 48u;
                        vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2852)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 3u)).x));
                        uint _2872 = (_2850 * 48u) + 4u;
                        vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 3u)).x));
                        uint _2891 = (_2850 * 48u) + 8u;
                        vec3 _2902 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x));
                        float _2906 = _2866.x - _2424;
                        float _2907 = _2866.y - _2425;
                        float _2908 = _2866.z - _2426;
                        float _2909 = dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908));
                        float _2912 = inversesqrt(_2909);
                        float _2913 = _2912 * _2906;
                        float _2914 = _2912 * _2907;
                        float _2915 = _2912 * _2908;
                        float _2916 = dot(vec3(_729, _732, _735), vec3(_2913, _2914, _2915));
                        float _2921 = 1.0 - (_2909 * _2866.w);
                        float _4223 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2922 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2923 = sqrt(_2909) * _2885.w;
                        float _2926 = 1.39999997615814208984375 / (_2923 + 1.39999997615814208984375);
                        float _2927 = _2926 * _2926;
                        float _2930 = ((1.0 - _2927) * _2916) + _2927;
                        float _2933 = _2923 * _2923;
                        float _2937 = ((isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0))) * _2922) / ((_2933 * 0.699999988079071044921875) + 1.0);
                        float _2941 = (-0.0) - _2424;
                        float _2942 = (-0.0) - _2425;
                        float _2943 = (-0.0) - _2426;
                        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
                        float _2948 = _2947 * _2941;
                        float _2949 = _2947 * _2942;
                        float _2950 = _2947 * _2943;
                        float _2958 = exp2(log2(1.0 / ((_2933 * 3.5) + 5.0)) * 0.25);
                        float _2959 = 1.0 - _789;
                        float _2966 = sqrt(1.0 - ((1.0 - (_2959 * _2959)) * (1.0 - (_2958 * _2958))));
                        float _2967 = _2966 * _2966;
                        float _2968 = _2967 * _2967;
                        float _2969 = _2948 + _2913;
                        float _2970 = _2949 + _2914;
                        float _2971 = _2950 + _2915;
                        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
                        float _2979 = dot(vec3(_729, _732, _735), vec3(_2948, _2949, _2950));
                        float _4239 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2982 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2983 = dot(vec3(_729, _732, _735), vec3(_2975 * _2969, _2975 * _2970, _2975 * _2971));
                        float _4250 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2986 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                        float _2990 = ((_2986 * _2986) * (_2968 + (-1.0))) + 1.0;
                        float _2991 = _2926 * _2967;
                        float _2992 = _2991 * _2991;
                        float _2995 = ((1.0 - _2992) * _2916) + _2992;
                        float _4261 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2996 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _2997 = 1.0 - _2967;
                        float _3007 = (0.5 / (((_2996 * ((_2982 * _2997) + _2967)) + 9.9999999392252902907785028219223e-09) + (((_2996 * _2997) + _2967) * _2982))) * _2996;
                        float _4272 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3018 = (((_2968 * 3.1415927410125732421875) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) / ((_2990 * _2990) * ((_2933 * 2.1991131305694580078125) + 3.141590118408203125))) * _2922;
                        _2775 = (_2937 * _2885.x) + _2843;
                        _2776 = (_2937 * _2885.y) + _2844;
                        _2777 = (_2937 * _2885.z) + _2845;
                        _2772 = (_3018 * _2902.x) + _2840;
                        _2773 = (_3018 * _2902.y) + _2841;
                        _2774 = (_3018 * _2902.z) + _2842;
                        if (_2847 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2777;
                            _2846 = _2847;
                        }
                    }
                    frontier_phi_61_pred = _2772;
                    frontier_phi_61_pred_1 = _2777;
                    frontier_phi_61_pred_2 = _2776;
                    frontier_phi_61_pred_3 = _2775;
                    frontier_phi_61_pred_4 = _2774;
                    frontier_phi_61_pred_5 = _2773;
                }
                _2572 = frontier_phi_61_pred;
                _2582 = frontier_phi_61_pred_1;
                _2580 = frontier_phi_61_pred_2;
                _2578 = frontier_phi_61_pred_3;
                _2576 = frontier_phi_61_pred_4;
                _2574 = frontier_phi_61_pred_5;
                uint _2723 = _2722 + 1u;
                if (_2723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2716 = _2572;
                    _2717 = _2574;
                    _2718 = _2576;
                    _2719 = _2578;
                    _2720 = _2580;
                    _2721 = _2582;
                    _2722 = _2723;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
        }
        uvec4 _2585 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2586 = _2585.z;
        uint _2588 = (_2586 >> 8u) & 15u;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        if (((4294967295u << _2588) & _2470) == 0u)
        {
            _2684 = _2571;
            _2686 = _2573;
            _2688 = _2575;
            _2690 = _2577;
            _2692 = _2579;
            _2694 = _2581;
        }
        else
        {
            float _2709 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
            float _2710 = _2709 * _2424;
            float _2711 = _2709 * _2425;
            float _2712 = _2709 * _2426;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2588 < ((_2586 >> 12u) & 15u))
            {
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2823 = _2571;
                float _2824 = _2573;
                float _2825 = _2575;
                float _2826 = _2577;
                float _2827 = _2579;
                float _2828 = _2581;
                uint _2829 = _2588;
                uint _2838;
                bool _2839;
                for (;;)
                {
                    _2838 = texelFetch(g_lightClassification, int((((_2464 << 5u) + (_2450 << 9u)) + (_2829 << 2u)) >> 2u)).x;
                    _2839 = _2838 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2839)
                    {
                        frontier_phi_67_pred = _2826;
                        frontier_phi_67_pred_1 = _2827;
                        frontier_phi_67_pred_2 = _2828;
                        frontier_phi_67_pred_3 = _2825;
                        frontier_phi_67_pred_4 = _2824;
                        frontier_phi_67_pred_5 = _2823;
                    }
                    else
                    {
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3036 = _2823;
                        float _3037 = _2824;
                        float _3038 = _2825;
                        float _3039 = _2826;
                        float _3040 = _2827;
                        float _3041 = _2828;
                        uint _3042 = _2838;
                        uint _3043;
                        vec4 _3068;
                        float _3069;
                        vec4 _3084;
                        vec3 _3096;
                        vec4 _3111;
                        vec4 _3127;
                        float _3173;
                        bool _3174;
                        for (;;)
                        {
                            uint _3053 = ((_2829 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3042));
                            _3043 = (_3042 + 4294967295u) & _3042;
                            uint _3055 = _3053 * 40u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            _3069 = _3068.w;
                            uint _3071 = (_3053 * 40u) + 4u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3053 * 40u) + 8u;
                            _3096 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x));
                            uint _3098 = (_3053 * 40u) + 16u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3114 = (_3053 * 40u) + 20u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3129 = (_3053 * 40u) + 24u;
                            vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3148 = (_3053 * 40u) + 28u;
                            vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            _3173 = fma(_2426, _3161.z, fma(_2425, _3161.y, _3161.x * _2424)) + _3161.w;
                            _3174 = !((fma(_2426, _3142.z, fma(_2425, _3142.y, _3142.x * _2424)) + _3142.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3174)
                            {
                                float _3201 = _3068.x - _2424;
                                float _3202 = _3068.y - _2425;
                                float _3203 = _3068.z - _2426;
                                float _3204 = dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203));
                                float _3207 = inversesqrt(_3204);
                                float _3208 = _3207 * _3201;
                                float _3209 = _3207 * _3202;
                                float _3210 = _3207 * _3203;
                                float _3214 = 1.0 - (_3204 / (_3069 * _3069));
                                float _4283 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3219 = sqrt(_3204) * _3084.w;
                                float _3221 = 1.39999997615814208984375 / (_3219 + 1.39999997615814208984375);
                                float _3222 = _3221 * _3221;
                                float _3225 = ((1.0 - _3222) * dot(vec3(_3208, _3209, _3210), vec3(_729, _732, _735))) + _3222;
                                float _3228 = _3219 * _3219;
                                float _3232 = (fma(_2426, _3111.z, fma(_2425, _3111.y, _3111.x * _2424)) + _3111.w) / _3173;
                                float _3233 = (fma(_2426, _3127.z, fma(_2425, _3127.y, _3127.x * _2424)) + _3127.w) / _3173;
                                float _3237 = 1.0 - dot(vec2(_3232, _3233), vec2(_3232, _3233));
                                float _4299 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3238 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3239 = _3238 * (((isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))) * _3215) / ((_3228 * 0.699999988079071044921875) + 1.0));
                                float _3251 = exp2(log2(1.0 / ((_3228 * 3.5) + 5.0)) * 0.25);
                                float _3252 = 1.0 - _789;
                                float _3259 = sqrt(1.0 - ((1.0 - (_3252 * _3252)) * (1.0 - (_3251 * _3251))));
                                float _3260 = _3259 * _3259;
                                float _3261 = _3260 * _3260;
                                float _3262 = _3208 - _2710;
                                float _3263 = _3209 - _2711;
                                float _3264 = _3210 - _2712;
                                float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                                float _3272 = dot(vec3(_729, _732, _735), vec3((-0.0) - _2710, (-0.0) - _2711, (-0.0) - _2712));
                                float _4310 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3275 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3276 = dot(vec3(_729, _732, _735), vec3(_3268 * _3262, _3268 * _3263, _3268 * _3264));
                                float _4321 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3279 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3283 = ((_3279 * _3279) * (_3261 + (-1.0))) + 1.0;
                                float _3284 = _3221 * _3260;
                                float _3285 = _3284 * _3284;
                                float _3291 = ((1.0 - _3285) * dot(vec3(_729, _732, _735), vec3(_3208, _3209, _3210))) + _3285;
                                float _4332 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3293 = 1.0 - _3260;
                                float _3303 = (0.5 / (((_3292 * ((_3275 * _3293) + _3260)) + 9.9999999392252902907785028219223e-09) + (((_3292 * _3293) + _3260) * _3275))) * _3292;
                                float _4343 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3313 = (_3238 * _3215) * (((_3261 * 3.1415927410125732421875) * (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) / ((_3283 * _3283) * ((_3228 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3313 * _3096.x;
                                frontier_phi_73_pred_1 = _3313 * _3096.y;
                                frontier_phi_73_pred_2 = _3239 * _3084.z;
                                frontier_phi_73_pred_3 = _3239 * _3084.y;
                                frontier_phi_73_pred_4 = _3239 * _3084.x;
                                frontier_phi_73_pred_5 = _3313 * _3096.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3317 = frontier_phi_73_pred;
                            _3318 = frontier_phi_73_pred_1;
                            _3322 = frontier_phi_73_pred_2;
                            _3321 = frontier_phi_73_pred_3;
                            _3320 = frontier_phi_73_pred_4;
                            _3319 = frontier_phi_73_pred_5;
                            _3026 = _3320 + _3039;
                            _3027 = _3321 + _3040;
                            _3028 = _3322 + _3041;
                            _3023 = _3317 + _3036;
                            _3024 = _3318 + _3037;
                            _3025 = _3319 + _3038;
                            if (_3043 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3043;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3026;
                        frontier_phi_67_pred_1 = _3027;
                        frontier_phi_67_pred_2 = _3028;
                        frontier_phi_67_pred_3 = _3025;
                        frontier_phi_67_pred_4 = _3024;
                        frontier_phi_67_pred_5 = _3023;
                    }
                    _2691 = frontier_phi_67_pred;
                    _2693 = frontier_phi_67_pred_1;
                    _2695 = frontier_phi_67_pred_2;
                    _2689 = frontier_phi_67_pred_3;
                    _2687 = frontier_phi_67_pred_4;
                    _2685 = frontier_phi_67_pred_5;
                    uint _2830 = _2829 + 1u;
                    if (_2830 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2823 = _2685;
                        _2824 = _2687;
                        _2825 = _2689;
                        _2826 = _2691;
                        _2827 = _2693;
                        _2828 = _2695;
                        _2829 = _2830;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2693;
                frontier_phi_55_56_ladder_1 = _2695;
                frontier_phi_55_56_ladder_2 = _2691;
                frontier_phi_55_56_ladder_3 = _2689;
                frontier_phi_55_56_ladder_4 = _2687;
                frontier_phi_55_56_ladder_5 = _2685;
            }
            else
            {
                frontier_phi_55_56_ladder = _2579;
                frontier_phi_55_56_ladder_1 = _2581;
                frontier_phi_55_56_ladder_2 = _2577;
                frontier_phi_55_56_ladder_3 = _2575;
                frontier_phi_55_56_ladder_4 = _2573;
                frontier_phi_55_56_ladder_5 = _2571;
            }
            _2684 = frontier_phi_55_56_ladder_5;
            _2686 = frontier_phi_55_56_ladder_4;
            _2688 = frontier_phi_55_56_ladder_3;
            _2690 = frontier_phi_55_56_ladder_2;
            _2692 = frontier_phi_55_56_ladder;
            _2694 = frontier_phi_55_56_ladder_1;
        }
        float _2699 = isnan(1.0) ? _773 : (isnan(_773) ? 1.0 : min(_773, 1.0));
        _2483 = (_2699 * _2690) + _1938;
        _2485 = (_2699 * _2692) + _1940;
        _2487 = (_2699 * _2694) + _1942;
        _2489 = ((_2684 * 0.039999999105930328369140625) * _2699) + _2268;
        _2491 = ((_2686 * 0.039999999105930328369140625) * _2699) + _2270;
        _2493 = ((_2688 * 0.039999999105930328369140625) * _2699) + _2272;
    }
    else
    {
        _2483 = _1938;
        _2485 = _1940;
        _2487 = _1942;
        _2489 = _2268;
        _2491 = _2270;
        _2493 = _2272;
    }
    float _4359 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4370 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4381 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    uint _2513 = _232 + 6u;
    float _2521 = _710 / cbSceneParam._m0[86u].x;
    float _2522 = _711 / cbSceneParam._m0[86u].y;
    vec4 _2536 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2521, _2522, (log2((isnan(cbSceneParam._m0[77u].w) ? _644 : (isnan(_644) ? cbSceneParam._m0[77u].w : min(_644, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2538 = _2536.x;
    float _2539 = _2536.y;
    float _2540 = _2536.z;
    float _2541 = _2536.w;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    if (_644 > cbSceneParam._m0[78u].w)
    {
        float _2596 = isnan(_644) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _644 : min(cbSceneParam._m0[80u].w, _644));
        float _2597 = _2596 / _644;
        float _2608 = _2597 * _695;
        float _2609 = _696 * _2597;
        float _2610 = (-0.0) - _2609;
        float _2612 = _2597 * _697;
        float _2614 = (cbSceneParam._m0[77u].w * _2610) / _2596;
        float _2615 = _2614 + cbSceneParam._m0[79u].w;
        float _2616 = cbSceneParam._m0[79u].w - _2609;
        float _2622 = sqrt(((_2608 * _2608) + (_2609 * _2609)) + (_2612 * _2612));
        float _2625 = (1.0 - (cbSceneParam._m0[77u].w / _2596)) * _2622;
        float _2630 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2632 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2785;
        if (abs((_2610 - _2614) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2785 = ((((_2615 > 0.0) ? exp2(_2630 * _2615) : (2.0 - exp2(_2632 * _2615))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2625;
        }
        else
        {
            float _2745 = 1.0 / cbSceneParam._m0[80u].x;
            float _2746 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : max(_2615, _2616));
            float _2747 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : min(_2615, _2616));
            float _2756 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : min(_2746, 0.0));
            float _2757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : min(_2747, 0.0));
            _2785 = ((abs(_2622 / _2610) * cbSceneParam._m0[80u].y) * ((((_2756 - _2757) * 2.0) - ((exp2(_2630 * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0)))) - exp2(_2630 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0))))) * _2745)) - ((exp2(_2632 * _2756) - exp2(_2632 * _2757)) * _2745))) + (_2625 * cbSceneParam._m0[80u].z);
        }
        vec4 _2787 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2521, _2522, 1.0), 0.0);
        float _2796 = exp2((_2785 * (-1.44269502162933349609375)) * (1.0 - _2787.w));
        float _2797 = log2(_2796);
        float _2813 = log2(_2541);
        _2634 = (exp2(_2813 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2797 * cbSceneParam._m0[78u].x)) * _2787.x) / cbSceneParam._m0[78u].x)) + _2538;
        _2636 = (exp2(_2813 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2797 * cbSceneParam._m0[78u].y)) * _2787.y) / cbSceneParam._m0[78u].y)) + _2539;
        _2638 = (exp2(_2813 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2797 * cbSceneParam._m0[78u].z)) * _2787.z) / cbSceneParam._m0[78u].z)) + _2540;
        _2640 = _2796 * _2541;
    }
    else
    {
        _2634 = _2538;
        _2636 = _2539;
        _2638 = _2540;
        _2640 = _2541;
    }
    float _2652 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2653 = _2652 == 3.0;
    float _2654 = log2(_2640);
    float _2661 = exp2(_2654 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2483 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _773))) + ((_2489 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1578)) * cbPerFrame._m0[3u].x));
    float _2662 = exp2(_2654 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2485 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _773))) + ((_2491 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1578)) * cbPerFrame._m0[3u].x));
    float _2663 = exp2(_2654 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2487 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _773))) + ((_2493 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1578)) * cbPerFrame._m0[3u].x));
    float _2672 = (_2652 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2672 * (_2653 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2634)));
    SV_Target.y = _2672 * (_2653 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2636)));
    SV_Target.z = _2672 * (_2653 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2638)));
    SV_Target.w = cbInstanceData._m0[_2513].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2513].w;
}


